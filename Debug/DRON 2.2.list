
DRON 2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e8a0  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801eb70  0801eb70  00024b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020998  08020998  00026998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080209a0  080209a0  000269a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080209a4  080209a4  000269a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  080209a8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  08020a20  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  08020a20  000278ac  2**0
                  ALLOC
  9 .IRAM         0000420e  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031f12  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ee0  00000000  00000000  0007b650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002460  00000000  00000000  00081530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c2e  00000000  00000000  00083990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c9b4  00000000  00000000  000855be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038806  00000000  00000000  000c1f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e1c5  00000000  00000000  000fa778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0026893d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f94  00000000  00000000  00268980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00272914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801eb58 	.word	0x0801eb58

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801eb58 	.word	0x0801eb58

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e fa86 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e fa50 	bl	800ebcc <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000cc 	.word	0x000000cc

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00e fa2d 	bl	800ebcc <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000fc 	.word	0x000000fc
 80007b8:	000000cc 	.word	0x000000cc

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000f8 	.word	0x000000f8

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00e f8ce 	bl	800e9a4 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00e f8b6 	bl	800e9a4 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e face 	bl	800ee00 <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e fab8 	bl	800ee00 <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00e f97d 	bl	800ebcc <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	000000a6 	.word	0x000000a6
 80009b0:	000000a8 	.word	0x000000a8
 80009b4:	000000aa 	.word	0x000000aa
 80009b8:	000000a0 	.word	0x000000a0
 80009bc:	000000a2 	.word	0x000000a2
 80009c0:	000000a4 	.word	0x000000a4
 80009c4:	000000ac 	.word	0x000000ac
 80009c8:	000000ae 	.word	0x000000ae
 80009cc:	000000b0 	.word	0x000000b0
 80009d0:	000000b2 	.word	0x000000b2
 80009d4:	000000b4 	.word	0x000000b4

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	000000a4 	.word	0x000000a4
 8000a74:	000000a2 	.word	0x000000a2
 8000a78:	000000d0 	.word	0x000000d0
 8000a7c:	000000b2 	.word	0x000000b2
 8000a80:	000000b4 	.word	0x000000b4
 8000a84:	000000d4 	.word	0x000000d4
 8000a88:	000000d8 	.word	0x000000d8
 8000a8c:	000000e8 	.word	0x000000e8

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000c0 	.word	0x000000c0
 8000d18:	000000cc 	.word	0x000000cc
 8000d1c:	000000a4 	.word	0x000000a4
 8000d20:	000000a2 	.word	0x000000a2
 8000d24:	000000d0 	.word	0x000000d0
 8000d28:	000000b2 	.word	0x000000b2
 8000d2c:	000000b4 	.word	0x000000b4
 8000d30:	000000d4 	.word	0x000000d4
 8000d34:	000000d8 	.word	0x000000d8
 8000d38:	000000dc 	.word	0x000000dc
 8000d3c:	000000ae 	.word	0x000000ae
 8000d40:	000000a8 	.word	0x000000a8
 8000d44:	000000e4 	.word	0x000000e4
 8000d48:	000000a6 	.word	0x000000a6
 8000d4c:	000000e0 	.word	0x000000e0
 8000d50:	000000aa 	.word	0x000000aa
 8000d54:	000000ac 	.word	0x000000ac
 8000d58:	000000a0 	.word	0x000000a0
 8000d5c:	000000b8 	.word	0x000000b8
 8000d60:	000000bc 	.word	0x000000bc
 8000d64:	000000ec 	.word	0x000000ec
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fc03 	bl	800958c <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 fbed 	bl	800958c <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000c4 	.word	0x000000c4
 8000de8:	000000e8 	.word	0x000000e8
 8000dec:	000000c8 	.word	0x000000c8
 8000df0:	000000ec 	.word	0x000000ec

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000f4 	.word	0x000000f4

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d907      	bls.n	8000e58 <ESC_1_SPEED+0x24>
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	bf28      	it	cs
 8000e52:	4613      	movcs	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	e001      	b.n	8000e5c <ESC_1_SPEED+0x28>
 8000e58:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e5c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d907      	bls.n	8000e9c <ESC_2_SPEED+0x24>
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e92:	4293      	cmp	r3, r2
 8000e94:	bf28      	it	cs
 8000e96:	4613      	movcs	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	e001      	b.n	8000ea0 <ESC_2_SPEED+0x28>
 8000e9c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ea0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d907      	bls.n	8000ee0 <ESC_3_SPEED+0x24>
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	bf28      	it	cs
 8000eda:	4613      	movcs	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	e001      	b.n	8000ee4 <ESC_3_SPEED+0x28>
 8000ee0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ee4:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d907      	bls.n	8000f24 <ESC_4_SPEED+0x24>
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	bf28      	it	cs
 8000f1e:	4613      	movcs	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	e001      	b.n	8000f28 <ESC_4_SPEED+0x28>
 8000f24:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f28:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 fb9f 	bl	801669c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 fb99 	bl	801669c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 fb93 	bl	801669c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 fb8d 	bl	801669c <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d fc23 	bl	800e804 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 fae3 	bl	800958c <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;
extern float Mag_Y, Mag_X, Mag_Z, heading;
//float HMC5883L_Scale = 0.92;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8001090 <HMC5883L_Init+0xb8>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			15 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x70;
 8000fea:	2370      	movs	r3, #112	@ 0x70
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b28      	ldr	r3, [pc, #160]	@ (8001090 <HMC5883L_Init+0xb8>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fccd 	bl	800e9a4 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xA0;
 800100a:	23a0      	movs	r3, #160	@ 0xa0
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fcbd 	bl	800e9a4 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fcad 	bl	800e9a4 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 800104e:	200a      	movs	r0, #10
 8001050:	f008 fa9c 	bl	800958c <HAL_Delay>

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HMC5883L_Init+0xb8>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	f107 030e 	add.w	r3, r7, #14
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	220a      	movs	r2, #10
 800106a:	213c      	movs	r1, #60	@ 0x3c
 800106c:	f00d fdae 	bl	800ebcc <HAL_I2C_Mem_Read>

	if(status != 0x48){
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	2b48      	cmp	r3, #72	@ 0x48
 8001074:	d002      	beq.n	800107c <HMC5883L_Init+0xa4>
		status = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	73bb      	strb	r3, [r7, #14]
 800107a:	e001      	b.n	8001080 <HMC5883L_Init+0xa8>
	}
	else{
		status = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f008 fa83 	bl	800958c <HAL_Delay>

	return status;
 8001086:	7bbb      	ldrb	r3, [r7, #14]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2400009c 	.word	0x2400009c

08001094 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 800109a:	23b6      	movs	r3, #182	@ 0xb6
 800109c:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, data, 6, 1);
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <HMC5883L_Get_Z_Start+0x40>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	2306      	movs	r3, #6
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	463b      	mov	r3, r7
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	2203      	movs	r2, #3
 80010b2:	213c      	movs	r1, #60	@ 0x3c
 80010b4:	f00d fd8a 	bl	800ebcc <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[2]<<8) | data[3];
 80010b8:	78bb      	ldrb	r3, [r7, #2]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2400009c 	.word	0x2400009c

080010d8 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_X_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x28>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	2306      	movs	r3, #6
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	213c      	movs	r1, #60	@ 0x3c
 80010f0:	f00d ff10 	bl	800ef14 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2400009c 	.word	0x2400009c
 8001104:	00000070 	.word	0x00000070
 8001108:	000041fd 	.word	0x000041fd
 800110c:	00000000 	.word	0x00000000

08001110 <HMC5883L_Get_Z_End_IT>:

void HMC5883L_Get_Z_End_IT(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
//	Mag_Z = (((int16_t)HMC5883L_Data_IT[2]<<8) | HMC5883L_Data_IT[3]) * 2.56;// 2.56 - scale
//	Mag_X = (((int16_t)HMC5883L_Data_IT[0]<<8) | HMC5883L_Data_IT[1]) * 2.56;
//	Mag_Y = (((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5]) * 2.56;
		Mag_X = (((int16_t)HMC5883L_Data_IT[1]<<8) | HMC5883L_Data_IT[0]) * 2.56;//important fake HMC5883L, msb -> lsb
 8001114:	4b32      	ldr	r3, [pc, #200]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	4a31      	ldr	r2, [pc, #196]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	4313      	orrs	r3, r2
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001128:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 800112c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001130:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001134:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <HMC5883L_Get_Z_End_IT+0xd4>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (((int16_t)HMC5883L_Data_IT[3]<<8) | HMC5883L_Data_IT[2]) * 2.56;// 2.56 - scale
 800113a:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 800113c:	78db      	ldrb	r3, [r3, #3]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	4a27      	ldr	r2, [pc, #156]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001142:	7892      	ldrb	r2, [r2, #2]
 8001144:	4313      	orrs	r3, r2
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800114e:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 8001152:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001156:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800115a:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <HMC5883L_Get_Z_End_IT+0xd8>)
 800115c:	edc3 7a00 	vstr	s15, [r3]
		Mag_Y = (((int16_t)HMC5883L_Data_IT[5]<<8) | HMC5883L_Data_IT[4]) * 2.56;
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001162:	795b      	ldrb	r3, [r3, #5]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <HMC5883L_Get_Z_End_IT+0xd0>)
 8001168:	7912      	ldrb	r2, [r2, #4]
 800116a:	4313      	orrs	r3, r2
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001174:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 80011c8 <HMC5883L_Get_Z_End_IT+0xb8>
 8001178:	ee27 7b06 	vmul.f64	d7, d7, d6
 800117c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <HMC5883L_Get_Z_End_IT+0xdc>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
	heading = (atan2(Mag_X, Mag_Y))*180/M_PI;
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HMC5883L_Get_Z_End_IT+0xd4>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HMC5883L_Get_Z_End_IT+0xdc>)
 8001192:	edd3 6a00 	vldr	s13, [r3]
 8001196:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800119a:	eeb0 1b46 	vmov.f64	d1, d6
 800119e:	eeb0 0b47 	vmov.f64	d0, d7
 80011a2:	f01c fff1 	bl	801e188 <atan2>
 80011a6:	eeb0 7b40 	vmov.f64	d7, d0
 80011aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80011d0 <HMC5883L_Get_Z_End_IT+0xc0>
 80011ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80011d8 <HMC5883L_Get_Z_End_IT+0xc8>
 80011b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <HMC5883L_Get_Z_End_IT+0xe0>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	47ae147b 	.word	0x47ae147b
 80011cc:	40047ae1 	.word	0x40047ae1
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40668000 	.word	0x40668000
 80011d8:	54442d18 	.word	0x54442d18
 80011dc:	400921fb 	.word	0x400921fb
 80011e0:	00000070 	.word	0x00000070
 80011e4:	00000060 	.word	0x00000060
 80011e8:	00000058 	.word	0x00000058
 80011ec:	0000005c 	.word	0x0000005c
 80011f0:	00000064 	.word	0x00000064

080011f4 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 80011f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	e014      	b.n	8001238 <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 800120e:	f7ff ff41 	bl	8001094 <HMC5883L_Get_Z_Start>
 8001212:	4603      	mov	r3, r0
 8001214:	b21b      	sxth	r3, r3
 8001216:	17da      	asrs	r2, r3, #31
 8001218:	461c      	mov	r4, r3
 800121a:	4615      	mov	r5, r2
 800121c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001220:	eb12 0804 	adds.w	r8, r2, r4
 8001224:	eb43 0905 	adc.w	r9, r3, r5
 8001228:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 800122c:	2064      	movs	r0, #100	@ 0x64
 800122e:	f008 f9ad 	bl	800958c <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3301      	adds	r3, #1
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b09      	cmp	r3, #9
 800123c:	dde7      	ble.n	800120e <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 800123e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001242:	f04f 020a 	mov.w	r2, #10
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	f7ff f861 	bl	8000310 <__aeabi_ldivmod>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	b213      	sxth	r3, r2
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001260 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 8001268:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <MPU6050_INIT+0x58>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 800126e:	f000 f825 	bl	80012bc <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 8001272:	f000 f88f 	bl	8001394 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 8001276:	2005      	movs	r0, #5
 8001278:	f000 f838 	bl	80012ec <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 800127c:	2008      	movs	r0, #8
 800127e:	f000 f851 	bl	8001324 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 8001282:	2008      	movs	r0, #8
 8001284:	f000 f86a 	bl	800135c <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 8001288:	f000 fd30 	bl	8001cec <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 800128c:	f000 f89a 	bl	80013c4 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 8001290:	200a      	movs	r0, #10
 8001292:	f008 f97b 	bl	800958c <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 8001296:	f000 fd11 	bl	8001cbc <MPU6050_READ_ID>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b68      	cmp	r3, #104	@ 0x68
 80012a2:	d002      	beq.n	80012aa <MPU6050_INIT+0x4a>
		status = 0;//error
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e001      	b.n	80012ae <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	240000a0 	.word	0x240000a0

080012bc <MPU6050_RESET>:


void MPU6050_RESET(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 80012c2:	2300      	movs	r3, #0
 80012c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MPU6050_RESET+0x2c>)
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	226b      	movs	r2, #107	@ 0x6b
 80012da:	21d0      	movs	r1, #208	@ 0xd0
 80012dc:	f00d fb62 	bl	800e9a4 <HAL_I2C_Mem_Write>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	240000a0 	.word	0x240000a0

080012ec <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MPU6050_CONFIG_DLPF+0x34>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2301      	movs	r3, #1
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f107 030f 	add.w	r3, r7, #15
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	221a      	movs	r2, #26
 8001310:	21d0      	movs	r1, #208	@ 0xd0
 8001312:	f00d fb47 	bl	800e9a4 <HAL_I2C_Mem_Write>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240000a0 	.word	0x240000a0

08001324 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af04      	add	r7, sp, #16
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MPU6050_CONFIG_GYRO+0x34>)
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2301      	movs	r3, #1
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	f107 030f 	add.w	r3, r7, #15
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	221b      	movs	r2, #27
 8001348:	21d0      	movs	r1, #208	@ 0xd0
 800134a:	f00d fb2b 	bl	800e9a4 <HAL_I2C_Mem_Write>
}
 800134e:	bf00      	nop
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	240000a0 	.word	0x240000a0

0800135c <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af04      	add	r7, sp, #16
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MPU6050_CONFIG_ACCEL+0x34>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2301      	movs	r3, #1
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f107 030f 	add.w	r3, r7, #15
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	221c      	movs	r2, #28
 8001380:	21d0      	movs	r1, #208	@ 0xd0
 8001382:	f00d fb0f 	bl	800e9a4 <HAL_I2C_Mem_Write>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	240000a0 	.word	0x240000a0

08001394 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	2301      	movs	r3, #1
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	2219      	movs	r2, #25
 80013b2:	21d0      	movs	r1, #208	@ 0xd0
 80013b4:	f00d faf6 	bl	800e9a4 <HAL_I2C_Mem_Write>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	240000a0 	.word	0x240000a0

080013c4 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	226a      	movs	r2, #106	@ 0x6a
 80013e2:	21d0      	movs	r1, #208	@ 0xd0
 80013e4:	f00d fade 	bl	800e9a4 <HAL_I2C_Mem_Write>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	240000a0 	.word	0x240000a0

080013f4 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	@ 0x38
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6178      	str	r0, [r7, #20]
 80013fc:	6139      	str	r1, [r7, #16]
 80013fe:	60fa      	str	r2, [r7, #12]
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	ed87 0a01 	vstr	s0, [r7, #4]
 8001406:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	633b      	str	r3, [r7, #48]	@ 0x30
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e06b      	b.n	800150c <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001434:	f000 fbbe 	bl	8001bb4 <MPU6050_GET_ACCEL_FULLVALUE_X>
 8001438:	4603      	mov	r3, r0
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001442:	ed97 7a00 	vldr	s14, [r7]
 8001446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800144e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001452:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 8001456:	f000 fbcd 	bl	8001bf4 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800145a:	4603      	mov	r3, r0
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001464:	ed97 7a00 	vldr	s14, [r7]
 8001468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001474:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 8001478:	f000 fbd0 	bl	8001c1c <MPU6050_GET_ACCEL_FULLVALUE_Z>
 800147c:	4603      	mov	r3, r0
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001486:	ed97 7a00 	vldr	s14, [r7]
 800148a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001496:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 800149a:	f000 fbd3 	bl	8001c44 <MPU6050_GET_GYRO_FULLVALUE_X>
 800149e:	4603      	mov	r3, r0
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 80014bc:	f000 fbd6 	bl	8001c6c <MPU6050_GET_GYRO_FULLVALUE_Y>
 80014c0:	4603      	mov	r3, r0
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 80014de:	f000 fbd9 	bl	8001c94 <MPU6050_GET_GYRO_FULLVALUE_Z>
 80014e2:	4603      	mov	r3, r0
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80014f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80014f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fc:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001500:	2001      	movs	r0, #1
 8001502:	f008 f843 	bl	800958c <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001512:	db8f      	blt.n	8001434 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001514:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001518:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 800151c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 8001526:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800152a:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 800152e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 8001538:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800153c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 800155e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001562:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001566:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 8001570:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001574:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 8001578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800157e:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 8001582:	ed97 7a08 	vldr	s14, [r7, #32]
 8001586:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800159c <MPU6050_CALIBRATION+0x1a8>
 800158a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001590:	edc3 7a00 	vstr	s15, [r3]
}
 8001594:	bf00      	nop
 8001596:	3738      	adds	r7, #56	@ 0x38
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	447a0000 	.word	0x447a0000

080015a0 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	ed87 0a05 	vstr	s0, [r7, #20]
 80015aa:	edc7 0a04 	vstr	s1, [r7, #16]
 80015ae:	ed87 1a03 	vstr	s2, [r7, #12]
 80015b2:	60b8      	str	r0, [r7, #8]
 80015b4:	6079      	str	r1, [r7, #4]
	float ang1 = sqrt((ax*ax)+(az*az));
 80015b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015be:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ce:	eeb0 0b47 	vmov.f64	d0, d7
 80015d2:	f01c fddd 	bl	801e190 <sqrt>
 80015d6:	eeb0 7b40 	vmov.f64	d7, d0
 80015da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015de:	edc7 7a07 	vstr	s15, [r7, #28]
	float ang2 = sqrt((ay*ay)+(az*az));
 80015e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015fa:	eeb0 0b47 	vmov.f64	d0, d7
 80015fe:	f01c fdc7 	bl	801e190 <sqrt>
 8001602:	eeb0 7b40 	vmov.f64	d7, d0
 8001606:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800160a:	edc7 7a06 	vstr	s15, [r7, #24]

	*ay_ang = ((-1*(atan(ax/ang2)))*180)/M_PI;
 800160e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001612:	ed97 7a06 	vldr	s14, [r7, #24]
 8001616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800161a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800161e:	eeb0 0b47 	vmov.f64	d0, d7
 8001622:	f01c fdd5 	bl	801e1d0 <atan>
 8001626:	eeb0 7b40 	vmov.f64	d7, d0
 800162a:	eeb1 7b47 	vneg.f64	d7, d7
 800162e:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8001688 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001632:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001636:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8001690 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 800163a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800163e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edc3 7a00 	vstr	s15, [r3]
	*ax_ang = ((atan(ay/ang1))*180)/M_PI;
 8001648:	edd7 6a04 	vldr	s13, [r7, #16]
 800164c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001654:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001658:	eeb0 0b47 	vmov.f64	d0, d7
 800165c:	f01c fdb8 	bl	801e1d0 <atan>
 8001660:	eeb0 7b40 	vmov.f64	d7, d0
 8001664:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8001688 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001668:	ee27 6b06 	vmul.f64	d6, d7, d6
 800166c:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 8001690 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 8001670:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001674:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	edc3 7a00 	vstr	s15, [r3]
//	axan = -1*(atan(ax/ang2));
//	ayan= atan(ay/ang1);
//
//	*ay_ang = (axan*180)/M_PI;
//	*ax_ang = (ayan*180)/M_PI;
}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	00000000 	.word	0x00000000
 800168c:	40668000 	.word	0x40668000
 8001690:	54442d18 	.word	0x54442d18
 8001694:	400921fb 	.word	0x400921fb

08001698 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001698:	b580      	push	{r7, lr}
 800169a:	b094      	sub	sp, #80	@ 0x50
 800169c:	af04      	add	r7, sp, #16
 800169e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80016a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80016a4:	623b      	str	r3, [r7, #32]
 80016a6:	ed87 0a07 	vstr	s0, [r7, #28]
 80016aa:	edc7 0a06 	vstr	s1, [r7, #24]
 80016ae:	ed87 1a05 	vstr	s2, [r7, #20]
 80016b2:	edc7 1a04 	vstr	s3, [r7, #16]
 80016b6:	ed87 2a03 	vstr	s4, [r7, #12]
 80016ba:	edc7 2a02 	vstr	s5, [r7, #8]
 80016be:	ed87 3a01 	vstr	s6, [r7, #4]
 80016c2:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 80016c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001800 <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	2301      	movs	r3, #1
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	230e      	movs	r3, #14
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2301      	movs	r3, #1
 80016da:	223b      	movs	r2, #59	@ 0x3b
 80016dc:	21d0      	movs	r1, #208	@ 0xd0
 80016de:	f00d fa75 	bl	800ebcc <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 80016e2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80016f0:	4313      	orrs	r3, r2
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fa:	edd7 7a00 	vldr	s15, [r7]
 80016fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001702:	edd7 7a07 	vldr	s15, [r7, #28]
 8001706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170c:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 8001710:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21b      	sxth	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800171e:	4313      	orrs	r3, r2
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001728:	edd7 7a00 	vldr	s15, [r7]
 800172c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001730:	edd7 7a06 	vldr	s15, [r7, #24]
 8001734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800173a:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800173e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21b      	sxth	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800174c:	4313      	orrs	r3, r2
 800174e:	ee07 3a90 	vmov	s15, r3
 8001752:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001756:	edd7 7a00 	vldr	s15, [r7]
 800175a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800175e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001768:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 800176c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21b      	sxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800177a:	4313      	orrs	r3, r2
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001784:	edd7 7a01 	vldr	s15, [r7, #4]
 8001788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800178c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 800179a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80017a8:	4313      	orrs	r3, r2
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80017be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017c4:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 80017c8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80017d6:	4313      	orrs	r3, r2
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017f2:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 80017f6:	bf00      	nop
 80017f8:	3740      	adds	r7, #64	@ 0x40
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	240000a0 	.word	0x240000a0

08001804 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 800180a:	4b08      	ldr	r3, [pc, #32]	@ (800182c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	230e      	movs	r3, #14
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	223b      	movs	r2, #59	@ 0x3b
 800181a:	21d0      	movs	r1, #208	@ 0xd0
 800181c:	f00d fb7a 	bl	800ef14 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 8001820:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]


}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	240000a0 	.word	0x240000a0
 8001830:	00000048 	.word	0x00000048
 8001834:	000041fc 	.word	0x000041fc

08001838 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001838:	b480      	push	{r7}
 800183a:	b08d      	sub	sp, #52	@ 0x34
 800183c:	af00      	add	r7, sp, #0
 800183e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001840:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001842:	627a      	str	r2, [r7, #36]	@ 0x24
 8001844:	623b      	str	r3, [r7, #32]
 8001846:	ed87 0a07 	vstr	s0, [r7, #28]
 800184a:	edc7 0a06 	vstr	s1, [r7, #24]
 800184e:	ed87 1a05 	vstr	s2, [r7, #20]
 8001852:	edc7 1a04 	vstr	s3, [r7, #16]
 8001856:	ed87 2a03 	vstr	s4, [r7, #12]
 800185a:	edc7 2a02 	vstr	s5, [r7, #8]
 800185e:	ed87 3a01 	vstr	s6, [r7, #4]
 8001862:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 8001866:	4b48      	ldr	r3, [pc, #288]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	b21b      	sxth	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	4b45      	ldr	r3, [pc, #276]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	4313      	orrs	r3, r2
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800187e:	edd7 7a00 	vldr	s15, [r7]
 8001882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001886:	edd7 7a07 	vldr	s15, [r7, #28]
 800188a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001890:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 8001894:	4b3c      	ldr	r3, [pc, #240]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001896:	789b      	ldrb	r3, [r3, #2]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21b      	sxth	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	4b3a      	ldr	r3, [pc, #232]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018a0:	78db      	ldrb	r3, [r3, #3]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018ac:	edd7 7a00 	vldr	s15, [r7]
 80018b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018be:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 80018c2:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018ce:	795b      	ldrb	r3, [r3, #5]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018da:	edd7 7a00 	vldr	s15, [r7]
 80018de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 80018f0:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018f2:	7a1b      	ldrb	r3, [r3, #8]
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b23      	ldr	r3, [pc, #140]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018fc:	7a5b      	ldrb	r3, [r3, #9]
 80018fe:	4313      	orrs	r3, r2
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001908:	edd7 7a01 	vldr	s15, [r7, #4]
 800190c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001910:	edd7 7a04 	vldr	s15, [r7, #16]
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001920:	7a9b      	ldrb	r3, [r3, #10]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21b      	sxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800192a:	7adb      	ldrb	r3, [r3, #11]
 800192c:	4313      	orrs	r3, r2
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001936:	edd7 7a01 	vldr	s15, [r7, #4]
 800193a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800193e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001948:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800194e:	7b1b      	ldrb	r3, [r3, #12]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b21b      	sxth	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001958:	7b5b      	ldrb	r3, [r3, #13]
 800195a:	4313      	orrs	r3, r2
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001964:	edd7 7a01 	vldr	s15, [r7, #4]
 8001968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800196c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001976:	edc3 7a00 	vstr	s15, [r3]
}
 800197a:	bf00      	nop
 800197c:	3734      	adds	r7, #52	@ 0x34
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	00000048 	.word	0x00000048

0800198c <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	61f8      	str	r0, [r7, #28]
 8001994:	ed87 0a06 	vstr	s0, [r7, #24]
 8001998:	edc7 0a05 	vstr	s1, [r7, #20]
 800199c:	ed87 1a04 	vstr	s2, [r7, #16]
 80019a0:	edc7 1a03 	vstr	s3, [r7, #12]
 80019a4:	ed87 2a02 	vstr	s4, [r7, #8]
 80019a8:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 80019ac:	edd7 2a01 	vldr	s5, [r7, #4]
 80019b0:	ed97 2a02 	vldr	s4, [r7, #8]
 80019b4:	edd7 1a03 	vldr	s3, [r7, #12]
 80019b8:	ed97 1a04 	vldr	s2, [r7, #16]
 80019bc:	edd7 0a05 	vldr	s1, [r7, #20]
 80019c0:	ed97 0a06 	vldr	s0, [r7, #24]
 80019c4:	69f8      	ldr	r0, [r7, #28]
 80019c6:	f000 f9ab 	bl	8001d20 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 80019ca:	bf00      	nop
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MPU6050_GET_ACCEL_YH+0x2c>)
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	2301      	movs	r3, #1
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	223d      	movs	r2, #61	@ 0x3d
 80019ee:	21d0      	movs	r1, #208	@ 0xd0
 80019f0:	f00d f8ec 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 80019f4:	79fb      	ldrb	r3, [r7, #7]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	240000a0 	.word	0x240000a0

08001a04 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <MPU6050_GET_ACCEL_YL+0x2c>)
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	2301      	movs	r3, #1
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	223e      	movs	r2, #62	@ 0x3e
 8001a1e:	21d0      	movs	r1, #208	@ 0xd0
 8001a20:	f00d f8d4 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	240000a0 	.word	0x240000a0

08001a34 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	2301      	movs	r3, #1
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	1dfb      	adds	r3, r7, #7
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	223f      	movs	r2, #63	@ 0x3f
 8001a4e:	21d0      	movs	r1, #208	@ 0xd0
 8001a50:	f00d f8bc 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 8001a54:	79fb      	ldrb	r3, [r7, #7]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	240000a0 	.word	0x240000a0

08001a64 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MPU6050_GET_ACCEL_ZL+0x2c>)
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	2301      	movs	r3, #1
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	2301      	movs	r3, #1
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	1dfb      	adds	r3, r7, #7
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	2240      	movs	r2, #64	@ 0x40
 8001a7e:	21d0      	movs	r1, #208	@ 0xd0
 8001a80:	f00d f8a4 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	240000a0 	.word	0x240000a0

08001a94 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <MPU6050_GET_GYRO_XH+0x2c>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	9302      	str	r3, [sp, #8]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2243      	movs	r2, #67	@ 0x43
 8001aae:	21d0      	movs	r1, #208	@ 0xd0
 8001ab0:	f00d f88c 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	240000a0 	.word	0x240000a0

08001ac4 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <MPU6050_GET_GYRO_XL+0x2c>)
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	9302      	str	r3, [sp, #8]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	2244      	movs	r2, #68	@ 0x44
 8001ade:	21d0      	movs	r1, #208	@ 0xd0
 8001ae0:	f00d f874 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	240000a0 	.word	0x240000a0

08001af4 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <MPU6050_GET_GYRO_YH+0x2c>)
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	2301      	movs	r3, #1
 8001b00:	9302      	str	r3, [sp, #8]
 8001b02:	2301      	movs	r3, #1
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	1dfb      	adds	r3, r7, #7
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	2245      	movs	r2, #69	@ 0x45
 8001b0e:	21d0      	movs	r1, #208	@ 0xd0
 8001b10:	f00d f85c 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 8001b14:	79fb      	ldrb	r3, [r7, #7]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	240000a0 	.word	0x240000a0

08001b24 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <MPU6050_GET_GYRO_YL+0x2c>)
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	9302      	str	r3, [sp, #8]
 8001b32:	2301      	movs	r3, #1
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	2246      	movs	r2, #70	@ 0x46
 8001b3e:	21d0      	movs	r1, #208	@ 0xd0
 8001b40:	f00d f844 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	240000a0 	.word	0x240000a0

08001b54 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <MPU6050_GET_GYRO_ZH+0x2c>)
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	2301      	movs	r3, #1
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2247      	movs	r2, #71	@ 0x47
 8001b6e:	21d0      	movs	r1, #208	@ 0xd0
 8001b70:	f00d f82c 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 8001b74:	79fb      	ldrb	r3, [r7, #7]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	240000a0 	.word	0x240000a0

08001b84 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <MPU6050_GET_GYRO_ZL+0x2c>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2301      	movs	r3, #1
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	2248      	movs	r2, #72	@ 0x48
 8001b9e:	21d0      	movs	r1, #208	@ 0xd0
 8001ba0:	f00d f814 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	240000a0 	.word	0x240000a0

08001bb4 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9302      	str	r3, [sp, #8]
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2301      	movs	r3, #1
 8001bcc:	223b      	movs	r2, #59	@ 0x3b
 8001bce:	21d0      	movs	r1, #208	@ 0xd0
 8001bd0:	f00c fffc 	bl	800ebcc <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001bd4:	793b      	ldrb	r3, [r7, #4]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	797b      	ldrb	r3, [r7, #5]
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	4313      	orrs	r3, r2
 8001be0:	80fb      	strh	r3, [r7, #6]
	return data;
 8001be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	240000a0 	.word	0x240000a0

08001bf4 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001bfa:	f7ff feeb 	bl	80019d4 <MPU6050_GET_ACCEL_YH>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21c      	sxth	r4, r3
 8001c04:	f7ff fefe 	bl	8001a04 <MPU6050_GET_ACCEL_YL>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	4323      	orrs	r3, r4
 8001c0e:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}

08001c1c <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001c22:	f7ff ff07 	bl	8001a34 <MPU6050_GET_ACCEL_ZH>
 8001c26:	4603      	mov	r3, r0
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b21c      	sxth	r4, r3
 8001c2c:	f7ff ff1a 	bl	8001a64 <MPU6050_GET_ACCEL_ZL>
 8001c30:	4603      	mov	r3, r0
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	4323      	orrs	r3, r4
 8001c36:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd90      	pop	{r4, r7, pc}

08001c44 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001c4a:	f7ff ff23 	bl	8001a94 <MPU6050_GET_GYRO_XH>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	b21c      	sxth	r4, r3
 8001c54:	f7ff ff36 	bl	8001ac4 <MPU6050_GET_GYRO_XL>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4323      	orrs	r3, r4
 8001c5e:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}

08001c6c <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001c72:	f7ff ff3f 	bl	8001af4 <MPU6050_GET_GYRO_YH>
 8001c76:	4603      	mov	r3, r0
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21c      	sxth	r4, r3
 8001c7c:	f7ff ff52 	bl	8001b24 <MPU6050_GET_GYRO_YL>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	4323      	orrs	r3, r4
 8001c86:	80fb      	strh	r3, [r7, #6]
	return data;
 8001c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd90      	pop	{r4, r7, pc}

08001c94 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001c9a:	f7ff ff5b 	bl	8001b54 <MPU6050_GET_GYRO_ZH>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21c      	sxth	r4, r3
 8001ca4:	f7ff ff6e 	bl	8001b84 <MPU6050_GET_GYRO_ZL>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4323      	orrs	r3, r4
 8001cae:	80fb      	strh	r3, [r7, #6]
	return data;
 8001cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}

08001cbc <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <MPU6050_READ_ID+0x2c>)
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9302      	str	r3, [sp, #8]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	2275      	movs	r2, #117	@ 0x75
 8001cd6:	21d0      	movs	r1, #208	@ 0xd0
 8001cd8:	f00c ff78 	bl	800ebcc <HAL_I2C_Mem_Read>
	return data;
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	b25b      	sxtb	r3, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	240000a0 	.word	0x240000a0

08001cec <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001cf6:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	1dfb      	adds	r3, r7, #7
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2301      	movs	r3, #1
 8001d08:	2237      	movs	r2, #55	@ 0x37
 8001d0a:	21d0      	movs	r1, #208	@ 0xd0
 8001d0c:	f00c fe4a 	bl	800e9a4 <HAL_I2C_Mem_Write>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	240000a0 	.word	0x240000a0
 8001d1c:	00000000 	.word	0x00000000

08001d20 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	@ 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	61f8      	str	r0, [r7, #28]
 8001d28:	ed87 0a06 	vstr	s0, [r7, #24]
 8001d2c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001d30:	ed87 1a04 	vstr	s2, [r7, #16]
 8001d34:	edc7 1a03 	vstr	s3, [r7, #12]
 8001d38:	ed87 2a02 	vstr	s4, [r7, #8]
 8001d3c:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang)+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));//
 8001d40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d48:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8001e08 <Complementary_getFilter+0xe8>
 8001d4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d50:	4b31      	ldr	r3, [pc, #196]	@ (8001e18 <Complementary_getFilter+0xf8>)
 8001d52:	ed93 7a00 	vldr	s14, [r3]
 8001d56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d6c:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001e10 <Complementary_getFilter+0xf0>
 8001d70:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001d74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang)+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001d82:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d8a:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001e08 <Complementary_getFilter+0xe8>
 8001d8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <Complementary_getFilter+0xf8>)
 8001d94:	ed93 7a00 	vldr	s14, [r3]
 8001d98:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001daa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dae:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001e10 <Complementary_getFilter+0xf0>
 8001db2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001db6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001dba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (((gz_ang*looptime)+Complementary_Filter_st->oz));//todo add magnetomiter?
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <Complementary_getFilter+0xf8>)
 8001dc6:	ed93 7a00 	vldr	s14, [r3]
 8001dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001dfa:	bf00      	nop
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	47ae147b 	.word	0x47ae147b
 8001e0c:	3f947ae1 	.word	0x3f947ae1
 8001e10:	f5c28f5c 	.word	0xf5c28f5c
 8001e14:	3fef5c28 	.word	0x3fef5c28
 8001e18:	0801ebe4 	.word	0x0801ebe4

08001e1c <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f007 fbb0 	bl	800958c <HAL_Delay>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <nRF24_SendSpi+0x28>)
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	f012 fe35 	bl	8014abc <HAL_SPI_Transmit>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	240000a4 	.word	0x240000a4

08001e60 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <nRF24_ReadSpi+0x28>)
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	f013 f80d 	bl	8014e98 <HAL_SPI_Receive>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	240000a4 	.word	0x240000a4

08001e8c <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2180      	movs	r1, #128	@ 0x80
 8001e9e:	480c      	ldr	r0, [pc, #48]	@ (8001ed0 <nRF24_ReadRegister+0x44>)
 8001ea0:	f00c fcb0 	bl	800e804 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001ea4:	1dfb      	adds	r3, r7, #7
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ffc3 	bl	8001e34 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001eae:	f107 030f 	add.w	r3, r7, #15
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ffd3 	bl	8001e60 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2180      	movs	r1, #128	@ 0x80
 8001ebe:	4804      	ldr	r0, [pc, #16]	@ (8001ed0 <nRF24_ReadRegister+0x44>)
 8001ec0:	f00c fca0 	bl	800e804 <HAL_GPIO_WritePin>

	return result;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	58020400 	.word	0x58020400

08001ed4 <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	480a      	ldr	r0, [pc, #40]	@ (8001f18 <nRF24_ReadRegisters+0x44>)
 8001eee:	f00c fc89 	bl	800e804 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001ef2:	1dfb      	adds	r3, r7, #7
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff9c 	bl	8001e34 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	4619      	mov	r1, r3
 8001f00:	6838      	ldr	r0, [r7, #0]
 8001f02:	f7ff ffad 	bl	8001e60 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001f06:	2201      	movs	r2, #1
 8001f08:	2180      	movs	r1, #128	@ 0x80
 8001f0a:	4803      	ldr	r0, [pc, #12]	@ (8001f18 <nRF24_ReadRegisters+0x44>)
 8001f0c:	f00c fc7a 	bl	800e804 <HAL_GPIO_WritePin>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	58020400 	.word	0x58020400

08001f1c <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	460a      	mov	r2, r1
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f043 0320 	orr.w	r3, r3, #32
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2180      	movs	r1, #128	@ 0x80
 8001f3e:	4809      	ldr	r0, [pc, #36]	@ (8001f64 <nRF24_WriteRegister+0x48>)
 8001f40:	f00c fc60 	bl	800e804 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	2102      	movs	r1, #2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff72 	bl	8001e34 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001f50:	2201      	movs	r2, #1
 8001f52:	2180      	movs	r1, #128	@ 0x80
 8001f54:	4803      	ldr	r0, [pc, #12]	@ (8001f64 <nRF24_WriteRegister+0x48>)
 8001f56:	f00c fc55 	bl	800e804 <HAL_GPIO_WritePin>
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	58020400 	.word	0x58020400

08001f68 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
 8001f74:	4613      	mov	r3, r2
 8001f76:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f043 0320 	orr.w	r3, r3, #32
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001f82:	2200      	movs	r2, #0
 8001f84:	2180      	movs	r1, #128	@ 0x80
 8001f86:	480b      	ldr	r0, [pc, #44]	@ (8001fb4 <nRF24_WriteRegisters+0x4c>)
 8001f88:	f00c fc3c 	bl	800e804 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001f8c:	1dfb      	adds	r3, r7, #7
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff4f 	bl	8001e34 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001f96:	79bb      	ldrb	r3, [r7, #6]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6838      	ldr	r0, [r7, #0]
 8001f9c:	f7ff ff4a 	bl	8001e34 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2180      	movs	r1, #128	@ 0x80
 8001fa4:	4803      	ldr	r0, [pc, #12]	@ (8001fb4 <nRF24_WriteRegisters+0x4c>)
 8001fa6:	f00c fc2d 	bl	800e804 <HAL_GPIO_WritePin>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	58020400 	.word	0x58020400

08001fb8 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001fbe:	f000 f84d 	bl	800205c <nRF24_ReadConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001fc6:	4910      	ldr	r1, [pc, #64]	@ (8002008 <nRF24_RX_Mode+0x50>)
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f000 f9f6 	bl	80023ba <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f843 	bl	800206c <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001fe6:	2070      	movs	r0, #112	@ 0x70
 8001fe8:	f000 f89b 	bl	8002122 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001fec:	f000 f8a8 	bl	8002140 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001ff0:	f000 f8c0 	bl	8002174 <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2140      	movs	r1, #64	@ 0x40
 8001ff8:	4804      	ldr	r0, [pc, #16]	@ (800200c <nRF24_RX_Mode+0x54>)
 8001ffa:	f00c fc03 	bl	800e804 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	240000a8 	.word	0x240000a8
 800200c:	58020400 	.word	0x58020400

08002010 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8002016:	2200      	movs	r2, #0
 8002018:	2140      	movs	r1, #64	@ 0x40
 800201a:	480f      	ldr	r0, [pc, #60]	@ (8002058 <nRF24_TX_Mode+0x48>)
 800201c:	f00c fbf2 	bl	800e804 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8002020:	f000 f81c 	bl	800205c <nRF24_ReadConfig>
 8002024:	4603      	mov	r3, r0
 8002026:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f816 	bl	800206c <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8002040:	2070      	movs	r0, #112	@ 0x70
 8002042:	f000 f86e 	bl	8002122 <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8002046:	f000 f87b 	bl	8002140 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 800204a:	f000 f893 	bl	8002174 <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	58020400 	.word	0x58020400

0800205c <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8002060:	2000      	movs	r0, #0
 8002062:	f7ff ff13 	bl	8001e8c <nRF24_ReadRegister>
 8002066:	4603      	mov	r3, r0
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}

0800206c <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	4619      	mov	r1, r3
 800207a:	2000      	movs	r0, #0
 800207c:	f7ff ff4e 	bl	8001f1c <nRF24_WriteRegister>
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002092:	2006      	movs	r0, #6
 8002094:	f7ff fefa 	bl	8001e8c <nRF24_ReadRegister>
 8002098:	4603      	mov	r3, r0
 800209a:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	f023 0307 	bic.w	r3, r3, #7
 80020a2:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	b25a      	sxtb	r2, r3
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b25b      	sxtb	r3, r3
 80020b2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	4619      	mov	r1, r3
 80020b8:	2006      	movs	r0, #6
 80020ba:	f7ff ff2f 	bl	8001f1c <nRF24_WriteRegister>
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 80020d0:	2006      	movs	r0, #6
 80020d2:	f7ff fedb 	bl	8001e8c <nRF24_ReadRegister>
 80020d6:	4603      	mov	r3, r0
 80020d8:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80020e0:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d104      	bne.n	80020f2 <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	f043 0320 	orr.w	r3, r3, #32
 80020ee:	73fb      	strb	r3, [r7, #15]
 80020f0:	e006      	b.n	8002100 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d103      	bne.n	8002100 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	f043 0308 	orr.w	r3, r3, #8
 80020fe:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	4619      	mov	r1, r3
 8002104:	2006      	movs	r0, #6
 8002106:	f7ff ff09 	bl	8001f1c <nRF24_WriteRegister>
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 8002116:	2007      	movs	r0, #7
 8002118:	f7ff feb8 	bl	8001e8c <nRF24_ReadRegister>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}

08002122 <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	4619      	mov	r1, r3
 8002130:	2007      	movs	r0, #7
 8002132:	f7ff fef3 	bl	8001f1c <nRF24_WriteRegister>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8002146:	23e2      	movs	r3, #226	@ 0xe2
 8002148:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800214a:	2200      	movs	r2, #0
 800214c:	2180      	movs	r1, #128	@ 0x80
 800214e:	4808      	ldr	r0, [pc, #32]	@ (8002170 <nRF24_FlushRX+0x30>)
 8002150:	f00c fb58 	bl	800e804 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	2101      	movs	r1, #1
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fe6b 	bl	8001e34 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 800215e:	2201      	movs	r2, #1
 8002160:	2180      	movs	r1, #128	@ 0x80
 8002162:	4803      	ldr	r0, [pc, #12]	@ (8002170 <nRF24_FlushRX+0x30>)
 8002164:	f00c fb4e 	bl	800e804 <HAL_GPIO_WritePin>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	58020400 	.word	0x58020400

08002174 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 800217a:	23e1      	movs	r3, #225	@ 0xe1
 800217c:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 800217e:	2200      	movs	r2, #0
 8002180:	2180      	movs	r1, #128	@ 0x80
 8002182:	4808      	ldr	r0, [pc, #32]	@ (80021a4 <nRF24_FlushTX+0x30>)
 8002184:	f00c fb3e 	bl	800e804 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	2101      	movs	r1, #1
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fe51 	bl	8001e34 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8002192:	2201      	movs	r2, #1
 8002194:	2180      	movs	r1, #128	@ 0x80
 8002196:	4803      	ldr	r0, [pc, #12]	@ (80021a4 <nRF24_FlushTX+0x30>)
 8002198:	f00c fb34 	bl	800e804 <HAL_GPIO_WritePin>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	58020400 	.word	0x58020400

080021a8 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80021b2:	f7ff ff53 	bl	800205c <nRF24_ReadConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	f043 0308 	orr.w	r3, r3, #8
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e003      	b.n	80021d2 <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	f023 0308 	bic.w	r3, r3, #8
 80021d0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff49 	bl	800206c <nRF24_WriteConfig>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80021ec:	f7ff ff36 	bl	800205c <nRF24_ReadConfig>
 80021f0:	4603      	mov	r3, r0
 80021f2:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d104      	bne.n	8002204 <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e003      	b.n	800220c <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	f023 0304 	bic.w	r3, r3, #4
 800220a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff2c 	bl	800206c <nRF24_WriteConfig>
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	460a      	mov	r2, r1
 8002226:	71fb      	strb	r3, [r7, #7]
 8002228:	4613      	mov	r3, r2
 800222a:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	b25a      	sxtb	r2, r3
 8002232:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	b25b      	sxtb	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b25b      	sxtb	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4619      	mov	r1, r3
 8002244:	2004      	movs	r0, #4
 8002246:	f7ff fe69 	bl	8001f1c <nRF24_WriteRegister>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4619      	mov	r1, r3
 8002266:	2005      	movs	r0, #5
 8002268:	f7ff fe58 	bl	8001f1c <nRF24_WriteRegister>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	460a      	mov	r2, r1
 800227e:	71fb      	strb	r3, [r7, #7]
 8002280:	4613      	mov	r3, r2
 8002282:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d901      	bls.n	800228e <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 800228a:	2305      	movs	r3, #5
 800228c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	3311      	adds	r3, #17
 8002292:	b2da      	uxtb	r2, r3
 8002294:	79bb      	ldrb	r3, [r7, #6]
 8002296:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800229a:	b2db      	uxtb	r3, r3
 800229c:	4619      	mov	r1, r3
 800229e:	4610      	mov	r0, r2
 80022a0:	f7ff fe3c 	bl	8001f1c <nRF24_WriteRegister>
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	460a      	mov	r2, r1
 80022b6:	71fb      	strb	r3, [r7, #7]
 80022b8:	4613      	mov	r3, r2
 80022ba:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d901      	bls.n	80022c6 <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 80022c2:	2305      	movs	r3, #5
 80022c4:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80022c6:	2002      	movs	r0, #2
 80022c8:	f7ff fde0 	bl	8001e8c <nRF24_ReadRegister>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 80022d0:	79bb      	ldrb	r3, [r7, #6]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10a      	bne.n	80022ec <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	2201      	movs	r2, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	b25a      	sxtb	r2, r3
 80022e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b25b      	sxtb	r3, r3
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	e00b      	b.n	8002304 <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2201      	movs	r2, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	b25a      	sxtb	r2, r3
 80022fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fe:	4013      	ands	r3, r2
 8002300:	b25b      	sxtb	r3, r3
 8002302:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	4619      	mov	r1, r3
 8002308:	2002      	movs	r0, #2
 800230a:	f7ff fe07 	bl	8001f1c <nRF24_WriteRegister>
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	460a      	mov	r2, r1
 8002320:	71fb      	strb	r3, [r7, #7]
 8002322:	4613      	mov	r3, r2
 8002324:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b05      	cmp	r3, #5
 800232a:	d901      	bls.n	8002330 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 800232c:	2305      	movs	r3, #5
 800232e:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002330:	2001      	movs	r0, #1
 8002332:	f7ff fdab 	bl	8001e8c <nRF24_ReadRegister>
 8002336:	4603      	mov	r3, r0
 8002338:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 800233a:	79bb      	ldrb	r3, [r7, #6]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10a      	bne.n	8002356 <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	2201      	movs	r2, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	b25a      	sxtb	r2, r3
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4313      	orrs	r3, r2
 8002350:	b25b      	sxtb	r3, r3
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e00b      	b.n	800236e <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	2201      	movs	r2, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	b25b      	sxtb	r3, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	b25a      	sxtb	r2, r3
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002368:	4013      	ands	r3, r2
 800236a:	b25b      	sxtb	r3, r3
 800236c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	4619      	mov	r1, r3
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff fdd2 	bl	8001f1c <nRF24_WriteRegister>
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b05      	cmp	r3, #5
 800238e:	d901      	bls.n	8002394 <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 8002390:	2305      	movs	r3, #5
 8002392:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d801      	bhi.n	800239e <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 800239a:	2303      	movs	r3, #3
 800239c:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	3b02      	subs	r3, #2
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	2003      	movs	r0, #3
 80023ae:	f7ff fdb5 	bl	8001f1c <nRF24_WriteRegister>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	6039      	str	r1, [r7, #0]
 80023c4:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <nRF24_SetRXAddress+0x18>
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d11d      	bne.n	800240e <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	e00d      	b.n	80023f4 <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	441a      	add	r2, r3
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	f1c3 0302 	rsb	r3, r3, #2
 80023e4:	7812      	ldrb	r2, [r2, #0]
 80023e6:	3310      	adds	r3, #16
 80023e8:	443b      	add	r3, r7
 80023ea:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	3301      	adds	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d9ee      	bls.n	80023d8 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	330a      	adds	r3, #10
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f107 010c 	add.w	r1, r7, #12
 8002404:	2203      	movs	r2, #3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fdae 	bl	8001f68 <nRF24_WriteRegisters>
	{
 800240c:	e00a      	b.n	8002424 <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	330a      	adds	r3, #10
 8002412:	b2da      	uxtb	r2, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	3302      	adds	r3, #2
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	4619      	mov	r1, r3
 800241c:	4610      	mov	r0, r2
 800241e:	f7ff fd7d 	bl	8001f1c <nRF24_WriteRegister>
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	2203      	movs	r2, #3
 800243a:	4619      	mov	r1, r3
 800243c:	200a      	movs	r0, #10
 800243e:	f7ff fd49 	bl	8001ed4 <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e00c      	b.n	8002462 <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	f1c3 0302 	rsb	r3, r3, #2
 8002450:	3210      	adds	r2, #16
 8002452:	443a      	add	r2, r7
 8002454:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 8002458:	4a16      	ldr	r2, [pc, #88]	@ (80024b4 <nRF24_SetTXAddress+0x88>)
 800245a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	3301      	adds	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d9ef      	bls.n	8002448 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e00d      	b.n	800248a <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	441a      	add	r2, r3
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	f1c3 0302 	rsb	r3, r3, #2
 800247a:	7812      	ldrb	r2, [r2, #0]
 800247c:	3310      	adds	r3, #16
 800247e:	443b      	add	r3, r7
 8002480:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	3301      	adds	r3, #1
 8002488:	73fb      	strb	r3, [r7, #15]
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d9ee      	bls.n	800246e <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	2203      	movs	r2, #3
 8002496:	4619      	mov	r1, r3
 8002498:	200a      	movs	r0, #10
 800249a:	f7ff fd65 	bl	8001f68 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	2203      	movs	r2, #3
 80024a4:	4619      	mov	r1, r3
 80024a6:	2010      	movs	r0, #16
 80024a8:	f7ff fd5e 	bl	8001f68 <nRF24_WriteRegisters>

}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	240000a8 	.word	0x240000a8

080024b8 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 80024be:	f7ff fe28 	bl	8002112 <nRF24_ReadStatus>
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80024cc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fe26 	bl	8002122 <nRF24_WriteStatus>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024e8:	f7ff fdb8 	bl	800205c <nRF24_ReadConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d104      	bne.n	8002500 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e003      	b.n	8002508 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002506:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fdae 	bl	800206c <nRF24_WriteConfig>
}
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002522:	f7ff fd9b 	bl	800205c <nRF24_ReadConfig>
 8002526:	4603      	mov	r3, r0
 8002528:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d104      	bne.n	800253a <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	f043 0320 	orr.w	r3, r3, #32
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	e003      	b.n	8002542 <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	f023 0320 	bic.w	r3, r3, #32
 8002540:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fd91 	bl	800206c <nRF24_WriteConfig>
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800255c:	f7ff fd7e 	bl	800205c <nRF24_ReadConfig>
 8002560:	4603      	mov	r3, r0
 8002562:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d104      	bne.n	8002574 <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	f043 0310 	orr.w	r3, r3, #16
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e003      	b.n	800257c <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	f023 0310 	bic.w	r3, r3, #16
 800257a:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fd74 	bl	800206c <nRF24_WriteConfig>
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002594:	2220      	movs	r2, #32
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	20a0      	movs	r0, #160	@ 0xa0
 800259a:	f7ff fce5 	bl	8001f68 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80025ae:	2201      	movs	r2, #1
 80025b0:	2140      	movs	r1, #64	@ 0x40
 80025b2:	4810      	ldr	r0, [pc, #64]	@ (80025f4 <nRF24_WaitTX+0x4c>)
 80025b4:	f00c f926 	bl	800e804 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 80025b8:	2001      	movs	r0, #1
 80025ba:	f7ff fc2f 	bl	8001e1c <nRF24_Delay>
	NRF24_CE_LOW;
 80025be:	2200      	movs	r2, #0
 80025c0:	2140      	movs	r1, #64	@ 0x40
 80025c2:	480c      	ldr	r0, [pc, #48]	@ (80025f4 <nRF24_WaitTX+0x4c>)
 80025c4:	f00c f91e 	bl	800e804 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 80025c8:	2001      	movs	r0, #1
 80025ca:	f7ff fc27 	bl	8001e1c <nRF24_Delay>
		status = nRF24_ReadStatus();
 80025ce:	f7ff fda0 	bl	8002112 <nRF24_ReadStatus>
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <nRF24_WaitTX+0x42>
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0ee      	beq.n	80025c8 <nRF24_WaitTX+0x20>

}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	58020400 	.word	0x58020400

080025f8 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002600:	2220      	movs	r2, #32
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	2061      	movs	r0, #97	@ 0x61
 8002606:	f7ff fc65 	bl	8001ed4 <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 800260a:	2140      	movs	r1, #64	@ 0x40
 800260c:	2007      	movs	r0, #7
 800260e:	f7ff fc85 	bl	8001f1c <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 8002612:	f7ff fd7e 	bl	8002112 <nRF24_ReadStatus>
 8002616:	4603      	mov	r3, r0
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002620:	2120      	movs	r1, #32
 8002622:	2007      	movs	r0, #7
 8002624:	f7ff fc7a 	bl	8001f1c <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 800263a:	f000 f811 	bl	8002660 <nRF24_ReadFifoStatus>
 800263e:	4603      	mov	r3, r0
 8002640:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	fa42 f303 	asr.w	r3, r2, r3
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8002664:	2017      	movs	r0, #23
 8002666:	f7ff fc11 	bl	8001e8c <nRF24_ReadRegister>
 800266a:	4603      	mov	r3, r0
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}

08002670 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 8002678:	4a25      	ldr	r2, [pc, #148]	@ (8002710 <nRF24_Init+0xa0>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 800267e:	2200      	movs	r2, #0
 8002680:	2140      	movs	r1, #64	@ 0x40
 8002682:	4824      	ldr	r0, [pc, #144]	@ (8002714 <nRF24_Init+0xa4>)
 8002684:	f00c f8be 	bl	800e804 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 8002688:	2201      	movs	r2, #1
 800268a:	2180      	movs	r1, #128	@ 0x80
 800268c:	4821      	ldr	r0, [pc, #132]	@ (8002714 <nRF24_Init+0xa4>)
 800268e:	f00c f8b9 	bl	800e804 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 8002692:	200a      	movs	r0, #10
 8002694:	f006 ff7a 	bl	800958c <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8002698:	2003      	movs	r0, #3
 800269a:	f7ff fcf5 	bl	8002088 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 800269e:	2001      	movs	r0, #1
 80026a0:	f7ff fd11 	bl	80020c6 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80026a4:	2001      	movs	r0, #1
 80026a6:	f7ff fd7f 	bl	80021a8 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7ff fd99 	bl	80021e2 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80026b0:	2100      	movs	r1, #0
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7ff fdb2 	bl	800221c <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 80026b8:	2100      	movs	r1, #0
 80026ba:	201c      	movs	r0, #28
 80026bc:	f7ff fc2e 	bl	8001f1c <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 80026c0:	2120      	movs	r1, #32
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7ff fdd6 	bl	8002274 <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 80026c8:	200f      	movs	r0, #15
 80026ca:	f7ff fdc2 	bl	8002252 <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80026ce:	2101      	movs	r1, #1
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7ff fdeb 	bl	80022ac <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80026d6:	2101      	movs	r1, #1
 80026d8:	2000      	movs	r0, #0
 80026da:	f7ff fe1c 	bl	8002316 <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80026de:	2003      	movs	r0, #3
 80026e0:	f7ff fe4e 	bl	8002380 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 80026e4:	2001      	movs	r0, #1
 80026e6:	f006 ff51 	bl	800958c <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 80026ea:	2001      	movs	r0, #1
 80026ec:	f7ff fef7 	bl	80024de <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7ff ff11 	bl	8002518 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7ff ff2b 	bl	8002552 <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f006 ff45 	bl	800958c <HAL_Delay>

	nRF24_ClearInterrupts();
 8002702:	f7ff fed9 	bl	80024b8 <nRF24_ClearInterrupts>


}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	240000a4 	.word	0x240000a4
 8002714:	58020400 	.word	0x58020400

08002718 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
//	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
//	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
//	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
//	xz[8] = nRF24_ReadConfig();

}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800272c:	f3bf 8f4f 	dsb	sy
}
 8002730:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <__NVIC_SystemReset+0x24>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800273a:	4904      	ldr	r1, [pc, #16]	@ (800274c <__NVIC_SystemReset+0x24>)
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <__NVIC_SystemReset+0x28>)
 800273e:	4313      	orrs	r3, r2
 8002740:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002742:	f3bf 8f4f 	dsb	sy
}
 8002746:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <__NVIC_SystemReset+0x20>
 800274c:	e000ed00 	.word	0xe000ed00
 8002750:	05fa0004 	.word	0x05fa0004

08002754 <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]
 800275e:	2300      	movs	r3, #0
 8002760:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 8002762:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <interpretcommand+0x8c>)
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e02e      	b.n	80027cc <interpretcommand+0x78>

		if(words[j] == ' '){
 800276e:	4a1d      	ldr	r2, [pc, #116]	@ (80027e4 <interpretcommand+0x90>)
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b20      	cmp	r3, #32
 8002778:	d102      	bne.n	8002780 <interpretcommand+0x2c>
			vcount++;
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	3301      	adds	r3, #1
 800277e:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d108      	bne.n	8002798 <interpretcommand+0x44>
			command[j] = words[j];
 8002786:	4a17      	ldr	r2, [pc, #92]	@ (80027e4 <interpretcommand+0x90>)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	7819      	ldrb	r1, [r3, #0]
 800278e:	4a16      	ldr	r2, [pc, #88]	@ (80027e8 <interpretcommand+0x94>)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	460a      	mov	r2, r1
 8002796:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d113      	bne.n	80027c6 <interpretcommand+0x72>
			value1[J1] = words[j];
 800279e:	7dbb      	ldrb	r3, [r7, #22]
 80027a0:	4910      	ldr	r1, [pc, #64]	@ (80027e4 <interpretcommand+0x90>)
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	440a      	add	r2, r1
 80027a6:	7812      	ldrb	r2, [r2, #0]
 80027a8:	3318      	adds	r3, #24
 80027aa:	443b      	add	r3, r7
 80027ac:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 80027b0:	7dba      	ldrb	r2, [r7, #22]
 80027b2:	7dbb      	ldrb	r3, [r7, #22]
 80027b4:	3218      	adds	r2, #24
 80027b6:	443a      	add	r2, r7
 80027b8:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80027bc:	4a0b      	ldr	r2, [pc, #44]	@ (80027ec <interpretcommand+0x98>)
 80027be:	54d1      	strb	r1, [r2, r3]
			J1++;
 80027c0:	7dbb      	ldrb	r3, [r7, #22]
 80027c2:	3301      	adds	r3, #1
 80027c4:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	3301      	adds	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b4f      	cmp	r3, #79	@ 0x4f
 80027d0:	ddcd      	ble.n	800276e <interpretcommand+0x1a>
		}
	}
}
 80027d2:	bf00      	nop
 80027d4:	bf00      	nop
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	000041e6 	.word	0x000041e6
 80027e4:	000041dc 	.word	0x000041dc
 80027e8:	000041d8 	.word	0x000041d8
 80027ec:	000041c8 	.word	0x000041c8

080027f0 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b50      	cmp	r3, #80	@ 0x50
 8002800:	d14c      	bne.n	800289c <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002802:	4bd5      	ldr	r3, [pc, #852]	@ (8002b58 <executecommand+0x368>)
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280e:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002b5c <executecommand+0x36c>
 8002812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002816:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002b60 <executecommand+0x370>
 800281a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800281e:	4bce      	ldr	r3, [pc, #824]	@ (8002b58 <executecommand+0x368>)
 8002820:	789b      	ldrb	r3, [r3, #2]
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282a:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002b5c <executecommand+0x36c>
 800282e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002832:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002836:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800283a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283e:	4bc6      	ldr	r3, [pc, #792]	@ (8002b58 <executecommand+0x368>)
 8002840:	78db      	ldrb	r3, [r3, #3]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284a:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002b5c <executecommand+0x36c>
 800284e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002852:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002856:	4bc0      	ldr	r3, [pc, #768]	@ (8002b58 <executecommand+0x368>)
 8002858:	791b      	ldrb	r3, [r3, #4]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002862:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002b5c <executecommand+0x36c>
 8002866:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800286a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800286e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002876:	4bb8      	ldr	r3, [pc, #736]	@ (8002b58 <executecommand+0x368>)
 8002878:	795b      	ldrb	r3, [r3, #5]
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002882:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002b5c <executecommand+0x36c>
 8002886:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800288a:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002b60 <executecommand+0x370>
 800288e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002896:	4bb3      	ldr	r3, [pc, #716]	@ (8002b64 <executecommand+0x374>)
 8002898:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b49      	cmp	r3, #73	@ 0x49
 80028a2:	d14f      	bne.n	8002944 <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80028a4:	4bac      	ldr	r3, [pc, #688]	@ (8002b58 <executecommand+0x368>)
 80028a6:	785b      	ldrb	r3, [r3, #1]
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b0:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002b5c <executecommand+0x36c>
 80028b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028b8:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002b60 <executecommand+0x370>
 80028bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028c0:	4ba5      	ldr	r3, [pc, #660]	@ (8002b58 <executecommand+0x368>)
 80028c2:	789b      	ldrb	r3, [r3, #2]
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028cc:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002b5c <executecommand+0x36c>
 80028d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028d4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e0:	4b9d      	ldr	r3, [pc, #628]	@ (8002b58 <executecommand+0x368>)
 80028e2:	78db      	ldrb	r3, [r3, #3]
 80028e4:	ee07 3a90 	vmov	s15, r3
 80028e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ec:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002b5c <executecommand+0x36c>
 80028f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f8:	4b97      	ldr	r3, [pc, #604]	@ (8002b58 <executecommand+0x368>)
 80028fa:	791b      	ldrb	r3, [r3, #4]
 80028fc:	ee07 3a90 	vmov	s15, r3
 8002900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002904:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002b5c <executecommand+0x36c>
 8002908:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800290c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002910:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002918:	4b8f      	ldr	r3, [pc, #572]	@ (8002b58 <executecommand+0x368>)
 800291a:	795b      	ldrb	r3, [r3, #5]
 800291c:	ee07 3a90 	vmov	s15, r3
 8002920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002924:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002b5c <executecommand+0x36c>
 8002928:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800292c:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002b60 <executecommand+0x370>
 8002930:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002938:	4b8b      	ldr	r3, [pc, #556]	@ (8002b68 <executecommand+0x378>)
 800293a:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 800293e:	4b8b      	ldr	r3, [pc, #556]	@ (8002b6c <executecommand+0x37c>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b44      	cmp	r3, #68	@ 0x44
 800294a:	d14c      	bne.n	80029e6 <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 800294c:	4b82      	ldr	r3, [pc, #520]	@ (8002b58 <executecommand+0x368>)
 800294e:	785b      	ldrb	r3, [r3, #1]
 8002950:	ee07 3a90 	vmov	s15, r3
 8002954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002958:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002b5c <executecommand+0x36c>
 800295c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002960:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002b70 <executecommand+0x380>
 8002964:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002968:	4b7b      	ldr	r3, [pc, #492]	@ (8002b58 <executecommand+0x368>)
 800296a:	789b      	ldrb	r3, [r3, #2]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002974:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002b5c <executecommand+0x36c>
 8002978:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800297c:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002b60 <executecommand+0x370>
 8002980:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002988:	4b73      	ldr	r3, [pc, #460]	@ (8002b58 <executecommand+0x368>)
 800298a:	78db      	ldrb	r3, [r3, #3]
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002994:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002b5c <executecommand+0x36c>
 8002998:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800299c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80029a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002b58 <executecommand+0x368>)
 80029aa:	791b      	ldrb	r3, [r3, #4]
 80029ac:	ee07 3a90 	vmov	s15, r3
 80029b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b4:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002b5c <executecommand+0x36c>
 80029b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029c0:	4b65      	ldr	r3, [pc, #404]	@ (8002b58 <executecommand+0x368>)
 80029c2:	795b      	ldrb	r3, [r3, #5]
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029cc:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002b5c <executecommand+0x36c>
 80029d0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029d4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e0:	4b64      	ldr	r3, [pc, #400]	@ (8002b74 <executecommand+0x384>)
 80029e2:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b70      	cmp	r3, #112	@ 0x70
 80029ec:	d14c      	bne.n	8002a88 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002b58 <executecommand+0x368>)
 80029f0:	785b      	ldrb	r3, [r3, #1]
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fa:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002b5c <executecommand+0x36c>
 80029fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a02:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002b60 <executecommand+0x370>
 8002a06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a0a:	4b53      	ldr	r3, [pc, #332]	@ (8002b58 <executecommand+0x368>)
 8002a0c:	789b      	ldrb	r3, [r3, #2]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a16:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002b5c <executecommand+0x36c>
 8002a1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a1e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b58 <executecommand+0x368>)
 8002a2c:	78db      	ldrb	r3, [r3, #3]
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a36:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002b5c <executecommand+0x36c>
 8002a3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a42:	4b45      	ldr	r3, [pc, #276]	@ (8002b58 <executecommand+0x368>)
 8002a44:	791b      	ldrb	r3, [r3, #4]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002b5c <executecommand+0x36c>
 8002a52:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a56:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a5a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a62:	4b3d      	ldr	r3, [pc, #244]	@ (8002b58 <executecommand+0x368>)
 8002a64:	795b      	ldrb	r3, [r3, #5]
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002b5c <executecommand+0x36c>
 8002a72:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a76:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002b60 <executecommand+0x370>
 8002a7a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a82:	4b3d      	ldr	r3, [pc, #244]	@ (8002b78 <executecommand+0x388>)
 8002a84:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b69      	cmp	r3, #105	@ 0x69
 8002a8e:	d14f      	bne.n	8002b30 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002a90:	4b31      	ldr	r3, [pc, #196]	@ (8002b58 <executecommand+0x368>)
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002b5c <executecommand+0x36c>
 8002aa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002aa4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002b60 <executecommand+0x370>
 8002aa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002aac:	4b2a      	ldr	r3, [pc, #168]	@ (8002b58 <executecommand+0x368>)
 8002aae:	789b      	ldrb	r3, [r3, #2]
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab8:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002b5c <executecommand+0x36c>
 8002abc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ac0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ac4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002acc:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <executecommand+0x368>)
 8002ace:	78db      	ldrb	r3, [r3, #3]
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002b5c <executecommand+0x36c>
 8002adc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b58 <executecommand+0x368>)
 8002ae6:	791b      	ldrb	r3, [r3, #4]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af0:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002b5c <executecommand+0x36c>
 8002af4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002af8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002afc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b04:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <executecommand+0x368>)
 8002b06:	795b      	ldrb	r3, [r3, #5]
 8002b08:	ee07 3a90 	vmov	s15, r3
 8002b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b10:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002b5c <executecommand+0x36c>
 8002b14:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b18:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002b60 <executecommand+0x370>
 8002b1c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b24:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <executecommand+0x38c>)
 8002b26:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002b2a:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <executecommand+0x390>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b64      	cmp	r3, #100	@ 0x64
 8002b36:	d164      	bne.n	8002c02 <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b38:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <executecommand+0x368>)
 8002b3a:	785b      	ldrb	r3, [r3, #1]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b44:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002b5c <executecommand+0x36c>
 8002b48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b4c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b70 <executecommand+0x380>
 8002b50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b54:	e016      	b.n	8002b84 <executecommand+0x394>
 8002b56:	bf00      	nop
 8002b58:	000041c8 	.word	0x000041c8
 8002b5c:	42400000 	.word	0x42400000
 8002b60:	42c80000 	.word	0x42c80000
 8002b64:	000040f4 	.word	0x000040f4
 8002b68:	00004100 	.word	0x00004100
 8002b6c:	000040c4 	.word	0x000040c4
 8002b70:	447a0000 	.word	0x447a0000
 8002b74:	0000410c 	.word	0x0000410c
 8002b78:	00004154 	.word	0x00004154
 8002b7c:	00004160 	.word	0x00004160
 8002b80:	000040d0 	.word	0x000040d0
 8002b84:	4bd3      	ldr	r3, [pc, #844]	@ (8002ed4 <executecommand+0x6e4>)
 8002b86:	789b      	ldrb	r3, [r3, #2]
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b90:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002ed8 <executecommand+0x6e8>
 8002b94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b98:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002edc <executecommand+0x6ec>
 8002b9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba4:	4bcb      	ldr	r3, [pc, #812]	@ (8002ed4 <executecommand+0x6e4>)
 8002ba6:	78db      	ldrb	r3, [r3, #3]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb0:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002ed8 <executecommand+0x6e8>
 8002bb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bb8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002bbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc4:	4bc3      	ldr	r3, [pc, #780]	@ (8002ed4 <executecommand+0x6e4>)
 8002bc6:	791b      	ldrb	r3, [r3, #4]
 8002bc8:	ee07 3a90 	vmov	s15, r3
 8002bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd0:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002ed8 <executecommand+0x6e8>
 8002bd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bdc:	4bbd      	ldr	r3, [pc, #756]	@ (8002ed4 <executecommand+0x6e4>)
 8002bde:	795b      	ldrb	r3, [r3, #5]
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be8:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002ed8 <executecommand+0x6e8>
 8002bec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bf0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bf4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfc:	4bb8      	ldr	r3, [pc, #736]	@ (8002ee0 <executecommand+0x6f0>)
 8002bfe:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b46      	cmp	r3, #70	@ 0x46
 8002c08:	d150      	bne.n	8002cac <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c0a:	4bb2      	ldr	r3, [pc, #712]	@ (8002ed4 <executecommand+0x6e4>)
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c16:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002ed8 <executecommand+0x6e8>
 8002c1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c1e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002ee4 <executecommand+0x6f4>
 8002c22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c26:	4bab      	ldr	r3, [pc, #684]	@ (8002ed4 <executecommand+0x6e4>)
 8002c28:	789b      	ldrb	r3, [r3, #2]
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c32:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002ed8 <executecommand+0x6e8>
 8002c36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c3a:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002edc <executecommand+0x6ec>
 8002c3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c46:	4ba3      	ldr	r3, [pc, #652]	@ (8002ed4 <executecommand+0x6e4>)
 8002c48:	78db      	ldrb	r3, [r3, #3]
 8002c4a:	ee07 3a90 	vmov	s15, r3
 8002c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c52:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002ed8 <executecommand+0x6e8>
 8002c56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c5a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c66:	4b9b      	ldr	r3, [pc, #620]	@ (8002ed4 <executecommand+0x6e4>)
 8002c68:	791b      	ldrb	r3, [r3, #4]
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c72:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002ed8 <executecommand+0x6e8>
 8002c76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c7e:	4b95      	ldr	r3, [pc, #596]	@ (8002ed4 <executecommand+0x6e4>)
 8002c80:	795b      	ldrb	r3, [r3, #5]
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8a:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002ed8 <executecommand+0x6e8>
 8002c8e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c92:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c96:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca2:	ee17 3a90 	vmov	r3, s15
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8002ee8 <executecommand+0x6f8>)
 8002caa:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b66      	cmp	r3, #102	@ 0x66
 8002cb2:	d150      	bne.n	8002d56 <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002cb4:	4b87      	ldr	r3, [pc, #540]	@ (8002ed4 <executecommand+0x6e4>)
 8002cb6:	785b      	ldrb	r3, [r3, #1]
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc0:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002ed8 <executecommand+0x6e8>
 8002cc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cc8:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002ee4 <executecommand+0x6f4>
 8002ccc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cd0:	4b80      	ldr	r3, [pc, #512]	@ (8002ed4 <executecommand+0x6e4>)
 8002cd2:	789b      	ldrb	r3, [r3, #2]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cdc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002ed8 <executecommand+0x6e8>
 8002ce0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ce4:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002edc <executecommand+0x6ec>
 8002ce8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cf0:	4b78      	ldr	r3, [pc, #480]	@ (8002ed4 <executecommand+0x6e4>)
 8002cf2:	78db      	ldrb	r3, [r3, #3]
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfc:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002ed8 <executecommand+0x6e8>
 8002d00:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d04:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d10:	4b70      	ldr	r3, [pc, #448]	@ (8002ed4 <executecommand+0x6e4>)
 8002d12:	791b      	ldrb	r3, [r3, #4]
 8002d14:	ee07 3a90 	vmov	s15, r3
 8002d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002ed8 <executecommand+0x6e8>
 8002d20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d28:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed4 <executecommand+0x6e4>)
 8002d2a:	795b      	ldrb	r3, [r3, #5]
 8002d2c:	ee07 3a90 	vmov	s15, r3
 8002d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d34:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002ed8 <executecommand+0x6e8>
 8002d38:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d3c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d40:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d4c:	ee17 3a90 	vmov	r3, s15
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	4b66      	ldr	r3, [pc, #408]	@ (8002eec <executecommand+0x6fc>)
 8002d54:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b61      	cmp	r3, #97	@ 0x61
 8002d5c:	d14c      	bne.n	8002df8 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed4 <executecommand+0x6e4>)
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6a:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002ed8 <executecommand+0x6e8>
 8002d6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d72:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002edc <executecommand+0x6ec>
 8002d76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d7a:	4b56      	ldr	r3, [pc, #344]	@ (8002ed4 <executecommand+0x6e4>)
 8002d7c:	789b      	ldrb	r3, [r3, #2]
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d86:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002ed8 <executecommand+0x6e8>
 8002d8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d8e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed4 <executecommand+0x6e4>)
 8002d9c:	78db      	ldrb	r3, [r3, #3]
 8002d9e:	ee07 3a90 	vmov	s15, r3
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002ed8 <executecommand+0x6e8>
 8002daa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db2:	4b48      	ldr	r3, [pc, #288]	@ (8002ed4 <executecommand+0x6e4>)
 8002db4:	791b      	ldrb	r3, [r3, #4]
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dbe:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002ed8 <executecommand+0x6e8>
 8002dc2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dc6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002dca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dd2:	4b40      	ldr	r3, [pc, #256]	@ (8002ed4 <executecommand+0x6e4>)
 8002dd4:	795b      	ldrb	r3, [r3, #5]
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dde:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002ed8 <executecommand+0x6e8>
 8002de2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002de6:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002edc <executecommand+0x6ec>
 8002dea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef0 <executecommand+0x700>)
 8002df4:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b62      	cmp	r3, #98	@ 0x62
 8002dfe:	d14f      	bne.n	8002ea0 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002e00:	4b34      	ldr	r3, [pc, #208]	@ (8002ed4 <executecommand+0x6e4>)
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	ee07 3a90 	vmov	s15, r3
 8002e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002ed8 <executecommand+0x6e8>
 8002e10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e14:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002edc <executecommand+0x6ec>
 8002e18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <executecommand+0x6e4>)
 8002e1e:	789b      	ldrb	r3, [r3, #2]
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e28:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002ed8 <executecommand+0x6e8>
 8002e2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e30:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ed4 <executecommand+0x6e4>)
 8002e3e:	78db      	ldrb	r3, [r3, #3]
 8002e40:	ee07 3a90 	vmov	s15, r3
 8002e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e48:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002ed8 <executecommand+0x6e8>
 8002e4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <executecommand+0x6e4>)
 8002e56:	791b      	ldrb	r3, [r3, #4]
 8002e58:	ee07 3a90 	vmov	s15, r3
 8002e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e60:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002ed8 <executecommand+0x6e8>
 8002e64:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e68:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e74:	4b17      	ldr	r3, [pc, #92]	@ (8002ed4 <executecommand+0x6e4>)
 8002e76:	795b      	ldrb	r3, [r3, #5]
 8002e78:	ee07 3a90 	vmov	s15, r3
 8002e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e80:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002ed8 <executecommand+0x6e8>
 8002e84:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e88:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002edc <executecommand+0x6ec>
 8002e8c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e94:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <executecommand+0x704>)
 8002e96:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002e9a:	4b17      	ldr	r3, [pc, #92]	@ (8002ef8 <executecommand+0x708>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b63      	cmp	r3, #99	@ 0x63
 8002ea6:	d166      	bne.n	8002f76 <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <executecommand+0x6e4>)
 8002eaa:	785b      	ldrb	r3, [r3, #1]
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb4:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ed8 <executecommand+0x6e8>
 8002eb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ebc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002ee4 <executecommand+0x6f4>
 8002ec0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ec4:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <executecommand+0x6e4>)
 8002ec6:	789b      	ldrb	r3, [r3, #2]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed0:	e018      	b.n	8002f04 <executecommand+0x714>
 8002ed2:	bf00      	nop
 8002ed4:	000041c8 	.word	0x000041c8
 8002ed8:	42400000 	.word	0x42400000
 8002edc:	42c80000 	.word	0x42c80000
 8002ee0:	0000416c 	.word	0x0000416c
 8002ee4:	447a0000 	.word	0x447a0000
 8002ee8:	00004084 	.word	0x00004084
 8002eec:	00004086 	.word	0x00004086
 8002ef0:	000040f8 	.word	0x000040f8
 8002ef4:	00004104 	.word	0x00004104
 8002ef8:	000040c8 	.word	0x000040c8
 8002efc:	42400000 	.word	0x42400000
 8002f00:	42c80000 	.word	0x42c80000
 8002f04:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002efc <executecommand+0x70c>
 8002f08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f0c:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002f00 <executecommand+0x710>
 8002f10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f18:	4bd5      	ldr	r3, [pc, #852]	@ (8003270 <executecommand+0xa80>)
 8002f1a:	78db      	ldrb	r3, [r3, #3]
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f24:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 8003274 <executecommand+0xa84>
 8002f28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f2c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f38:	4bcd      	ldr	r3, [pc, #820]	@ (8003270 <executecommand+0xa80>)
 8002f3a:	791b      	ldrb	r3, [r3, #4]
 8002f3c:	ee07 3a90 	vmov	s15, r3
 8002f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f44:	eddf 6acb 	vldr	s13, [pc, #812]	@ 8003274 <executecommand+0xa84>
 8002f48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f50:	4bc7      	ldr	r3, [pc, #796]	@ (8003270 <executecommand+0xa80>)
 8002f52:	795b      	ldrb	r3, [r3, #5]
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5c:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8003274 <executecommand+0xa84>
 8002f60:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f64:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f68:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f70:	4bc1      	ldr	r3, [pc, #772]	@ (8003278 <executecommand+0xa88>)
 8002f72:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b65      	cmp	r3, #101	@ 0x65
 8002f7c:	d14c      	bne.n	8003018 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f7e:	4bbc      	ldr	r3, [pc, #752]	@ (8003270 <executecommand+0xa80>)
 8002f80:	785b      	ldrb	r3, [r3, #1]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8a:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8003274 <executecommand+0xa84>
 8002f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f92:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 800327c <executecommand+0xa8c>
 8002f96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f9a:	4bb5      	ldr	r3, [pc, #724]	@ (8003270 <executecommand+0xa80>)
 8002f9c:	789b      	ldrb	r3, [r3, #2]
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8003274 <executecommand+0xa84>
 8002faa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fae:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002fb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fba:	4bad      	ldr	r3, [pc, #692]	@ (8003270 <executecommand+0xa80>)
 8002fbc:	78db      	ldrb	r3, [r3, #3]
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc6:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8003274 <executecommand+0xa84>
 8002fca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fd2:	4ba7      	ldr	r3, [pc, #668]	@ (8003270 <executecommand+0xa80>)
 8002fd4:	791b      	ldrb	r3, [r3, #4]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 8003274 <executecommand+0xa84>
 8002fe2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fe6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ff2:	4b9f      	ldr	r3, [pc, #636]	@ (8003270 <executecommand+0xa80>)
 8002ff4:	795b      	ldrb	r3, [r3, #5]
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ffe:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8003274 <executecommand+0xa84>
 8003002:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003006:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 800327c <executecommand+0xa8c>
 800300a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800300e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003012:	4b9b      	ldr	r3, [pc, #620]	@ (8003280 <executecommand+0xa90>)
 8003014:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b67      	cmp	r3, #103	@ 0x67
 800301e:	d14f      	bne.n	80030c0 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003020:	4b93      	ldr	r3, [pc, #588]	@ (8003270 <executecommand+0xa80>)
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003274 <executecommand+0xa84>
 8003030:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003034:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800327c <executecommand+0xa8c>
 8003038:	ee27 7a87 	vmul.f32	s14, s15, s14
 800303c:	4b8c      	ldr	r3, [pc, #560]	@ (8003270 <executecommand+0xa80>)
 800303e:	789b      	ldrb	r3, [r3, #2]
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003048:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003274 <executecommand+0xa84>
 800304c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003050:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003054:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800305c:	4b84      	ldr	r3, [pc, #528]	@ (8003270 <executecommand+0xa80>)
 800305e:	78db      	ldrb	r3, [r3, #3]
 8003060:	ee07 3a90 	vmov	s15, r3
 8003064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003068:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003274 <executecommand+0xa84>
 800306c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003074:	4b7e      	ldr	r3, [pc, #504]	@ (8003270 <executecommand+0xa80>)
 8003076:	791b      	ldrb	r3, [r3, #4]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003080:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003274 <executecommand+0xa84>
 8003084:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003088:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800308c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003090:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003094:	4b76      	ldr	r3, [pc, #472]	@ (8003270 <executecommand+0xa80>)
 8003096:	795b      	ldrb	r3, [r3, #5]
 8003098:	ee07 3a90 	vmov	s15, r3
 800309c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a0:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003274 <executecommand+0xa84>
 80030a4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80030a8:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 800327c <executecommand+0xa8c>
 80030ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030b4:	4b73      	ldr	r3, [pc, #460]	@ (8003284 <executecommand+0xa94>)
 80030b6:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 80030ba:	4b73      	ldr	r3, [pc, #460]	@ (8003288 <executecommand+0xa98>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b68      	cmp	r3, #104	@ 0x68
 80030c6:	d14c      	bne.n	8003162 <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80030c8:	4b69      	ldr	r3, [pc, #420]	@ (8003270 <executecommand+0xa80>)
 80030ca:	785b      	ldrb	r3, [r3, #1]
 80030cc:	ee07 3a90 	vmov	s15, r3
 80030d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d4:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8003274 <executecommand+0xa84>
 80030d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030dc:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800328c <executecommand+0xa9c>
 80030e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030e4:	4b62      	ldr	r3, [pc, #392]	@ (8003270 <executecommand+0xa80>)
 80030e6:	789b      	ldrb	r3, [r3, #2]
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f0:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8003274 <executecommand+0xa84>
 80030f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030f8:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800327c <executecommand+0xa8c>
 80030fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003100:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003104:	4b5a      	ldr	r3, [pc, #360]	@ (8003270 <executecommand+0xa80>)
 8003106:	78db      	ldrb	r3, [r3, #3]
 8003108:	ee07 3a90 	vmov	s15, r3
 800310c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003110:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003274 <executecommand+0xa84>
 8003114:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003118:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800311c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003124:	4b52      	ldr	r3, [pc, #328]	@ (8003270 <executecommand+0xa80>)
 8003126:	791b      	ldrb	r3, [r3, #4]
 8003128:	ee07 3a90 	vmov	s15, r3
 800312c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003130:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8003274 <executecommand+0xa84>
 8003134:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800313c:	4b4c      	ldr	r3, [pc, #304]	@ (8003270 <executecommand+0xa80>)
 800313e:	795b      	ldrb	r3, [r3, #5]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003148:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8003274 <executecommand+0xa84>
 800314c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003150:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003154:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315c:	4b4c      	ldr	r3, [pc, #304]	@ (8003290 <executecommand+0xaa0>)
 800315e:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b6a      	cmp	r3, #106	@ 0x6a
 8003168:	d14c      	bne.n	8003204 <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800316a:	4b41      	ldr	r3, [pc, #260]	@ (8003270 <executecommand+0xa80>)
 800316c:	785b      	ldrb	r3, [r3, #1]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003274 <executecommand+0xa84>
 800317a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800317e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800327c <executecommand+0xa8c>
 8003182:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003186:	4b3a      	ldr	r3, [pc, #232]	@ (8003270 <executecommand+0xa80>)
 8003188:	789b      	ldrb	r3, [r3, #2]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003274 <executecommand+0xa84>
 8003196:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800319a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800319e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a6:	4b32      	ldr	r3, [pc, #200]	@ (8003270 <executecommand+0xa80>)
 80031a8:	78db      	ldrb	r3, [r3, #3]
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b2:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8003274 <executecommand+0xa84>
 80031b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031be:	4b2c      	ldr	r3, [pc, #176]	@ (8003270 <executecommand+0xa80>)
 80031c0:	791b      	ldrb	r3, [r3, #4]
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ca:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003274 <executecommand+0xa84>
 80031ce:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031d2:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031de:	4b24      	ldr	r3, [pc, #144]	@ (8003270 <executecommand+0xa80>)
 80031e0:	795b      	ldrb	r3, [r3, #5]
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ea:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8003274 <executecommand+0xa84>
 80031ee:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031f2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800327c <executecommand+0xa8c>
 80031f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fe:	4b25      	ldr	r3, [pc, #148]	@ (8003294 <executecommand+0xaa4>)
 8003200:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b6b      	cmp	r3, #107	@ 0x6b
 800320a:	d167      	bne.n	80032dc <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800320c:	4b18      	ldr	r3, [pc, #96]	@ (8003270 <executecommand+0xa80>)
 800320e:	785b      	ldrb	r3, [r3, #1]
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003218:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003274 <executecommand+0xa84>
 800321c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003220:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800327c <executecommand+0xa8c>
 8003224:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003228:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <executecommand+0xa80>)
 800322a:	789b      	ldrb	r3, [r3, #2]
 800322c:	ee07 3a90 	vmov	s15, r3
 8003230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003234:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003274 <executecommand+0xa84>
 8003238:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800323c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003240:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003248:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <executecommand+0xa80>)
 800324a:	78db      	ldrb	r3, [r3, #3]
 800324c:	ee07 3a90 	vmov	s15, r3
 8003250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003254:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8003274 <executecommand+0xa84>
 8003258:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800325c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003260:	4b03      	ldr	r3, [pc, #12]	@ (8003270 <executecommand+0xa80>)
 8003262:	791b      	ldrb	r3, [r3, #4]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326c:	e016      	b.n	800329c <executecommand+0xaac>
 800326e:	bf00      	nop
 8003270:	000041c8 	.word	0x000041c8
 8003274:	42400000 	.word	0x42400000
 8003278:	00004110 	.word	0x00004110
 800327c:	42c80000 	.word	0x42c80000
 8003280:	00004158 	.word	0x00004158
 8003284:	00004164 	.word	0x00004164
 8003288:	000040d4 	.word	0x000040d4
 800328c:	447a0000 	.word	0x447a0000
 8003290:	00004170 	.word	0x00004170
 8003294:	000040fc 	.word	0x000040fc
 8003298:	42400000 	.word	0x42400000
 800329c:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 8003298 <executecommand+0xaa8>
 80032a0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032a4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032b0:	4bba      	ldr	r3, [pc, #744]	@ (800359c <executecommand+0xdac>)
 80032b2:	795b      	ldrb	r3, [r3, #5]
 80032b4:	ee07 3a90 	vmov	s15, r3
 80032b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032bc:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80035a0 <executecommand+0xdb0>
 80032c0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032c4:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 80035a4 <executecommand+0xdb4>
 80032c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d0:	4bb5      	ldr	r3, [pc, #724]	@ (80035a8 <executecommand+0xdb8>)
 80032d2:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 80032d6:	4bb5      	ldr	r3, [pc, #724]	@ (80035ac <executecommand+0xdbc>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b6c      	cmp	r3, #108	@ 0x6c
 80032e2:	d14c      	bne.n	800337e <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80032e4:	4bad      	ldr	r3, [pc, #692]	@ (800359c <executecommand+0xdac>)
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	ee07 3a90 	vmov	s15, r3
 80032ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f0:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80035a0 <executecommand+0xdb0>
 80032f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032f8:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80035b0 <executecommand+0xdc0>
 80032fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003300:	4ba6      	ldr	r3, [pc, #664]	@ (800359c <executecommand+0xdac>)
 8003302:	789b      	ldrb	r3, [r3, #2]
 8003304:	ee07 3a90 	vmov	s15, r3
 8003308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330c:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80035a0 <executecommand+0xdb0>
 8003310:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003314:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80035a4 <executecommand+0xdb4>
 8003318:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800331c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003320:	4b9e      	ldr	r3, [pc, #632]	@ (800359c <executecommand+0xdac>)
 8003322:	78db      	ldrb	r3, [r3, #3]
 8003324:	ee07 3a90 	vmov	s15, r3
 8003328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332c:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80035a0 <executecommand+0xdb0>
 8003330:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003334:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003338:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800333c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003340:	4b96      	ldr	r3, [pc, #600]	@ (800359c <executecommand+0xdac>)
 8003342:	791b      	ldrb	r3, [r3, #4]
 8003344:	ee07 3a90 	vmov	s15, r3
 8003348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334c:	eddf 6a94 	vldr	s13, [pc, #592]	@ 80035a0 <executecommand+0xdb0>
 8003350:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003358:	4b90      	ldr	r3, [pc, #576]	@ (800359c <executecommand+0xdac>)
 800335a:	795b      	ldrb	r3, [r3, #5]
 800335c:	ee07 3a90 	vmov	s15, r3
 8003360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003364:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80035a0 <executecommand+0xdb0>
 8003368:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800336c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003370:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003378:	4b8e      	ldr	r3, [pc, #568]	@ (80035b4 <executecommand+0xdc4>)
 800337a:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b6d      	cmp	r3, #109	@ 0x6d
 8003384:	d14c      	bne.n	8003420 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003386:	4b85      	ldr	r3, [pc, #532]	@ (800359c <executecommand+0xdac>)
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003392:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80035a0 <executecommand+0xdb0>
 8003396:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800339a:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80035a4 <executecommand+0xdb4>
 800339e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033a2:	4b7e      	ldr	r3, [pc, #504]	@ (800359c <executecommand+0xdac>)
 80033a4:	789b      	ldrb	r3, [r3, #2]
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ae:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80035a0 <executecommand+0xdb0>
 80033b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033b6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80033ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c2:	4b76      	ldr	r3, [pc, #472]	@ (800359c <executecommand+0xdac>)
 80033c4:	78db      	ldrb	r3, [r3, #3]
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ce:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80035a0 <executecommand+0xdb0>
 80033d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033da:	4b70      	ldr	r3, [pc, #448]	@ (800359c <executecommand+0xdac>)
 80033dc:	791b      	ldrb	r3, [r3, #4]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80035a0 <executecommand+0xdb0>
 80033ea:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033ee:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033f2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033fa:	4b68      	ldr	r3, [pc, #416]	@ (800359c <executecommand+0xdac>)
 80033fc:	795b      	ldrb	r3, [r3, #5]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80035a0 <executecommand+0xdb0>
 800340a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800340e:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80035a4 <executecommand+0xdb4>
 8003412:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341a:	4b67      	ldr	r3, [pc, #412]	@ (80035b8 <executecommand+0xdc8>)
 800341c:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b6e      	cmp	r3, #110	@ 0x6e
 8003426:	d14f      	bne.n	80034c8 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003428:	4b5c      	ldr	r3, [pc, #368]	@ (800359c <executecommand+0xdac>)
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	ee07 3a90 	vmov	s15, r3
 8003430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003434:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80035a0 <executecommand+0xdb0>
 8003438:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800343c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80035a4 <executecommand+0xdb4>
 8003440:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003444:	4b55      	ldr	r3, [pc, #340]	@ (800359c <executecommand+0xdac>)
 8003446:	789b      	ldrb	r3, [r3, #2]
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003450:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80035a0 <executecommand+0xdb0>
 8003454:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003458:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800345c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003464:	4b4d      	ldr	r3, [pc, #308]	@ (800359c <executecommand+0xdac>)
 8003466:	78db      	ldrb	r3, [r3, #3]
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003470:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80035a0 <executecommand+0xdb0>
 8003474:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800347c:	4b47      	ldr	r3, [pc, #284]	@ (800359c <executecommand+0xdac>)
 800347e:	791b      	ldrb	r3, [r3, #4]
 8003480:	ee07 3a90 	vmov	s15, r3
 8003484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003488:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80035a0 <executecommand+0xdb0>
 800348c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003490:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003494:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003498:	ee37 7a27 	vadd.f32	s14, s14, s15
 800349c:	4b3f      	ldr	r3, [pc, #252]	@ (800359c <executecommand+0xdac>)
 800349e:	795b      	ldrb	r3, [r3, #5]
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a8:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80035a0 <executecommand+0xdb0>
 80034ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034b0:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 80035a4 <executecommand+0xdb4>
 80034b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034bc:	4b3f      	ldr	r3, [pc, #252]	@ (80035bc <executecommand+0xdcc>)
 80034be:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 80034c2:	4b3f      	ldr	r3, [pc, #252]	@ (80035c0 <executecommand+0xdd0>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b6f      	cmp	r3, #111	@ 0x6f
 80034ce:	d14c      	bne.n	800356a <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80034d0:	4b32      	ldr	r3, [pc, #200]	@ (800359c <executecommand+0xdac>)
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	ee07 3a90 	vmov	s15, r3
 80034d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034dc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80035a0 <executecommand+0xdb0>
 80034e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034e4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80035b0 <executecommand+0xdc0>
 80034e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034ec:	4b2b      	ldr	r3, [pc, #172]	@ (800359c <executecommand+0xdac>)
 80034ee:	789b      	ldrb	r3, [r3, #2]
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f8:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80035a0 <executecommand+0xdb0>
 80034fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003500:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80035a4 <executecommand+0xdb4>
 8003504:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800350c:	4b23      	ldr	r3, [pc, #140]	@ (800359c <executecommand+0xdac>)
 800350e:	78db      	ldrb	r3, [r3, #3]
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003518:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80035a0 <executecommand+0xdb0>
 800351c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003520:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003524:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800352c:	4b1b      	ldr	r3, [pc, #108]	@ (800359c <executecommand+0xdac>)
 800352e:	791b      	ldrb	r3, [r3, #4]
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003538:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80035a0 <executecommand+0xdb0>
 800353c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003544:	4b15      	ldr	r3, [pc, #84]	@ (800359c <executecommand+0xdac>)
 8003546:	795b      	ldrb	r3, [r3, #5]
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003550:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80035a0 <executecommand+0xdb0>
 8003554:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003558:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800355c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003564:	4b17      	ldr	r3, [pc, #92]	@ (80035c4 <executecommand+0xdd4>)
 8003566:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b72      	cmp	r3, #114	@ 0x72
 8003570:	d101      	bne.n	8003576 <executecommand+0xd86>
		NVIC_SystemReset();
 8003572:	f7ff f8d9 	bl	8002728 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e007      	b.n	800358c <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 800357c:	4a07      	ldr	r2, [pc, #28]	@ (800359c <executecommand+0xdac>)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4413      	add	r3, r2
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3301      	adds	r3, #1
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b0e      	cmp	r3, #14
 8003590:	ddf4      	ble.n	800357c <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	000041c8 	.word	0x000041c8
 80035a0:	42400000 	.word	0x42400000
 80035a4:	42c80000 	.word	0x42c80000
 80035a8:	00004108 	.word	0x00004108
 80035ac:	000040cc 	.word	0x000040cc
 80035b0:	447a0000 	.word	0x447a0000
 80035b4:	00004114 	.word	0x00004114
 80035b8:	0000415c 	.word	0x0000415c
 80035bc:	00004168 	.word	0x00004168
 80035c0:	000040d8 	.word	0x000040d8
 80035c4:	00004174 	.word	0x00004174

080035c8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08a      	sub	sp, #40	@ 0x28
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035ce:	1d3b      	adds	r3, r7, #4
 80035d0:	2224      	movs	r2, #36	@ 0x24
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f01a fda5 	bl	801e124 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80035da:	4b2e      	ldr	r3, [pc, #184]	@ (8003694 <MX_ADC2_Init+0xcc>)
 80035dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003698 <MX_ADC2_Init+0xd0>)
 80035de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80035e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <MX_ADC2_Init+0xcc>)
 80035e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80035e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <MX_ADC2_Init+0xcc>)
 80035ea:	2208      	movs	r2, #8
 80035ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035ee:	4b29      	ldr	r3, [pc, #164]	@ (8003694 <MX_ADC2_Init+0xcc>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035f4:	4b27      	ldr	r3, [pc, #156]	@ (8003694 <MX_ADC2_Init+0xcc>)
 80035f6:	2204      	movs	r2, #4
 80035f8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80035fa:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <MX_ADC2_Init+0xcc>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003600:	4b24      	ldr	r3, [pc, #144]	@ (8003694 <MX_ADC2_Init+0xcc>)
 8003602:	2200      	movs	r2, #0
 8003604:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8003606:	4b23      	ldr	r3, [pc, #140]	@ (8003694 <MX_ADC2_Init+0xcc>)
 8003608:	2201      	movs	r2, #1
 800360a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800360c:	4b21      	ldr	r3, [pc, #132]	@ (8003694 <MX_ADC2_Init+0xcc>)
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 8003614:	4b1f      	ldr	r3, [pc, #124]	@ (8003694 <MX_ADC2_Init+0xcc>)
 8003616:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 800361a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800361c:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <MX_ADC2_Init+0xcc>)
 800361e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003622:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8003624:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <MX_ADC2_Init+0xcc>)
 8003626:	2203      	movs	r2, #3
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800362a:	4b1a      	ldr	r3, [pc, #104]	@ (8003694 <MX_ADC2_Init+0xcc>)
 800362c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003630:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003632:	4b18      	ldr	r3, [pc, #96]	@ (8003694 <MX_ADC2_Init+0xcc>)
 8003634:	2200      	movs	r2, #0
 8003636:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003638:	4b16      	ldr	r3, [pc, #88]	@ (8003694 <MX_ADC2_Init+0xcc>)
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003640:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <MX_ADC2_Init+0xcc>)
 8003642:	2201      	movs	r2, #1
 8003644:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003646:	4813      	ldr	r0, [pc, #76]	@ (8003694 <MX_ADC2_Init+0xcc>)
 8003648:	f006 faea 	bl	8009c20 <HAL_ADC_Init>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003652:	f004 fc31 	bl	8007eb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003656:	4b11      	ldr	r3, [pc, #68]	@ (800369c <MX_ADC2_Init+0xd4>)
 8003658:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800365a:	2306      	movs	r3, #6
 800365c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800365e:	2307      	movs	r3, #7
 8003660:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003662:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003666:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003668:	2304      	movs	r3, #4
 800366a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4806      	ldr	r0, [pc, #24]	@ (8003694 <MX_ADC2_Init+0xcc>)
 800367c:	f007 f816 	bl	800a6ac <HAL_ADC_ConfigChannel>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 8003686:	f004 fc17 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800368a:	bf00      	nop
 800368c:	3728      	adds	r7, #40	@ 0x28
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	240000ac 	.word	0x240000ac
 8003698:	40022100 	.word	0x40022100
 800369c:	19200040 	.word	0x19200040

080036a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	@ 0x28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a34      	ldr	r2, [pc, #208]	@ (8003790 <HAL_ADC_MspInit+0xf0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d162      	bne.n	8003788 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80036c2:	4b34      	ldr	r3, [pc, #208]	@ (8003794 <HAL_ADC_MspInit+0xf4>)
 80036c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036c8:	4a32      	ldr	r2, [pc, #200]	@ (8003794 <HAL_ADC_MspInit+0xf4>)
 80036ca:	f043 0320 	orr.w	r3, r3, #32
 80036ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80036d2:	4b30      	ldr	r3, [pc, #192]	@ (8003794 <HAL_ADC_MspInit+0xf4>)
 80036d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003794 <HAL_ADC_MspInit+0xf4>)
 80036e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003794 <HAL_ADC_MspInit+0xf4>)
 80036e8:	f043 0320 	orr.w	r3, r3, #32
 80036ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036f0:	4b28      	ldr	r3, [pc, #160]	@ (8003794 <HAL_ADC_MspInit+0xf4>)
 80036f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003704:	2303      	movs	r3, #3
 8003706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800370c:	f107 0314 	add.w	r3, r7, #20
 8003710:	4619      	mov	r1, r3
 8003712:	4821      	ldr	r0, [pc, #132]	@ (8003798 <HAL_ADC_MspInit+0xf8>)
 8003714:	f00a feb6 	bl	800e484 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003718:	4b20      	ldr	r3, [pc, #128]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 800371a:	4a21      	ldr	r2, [pc, #132]	@ (80037a0 <HAL_ADC_MspInit+0x100>)
 800371c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800371e:	4b1f      	ldr	r3, [pc, #124]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 8003720:	220a      	movs	r2, #10
 8003722:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003724:	4b1d      	ldr	r3, [pc, #116]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800372a:	4b1c      	ldr	r3, [pc, #112]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 800372c:	2200      	movs	r2, #0
 800372e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003730:	4b1a      	ldr	r3, [pc, #104]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 8003732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003736:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003738:	4b18      	ldr	r3, [pc, #96]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 800373a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800373e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003740:	4b16      	ldr	r3, [pc, #88]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 8003742:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003746:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003748:	4b14      	ldr	r3, [pc, #80]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 800374a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800374e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003750:	4b12      	ldr	r3, [pc, #72]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 8003752:	2200      	movs	r2, #0
 8003754:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003756:	4b11      	ldr	r3, [pc, #68]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 8003758:	2200      	movs	r2, #0
 800375a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800375c:	480f      	ldr	r0, [pc, #60]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 800375e:	f008 f83f 	bl	800b7e0 <HAL_DMA_Init>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8003768:	f004 fba6 	bl	8007eb8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a0b      	ldr	r2, [pc, #44]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 8003770:	659a      	str	r2, [r3, #88]	@ 0x58
 8003772:	4a0a      	ldr	r2, [pc, #40]	@ (800379c <HAL_ADC_MspInit+0xfc>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003778:	2200      	movs	r2, #0
 800377a:	2100      	movs	r1, #0
 800377c:	2012      	movs	r0, #18
 800377e:	f007 ff82 	bl	800b686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003782:	2012      	movs	r0, #18
 8003784:	f007 ff99 	bl	800b6ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003788:	bf00      	nop
 800378a:	3728      	adds	r7, #40	@ 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40022100 	.word	0x40022100
 8003794:	58024400 	.word	0x58024400
 8003798:	58021400 	.word	0x58021400
 800379c:	2400011c 	.word	0x2400011c
 80037a0:	40020410 	.word	0x40020410

080037a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80037aa:	4b19      	ldr	r3, [pc, #100]	@ (8003810 <MX_DMA_Init+0x6c>)
 80037ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037b0:	4a17      	ldr	r2, [pc, #92]	@ (8003810 <MX_DMA_Init+0x6c>)
 80037b2:	f043 0302 	orr.w	r3, r3, #2
 80037b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037ba:	4b15      	ldr	r3, [pc, #84]	@ (8003810 <MX_DMA_Init+0x6c>)
 80037bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037c8:	4b11      	ldr	r3, [pc, #68]	@ (8003810 <MX_DMA_Init+0x6c>)
 80037ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037ce:	4a10      	ldr	r2, [pc, #64]	@ (8003810 <MX_DMA_Init+0x6c>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003810 <MX_DMA_Init+0x6c>)
 80037da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80037e6:	2200      	movs	r2, #0
 80037e8:	2100      	movs	r1, #0
 80037ea:	200b      	movs	r0, #11
 80037ec:	f007 ff4b 	bl	800b686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80037f0:	200b      	movs	r0, #11
 80037f2:	f007 ff62 	bl	800b6ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80037f6:	2200      	movs	r2, #0
 80037f8:	2100      	movs	r1, #0
 80037fa:	2038      	movs	r0, #56	@ 0x38
 80037fc:	f007 ff43 	bl	800b686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003800:	2038      	movs	r0, #56	@ 0x38
 8003802:	f007 ff5a 	bl	800b6ba <HAL_NVIC_EnableIRQ>

}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	58024400 	.word	0x58024400
 8003814:	00000000 	.word	0x00000000

08003818 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003818:	b580      	push	{r7, lr}
 800381a:	b08e      	sub	sp, #56	@ 0x38
 800381c:	af00      	add	r7, sp, #0
 800381e:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(pitch_error);
 8003834:	4b88      	ldr	r3, [pc, #544]	@ (8003a58 <Thrust_filter+0x240>)
 8003836:	edd3 7a00 	vldr	s15, [r3]
 800383a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800383e:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(rool_error);
 8003842:	4b86      	ldr	r3, [pc, #536]	@ (8003a5c <Thrust_filter+0x244>)
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800384c:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 8003850:	ed97 7b08 	vldr	d7, [r7, #32]
 8003854:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003858:	eeb0 0a67 	vmov.f32	s0, s15
 800385c:	f003 fe60 	bl	8007520 <WartoscBezwgledna>
 8003860:	eef0 7a40 	vmov.f32	s15, s0
 8003864:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003868:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 800386c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003870:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003874:	eeb0 0a67 	vmov.f32	s0, s15
 8003878:	f003 fe52 	bl	8007520 <WartoscBezwgledna>
 800387c:	eef0 7a40 	vmov.f32	s15, s0
 8003880:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003884:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 8003888:	ed97 6b08 	vldr	d6, [r7, #32]
 800388c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003890:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003894:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003898:	ee37 7b06 	vadd.f64	d7, d7, d6
 800389c:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80038a0:	eeb0 0b47 	vmov.f64	d0, d7
 80038a4:	f01a fdcc 	bl	801e440 <pow>
 80038a8:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 80038ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003a60 <Thrust_filter+0x248>)
 80038ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b2:	f642 1204 	movw	r2, #10500	@ 0x2904
 80038b6:	4293      	cmp	r3, r2
 80038b8:	dd03      	ble.n	80038c2 <Thrust_filter+0xaa>
		wanted_thrust = 10500;
 80038ba:	4b69      	ldr	r3, [pc, #420]	@ (8003a60 <Thrust_filter+0x248>)
 80038bc:	f642 1204 	movw	r2, #10500	@ 0x2904
 80038c0:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 80038c2:	4b67      	ldr	r3, [pc, #412]	@ (8003a60 <Thrust_filter+0x248>)
 80038c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	4b66      	ldr	r3, [pc, #408]	@ (8003a64 <Thrust_filter+0x24c>)
 80038cc:	885b      	ldrh	r3, [r3, #2]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 80038d4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038d8:	2b00      	cmp	r3, #0
 80038da:	da13      	bge.n	8003904 <Thrust_filter+0xec>
		thrust_error = WartoscBezwgledna(thrust_error);
 80038dc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038e0:	ee07 3a90 	vmov	s15, r3
 80038e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e8:	eeb0 0a67 	vmov.f32	s0, s15
 80038ec:	f003 fe18 	bl	8007520 <WartoscBezwgledna>
 80038f0:	eef0 7a40 	vmov.f32	s15, s0
 80038f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038f8:	ee17 3a90 	vmov	r3, s15
 80038fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003904:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8097 	beq.w	8003a3c <Thrust_filter+0x224>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800390e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800391a:	eeb0 0b47 	vmov.f64	d0, d7
 800391e:	f01a fc37 	bl	801e190 <sqrt>
 8003922:	eeb0 7b40 	vmov.f64	d7, d0
 8003926:	eeb0 0b47 	vmov.f64	d0, d7
 800392a:	f01a fc31 	bl	801e190 <sqrt>
 800392e:	eeb0 7b40 	vmov.f64	d7, d0
 8003932:	ed9f 6b45 	vldr	d6, [pc, #276]	@ 8003a48 <Thrust_filter+0x230>
 8003936:	ee27 7b06 	vmul.f64	d7, d7, d6
 800393a:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800393e:	ed97 7b00 	vldr	d7, [r7]
 8003942:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8003a50 <Thrust_filter+0x238>
 8003946:	ee27 6b06 	vmul.f64	d6, d7, d6
 800394a:	ed97 7b02 	vldr	d7, [r7, #8]
 800394e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8003952:	ed97 6b04 	vldr	d6, [r7, #16]
 8003956:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800395a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 800395e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003962:	2b01      	cmp	r3, #1
 8003964:	d105      	bne.n	8003972 <Thrust_filter+0x15a>
			thrust_add = thrust_add*(-1);
 8003966:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800396a:	eeb1 7b47 	vneg.f64	d7, d7
 800396e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 8003972:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003976:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800397a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800397e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003982:	d513      	bpl.n	80039ac <Thrust_filter+0x194>
 8003984:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003988:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800398c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003994:	dd0a      	ble.n	80039ac <Thrust_filter+0x194>
			thrust_values = thrust_values + thrust_add;
 8003996:	4b34      	ldr	r3, [pc, #208]	@ (8003a68 <Thrust_filter+0x250>)
 8003998:	ed93 6b00 	vldr	d6, [r3]
 800399c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039a4:	4b30      	ldr	r3, [pc, #192]	@ (8003a68 <Thrust_filter+0x250>)
 80039a6:	ed83 7b00 	vstr	d7, [r3]
 80039aa:	e010      	b.n	80039ce <Thrust_filter+0x1b6>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 80039ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003a64 <Thrust_filter+0x24c>)
 80039ae:	885b      	ldrh	r3, [r3, #2]
 80039b0:	ee07 3a90 	vmov	s15, r3
 80039b4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039b8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80039bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039c0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039c4:	ee17 3a90 	vmov	r3, s15
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	4b26      	ldr	r3, [pc, #152]	@ (8003a64 <Thrust_filter+0x24c>)
 80039cc:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 80039ce:	4b26      	ldr	r3, [pc, #152]	@ (8003a68 <Thrust_filter+0x250>)
 80039d0:	ed93 7b00 	vldr	d7, [r3]
 80039d4:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e0:	da09      	bge.n	80039f6 <Thrust_filter+0x1de>
 80039e2:	4b21      	ldr	r3, [pc, #132]	@ (8003a68 <Thrust_filter+0x250>)
 80039e4:	ed93 7b00 	vldr	d7, [r3]
 80039e8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80039ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	d818      	bhi.n	8003a28 <Thrust_filter+0x210>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 80039f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a64 <Thrust_filter+0x24c>)
 80039f8:	885b      	ldrh	r3, [r3, #2]
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a02:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <Thrust_filter+0x250>)
 8003a04:	ed93 7b00 	vldr	d7, [r3]
 8003a08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003a10:	ee17 3a90 	vmov	r3, s15
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <Thrust_filter+0x24c>)
 8003a18:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 8003a1a:	4913      	ldr	r1, [pc, #76]	@ (8003a68 <Thrust_filter+0x250>)
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 8003a28:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <Thrust_filter+0x24c>)
 8003a2a:	885b      	ldrh	r3, [r3, #2]
 8003a2c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d903      	bls.n	8003a3c <Thrust_filter+0x224>
			MYDRON.THRUST = 10000;
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <Thrust_filter+0x24c>)
 8003a36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a3a:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003a3c:	bf00      	nop
 8003a3e:	3738      	adds	r7, #56	@ 0x38
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	f3af 8000 	nop.w
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	409f4000 	.word	0x409f4000
 8003a50:	30553261 	.word	0x30553261
 8003a54:	3f33a92a 	.word	0x3f33a92a
 8003a58:	00004094 	.word	0x00004094
 8003a5c:	00004098 	.word	0x00004098
 8003a60:	00004068 	.word	0x00004068
 8003a64:	00000184 	.word	0x00000184
 8003a68:	00004070 	.word	0x00004070

08003a6c <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	f200 8380 	bhi.w	8004184 <PID_cal+0x718>
 8003a84:	a201      	add	r2, pc, #4	@ (adr r2, 8003a8c <PID_cal+0x20>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003aa5 	.word	0x08003aa5
 8003a90:	08003bbf 	.word	0x08003bbf
 8003a94:	08003cf9 	.word	0x08003cf9
 8003a98:	08003e13 	.word	0x08003e13
 8003a9c:	08003f51 	.word	0x08003f51
 8003aa0:	0800406b 	.word	0x0800406b
		case 1://pitch

			*PID_var = PID_FAC[0]*(pitch_error);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	ed93 7a00 	vldr	s14, [r3]
 8003aaa:	4b8b      	ldr	r3, [pc, #556]	@ (8003cd8 <PID_cal+0x26c>)
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	ed93 7a00 	vldr	s14, [r3]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	edd3 6a00 	vldr	s13, [r3]
 8003ac8:	4b84      	ldr	r3, [pc, #528]	@ (8003cdc <PID_cal+0x270>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ad4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ad8:	4b81      	ldr	r3, [pc, #516]	@ (8003ce0 <PID_cal+0x274>)
 8003ada:	edd3 7a00 	vldr	s15, [r3]
 8003ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pitch_error) - old_error_pitch);//policzenie częsci D
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	3308      	adds	r3, #8
 8003af0:	ed93 7a00 	vldr	s14, [r3]
 8003af4:	4b78      	ldr	r3, [pc, #480]	@ (8003cd8 <PID_cal+0x26c>)
 8003af6:	edd3 6a00 	vldr	s13, [r3]
 8003afa:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce4 <PID_cal+0x278>)
 8003afc:	edd3 7a00 	vldr	s15, [r3]
 8003b00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	330c      	adds	r3, #12
 8003b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0c:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003b10:	4b75      	ldr	r3, [pc, #468]	@ (8003ce8 <PID_cal+0x27c>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d045      	beq.n	8003ba4 <PID_cal+0x138>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	ed93 7a00 	vldr	s14, [r3]
 8003b20:	4b71      	ldr	r3, [pc, #452]	@ (8003ce8 <PID_cal+0x27c>)
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ce0 <PID_cal+0x274>)
 8003b2e:	edd3 7a00 	vldr	s15, [r3]
 8003b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b36:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b3a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ce8 <PID_cal+0x27c>)
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b46:	4b66      	ldr	r3, [pc, #408]	@ (8003ce0 <PID_cal+0x274>)
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	3310      	adds	r3, #16
 8003b60:	edd3 6a00 	vldr	s13, [r3]
 8003b64:	4b60      	ldr	r3, [pc, #384]	@ (8003ce8 <PID_cal+0x27c>)
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	ee07 3a90 	vmov	s15, r3
 8003b6c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003b70:	4b5b      	ldr	r3, [pc, #364]	@ (8003ce0 <PID_cal+0x274>)
 8003b72:	edd3 7a00 	vldr	s15, [r3]
 8003b76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b7a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003b7e:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003b82:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003b86:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	330c      	adds	r3, #12
 8003b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b96:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	3310      	adds	r3, #16
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	ed93 7a00 	vldr	s14, [r3]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	330c      	adds	r3, #12
 8003bae:	edd3 7a00 	vldr	s15, [r3]
 8003bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	edc3 7a00 	vstr	s15, [r3]
//					*PID_var = 400;
//				}
//				if(*PID_var < -400){
//					*PID_var = -400;
//				}
			break;
 8003bbc:	e2e3      	b.n	8004186 <PID_cal+0x71a>

		case 2://rool

			*PID_var = PID_FAC[0]*(rool_error);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	ed93 7a00 	vldr	s14, [r3]
 8003bc4:	4b49      	ldr	r3, [pc, #292]	@ (8003cec <PID_cal+0x280>)
 8003bc6:	edd3 7a00 	vldr	s15, [r3]
 8003bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	ed93 7a00 	vldr	s14, [r3]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	edd3 6a00 	vldr	s13, [r3]
 8003be2:	4b43      	ldr	r3, [pc, #268]	@ (8003cf0 <PID_cal+0x284>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce0 <PID_cal+0x274>)
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_error) - old_error_rool);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	3308      	adds	r3, #8
 8003c0a:	ed93 7a00 	vldr	s14, [r3]
 8003c0e:	4b37      	ldr	r3, [pc, #220]	@ (8003cec <PID_cal+0x280>)
 8003c10:	edd3 6a00 	vldr	s13, [r3]
 8003c14:	4b37      	ldr	r3, [pc, #220]	@ (8003cf4 <PID_cal+0x288>)
 8003c16:	edd3 7a00 	vldr	s15, [r3]
 8003c1a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	330c      	adds	r3, #12
 8003c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c26:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce8 <PID_cal+0x27c>)
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d045      	beq.n	8003cbe <PID_cal+0x252>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	330c      	adds	r3, #12
 8003c36:	ed93 7a00 	vldr	s14, [r3]
 8003c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce8 <PID_cal+0x27c>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c46:	4b26      	ldr	r3, [pc, #152]	@ (8003ce0 <PID_cal+0x274>)
 8003c48:	edd3 7a00 	vldr	s15, [r3]
 8003c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c50:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003c54:	4b24      	ldr	r3, [pc, #144]	@ (8003ce8 <PID_cal+0x27c>)
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c60:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce0 <PID_cal+0x274>)
 8003c62:	edd3 7a00 	vldr	s15, [r3]
 8003c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3310      	adds	r3, #16
 8003c7a:	edd3 6a00 	vldr	s13, [r3]
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce8 <PID_cal+0x27c>)
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003c8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <PID_cal+0x274>)
 8003c8c:	edd3 7a00 	vldr	s15, [r3]
 8003c90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c94:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003c98:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003c9c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003ca0:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	330c      	adds	r3, #12
 8003cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb0:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	3310      	adds	r3, #16
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	68d2      	ldr	r2, [r2, #12]
 8003cbc:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	ed93 7a00 	vldr	s14, [r3]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	edd3 7a00 	vldr	s15, [r3]
 8003ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003cd6:	e256      	b.n	8004186 <PID_cal+0x71a>
 8003cd8:	00004094 	.word	0x00004094
 8003cdc:	000040c4 	.word	0x000040c4
 8003ce0:	0801ebe4 	.word	0x0801ebe4
 8003ce4:	000040ac 	.word	0x000040ac
 8003ce8:	00004086 	.word	0x00004086
 8003cec:	00004098 	.word	0x00004098
 8003cf0:	000040c8 	.word	0x000040c8
 8003cf4:	000040b0 	.word	0x000040b0

		case 3:

			*PID_var = PID_FAC[0]*(yaw_error);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	ed93 7a00 	vldr	s14, [r3]
 8003cfe:	4b8b      	ldr	r3, [pc, #556]	@ (8003f2c <PID_cal+0x4c0>)
 8003d00:	edd3 7a00 	vldr	s15, [r3]
 8003d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	ed93 7a00 	vldr	s14, [r3]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	3304      	adds	r3, #4
 8003d18:	edd3 6a00 	vldr	s13, [r3]
 8003d1c:	4b84      	ldr	r3, [pc, #528]	@ (8003f30 <PID_cal+0x4c4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	ee07 3a90 	vmov	s15, r3
 8003d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d2c:	4b81      	ldr	r3, [pc, #516]	@ (8003f34 <PID_cal+0x4c8>)
 8003d2e:	edd3 7a00 	vldr	s15, [r3]
 8003d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_error) - old_error_yaw);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	3308      	adds	r3, #8
 8003d44:	ed93 7a00 	vldr	s14, [r3]
 8003d48:	4b78      	ldr	r3, [pc, #480]	@ (8003f2c <PID_cal+0x4c0>)
 8003d4a:	edd3 6a00 	vldr	s13, [r3]
 8003d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f38 <PID_cal+0x4cc>)
 8003d50:	edd3 7a00 	vldr	s15, [r3]
 8003d54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d60:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain > 0){
 8003d64:	4b75      	ldr	r3, [pc, #468]	@ (8003f3c <PID_cal+0x4d0>)
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d045      	beq.n	8003df8 <PID_cal+0x38c>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	ed93 7a00 	vldr	s14, [r3]
 8003d74:	4b71      	ldr	r3, [pc, #452]	@ (8003f3c <PID_cal+0x4d0>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	ee07 3a90 	vmov	s15, r3
 8003d7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d80:	4b6c      	ldr	r3, [pc, #432]	@ (8003f34 <PID_cal+0x4c8>)
 8003d82:	edd3 7a00 	vldr	s15, [r3]
 8003d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d8a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d8e:	4b6b      	ldr	r3, [pc, #428]	@ (8003f3c <PID_cal+0x4d0>)
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d9a:	4b66      	ldr	r3, [pc, #408]	@ (8003f34 <PID_cal+0x4c8>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	3310      	adds	r3, #16
 8003db4:	edd3 6a00 	vldr	s13, [r3]
 8003db8:	4b60      	ldr	r3, [pc, #384]	@ (8003f3c <PID_cal+0x4d0>)
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003dc4:	4b5b      	ldr	r3, [pc, #364]	@ (8003f34 <PID_cal+0x4c8>)
 8003dc6:	edd3 7a00 	vldr	s15, [r3]
 8003dca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003dce:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003dd2:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003dd6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003dda:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003dde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	330c      	adds	r3, #12
 8003de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dea:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3310      	adds	r3, #16
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	ed93 7a00 	vldr	s14, [r3]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	330c      	adds	r3, #12
 8003e02:	edd3 7a00 	vldr	s15, [r3]
 8003e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003e10:	e1b9      	b.n	8004186 <PID_cal+0x71a>

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pitch_ar_error);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	ed93 7a00 	vldr	s14, [r3]
 8003e18:	4b49      	ldr	r3, [pc, #292]	@ (8003f40 <PID_cal+0x4d4>)
 8003e1a:	edd3 7a00 	vldr	s15, [r3]
 8003e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	ed93 7a00 	vldr	s14, [r3]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	3304      	adds	r3, #4
 8003e32:	edd3 6a00 	vldr	s13, [r3]
 8003e36:	4b43      	ldr	r3, [pc, #268]	@ (8003f44 <PID_cal+0x4d8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e46:	4b3b      	ldr	r3, [pc, #236]	@ (8003f34 <PID_cal+0x4c8>)
 8003e48:	edd3 7a00 	vldr	s15, [r3]
 8003e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pitch_ar_error) - old_error_angular_rate_pitch);//policzenie częsci D
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	ed93 7a00 	vldr	s14, [r3]
 8003e62:	4b37      	ldr	r3, [pc, #220]	@ (8003f40 <PID_cal+0x4d4>)
 8003e64:	edd3 6a00 	vldr	s13, [r3]
 8003e68:	4b37      	ldr	r3, [pc, #220]	@ (8003f48 <PID_cal+0x4dc>)
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	330c      	adds	r3, #12
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003e7e:	4b33      	ldr	r3, [pc, #204]	@ (8003f4c <PID_cal+0x4e0>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d045      	beq.n	8003f12 <PID_cal+0x4a6>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	ed93 7a00 	vldr	s14, [r3]
 8003e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f4c <PID_cal+0x4e0>)
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e9a:	4b26      	ldr	r3, [pc, #152]	@ (8003f34 <PID_cal+0x4c8>)
 8003e9c:	edd3 7a00 	vldr	s15, [r3]
 8003ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ea4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003ea8:	4b28      	ldr	r3, [pc, #160]	@ (8003f4c <PID_cal+0x4e0>)
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	ee07 3a90 	vmov	s15, r3
 8003eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f34 <PID_cal+0x4c8>)
 8003eb6:	edd3 7a00 	vldr	s15, [r3]
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ec2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	3310      	adds	r3, #16
 8003ece:	edd3 6a00 	vldr	s13, [r3]
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f4c <PID_cal+0x4e0>)
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003ede:	4b15      	ldr	r3, [pc, #84]	@ (8003f34 <PID_cal+0x4c8>)
 8003ee0:	edd3 7a00 	vldr	s15, [r3]
 8003ee4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ee8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003eec:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003ef0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003ef4:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003ef8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	330c      	adds	r3, #12
 8003f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f04:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	3310      	adds	r3, #16
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	68d2      	ldr	r2, [r2, #12]
 8003f10:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	ed93 7a00 	vldr	s14, [r3]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	edd3 7a00 	vldr	s15, [r3]
 8003f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003f2a:	e12c      	b.n	8004186 <PID_cal+0x71a>
 8003f2c:	0000409c 	.word	0x0000409c
 8003f30:	000040cc 	.word	0x000040cc
 8003f34:	0801ebe4 	.word	0x0801ebe4
 8003f38:	000040b4 	.word	0x000040b4
 8003f3c:	00004086 	.word	0x00004086
 8003f40:	000040a0 	.word	0x000040a0
 8003f44:	000040d0 	.word	0x000040d0
 8003f48:	000040b8 	.word	0x000040b8
 8003f4c:	00004084 	.word	0x00004084

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(rool_ar_error);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	ed93 7a00 	vldr	s14, [r3]
 8003f56:	4b8f      	ldr	r3, [pc, #572]	@ (8004194 <PID_cal+0x728>)
 8003f58:	edd3 7a00 	vldr	s15, [r3]
 8003f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	ed93 7a00 	vldr	s14, [r3]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	edd3 6a00 	vldr	s13, [r3]
 8003f74:	4b88      	ldr	r3, [pc, #544]	@ (8004198 <PID_cal+0x72c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f84:	4b85      	ldr	r3, [pc, #532]	@ (800419c <PID_cal+0x730>)
 8003f86:	edd3 7a00 	vldr	s15, [r3]
 8003f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((rool_ar_error) - old_error_angular_rate_rool);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	ed93 7a00 	vldr	s14, [r3]
 8003fa0:	4b7c      	ldr	r3, [pc, #496]	@ (8004194 <PID_cal+0x728>)
 8003fa2:	edd3 6a00 	vldr	s13, [r3]
 8003fa6:	4b7e      	ldr	r3, [pc, #504]	@ (80041a0 <PID_cal+0x734>)
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb8:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 8003fbc:	4b79      	ldr	r3, [pc, #484]	@ (80041a4 <PID_cal+0x738>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d045      	beq.n	8004050 <PID_cal+0x5e4>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	ed93 7a00 	vldr	s14, [r3]
 8003fcc:	4b75      	ldr	r3, [pc, #468]	@ (80041a4 <PID_cal+0x738>)
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	ee07 3a90 	vmov	s15, r3
 8003fd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003fd8:	4b70      	ldr	r3, [pc, #448]	@ (800419c <PID_cal+0x730>)
 8003fda:	edd3 7a00 	vldr	s15, [r3]
 8003fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fe2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003fe6:	4b6f      	ldr	r3, [pc, #444]	@ (80041a4 <PID_cal+0x738>)
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff2:	4b6a      	ldr	r3, [pc, #424]	@ (800419c <PID_cal+0x730>)
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	3310      	adds	r3, #16
 800400c:	edd3 6a00 	vldr	s13, [r3]
 8004010:	4b64      	ldr	r3, [pc, #400]	@ (80041a4 <PID_cal+0x738>)
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	ee07 3a90 	vmov	s15, r3
 8004018:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800401c:	4b5f      	ldr	r3, [pc, #380]	@ (800419c <PID_cal+0x730>)
 800401e:	edd3 7a00 	vldr	s15, [r3]
 8004022:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004026:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800402a:	ee37 6a86 	vadd.f32	s12, s15, s12
 800402e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004032:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	330c      	adds	r3, #12
 800403e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004042:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	3310      	adds	r3, #16
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	68d2      	ldr	r2, [r2, #12]
 800404e:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	ed93 7a00 	vldr	s14, [r3]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	330c      	adds	r3, #12
 800405a:	edd3 7a00 	vldr	s15, [r3]
 800405e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004068:	e08d      	b.n	8004186 <PID_cal+0x71a>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(yaw_ar_error);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	ed93 7a00 	vldr	s14, [r3]
 8004070:	4b4d      	ldr	r3, [pc, #308]	@ (80041a8 <PID_cal+0x73c>)
 8004072:	edd3 7a00 	vldr	s15, [r3]
 8004076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	ed93 7a00 	vldr	s14, [r3]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	3304      	adds	r3, #4
 800408a:	edd3 6a00 	vldr	s13, [r3]
 800408e:	4b47      	ldr	r3, [pc, #284]	@ (80041ac <PID_cal+0x740>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800409a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800409e:	4b3f      	ldr	r3, [pc, #252]	@ (800419c <PID_cal+0x730>)
 80040a0:	edd3 7a00 	vldr	s15, [r3]
 80040a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((yaw_ar_error) - old_error_angular_rate_yaw);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3308      	adds	r3, #8
 80040b6:	ed93 7a00 	vldr	s14, [r3]
 80040ba:	4b3b      	ldr	r3, [pc, #236]	@ (80041a8 <PID_cal+0x73c>)
 80040bc:	edd3 6a00 	vldr	s13, [r3]
 80040c0:	4b3b      	ldr	r3, [pc, #236]	@ (80041b0 <PID_cal+0x744>)
 80040c2:	edd3 7a00 	vldr	s15, [r3]
 80040c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	330c      	adds	r3, #12
 80040ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d2:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			if(FDP_D_Gain_AR > 0){
 80040d6:	4b33      	ldr	r3, [pc, #204]	@ (80041a4 <PID_cal+0x738>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d045      	beq.n	800416a <PID_cal+0x6fe>
				PID_FAC[3] = (PID_FAC[3] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[4] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	330c      	adds	r3, #12
 80040e2:	ed93 7a00 	vldr	s14, [r3]
 80040e6:	4b2f      	ldr	r3, [pc, #188]	@ (80041a4 <PID_cal+0x738>)
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80040f2:	4b2a      	ldr	r3, [pc, #168]	@ (800419c <PID_cal+0x730>)
 80040f4:	edd3 7a00 	vldr	s15, [r3]
 80040f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040fc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004100:	4b28      	ldr	r3, [pc, #160]	@ (80041a4 <PID_cal+0x738>)
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	ee07 3a90 	vmov	s15, r3
 8004108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800410c:	4b23      	ldr	r3, [pc, #140]	@ (800419c <PID_cal+0x730>)
 800410e:	edd3 7a00 	vldr	s15, [r3]
 8004112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800411a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	3310      	adds	r3, #16
 8004126:	edd3 6a00 	vldr	s13, [r3]
 800412a:	4b1e      	ldr	r3, [pc, #120]	@ (80041a4 <PID_cal+0x738>)
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004136:	4b19      	ldr	r3, [pc, #100]	@ (800419c <PID_cal+0x730>)
 8004138:	edd3 7a00 	vldr	s15, [r3]
 800413c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004140:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004144:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004148:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800414c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	330c      	adds	r3, #12
 8004158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800415c:	edc3 7a00 	vstr	s15, [r3]
				PID_FAC[4] = PID_FAC[3];//old d_fac
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	3310      	adds	r3, #16
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	68d2      	ldr	r2, [r2, #12]
 8004168:	601a      	str	r2, [r3, #0]
			}

			*PID_var = *PID_var + PID_FAC[3];
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	ed93 7a00 	vldr	s14, [r3]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	330c      	adds	r3, #12
 8004174:	edd3 7a00 	vldr	s15, [r3]
 8004178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004182:	e000      	b.n	8004186 <PID_cal+0x71a>
		default:
			break;
 8004184:	bf00      	nop
	}
}
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	000040a4 	.word	0x000040a4
 8004198:	000040d4 	.word	0x000040d4
 800419c:	0801ebe4 	.word	0x0801ebe4
 80041a0:	000040bc 	.word	0x000040bc
 80041a4:	00004084 	.word	0x00004084
 80041a8:	000040a8 	.word	0x000040a8
 80041ac:	000040d8 	.word	0x000040d8
 80041b0:	000040c0 	.word	0x000040c0
 80041b4:	00000000 	.word	0x00000000

080041b8 <Get_batteryvalue>:

void Get_batteryvalue(void){
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 80041bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004230 <Get_batteryvalue+0x78>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80041cc:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8004228 <Get_batteryvalue+0x70>
 80041d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80041d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80041d8:	ee17 3a90 	vmov	r3, s15
 80041dc:	b29a      	uxth	r2, r3
 80041de:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <Get_batteryvalue+0x7c>)
 80041e0:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 80041e2:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <Get_batteryvalue+0x7c>)
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	2b63      	cmp	r3, #99	@ 0x63
 80041e8:	d902      	bls.n	80041f0 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 80041ea:	4b12      	ldr	r3, [pc, #72]	@ (8004234 <Get_batteryvalue+0x7c>)
 80041ec:	2264      	movs	r2, #100	@ 0x64
 80041ee:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 80041f0:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <Get_batteryvalue+0x7c>)
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	2b18      	cmp	r3, #24
 80041f6:	d802      	bhi.n	80041fe <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 80041f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004234 <Get_batteryvalue+0x7c>)
 80041fa:	2207      	movs	r2, #7
 80041fc:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 80041fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004234 <Get_batteryvalue+0x7c>)
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	2b0a      	cmp	r3, #10
 8004204:	d802      	bhi.n	800420c <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 8004206:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <Get_batteryvalue+0x7c>)
 8004208:	2209      	movs	r2, #9
 800420a:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 800420c:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <Get_batteryvalue+0x7c>)
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	2b18      	cmp	r3, #24
 8004212:	d902      	bls.n	800421a <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 8004214:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <Get_batteryvalue+0x7c>)
 8004216:	2208      	movs	r2, #8
 8004218:	829a      	strh	r2, [r3, #20]
	}
}
 800421a:	bf00      	nop
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	f3af 8000 	nop.w
 8004228:	7ae147ae 	.word	0x7ae147ae
 800422c:	401dae14 	.word	0x401dae14
 8004230:	24000eb0 	.word	0x24000eb0
 8004234:	00000184 	.word	0x00000184

08004238 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800423c:	2200      	movs	r2, #0
 800423e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004242:	4802      	ldr	r0, [pc, #8]	@ (800424c <SELECT+0x14>)
 8004244:	f00a fade 	bl	800e804 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004248:	bf00      	nop
 800424a:	bd80      	pop	{r7, pc}
 800424c:	58020c00 	.word	0x58020c00

08004250 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004254:	2201      	movs	r2, #1
 8004256:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800425a:	4802      	ldr	r0, [pc, #8]	@ (8004264 <DESELECT+0x14>)
 800425c:	f00a fad2 	bl	800e804 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}
 8004264:	58020c00 	.word	0x58020c00

08004268 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004272:	bf00      	nop
 8004274:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <SPI_TxByte+0x2c>)
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800427c:	2b20      	cmp	r3, #32
 800427e:	d1f9      	bne.n	8004274 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8004280:	1df9      	adds	r1, r7, #7
 8004282:	2364      	movs	r3, #100	@ 0x64
 8004284:	2201      	movs	r2, #1
 8004286:	4804      	ldr	r0, [pc, #16]	@ (8004298 <SPI_TxByte+0x30>)
 8004288:	f010 fc18 	bl	8014abc <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40020010 	.word	0x40020010
 8004298:	240001ec 	.word	0x240001ec

0800429c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80042a8:	bf00      	nop
 80042aa:	4b08      	ldr	r3, [pc, #32]	@ (80042cc <SPI_TxBuffer+0x30>)
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d1f9      	bne.n	80042aa <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 80042b6:	887b      	ldrh	r3, [r7, #2]
 80042b8:	461a      	mov	r2, r3
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4804      	ldr	r0, [pc, #16]	@ (80042d0 <SPI_TxBuffer+0x34>)
 80042be:	f011 fb97 	bl	80159f0 <HAL_SPI_Transmit_DMA>
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40020010 	.word	0x40020010
 80042d0:	240001ec 	.word	0x240001ec

080042d4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80042da:	23ff      	movs	r3, #255	@ 0xff
 80042dc:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80042de:	bf00      	nop
 80042e0:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <SPI_RxByte+0x34>)
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d1f9      	bne.n	80042e0 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80042ec:	1dba      	adds	r2, r7, #6
 80042ee:	1df9      	adds	r1, r7, #7
 80042f0:	2364      	movs	r3, #100	@ 0x64
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2301      	movs	r3, #1
 80042f6:	4805      	ldr	r0, [pc, #20]	@ (800430c <SPI_RxByte+0x38>)
 80042f8:	f011 f840 	bl	801537c <HAL_SPI_TransmitReceive>

	return data;
 80042fc:	79bb      	ldrb	r3, [r7, #6]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40020010 	.word	0x40020010
 800430c:	240001ec 	.word	0x240001ec

08004310 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8004318:	f7ff ffdc 	bl	80042d4 <SPI_RxByte>
 800431c:	4603      	mov	r3, r0
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	701a      	strb	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8004332:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <SD_ReadyWait+0x30>)
 8004334:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004338:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800433a:	f7ff ffcb 	bl	80042d4 <SPI_RxByte>
 800433e:	4603      	mov	r3, r0
 8004340:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	2bff      	cmp	r3, #255	@ 0xff
 8004346:	d004      	beq.n	8004352 <SD_ReadyWait+0x26>
 8004348:	4b04      	ldr	r3, [pc, #16]	@ (800435c <SD_ReadyWait+0x30>)
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f3      	bne.n	800433a <SD_ReadyWait+0xe>

	return res;
 8004352:	79fb      	ldrb	r3, [r7, #7]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	2400037c 	.word	0x2400037c

08004360 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8004366:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800436a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800436c:	f7ff ff70 	bl	8004250 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004370:	2300      	movs	r3, #0
 8004372:	60bb      	str	r3, [r7, #8]
 8004374:	e005      	b.n	8004382 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8004376:	20ff      	movs	r0, #255	@ 0xff
 8004378:	f7ff ff76 	bl	8004268 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	3301      	adds	r3, #1
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b09      	cmp	r3, #9
 8004386:	ddf6      	ble.n	8004376 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8004388:	f7ff ff56 	bl	8004238 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800438c:	2340      	movs	r3, #64	@ 0x40
 800438e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80043a0:	2395      	movs	r3, #149	@ 0x95
 80043a2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80043a4:	463b      	mov	r3, r7
 80043a6:	2106      	movs	r1, #6
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff77 	bl	800429c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80043ae:	e002      	b.n	80043b6 <SD_PowerOn+0x56>
	{
		cnt--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80043b6:	f7ff ff8d 	bl	80042d4 <SPI_RxByte>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d002      	beq.n	80043c6 <SD_PowerOn+0x66>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f4      	bne.n	80043b0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80043c6:	f7ff ff43 	bl	8004250 <DESELECT>
	SPI_TxByte(0XFF);
 80043ca:	20ff      	movs	r0, #255	@ 0xff
 80043cc:	f7ff ff4c 	bl	8004268 <SPI_TxByte>

	PowerFlag = 1;
 80043d0:	4b03      	ldr	r3, [pc, #12]	@ (80043e0 <SD_PowerOn+0x80>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	24000195 	.word	0x24000195

080043e4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80043e8:	4b03      	ldr	r3, [pc, #12]	@ (80043f8 <SD_PowerOff+0x14>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
}
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	24000195 	.word	0x24000195

080043fc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004400:	4b03      	ldr	r3, [pc, #12]	@ (8004410 <SD_CheckPower+0x14>)
 8004402:	781b      	ldrb	r3, [r3, #0]
}
 8004404:	4618      	mov	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	24000195 	.word	0x24000195

08004414 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 800441e:	4b14      	ldr	r3, [pc, #80]	@ (8004470 <SD_RxDataBlock+0x5c>)
 8004420:	220a      	movs	r2, #10
 8004422:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8004424:	f7ff ff56 	bl	80042d4 <SPI_RxByte>
 8004428:	4603      	mov	r3, r0
 800442a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2bff      	cmp	r3, #255	@ 0xff
 8004430:	d104      	bne.n	800443c <SD_RxDataBlock+0x28>
 8004432:	4b0f      	ldr	r3, [pc, #60]	@ (8004470 <SD_RxDataBlock+0x5c>)
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f3      	bne.n	8004424 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004440:	d001      	beq.n	8004446 <SD_RxDataBlock+0x32>
 8004442:	2300      	movs	r3, #0
 8004444:	e00f      	b.n	8004466 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff ff5f 	bl	8004310 <SPI_RxBytePtr>
	} while(len--);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	1e5a      	subs	r2, r3, #1
 8004456:	603a      	str	r2, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f4      	bne.n	8004446 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800445c:	f7ff ff3a 	bl	80042d4 <SPI_RxByte>
	SPI_RxByte();
 8004460:	f7ff ff38 	bl	80042d4 <SPI_RxByte>

	return TRUE;
 8004464:	2301      	movs	r3, #1
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	24000378 	.word	0x24000378

08004474 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004484:	f7ff ff52 	bl	800432c <SD_ReadyWait>
 8004488:	4603      	mov	r3, r0
 800448a:	2bff      	cmp	r3, #255	@ 0xff
 800448c:	d001      	beq.n	8004492 <SD_TxDataBlock+0x1e>
 800448e:	2300      	movs	r3, #0
 8004490:	e02f      	b.n	80044f2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fee7 	bl	8004268 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	2bfd      	cmp	r3, #253	@ 0xfd
 800449e:	d020      	beq.n	80044e2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80044a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fef9 	bl	800429c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80044aa:	f7ff ff13 	bl	80042d4 <SPI_RxByte>
		SPI_RxByte();
 80044ae:	f7ff ff11 	bl	80042d4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80044b2:	e00b      	b.n	80044cc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80044b4:	f7ff ff0e 	bl	80042d4 <SPI_RxByte>
 80044b8:	4603      	mov	r3, r0
 80044ba:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	2b05      	cmp	r3, #5
 80044c4:	d006      	beq.n	80044d4 <SD_TxDataBlock+0x60>
			i++;
 80044c6:	7bbb      	ldrb	r3, [r7, #14]
 80044c8:	3301      	adds	r3, #1
 80044ca:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80044cc:	7bbb      	ldrb	r3, [r7, #14]
 80044ce:	2b40      	cmp	r3, #64	@ 0x40
 80044d0:	d9f0      	bls.n	80044b4 <SD_TxDataBlock+0x40>
 80044d2:	e000      	b.n	80044d6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80044d4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80044d6:	bf00      	nop
 80044d8:	f7ff fefc 	bl	80042d4 <SPI_RxByte>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0fa      	beq.n	80044d8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d101      	bne.n	80044f0 <SD_TxDataBlock+0x7c>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	4603      	mov	r3, r0
 8004502:	6039      	str	r1, [r7, #0]
 8004504:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004506:	f7ff ff11 	bl	800432c <SD_ReadyWait>
 800450a:	4603      	mov	r3, r0
 800450c:	2bff      	cmp	r3, #255	@ 0xff
 800450e:	d001      	beq.n	8004514 <SD_SendCmd+0x1a>
 8004510:	23ff      	movs	r3, #255	@ 0xff
 8004512:	e042      	b.n	800459a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fea6 	bl	8004268 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	0e1b      	lsrs	r3, r3, #24
 8004520:	b2db      	uxtb	r3, r3
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fea0 	bl	8004268 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	0c1b      	lsrs	r3, r3, #16
 800452c:	b2db      	uxtb	r3, r3
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fe9a 	bl	8004268 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	b2db      	uxtb	r3, r3
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fe94 	bl	8004268 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fe8f 	bl	8004268 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	2b40      	cmp	r3, #64	@ 0x40
 800454e:	d102      	bne.n	8004556 <SD_SendCmd+0x5c>
 8004550:	2395      	movs	r3, #149	@ 0x95
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	e007      	b.n	8004566 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	2b48      	cmp	r3, #72	@ 0x48
 800455a:	d102      	bne.n	8004562 <SD_SendCmd+0x68>
 800455c:	2387      	movs	r3, #135	@ 0x87
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	e001      	b.n	8004566 <SD_SendCmd+0x6c>
	else crc = 1;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fe7d 	bl	8004268 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	2b4c      	cmp	r3, #76	@ 0x4c
 8004572:	d101      	bne.n	8004578 <SD_SendCmd+0x7e>
 8004574:	f7ff feae 	bl	80042d4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004578:	230a      	movs	r3, #10
 800457a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800457c:	f7ff feaa 	bl	80042d4 <SPI_RxByte>
 8004580:	4603      	mov	r3, r0
 8004582:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004584:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004588:	2b00      	cmp	r3, #0
 800458a:	da05      	bge.n	8004598 <SD_SendCmd+0x9e>
 800458c:	7bbb      	ldrb	r3, [r7, #14]
 800458e:	3b01      	subs	r3, #1
 8004590:	73bb      	strb	r3, [r7, #14]
 8004592:	7bbb      	ldrb	r3, [r7, #14]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f1      	bne.n	800457c <SD_SendCmd+0x82>

	return res;
 8004598:	7b7b      	ldrb	r3, [r7, #13]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	4603      	mov	r3, r0
 80045ac:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <SD_disk_initialize+0x14>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0d6      	b.n	8004766 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80045b8:	4b6d      	ldr	r3, [pc, #436]	@ (8004770 <SD_disk_initialize+0x1cc>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <SD_disk_initialize+0x2a>
 80045c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004770 <SD_disk_initialize+0x1cc>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	e0cb      	b.n	8004766 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80045ce:	f7ff fec7 	bl	8004360 <SD_PowerOn>

	/* slave select */
	SELECT();
 80045d2:	f7ff fe31 	bl	8004238 <SELECT>

	/* check disk type */
	type = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80045da:	2100      	movs	r1, #0
 80045dc:	2040      	movs	r0, #64	@ 0x40
 80045de:	f7ff ff8c 	bl	80044fa <SD_SendCmd>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	f040 80a6 	bne.w	8004736 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80045ea:	4b62      	ldr	r3, [pc, #392]	@ (8004774 <SD_disk_initialize+0x1d0>)
 80045ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045f0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80045f2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80045f6:	2048      	movs	r0, #72	@ 0x48
 80045f8:	f7ff ff7f 	bl	80044fa <SD_SendCmd>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d158      	bne.n	80046b4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]
 8004606:	e00c      	b.n	8004622 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004608:	7bfc      	ldrb	r4, [r7, #15]
 800460a:	f7ff fe63 	bl	80042d4 <SPI_RxByte>
 800460e:	4603      	mov	r3, r0
 8004610:	461a      	mov	r2, r3
 8004612:	f104 0310 	add.w	r3, r4, #16
 8004616:	443b      	add	r3, r7
 8004618:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	3301      	adds	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d9ef      	bls.n	8004608 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004628:	7abb      	ldrb	r3, [r7, #10]
 800462a:	2b01      	cmp	r3, #1
 800462c:	f040 8083 	bne.w	8004736 <SD_disk_initialize+0x192>
 8004630:	7afb      	ldrb	r3, [r7, #11]
 8004632:	2baa      	cmp	r3, #170	@ 0xaa
 8004634:	d17f      	bne.n	8004736 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004636:	2100      	movs	r1, #0
 8004638:	2077      	movs	r0, #119	@ 0x77
 800463a:	f7ff ff5e 	bl	80044fa <SD_SendCmd>
 800463e:	4603      	mov	r3, r0
 8004640:	2b01      	cmp	r3, #1
 8004642:	d807      	bhi.n	8004654 <SD_disk_initialize+0xb0>
 8004644:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004648:	2069      	movs	r0, #105	@ 0x69
 800464a:	f7ff ff56 	bl	80044fa <SD_SendCmd>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8004654:	4b47      	ldr	r3, [pc, #284]	@ (8004774 <SD_disk_initialize+0x1d0>)
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1eb      	bne.n	8004636 <SD_disk_initialize+0x92>
 800465e:	e000      	b.n	8004662 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004660:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004662:	4b44      	ldr	r3, [pc, #272]	@ (8004774 <SD_disk_initialize+0x1d0>)
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d064      	beq.n	8004736 <SD_disk_initialize+0x192>
 800466c:	2100      	movs	r1, #0
 800466e:	207a      	movs	r0, #122	@ 0x7a
 8004670:	f7ff ff43 	bl	80044fa <SD_SendCmd>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d15d      	bne.n	8004736 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	e00c      	b.n	800469a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004680:	7bfc      	ldrb	r4, [r7, #15]
 8004682:	f7ff fe27 	bl	80042d4 <SPI_RxByte>
 8004686:	4603      	mov	r3, r0
 8004688:	461a      	mov	r2, r3
 800468a:	f104 0310 	add.w	r3, r4, #16
 800468e:	443b      	add	r3, r7
 8004690:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	3301      	adds	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d9ef      	bls.n	8004680 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80046a0:	7a3b      	ldrb	r3, [r7, #8]
 80046a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <SD_disk_initialize+0x10a>
 80046aa:	230c      	movs	r3, #12
 80046ac:	e000      	b.n	80046b0 <SD_disk_initialize+0x10c>
 80046ae:	2304      	movs	r3, #4
 80046b0:	73bb      	strb	r3, [r7, #14]
 80046b2:	e040      	b.n	8004736 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80046b4:	2100      	movs	r1, #0
 80046b6:	2077      	movs	r0, #119	@ 0x77
 80046b8:	f7ff ff1f 	bl	80044fa <SD_SendCmd>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d808      	bhi.n	80046d4 <SD_disk_initialize+0x130>
 80046c2:	2100      	movs	r1, #0
 80046c4:	2069      	movs	r0, #105	@ 0x69
 80046c6:	f7ff ff18 	bl	80044fa <SD_SendCmd>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d801      	bhi.n	80046d4 <SD_disk_initialize+0x130>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e000      	b.n	80046d6 <SD_disk_initialize+0x132>
 80046d4:	2301      	movs	r3, #1
 80046d6:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80046d8:	7bbb      	ldrb	r3, [r7, #14]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d10e      	bne.n	80046fc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80046de:	2100      	movs	r1, #0
 80046e0:	2077      	movs	r0, #119	@ 0x77
 80046e2:	f7ff ff0a 	bl	80044fa <SD_SendCmd>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d80e      	bhi.n	800470a <SD_disk_initialize+0x166>
 80046ec:	2100      	movs	r1, #0
 80046ee:	2069      	movs	r0, #105	@ 0x69
 80046f0:	f7ff ff03 	bl	80044fa <SD_SendCmd>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d107      	bne.n	800470a <SD_disk_initialize+0x166>
 80046fa:	e00d      	b.n	8004718 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80046fc:	2100      	movs	r1, #0
 80046fe:	2041      	movs	r0, #65	@ 0x41
 8004700:	f7ff fefb 	bl	80044fa <SD_SendCmd>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800470a:	4b1a      	ldr	r3, [pc, #104]	@ (8004774 <SD_disk_initialize+0x1d0>)
 800470c:	881b      	ldrh	r3, [r3, #0]
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e1      	bne.n	80046d8 <SD_disk_initialize+0x134>
 8004714:	e000      	b.n	8004718 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004716:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004718:	4b16      	ldr	r3, [pc, #88]	@ (8004774 <SD_disk_initialize+0x1d0>)
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <SD_disk_initialize+0x18e>
 8004722:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004726:	2050      	movs	r0, #80	@ 0x50
 8004728:	f7ff fee7 	bl	80044fa <SD_SendCmd>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <SD_disk_initialize+0x192>
 8004732:	2300      	movs	r3, #0
 8004734:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004736:	4a10      	ldr	r2, [pc, #64]	@ (8004778 <SD_disk_initialize+0x1d4>)
 8004738:	7bbb      	ldrb	r3, [r7, #14]
 800473a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800473c:	f7ff fd88 	bl	8004250 <DESELECT>
	SPI_RxByte();
 8004740:	f7ff fdc8 	bl	80042d4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004744:	7bbb      	ldrb	r3, [r7, #14]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800474a:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <SD_disk_initialize+0x1cc>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	b2da      	uxtb	r2, r3
 8004756:	4b06      	ldr	r3, [pc, #24]	@ (8004770 <SD_disk_initialize+0x1cc>)
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e001      	b.n	8004760 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800475c:	f7ff fe42 	bl	80043e4 <SD_PowerOff>
	}

	return Stat;
 8004760:	4b03      	ldr	r3, [pc, #12]	@ (8004770 <SD_disk_initialize+0x1cc>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b2db      	uxtb	r3, r3
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bd90      	pop	{r4, r7, pc}
 800476e:	bf00      	nop
 8004770:	24000000 	.word	0x24000000
 8004774:	24000378 	.word	0x24000378
 8004778:	24000194 	.word	0x24000194

0800477c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <SD_disk_status+0x14>
 800478c:	2301      	movs	r3, #1
 800478e:	e002      	b.n	8004796 <SD_disk_status+0x1a>
	return Stat;
 8004790:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <SD_disk_status+0x28>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	b2db      	uxtb	r3, r3
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	24000000 	.word	0x24000000

080047a8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d102      	bne.n	80047c4 <SD_disk_read+0x1c>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <SD_disk_read+0x20>
 80047c4:	2304      	movs	r3, #4
 80047c6:	e051      	b.n	800486c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80047c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004874 <SD_disk_read+0xcc>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <SD_disk_read+0x32>
 80047d6:	2303      	movs	r3, #3
 80047d8:	e048      	b.n	800486c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80047da:	4b27      	ldr	r3, [pc, #156]	@ (8004878 <SD_disk_read+0xd0>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d102      	bne.n	80047ec <SD_disk_read+0x44>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	025b      	lsls	r3, r3, #9
 80047ea:	607b      	str	r3, [r7, #4]

	SELECT();
 80047ec:	f7ff fd24 	bl	8004238 <SELECT>

	if (count == 1)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d111      	bne.n	800481a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	2051      	movs	r0, #81	@ 0x51
 80047fa:	f7ff fe7e 	bl	80044fa <SD_SendCmd>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d129      	bne.n	8004858 <SD_disk_read+0xb0>
 8004804:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004808:	68b8      	ldr	r0, [r7, #8]
 800480a:	f7ff fe03 	bl	8004414 <SD_RxDataBlock>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d021      	beq.n	8004858 <SD_disk_read+0xb0>
 8004814:	2300      	movs	r3, #0
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	e01e      	b.n	8004858 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	2052      	movs	r0, #82	@ 0x52
 800481e:	f7ff fe6c 	bl	80044fa <SD_SendCmd>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d117      	bne.n	8004858 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004828:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800482c:	68b8      	ldr	r0, [r7, #8]
 800482e:	f7ff fdf1 	bl	8004414 <SD_RxDataBlock>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <SD_disk_read+0xa6>
				buff += 512;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800483e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	3b01      	subs	r3, #1
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1ed      	bne.n	8004828 <SD_disk_read+0x80>
 800484c:	e000      	b.n	8004850 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800484e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004850:	2100      	movs	r1, #0
 8004852:	204c      	movs	r0, #76	@ 0x4c
 8004854:	f7ff fe51 	bl	80044fa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004858:	f7ff fcfa 	bl	8004250 <DESELECT>
	SPI_RxByte();
 800485c:	f7ff fd3a 	bl	80042d4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	24000000 	.word	0x24000000
 8004878:	24000194 	.word	0x24000194

0800487c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4603      	mov	r3, r0
 800488a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <SD_disk_write+0x1c>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <SD_disk_write+0x20>
 8004898:	2304      	movs	r3, #4
 800489a:	e06b      	b.n	8004974 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800489c:	4b37      	ldr	r3, [pc, #220]	@ (800497c <SD_disk_write+0x100>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <SD_disk_write+0x32>
 80048aa:	2303      	movs	r3, #3
 80048ac:	e062      	b.n	8004974 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80048ae:	4b33      	ldr	r3, [pc, #204]	@ (800497c <SD_disk_write+0x100>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <SD_disk_write+0x44>
 80048bc:	2302      	movs	r3, #2
 80048be:	e059      	b.n	8004974 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80048c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004980 <SD_disk_write+0x104>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <SD_disk_write+0x56>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	025b      	lsls	r3, r3, #9
 80048d0:	607b      	str	r3, [r7, #4]

	SELECT();
 80048d2:	f7ff fcb1 	bl	8004238 <SELECT>

	if (count == 1)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d110      	bne.n	80048fe <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	2058      	movs	r0, #88	@ 0x58
 80048e0:	f7ff fe0b 	bl	80044fa <SD_SendCmd>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d13a      	bne.n	8004960 <SD_disk_write+0xe4>
 80048ea:	21fe      	movs	r1, #254	@ 0xfe
 80048ec:	68b8      	ldr	r0, [r7, #8]
 80048ee:	f7ff fdc1 	bl	8004474 <SD_TxDataBlock>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d033      	beq.n	8004960 <SD_disk_write+0xe4>
			count = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	e030      	b.n	8004960 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80048fe:	4b20      	ldr	r3, [pc, #128]	@ (8004980 <SD_disk_write+0x104>)
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800490a:	2100      	movs	r1, #0
 800490c:	2077      	movs	r0, #119	@ 0x77
 800490e:	f7ff fdf4 	bl	80044fa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004912:	6839      	ldr	r1, [r7, #0]
 8004914:	2057      	movs	r0, #87	@ 0x57
 8004916:	f7ff fdf0 	bl	80044fa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	2059      	movs	r0, #89	@ 0x59
 800491e:	f7ff fdec 	bl	80044fa <SD_SendCmd>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d11b      	bne.n	8004960 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004928:	21fc      	movs	r1, #252	@ 0xfc
 800492a:	68b8      	ldr	r0, [r7, #8]
 800492c:	f7ff fda2 	bl	8004474 <SD_TxDataBlock>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <SD_disk_write+0xd0>
				buff += 512;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800493c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1ee      	bne.n	8004928 <SD_disk_write+0xac>
 800494a:	e000      	b.n	800494e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800494c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800494e:	21fd      	movs	r1, #253	@ 0xfd
 8004950:	2000      	movs	r0, #0
 8004952:	f7ff fd8f 	bl	8004474 <SD_TxDataBlock>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <SD_disk_write+0xe4>
			{
				count = 1;
 800495c:	2301      	movs	r3, #1
 800495e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004960:	f7ff fc76 	bl	8004250 <DESELECT>
	SPI_RxByte();
 8004964:	f7ff fcb6 	bl	80042d4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf14      	ite	ne
 800496e:	2301      	movne	r3, #1
 8004970:	2300      	moveq	r3, #0
 8004972:	b2db      	uxtb	r3, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	24000000 	.word	0x24000000
 8004980:	24000194 	.word	0x24000194

08004984 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004984:	b590      	push	{r4, r7, lr}
 8004986:	b08b      	sub	sp, #44	@ 0x2c
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	603a      	str	r2, [r7, #0]
 800498e:	71fb      	strb	r3, [r7, #7]
 8004990:	460b      	mov	r3, r1
 8004992:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <SD_disk_ioctl+0x1e>
 800499e:	2304      	movs	r3, #4
 80049a0:	e113      	b.n	8004bca <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80049a8:	79bb      	ldrb	r3, [r7, #6]
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d124      	bne.n	80049f8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d012      	beq.n	80049dc <SD_disk_ioctl+0x58>
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	dc1a      	bgt.n	80049f0 <SD_disk_ioctl+0x6c>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <SD_disk_ioctl+0x40>
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d006      	beq.n	80049d0 <SD_disk_ioctl+0x4c>
 80049c2:	e015      	b.n	80049f0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80049c4:	f7ff fd0e 	bl	80043e4 <SD_PowerOff>
			res = RES_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049ce:	e0fa      	b.n	8004bc6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80049d0:	f7ff fcc6 	bl	8004360 <SD_PowerOn>
			res = RES_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049da:	e0f4      	b.n	8004bc6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	1c5c      	adds	r4, r3, #1
 80049e0:	f7ff fd0c 	bl	80043fc <SD_CheckPower>
 80049e4:	4603      	mov	r3, r0
 80049e6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049ee:	e0ea      	b.n	8004bc6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80049f0:	2304      	movs	r3, #4
 80049f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80049f6:	e0e6      	b.n	8004bc6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049f8:	4b76      	ldr	r3, [pc, #472]	@ (8004bd4 <SD_disk_ioctl+0x250>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <SD_disk_ioctl+0x86>
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0df      	b.n	8004bca <SD_disk_ioctl+0x246>

		SELECT();
 8004a0a:	f7ff fc15 	bl	8004238 <SELECT>

		switch (ctrl)
 8004a0e:	79bb      	ldrb	r3, [r7, #6]
 8004a10:	2b0d      	cmp	r3, #13
 8004a12:	f200 80c9 	bhi.w	8004ba8 <SD_disk_ioctl+0x224>
 8004a16:	a201      	add	r2, pc, #4	@ (adr r2, 8004a1c <SD_disk_ioctl+0x98>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004b13 	.word	0x08004b13
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004b03 	.word	0x08004b03
 8004a28:	08004ba9 	.word	0x08004ba9
 8004a2c:	08004ba9 	.word	0x08004ba9
 8004a30:	08004ba9 	.word	0x08004ba9
 8004a34:	08004ba9 	.word	0x08004ba9
 8004a38:	08004ba9 	.word	0x08004ba9
 8004a3c:	08004ba9 	.word	0x08004ba9
 8004a40:	08004ba9 	.word	0x08004ba9
 8004a44:	08004ba9 	.word	0x08004ba9
 8004a48:	08004b25 	.word	0x08004b25
 8004a4c:	08004b49 	.word	0x08004b49
 8004a50:	08004b6d 	.word	0x08004b6d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004a54:	2100      	movs	r1, #0
 8004a56:	2049      	movs	r0, #73	@ 0x49
 8004a58:	f7ff fd4f 	bl	80044fa <SD_SendCmd>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f040 80a6 	bne.w	8004bb0 <SD_disk_ioctl+0x22c>
 8004a64:	f107 030c 	add.w	r3, r7, #12
 8004a68:	2110      	movs	r1, #16
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fcd2 	bl	8004414 <SD_RxDataBlock>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 809c 	beq.w	8004bb0 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004a78:	7b3b      	ldrb	r3, [r7, #12]
 8004a7a:	099b      	lsrs	r3, r3, #6
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d10d      	bne.n	8004a9e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004a82:	7d7b      	ldrb	r3, [r7, #21]
 8004a84:	461a      	mov	r2, r3
 8004a86:	7d3b      	ldrb	r3, [r7, #20]
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3301      	adds	r3, #1
 8004a92:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004a94:	8bfb      	ldrh	r3, [r7, #30]
 8004a96:	029a      	lsls	r2, r3, #10
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e02d      	b.n	8004afa <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004a9e:	7c7b      	ldrb	r3, [r7, #17]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	7dbb      	ldrb	r3, [r7, #22]
 8004aa8:	09db      	lsrs	r3, r3, #7
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	4413      	add	r3, r2
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	7d7b      	ldrb	r3, [r7, #21]
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f003 0306 	and.w	r3, r3, #6
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004ac6:	7d3b      	ldrb	r3, [r7, #20]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	7cfb      	ldrb	r3, [r7, #19]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	7cbb      	ldrb	r3, [r7, #18]
 8004ada:	029b      	lsls	r3, r3, #10
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3301      	adds	r3, #1
 8004aea:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004aec:	8bfa      	ldrh	r2, [r7, #30]
 8004aee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004af2:	3b09      	subs	r3, #9
 8004af4:	409a      	lsls	r2, r3
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004b00:	e056      	b.n	8004bb0 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b08:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b10:	e055      	b.n	8004bbe <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004b12:	f7ff fc0b 	bl	800432c <SD_ReadyWait>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2bff      	cmp	r3, #255	@ 0xff
 8004b1a:	d14b      	bne.n	8004bb4 <SD_disk_ioctl+0x230>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b22:	e047      	b.n	8004bb4 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004b24:	2100      	movs	r1, #0
 8004b26:	2049      	movs	r0, #73	@ 0x49
 8004b28:	f7ff fce7 	bl	80044fa <SD_SendCmd>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d142      	bne.n	8004bb8 <SD_disk_ioctl+0x234>
 8004b32:	2110      	movs	r1, #16
 8004b34:	6a38      	ldr	r0, [r7, #32]
 8004b36:	f7ff fc6d 	bl	8004414 <SD_RxDataBlock>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d03b      	beq.n	8004bb8 <SD_disk_ioctl+0x234>
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b46:	e037      	b.n	8004bb8 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004b48:	2100      	movs	r1, #0
 8004b4a:	204a      	movs	r0, #74	@ 0x4a
 8004b4c:	f7ff fcd5 	bl	80044fa <SD_SendCmd>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d132      	bne.n	8004bbc <SD_disk_ioctl+0x238>
 8004b56:	2110      	movs	r1, #16
 8004b58:	6a38      	ldr	r0, [r7, #32]
 8004b5a:	f7ff fc5b 	bl	8004414 <SD_RxDataBlock>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d02b      	beq.n	8004bbc <SD_disk_ioctl+0x238>
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b6a:	e027      	b.n	8004bbc <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	207a      	movs	r0, #122	@ 0x7a
 8004b70:	f7ff fcc3 	bl	80044fa <SD_SendCmd>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d116      	bne.n	8004ba8 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b80:	e00b      	b.n	8004b9a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004b82:	6a3c      	ldr	r4, [r7, #32]
 8004b84:	1c63      	adds	r3, r4, #1
 8004b86:	623b      	str	r3, [r7, #32]
 8004b88:	f7ff fba4 	bl	80042d4 <SPI_RxByte>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004b90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b94:	3301      	adds	r3, #1
 8004b96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d9ef      	bls.n	8004b82 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004ba8:	2304      	movs	r3, #4
 8004baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004bae:	e006      	b.n	8004bbe <SD_disk_ioctl+0x23a>
			break;
 8004bb0:	bf00      	nop
 8004bb2:	e004      	b.n	8004bbe <SD_disk_ioctl+0x23a>
			break;
 8004bb4:	bf00      	nop
 8004bb6:	e002      	b.n	8004bbe <SD_disk_ioctl+0x23a>
			break;
 8004bb8:	bf00      	nop
 8004bba:	e000      	b.n	8004bbe <SD_disk_ioctl+0x23a>
			break;
 8004bbc:	bf00      	nop
		}

		DESELECT();
 8004bbe:	f7ff fb47 	bl	8004250 <DESELECT>
		SPI_RxByte();
 8004bc2:	f7ff fb87 	bl	80042d4 <SPI_RxByte>
	}

	return res;
 8004bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	372c      	adds	r7, #44	@ 0x2c
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd90      	pop	{r4, r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	24000000 	.word	0x24000000

08004bd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08e      	sub	sp, #56	@ 0x38
 8004bdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	609a      	str	r2, [r3, #8]
 8004bea:	60da      	str	r2, [r3, #12]
 8004bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bee:	4b8b      	ldr	r3, [pc, #556]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf4:	4a89      	ldr	r2, [pc, #548]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004bf6:	f043 0310 	orr.w	r3, r3, #16
 8004bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bfe:	4b87      	ldr	r3, [pc, #540]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	623b      	str	r3, [r7, #32]
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c0c:	4b83      	ldr	r3, [pc, #524]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c12:	4a82      	ldr	r2, [pc, #520]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c1c:	4b7f      	ldr	r3, [pc, #508]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c30:	4a7a      	ldr	r2, [pc, #488]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c3a:	4b78      	ldr	r3, [pc, #480]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c48:	4b74      	ldr	r3, [pc, #464]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c4e:	4a73      	ldr	r2, [pc, #460]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c50:	f043 0320 	orr.w	r3, r3, #32
 8004c54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c58:	4b70      	ldr	r3, [pc, #448]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c66:	4b6d      	ldr	r3, [pc, #436]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c6c:	4a6b      	ldr	r2, [pc, #428]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c6e:	f043 0302 	orr.w	r3, r3, #2
 8004c72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c76:	4b69      	ldr	r3, [pc, #420]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c84:	4b65      	ldr	r3, [pc, #404]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c8a:	4a64      	ldr	r2, [pc, #400]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c8c:	f043 0308 	orr.w	r3, r3, #8
 8004c90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c94:	4b61      	ldr	r3, [pc, #388]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004ca2:	4b5e      	ldr	r3, [pc, #376]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ca8:	4a5c      	ldr	r2, [pc, #368]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cb2:	4b5a      	ldr	r3, [pc, #360]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cc0:	4b56      	ldr	r3, [pc, #344]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cc6:	4a55      	ldr	r2, [pc, #340]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004cc8:	f043 0304 	orr.w	r3, r3, #4
 8004ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cd0:	4b52      	ldr	r3, [pc, #328]	@ (8004e1c <MX_GPIO_Init+0x244>)
 8004cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	607b      	str	r3, [r7, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004ce4:	484e      	ldr	r0, [pc, #312]	@ (8004e20 <MX_GPIO_Init+0x248>)
 8004ce6:	f009 fd8d 	bl	800e804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004cea:	2200      	movs	r2, #0
 8004cec:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004cf0:	484c      	ldr	r0, [pc, #304]	@ (8004e24 <MX_GPIO_Init+0x24c>)
 8004cf2:	f009 fd87 	bl	800e804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004cfc:	484a      	ldr	r0, [pc, #296]	@ (8004e28 <MX_GPIO_Init+0x250>)
 8004cfe:	f009 fd81 	bl	800e804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004d02:	2200      	movs	r2, #0
 8004d04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d08:	4848      	ldr	r0, [pc, #288]	@ (8004e2c <MX_GPIO_Init+0x254>)
 8004d0a:	f009 fd7b 	bl	800e804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004d14:	4846      	ldr	r0, [pc, #280]	@ (8004e30 <MX_GPIO_Init+0x258>)
 8004d16:	f009 fd75 	bl	800e804 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004d1a:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d20:	2301      	movs	r3, #1
 8004d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d30:	4619      	mov	r1, r3
 8004d32:	483b      	ldr	r0, [pc, #236]	@ (8004e20 <MX_GPIO_Init+0x248>)
 8004d34:	f009 fba6 	bl	800e484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004d38:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d46:	2300      	movs	r3, #0
 8004d48:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4834      	ldr	r0, [pc, #208]	@ (8004e24 <MX_GPIO_Init+0x24c>)
 8004d52:	f009 fb97 	bl	800e484 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004d56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d68:	4619      	mov	r1, r3
 8004d6a:	482e      	ldr	r0, [pc, #184]	@ (8004e24 <MX_GPIO_Init+0x24c>)
 8004d6c:	f009 fb8a 	bl	800e484 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004d70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d76:	2301      	movs	r3, #1
 8004d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d86:	4619      	mov	r1, r3
 8004d88:	4827      	ldr	r0, [pc, #156]	@ (8004e28 <MX_GPIO_Init+0x250>)
 8004d8a:	f009 fb7b 	bl	800e484 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d94:	2301      	movs	r3, #1
 8004d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004da4:	4619      	mov	r1, r3
 8004da6:	4820      	ldr	r0, [pc, #128]	@ (8004e28 <MX_GPIO_Init+0x250>)
 8004da8:	f009 fb6c 	bl	800e484 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004dac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004db0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004db2:	2301      	movs	r3, #1
 8004db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4819      	ldr	r0, [pc, #100]	@ (8004e2c <MX_GPIO_Init+0x254>)
 8004dc6:	f009 fb5d 	bl	800e484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004dca:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004dce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004de0:	4619      	mov	r1, r3
 8004de2:	4813      	ldr	r0, [pc, #76]	@ (8004e30 <MX_GPIO_Init+0x258>)
 8004de4:	f009 fb4e 	bl	800e484 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004de8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004dee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	480b      	ldr	r0, [pc, #44]	@ (8004e2c <MX_GPIO_Init+0x254>)
 8004e00:	f009 fb40 	bl	800e484 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004e04:	2200      	movs	r2, #0
 8004e06:	2100      	movs	r1, #0
 8004e08:	2028      	movs	r0, #40	@ 0x28
 8004e0a:	f006 fc3c 	bl	800b686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004e0e:	2028      	movs	r0, #40	@ 0x28
 8004e10:	f006 fc53 	bl	800b6ba <HAL_NVIC_EnableIRQ>

}
 8004e14:	bf00      	nop
 8004e16:	3738      	adds	r7, #56	@ 0x38
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	58021000 	.word	0x58021000
 8004e24:	58020400 	.word	0x58020400
 8004e28:	58020c00 	.word	0x58020c00
 8004e2c:	58021800 	.word	0x58021800
 8004e30:	58020000 	.word	0x58020000

08004e34 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004e38:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb4 <MX_I2C5_Init+0x80>)
 8004e3c:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004e44:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e4a:	4b19      	ldr	r3, [pc, #100]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e50:	4b17      	ldr	r3, [pc, #92]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004e56:	4b16      	ldr	r3, [pc, #88]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e5c:	4b14      	ldr	r3, [pc, #80]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e62:	4b13      	ldr	r3, [pc, #76]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e68:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004e6e:	4810      	ldr	r0, [pc, #64]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e70:	f009 fcfc 	bl	800e86c <HAL_I2C_Init>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004e7a:	f003 f81d 	bl	8007eb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e7e:	2100      	movs	r1, #0
 8004e80:	480b      	ldr	r0, [pc, #44]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e82:	f00c f8b5 	bl	8010ff0 <HAL_I2CEx_ConfigAnalogFilter>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004e8c:	f003 f814 	bl	8007eb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004e90:	2100      	movs	r1, #0
 8004e92:	4807      	ldr	r0, [pc, #28]	@ (8004eb0 <MX_I2C5_Init+0x7c>)
 8004e94:	f00c f8f7 	bl	8011086 <HAL_I2CEx_ConfigDigitalFilter>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004e9e:	f003 f80b 	bl	8007eb8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004ea2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004ea6:	f00c f93b 	bl	8011120 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004eaa:	bf00      	nop
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	24000198 	.word	0x24000198
 8004eb4:	40006400 	.word	0x40006400

08004eb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b0b8      	sub	sp, #224	@ 0xe0
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	60da      	str	r2, [r3, #12]
 8004ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ed0:	f107 0310 	add.w	r3, r7, #16
 8004ed4:	22b8      	movs	r2, #184	@ 0xb8
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f019 f923 	bl	801e124 <memset>
  if(i2cHandle->Instance==I2C5)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f90 <HAL_I2C_MspInit+0xd8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d14f      	bne.n	8004f88 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004ee8:	f04f 0208 	mov.w	r2, #8
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004ef4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004ef8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004efc:	f107 0310 	add.w	r3, r7, #16
 8004f00:	4618      	mov	r0, r3
 8004f02:	f00d f8d1 	bl	80120a8 <HAL_RCCEx_PeriphCLKConfig>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004f0c:	f002 ffd4 	bl	8007eb8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f10:	4b20      	ldr	r3, [pc, #128]	@ (8004f94 <HAL_I2C_MspInit+0xdc>)
 8004f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f16:	4a1f      	ldr	r2, [pc, #124]	@ (8004f94 <HAL_I2C_MspInit+0xdc>)
 8004f18:	f043 0304 	orr.w	r3, r3, #4
 8004f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f20:	4b1c      	ldr	r3, [pc, #112]	@ (8004f94 <HAL_I2C_MspInit+0xdc>)
 8004f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004f2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004f32:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f36:	2312      	movs	r3, #18
 8004f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f42:	2300      	movs	r3, #0
 8004f44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004f48:	2304      	movs	r3, #4
 8004f4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f4e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004f52:	4619      	mov	r1, r3
 8004f54:	4810      	ldr	r0, [pc, #64]	@ (8004f98 <HAL_I2C_MspInit+0xe0>)
 8004f56:	f009 fa95 	bl	800e484 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f94 <HAL_I2C_MspInit+0xdc>)
 8004f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f60:	4a0c      	ldr	r2, [pc, #48]	@ (8004f94 <HAL_I2C_MspInit+0xdc>)
 8004f62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f94 <HAL_I2C_MspInit+0xdc>)
 8004f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	209d      	movs	r0, #157	@ 0x9d
 8004f7e:	f006 fb82 	bl	800b686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004f82:	209d      	movs	r0, #157	@ 0x9d
 8004f84:	f006 fb99 	bl	800b6ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004f88:	bf00      	nop
 8004f8a:	37e0      	adds	r7, #224	@ 0xe0
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40006400 	.word	0x40006400
 8004f94:	58024400 	.word	0x58024400
 8004f98:	58020800 	.word	0x58020800

08004f9c <__NVIC_SystemReset>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004fa0:	f3bf 8f4f 	dsb	sy
}
 8004fa4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004fa6:	4b06      	ldr	r3, [pc, #24]	@ (8004fc0 <__NVIC_SystemReset+0x24>)
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004fae:	4904      	ldr	r1, [pc, #16]	@ (8004fc0 <__NVIC_SystemReset+0x24>)
 8004fb0:	4b04      	ldr	r3, [pc, #16]	@ (8004fc4 <__NVIC_SystemReset+0x28>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fb6:	f3bf 8f4f 	dsb	sy
}
 8004fba:	bf00      	nop
    __NOP();
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <__NVIC_SystemReset+0x20>
 8004fc0:	e000ed00 	.word	0xe000ed00
 8004fc4:	05fa0004 	.word	0x05fa0004

08004fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	@ 0x28
 8004fcc:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/

	MPU_Config();
 8004fce:	f002 ff47 	bl	8007e60 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004fd2:	f004 fa49 	bl	8009468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fd6:	f000 ffc5 	bl	8005f64 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004fda:	f001 f835 	bl	8006048 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fde:	f7ff fdfb 	bl	8004bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004fe2:	f7fe fbdf 	bl	80037a4 <MX_DMA_Init>
  MX_I2C5_Init();
 8004fe6:	f7ff ff25 	bl	8004e34 <MX_I2C5_Init>
  MX_SPI6_Init();
 8004fea:	f002 ffc1 	bl	8007f70 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004fee:	f7fe faeb 	bl	80035c8 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004ff2:	f002 ff67 	bl	8007ec4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004ff6:	f004 f94f 	bl	8009298 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004ffa:	f003 fe6d 	bl	8008cd8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004ffe:	f003 ffe3 	bl	8008fc8 <MX_TIM8_Init>
  MX_TIM3_Init();
 8005002:	f003 ff65 	bl	8008ed0 <MX_TIM3_Init>
  MX_FATFS_Init();
 8005006:	f015 fed9 	bl	801adbc <MX_FATFS_Init>
  MX_TIM2_Init();
 800500a:	f003 ff0d 	bl	8008e28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 800500e:	2201      	movs	r2, #1
 8005010:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005014:	489a      	ldr	r0, [pc, #616]	@ (8005280 <main+0x2b8>)
 8005016:	f009 fbf5 	bl	800e804 <HAL_GPIO_WritePin>

  	  STARTUP = 1;
 800501a:	4b9a      	ldr	r3, [pc, #616]	@ (8005284 <main+0x2bc>)
 800501c:	2201      	movs	r2, #1
 800501e:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8005020:	4b99      	ldr	r3, [pc, #612]	@ (8005288 <main+0x2c0>)
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8005026:	4b99      	ldr	r3, [pc, #612]	@ (800528c <main+0x2c4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a99      	ldr	r2, [pc, #612]	@ (8005290 <main+0x2c8>)
 800502c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 800502e:	4b99      	ldr	r3, [pc, #612]	@ (8005294 <main+0x2cc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a97      	ldr	r2, [pc, #604]	@ (8005290 <main+0x2c8>)
 8005034:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8005036:	4b98      	ldr	r3, [pc, #608]	@ (8005298 <main+0x2d0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a95      	ldr	r2, [pc, #596]	@ (8005290 <main+0x2c8>)
 800503c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 800503e:	4b94      	ldr	r3, [pc, #592]	@ (8005290 <main+0x2c8>)
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8005046:	4b95      	ldr	r3, [pc, #596]	@ (800529c <main+0x2d4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a95      	ldr	r2, [pc, #596]	@ (80052a0 <main+0x2d8>)
 800504c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 800504e:	4b95      	ldr	r3, [pc, #596]	@ (80052a4 <main+0x2dc>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a93      	ldr	r2, [pc, #588]	@ (80052a0 <main+0x2d8>)
 8005054:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8005056:	4b94      	ldr	r3, [pc, #592]	@ (80052a8 <main+0x2e0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a91      	ldr	r2, [pc, #580]	@ (80052a0 <main+0x2d8>)
 800505c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 800505e:	4b90      	ldr	r3, [pc, #576]	@ (80052a0 <main+0x2d8>)
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8005066:	4b91      	ldr	r3, [pc, #580]	@ (80052ac <main+0x2e4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a91      	ldr	r2, [pc, #580]	@ (80052b0 <main+0x2e8>)
 800506c:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 800506e:	4b91      	ldr	r3, [pc, #580]	@ (80052b4 <main+0x2ec>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a8f      	ldr	r2, [pc, #572]	@ (80052b0 <main+0x2e8>)
 8005074:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 8005076:	4b90      	ldr	r3, [pc, #576]	@ (80052b8 <main+0x2f0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a8d      	ldr	r2, [pc, #564]	@ (80052b0 <main+0x2e8>)
 800507c:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 800507e:	4b8c      	ldr	r3, [pc, #560]	@ (80052b0 <main+0x2e8>)
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8005086:	4b8d      	ldr	r3, [pc, #564]	@ (80052bc <main+0x2f4>)
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	4b8c      	ldr	r3, [pc, #560]	@ (80052c0 <main+0x2f8>)
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	4b8b      	ldr	r3, [pc, #556]	@ (80052c4 <main+0x2fc>)
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	4b8a      	ldr	r3, [pc, #552]	@ (80052c8 <main+0x300>)
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	4b89      	ldr	r3, [pc, #548]	@ (80052cc <main+0x304>)
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	4b88      	ldr	r3, [pc, #544]	@ (80052d0 <main+0x308>)
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 80050b6:	4b87      	ldr	r3, [pc, #540]	@ (80052d4 <main+0x30c>)
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 80050be:	4b86      	ldr	r3, [pc, #536]	@ (80052d8 <main+0x310>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	4b85      	ldr	r3, [pc, #532]	@ (80052dc <main+0x314>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 80050ca:	4b85      	ldr	r3, [pc, #532]	@ (80052e0 <main+0x318>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 80050d0:	4b84      	ldr	r3, [pc, #528]	@ (80052e4 <main+0x31c>)
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	4b83      	ldr	r3, [pc, #524]	@ (80052e8 <main+0x320>)
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	4b82      	ldr	r3, [pc, #520]	@ (80052ec <main+0x324>)
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	4b81      	ldr	r3, [pc, #516]	@ (80052f0 <main+0x328>)
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 80050f0:	4b80      	ldr	r3, [pc, #512]	@ (80052f4 <main+0x32c>)
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 80050f8:	4b7f      	ldr	r3, [pc, #508]	@ (80052f8 <main+0x330>)
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8005100:	4b7e      	ldr	r3, [pc, #504]	@ (80052fc <main+0x334>)
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 8005108:	4b7d      	ldr	r3, [pc, #500]	@ (8005300 <main+0x338>)
 800510a:	2200      	movs	r2, #0
 800510c:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 800510e:	4b7d      	ldr	r3, [pc, #500]	@ (8005304 <main+0x33c>)
 8005110:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005114:	801a      	strh	r2, [r3, #0]


  	FDP_D_Gain_AR = 0;
 8005116:	4b7c      	ldr	r3, [pc, #496]	@ (8005308 <main+0x340>)
 8005118:	2200      	movs	r2, #0
 800511a:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 0;
 800511c:	4b7b      	ldr	r3, [pc, #492]	@ (800530c <main+0x344>)
 800511e:	2200      	movs	r2, #0
 8005120:	801a      	strh	r2, [r3, #0]


  	old_error_pitch = 0;// ruznica
 8005122:	4b7b      	ldr	r3, [pc, #492]	@ (8005310 <main+0x348>)
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 800512a:	4b7a      	ldr	r3, [pc, #488]	@ (8005314 <main+0x34c>)
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 8005132:	4b79      	ldr	r3, [pc, #484]	@ (8005318 <main+0x350>)
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 800513a:	4b78      	ldr	r3, [pc, #480]	@ (800531c <main+0x354>)
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 8005142:	4b77      	ldr	r3, [pc, #476]	@ (8005320 <main+0x358>)
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 800514a:	4b76      	ldr	r3, [pc, #472]	@ (8005324 <main+0x35c>)
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;
 8005152:	4b75      	ldr	r3, [pc, #468]	@ (8005328 <main+0x360>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 8005158:	4b74      	ldr	r3, [pc, #464]	@ (800532c <main+0x364>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 800515e:	4b74      	ldr	r3, [pc, #464]	@ (8005330 <main+0x368>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 8005164:	4b73      	ldr	r3, [pc, #460]	@ (8005334 <main+0x36c>)
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 800516a:	4b73      	ldr	r3, [pc, #460]	@ (8005338 <main+0x370>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8005170:	4b72      	ldr	r3, [pc, #456]	@ (800533c <main+0x374>)
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 8005176:	4b72      	ldr	r3, [pc, #456]	@ (8005340 <main+0x378>)
 8005178:	f642 1204 	movw	r2, #10500	@ 0x2904
 800517c:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 800517e:	4b71      	ldr	r3, [pc, #452]	@ (8005344 <main+0x37c>)
 8005180:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005184:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 8005186:	4b70      	ldr	r3, [pc, #448]	@ (8005348 <main+0x380>)
 8005188:	f642 1204 	movw	r2, #10500	@ 0x2904
 800518c:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 800518e:	4b6f      	ldr	r3, [pc, #444]	@ (800534c <main+0x384>)
 8005190:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005194:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 8005196:	4b6e      	ldr	r3, [pc, #440]	@ (8005350 <main+0x388>)
 8005198:	f642 1204 	movw	r2, #10500	@ 0x2904
 800519c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 800519e:	4b6d      	ldr	r3, [pc, #436]	@ (8005354 <main+0x38c>)
 80051a0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80051a4:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 80051a6:	4b6c      	ldr	r3, [pc, #432]	@ (8005358 <main+0x390>)
 80051a8:	f642 1204 	movw	r2, #10500	@ 0x2904
 80051ac:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 80051ae:	4b6b      	ldr	r3, [pc, #428]	@ (800535c <main+0x394>)
 80051b0:	f642 1204 	movw	r2, #10500	@ 0x2904
 80051b4:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 80051b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005360 <main+0x398>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 80051bc:	4b69      	ldr	r3, [pc, #420]	@ (8005364 <main+0x39c>)
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 80051c2:	4b69      	ldr	r3, [pc, #420]	@ (8005368 <main+0x3a0>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 80051c8:	4b68      	ldr	r3, [pc, #416]	@ (800536c <main+0x3a4>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 80051ce:	4b68      	ldr	r3, [pc, #416]	@ (8005370 <main+0x3a8>)
 80051d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80051d4:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 80051d6:	4b67      	ldr	r3, [pc, #412]	@ (8005374 <main+0x3ac>)
 80051d8:	2200      	movs	r2, #0
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	4b66      	ldr	r3, [pc, #408]	@ (8005378 <main+0x3b0>)
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	4b66      	ldr	r3, [pc, #408]	@ (800537c <main+0x3b4>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 80051e8:	4b65      	ldr	r3, [pc, #404]	@ (8005380 <main+0x3b8>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	4b65      	ldr	r3, [pc, #404]	@ (8005384 <main+0x3bc>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]

  	thrust_values = 0;
 80051f4:	4964      	ldr	r1, [pc, #400]	@ (8005388 <main+0x3c0>)
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	e9c1 2300 	strd	r2, r3, [r1]

p_angular_rate_pitchfactor = 14;
 8005202:	4b62      	ldr	r3, [pc, #392]	@ (800538c <main+0x3c4>)
 8005204:	4a62      	ldr	r2, [pc, #392]	@ (8005390 <main+0x3c8>)
 8005206:	601a      	str	r2, [r3, #0]
p_angular_rate_roolfactor = 12;
 8005208:	4b62      	ldr	r3, [pc, #392]	@ (8005394 <main+0x3cc>)
 800520a:	4a63      	ldr	r2, [pc, #396]	@ (8005398 <main+0x3d0>)
 800520c:	601a      	str	r2, [r3, #0]
p_angular_rate_yawfactor = 10;// -> 10
 800520e:	4b63      	ldr	r3, [pc, #396]	@ (800539c <main+0x3d4>)
 8005210:	4a63      	ldr	r2, [pc, #396]	@ (80053a0 <main+0x3d8>)
 8005212:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
i_angular_rate_pitchfactor = 10;
 8005214:	4b63      	ldr	r3, [pc, #396]	@ (80053a4 <main+0x3dc>)
 8005216:	4a62      	ldr	r2, [pc, #392]	@ (80053a0 <main+0x3d8>)
 8005218:	601a      	str	r2, [r3, #0]
i_angular_rate_roolfactor = 10;
 800521a:	4b63      	ldr	r3, [pc, #396]	@ (80053a8 <main+0x3e0>)
 800521c:	4a60      	ldr	r2, [pc, #384]	@ (80053a0 <main+0x3d8>)
 800521e:	601a      	str	r2, [r3, #0]
i_angular_rate_yawfactor = 0;
 8005220:	4b62      	ldr	r3, [pc, #392]	@ (80053ac <main+0x3e4>)
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
d_angular_rate_pitchfactor = 30;
 8005228:	4b61      	ldr	r3, [pc, #388]	@ (80053b0 <main+0x3e8>)
 800522a:	4a62      	ldr	r2, [pc, #392]	@ (80053b4 <main+0x3ec>)
 800522c:	601a      	str	r2, [r3, #0]
d_angular_rate_roolfactor = 20;
 800522e:	4b62      	ldr	r3, [pc, #392]	@ (80053b8 <main+0x3f0>)
 8005230:	4a62      	ldr	r2, [pc, #392]	@ (80053bc <main+0x3f4>)
 8005232:	601a      	str	r2, [r3, #0]
d_angular_rate_yawfactor = 5;
 8005234:	4b62      	ldr	r3, [pc, #392]	@ (80053c0 <main+0x3f8>)
 8005236:	4a63      	ldr	r2, [pc, #396]	@ (80053c4 <main+0x3fc>)
 8005238:	601a      	str	r2, [r3, #0]

p_pitchfactor = 5.5;
 800523a:	4b14      	ldr	r3, [pc, #80]	@ (800528c <main+0x2c4>)
 800523c:	4a62      	ldr	r2, [pc, #392]	@ (80053c8 <main+0x400>)
 800523e:	601a      	str	r2, [r3, #0]
p_roolfactor = 6;//5
 8005240:	4b16      	ldr	r3, [pc, #88]	@ (800529c <main+0x2d4>)
 8005242:	4a62      	ldr	r2, [pc, #392]	@ (80053cc <main+0x404>)
 8005244:	601a      	str	r2, [r3, #0]
p_yawfactor = 5;
 8005246:	4b19      	ldr	r3, [pc, #100]	@ (80052ac <main+0x2e4>)
 8005248:	4a5e      	ldr	r2, [pc, #376]	@ (80053c4 <main+0x3fc>)
 800524a:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
i_pitchfactor = 9;//8
 800524c:	4b11      	ldr	r3, [pc, #68]	@ (8005294 <main+0x2cc>)
 800524e:	4a60      	ldr	r2, [pc, #384]	@ (80053d0 <main+0x408>)
 8005250:	601a      	str	r2, [r3, #0]
i_roolfactor = 8;//10
 8005252:	4b14      	ldr	r3, [pc, #80]	@ (80052a4 <main+0x2dc>)
 8005254:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005258:	601a      	str	r2, [r3, #0]
i_yawfactor = 0;
 800525a:	4b16      	ldr	r3, [pc, #88]	@ (80052b4 <main+0x2ec>)
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
///////////////////////////////////////////////////////////////////////////
d_pitchfactor = 30;//25
 8005262:	4b0d      	ldr	r3, [pc, #52]	@ (8005298 <main+0x2d0>)
 8005264:	4a53      	ldr	r2, [pc, #332]	@ (80053b4 <main+0x3ec>)
 8005266:	601a      	str	r2, [r3, #0]
d_roolfactor = 20;
 8005268:	4b0f      	ldr	r3, [pc, #60]	@ (80052a8 <main+0x2e0>)
 800526a:	4a54      	ldr	r2, [pc, #336]	@ (80053bc <main+0x3f4>)
 800526c:	601a      	str	r2, [r3, #0]
d_yawfactor = 0;
 800526e:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <main+0x2f0>)
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	601a      	str	r2, [r3, #0]




  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005276:	4b45      	ldr	r3, [pc, #276]	@ (800538c <main+0x3c4>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a56      	ldr	r2, [pc, #344]	@ (80053d4 <main+0x40c>)
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e0ab      	b.n	80053d8 <main+0x410>
 8005280:	58021800 	.word	0x58021800
 8005284:	00000080 	.word	0x00000080
 8005288:	000041c4 	.word	0x000041c4
 800528c:	000040f4 	.word	0x000040f4
 8005290:	00004118 	.word	0x00004118
 8005294:	00004100 	.word	0x00004100
 8005298:	0000410c 	.word	0x0000410c
 800529c:	000040f8 	.word	0x000040f8
 80052a0:	0000412c 	.word	0x0000412c
 80052a4:	00004104 	.word	0x00004104
 80052a8:	00004110 	.word	0x00004110
 80052ac:	000040fc 	.word	0x000040fc
 80052b0:	00004140 	.word	0x00004140
 80052b4:	00004108 	.word	0x00004108
 80052b8:	00004114 	.word	0x00004114
 80052bc:	00000018 	.word	0x00000018
 80052c0:	0000001c 	.word	0x0000001c
 80052c4:	00000020 	.word	0x00000020
 80052c8:	00000024 	.word	0x00000024
 80052cc:	00000028 	.word	0x00000028
 80052d0:	0000002c 	.word	0x0000002c
 80052d4:	00000058 	.word	0x00000058
 80052d8:	00000078 	.word	0x00000078
 80052dc:	0000007c 	.word	0x0000007c
 80052e0:	00000084 	.word	0x00000084
 80052e4:	000000e8 	.word	0x000000e8
 80052e8:	000000ec 	.word	0x000000ec
 80052ec:	000000f0 	.word	0x000000f0
 80052f0:	000000f4 	.word	0x000000f4
 80052f4:	0000405c 	.word	0x0000405c
 80052f8:	00004060 	.word	0x00004060
 80052fc:	00004064 	.word	0x00004064
 8005300:	00004068 	.word	0x00004068
 8005304:	0000406a 	.word	0x0000406a
 8005308:	00004084 	.word	0x00004084
 800530c:	00004086 	.word	0x00004086
 8005310:	000040ac 	.word	0x000040ac
 8005314:	000040b0 	.word	0x000040b0
 8005318:	000040b4 	.word	0x000040b4
 800531c:	000040b8 	.word	0x000040b8
 8005320:	000040bc 	.word	0x000040bc
 8005324:	000040c0 	.word	0x000040c0
 8005328:	000040c4 	.word	0x000040c4
 800532c:	000040c8 	.word	0x000040c8
 8005330:	000040cc 	.word	0x000040cc
 8005334:	000040d0 	.word	0x000040d0
 8005338:	000040d4 	.word	0x000040d4
 800533c:	000040d8 	.word	0x000040d8
 8005340:	000041b4 	.word	0x000041b4
 8005344:	000041b6 	.word	0x000041b6
 8005348:	000041b8 	.word	0x000041b8
 800534c:	000041ba 	.word	0x000041ba
 8005350:	000041bc 	.word	0x000041bc
 8005354:	000041be 	.word	0x000041be
 8005358:	000041c0 	.word	0x000041c0
 800535c:	000041c2 	.word	0x000041c2
 8005360:	000041e6 	.word	0x000041e6
 8005364:	000041e7 	.word	0x000041e7
 8005368:	000041ec 	.word	0x000041ec
 800536c:	000041f0 	.word	0x000041f0
 8005370:	000041f8 	.word	0x000041f8
 8005374:	000041fc 	.word	0x000041fc
 8005378:	000041fd 	.word	0x000041fd
 800537c:	000041fe 	.word	0x000041fe
 8005380:	00004200 	.word	0x00004200
 8005384:	00004204 	.word	0x00004204
 8005388:	00004070 	.word	0x00004070
 800538c:	00004154 	.word	0x00004154
 8005390:	41600000 	.word	0x41600000
 8005394:	00004158 	.word	0x00004158
 8005398:	41400000 	.word	0x41400000
 800539c:	0000415c 	.word	0x0000415c
 80053a0:	41200000 	.word	0x41200000
 80053a4:	00004160 	.word	0x00004160
 80053a8:	00004164 	.word	0x00004164
 80053ac:	00004168 	.word	0x00004168
 80053b0:	0000416c 	.word	0x0000416c
 80053b4:	41f00000 	.word	0x41f00000
 80053b8:	00004170 	.word	0x00004170
 80053bc:	41a00000 	.word	0x41a00000
 80053c0:	00004174 	.word	0x00004174
 80053c4:	40a00000 	.word	0x40a00000
 80053c8:	40b00000 	.word	0x40b00000
 80053cc:	40c00000 	.word	0x40c00000
 80053d0:	41100000 	.word	0x41100000
 80053d4:	00004178 	.word	0x00004178
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 80053d8:	4ba6      	ldr	r3, [pc, #664]	@ (8005674 <main+0x6ac>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4aa6      	ldr	r2, [pc, #664]	@ (8005678 <main+0x6b0>)
 80053de:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 80053e0:	4ba6      	ldr	r3, [pc, #664]	@ (800567c <main+0x6b4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4aa4      	ldr	r2, [pc, #656]	@ (8005678 <main+0x6b0>)
 80053e6:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 80053e8:	4ba5      	ldr	r3, [pc, #660]	@ (8005680 <main+0x6b8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4aa5      	ldr	r2, [pc, #660]	@ (8005684 <main+0x6bc>)
 80053ee:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 80053f0:	4ba5      	ldr	r3, [pc, #660]	@ (8005688 <main+0x6c0>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4aa3      	ldr	r2, [pc, #652]	@ (8005684 <main+0x6bc>)
 80053f6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 80053f8:	4ba4      	ldr	r3, [pc, #656]	@ (800568c <main+0x6c4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4aa1      	ldr	r2, [pc, #644]	@ (8005684 <main+0x6bc>)
 80053fe:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 8005400:	4ba3      	ldr	r3, [pc, #652]	@ (8005690 <main+0x6c8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4aa3      	ldr	r2, [pc, #652]	@ (8005694 <main+0x6cc>)
 8005406:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005408:	4ba3      	ldr	r3, [pc, #652]	@ (8005698 <main+0x6d0>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4aa1      	ldr	r2, [pc, #644]	@ (8005694 <main+0x6cc>)
 800540e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005410:	4ba2      	ldr	r3, [pc, #648]	@ (800569c <main+0x6d4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a9f      	ldr	r2, [pc, #636]	@ (8005694 <main+0x6cc>)
 8005416:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 8005418:	4ba1      	ldr	r3, [pc, #644]	@ (80056a0 <main+0x6d8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4aa1      	ldr	r2, [pc, #644]	@ (80056a4 <main+0x6dc>)
 800541e:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 8005420:	4ba1      	ldr	r3, [pc, #644]	@ (80056a8 <main+0x6e0>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a9f      	ldr	r2, [pc, #636]	@ (80056a4 <main+0x6dc>)
 8005426:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 8005428:	4ba0      	ldr	r3, [pc, #640]	@ (80056ac <main+0x6e4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a9d      	ldr	r2, [pc, #628]	@ (80056a4 <main+0x6dc>)
 800542e:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 8005430:	4b9f      	ldr	r3, [pc, #636]	@ (80056b0 <main+0x6e8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a9f      	ldr	r2, [pc, #636]	@ (80056b4 <main+0x6ec>)
 8005436:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 8005438:	4b9f      	ldr	r3, [pc, #636]	@ (80056b8 <main+0x6f0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a9d      	ldr	r2, [pc, #628]	@ (80056b4 <main+0x6ec>)
 800543e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 8005440:	4b9e      	ldr	r3, [pc, #632]	@ (80056bc <main+0x6f4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a9b      	ldr	r2, [pc, #620]	@ (80056b4 <main+0x6ec>)
 8005446:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 8005448:	4b9d      	ldr	r3, [pc, #628]	@ (80056c0 <main+0x6f8>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a9d      	ldr	r2, [pc, #628]	@ (80056c4 <main+0x6fc>)
 800544e:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 8005450:	4b9d      	ldr	r3, [pc, #628]	@ (80056c8 <main+0x700>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a9b      	ldr	r2, [pc, #620]	@ (80056c4 <main+0x6fc>)
 8005456:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 8005458:	4b9c      	ldr	r3, [pc, #624]	@ (80056cc <main+0x704>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a99      	ldr	r2, [pc, #612]	@ (80056c4 <main+0x6fc>)
 800545e:	6093      	str	r3, [r2, #8]

  	wanted_pitch_rx = 0;// chcainy stan
 8005460:	4b9b      	ldr	r3, [pc, #620]	@ (80056d0 <main+0x708>)
 8005462:	2200      	movs	r2, #0
 8005464:	801a      	strh	r2, [r3, #0]
  	wanted_rool_rx = 0;
 8005466:	4b9b      	ldr	r3, [pc, #620]	@ (80056d4 <main+0x70c>)
 8005468:	2200      	movs	r2, #0
 800546a:	801a      	strh	r2, [r3, #0]
  	wanted_yaw_rx = 0;
 800546c:	4b9a      	ldr	r3, [pc, #616]	@ (80056d8 <main+0x710>)
 800546e:	2200      	movs	r2, #0
 8005470:	801a      	strh	r2, [r3, #0]
  	wanted_gz = 0 ;
 8005472:	4b9a      	ldr	r3, [pc, #616]	@ (80056dc <main+0x714>)
 8005474:	2200      	movs	r2, #0
 8005476:	801a      	strh	r2, [r3, #0]


  	data.ox = 0;
 8005478:	4b99      	ldr	r3, [pc, #612]	@ (80056e0 <main+0x718>)
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 8005480:	4b97      	ldr	r3, [pc, #604]	@ (80056e0 <main+0x718>)
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 8005488:	4b95      	ldr	r3, [pc, #596]	@ (80056e0 <main+0x718>)
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8005490:	4b93      	ldr	r3, [pc, #588]	@ (80056e0 <main+0x718>)
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 8005498:	4b91      	ldr	r3, [pc, #580]	@ (80056e0 <main+0x718>)
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 80054a0:	4b8f      	ldr	r3, [pc, #572]	@ (80056e0 <main+0x718>)
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 80054a8:	4b8e      	ldr	r3, [pc, #568]	@ (80056e4 <main+0x71c>)
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 80054b0:	4b8d      	ldr	r3, [pc, #564]	@ (80056e8 <main+0x720>)
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 80054b8:	4b8c      	ldr	r3, [pc, #560]	@ (80056ec <main+0x724>)
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 80054c0:	4b8b      	ldr	r3, [pc, #556]	@ (80056f0 <main+0x728>)
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 80054c8:	4b8a      	ldr	r3, [pc, #552]	@ (80056f4 <main+0x72c>)
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 80054d0:	4b89      	ldr	r3, [pc, #548]	@ (80056f8 <main+0x730>)
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 80054d8:	4b88      	ldr	r3, [pc, #544]	@ (80056fc <main+0x734>)
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 80054e0:	4b86      	ldr	r3, [pc, #536]	@ (80056fc <main+0x734>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 80054e8:	4b84      	ldr	r3, [pc, #528]	@ (80056fc <main+0x734>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  	ax = 0,ay = 0,az = 0, gx = 0, gy = 0, gz = 0;
 80054f0:	4b83      	ldr	r3, [pc, #524]	@ (8005700 <main+0x738>)
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	4b82      	ldr	r3, [pc, #520]	@ (8005704 <main+0x73c>)
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	4b81      	ldr	r3, [pc, #516]	@ (8005708 <main+0x740>)
 8005502:	f04f 0200 	mov.w	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	4b80      	ldr	r3, [pc, #512]	@ (800570c <main+0x744>)
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	4b7f      	ldr	r3, [pc, #508]	@ (8005710 <main+0x748>)
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	4b7e      	ldr	r3, [pc, #504]	@ (8005714 <main+0x74c>)
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
  	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8005520:	4b7d      	ldr	r3, [pc, #500]	@ (8005718 <main+0x750>)
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	4b7c      	ldr	r3, [pc, #496]	@ (800571c <main+0x754>)
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	4b7b      	ldr	r3, [pc, #492]	@ (8005720 <main+0x758>)
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	4b7a      	ldr	r3, [pc, #488]	@ (8005724 <main+0x75c>)
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	4b79      	ldr	r3, [pc, #484]	@ (8005728 <main+0x760>)
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	4b78      	ldr	r3, [pc, #480]	@ (800572c <main+0x764>)
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
  	accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;
 8005550:	4b77      	ldr	r3, [pc, #476]	@ (8005730 <main+0x768>)
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	4b76      	ldr	r3, [pc, #472]	@ (8005734 <main+0x76c>)
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	4b75      	ldr	r3, [pc, #468]	@ (8005738 <main+0x770>)
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	4b74      	ldr	r3, [pc, #464]	@ (800573c <main+0x774>)
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	4b73      	ldr	r3, [pc, #460]	@ (8005740 <main+0x778>)
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	4b72      	ldr	r3, [pc, #456]	@ (8005744 <main+0x77c>)
 800557a:	f04f 0200 	mov.w	r2, #0
 800557e:	601a      	str	r2, [r3, #0]

  	nRF24_Rx_Mode = 0;
 8005580:	4b71      	ldr	r3, [pc, #452]	@ (8005748 <main+0x780>)
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]

  	now_pitch = 0;
 8005586:	4b71      	ldr	r3, [pc, #452]	@ (800574c <main+0x784>)
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
  	now_rool = 0;
 800558e:	4b70      	ldr	r3, [pc, #448]	@ (8005750 <main+0x788>)
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
  	now_yaw = 0;
 8005596:	4b6f      	ldr	r3, [pc, #444]	@ (8005754 <main+0x78c>)
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
  	wanted_pitch = 0;
 800559e:	4b6e      	ldr	r3, [pc, #440]	@ (8005758 <main+0x790>)
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]

  	pitch_error = 0;
 80055a6:	4b6d      	ldr	r3, [pc, #436]	@ (800575c <main+0x794>)
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
  	rool_error = 0;
 80055ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005760 <main+0x798>)
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
  	yaw_error = 0;
 80055b6:	4b6b      	ldr	r3, [pc, #428]	@ (8005764 <main+0x79c>)
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
  	pitch_ar_error = 0;
 80055be:	4b6a      	ldr	r3, [pc, #424]	@ (8005768 <main+0x7a0>)
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
  	rool_ar_error = 0;
 80055c6:	4b69      	ldr	r3, [pc, #420]	@ (800576c <main+0x7a4>)
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
  	yaw_ar_error = 0;
 80055ce:	4b68      	ldr	r3, [pc, #416]	@ (8005770 <main+0x7a8>)
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 80055d6:	4a67      	ldr	r2, [pc, #412]	@ (8005774 <main+0x7ac>)
 80055d8:	f107 0308 	add.w	r3, r7, #8
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	4611      	mov	r1, r2
 80055e0:	8019      	strh	r1, [r3, #0]
 80055e2:	3302      	adds	r3, #2
 80055e4:	0c12      	lsrs	r2, r2, #16
 80055e6:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 80055e8:	4a63      	ldr	r2, [pc, #396]	@ (8005778 <main+0x7b0>)
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	4611      	mov	r1, r2
 80055f0:	8019      	strh	r1, [r3, #0]
 80055f2:	3302      	adds	r3, #2
 80055f4:	0c12      	lsrs	r2, r2, #16
 80055f6:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 80055f8:	2201      	movs	r2, #1
 80055fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055fe:	485f      	ldr	r0, [pc, #380]	@ (800577c <main+0x7b4>)
 8005600:	f009 f900 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_6_1;
 8005604:	2201      	movs	r2, #1
 8005606:	2108      	movs	r1, #8
 8005608:	485d      	ldr	r0, [pc, #372]	@ (8005780 <main+0x7b8>)
 800560a:	f009 f8fb 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_7_1;
 800560e:	2201      	movs	r2, #1
 8005610:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005614:	4859      	ldr	r0, [pc, #356]	@ (800577c <main+0x7b4>)
 8005616:	f009 f8f5 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 800561a:	2201      	movs	r2, #1
 800561c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005620:	4858      	ldr	r0, [pc, #352]	@ (8005784 <main+0x7bc>)
 8005622:	f009 f8ef 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_G_1;
 8005626:	2201      	movs	r2, #1
 8005628:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800562c:	4854      	ldr	r0, [pc, #336]	@ (8005780 <main+0x7b8>)
 800562e:	f009 f8e9 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_Y_1;
 8005632:	2201      	movs	r2, #1
 8005634:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005638:	4853      	ldr	r0, [pc, #332]	@ (8005788 <main+0x7c0>)
 800563a:	f009 f8e3 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_R_1;
 800563e:	2201      	movs	r2, #1
 8005640:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005644:	4850      	ldr	r0, [pc, #320]	@ (8005788 <main+0x7c0>)
 8005646:	f009 f8dd 	bl	800e804 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 800564a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800564e:	f003 ff9d 	bl	800958c <HAL_Delay>
  	LED_G_0;
 8005652:	2200      	movs	r2, #0
 8005654:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005658:	4849      	ldr	r0, [pc, #292]	@ (8005780 <main+0x7b8>)
 800565a:	f009 f8d3 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_Y_0;
 800565e:	2200      	movs	r2, #0
 8005660:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005664:	4848      	ldr	r0, [pc, #288]	@ (8005788 <main+0x7c0>)
 8005666:	f009 f8cd 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_R_0;
 800566a:	2200      	movs	r2, #0
 800566c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005670:	e08c      	b.n	800578c <main+0x7c4>
 8005672:	bf00      	nop
 8005674:	00004160 	.word	0x00004160
 8005678:	00004178 	.word	0x00004178
 800567c:	0000416c 	.word	0x0000416c
 8005680:	00004158 	.word	0x00004158
 8005684:	0000418c 	.word	0x0000418c
 8005688:	00004164 	.word	0x00004164
 800568c:	00004170 	.word	0x00004170
 8005690:	0000415c 	.word	0x0000415c
 8005694:	000041a0 	.word	0x000041a0
 8005698:	00004168 	.word	0x00004168
 800569c:	00004174 	.word	0x00004174
 80056a0:	000040f4 	.word	0x000040f4
 80056a4:	00004118 	.word	0x00004118
 80056a8:	00004100 	.word	0x00004100
 80056ac:	0000410c 	.word	0x0000410c
 80056b0:	000040f8 	.word	0x000040f8
 80056b4:	0000412c 	.word	0x0000412c
 80056b8:	00004104 	.word	0x00004104
 80056bc:	00004110 	.word	0x00004110
 80056c0:	000040fc 	.word	0x000040fc
 80056c4:	00004140 	.word	0x00004140
 80056c8:	00004108 	.word	0x00004108
 80056cc:	00004114 	.word	0x00004114
 80056d0:	00004054 	.word	0x00004054
 80056d4:	00004056 	.word	0x00004056
 80056d8:	00004058 	.word	0x00004058
 80056dc:	0000405a 	.word	0x0000405a
 80056e0:	00000088 	.word	0x00000088
 80056e4:	000040dc 	.word	0x000040dc
 80056e8:	000040e0 	.word	0x000040e0
 80056ec:	000040e4 	.word	0x000040e4
 80056f0:	000040e8 	.word	0x000040e8
 80056f4:	000040ec 	.word	0x000040ec
 80056f8:	000040f0 	.word	0x000040f0
 80056fc:	00000184 	.word	0x00000184
 8005700:	00000000 	.word	0x00000000
 8005704:	00000004 	.word	0x00000004
 8005708:	00000008 	.word	0x00000008
 800570c:	0000000c 	.word	0x0000000c
 8005710:	00000010 	.word	0x00000010
 8005714:	00000014 	.word	0x00000014
 8005718:	00000018 	.word	0x00000018
 800571c:	0000001c 	.word	0x0000001c
 8005720:	00000020 	.word	0x00000020
 8005724:	00000024 	.word	0x00000024
 8005728:	00000028 	.word	0x00000028
 800572c:	0000002c 	.word	0x0000002c
 8005730:	00000030 	.word	0x00000030
 8005734:	00000034 	.word	0x00000034
 8005738:	00000038 	.word	0x00000038
 800573c:	0000003c 	.word	0x0000003c
 8005740:	00000040 	.word	0x00000040
 8005744:	00000044 	.word	0x00000044
 8005748:	00000180 	.word	0x00000180
 800574c:	00004088 	.word	0x00004088
 8005750:	0000408c 	.word	0x0000408c
 8005754:	00004090 	.word	0x00004090
 8005758:	00004078 	.word	0x00004078
 800575c:	00004094 	.word	0x00004094
 8005760:	00004098 	.word	0x00004098
 8005764:	0000409c 	.word	0x0000409c
 8005768:	000040a0 	.word	0x000040a0
 800576c:	000040a4 	.word	0x000040a4
 8005770:	000040a8 	.word	0x000040a8
 8005774:	0801eb8c 	.word	0x0801eb8c
 8005778:	0801eb90 	.word	0x0801eb90
 800577c:	58020000 	.word	0x58020000
 8005780:	58021000 	.word	0x58021000
 8005784:	58020c00 	.word	0x58020c00
 8005788:	58020400 	.word	0x58020400
 800578c:	48aa      	ldr	r0, [pc, #680]	@ (8005a38 <main+0xa70>)
 800578e:	f009 f839 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_5_0;
 8005792:	2200      	movs	r2, #0
 8005794:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005798:	48a8      	ldr	r0, [pc, #672]	@ (8005a3c <main+0xa74>)
 800579a:	f009 f833 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_6_0;
 800579e:	2200      	movs	r2, #0
 80057a0:	2108      	movs	r1, #8
 80057a2:	48a7      	ldr	r0, [pc, #668]	@ (8005a40 <main+0xa78>)
 80057a4:	f009 f82e 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_7_0;
 80057a8:	2200      	movs	r2, #0
 80057aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057ae:	48a3      	ldr	r0, [pc, #652]	@ (8005a3c <main+0xa74>)
 80057b0:	f009 f828 	bl	800e804 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 80057b4:	2200      	movs	r2, #0
 80057b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057ba:	48a2      	ldr	r0, [pc, #648]	@ (8005a44 <main+0xa7c>)
 80057bc:	f009 f822 	bl	800e804 <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
 80057c4:	e009      	b.n	80057da <main+0x812>
  		Old_Data_stack.olddata[i] = 0;
 80057c6:	4aa0      	ldr	r2, [pc, #640]	@ (8005a48 <main+0xa80>)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	3301      	adds	r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80057e0:	dbf1      	blt.n	80057c6 <main+0x7fe>
  	}
  	Old_Data_stack.start_pointer = 0;
 80057e2:	4b99      	ldr	r3, [pc, #612]	@ (8005a48 <main+0xa80>)
 80057e4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 80057ee:	4b96      	ldr	r3, [pc, #600]	@ (8005a48 <main+0xa80>)
 80057f0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80057f4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80057f8:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 80057fc:	4b93      	ldr	r3, [pc, #588]	@ (8005a4c <main+0xa84>)
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 8005802:	4893      	ldr	r0, [pc, #588]	@ (8005a50 <main+0xa88>)
 8005804:	f010 fdee 	bl	80163e4 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 8005808:	2201      	movs	r2, #1
 800580a:	4990      	ldr	r1, [pc, #576]	@ (8005a4c <main+0xa84>)
 800580c:	4891      	ldr	r0, [pc, #580]	@ (8005a54 <main+0xa8c>)
 800580e:	f004 fc0f 	bl	800a030 <HAL_ADC_Start_DMA>
  	LED_R_1;
 8005812:	2201      	movs	r2, #1
 8005814:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005818:	4887      	ldr	r0, [pc, #540]	@ (8005a38 <main+0xa70>)
 800581a:	f008 fff3 	bl	800e804 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 800581e:	bf00      	nop
 8005820:	4b8a      	ldr	r3, [pc, #552]	@ (8005a4c <main+0xa84>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0fb      	beq.n	8005820 <main+0x858>

  	}
  	LED_R_0;
 8005828:	2200      	movs	r2, #0
 800582a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800582e:	4882      	ldr	r0, [pc, #520]	@ (8005a38 <main+0xa70>)
 8005830:	f008 ffe8 	bl	800e804 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 8005834:	f7fe fcc0 	bl	80041b8 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 8005838:	2104      	movs	r1, #4
 800583a:	4887      	ldr	r0, [pc, #540]	@ (8005a58 <main+0xa90>)
 800583c:	f010 ff2e 	bl	801669c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005840:	2108      	movs	r1, #8
 8005842:	4885      	ldr	r0, [pc, #532]	@ (8005a58 <main+0xa90>)
 8005844:	f010 ff2a 	bl	801669c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005848:	210c      	movs	r1, #12
 800584a:	4883      	ldr	r0, [pc, #524]	@ (8005a58 <main+0xa90>)
 800584c:	f010 ff26 	bl	801669c <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005850:	4b82      	ldr	r3, [pc, #520]	@ (8005a5c <main+0xa94>)
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	4618      	mov	r0, r3
 8005858:	f001 fea2 	bl	80075a0 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 800585c:	4b7f      	ldr	r3, [pc, #508]	@ (8005a5c <main+0xa94>)
 800585e:	8a9b      	ldrh	r3, [r3, #20]
 8005860:	2b07      	cmp	r3, #7
 8005862:	d107      	bne.n	8005874 <main+0x8ac>
  	{
  		LED_R_1;
 8005864:	2201      	movs	r2, #1
 8005866:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800586a:	4873      	ldr	r0, [pc, #460]	@ (8005a38 <main+0xa70>)
 800586c:	f008 ffca 	bl	800e804 <HAL_GPIO_WritePin>
  		while(1){
 8005870:	bf00      	nop
 8005872:	e7fd      	b.n	8005870 <main+0x8a8>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005874:	4b79      	ldr	r3, [pc, #484]	@ (8005a5c <main+0xa94>)
 8005876:	8a9b      	ldrh	r3, [r3, #20]
 8005878:	2b09      	cmp	r3, #9
 800587a:	d107      	bne.n	800588c <main+0x8c4>
  		LED_R_1;
 800587c:	2201      	movs	r2, #1
 800587e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005882:	486d      	ldr	r0, [pc, #436]	@ (8005a38 <main+0xa70>)
 8005884:	f008 ffbe 	bl	800e804 <HAL_GPIO_WritePin>
  		while(1){
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <main+0x8c0>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 800588c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005890:	4869      	ldr	r0, [pc, #420]	@ (8005a38 <main+0xa70>)
 8005892:	f008 ff9f 	bl	800e7d4 <HAL_GPIO_ReadPin>
 8005896:	4603      	mov	r3, r0
 8005898:	461a      	mov	r2, r3
 800589a:	4b71      	ldr	r3, [pc, #452]	@ (8005a60 <main+0xa98>)
 800589c:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 800589e:	4b70      	ldr	r3, [pc, #448]	@ (8005a60 <main+0xa98>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d103      	bne.n	80058ae <main+0x8e6>
		SD_enable_Flag = 0;
 80058a6:	4b6e      	ldr	r3, [pc, #440]	@ (8005a60 <main+0xa98>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	e002      	b.n	80058b4 <main+0x8ec>
	}
	else{
		SD_enable_Flag = 1;
 80058ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005a60 <main+0xa98>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 80058b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005a60 <main+0xa98>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d15f      	bne.n	800597c <main+0x9b4>
		LED_uSD_1;
 80058bc:	2201      	movs	r2, #1
 80058be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058c2:	4860      	ldr	r0, [pc, #384]	@ (8005a44 <main+0xa7c>)
 80058c4:	f008 ff9e 	bl	800e804 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 80058c8:	2201      	movs	r2, #1
 80058ca:	4966      	ldr	r1, [pc, #408]	@ (8005a64 <main+0xa9c>)
 80058cc:	4866      	ldr	r0, [pc, #408]	@ (8005a68 <main+0xaa0>)
 80058ce:	f017 fe11 	bl	801d4f4 <f_mount>
 80058d2:	4603      	mov	r3, r0
 80058d4:	461a      	mov	r2, r3
 80058d6:	4b65      	ldr	r3, [pc, #404]	@ (8005a6c <main+0xaa4>)
 80058d8:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 80058da:	4865      	ldr	r0, [pc, #404]	@ (8005a70 <main+0xaa8>)
 80058dc:	f018 fa54 	bl	801dd88 <f_unlink>
 80058e0:	4603      	mov	r3, r0
 80058e2:	461a      	mov	r2, r3
 80058e4:	4b61      	ldr	r3, [pc, #388]	@ (8005a6c <main+0xaa4>)
 80058e6:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 80058e8:	2201      	movs	r2, #1
 80058ea:	495e      	ldr	r1, [pc, #376]	@ (8005a64 <main+0xa9c>)
 80058ec:	485e      	ldr	r0, [pc, #376]	@ (8005a68 <main+0xaa0>)
 80058ee:	f017 fe01 	bl	801d4f4 <f_mount>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461a      	mov	r2, r3
 80058f6:	4b5d      	ldr	r3, [pc, #372]	@ (8005a6c <main+0xaa4>)
 80058f8:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 80058fa:	220a      	movs	r2, #10
 80058fc:	495d      	ldr	r1, [pc, #372]	@ (8005a74 <main+0xaac>)
 80058fe:	485e      	ldr	r0, [pc, #376]	@ (8005a78 <main+0xab0>)
 8005900:	f017 fe3e 	bl	801d580 <f_open>
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	4b58      	ldr	r3, [pc, #352]	@ (8005a6c <main+0xaa4>)
 800590a:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 800590c:	2200      	movs	r2, #0
 800590e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005912:	484c      	ldr	r0, [pc, #304]	@ (8005a44 <main+0xa7c>)
 8005914:	f008 ff76 	bl	800e804 <HAL_GPIO_WritePin>

		LED_uSD_1;
 8005918:	2201      	movs	r2, #1
 800591a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800591e:	4849      	ldr	r0, [pc, #292]	@ (8005a44 <main+0xa7c>)
 8005920:	f008 ff70 	bl	800e804 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 8005924:	2300      	movs	r3, #0
 8005926:	61bb      	str	r3, [r7, #24]
 8005928:	e007      	b.n	800593a <main+0x972>
			DataToSendBuffer[i] = 49;
 800592a:	4a54      	ldr	r2, [pc, #336]	@ (8005a7c <main+0xab4>)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	4413      	add	r3, r2
 8005930:	2231      	movs	r2, #49	@ 0x31
 8005932:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	3301      	adds	r3, #1
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	4a50      	ldr	r2, [pc, #320]	@ (8005a80 <main+0xab8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	ddf3      	ble.n	800592a <main+0x962>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 8005942:	4b50      	ldr	r3, [pc, #320]	@ (8005a84 <main+0xabc>)
 8005944:	2281      	movs	r2, #129	@ 0x81
 8005946:	494d      	ldr	r1, [pc, #308]	@ (8005a7c <main+0xab4>)
 8005948:	484b      	ldr	r0, [pc, #300]	@ (8005a78 <main+0xab0>)
 800594a:	f017 ffe1 	bl	801d910 <f_write>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	4b46      	ldr	r3, [pc, #280]	@ (8005a6c <main+0xaa4>)
 8005954:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005956:	4848      	ldr	r0, [pc, #288]	@ (8005a78 <main+0xab0>)
 8005958:	f018 f9ec 	bl	801dd34 <f_close>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	4b42      	ldr	r3, [pc, #264]	@ (8005a6c <main+0xaa4>)
 8005962:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 8005964:	4b41      	ldr	r3, [pc, #260]	@ (8005a6c <main+0xaa4>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <main+0x9a8>
			while(1){
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <main+0x9a4>

			}
		}
		LED_uSD_0;
 8005970:	2200      	movs	r2, #0
 8005972:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005976:	4833      	ldr	r0, [pc, #204]	@ (8005a44 <main+0xa7c>)
 8005978:	f008 ff44 	bl	800e804 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 800597c:	2201      	movs	r2, #1
 800597e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005982:	482e      	ldr	r0, [pc, #184]	@ (8005a3c <main+0xa74>)
 8005984:	f008 ff3e 	bl	800e804 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 8005988:	483f      	ldr	r0, [pc, #252]	@ (8005a88 <main+0xac0>)
 800598a:	f7fb fc69 	bl	8001260 <MPU6050_INIT>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d107      	bne.n	80059a4 <main+0x9dc>
			LED_R_1;
 8005994:	2201      	movs	r2, #1
 8005996:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800599a:	4827      	ldr	r0, [pc, #156]	@ (8005a38 <main+0xa70>)
 800599c:	f008 ff32 	bl	800e804 <HAL_GPIO_WritePin>
			while(1){
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <main+0x9d8>
			}
		}
		LED_Y_1;
 80059a4:	2201      	movs	r2, #1
 80059a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059aa:	4823      	ldr	r0, [pc, #140]	@ (8005a38 <main+0xa70>)
 80059ac:	f008 ff2a 	bl	800e804 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 80059b0:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8005a8c <main+0xac4>
 80059b4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005a90 <main+0xac8>
 80059b8:	4b36      	ldr	r3, [pc, #216]	@ (8005a94 <main+0xacc>)
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	4b36      	ldr	r3, [pc, #216]	@ (8005a98 <main+0xad0>)
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	eef0 0a47 	vmov.f32	s1, s14
 80059c4:	eeb0 0a67 	vmov.f32	s0, s15
 80059c8:	4b34      	ldr	r3, [pc, #208]	@ (8005a9c <main+0xad4>)
 80059ca:	4a35      	ldr	r2, [pc, #212]	@ (8005aa0 <main+0xad8>)
 80059cc:	4935      	ldr	r1, [pc, #212]	@ (8005aa4 <main+0xadc>)
 80059ce:	4836      	ldr	r0, [pc, #216]	@ (8005aa8 <main+0xae0>)
 80059d0:	f7fb fd10 	bl	80013f4 <MPU6050_CALIBRATION>
		LED_Y_0;
 80059d4:	2200      	movs	r2, #0
 80059d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059da:	4817      	ldr	r0, [pc, #92]	@ (8005a38 <main+0xa70>)
 80059dc:	f008 ff12 	bl	800e804 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 80059e0:	4829      	ldr	r0, [pc, #164]	@ (8005a88 <main+0xac0>)
 80059e2:	f7fa fe75 	bl	80006d0 <BMP180_init>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d107      	bne.n	80059fc <main+0xa34>
			LED_R_1;
 80059ec:	2201      	movs	r2, #1
 80059ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059f2:	4811      	ldr	r0, [pc, #68]	@ (8005a38 <main+0xa70>)
 80059f4:	f008 ff06 	bl	800e804 <HAL_GPIO_WritePin>
			while(1){
 80059f8:	bf00      	nop
 80059fa:	e7fd      	b.n	80059f8 <main+0xa30>
			}
		}
		LED_Y_1;
 80059fc:	2201      	movs	r2, #1
 80059fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a02:	480d      	ldr	r0, [pc, #52]	@ (8005a38 <main+0xa70>)
 8005a04:	f008 fefe 	bl	800e804 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 8005a08:	4828      	ldr	r0, [pc, #160]	@ (8005aac <main+0xae4>)
 8005a0a:	f7fb f9b3 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a14:	4808      	ldr	r0, [pc, #32]	@ (8005a38 <main+0xa70>)
 8005a16:	f008 fef5 	bl	800e804 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 8005a1a:	481b      	ldr	r0, [pc, #108]	@ (8005a88 <main+0xac0>)
 8005a1c:	f7fb fadc 	bl	8000fd8 <HMC5883L_Init>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d144      	bne.n	8005ab0 <main+0xae8>
			LED_R_1;
 8005a26:	2201      	movs	r2, #1
 8005a28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a2c:	4802      	ldr	r0, [pc, #8]	@ (8005a38 <main+0xa70>)
 8005a2e:	f008 fee9 	bl	800e804 <HAL_GPIO_WritePin>
			while(1){
 8005a32:	bf00      	nop
 8005a34:	e7fd      	b.n	8005a32 <main+0xa6a>
 8005a36:	bf00      	nop
 8005a38:	58020400 	.word	0x58020400
 8005a3c:	58020000 	.word	0x58020000
 8005a40:	58021000 	.word	0x58021000
 8005a44:	58020c00 	.word	0x58020c00
 8005a48:	000001a8 	.word	0x000001a8
 8005a4c:	24000eb0 	.word	0x24000eb0
 8005a50:	24000464 	.word	0x24000464
 8005a54:	240000ac 	.word	0x240000ac
 8005a58:	24000380 	.word	0x24000380
 8005a5c:	00000184 	.word	0x00000184
 8005a60:	000041f4 	.word	0x000041f4
 8005a64:	0801eb70 	.word	0x0801eb70
 8005a68:	24000eb4 	.word	0x24000eb4
 8005a6c:	24001eec 	.word	0x24001eec
 8005a70:	0801eb74 	.word	0x0801eb74
 8005a74:	0801eb80 	.word	0x0801eb80
 8005a78:	24001ef0 	.word	0x24001ef0
 8005a7c:	24002f28 	.word	0x24002f28
 8005a80:	0001f7e7 	.word	0x0001f7e7
 8005a84:	24002f24 	.word	0x24002f24
 8005a88:	24000198 	.word	0x24000198
 8005a8c:	42830000 	.word	0x42830000
 8005a90:	46000000 	.word	0x46000000
 8005a94:	00000044 	.word	0x00000044
 8005a98:	00000040 	.word	0x00000040
 8005a9c:	0000003c 	.word	0x0000003c
 8005aa0:	00000038 	.word	0x00000038
 8005aa4:	00000034 	.word	0x00000034
 8005aa8:	00000030 	.word	0x00000030
 8005aac:	000000f0 	.word	0x000000f0
			}
		}
		LED_Y_1;
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ab6:	488c      	ldr	r0, [pc, #560]	@ (8005ce8 <main+0xd20>)
 8005ab8:	f008 fea4 	bl	800e804 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005abc:	f7fb fb9a 	bl	80011f4 <HMC5883L_Calibration>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4b89      	ldr	r3, [pc, #548]	@ (8005cec <main+0xd24>)
 8005ac6:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005ace:	4886      	ldr	r0, [pc, #536]	@ (8005ce8 <main+0xd20>)
 8005ad0:	f008 fe98 	bl	800e804 <HAL_GPIO_WritePin>

		LED_5_0;
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ada:	4885      	ldr	r0, [pc, #532]	@ (8005cf0 <main+0xd28>)
 8005adc:	f008 fe92 	bl	800e804 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005ae0:	4b84      	ldr	r3, [pc, #528]	@ (8005cf4 <main+0xd2c>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 8005ae6:	4b83      	ldr	r3, [pc, #524]	@ (8005cf4 <main+0xd2c>)
 8005ae8:	220c      	movs	r2, #12
 8005aea:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 8005aec:	4b81      	ldr	r3, [pc, #516]	@ (8005cf4 <main+0xd2c>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	805a      	strh	r2, [r3, #2]
		MYDRON.PITCH = 0;
 8005af2:	4b80      	ldr	r3, [pc, #512]	@ (8005cf4 <main+0xd2c>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	809a      	strh	r2, [r3, #4]
		MYDRON.ROOL = 0;
 8005af8:	4b7e      	ldr	r3, [pc, #504]	@ (8005cf4 <main+0xd2c>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	80da      	strh	r2, [r3, #6]
		MYDRON.YAW = 0;
 8005afe:	4b7d      	ldr	r3, [pc, #500]	@ (8005cf4 <main+0xd2c>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	811a      	strh	r2, [r3, #8]



	/////////////////////////////// nRF24
		LED_6_1;
 8005b04:	2201      	movs	r2, #1
 8005b06:	2108      	movs	r1, #8
 8005b08:	487b      	ldr	r0, [pc, #492]	@ (8005cf8 <main+0xd30>)
 8005b0a:	f008 fe7b 	bl	800e804 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 8005b0e:	487b      	ldr	r0, [pc, #492]	@ (8005cfc <main+0xd34>)
 8005b10:	f7fc fdae 	bl	8002670 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005b14:	f107 0308 	add.w	r3, r7, #8
 8005b18:	4619      	mov	r1, r3
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	f7fc fc4d 	bl	80023ba <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fc fc82 	bl	800242c <nRF24_SetTXAddress>
		nRF24_Inittest();
 8005b28:	f7fc fdf6 	bl	8002718 <nRF24_Inittest>
		nRF24_TX_Mode();
 8005b2c:	f7fc fa70 	bl	8002010 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	e007      	b.n	8005b46 <main+0xb7e>
			Txcode[i] = 0;
 8005b36:	4a72      	ldr	r2, [pc, #456]	@ (8005d00 <main+0xd38>)
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	3301      	adds	r3, #1
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b1f      	cmp	r3, #31
 8005b4a:	ddf4      	ble.n	8005b36 <main+0xb6e>
		}
		Txcode[22] = 'd';
 8005b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8005d00 <main+0xd38>)
 8005b4e:	2264      	movs	r2, #100	@ 0x64
 8005b50:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 8005b52:	4b6b      	ldr	r3, [pc, #428]	@ (8005d00 <main+0xd38>)
 8005b54:	2272      	movs	r2, #114	@ 0x72
 8005b56:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 8005b58:	4b69      	ldr	r3, [pc, #420]	@ (8005d00 <main+0xd38>)
 8005b5a:	226f      	movs	r2, #111	@ 0x6f
 8005b5c:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 8005b5e:	4b68      	ldr	r3, [pc, #416]	@ (8005d00 <main+0xd38>)
 8005b60:	226e      	movs	r2, #110	@ 0x6e
 8005b62:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 8005b64:	4b66      	ldr	r3, [pc, #408]	@ (8005d00 <main+0xd38>)
 8005b66:	2232      	movs	r2, #50	@ 0x32
 8005b68:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 8005b6a:	4b65      	ldr	r3, [pc, #404]	@ (8005d00 <main+0xd38>)
 8005b6c:	2263      	movs	r2, #99	@ 0x63
 8005b6e:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 8005b70:	4b63      	ldr	r3, [pc, #396]	@ (8005d00 <main+0xd38>)
 8005b72:	2231      	movs	r2, #49	@ 0x31
 8005b74:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 8005b76:	4b62      	ldr	r3, [pc, #392]	@ (8005d00 <main+0xd38>)
 8005b78:	227a      	movs	r2, #122	@ 0x7a
 8005b7a:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 8005b7c:	4b60      	ldr	r3, [pc, #384]	@ (8005d00 <main+0xd38>)
 8005b7e:	2261      	movs	r2, #97	@ 0x61
 8005b80:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005b82:	4b5f      	ldr	r3, [pc, #380]	@ (8005d00 <main+0xd38>)
 8005b84:	2237      	movs	r2, #55	@ 0x37
 8005b86:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 8005b88:	485d      	ldr	r0, [pc, #372]	@ (8005d00 <main+0xd38>)
 8005b8a:	f7fc fcff 	bl	800258c <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005b8e:	f7fc fd0b 	bl	80025a8 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005b92:	f7fc fa11 	bl	8001fb8 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005b9a:	e022      	b.n	8005be2 <main+0xc1a>
			LED_G_1;
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ba2:	4855      	ldr	r0, [pc, #340]	@ (8005cf8 <main+0xd30>)
 8005ba4:	f008 fe2e 	bl	800e804 <HAL_GPIO_WritePin>
			LED_Y_1;
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005bae:	484e      	ldr	r0, [pc, #312]	@ (8005ce8 <main+0xd20>)
 8005bb0:	f008 fe28 	bl	800e804 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	f003 fce9 	bl	800958c <HAL_Delay>
			LED_G_0;
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bc0:	484d      	ldr	r0, [pc, #308]	@ (8005cf8 <main+0xd30>)
 8005bc2:	f008 fe1f 	bl	800e804 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005bcc:	4846      	ldr	r0, [pc, #280]	@ (8005ce8 <main+0xd20>)
 8005bce:	f008 fe19 	bl	800e804 <HAL_GPIO_WritePin>

			cunter++;
 8005bd2:	7cfb      	ldrb	r3, [r7, #19]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	74fb      	strb	r3, [r7, #19]
			if(cunter == 200){
 8005bd8:	7cfb      	ldrb	r3, [r7, #19]
 8005bda:	2bc8      	cmp	r3, #200	@ 0xc8
 8005bdc:	d101      	bne.n	8005be2 <main+0xc1a>
				NVIC_SystemReset();
 8005bde:	f7ff f9dd 	bl	8004f9c <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005be2:	2000      	movs	r0, #0
 8005be4:	f7fc fd24 	bl	8002630 <nRF24_IsBitSetInFifoStatus>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d0d6      	beq.n	8005b9c <main+0xbd4>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 8005bee:	4845      	ldr	r0, [pc, #276]	@ (8005d04 <main+0xd3c>)
 8005bf0:	f7fc fd02 	bl	80025f8 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2108      	movs	r1, #8
 8005bf8:	483f      	ldr	r0, [pc, #252]	@ (8005cf8 <main+0xd30>)
 8005bfa:	f008 fe03 	bl	800e804 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005bfe:	230c      	movs	r3, #12
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e00b      	b.n	8005c1c <main+0xc54>
			Rxcode[i] = RxData[i];
 8005c04:	4a3f      	ldr	r2, [pc, #252]	@ (8005d04 <main+0xd3c>)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	7819      	ldrb	r1, [r3, #0]
 8005c0c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d08 <main+0xd40>)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	460a      	mov	r2, r1
 8005c14:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b15      	cmp	r3, #21
 8005c20:	ddf0      	ble.n	8005c04 <main+0xc3c>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 8005c22:	483a      	ldr	r0, [pc, #232]	@ (8005d0c <main+0xd44>)
 8005c24:	f7fb f98e 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c2e:	4830      	ldr	r0, [pc, #192]	@ (8005cf0 <main+0xd28>)
 8005c30:	f008 fde8 	bl	800e804 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005c34:	2201      	movs	r2, #1
 8005c36:	4936      	ldr	r1, [pc, #216]	@ (8005d10 <main+0xd48>)
 8005c38:	4836      	ldr	r0, [pc, #216]	@ (8005d14 <main+0xd4c>)
 8005c3a:	f012 faad 	bl	8018198 <HAL_UART_Receive_IT>
		LED_7_0;
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c44:	482a      	ldr	r0, [pc, #168]	@ (8005cf0 <main+0xd28>)
 8005c46:	f008 fddd 	bl	800e804 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005c4a:	4833      	ldr	r0, [pc, #204]	@ (8005d18 <main+0xd50>)
 8005c4c:	f010 fc48 	bl	80164e0 <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005c50:	4b28      	ldr	r3, [pc, #160]	@ (8005cf4 <main+0xd2c>)
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 fca2 	bl	80075a0 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005c5c:	4b25      	ldr	r3, [pc, #148]	@ (8005cf4 <main+0xd2c>)
 8005c5e:	8a9b      	ldrh	r3, [r3, #20]
 8005c60:	2b07      	cmp	r3, #7
 8005c62:	d107      	bne.n	8005c74 <main+0xcac>
	  	{
	  		LED_R_1;
 8005c64:	2201      	movs	r2, #1
 8005c66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c6a:	481f      	ldr	r0, [pc, #124]	@ (8005ce8 <main+0xd20>)
 8005c6c:	f008 fdca 	bl	800e804 <HAL_GPIO_WritePin>
	  		while(1){
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <main+0xca8>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c74:	4b1f      	ldr	r3, [pc, #124]	@ (8005cf4 <main+0xd2c>)
 8005c76:	8a9b      	ldrh	r3, [r3, #20]
 8005c78:	2b09      	cmp	r3, #9
 8005c7a:	d107      	bne.n	8005c8c <main+0xcc4>
	  		LED_R_1;
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c82:	4819      	ldr	r0, [pc, #100]	@ (8005ce8 <main+0xd20>)
 8005c84:	f008 fdbe 	bl	800e804 <HAL_GPIO_WritePin>
	  		while(1){
 8005c88:	bf00      	nop
 8005c8a:	e7fd      	b.n	8005c88 <main+0xcc0>
	  		}
	  	}



		STARTUP = 0;
 8005c8c:	4b23      	ldr	r3, [pc, #140]	@ (8005d1c <main+0xd54>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005c92:	4b18      	ldr	r3, [pc, #96]	@ (8005cf4 <main+0xd2c>)
 8005c94:	8a9b      	ldrh	r3, [r3, #20]
 8005c96:	2b07      	cmp	r3, #7
 8005c98:	d10a      	bne.n	8005cb0 <main+0xce8>
	  			LED_R_1;
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ca0:	4811      	ldr	r0, [pc, #68]	@ (8005ce8 <main+0xd20>)
 8005ca2:	f008 fdaf 	bl	800e804 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 8005ca6:	4b13      	ldr	r3, [pc, #76]	@ (8005cf4 <main+0xd2c>)
 8005ca8:	885b      	ldrh	r3, [r3, #2]
 8005caa:	b21a      	sxth	r2, r3
 8005cac:	4b1c      	ldr	r3, [pc, #112]	@ (8005d20 <main+0xd58>)
 8005cae:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005cb0:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <main+0xd2c>)
 8005cb2:	8a9b      	ldrh	r3, [r3, #20]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d103      	bne.n	8005cc0 <main+0xcf8>
	  			thrust_limit = 10000;
 8005cb8:	4b19      	ldr	r3, [pc, #100]	@ (8005d20 <main+0xd58>)
 8005cba:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005cbe:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf4 <main+0xd2c>)
 8005cc2:	8a9b      	ldrh	r3, [r3, #20]
 8005cc4:	2b09      	cmp	r3, #9
 8005cc6:	d13a      	bne.n	8005d3e <main+0xd76>
	  			ESC_POWER_1;
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005cce:	4815      	ldr	r0, [pc, #84]	@ (8005d24 <main+0xd5c>)
 8005cd0:	f008 fd98 	bl	800e804 <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005cda:	4803      	ldr	r0, [pc, #12]	@ (8005ce8 <main+0xd20>)
 8005cdc:	f008 fd92 	bl	800e804 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005ce0:	4811      	ldr	r0, [pc, #68]	@ (8005d28 <main+0xd60>)
 8005ce2:	f018 f827 	bl	801dd34 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005ce6:	e026      	b.n	8005d36 <main+0xd6e>
 8005ce8:	58020400 	.word	0x58020400
 8005cec:	0000006c 	.word	0x0000006c
 8005cf0:	58020000 	.word	0x58020000
 8005cf4:	00000184 	.word	0x00000184
 8005cf8:	58021000 	.word	0x58021000
 8005cfc:	24000274 	.word	0x24000274
 8005d00:	00000120 	.word	0x00000120
 8005d04:	00000100 	.word	0x00000100
 8005d08:	00000160 	.word	0x00000160
 8005d0c:	24000418 	.word	0x24000418
 8005d10:	000041e8 	.word	0x000041e8
 8005d14:	240004b0 	.word	0x240004b0
 8005d18:	240003cc 	.word	0x240003cc
 8005d1c:	00000080 	.word	0x00000080
 8005d20:	0000406a 	.word	0x0000406a
 8005d24:	58021800 	.word	0x58021800
 8005d28:	24001ef0 	.word	0x24001ef0
	  				HAL_Delay(10);
 8005d2c:	200a      	movs	r0, #10
 8005d2e:	f003 fc2d 	bl	800958c <HAL_Delay>
	  				Get_batteryvalue();
 8005d32:	f7fe fa41 	bl	80041b8 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005d36:	4b61      	ldr	r3, [pc, #388]	@ (8005ebc <main+0xef4>)
 8005d38:	8a9b      	ldrh	r3, [r3, #20]
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	d0f6      	beq.n	8005d2c <main+0xd64>
	  			}
	  		}

	  		if(commandready == 1){
 8005d3e:	4b60      	ldr	r3, [pc, #384]	@ (8005ec0 <main+0xef8>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d159      	bne.n	8005dfa <main+0xe32>
	  			LED_7_1;
 8005d46:	2201      	movs	r2, #1
 8005d48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d4c:	485d      	ldr	r0, [pc, #372]	@ (8005ec4 <main+0xefc>)
 8005d4e:	f008 fd59 	bl	800e804 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005d52:	f7fc fcff 	bl	8002754 <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005d56:	495c      	ldr	r1, [pc, #368]	@ (8005ec8 <main+0xf00>)
 8005d58:	485c      	ldr	r0, [pc, #368]	@ (8005ecc <main+0xf04>)
 8005d5a:	f7fc fd49 	bl	80027f0 <executecommand>
	  			LED_7_0;
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d64:	4857      	ldr	r0, [pc, #348]	@ (8005ec4 <main+0xefc>)
 8005d66:	f008 fd4d 	bl	800e804 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005d6a:	4b59      	ldr	r3, [pc, #356]	@ (8005ed0 <main+0xf08>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a59      	ldr	r2, [pc, #356]	@ (8005ed4 <main+0xf0c>)
 8005d70:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005d72:	4b59      	ldr	r3, [pc, #356]	@ (8005ed8 <main+0xf10>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a57      	ldr	r2, [pc, #348]	@ (8005ed4 <main+0xf0c>)
 8005d78:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005d7a:	4b58      	ldr	r3, [pc, #352]	@ (8005edc <main+0xf14>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a55      	ldr	r2, [pc, #340]	@ (8005ed4 <main+0xf0c>)
 8005d80:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005d82:	4b57      	ldr	r3, [pc, #348]	@ (8005ee0 <main+0xf18>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a57      	ldr	r2, [pc, #348]	@ (8005ee4 <main+0xf1c>)
 8005d88:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005d8a:	4b57      	ldr	r3, [pc, #348]	@ (8005ee8 <main+0xf20>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a55      	ldr	r2, [pc, #340]	@ (8005ee4 <main+0xf1c>)
 8005d90:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005d92:	4b56      	ldr	r3, [pc, #344]	@ (8005eec <main+0xf24>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a53      	ldr	r2, [pc, #332]	@ (8005ee4 <main+0xf1c>)
 8005d98:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005d9a:	4b55      	ldr	r3, [pc, #340]	@ (8005ef0 <main+0xf28>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a55      	ldr	r2, [pc, #340]	@ (8005ef4 <main+0xf2c>)
 8005da0:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005da2:	4b55      	ldr	r3, [pc, #340]	@ (8005ef8 <main+0xf30>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a53      	ldr	r2, [pc, #332]	@ (8005ef4 <main+0xf2c>)
 8005da8:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005daa:	4b54      	ldr	r3, [pc, #336]	@ (8005efc <main+0xf34>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a51      	ldr	r2, [pc, #324]	@ (8005ef4 <main+0xf2c>)
 8005db0:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005db2:	4b53      	ldr	r3, [pc, #332]	@ (8005f00 <main+0xf38>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a53      	ldr	r2, [pc, #332]	@ (8005f04 <main+0xf3c>)
 8005db8:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005dba:	4b53      	ldr	r3, [pc, #332]	@ (8005f08 <main+0xf40>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a51      	ldr	r2, [pc, #324]	@ (8005f04 <main+0xf3c>)
 8005dc0:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005dc2:	4b52      	ldr	r3, [pc, #328]	@ (8005f0c <main+0xf44>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a4f      	ldr	r2, [pc, #316]	@ (8005f04 <main+0xf3c>)
 8005dc8:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005dca:	4b51      	ldr	r3, [pc, #324]	@ (8005f10 <main+0xf48>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a51      	ldr	r2, [pc, #324]	@ (8005f14 <main+0xf4c>)
 8005dd0:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005dd2:	4b51      	ldr	r3, [pc, #324]	@ (8005f18 <main+0xf50>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4f      	ldr	r2, [pc, #316]	@ (8005f14 <main+0xf4c>)
 8005dd8:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005dda:	4b50      	ldr	r3, [pc, #320]	@ (8005f1c <main+0xf54>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a4d      	ldr	r2, [pc, #308]	@ (8005f14 <main+0xf4c>)
 8005de0:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005de2:	4b4f      	ldr	r3, [pc, #316]	@ (8005f20 <main+0xf58>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a4f      	ldr	r2, [pc, #316]	@ (8005f24 <main+0xf5c>)
 8005de8:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005dea:	4b4f      	ldr	r3, [pc, #316]	@ (8005f28 <main+0xf60>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a4d      	ldr	r2, [pc, #308]	@ (8005f24 <main+0xf5c>)
 8005df0:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005df2:	4b4e      	ldr	r3, [pc, #312]	@ (8005f2c <main+0xf64>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a4b      	ldr	r2, [pc, #300]	@ (8005f24 <main+0xf5c>)
 8005df8:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8005f30 <main+0xf68>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d14d      	bne.n	8005e9e <main+0xed6>
 8005e02:	4b4c      	ldr	r3, [pc, #304]	@ (8005f34 <main+0xf6c>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d149      	bne.n	8005e9e <main+0xed6>
 8005e0a:	4b4b      	ldr	r3, [pc, #300]	@ (8005f38 <main+0xf70>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d145      	bne.n	8005e9e <main+0xed6>
	  			TIM_inte_SD = 0;
 8005e12:	4b47      	ldr	r3, [pc, #284]	@ (8005f30 <main+0xf68>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005e18:	4b48      	ldr	r3, [pc, #288]	@ (8005f3c <main+0xf74>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 fd55 	bl	80078cc <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005e22:	4b46      	ldr	r3, [pc, #280]	@ (8005f3c <main+0xf74>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d12b      	bne.n	8005e86 <main+0xebe>
	  				SD_In_Use = 1;
 8005e2e:	4b44      	ldr	r3, [pc, #272]	@ (8005f40 <main+0xf78>)
 8005e30:	2201      	movs	r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005e34:	2201      	movs	r2, #1
 8005e36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e3a:	4842      	ldr	r0, [pc, #264]	@ (8005f44 <main+0xf7c>)
 8005e3c:	f008 fce2 	bl	800e804 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005e40:	2232      	movs	r2, #50	@ 0x32
 8005e42:	4941      	ldr	r1, [pc, #260]	@ (8005f48 <main+0xf80>)
 8005e44:	4841      	ldr	r0, [pc, #260]	@ (8005f4c <main+0xf84>)
 8005e46:	f017 fb9b 	bl	801d580 <f_open>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4b39      	ldr	r3, [pc, #228]	@ (8005f34 <main+0xf6c>)
 8005e50:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005e52:	4b3f      	ldr	r3, [pc, #252]	@ (8005f50 <main+0xf88>)
 8005e54:	4a3f      	ldr	r2, [pc, #252]	@ (8005f54 <main+0xf8c>)
 8005e56:	4940      	ldr	r1, [pc, #256]	@ (8005f58 <main+0xf90>)
 8005e58:	483c      	ldr	r0, [pc, #240]	@ (8005f4c <main+0xf84>)
 8005e5a:	f017 fd59 	bl	801d910 <f_write>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	461a      	mov	r2, r3
 8005e62:	4b34      	ldr	r3, [pc, #208]	@ (8005f34 <main+0xf6c>)
 8005e64:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005e66:	4839      	ldr	r0, [pc, #228]	@ (8005f4c <main+0xf84>)
 8005e68:	f017 ff64 	bl	801dd34 <f_close>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	461a      	mov	r2, r3
 8005e70:	4b30      	ldr	r3, [pc, #192]	@ (8005f34 <main+0xf6c>)
 8005e72:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005e74:	2200      	movs	r2, #0
 8005e76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e7a:	4832      	ldr	r0, [pc, #200]	@ (8005f44 <main+0xf7c>)
 8005e7c:	f008 fcc2 	bl	800e804 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005e80:	4b2f      	ldr	r3, [pc, #188]	@ (8005f40 <main+0xf78>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 8005e86:	4b2d      	ldr	r3, [pc, #180]	@ (8005f3c <main+0xf74>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e8e:	d203      	bcs.n	8005e98 <main+0xed0>
 8005e90:	4b2a      	ldr	r3, [pc, #168]	@ (8005f3c <main+0xf74>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3301      	adds	r3, #1
 8005e96:	e000      	b.n	8005e9a <main+0xed2>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4a28      	ldr	r2, [pc, #160]	@ (8005f3c <main+0xf74>)
 8005e9c:	6013      	str	r3, [r2, #0]
	  		}

	  		if(TIM_inte == 1){
 8005e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8005f5c <main+0xf94>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	f47f aef5 	bne.w	8005c92 <main+0xcca>
	  			LED_R_0;
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005eae:	482c      	ldr	r0, [pc, #176]	@ (8005f60 <main+0xf98>)
 8005eb0:	f008 fca8 	bl	800e804 <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 8005eb4:	4b29      	ldr	r3, [pc, #164]	@ (8005f5c <main+0xf94>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005eba:	e6ea      	b.n	8005c92 <main+0xcca>
 8005ebc:	00000184 	.word	0x00000184
 8005ec0:	000041e6 	.word	0x000041e6
 8005ec4:	58020000 	.word	0x58020000
 8005ec8:	000041c8 	.word	0x000041c8
 8005ecc:	000041d8 	.word	0x000041d8
 8005ed0:	000040f4 	.word	0x000040f4
 8005ed4:	00004118 	.word	0x00004118
 8005ed8:	00004100 	.word	0x00004100
 8005edc:	0000410c 	.word	0x0000410c
 8005ee0:	00004154 	.word	0x00004154
 8005ee4:	00004178 	.word	0x00004178
 8005ee8:	00004160 	.word	0x00004160
 8005eec:	0000416c 	.word	0x0000416c
 8005ef0:	000040f8 	.word	0x000040f8
 8005ef4:	0000412c 	.word	0x0000412c
 8005ef8:	00004104 	.word	0x00004104
 8005efc:	00004110 	.word	0x00004110
 8005f00:	00004158 	.word	0x00004158
 8005f04:	0000418c 	.word	0x0000418c
 8005f08:	00004164 	.word	0x00004164
 8005f0c:	00004170 	.word	0x00004170
 8005f10:	000040fc 	.word	0x000040fc
 8005f14:	00004140 	.word	0x00004140
 8005f18:	00004108 	.word	0x00004108
 8005f1c:	00004114 	.word	0x00004114
 8005f20:	0000415c 	.word	0x0000415c
 8005f24:	000041a0 	.word	0x000041a0
 8005f28:	00004168 	.word	0x00004168
 8005f2c:	00004174 	.word	0x00004174
 8005f30:	00000078 	.word	0x00000078
 8005f34:	24001eec 	.word	0x24001eec
 8005f38:	000041f4 	.word	0x000041f4
 8005f3c:	000041ec 	.word	0x000041ec
 8005f40:	000041f0 	.word	0x000041f0
 8005f44:	58020c00 	.word	0x58020c00
 8005f48:	0801eb80 	.word	0x0801eb80
 8005f4c:	24001ef0 	.word	0x24001ef0
 8005f50:	24002f24 	.word	0x24002f24
 8005f54:	0001f7e8 	.word	0x0001f7e8
 8005f58:	24002f28 	.word	0x24002f28
 8005f5c:	0000007c 	.word	0x0000007c
 8005f60:	58020400 	.word	0x58020400

08005f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b09c      	sub	sp, #112	@ 0x70
 8005f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f6e:	224c      	movs	r2, #76	@ 0x4c
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f018 f8d6 	bl	801e124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f78:	1d3b      	adds	r3, r7, #4
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f018 f8d0 	bl	801e124 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005f84:	2002      	movs	r0, #2
 8005f86:	f00b f8ef 	bl	8011168 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8006044 <SystemClock_Config+0xe0>)
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	4a2c      	ldr	r2, [pc, #176]	@ (8006044 <SystemClock_Config+0xe0>)
 8005f94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005f98:	6193      	str	r3, [r2, #24]
 8005f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8006044 <SystemClock_Config+0xe0>)
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005fa6:	bf00      	nop
 8005fa8:	4b26      	ldr	r3, [pc, #152]	@ (8006044 <SystemClock_Config+0xe0>)
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb4:	d1f8      	bne.n	8005fa8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005fb6:	2311      	movs	r3, #17
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005fba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005fc0:	2380      	movs	r3, #128	@ 0x80
 8005fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005fd4:	2344      	movs	r3, #68	@ 0x44
 8005fd6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005fe4:	230c      	movs	r3, #12
 8005fe6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005fec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f00b f8f0 	bl	80111dc <HAL_RCC_OscConfig>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8006002:	f001 ff59 	bl	8007eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006006:	233f      	movs	r3, #63	@ 0x3f
 8006008:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800600a:	2303      	movs	r3, #3
 800600c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006012:	2308      	movs	r3, #8
 8006014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006016:	2340      	movs	r3, #64	@ 0x40
 8006018:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800601a:	2340      	movs	r3, #64	@ 0x40
 800601c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800601e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006022:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006024:	2340      	movs	r3, #64	@ 0x40
 8006026:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006028:	1d3b      	adds	r3, r7, #4
 800602a:	2103      	movs	r1, #3
 800602c:	4618      	mov	r0, r3
 800602e:	f00b fcaf 	bl	8011990 <HAL_RCC_ClockConfig>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8006038:	f001 ff3e 	bl	8007eb8 <Error_Handler>
  }
}
 800603c:	bf00      	nop
 800603e:	3770      	adds	r7, #112	@ 0x70
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	58024800 	.word	0x58024800

08006048 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b0ae      	sub	sp, #184	@ 0xb8
 800604c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800604e:	463b      	mov	r3, r7
 8006050:	22b8      	movs	r2, #184	@ 0xb8
 8006052:	2100      	movs	r1, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f018 f865 	bl	801e124 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 800605a:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8006066:	2316      	movs	r3, #22
 8006068:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 800606a:	23c0      	movs	r3, #192	@ 0xc0
 800606c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800606e:	2303      	movs	r3, #3
 8006070:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8006072:	2302      	movs	r3, #2
 8006074:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006076:	2302      	movs	r3, #2
 8006078:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800607e:	2320      	movs	r3, #32
 8006080:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8006086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800608a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800608c:	2300      	movs	r3, #0
 800608e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006092:	463b      	mov	r3, r7
 8006094:	4618      	mov	r0, r3
 8006096:	f00c f807 	bl	80120a8 <HAL_RCCEx_PeriphCLKConfig>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80060a0:	f001 ff0a 	bl	8007eb8 <Error_Handler>
  }
}
 80060a4:	bf00      	nop
 80060a6:	37b8      	adds	r7, #184	@ 0xb8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a89      	ldr	r2, [pc, #548]	@ (80062dc <HAL_TIM_PeriodElapsedCallback+0x230>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	f040 810b 	bne.w	80062d4 <HAL_TIM_PeriodElapsedCallback+0x228>
	{
		TIM_inte_SD = 1;
 80060be:	4b88      	ldr	r3, [pc, #544]	@ (80062e0 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80060c0:	2201      	movs	r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 80060c4:	4b87      	ldr	r3, [pc, #540]	@ (80062e4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80060c6:	2201      	movs	r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 80060ca:	4b87      	ldr	r3, [pc, #540]	@ (80062e8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3301      	adds	r3, #1
 80060d0:	4a85      	ldr	r2, [pc, #532]	@ (80062e8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80060d2:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 100ms
 80060d4:	4b85      	ldr	r3, [pc, #532]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d113      	bne.n	8006104 <HAL_TIM_PeriodElapsedCallback+0x58>
			LED_5_1;
 80060dc:	2201      	movs	r2, #1
 80060de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060e2:	4883      	ldr	r0, [pc, #524]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060e4:	f008 fb8e 	bl	800e804 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 80060e8:	f7fa fbc2 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 80060ec:	2200      	movs	r2, #0
 80060ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060f2:	487f      	ldr	r0, [pc, #508]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80060f4:	f008 fb86 	bl	800e804 <HAL_GPIO_WritePin>


			RGB_LED_For_BAT(MYDRON.batterysize);
 80060f8:	4b7e      	ldr	r3, [pc, #504]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 fa4e 	bl	80075a0 <RGB_LED_For_BAT>
		}

		if(i == 10){//2
 8006104:	4b79      	ldr	r3, [pc, #484]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b0a      	cmp	r3, #10
 800610a:	d10d      	bne.n	8006128 <HAL_TIM_PeriodElapsedCallback+0x7c>
			LED_5_1;
 800610c:	2201      	movs	r2, #1
 800610e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006112:	4877      	ldr	r0, [pc, #476]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006114:	f008 fb76 	bl	800e804 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 8006118:	f7fa fb94 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 800611c:	2200      	movs	r2, #0
 800611e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006122:	4873      	ldr	r0, [pc, #460]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006124:	f008 fb6e 	bl	800e804 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 8006128:	4b70      	ldr	r3, [pc, #448]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b24      	cmp	r3, #36	@ 0x24
 800612e:	d10d      	bne.n	800614c <HAL_TIM_PeriodElapsedCallback+0xa0>
			LED_5_1;
 8006130:	2201      	movs	r2, #1
 8006132:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006136:	486e      	ldr	r0, [pc, #440]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006138:	f008 fb64 	bl	800e804 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 800613c:	f7fa ffcc 	bl	80010d8 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8006140:	2200      	movs	r2, #0
 8006142:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006146:	486a      	ldr	r0, [pc, #424]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006148:	f008 fb5c 	bl	800e804 <HAL_GPIO_WritePin>
		}

		if(i == 38){
 800614c:	4b67      	ldr	r3, [pc, #412]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b26      	cmp	r3, #38	@ 0x26
 8006152:	d10e      	bne.n	8006172 <HAL_TIM_PeriodElapsedCallback+0xc6>
			LED_6_1;
 8006154:	2201      	movs	r2, #1
 8006156:	2108      	movs	r1, #8
 8006158:	4867      	ldr	r0, [pc, #412]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800615a:	f008 fb53 	bl	800e804 <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 800615e:	f7fb ff57 	bl	8002010 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 8006162:	4b66      	ldr	r3, [pc, #408]	@ (80062fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006164:	2200      	movs	r2, #0
 8006166:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 8006168:	2200      	movs	r2, #0
 800616a:	2108      	movs	r1, #8
 800616c:	4862      	ldr	r0, [pc, #392]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800616e:	f008 fb49 	bl	800e804 <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 8006172:	4b5e      	ldr	r3, [pc, #376]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b28      	cmp	r3, #40	@ 0x28
 8006178:	d14c      	bne.n	8006214 <HAL_TIM_PeriodElapsedCallback+0x168>
			ampritude = startpres - pres;
 800617a:	4b61      	ldr	r3, [pc, #388]	@ (8006300 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800617c:	ed93 7a00 	vldr	s14, [r3]
 8006180:	4b60      	ldr	r3, [pc, #384]	@ (8006304 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8006182:	edd3 7a00 	vldr	s15, [r3]
 8006186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800618a:	4b5f      	ldr	r3, [pc, #380]	@ (8006308 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800618c:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 8006190:	f7fa fe30 	bl	8000df4 <BMP180_GET_height>
 8006194:	eef0 7a40 	vmov.f32	s15, s0
 8006198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800619c:	ee17 3a90 	vmov	r3, s15
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	b21a      	sxth	r2, r3
 80061a4:	4b53      	ldr	r3, [pc, #332]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80061a6:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 80061a8:	4b52      	ldr	r3, [pc, #328]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80061aa:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80061ae:	2303      	movs	r3, #3
 80061b0:	2200      	movs	r2, #0
 80061b2:	4956      	ldr	r1, [pc, #344]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061b4:	f001 f915 	bl	80073e2 <convert_value_to_array>

			Get_batteryvalue();
 80061b8:	f7fd fffe 	bl	80041b8 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 80061bc:	4b4d      	ldr	r3, [pc, #308]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b218      	sxth	r0, r3
 80061c2:	2306      	movs	r3, #6
 80061c4:	2203      	movs	r2, #3
 80061c6:	4951      	ldr	r1, [pc, #324]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061c8:	f001 f90b 	bl	80073e2 <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	e00b      	b.n	80061ea <HAL_TIM_PeriodElapsedCallback+0x13e>
				TxData[22+i] = Txcode[22+i];
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f103 0216 	add.w	r2, r3, #22
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3316      	adds	r3, #22
 80061dc:	494c      	ldr	r1, [pc, #304]	@ (8006310 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80061de:	5c89      	ldrb	r1, [r1, r2]
 80061e0:	4a4a      	ldr	r2, [pc, #296]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061e2:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3301      	adds	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b09      	cmp	r3, #9
 80061ee:	ddf0      	ble.n	80061d2 <HAL_TIM_PeriodElapsedCallback+0x126>
			}
			LED_6_1;
 80061f0:	2201      	movs	r2, #1
 80061f2:	2108      	movs	r1, #8
 80061f4:	4840      	ldr	r0, [pc, #256]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80061f6:	f008 fb05 	bl	800e804 <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 80061fa:	4844      	ldr	r0, [pc, #272]	@ (800630c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80061fc:	f7fc f9c6 	bl	800258c <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 8006200:	2201      	movs	r2, #1
 8006202:	2140      	movs	r1, #64	@ 0x40
 8006204:	4843      	ldr	r0, [pc, #268]	@ (8006314 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006206:	f008 fafd 	bl	800e804 <HAL_GPIO_WritePin>
			LED_6_0;
 800620a:	2200      	movs	r2, #0
 800620c:	2108      	movs	r1, #8
 800620e:	483a      	ldr	r0, [pc, #232]	@ (80062f8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006210:	f008 faf8 	bl	800e804 <HAL_GPIO_WritePin>
		}
		if(i == 41){
 8006214:	4b35      	ldr	r3, [pc, #212]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b29      	cmp	r3, #41	@ 0x29
 800621a:	d104      	bne.n	8006226 <HAL_TIM_PeriodElapsedCallback+0x17a>
			NRF24_CE_LOW;
 800621c:	2200      	movs	r2, #0
 800621e:	2140      	movs	r1, #64	@ 0x40
 8006220:	483c      	ldr	r0, [pc, #240]	@ (8006314 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006222:	f008 faef 	bl	800e804 <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 8006226:	4b31      	ldr	r3, [pc, #196]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b29      	cmp	r3, #41	@ 0x29
 800622c:	d916      	bls.n	800625c <HAL_TIM_PeriodElapsedCallback+0x1b0>
			if(nRF24_Rx_Mode != 1){
 800622e:	4b33      	ldr	r3, [pc, #204]	@ (80062fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d012      	beq.n	800625c <HAL_TIM_PeriodElapsedCallback+0x1b0>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 8006236:	f7fb ff6c 	bl	8002112 <nRF24_ReadStatus>
 800623a:	4603      	mov	r3, r0
 800623c:	f003 0310 	and.w	r3, r3, #16
 8006240:	2b00      	cmp	r3, #0
 8006242:	d106      	bne.n	8006252 <HAL_TIM_PeriodElapsedCallback+0x1a6>
 8006244:	f7fb ff65 	bl	8002112 <nRF24_ReadStatus>
 8006248:	4603      	mov	r3, r0
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <HAL_TIM_PeriodElapsedCallback+0x1b0>
					nRF24_RX_Mode();
 8006252:	f7fb feb1 	bl	8001fb8 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 8006256:	4b29      	ldr	r3, [pc, #164]	@ (80062fc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006258:	2201      	movs	r2, #1
 800625a:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 800625c:	2201      	movs	r2, #1
 800625e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006262:	4823      	ldr	r0, [pc, #140]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006264:	f008 face 	bl	800e804 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8006268:	f7fb facc 	bl	8001804 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 800626c:	2200      	movs	r2, #0
 800626e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006272:	481f      	ldr	r0, [pc, #124]	@ (80062f0 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006274:	f008 fac6 	bl	800e804 <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 8006278:	4b1c      	ldr	r3, [pc, #112]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b64      	cmp	r3, #100	@ 0x64
 800627e:	d003      	beq.n	8006288 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8006280:	4b1a      	ldr	r3, [pc, #104]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3301      	adds	r3, #1
 8006286:	e000      	b.n	800628a <HAL_TIM_PeriodElapsedCallback+0x1de>
 8006288:	2300      	movs	r3, #0
 800628a:	4a18      	ldr	r2, [pc, #96]	@ (80062ec <HAL_TIM_PeriodElapsedCallback+0x240>)
 800628c:	6013      	str	r3, [r2, #0]

		if(NRF_TIM_Inte >= 1000){
 800628e:	4b16      	ldr	r3, [pc, #88]	@ (80062e8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006296:	d308      	bcc.n	80062aa <HAL_TIM_PeriodElapsedCallback+0x1fe>
			LED_R_1;
 8006298:	2201      	movs	r2, #1
 800629a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800629e:	481d      	ldr	r0, [pc, #116]	@ (8006314 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80062a0:	f008 fab0 	bl	800e804 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 80062a4:	4b13      	ldr	r3, [pc, #76]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80062a6:	2202      	movs	r2, #2
 80062a8:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 80062aa:	4b12      	ldr	r3, [pc, #72]	@ (80062f4 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80062ac:	8a5b      	ldrh	r3, [r3, #18]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d110      	bne.n	80062d4 <HAL_TIM_PeriodElapsedCallback+0x228>
			wanted_rool = 0;
 80062b2:	4b19      	ldr	r3, [pc, #100]	@ (8006318 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 80062ba:	4b18      	ldr	r3, [pc, #96]	@ (800631c <HAL_TIM_PeriodElapsedCallback+0x270>)
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 80062c2:	4b17      	ldr	r3, [pc, #92]	@ (8006320 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 80062ca:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80062ce:	b21a      	sxth	r2, r3
 80062d0:	4b14      	ldr	r3, [pc, #80]	@ (8006324 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80062d2:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	240003cc 	.word	0x240003cc
 80062e0:	00000078 	.word	0x00000078
 80062e4:	0000007c 	.word	0x0000007c
 80062e8:	00000084 	.word	0x00000084
 80062ec:	00004200 	.word	0x00004200
 80062f0:	58020000 	.word	0x58020000
 80062f4:	00000184 	.word	0x00000184
 80062f8:	58021000 	.word	0x58021000
 80062fc:	00000180 	.word	0x00000180
 8006300:	000000f0 	.word	0x000000f0
 8006304:	000000ec 	.word	0x000000ec
 8006308:	000000f4 	.word	0x000000f4
 800630c:	00000140 	.word	0x00000140
 8006310:	00000120 	.word	0x00000120
 8006314:	58020400 	.word	0x58020400
 8006318:	0000407c 	.word	0x0000407c
 800631c:	00004078 	.word	0x00004078
 8006320:	00004080 	.word	0x00004080
 8006324:	00004068 	.word	0x00004068

08006328 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8006332:	88fb      	ldrh	r3, [r7, #6]
 8006334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006338:	f040 812c 	bne.w	8006594 <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 800633c:	4b97      	ldr	r3, [pc, #604]	@ (800659c <HAL_GPIO_EXTI_Callback+0x274>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f040 8127 	bne.w	8006594 <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 8006346:	2201      	movs	r2, #1
 8006348:	2108      	movs	r1, #8
 800634a:	4895      	ldr	r0, [pc, #596]	@ (80065a0 <HAL_GPIO_EXTI_Callback+0x278>)
 800634c:	f008 fa5a 	bl	800e804 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 8006350:	4894      	ldr	r0, [pc, #592]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006352:	f7fc f951 	bl	80025f8 <nRF24_ReadRXPaylaod>
			LED_6_0;
 8006356:	2200      	movs	r2, #0
 8006358:	2108      	movs	r1, #8
 800635a:	4891      	ldr	r0, [pc, #580]	@ (80065a0 <HAL_GPIO_EXTI_Callback+0x278>)
 800635c:	f008 fa52 	bl	800e804 <HAL_GPIO_WritePin>


			LED_Y_1;
 8006360:	2201      	movs	r2, #1
 8006362:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006366:	4890      	ldr	r0, [pc, #576]	@ (80065a8 <HAL_GPIO_EXTI_Callback+0x280>)
 8006368:	f008 fa4c 	bl	800e804 <HAL_GPIO_WritePin>

			loopnum = 0;
 800636c:	4b8f      	ldr	r3, [pc, #572]	@ (80065ac <HAL_GPIO_EXTI_Callback+0x284>)
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	e011      	b.n	800639c <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	330c      	adds	r3, #12
 800637c:	4a89      	ldr	r2, [pc, #548]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x27c>)
 800637e:	5cd2      	ldrb	r2, [r2, r3]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	330c      	adds	r3, #12
 8006384:	498a      	ldr	r1, [pc, #552]	@ (80065b0 <HAL_GPIO_EXTI_Callback+0x288>)
 8006386:	5ccb      	ldrb	r3, [r1, r3]
 8006388:	429a      	cmp	r2, r3
 800638a:	d104      	bne.n	8006396 <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 800638c:	4b87      	ldr	r3, [pc, #540]	@ (80065ac <HAL_GPIO_EXTI_Callback+0x284>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3301      	adds	r3, #1
 8006392:	4a86      	ldr	r2, [pc, #536]	@ (80065ac <HAL_GPIO_EXTI_Callback+0x284>)
 8006394:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3301      	adds	r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b09      	cmp	r3, #9
 80063a0:	ddea      	ble.n	8006378 <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 80063a2:	4b82      	ldr	r3, [pc, #520]	@ (80065ac <HAL_GPIO_EXTI_Callback+0x284>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b0a      	cmp	r3, #10
 80063a8:	f040 80e3 	bne.w	8006572 <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 80063ac:	2302      	movs	r3, #2
 80063ae:	2200      	movs	r2, #0
 80063b0:	4980      	ldr	r1, [pc, #512]	@ (80065b4 <HAL_GPIO_EXTI_Callback+0x28c>)
 80063b2:	487c      	ldr	r0, [pc, #496]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063b4:	f000 ffc4 	bl	8007340 <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 80063b8:	2305      	movs	r3, #5
 80063ba:	2203      	movs	r2, #3
 80063bc:	497e      	ldr	r1, [pc, #504]	@ (80065b8 <HAL_GPIO_EXTI_Callback+0x290>)
 80063be:	4879      	ldr	r0, [pc, #484]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063c0:	f000 ffbe 	bl	8007340 <convert_array_to_value>
				if(wobble_strenght == 1){
 80063c4:	4b7d      	ldr	r3, [pc, #500]	@ (80065bc <HAL_GPIO_EXTI_Callback+0x294>)
 80063c6:	edd3 7a00 	vldr	s15, [r3]
 80063ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063ce:	eef4 7a47 	vcmp.f32	s15, s14
 80063d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d6:	d105      	bne.n	80063e4 <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 80063d8:	2308      	movs	r3, #8
 80063da:	2206      	movs	r2, #6
 80063dc:	4978      	ldr	r1, [pc, #480]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x298>)
 80063de:	4871      	ldr	r0, [pc, #452]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063e0:	f000 ffae 	bl	8007340 <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 80063e4:	230b      	movs	r3, #11
 80063e6:	2209      	movs	r2, #9
 80063e8:	4976      	ldr	r1, [pc, #472]	@ (80065c4 <HAL_GPIO_EXTI_Callback+0x29c>)
 80063ea:	486e      	ldr	r0, [pc, #440]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063ec:	f000 ffa8 	bl	8007340 <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 80063f0:	4b75      	ldr	r3, [pc, #468]	@ (80065c8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 80063f6:	4b6b      	ldr	r3, [pc, #428]	@ (80065a4 <HAL_GPIO_EXTI_Callback+0x27c>)
 80063f8:	7ddb      	ldrb	r3, [r3, #23]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d11b      	bne.n	8006436 <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 80063fe:	2201      	movs	r2, #1
 8006400:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006404:	4871      	ldr	r0, [pc, #452]	@ (80065cc <HAL_GPIO_EXTI_Callback+0x2a4>)
 8006406:	f008 f9fd 	bl	800e804 <HAL_GPIO_WritePin>
					LED_R_1;
 800640a:	2201      	movs	r2, #1
 800640c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006410:	4865      	ldr	r0, [pc, #404]	@ (80065a8 <HAL_GPIO_EXTI_Callback+0x280>)
 8006412:	f008 f9f7 	bl	800e804 <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 8006416:	4b6e      	ldr	r3, [pc, #440]	@ (80065d0 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d10b      	bne.n	8006436 <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 800641e:	486d      	ldr	r0, [pc, #436]	@ (80065d4 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8006420:	f017 fc88 	bl	801dd34 <f_close>
						fresult = f_mount(NULL, "/", 1);
 8006424:	2201      	movs	r2, #1
 8006426:	496c      	ldr	r1, [pc, #432]	@ (80065d8 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8006428:	2000      	movs	r0, #0
 800642a:	f017 f863 	bl	801d4f4 <f_mount>
 800642e:	4603      	mov	r3, r0
 8006430:	461a      	mov	r2, r3
 8006432:	4b6a      	ldr	r3, [pc, #424]	@ (80065dc <HAL_GPIO_EXTI_Callback+0x2b4>)
 8006434:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 8006436:	4b62      	ldr	r3, [pc, #392]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x298>)
 8006438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800643c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006440:	4293      	cmp	r3, r2
 8006442:	d103      	bne.n	800644c <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 8006444:	4b60      	ldr	r3, [pc, #384]	@ (80065c8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006446:	2210      	movs	r2, #16
 8006448:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 800644c:	4b5c      	ldr	r3, [pc, #368]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x298>)
 800644e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006452:	b29b      	uxth	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	0092      	lsls	r2, r2, #2
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	b29b      	uxth	r3, r3
 800645e:	b21a      	sxth	r2, r3
 8006460:	4b57      	ldr	r3, [pc, #348]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x298>)
 8006462:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 8006464:	4b56      	ldr	r3, [pc, #344]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x298>)
 8006466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800646a:	b29a      	uxth	r2, r3
 800646c:	4b5c      	ldr	r3, [pc, #368]	@ (80065e0 <HAL_GPIO_EXTI_Callback+0x2b8>)
 800646e:	4413      	add	r3, r2
 8006470:	b29b      	uxth	r3, r3
 8006472:	b21a      	sxth	r2, r3
 8006474:	4b52      	ldr	r3, [pc, #328]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x298>)
 8006476:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 8006478:	4b51      	ldr	r3, [pc, #324]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x298>)
 800647a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800647e:	2b00      	cmp	r3, #0
 8006480:	da02      	bge.n	8006488 <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 8006482:	4b4f      	ldr	r3, [pc, #316]	@ (80065c0 <HAL_GPIO_EXTI_Callback+0x298>)
 8006484:	2200      	movs	r2, #0
 8006486:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 8006488:	4b4b      	ldr	r3, [pc, #300]	@ (80065b8 <HAL_GPIO_EXTI_Callback+0x290>)
 800648a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800648e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800649a:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80065e4 <HAL_GPIO_EXTI_Callback+0x2bc>
 800649e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064a6:	ee17 3a90 	vmov	r3, s15
 80064aa:	b21a      	sxth	r2, r3
 80064ac:	4b4e      	ldr	r3, [pc, #312]	@ (80065e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80064ae:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 80064b0:	4b40      	ldr	r3, [pc, #256]	@ (80065b4 <HAL_GPIO_EXTI_Callback+0x28c>)
 80064b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064b6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80064ba:	ee07 3a90 	vmov	s15, r3
 80064be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064c2:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80065ec <HAL_GPIO_EXTI_Callback+0x2c4>
 80064c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064ce:	ee17 3a90 	vmov	r3, s15
 80064d2:	b21a      	sxth	r2, r3
 80064d4:	4b46      	ldr	r3, [pc, #280]	@ (80065f0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80064d6:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;// wanted yaw is in deg/s
 80064d8:	4b3a      	ldr	r3, [pc, #232]	@ (80065c4 <HAL_GPIO_EXTI_Callback+0x29c>)
 80064da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064de:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064ea:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80065f4 <HAL_GPIO_EXTI_Callback+0x2cc>
 80064ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064f6:	ee17 3a90 	vmov	r3, s15
 80064fa:	b21a      	sxth	r2, r3
 80064fc:	4b3e      	ldr	r3, [pc, #248]	@ (80065f8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80064fe:	801a      	strh	r2, [r3, #0]


				wanted_rool_rx = (wanted_rool_rx >= 30) ? 30 : (wanted_rool_rx <= -30) ? -30 : wanted_rool_rx;
 8006500:	4b39      	ldr	r3, [pc, #228]	@ (80065e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006506:	2b1d      	cmp	r3, #29
 8006508:	dc09      	bgt.n	800651e <HAL_GPIO_EXTI_Callback+0x1f6>
 800650a:	4b37      	ldr	r3, [pc, #220]	@ (80065e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800650c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006510:	f06f 021d 	mvn.w	r2, #29
 8006514:	4293      	cmp	r3, r2
 8006516:	bfb8      	it	lt
 8006518:	4613      	movlt	r3, r2
 800651a:	b21b      	sxth	r3, r3
 800651c:	e000      	b.n	8006520 <HAL_GPIO_EXTI_Callback+0x1f8>
 800651e:	231e      	movs	r3, #30
 8006520:	4a31      	ldr	r2, [pc, #196]	@ (80065e8 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006522:	8013      	strh	r3, [r2, #0]
				wanted_pitch_rx = (wanted_pitch_rx >= 30) ? 30 : (wanted_pitch_rx <= -30) ? -30 : wanted_pitch_rx;
 8006524:	4b32      	ldr	r3, [pc, #200]	@ (80065f0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800652a:	2b1d      	cmp	r3, #29
 800652c:	dc09      	bgt.n	8006542 <HAL_GPIO_EXTI_Callback+0x21a>
 800652e:	4b30      	ldr	r3, [pc, #192]	@ (80065f0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006534:	f06f 021d 	mvn.w	r2, #29
 8006538:	4293      	cmp	r3, r2
 800653a:	bfb8      	it	lt
 800653c:	4613      	movlt	r3, r2
 800653e:	b21b      	sxth	r3, r3
 8006540:	e000      	b.n	8006544 <HAL_GPIO_EXTI_Callback+0x21c>
 8006542:	231e      	movs	r3, #30
 8006544:	4a2a      	ldr	r2, [pc, #168]	@ (80065f0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006546:	8013      	strh	r3, [r2, #0]
				wanted_yaw_rx = (wanted_yaw_rx >= 30) ? 30 : (wanted_yaw_rx <= -30) ? -30 : wanted_yaw_rx;
 8006548:	4b2b      	ldr	r3, [pc, #172]	@ (80065f8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800654a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800654e:	2b1d      	cmp	r3, #29
 8006550:	dc09      	bgt.n	8006566 <HAL_GPIO_EXTI_Callback+0x23e>
 8006552:	4b29      	ldr	r3, [pc, #164]	@ (80065f8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006558:	f06f 021d 	mvn.w	r2, #29
 800655c:	4293      	cmp	r3, r2
 800655e:	bfb8      	it	lt
 8006560:	4613      	movlt	r3, r2
 8006562:	b21b      	sxth	r3, r3
 8006564:	e000      	b.n	8006568 <HAL_GPIO_EXTI_Callback+0x240>
 8006566:	231e      	movs	r3, #30
 8006568:	4a23      	ldr	r2, [pc, #140]	@ (80065f8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800656a:	8013      	strh	r3, [r2, #0]


				NRF_TIM_Inte = 0;
 800656c:	4b23      	ldr	r3, [pc, #140]	@ (80065fc <HAL_GPIO_EXTI_Callback+0x2d4>)
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 8006572:	4b0e      	ldr	r3, [pc, #56]	@ (80065ac <HAL_GPIO_EXTI_Callback+0x284>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d006      	beq.n	8006588 <HAL_GPIO_EXTI_Callback+0x260>
 800657a:	4b0c      	ldr	r3, [pc, #48]	@ (80065ac <HAL_GPIO_EXTI_Callback+0x284>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b09      	cmp	r3, #9
 8006580:	d802      	bhi.n	8006588 <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 8006582:	4b11      	ldr	r3, [pc, #68]	@ (80065c8 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006584:	2203      	movs	r2, #3
 8006586:	825a      	strh	r2, [r3, #18]
	  			}
	  			LED_Y_0;
 8006588:	2200      	movs	r2, #0
 800658a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800658e:	4806      	ldr	r0, [pc, #24]	@ (80065a8 <HAL_GPIO_EXTI_Callback+0x280>)
 8006590:	f008 f938 	bl	800e804 <HAL_GPIO_WritePin>
		}
	}
}
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	00000080 	.word	0x00000080
 80065a0:	58021000 	.word	0x58021000
 80065a4:	00000100 	.word	0x00000100
 80065a8:	58020400 	.word	0x58020400
 80065ac:	00004204 	.word	0x00004204
 80065b0:	00000160 	.word	0x00000160
 80065b4:	0000420a 	.word	0x0000420a
 80065b8:	00004208 	.word	0x00004208
 80065bc:	000041f8 	.word	0x000041f8
 80065c0:	00004068 	.word	0x00004068
 80065c4:	0000420c 	.word	0x0000420c
 80065c8:	00000184 	.word	0x00000184
 80065cc:	58021800 	.word	0x58021800
 80065d0:	000041f4 	.word	0x000041f4
 80065d4:	24001ef0 	.word	0x24001ef0
 80065d8:	0801eb70 	.word	0x0801eb70
 80065dc:	24001eec 	.word	0x24001eec
 80065e0:	ffffd8f0 	.word	0xffffd8f0
 80065e4:	3f266666 	.word	0x3f266666
 80065e8:	00004056 	.word	0x00004056
 80065ec:	3f28f5c3 	.word	0x3f28f5c3
 80065f0:	00004054 	.word	0x00004054
 80065f4:	3f19999a 	.word	0x3f19999a
 80065f8:	00004058 	.word	0x00004058
 80065fc:	00000084 	.word	0x00000084

08006600 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 8006608:	4b24      	ldr	r3, [pc, #144]	@ (800669c <HAL_UART_RxCpltCallback+0x9c>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	4b24      	ldr	r3, [pc, #144]	@ (80066a0 <HAL_UART_RxCpltCallback+0xa0>)
 8006610:	7819      	ldrb	r1, [r3, #0]
 8006612:	4b24      	ldr	r3, [pc, #144]	@ (80066a4 <HAL_UART_RxCpltCallback+0xa4>)
 8006614:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 8006616:	4b21      	ldr	r3, [pc, #132]	@ (800669c <HAL_UART_RxCpltCallback+0x9c>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	4b21      	ldr	r3, [pc, #132]	@ (80066a4 <HAL_UART_RxCpltCallback+0xa4>)
 800661e:	5c9b      	ldrb	r3, [r3, r2]
 8006620:	2b0d      	cmp	r3, #13
 8006622:	d11a      	bne.n	800665a <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 8006624:	230a      	movs	r3, #10
 8006626:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8006628:	f107 010f 	add.w	r1, r7, #15
 800662c:	2364      	movs	r3, #100	@ 0x64
 800662e:	2201      	movs	r2, #1
 8006630:	481d      	ldr	r0, [pc, #116]	@ (80066a8 <HAL_UART_RxCpltCallback+0xa8>)
 8006632:	f011 fc8f 	bl	8017f54 <HAL_UART_Transmit>
		Y = '\r';
 8006636:	230d      	movs	r3, #13
 8006638:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 800663a:	f107 010f 	add.w	r1, r7, #15
 800663e:	2364      	movs	r3, #100	@ 0x64
 8006640:	2201      	movs	r2, #1
 8006642:	4819      	ldr	r0, [pc, #100]	@ (80066a8 <HAL_UART_RxCpltCallback+0xa8>)
 8006644:	f011 fc86 	bl	8017f54 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 8006648:	4b14      	ldr	r3, [pc, #80]	@ (800669c <HAL_UART_RxCpltCallback+0x9c>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	4b15      	ldr	r3, [pc, #84]	@ (80066a4 <HAL_UART_RxCpltCallback+0xa4>)
 8006650:	2100      	movs	r1, #0
 8006652:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8006654:	4b15      	ldr	r3, [pc, #84]	@ (80066ac <HAL_UART_RxCpltCallback+0xac>)
 8006656:	2201      	movs	r2, #1
 8006658:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 800665a:	4b10      	ldr	r3, [pc, #64]	@ (800669c <HAL_UART_RxCpltCallback+0x9c>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	4b10      	ldr	r3, [pc, #64]	@ (80066a4 <HAL_UART_RxCpltCallback+0xa4>)
 8006662:	4413      	add	r3, r2
 8006664:	2201      	movs	r2, #1
 8006666:	4619      	mov	r1, r3
 8006668:	480f      	ldr	r0, [pc, #60]	@ (80066a8 <HAL_UART_RxCpltCallback+0xa8>)
 800666a:	f011 fd01 	bl	8018070 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 800666e:	2201      	movs	r2, #1
 8006670:	490b      	ldr	r1, [pc, #44]	@ (80066a0 <HAL_UART_RxCpltCallback+0xa0>)
 8006672:	480d      	ldr	r0, [pc, #52]	@ (80066a8 <HAL_UART_RxCpltCallback+0xa8>)
 8006674:	f011 fd90 	bl	8018198 <HAL_UART_Receive_IT>
	command_ch_num++;
 8006678:	4b08      	ldr	r3, [pc, #32]	@ (800669c <HAL_UART_RxCpltCallback+0x9c>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	b2da      	uxtb	r2, r3
 8006680:	4b06      	ldr	r3, [pc, #24]	@ (800669c <HAL_UART_RxCpltCallback+0x9c>)
 8006682:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8006684:	4b09      	ldr	r3, [pc, #36]	@ (80066ac <HAL_UART_RxCpltCallback+0xac>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d102      	bne.n	8006692 <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 800668c:	4b03      	ldr	r3, [pc, #12]	@ (800669c <HAL_UART_RxCpltCallback+0x9c>)
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
	}
}
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	000041e7 	.word	0x000041e7
 80066a0:	000041e8 	.word	0x000041e8
 80066a4:	000041dc 	.word	0x000041dc
 80066a8:	240004b0 	.word	0x240004b0
 80066ac:	000041e6 	.word	0x000041e6

080066b0 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 80066b8:	4bba      	ldr	r3, [pc, #744]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x2f4>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	f040 85a5 	bne.w	800720c <HAL_I2C_MemRxCpltCallback+0xb5c>
			MPU6050_IRQ = 0;
 80066c2:	4bb8      	ldr	r3, [pc, #736]	@ (80069a4 <HAL_I2C_MemRxCpltCallback+0x2f4>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 80066c8:	2201      	movs	r2, #1
 80066ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80066ce:	48b6      	ldr	r0, [pc, #728]	@ (80069a8 <HAL_I2C_MemRxCpltCallback+0x2f8>)
 80066d0:	f008 f898 	bl	800e804 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 80066d4:	4bb5      	ldr	r3, [pc, #724]	@ (80069ac <HAL_I2C_MemRxCpltCallback+0x2fc>)
 80066d6:	edd3 7a00 	vldr	s15, [r3]
 80066da:	4bb5      	ldr	r3, [pc, #724]	@ (80069b0 <HAL_I2C_MemRxCpltCallback+0x300>)
 80066dc:	ed93 7a00 	vldr	s14, [r3]
 80066e0:	4bb4      	ldr	r3, [pc, #720]	@ (80069b4 <HAL_I2C_MemRxCpltCallback+0x304>)
 80066e2:	edd3 6a00 	vldr	s13, [r3]
 80066e6:	4bb4      	ldr	r3, [pc, #720]	@ (80069b8 <HAL_I2C_MemRxCpltCallback+0x308>)
 80066e8:	ed93 6a00 	vldr	s12, [r3]
 80066ec:	4bb3      	ldr	r3, [pc, #716]	@ (80069bc <HAL_I2C_MemRxCpltCallback+0x30c>)
 80066ee:	edd3 5a00 	vldr	s11, [r3]
 80066f2:	4bb3      	ldr	r3, [pc, #716]	@ (80069c0 <HAL_I2C_MemRxCpltCallback+0x310>)
 80066f4:	ed93 5a00 	vldr	s10, [r3]
 80066f8:	eddf 4ab2 	vldr	s9, [pc, #712]	@ 80069c4 <HAL_I2C_MemRxCpltCallback+0x314>
 80066fc:	ed9f 4ab2 	vldr	s8, [pc, #712]	@ 80069c8 <HAL_I2C_MemRxCpltCallback+0x318>
 8006700:	4bb2      	ldr	r3, [pc, #712]	@ (80069cc <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006702:	9301      	str	r3, [sp, #4]
 8006704:	4bb2      	ldr	r3, [pc, #712]	@ (80069d0 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	eef0 3a44 	vmov.f32	s7, s8
 800670c:	eeb0 3a64 	vmov.f32	s6, s9
 8006710:	eef0 2a45 	vmov.f32	s5, s10
 8006714:	eeb0 2a65 	vmov.f32	s4, s11
 8006718:	eef0 1a46 	vmov.f32	s3, s12
 800671c:	eeb0 1a66 	vmov.f32	s2, s13
 8006720:	eef0 0a47 	vmov.f32	s1, s14
 8006724:	eeb0 0a67 	vmov.f32	s0, s15
 8006728:	4baa      	ldr	r3, [pc, #680]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x324>)
 800672a:	4aab      	ldr	r2, [pc, #684]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x328>)
 800672c:	49ab      	ldr	r1, [pc, #684]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x32c>)
 800672e:	48ac      	ldr	r0, [pc, #688]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006730:	f7fb f882 	bl	8001838 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8006734:	4baa      	ldr	r3, [pc, #680]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006736:	edd3 7a00 	vldr	s15, [r3]
 800673a:	4ba8      	ldr	r3, [pc, #672]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x32c>)
 800673c:	ed93 7a00 	vldr	s14, [r3]
 8006740:	4ba5      	ldr	r3, [pc, #660]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x328>)
 8006742:	edd3 6a00 	vldr	s13, [r3]
 8006746:	49a7      	ldr	r1, [pc, #668]	@ (80069e4 <HAL_I2C_MemRxCpltCallback+0x334>)
 8006748:	48a7      	ldr	r0, [pc, #668]	@ (80069e8 <HAL_I2C_MemRxCpltCallback+0x338>)
 800674a:	eeb0 1a66 	vmov.f32	s2, s13
 800674e:	eef0 0a47 	vmov.f32	s1, s14
 8006752:	eeb0 0a67 	vmov.f32	s0, s15
 8006756:	f7fa ff23 	bl	80015a0 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 800675a:	4ba3      	ldr	r3, [pc, #652]	@ (80069e8 <HAL_I2C_MemRxCpltCallback+0x338>)
 800675c:	edd3 7a00 	vldr	s15, [r3]
 8006760:	4ba0      	ldr	r3, [pc, #640]	@ (80069e4 <HAL_I2C_MemRxCpltCallback+0x334>)
 8006762:	ed93 7a00 	vldr	s14, [r3]
 8006766:	4ba1      	ldr	r3, [pc, #644]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x33c>)
 8006768:	edd3 6a00 	vldr	s13, [r3]
 800676c:	4b99      	ldr	r3, [pc, #612]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x324>)
 800676e:	ed93 6a00 	vldr	s12, [r3]
 8006772:	4b97      	ldr	r3, [pc, #604]	@ (80069d0 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006774:	edd3 5a00 	vldr	s11, [r3]
 8006778:	4b94      	ldr	r3, [pc, #592]	@ (80069cc <HAL_I2C_MemRxCpltCallback+0x31c>)
 800677a:	ed93 5a00 	vldr	s10, [r3]
 800677e:	eef0 2a45 	vmov.f32	s5, s10
 8006782:	eeb0 2a65 	vmov.f32	s4, s11
 8006786:	eef0 1a46 	vmov.f32	s3, s12
 800678a:	eeb0 1a66 	vmov.f32	s2, s13
 800678e:	eef0 0a47 	vmov.f32	s1, s14
 8006792:	eeb0 0a67 	vmov.f32	s0, s15
 8006796:	4896      	ldr	r0, [pc, #600]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x340>)
 8006798:	f7fb f8f8 	bl	800198c <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 800679c:	4b94      	ldr	r3, [pc, #592]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x340>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a94      	ldr	r2, [pc, #592]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x344>)
 80067a2:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 80067a4:	4b92      	ldr	r3, [pc, #584]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x340>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4a93      	ldr	r2, [pc, #588]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x348>)
 80067aa:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 80067ac:	4b90      	ldr	r3, [pc, #576]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x340>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	4a92      	ldr	r2, [pc, #584]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0x34c>)
 80067b2:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 80067b4:	4b92      	ldr	r3, [pc, #584]	@ (8006a00 <HAL_I2C_MemRxCpltCallback+0x350>)
 80067b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067ba:	ee07 3a90 	vmov	s15, r3
 80067be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067c2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80067c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067ca:	4b8e      	ldr	r3, [pc, #568]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x354>)
 80067cc:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 80067d0:	4b8d      	ldr	r3, [pc, #564]	@ (8006a08 <HAL_I2C_MemRxCpltCallback+0x358>)
 80067d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067de:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80067e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067e6:	4b89      	ldr	r3, [pc, #548]	@ (8006a0c <HAL_I2C_MemRxCpltCallback+0x35c>)
 80067e8:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 80067ec:	4b88      	ldr	r3, [pc, #544]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x360>)
 80067ee:	f04f 0200 	mov.w	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 80067f4:	eddf 7a87 	vldr	s15, [pc, #540]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x364>
 80067f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067fc:	4b81      	ldr	r3, [pc, #516]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x354>)
 80067fe:	edd3 7a00 	vldr	s15, [r3]
 8006802:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006806:	eddf 7a83 	vldr	s15, [pc, #524]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x364>
 800680a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800680e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006812:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800681a:	eddf 7a7e 	vldr	s15, [pc, #504]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x364>
 800681e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800682a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800682e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006832:	4b79      	ldr	r3, [pc, #484]	@ (8006a18 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006834:	edd3 7a00 	vldr	s15, [r3]
 8006838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800683c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006840:	4b70      	ldr	r3, [pc, #448]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x354>)
 8006842:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006846:	eddf 7a73 	vldr	s15, [pc, #460]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x364>
 800684a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800684e:	4b6f      	ldr	r3, [pc, #444]	@ (8006a0c <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006850:	edd3 7a00 	vldr	s15, [r3]
 8006854:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006858:	eddf 7a6e 	vldr	s15, [pc, #440]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x364>
 800685c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006860:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800686c:	eddf 7a69 	vldr	s15, [pc, #420]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x364>
 8006870:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006874:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800687c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006880:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006884:	4b65      	ldr	r3, [pc, #404]	@ (8006a1c <HAL_I2C_MemRxCpltCallback+0x36c>)
 8006886:	edd3 7a00 	vldr	s15, [r3]
 800688a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800688e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006892:	4b5e      	ldr	r3, [pc, #376]	@ (8006a0c <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006894:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006898:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x364>
 800689c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80068a0:	4b5b      	ldr	r3, [pc, #364]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x360>)
 80068a2:	edd3 7a00 	vldr	s15, [r3]
 80068a6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80068aa:	eddf 7a5a 	vldr	s15, [pc, #360]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x364>
 80068ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80068b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068be:	eddf 7a55 	vldr	s15, [pc, #340]	@ 8006a14 <HAL_I2C_MemRxCpltCallback+0x364>
 80068c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80068c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ce:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80068d2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80068d6:	4b52      	ldr	r3, [pc, #328]	@ (8006a20 <HAL_I2C_MemRxCpltCallback+0x370>)
 80068d8:	edd3 7a00 	vldr	s15, [r3]
 80068dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068e4:	4b4a      	ldr	r3, [pc, #296]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x360>)
 80068e6:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 80068ea:	4b46      	ldr	r3, [pc, #280]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x354>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a4a      	ldr	r2, [pc, #296]	@ (8006a18 <HAL_I2C_MemRxCpltCallback+0x368>)
 80068f0:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 80068f2:	4b46      	ldr	r3, [pc, #280]	@ (8006a0c <HAL_I2C_MemRxCpltCallback+0x35c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a49      	ldr	r2, [pc, #292]	@ (8006a1c <HAL_I2C_MemRxCpltCallback+0x36c>)
 80068f8:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 80068fa:	4b45      	ldr	r3, [pc, #276]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x360>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a48      	ldr	r2, [pc, #288]	@ (8006a20 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006900:	6013      	str	r3, [r2, #0]


		  	pitch_error = wanted_pitch - now_pitch;
 8006902:	4b42      	ldr	r3, [pc, #264]	@ (8006a0c <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006904:	ed93 7a00 	vldr	s14, [r3]
 8006908:	4b3a      	ldr	r3, [pc, #232]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x344>)
 800690a:	edd3 7a00 	vldr	s15, [r3]
 800690e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006912:	4b44      	ldr	r3, [pc, #272]	@ (8006a24 <HAL_I2C_MemRxCpltCallback+0x374>)
 8006914:	edc3 7a00 	vstr	s15, [r3]
		  	rool_error = wanted_rool - now_rool;
 8006918:	4b3a      	ldr	r3, [pc, #232]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x354>)
 800691a:	ed93 7a00 	vldr	s14, [r3]
 800691e:	4b36      	ldr	r3, [pc, #216]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006920:	edd3 7a00 	vldr	s15, [r3]
 8006924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006928:	4b3f      	ldr	r3, [pc, #252]	@ (8006a28 <HAL_I2C_MemRxCpltCallback+0x378>)
 800692a:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_error = wanted_yaw - now_yaw;
 800692e:	4b38      	ldr	r3, [pc, #224]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006930:	ed93 7a00 	vldr	s14, [r3]
 8006934:	4b31      	ldr	r3, [pc, #196]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0x34c>)
 8006936:	edd3 7a00 	vldr	s15, [r3]
 800693a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800693e:	4b3b      	ldr	r3, [pc, #236]	@ (8006a2c <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006940:	edc3 7a00 	vstr	s15, [r3]
		  	pitch_ar_error = pid_pitch - gx;
 8006944:	4b3a      	ldr	r3, [pc, #232]	@ (8006a30 <HAL_I2C_MemRxCpltCallback+0x380>)
 8006946:	ed93 7a00 	vldr	s14, [r3]
 800694a:	4b22      	ldr	r3, [pc, #136]	@ (80069d4 <HAL_I2C_MemRxCpltCallback+0x324>)
 800694c:	edd3 7a00 	vldr	s15, [r3]
 8006950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006954:	4b37      	ldr	r3, [pc, #220]	@ (8006a34 <HAL_I2C_MemRxCpltCallback+0x384>)
 8006956:	edc3 7a00 	vstr	s15, [r3]
		  	rool_ar_error = pid_rool - gy;
 800695a:	4b37      	ldr	r3, [pc, #220]	@ (8006a38 <HAL_I2C_MemRxCpltCallback+0x388>)
 800695c:	ed93 7a00 	vldr	s14, [r3]
 8006960:	4b1b      	ldr	r3, [pc, #108]	@ (80069d0 <HAL_I2C_MemRxCpltCallback+0x320>)
 8006962:	edd3 7a00 	vldr	s15, [r3]
 8006966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800696a:	4b34      	ldr	r3, [pc, #208]	@ (8006a3c <HAL_I2C_MemRxCpltCallback+0x38c>)
 800696c:	edc3 7a00 	vstr	s15, [r3]
		  	yaw_ar_error = pid_yaw - gz;
 8006970:	4b33      	ldr	r3, [pc, #204]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006972:	ed93 7a00 	vldr	s14, [r3]
 8006976:	4b15      	ldr	r3, [pc, #84]	@ (80069cc <HAL_I2C_MemRxCpltCallback+0x31c>)
 8006978:	edd3 7a00 	vldr	s15, [r3]
 800697c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006980:	4b30      	ldr	r3, [pc, #192]	@ (8006a44 <HAL_I2C_MemRxCpltCallback+0x394>)
 8006982:	edc3 7a00 	vstr	s15, [r3]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (pitch_error);//pitch_error -> pitch_error
 8006986:	4b30      	ldr	r3, [pc, #192]	@ (8006a48 <HAL_I2C_MemRxCpltCallback+0x398>)
 8006988:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800698c:	2b00      	cmp	r3, #0
 800698e:	d05f      	beq.n	8006a50 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006990:	4b2e      	ldr	r3, [pc, #184]	@ (8006a4c <HAL_I2C_MemRxCpltCallback+0x39c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	ee07 3a90 	vmov	s15, r3
 8006998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800699c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069a0:	e063      	b.n	8006a6a <HAL_I2C_MemRxCpltCallback+0x3ba>
 80069a2:	bf00      	nop
 80069a4:	000041fc 	.word	0x000041fc
 80069a8:	58021000 	.word	0x58021000
 80069ac:	00000030 	.word	0x00000030
 80069b0:	00000034 	.word	0x00000034
 80069b4:	00000038 	.word	0x00000038
 80069b8:	0000003c 	.word	0x0000003c
 80069bc:	00000040 	.word	0x00000040
 80069c0:	00000044 	.word	0x00000044
 80069c4:	42830000 	.word	0x42830000
 80069c8:	46000000 	.word	0x46000000
 80069cc:	00000014 	.word	0x00000014
 80069d0:	00000010 	.word	0x00000010
 80069d4:	0000000c 	.word	0x0000000c
 80069d8:	00000008 	.word	0x00000008
 80069dc:	00000004 	.word	0x00000004
 80069e0:	00000000 	.word	0x00000000
 80069e4:	0000001c 	.word	0x0000001c
 80069e8:	00000018 	.word	0x00000018
 80069ec:	00000058 	.word	0x00000058
 80069f0:	00000088 	.word	0x00000088
 80069f4:	00004088 	.word	0x00004088
 80069f8:	0000408c 	.word	0x0000408c
 80069fc:	00004090 	.word	0x00004090
 8006a00:	00004056 	.word	0x00004056
 8006a04:	0000407c 	.word	0x0000407c
 8006a08:	00004054 	.word	0x00004054
 8006a0c:	00004078 	.word	0x00004078
 8006a10:	00004080 	.word	0x00004080
 8006a14:	3a83126f 	.word	0x3a83126f
 8006a18:	00004060 	.word	0x00004060
 8006a1c:	0000405c 	.word	0x0000405c
 8006a20:	00004064 	.word	0x00004064
 8006a24:	00004094 	.word	0x00004094
 8006a28:	00004098 	.word	0x00004098
 8006a2c:	0000409c 	.word	0x0000409c
 8006a30:	000040dc 	.word	0x000040dc
 8006a34:	000040a0 	.word	0x000040a0
 8006a38:	000040e4 	.word	0x000040e4
 8006a3c:	000040a4 	.word	0x000040a4
 8006a40:	000040e0 	.word	0x000040e0
 8006a44:	000040a8 	.word	0x000040a8
 8006a48:	00000184 	.word	0x00000184
 8006a4c:	000040c4 	.word	0x000040c4
 8006a50:	4ba4      	ldr	r3, [pc, #656]	@ (8006ce4 <HAL_I2C_MemRxCpltCallback+0x634>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a5c:	4ba2      	ldr	r3, [pc, #648]	@ (8006ce8 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006a5e:	edd3 7a00 	vldr	s15, [r3]
 8006a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a6a:	4b9e      	ldr	r3, [pc, #632]	@ (8006ce4 <HAL_I2C_MemRxCpltCallback+0x634>)
 8006a6c:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (rool_error);//rool_error
 8006a70:	4b9e      	ldr	r3, [pc, #632]	@ (8006cec <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a72:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d008      	beq.n	8006a8c <HAL_I2C_MemRxCpltCallback+0x3dc>
 8006a7a:	4b9d      	ldr	r3, [pc, #628]	@ (8006cf0 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a8a:	e00c      	b.n	8006aa6 <HAL_I2C_MemRxCpltCallback+0x3f6>
 8006a8c:	4b98      	ldr	r3, [pc, #608]	@ (8006cf0 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	ee07 3a90 	vmov	s15, r3
 8006a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a98:	4b96      	ldr	r3, [pc, #600]	@ (8006cf4 <HAL_I2C_MemRxCpltCallback+0x644>)
 8006a9a:	edd3 7a00 	vldr	s15, [r3]
 8006a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aa6:	4b92      	ldr	r3, [pc, #584]	@ (8006cf0 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006aa8:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (yaw_error);//yaw_error
 8006aac:	4b8f      	ldr	r3, [pc, #572]	@ (8006cec <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006aae:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <HAL_I2C_MemRxCpltCallback+0x418>
 8006ab6:	4b90      	ldr	r3, [pc, #576]	@ (8006cf8 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	ee07 3a90 	vmov	s15, r3
 8006abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ac6:	e00c      	b.n	8006ae2 <HAL_I2C_MemRxCpltCallback+0x432>
 8006ac8:	4b8b      	ldr	r3, [pc, #556]	@ (8006cf8 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	ee07 3a90 	vmov	s15, r3
 8006ad0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ad4:	4b89      	ldr	r3, [pc, #548]	@ (8006cfc <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006ad6:	edd3 7a00 	vldr	s15, [r3]
 8006ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ae2:	4b85      	ldr	r3, [pc, #532]	@ (8006cf8 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006ae4:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pitch_ar_error);//pitch_ar_error
 8006ae8:	4b80      	ldr	r3, [pc, #512]	@ (8006cec <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006aea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d008      	beq.n	8006b04 <HAL_I2C_MemRxCpltCallback+0x454>
 8006af2:	4b83      	ldr	r3, [pc, #524]	@ (8006d00 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b02:	e00c      	b.n	8006b1e <HAL_I2C_MemRxCpltCallback+0x46e>
 8006b04:	4b7e      	ldr	r3, [pc, #504]	@ (8006d00 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	ee07 3a90 	vmov	s15, r3
 8006b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b10:	4b7c      	ldr	r3, [pc, #496]	@ (8006d04 <HAL_I2C_MemRxCpltCallback+0x654>)
 8006b12:	edd3 7a00 	vldr	s15, [r3]
 8006b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b1e:	4b78      	ldr	r3, [pc, #480]	@ (8006d00 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006b20:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (rool_ar_error);
 8006b24:	4b71      	ldr	r3, [pc, #452]	@ (8006cec <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006b26:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d008      	beq.n	8006b40 <HAL_I2C_MemRxCpltCallback+0x490>
 8006b2e:	4b76      	ldr	r3, [pc, #472]	@ (8006d08 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b3e:	e00c      	b.n	8006b5a <HAL_I2C_MemRxCpltCallback+0x4aa>
 8006b40:	4b71      	ldr	r3, [pc, #452]	@ (8006d08 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	ee07 3a90 	vmov	s15, r3
 8006b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006b4e:	edd3 7a00 	vldr	s15, [r3]
 8006b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b5a:	4b6b      	ldr	r3, [pc, #428]	@ (8006d08 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b5c:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (yaw_ar_error);
 8006b60:	4b62      	ldr	r3, [pc, #392]	@ (8006cec <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006b62:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d008      	beq.n	8006b7c <HAL_I2C_MemRxCpltCallback+0x4cc>
 8006b6a:	4b69      	ldr	r3, [pc, #420]	@ (8006d10 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b7a:	e00c      	b.n	8006b96 <HAL_I2C_MemRxCpltCallback+0x4e6>
 8006b7c:	4b64      	ldr	r3, [pc, #400]	@ (8006d10 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b88:	4b62      	ldr	r3, [pc, #392]	@ (8006d14 <HAL_I2C_MemRxCpltCallback+0x664>)
 8006b8a:	edd3 7a00 	vldr	s15, [r3]
 8006b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b96:	4b5e      	ldr	r3, [pc, #376]	@ (8006d10 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b98:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	495e      	ldr	r1, [pc, #376]	@ (8006d18 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006ba0:	485e      	ldr	r0, [pc, #376]	@ (8006d1c <HAL_I2C_MemRxCpltCallback+0x66c>)
 8006ba2:	f7fc ff63 	bl	8003a6c <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	495d      	ldr	r1, [pc, #372]	@ (8006d20 <HAL_I2C_MemRxCpltCallback+0x670>)
 8006baa:	485e      	ldr	r0, [pc, #376]	@ (8006d24 <HAL_I2C_MemRxCpltCallback+0x674>)
 8006bac:	f7fc ff5e 	bl	8003a6c <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	495d      	ldr	r1, [pc, #372]	@ (8006d28 <HAL_I2C_MemRxCpltCallback+0x678>)
 8006bb4:	485d      	ldr	r0, [pc, #372]	@ (8006d2c <HAL_I2C_MemRxCpltCallback+0x67c>)
 8006bb6:	f7fc ff59 	bl	8003a6c <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8006bba:	2204      	movs	r2, #4
 8006bbc:	495c      	ldr	r1, [pc, #368]	@ (8006d30 <HAL_I2C_MemRxCpltCallback+0x680>)
 8006bbe:	485d      	ldr	r0, [pc, #372]	@ (8006d34 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006bc0:	f7fc ff54 	bl	8003a6c <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8006bc4:	2205      	movs	r2, #5
 8006bc6:	495c      	ldr	r1, [pc, #368]	@ (8006d38 <HAL_I2C_MemRxCpltCallback+0x688>)
 8006bc8:	485c      	ldr	r0, [pc, #368]	@ (8006d3c <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006bca:	f7fc ff4f 	bl	8003a6c <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8006bce:	2206      	movs	r2, #6
 8006bd0:	495b      	ldr	r1, [pc, #364]	@ (8006d40 <HAL_I2C_MemRxCpltCallback+0x690>)
 8006bd2:	485c      	ldr	r0, [pc, #368]	@ (8006d44 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006bd4:	f7fc ff4a 	bl	8003a6c <PID_cal>


			old_error_pitch = pitch_error;
 8006bd8:	4b43      	ldr	r3, [pc, #268]	@ (8006ce8 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a5a      	ldr	r2, [pc, #360]	@ (8006d48 <HAL_I2C_MemRxCpltCallback+0x698>)
 8006bde:	6013      	str	r3, [r2, #0]
			old_error_rool = rool_error;
 8006be0:	4b44      	ldr	r3, [pc, #272]	@ (8006cf4 <HAL_I2C_MemRxCpltCallback+0x644>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a59      	ldr	r2, [pc, #356]	@ (8006d4c <HAL_I2C_MemRxCpltCallback+0x69c>)
 8006be6:	6013      	str	r3, [r2, #0]
			old_error_yaw = yaw_error;
 8006be8:	4b44      	ldr	r3, [pc, #272]	@ (8006cfc <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a58      	ldr	r2, [pc, #352]	@ (8006d50 <HAL_I2C_MemRxCpltCallback+0x6a0>)
 8006bee:	6013      	str	r3, [r2, #0]

			old_error_angular_rate_pitch = pitch_ar_error;
 8006bf0:	4b44      	ldr	r3, [pc, #272]	@ (8006d04 <HAL_I2C_MemRxCpltCallback+0x654>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a57      	ldr	r2, [pc, #348]	@ (8006d54 <HAL_I2C_MemRxCpltCallback+0x6a4>)
 8006bf6:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_rool = rool_ar_error;
 8006bf8:	4b44      	ldr	r3, [pc, #272]	@ (8006d0c <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a56      	ldr	r2, [pc, #344]	@ (8006d58 <HAL_I2C_MemRxCpltCallback+0x6a8>)
 8006bfe:	6013      	str	r3, [r2, #0]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 8006c00:	4b56      	ldr	r3, [pc, #344]	@ (8006d5c <HAL_I2C_MemRxCpltCallback+0x6ac>)
 8006c02:	ed93 7a00 	vldr	s14, [r3]
 8006c06:	4b56      	ldr	r3, [pc, #344]	@ (8006d60 <HAL_I2C_MemRxCpltCallback+0x6b0>)
 8006c08:	edd3 7a00 	vldr	s15, [r3]
 8006c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c10:	4b54      	ldr	r3, [pc, #336]	@ (8006d64 <HAL_I2C_MemRxCpltCallback+0x6b4>)
 8006c12:	edc3 7a00 	vstr	s15, [r3]


			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006c16:	4b49      	ldr	r3, [pc, #292]	@ (8006d3c <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006c18:	edd3 7a00 	vldr	s15, [r3]
 8006c1c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006d68 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c28:	dd04      	ble.n	8006c34 <HAL_I2C_MemRxCpltCallback+0x584>
 8006c2a:	f001 f871 	bl	8007d10 <ROOL_MAX_VAL>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	461a      	mov	r2, r3
 8006c32:	e012      	b.n	8006c5a <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006c34:	4b41      	ldr	r3, [pc, #260]	@ (8006d3c <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006c36:	edd3 7a00 	vldr	s15, [r3]
 8006c3a:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006d6c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c46:	d504      	bpl.n	8006c52 <HAL_I2C_MemRxCpltCallback+0x5a2>
 8006c48:	f001 f872 	bl	8007d30 <ROOL_MIN_VAL>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	461a      	mov	r2, r3
 8006c50:	e003      	b.n	8006c5a <HAL_I2C_MemRxCpltCallback+0x5aa>
 8006c52:	f001 f8bd 	bl	8007dd0 <ROOL_GOOD_VAL>
 8006c56:	4603      	mov	r3, r0
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4b24      	ldr	r3, [pc, #144]	@ (8006cec <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006c5c:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006c5e:	4b35      	ldr	r3, [pc, #212]	@ (8006d34 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006c60:	edd3 7a00 	vldr	s15, [r3]
 8006c64:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8006d68 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c70:	dd04      	ble.n	8006c7c <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006c72:	f001 f86d 	bl	8007d50 <PITCH_MAX_VAL>
 8006c76:	4603      	mov	r3, r0
 8006c78:	461a      	mov	r2, r3
 8006c7a:	e012      	b.n	8006ca2 <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8006d34 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006c7e:	edd3 7a00 	vldr	s15, [r3]
 8006c82:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8006d6c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8e:	d504      	bpl.n	8006c9a <HAL_I2C_MemRxCpltCallback+0x5ea>
 8006c90:	f001 f86e 	bl	8007d70 <PITCH_MIN_VAL>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	e003      	b.n	8006ca2 <HAL_I2C_MemRxCpltCallback+0x5f2>
 8006c9a:	f001 f8b1 	bl	8007e00 <PITCH_GOOD_VAL>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4b12      	ldr	r3, [pc, #72]	@ (8006cec <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006ca4:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006ca6:	4b27      	ldr	r3, [pc, #156]	@ (8006d44 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006ca8:	edd3 7a00 	vldr	s15, [r3]
 8006cac:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8006d68 <HAL_I2C_MemRxCpltCallback+0x6b8>
 8006cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb8:	dd04      	ble.n	8006cc4 <HAL_I2C_MemRxCpltCallback+0x614>
 8006cba:	f001 f869 	bl	8007d90 <YAW_MAX_VAL>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	e059      	b.n	8006d78 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8006d44 <HAL_I2C_MemRxCpltCallback+0x694>)
 8006cc6:	edd3 7a00 	vldr	s15, [r3]
 8006cca:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006d6c <HAL_I2C_MemRxCpltCallback+0x6bc>
 8006cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd6:	d54b      	bpl.n	8006d70 <HAL_I2C_MemRxCpltCallback+0x6c0>
 8006cd8:	f001 f86a 	bl	8007db0 <YAW_MIN_VAL>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	461a      	mov	r2, r3
 8006ce0:	e04a      	b.n	8006d78 <HAL_I2C_MemRxCpltCallback+0x6c8>
 8006ce2:	bf00      	nop
 8006ce4:	000040c4 	.word	0x000040c4
 8006ce8:	00004094 	.word	0x00004094
 8006cec:	00000184 	.word	0x00000184
 8006cf0:	000040c8 	.word	0x000040c8
 8006cf4:	00004098 	.word	0x00004098
 8006cf8:	000040cc 	.word	0x000040cc
 8006cfc:	0000409c 	.word	0x0000409c
 8006d00:	000040d0 	.word	0x000040d0
 8006d04:	000040a0 	.word	0x000040a0
 8006d08:	000040d4 	.word	0x000040d4
 8006d0c:	000040a4 	.word	0x000040a4
 8006d10:	000040d8 	.word	0x000040d8
 8006d14:	000040a8 	.word	0x000040a8
 8006d18:	00004118 	.word	0x00004118
 8006d1c:	000040dc 	.word	0x000040dc
 8006d20:	0000412c 	.word	0x0000412c
 8006d24:	000040e4 	.word	0x000040e4
 8006d28:	00004140 	.word	0x00004140
 8006d2c:	000040e0 	.word	0x000040e0
 8006d30:	00004178 	.word	0x00004178
 8006d34:	000040e8 	.word	0x000040e8
 8006d38:	0000418c 	.word	0x0000418c
 8006d3c:	000040f0 	.word	0x000040f0
 8006d40:	000041a0 	.word	0x000041a0
 8006d44:	000040ec 	.word	0x000040ec
 8006d48:	000040ac 	.word	0x000040ac
 8006d4c:	000040b0 	.word	0x000040b0
 8006d50:	000040b4 	.word	0x000040b4
 8006d54:	000040b8 	.word	0x000040b8
 8006d58:	000040bc 	.word	0x000040bc
 8006d5c:	00004080 	.word	0x00004080
 8006d60:	00000014 	.word	0x00000014
 8006d64:	000040c0 	.word	0x000040c0
 8006d68:	459c4000 	.word	0x459c4000
 8006d6c:	c59c4000 	.word	0xc59c4000
 8006d70:	f001 f85e 	bl	8007e30 <YAW_GOOD_VAL>
 8006d74:	4603      	mov	r3, r0
 8006d76:	461a      	mov	r2, r3
 8006d78:	4bc3      	ldr	r3, [pc, #780]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d7a:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006d7c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006d80:	f7fc fd4a 	bl	8003818 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006d84:	4bc0      	ldr	r3, [pc, #768]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d86:	885b      	ldrh	r3, [r3, #2]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4bc0      	ldr	r3, [pc, #768]	@ (800708c <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	dd05      	ble.n	8006da0 <HAL_I2C_MemRxCpltCallback+0x6f0>
				MYDRON.THRUST = thrust_limit;
 8006d94:	4bbd      	ldr	r3, [pc, #756]	@ (800708c <HAL_I2C_MemRxCpltCallback+0x9dc>)
 8006d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	4bba      	ldr	r3, [pc, #744]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006d9e:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006da0:	4bbb      	ldr	r3, [pc, #748]	@ (8007090 <HAL_I2C_MemRxCpltCallback+0x9e0>)
 8006da2:	edd3 7a04 	vldr	s15, [r3, #16]
 8006da6:	eeb0 0a67 	vmov.f32	s0, s15
 8006daa:	f000 fbb9 	bl	8007520 <WartoscBezwgledna>
 8006dae:	eef0 7a40 	vmov.f32	s15, s0
 8006db2:	eeb0 0a67 	vmov.f32	s0, s15
 8006db6:	f000 ff5f 	bl	8007c78 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 8006dba:	4bb6      	ldr	r3, [pc, #728]	@ (8007094 <HAL_I2C_MemRxCpltCallback+0x9e4>)
 8006dbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8006dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8006dc4:	f000 fbac 	bl	8007520 <WartoscBezwgledna>
 8006dc8:	eef0 7a40 	vmov.f32	s15, s0
 8006dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8006dd0:	f000 ff52 	bl	8007c78 <Stack_Push>
			Stack_Push(now_pitch);
 8006dd4:	4bb0      	ldr	r3, [pc, #704]	@ (8007098 <HAL_I2C_MemRxCpltCallback+0x9e8>)
 8006dd6:	edd3 7a00 	vldr	s15, [r3]
 8006dda:	eeb0 0a67 	vmov.f32	s0, s15
 8006dde:	f000 ff4b 	bl	8007c78 <Stack_Push>
			Stack_Push(now_rool);
 8006de2:	4bae      	ldr	r3, [pc, #696]	@ (800709c <HAL_I2C_MemRxCpltCallback+0x9ec>)
 8006de4:	edd3 7a00 	vldr	s15, [r3]
 8006de8:	eeb0 0a67 	vmov.f32	s0, s15
 8006dec:	f000 ff44 	bl	8007c78 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//trust 7000 max
 8006df0:	4ba5      	ldr	r3, [pc, #660]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006df2:	885b      	ldrh	r3, [r3, #2]
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dfc:	ed9f 6b9c 	vldr	d6, [pc, #624]	@ 8007070 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006e00:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e04:	4ba0      	ldr	r3, [pc, #640]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e12:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e16:	4b9c      	ldr	r3, [pc, #624]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e1c:	ee07 3a90 	vmov	s15, r3
 8006e20:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e28:	4b97      	ldr	r3, [pc, #604]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e2a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e36:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e3a:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8007078 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006e3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e42:	ed9f 6b8f 	vldr	d6, [pc, #572]	@ 8007080 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006e46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e4a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e4e:	ee17 2a90 	vmov	r2, s15
 8006e52:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d832      	bhi.n	8006ec0 <HAL_I2C_MemRxCpltCallback+0x810>
 8006e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e5c:	885b      	ldrh	r3, [r3, #2]
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e66:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8007070 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006e6a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e6e:	4b86      	ldr	r3, [pc, #536]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e70:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e80:	4b81      	ldr	r3, [pc, #516]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e92:	4b7d      	ldr	r3, [pc, #500]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006e94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e98:	ee07 3a90 	vmov	s15, r3
 8006e9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ea0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006ea4:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8007078 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006ea8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006eac:	ed9f 6b74 	vldr	d6, [pc, #464]	@ 8007080 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006eb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006eb4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006eb8:	ee17 3a90 	vmov	r3, s15
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	e001      	b.n	8006ec4 <HAL_I2C_MemRxCpltCallback+0x814>
 8006ec0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006ec4:	4a76      	ldr	r2, [pc, #472]	@ (80070a0 <HAL_I2C_MemRxCpltCallback+0x9f0>)
 8006ec6:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006eca:	885b      	ldrh	r3, [r3, #2]
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ed4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007070 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006ed8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006edc:	4b6a      	ldr	r3, [pc, #424]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ede:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006ee2:	ee07 3a90 	vmov	s15, r3
 8006ee6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006eea:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006eee:	4b66      	ldr	r3, [pc, #408]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006ef0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006efc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f00:	4b61      	ldr	r3, [pc, #388]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f12:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8007078 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006f16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f1a:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8007080 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006f1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f26:	ee17 2a90 	vmov	r2, s15
 8006f2a:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d832      	bhi.n	8006f98 <HAL_I2C_MemRxCpltCallback+0x8e8>
 8006f32:	4b55      	ldr	r3, [pc, #340]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f34:	885b      	ldrh	r3, [r3, #2]
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f3e:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8007070 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006f42:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f46:	4b50      	ldr	r3, [pc, #320]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f4c:	ee07 3a90 	vmov	s15, r3
 8006f50:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f54:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f58:	4b4b      	ldr	r3, [pc, #300]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f66:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006f6a:	4b47      	ldr	r3, [pc, #284]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006f6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f70:	ee07 3a90 	vmov	s15, r3
 8006f74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f7c:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8007078 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006f80:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f84:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8007080 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006f88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f90:	ee17 3a90 	vmov	r3, s15
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	e001      	b.n	8006f9c <HAL_I2C_MemRxCpltCallback+0x8ec>
 8006f98:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006f9c:	4a41      	ldr	r2, [pc, #260]	@ (80070a4 <HAL_I2C_MemRxCpltCallback+0x9f4>)
 8006f9e:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006fa0:	4b39      	ldr	r3, [pc, #228]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006fa2:	885b      	ldrh	r3, [r3, #2]
 8006fa4:	ee07 3a90 	vmov	s15, r3
 8006fa8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fac:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 8007070 <HAL_I2C_MemRxCpltCallback+0x9c0>
 8006fb0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006fb4:	4b34      	ldr	r3, [pc, #208]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006fb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fc2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006fc6:	4b30      	ldr	r3, [pc, #192]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006fc8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fd4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8006fda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fe6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006fea:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8007078 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8006fee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ff2:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8007080 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8006ff6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ffa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006ffe:	ee17 2a90 	vmov	r2, s15
 8007002:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8007006:	429a      	cmp	r2, r3
 8007008:	d84e      	bhi.n	80070a8 <HAL_I2C_MemRxCpltCallback+0x9f8>
 800700a:	4b1f      	ldr	r3, [pc, #124]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 800700c:	885b      	ldrh	r3, [r3, #2]
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007016:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 8007070 <HAL_I2C_MemRxCpltCallback+0x9c0>
 800701a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800701e:	4b1a      	ldr	r3, [pc, #104]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8007020:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007024:	ee07 3a90 	vmov	s15, r3
 8007028:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800702c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007030:	4b15      	ldr	r3, [pc, #84]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8007032:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800703e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007042:	4b11      	ldr	r3, [pc, #68]	@ (8007088 <HAL_I2C_MemRxCpltCallback+0x9d8>)
 8007044:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007048:	ee07 3a90 	vmov	s15, r3
 800704c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007050:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007054:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8007078 <HAL_I2C_MemRxCpltCallback+0x9c8>
 8007058:	ee37 7b06 	vadd.f64	d7, d7, d6
 800705c:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8007080 <HAL_I2C_MemRxCpltCallback+0x9d0>
 8007060:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007064:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007068:	ee17 3a90 	vmov	r3, s15
 800706c:	b29b      	uxth	r3, r3
 800706e:	e01d      	b.n	80070ac <HAL_I2C_MemRxCpltCallback+0x9fc>
 8007070:	66666666 	.word	0x66666666
 8007074:	3fe66666 	.word	0x3fe66666
 8007078:	00000000 	.word	0x00000000
 800707c:	40c48200 	.word	0x40c48200
 8007080:	00000000 	.word	0x00000000
 8007084:	407f4000 	.word	0x407f4000
 8007088:	00000184 	.word	0x00000184
 800708c:	0000406a 	.word	0x0000406a
 8007090:	00004118 	.word	0x00004118
 8007094:	0000412c 	.word	0x0000412c
 8007098:	00004088 	.word	0x00004088
 800709c:	0000408c 	.word	0x0000408c
 80070a0:	000041b4 	.word	0x000041b4
 80070a4:	000041b6 	.word	0x000041b6
 80070a8:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80070ac:	4a92      	ldr	r2, [pc, #584]	@ (80072f8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 80070ae:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//
 80070b0:	4b92      	ldr	r3, [pc, #584]	@ (80072fc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 80070b2:	885b      	ldrh	r3, [r3, #2]
 80070b4:	ee07 3a90 	vmov	s15, r3
 80070b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070bc:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 80072c8 <HAL_I2C_MemRxCpltCallback+0xc18>
 80070c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80070c4:	4b8d      	ldr	r3, [pc, #564]	@ (80072fc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 80070c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80070d6:	4b89      	ldr	r3, [pc, #548]	@ (80072fc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 80070d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80070dc:	ee07 3a90 	vmov	s15, r3
 80070e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070e4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80070e8:	4b84      	ldr	r3, [pc, #528]	@ (80072fc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 80070ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80070fa:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 80072d0 <HAL_I2C_MemRxCpltCallback+0xc20>
 80070fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007102:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 80072d8 <HAL_I2C_MemRxCpltCallback+0xc28>
 8007106:	ee37 7b06 	vadd.f64	d7, d7, d6
 800710a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800710e:	ee17 2a90 	vmov	r2, s15
 8007112:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8007116:	429a      	cmp	r2, r3
 8007118:	d832      	bhi.n	8007180 <HAL_I2C_MemRxCpltCallback+0xad0>
 800711a:	4b78      	ldr	r3, [pc, #480]	@ (80072fc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 800711c:	885b      	ldrh	r3, [r3, #2]
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007126:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 80072c8 <HAL_I2C_MemRxCpltCallback+0xc18>
 800712a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800712e:	4b73      	ldr	r3, [pc, #460]	@ (80072fc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007130:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007134:	ee07 3a90 	vmov	s15, r3
 8007138:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800713c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007140:	4b6e      	ldr	r3, [pc, #440]	@ (80072fc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007142:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800714e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007152:	4b6a      	ldr	r3, [pc, #424]	@ (80072fc <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007154:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007160:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007164:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 80072d0 <HAL_I2C_MemRxCpltCallback+0xc20>
 8007168:	ee37 7b06 	vadd.f64	d7, d7, d6
 800716c:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 80072d8 <HAL_I2C_MemRxCpltCallback+0xc28>
 8007170:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007174:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007178:	ee17 3a90 	vmov	r3, s15
 800717c:	b29b      	uxth	r3, r3
 800717e:	e001      	b.n	8007184 <HAL_I2C_MemRxCpltCallback+0xad4>
 8007180:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8007184:	4a5e      	ldr	r2, [pc, #376]	@ (8007300 <HAL_I2C_MemRxCpltCallback+0xc50>)
 8007186:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 8007188:	4b5e      	ldr	r3, [pc, #376]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc54>)
 800718a:	881a      	ldrh	r2, [r3, #0]
 800718c:	4b5e      	ldr	r3, [pc, #376]	@ (8007308 <HAL_I2C_MemRxCpltCallback+0xc58>)
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d004      	beq.n	800719e <HAL_I2C_MemRxCpltCallback+0xaee>
				ESC_1_SPEED(SPEED1);
 8007194:	4b5b      	ldr	r3, [pc, #364]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc54>)
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f7f9 fe4b 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 800719e:	4b5b      	ldr	r3, [pc, #364]	@ (800730c <HAL_I2C_MemRxCpltCallback+0xc5c>)
 80071a0:	881a      	ldrh	r2, [r3, #0]
 80071a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007310 <HAL_I2C_MemRxCpltCallback+0xc60>)
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d004      	beq.n	80071b4 <HAL_I2C_MemRxCpltCallback+0xb04>
				ESC_2_SPEED(SPEED2);
 80071aa:	4b58      	ldr	r3, [pc, #352]	@ (800730c <HAL_I2C_MemRxCpltCallback+0xc5c>)
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7f9 fe62 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 80071b4:	4b50      	ldr	r3, [pc, #320]	@ (80072f8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 80071b6:	881a      	ldrh	r2, [r3, #0]
 80071b8:	4b56      	ldr	r3, [pc, #344]	@ (8007314 <HAL_I2C_MemRxCpltCallback+0xc64>)
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d004      	beq.n	80071ca <HAL_I2C_MemRxCpltCallback+0xb1a>
				ESC_3_SPEED(SPEED3);
 80071c0:	4b4d      	ldr	r3, [pc, #308]	@ (80072f8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7f9 fe79 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 80071ca:	4b4d      	ldr	r3, [pc, #308]	@ (8007300 <HAL_I2C_MemRxCpltCallback+0xc50>)
 80071cc:	881a      	ldrh	r2, [r3, #0]
 80071ce:	4b52      	ldr	r3, [pc, #328]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc68>)
 80071d0:	881b      	ldrh	r3, [r3, #0]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d004      	beq.n	80071e0 <HAL_I2C_MemRxCpltCallback+0xb30>
				ESC_4_SPEED(SPEED4);
 80071d6:	4b4a      	ldr	r3, [pc, #296]	@ (8007300 <HAL_I2C_MemRxCpltCallback+0xc50>)
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7f9 fe90 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 80071e0:	4b48      	ldr	r3, [pc, #288]	@ (8007304 <HAL_I2C_MemRxCpltCallback+0xc54>)
 80071e2:	881a      	ldrh	r2, [r3, #0]
 80071e4:	4b48      	ldr	r3, [pc, #288]	@ (8007308 <HAL_I2C_MemRxCpltCallback+0xc58>)
 80071e6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 80071e8:	4b48      	ldr	r3, [pc, #288]	@ (800730c <HAL_I2C_MemRxCpltCallback+0xc5c>)
 80071ea:	881a      	ldrh	r2, [r3, #0]
 80071ec:	4b48      	ldr	r3, [pc, #288]	@ (8007310 <HAL_I2C_MemRxCpltCallback+0xc60>)
 80071ee:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 80071f0:	4b41      	ldr	r3, [pc, #260]	@ (80072f8 <HAL_I2C_MemRxCpltCallback+0xc48>)
 80071f2:	881a      	ldrh	r2, [r3, #0]
 80071f4:	4b47      	ldr	r3, [pc, #284]	@ (8007314 <HAL_I2C_MemRxCpltCallback+0xc64>)
 80071f6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 80071f8:	4b41      	ldr	r3, [pc, #260]	@ (8007300 <HAL_I2C_MemRxCpltCallback+0xc50>)
 80071fa:	881a      	ldrh	r2, [r3, #0]
 80071fc:	4b46      	ldr	r3, [pc, #280]	@ (8007318 <HAL_I2C_MemRxCpltCallback+0xc68>)
 80071fe:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8007200:	2200      	movs	r2, #0
 8007202:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007206:	4845      	ldr	r0, [pc, #276]	@ (800731c <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007208:	f007 fafc 	bl	800e804 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 800720c:	4b44      	ldr	r3, [pc, #272]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xc70>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d125      	bne.n	8007260 <HAL_I2C_MemRxCpltCallback+0xbb0>
		HMC583L_IRQ = 0;
 8007214:	4b42      	ldr	r3, [pc, #264]	@ (8007320 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]
		HMC5883L_Get_Z_End_IT();
 800721a:	f7f9 ff79 	bl	8001110 <HMC5883L_Get_Z_End_IT>
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 800721e:	4b41      	ldr	r3, [pc, #260]	@ (8007324 <HAL_I2C_MemRxCpltCallback+0xc74>)
 8007220:	edd3 7a00 	vldr	s15, [r3]
 8007224:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007228:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 80072e0 <HAL_I2C_MemRxCpltCallback+0xc30>
 800722c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007230:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 80072e8 <HAL_I2C_MemRxCpltCallback+0xc38>
 8007234:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8007238:	4b3b      	ldr	r3, [pc, #236]	@ (8007328 <HAL_I2C_MemRxCpltCallback+0xc78>)
 800723a:	edd3 7a00 	vldr	s15, [r3]
 800723e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007242:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80072f0 <HAL_I2C_MemRxCpltCallback+0xc40>
 8007246:	ee27 7b05 	vmul.f64	d7, d7, d5
 800724a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800724e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007252:	4b34      	ldr	r3, [pc, #208]	@ (8007324 <HAL_I2C_MemRxCpltCallback+0xc74>)
 8007254:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8007258:	4b32      	ldr	r3, [pc, #200]	@ (8007324 <HAL_I2C_MemRxCpltCallback+0xc74>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a32      	ldr	r2, [pc, #200]	@ (8007328 <HAL_I2C_MemRxCpltCallback+0xc78>)
 800725e:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8007260:	4b32      	ldr	r3, [pc, #200]	@ (800732c <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d113      	bne.n	8007290 <HAL_I2C_MemRxCpltCallback+0xbe0>
		temperature = BMP180_GET_temp_IT();
 8007268:	f7f9 fa92 	bl	8000790 <BMP180_GET_temp_IT>
 800726c:	4603      	mov	r3, r0
 800726e:	461a      	mov	r2, r3
 8007270:	4b2f      	ldr	r3, [pc, #188]	@ (8007330 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8007272:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 8007274:	4b2e      	ldr	r3, [pc, #184]	@ (8007330 <HAL_I2C_MemRxCpltCallback+0xc80>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	b29b      	uxth	r3, r3
 800727a:	4618      	mov	r0, r3
 800727c:	f7f9 fbac 	bl	80009d8 <BMP180_GET_temp>
 8007280:	eef0 7a40 	vmov.f32	s15, s0
 8007284:	4b2b      	ldr	r3, [pc, #172]	@ (8007334 <HAL_I2C_MemRxCpltCallback+0xc84>)
 8007286:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 800728a:	4b28      	ldr	r3, [pc, #160]	@ (800732c <HAL_I2C_MemRxCpltCallback+0xc7c>)
 800728c:	2200      	movs	r2, #0
 800728e:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 8007290:	4b26      	ldr	r3, [pc, #152]	@ (800732c <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d113      	bne.n	80072c0 <HAL_I2C_MemRxCpltCallback+0xc10>
		pressure = BMP180_GET_pres_IT();
 8007298:	f7f9 fa90 	bl	80007bc <BMP180_GET_pres_IT>
 800729c:	4603      	mov	r3, r0
 800729e:	461a      	mov	r2, r3
 80072a0:	4b25      	ldr	r3, [pc, #148]	@ (8007338 <HAL_I2C_MemRxCpltCallback+0xc88>)
 80072a2:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 80072a4:	4b24      	ldr	r3, [pc, #144]	@ (8007338 <HAL_I2C_MemRxCpltCallback+0xc88>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7f9 fbf0 	bl	8000a90 <BMP180_GET_pres>
 80072b0:	eef0 7a40 	vmov.f32	s15, s0
 80072b4:	4b21      	ldr	r3, [pc, #132]	@ (800733c <HAL_I2C_MemRxCpltCallback+0xc8c>)
 80072b6:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 80072ba:	4b1c      	ldr	r3, [pc, #112]	@ (800732c <HAL_I2C_MemRxCpltCallback+0xc7c>)
 80072bc:	2200      	movs	r2, #0
 80072be:	701a      	strb	r2, [r3, #0]
	}
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	66666666 	.word	0x66666666
 80072cc:	3fe66666 	.word	0x3fe66666
 80072d0:	00000000 	.word	0x00000000
 80072d4:	40c48200 	.word	0x40c48200
 80072d8:	00000000 	.word	0x00000000
 80072dc:	407f4000 	.word	0x407f4000
 80072e0:	9999999a 	.word	0x9999999a
 80072e4:	3fc99999 	.word	0x3fc99999
 80072e8:	33333333 	.word	0x33333333
 80072ec:	3ff33333 	.word	0x3ff33333
 80072f0:	aaaaaaab 	.word	0xaaaaaaab
 80072f4:	3feaaaaa 	.word	0x3feaaaaa
 80072f8:	000041b8 	.word	0x000041b8
 80072fc:	00000184 	.word	0x00000184
 8007300:	000041ba 	.word	0x000041ba
 8007304:	000041b4 	.word	0x000041b4
 8007308:	000041bc 	.word	0x000041bc
 800730c:	000041b6 	.word	0x000041b6
 8007310:	000041be 	.word	0x000041be
 8007314:	000041c0 	.word	0x000041c0
 8007318:	000041c2 	.word	0x000041c2
 800731c:	58021000 	.word	0x58021000
 8007320:	000041fd 	.word	0x000041fd
 8007324:	00000058 	.word	0x00000058
 8007328:	00000068 	.word	0x00000068
 800732c:	000041fe 	.word	0x000041fe
 8007330:	000000c4 	.word	0x000000c4
 8007334:	000000e8 	.word	0x000000e8
 8007338:	000000c8 	.word	0x000000c8
 800733c:	000000ec 	.word	0x000000ec

08007340 <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8007340:	b580      	push	{r7, lr}
 8007342:	ed2d 8b04 	vpush	{d8-d9}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	4611      	mov	r1, r2
 8007350:	461a      	mov	r2, r3
 8007352:	460b      	mov	r3, r1
 8007354:	71fb      	strb	r3, [r7, #7]
 8007356:	4613      	mov	r3, r2
 8007358:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2200      	movs	r2, #0
 800735e:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8007360:	79ba      	ldrb	r2, [r7, #6]
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	e02e      	b.n	80073cc <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007374:	ee07 3a90 	vmov	s15, r3
 8007378:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800737c:	79fa      	ldrb	r2, [r7, #7]
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	4413      	add	r3, r2
 8007382:	461a      	mov	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	ee07 3a90 	vmov	s15, r3
 800739c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80073a0:	eeb0 1b47 	vmov.f64	d1, d7
 80073a4:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80073a8:	f017 f84a 	bl	801e440 <pow>
 80073ac:	eeb0 7b40 	vmov.f64	d7, d0
 80073b0:	ee29 7b07 	vmul.f64	d7, d9, d7
 80073b4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80073b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80073bc:	ee17 3a90 	vmov	r3, s15
 80073c0:	b21a      	sxth	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	3301      	adds	r3, #1
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	dacc      	bge.n	800736e <convert_array_to_value+0x2e>
	}

}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	ecbd 8b04 	vpop	{d8-d9}
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80073e2:	b590      	push	{r4, r7, lr}
 80073e4:	b087      	sub	sp, #28
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6039      	str	r1, [r7, #0]
 80073ea:	4611      	mov	r1, r2
 80073ec:	461a      	mov	r2, r3
 80073ee:	4603      	mov	r3, r0
 80073f0:	80fb      	strh	r3, [r7, #6]
 80073f2:	460b      	mov	r3, r1
 80073f4:	717b      	strb	r3, [r7, #5]
 80073f6:	4613      	mov	r3, r2
 80073f8:	713b      	strb	r3, [r7, #4]
	int x = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007402:	793a      	ldrb	r2, [r7, #4]
 8007404:	797b      	ldrb	r3, [r7, #5]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	e03e      	b.n	800748e <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 8007410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d028      	beq.n	800746a <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	4619      	mov	r1, r3
 8007420:	200a      	movs	r0, #10
 8007422:	f000 f83d 	bl	80074a0 <potenga>
 8007426:	4603      	mov	r3, r0
 8007428:	b29b      	uxth	r3, r3
 800742a:	88fa      	ldrh	r2, [r7, #6]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	b29b      	uxth	r3, r3
 8007430:	80fb      	strh	r3, [r7, #6]
			x++;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	3301      	adds	r3, #1
 8007436:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8007438:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800744a:	eeb0 1b47 	vmov.f64	d1, d7
 800744e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007452:	f016 fff5 	bl	801e440 <pow>
 8007456:	eeb0 7b40 	vmov.f64	d7, d0
 800745a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800745e:	ee17 3a90 	vmov	r3, s15
 8007462:	b29b      	uxth	r3, r3
 8007464:	429c      	cmp	r4, r3
 8007466:	dad3      	bge.n	8007410 <convert_value_to_array+0x2e>
 8007468:	e000      	b.n	800746c <convert_value_to_array+0x8a>
				break;
 800746a:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 800746c:	797a      	ldrb	r2, [r7, #5]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	461a      	mov	r2, r3
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	4413      	add	r3, r2
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	3301      	adds	r3, #1
 8007482:	613b      	str	r3, [r7, #16]
		x = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	429a      	cmp	r2, r3
 8007494:	dad0      	bge.n	8007438 <convert_value_to_array+0x56>
	}
}
 8007496:	bf00      	nop
 8007498:	bf00      	nop
 800749a:	371c      	adds	r7, #28
 800749c:	46bd      	mov	sp, r7
 800749e:	bd90      	pop	{r4, r7, pc}

080074a0 <potenga>:
uint32_t potenga(int a, int b){
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <potenga+0x18>
		return 1;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e02d      	b.n	8007514 <potenga+0x74>
	}
	if(b == 1){
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d101      	bne.n	80074c2 <potenga+0x22>
		return a;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	e028      	b.n	8007514 <potenga+0x74>
	}
	if(b > 1){
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	dd10      	ble.n	80074ea <potenga+0x4a>
			for(int i = 1; i < b; i++){
 80074c8:	2301      	movs	r3, #1
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	e007      	b.n	80074de <potenga+0x3e>
			a = a*c;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	fb02 f303 	mul.w	r3, r2, r3
 80074d6:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3301      	adds	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	dbf3      	blt.n	80074ce <potenga+0x2e>
		}
		return a;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	e014      	b.n	8007514 <potenga+0x74>
	}
	if(b < 0){
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	da10      	bge.n	8007512 <potenga+0x72>
		for(int i = 0; i < b; i++){
 80074f0:	2300      	movs	r3, #0
 80074f2:	613b      	str	r3, [r7, #16]
 80074f4:	e007      	b.n	8007506 <potenga+0x66>
			a = a/c;
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80074fe:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	3301      	adds	r3, #1
 8007504:	613b      	str	r3, [r7, #16]
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	dbf3      	blt.n	80074f6 <potenga+0x56>
		}
		return a;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	e000      	b.n	8007514 <potenga+0x74>
	}
	return a;
 8007512:	687b      	ldr	r3, [r7, #4]
}
 8007514:	4618      	mov	r0, r3
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 800752a:	edd7 7a01 	vldr	s15, [r7, #4]
 800752e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007536:	d504      	bpl.n	8007542 <WartoscBezwgledna+0x22>
 8007538:	edd7 7a01 	vldr	s15, [r7, #4]
 800753c:	eef1 7a67 	vneg.f32	s15, s15
 8007540:	e001      	b.n	8007546 <WartoscBezwgledna+0x26>
 8007542:	edd7 7a01 	vldr	s15, [r7, #4]
 8007546:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	ee07 3a90 	vmov	s15, r3
}
 8007550:	eeb0 0a67 	vmov.f32	s0, s15
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
	...

08007560 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	71fb      	strb	r3, [r7, #7]
 800756a:	460b      	mov	r3, r1
 800756c:	71bb      	strb	r3, [r7, #6]
 800756e:	4613      	mov	r3, r2
 8007570:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 8007572:	4b09      	ldr	r3, [pc, #36]	@ (8007598 <RGB_LED_Set_color+0x38>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	797a      	ldrb	r2, [r7, #5]
 8007578:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 800757a:	4b07      	ldr	r3, [pc, #28]	@ (8007598 <RGB_LED_Set_color+0x38>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	79fa      	ldrb	r2, [r7, #7]
 8007580:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 8007582:	4b05      	ldr	r3, [pc, #20]	@ (8007598 <RGB_LED_Set_color+0x38>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	79ba      	ldrb	r2, [r7, #6]
 8007588:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	24000380 	.word	0x24000380
 800759c:	00000000 	.word	0x00000000

080075a0 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	ee07 3a90 	vmov	s15, r3
 80075b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80075b8:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007608 <RGB_LED_For_BAT+0x68>
 80075bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075c0:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007610 <RGB_LED_For_BAT+0x70>
 80075c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80075c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80075cc:	edc7 7a00 	vstr	s15, [r7]
 80075d0:	783b      	ldrb	r3, [r7, #0]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	79fa      	ldrb	r2, [r7, #7]
 80075d6:	ee07 2a90 	vmov	s15, r2
 80075da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80075e2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8007608 <RGB_LED_For_BAT+0x68>
 80075e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80075ee:	edc7 7a00 	vstr	s15, [r7]
 80075f2:	783a      	ldrb	r2, [r7, #0]
 80075f4:	b2d1      	uxtb	r1, r2
 80075f6:	2200      	movs	r2, #0
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff ffb1 	bl	8007560 <RGB_LED_Set_color>
}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	66666666 	.word	0x66666666
 800760c:	40046666 	.word	0x40046666
 8007610:	00000000 	.word	0x00000000
 8007614:	406fe000 	.word	0x406fe000

08007618 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007618:	b590      	push	{r4, r7, lr}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	6039      	str	r1, [r7, #0]
 8007620:	4611      	mov	r1, r2
 8007622:	461a      	mov	r2, r3
 8007624:	4603      	mov	r3, r0
 8007626:	80fb      	strh	r3, [r7, #6]
 8007628:	460b      	mov	r3, r1
 800762a:	717b      	strb	r3, [r7, #5]
 800762c:	4613      	mov	r3, r2
 800762e:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007638:	793a      	ldrb	r2, [r7, #4]
 800763a:	797b      	ldrb	r3, [r7, #5]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007644:	2b00      	cmp	r3, #0
 8007646:	da04      	bge.n	8007652 <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007648:	797b      	ldrb	r3, [r7, #5]
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	4413      	add	r3, r2
 800764e:	222d      	movs	r2, #45	@ 0x2d
 8007650:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 8007652:	2301      	movs	r3, #1
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	e035      	b.n	80076c4 <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d01d      	beq.n	800769c <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	4619      	mov	r1, r3
 8007668:	200a      	movs	r0, #10
 800766a:	f7ff ff19 	bl	80074a0 <potenga>
 800766e:	4603      	mov	r3, r0
 8007670:	b29b      	uxth	r3, r3
 8007672:	88fa      	ldrh	r2, [r7, #6]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	b29b      	uxth	r3, r3
 8007678:	80fb      	strh	r3, [r7, #6]
			x++;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	3301      	adds	r3, #1
 800767e:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8007680:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	4619      	mov	r1, r3
 800768c:	200a      	movs	r0, #10
 800768e:	f7ff ff07 	bl	80074a0 <potenga>
 8007692:	4603      	mov	r3, r0
 8007694:	b29b      	uxth	r3, r3
 8007696:	429c      	cmp	r4, r3
 8007698:	dade      	bge.n	8007658 <convert_value_to_array2+0x40>
 800769a:	e000      	b.n	800769e <convert_value_to_array2+0x86>
				break;
 800769c:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	7979      	ldrb	r1, [r7, #5]
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	440b      	add	r3, r1
 80076a8:	4619      	mov	r1, r3
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	440b      	add	r3, r1
 80076ae:	3230      	adds	r2, #48	@ 0x30
 80076b0:	b2d2      	uxtb	r2, r2
 80076b2:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	3301      	adds	r3, #1
 80076b8:	613b      	str	r3, [r7, #16]
		x = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	dad9      	bge.n	8007680 <convert_value_to_array2+0x68>
	}
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd90      	pop	{r4, r7, pc}

080076d6 <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 80076d6:	b580      	push	{r7, lr}
 80076d8:	ed2d 8b02 	vpush	{d8}
 80076dc:	b08c      	sub	sp, #48	@ 0x30
 80076de:	af00      	add	r7, sp, #0
 80076e0:	ed87 0a03 	vstr	s0, [r7, #12]
 80076e4:	60b8      	str	r0, [r7, #8]
 80076e6:	460b      	mov	r3, r1
 80076e8:	71fb      	strb	r3, [r7, #7]
 80076ea:	4613      	mov	r3, r2
 80076ec:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 80076f6:	79ba      	ldrb	r2, [r7, #6]
 80076f8:	79fb      	ldrb	r3, [r7, #7]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 8007702:	edd7 7a03 	vldr	s15, [r7, #12]
 8007706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800770a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770e:	d50a      	bpl.n	8007726 <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	4413      	add	r3, r2
 8007716:	222d      	movs	r2, #45	@ 0x2d
 8007718:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 800771a:	edd7 7a03 	vldr	s15, [r7, #12]
 800771e:	eef1 7a67 	vneg.f32	s15, s15
 8007722:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 8007726:	2301      	movs	r3, #1
 8007728:	61fb      	str	r3, [r7, #28]
 800772a:	e021      	b.n	8007770 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800773a:	eeb0 1b47 	vmov.f64	d1, d7
 800773e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007742:	f016 fe7d 	bl	801e440 <pow>
 8007746:	eeb0 7b40 	vmov.f64	d7, d0
 800774a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800774e:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 8007752:	ed97 7a03 	vldr	s14, [r7, #12]
 8007756:	edd7 7a04 	vldr	s15, [r7, #16]
 800775a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800775e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007762:	da0b      	bge.n	800777c <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	3301      	adds	r3, #1
 8007768:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	3301      	adds	r3, #1
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	69fa      	ldr	r2, [r7, #28]
 8007776:	429a      	cmp	r2, r3
 8007778:	dbd8      	blt.n	800772c <convert_value_to_array3+0x56>
 800777a:	e000      	b.n	800777e <convert_value_to_array3+0xa8>
			break;
 800777c:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778a:	2b00      	cmp	r3, #0
 800778c:	dc07      	bgt.n	800779e <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	3301      	adds	r3, #1
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	4413      	add	r3, r2
 8007796:	222e      	movs	r2, #46	@ 0x2e
 8007798:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 800779a:	2301      	movs	r3, #1
 800779c:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	dd0a      	ble.n	80077ba <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 80077a4:	79fa      	ldrb	r2, [r7, #7]
 80077a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a8:	4413      	add	r3, r2
 80077aa:	3301      	adds	r3, #1
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	4413      	add	r3, r2
 80077b0:	222e      	movs	r2, #46	@ 0x2e
 80077b2:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	3301      	adds	r3, #1
 80077b8:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 80077ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80077be:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	1e5a      	subs	r2, r3, #1
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80077d2:	eeb0 1b47 	vmov.f64	d1, d7
 80077d6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80077da:	f016 fe31 	bl	801e440 <pow>
 80077de:	eeb0 7b40 	vmov.f64	d7, d0
 80077e2:	ee28 7b07 	vmul.f64	d7, d8, d7
 80077e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80077ea:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80077ee:	2300      	movs	r3, #0
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	e05f      	b.n	80078b4 <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 80077f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80077f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007800:	d93d      	bls.n	800787e <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 8007802:	edd7 7a03 	vldr	s15, [r7, #12]
 8007806:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	1e5a      	subs	r2, r3, #1
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	ee07 3a90 	vmov	s15, r3
 8007816:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800781a:	eeb0 1b47 	vmov.f64	d1, d7
 800781e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007822:	f016 fe0d 	bl	801e440 <pow>
 8007826:	eeb0 7b40 	vmov.f64	d7, d0
 800782a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800782e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007832:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 8007836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007838:	3301      	adds	r3, #1
 800783a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	1e5a      	subs	r2, r3, #1
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	ee07 3a90 	vmov	s15, r3
 8007848:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800784c:	eeb0 1b47 	vmov.f64	d1, d7
 8007850:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007854:	f016 fdf4 	bl	801e440 <pow>
 8007858:	eeb0 7b40 	vmov.f64	d7, d0
 800785c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007860:	ee17 3a90 	vmov	r3, s15
 8007864:	b29b      	uxth	r3, r3
 8007866:	ee07 3a90 	vmov	s15, r3
 800786a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800786e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787a:	dabb      	bge.n	80077f4 <convert_value_to_array3+0x11e>
 800787c:	e000      	b.n	8007880 <convert_value_to_array3+0x1aa>
				break;
 800787e:	bf00      	nop
		}

        if(loopnum == kropka){
 8007880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	429a      	cmp	r2, r3
 8007886:	d102      	bne.n	800788e <convert_value_to_array3+0x1b8>
            loopnum++;
 8007888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788a:	3301      	adds	r3, #1
 800788c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 800788e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007890:	b2da      	uxtb	r2, r3
 8007892:	79f9      	ldrb	r1, [r7, #7]
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	440b      	add	r3, r1
 8007898:	4619      	mov	r1, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	440b      	add	r3, r1
 800789e:	3230      	adds	r2, #48	@ 0x30
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80078a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a6:	3301      	adds	r3, #1
 80078a8:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	3301      	adds	r3, #1
 80078b2:	61bb      	str	r3, [r7, #24]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	3b02      	subs	r3, #2
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	dbbe      	blt.n	800783c <convert_value_to_array3+0x166>
	}
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	3730      	adds	r7, #48	@ 0x30
 80078c4:	46bd      	mov	sp, r7
 80078c6:	ecbd 8b02 	vpop	{d8}
 80078ca:	bd80      	pop	{r7, pc}

080078cc <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 80078d4:	4ba6      	ldr	r3, [pc, #664]	@ (8007b70 <uSD_Card_SendData_To_Buffer+0x2a4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	b218      	sxth	r0, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	01db      	lsls	r3, r3, #7
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	01db      	lsls	r3, r3, #7
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	3308      	adds	r3, #8
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	49a1      	ldr	r1, [pc, #644]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078f0:	f7ff fe92 	bl	8007618 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	01db      	lsls	r3, r3, #7
 80078f8:	3308      	adds	r3, #8
 80078fa:	4a9e      	ldr	r2, [pc, #632]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078fc:	2120      	movs	r1, #32
 80078fe:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 8007900:	4b9d      	ldr	r3, [pc, #628]	@ (8007b78 <uSD_Card_SendData_To_Buffer+0x2ac>)
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b218      	sxth	r0, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	01db      	lsls	r3, r3, #7
 800790c:	b2db      	uxtb	r3, r3
 800790e:	3309      	adds	r3, #9
 8007910:	b2da      	uxtb	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	01db      	lsls	r3, r3, #7
 8007918:	b2db      	uxtb	r3, r3
 800791a:	330f      	adds	r3, #15
 800791c:	b2db      	uxtb	r3, r3
 800791e:	4995      	ldr	r1, [pc, #596]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007920:	f7ff fe7a 	bl	8007618 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	01db      	lsls	r3, r3, #7
 8007928:	330f      	adds	r3, #15
 800792a:	4a92      	ldr	r2, [pc, #584]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800792c:	2120      	movs	r1, #32
 800792e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 8007930:	4b92      	ldr	r3, [pc, #584]	@ (8007b7c <uSD_Card_SendData_To_Buffer+0x2b0>)
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	b218      	sxth	r0, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	b2db      	uxtb	r3, r3
 800793a:	01db      	lsls	r3, r3, #7
 800793c:	b2db      	uxtb	r3, r3
 800793e:	3310      	adds	r3, #16
 8007940:	b2da      	uxtb	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	b2db      	uxtb	r3, r3
 8007946:	01db      	lsls	r3, r3, #7
 8007948:	b2db      	uxtb	r3, r3
 800794a:	3316      	adds	r3, #22
 800794c:	b2db      	uxtb	r3, r3
 800794e:	4989      	ldr	r1, [pc, #548]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007950:	f7ff fe62 	bl	8007618 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	01db      	lsls	r3, r3, #7
 8007958:	3316      	adds	r3, #22
 800795a:	4a86      	ldr	r2, [pc, #536]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800795c:	2120      	movs	r1, #32
 800795e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007960:	4b87      	ldr	r3, [pc, #540]	@ (8007b80 <uSD_Card_SendData_To_Buffer+0x2b4>)
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b218      	sxth	r0, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	b2db      	uxtb	r3, r3
 800796a:	01db      	lsls	r3, r3, #7
 800796c:	b2db      	uxtb	r3, r3
 800796e:	3317      	adds	r3, #23
 8007970:	b2da      	uxtb	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	01db      	lsls	r3, r3, #7
 8007978:	b2db      	uxtb	r3, r3
 800797a:	331d      	adds	r3, #29
 800797c:	b2db      	uxtb	r3, r3
 800797e:	497d      	ldr	r1, [pc, #500]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007980:	f7ff fe4a 	bl	8007618 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	01db      	lsls	r3, r3, #7
 8007988:	331d      	adds	r3, #29
 800798a:	4a7a      	ldr	r2, [pc, #488]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800798c:	2120      	movs	r1, #32
 800798e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007990:	4b7c      	ldr	r3, [pc, #496]	@ (8007b84 <uSD_Card_SendData_To_Buffer+0x2b8>)
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b218      	sxth	r0, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	b2db      	uxtb	r3, r3
 800799a:	01db      	lsls	r3, r3, #7
 800799c:	b2db      	uxtb	r3, r3
 800799e:	331e      	adds	r3, #30
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	01db      	lsls	r3, r3, #7
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	3324      	adds	r3, #36	@ 0x24
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	4971      	ldr	r1, [pc, #452]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079b0:	f7ff fe32 	bl	8007618 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	01db      	lsls	r3, r3, #7
 80079b8:	3324      	adds	r3, #36	@ 0x24
 80079ba:	4a6e      	ldr	r2, [pc, #440]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079bc:	2120      	movs	r1, #32
 80079be:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 80079c0:	4b71      	ldr	r3, [pc, #452]	@ (8007b88 <uSD_Card_SendData_To_Buffer+0x2bc>)
 80079c2:	edd3 7a00 	vldr	s15, [r3]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	01db      	lsls	r3, r3, #7
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	3325      	adds	r3, #37	@ 0x25
 80079d0:	b2d9      	uxtb	r1, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	01db      	lsls	r3, r3, #7
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	332d      	adds	r3, #45	@ 0x2d
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	4864      	ldr	r0, [pc, #400]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079e2:	eeb0 0a67 	vmov.f32	s0, s15
 80079e6:	f7ff fe76 	bl	80076d6 <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	01db      	lsls	r3, r3, #7
 80079ee:	332d      	adds	r3, #45	@ 0x2d
 80079f0:	4a60      	ldr	r2, [pc, #384]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079f2:	2120      	movs	r1, #32
 80079f4:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 80079f6:	4b65      	ldr	r3, [pc, #404]	@ (8007b8c <uSD_Card_SendData_To_Buffer+0x2c0>)
 80079f8:	edd3 7a00 	vldr	s15, [r3]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	01db      	lsls	r3, r3, #7
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	332e      	adds	r3, #46	@ 0x2e
 8007a06:	b2d9      	uxtb	r1, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	01db      	lsls	r3, r3, #7
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	3336      	adds	r3, #54	@ 0x36
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	4857      	ldr	r0, [pc, #348]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a18:	eeb0 0a67 	vmov.f32	s0, s15
 8007a1c:	f7ff fe5b 	bl	80076d6 <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	01db      	lsls	r3, r3, #7
 8007a24:	3336      	adds	r3, #54	@ 0x36
 8007a26:	4a53      	ldr	r2, [pc, #332]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a28:	2120      	movs	r1, #32
 8007a2a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 8007a2c:	4b58      	ldr	r3, [pc, #352]	@ (8007b90 <uSD_Card_SendData_To_Buffer+0x2c4>)
 8007a2e:	edd3 7a00 	vldr	s15, [r3]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	01db      	lsls	r3, r3, #7
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	3337      	adds	r3, #55	@ 0x37
 8007a3c:	b2d9      	uxtb	r1, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	01db      	lsls	r3, r3, #7
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	333f      	adds	r3, #63	@ 0x3f
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4849      	ldr	r0, [pc, #292]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8007a52:	f7ff fe40 	bl	80076d6 <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	01db      	lsls	r3, r3, #7
 8007a5a:	333f      	adds	r3, #63	@ 0x3f
 8007a5c:	4a45      	ldr	r2, [pc, #276]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a5e:	2120      	movs	r1, #32
 8007a60:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 8007a62:	4b4c      	ldr	r3, [pc, #304]	@ (8007b94 <uSD_Card_SendData_To_Buffer+0x2c8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	b218      	sxth	r0, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	01db      	lsls	r3, r3, #7
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	3340      	adds	r3, #64	@ 0x40
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	01db      	lsls	r3, r3, #7
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	3348      	adds	r3, #72	@ 0x48
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	493c      	ldr	r1, [pc, #240]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a82:	f7ff fdc9 	bl	8007618 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	01db      	lsls	r3, r3, #7
 8007a8a:	3348      	adds	r3, #72	@ 0x48
 8007a8c:	4a39      	ldr	r2, [pc, #228]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a8e:	2120      	movs	r1, #32
 8007a90:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 8007a92:	4b41      	ldr	r3, [pc, #260]	@ (8007b98 <uSD_Card_SendData_To_Buffer+0x2cc>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	b218      	sxth	r0, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	01db      	lsls	r3, r3, #7
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	3349      	adds	r3, #73	@ 0x49
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	01db      	lsls	r3, r3, #7
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	3351      	adds	r3, #81	@ 0x51
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	4930      	ldr	r1, [pc, #192]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ab2:	f7ff fdb1 	bl	8007618 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	01db      	lsls	r3, r3, #7
 8007aba:	3351      	adds	r3, #81	@ 0x51
 8007abc:	4a2d      	ldr	r2, [pc, #180]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007abe:	2120      	movs	r1, #32
 8007ac0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007ac2:	4b36      	ldr	r3, [pc, #216]	@ (8007b9c <uSD_Card_SendData_To_Buffer+0x2d0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	b218      	sxth	r0, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	01db      	lsls	r3, r3, #7
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	3352      	adds	r3, #82	@ 0x52
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	01db      	lsls	r3, r3, #7
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	335a      	adds	r3, #90	@ 0x5a
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	4924      	ldr	r1, [pc, #144]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007ae2:	f7ff fd99 	bl	8007618 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	01db      	lsls	r3, r3, #7
 8007aea:	335a      	adds	r3, #90	@ 0x5a
 8007aec:	4a21      	ldr	r2, [pc, #132]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007aee:	2120      	movs	r1, #32
 8007af0:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007af2:	4b2b      	ldr	r3, [pc, #172]	@ (8007ba0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007af4:	edd3 7a00 	vldr	s15, [r3]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	01db      	lsls	r3, r3, #7
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	335b      	adds	r3, #91	@ 0x5b
 8007b02:	b2d9      	uxtb	r1, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	01db      	lsls	r3, r3, #7
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	3362      	adds	r3, #98	@ 0x62
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	4818      	ldr	r0, [pc, #96]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b14:	eeb0 0a67 	vmov.f32	s0, s15
 8007b18:	f7ff fddd 	bl	80076d6 <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	01db      	lsls	r3, r3, #7
 8007b20:	3362      	adds	r3, #98	@ 0x62
 8007b22:	4a14      	ldr	r2, [pc, #80]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b24:	2120      	movs	r1, #32
 8007b26:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007b28:	4b1d      	ldr	r3, [pc, #116]	@ (8007ba0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007b2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	01db      	lsls	r3, r3, #7
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	3363      	adds	r3, #99	@ 0x63
 8007b38:	b2d9      	uxtb	r1, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	01db      	lsls	r3, r3, #7
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	336a      	adds	r3, #106	@ 0x6a
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	461a      	mov	r2, r3
 8007b48:	480a      	ldr	r0, [pc, #40]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8007b4e:	f7ff fdc2 	bl	80076d6 <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	01db      	lsls	r3, r3, #7
 8007b56:	336a      	adds	r3, #106	@ 0x6a
 8007b58:	4a06      	ldr	r2, [pc, #24]	@ (8007b74 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007b5a:	2120      	movs	r1, #32
 8007b5c:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007b5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ba0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007b60:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	01db      	lsls	r3, r3, #7
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	336b      	adds	r3, #107	@ 0x6b
 8007b6e:	e019      	b.n	8007ba4 <uSD_Card_SendData_To_Buffer+0x2d8>
 8007b70:	000041ec 	.word	0x000041ec
 8007b74:	24002f28 	.word	0x24002f28
 8007b78:	000041b4 	.word	0x000041b4
 8007b7c:	000041b6 	.word	0x000041b6
 8007b80:	000041b8 	.word	0x000041b8
 8007b84:	000041ba 	.word	0x000041ba
 8007b88:	0000407c 	.word	0x0000407c
 8007b8c:	00004078 	.word	0x00004078
 8007b90:	00004080 	.word	0x00004080
 8007b94:	000040c4 	.word	0x000040c4
 8007b98:	000040c8 	.word	0x000040c8
 8007b9c:	000040cc 	.word	0x000040cc
 8007ba0:	00000088 	.word	0x00000088
 8007ba4:	b2d9      	uxtb	r1, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	01db      	lsls	r3, r3, #7
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	3372      	adds	r3, #114	@ 0x72
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	482d      	ldr	r0, [pc, #180]	@ (8007c6c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8007bba:	f7ff fd8c 	bl	80076d6 <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	01db      	lsls	r3, r3, #7
 8007bc2:	3372      	adds	r3, #114	@ 0x72
 8007bc4:	4a29      	ldr	r2, [pc, #164]	@ (8007c6c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bc6:	2120      	movs	r1, #32
 8007bc8:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007bca:	4b29      	ldr	r3, [pc, #164]	@ (8007c70 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	b218      	sxth	r0, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	01db      	lsls	r3, r3, #7
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	3373      	adds	r3, #115	@ 0x73
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	01db      	lsls	r3, r3, #7
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	3377      	adds	r3, #119	@ 0x77
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	4920      	ldr	r1, [pc, #128]	@ (8007c6c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bea:	f7ff fd15 	bl	8007618 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	01db      	lsls	r3, r3, #7
 8007bf2:	3377      	adds	r3, #119	@ 0x77
 8007bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c6c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007bf6:	2120      	movs	r1, #32
 8007bf8:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 8007bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8007c70 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007bfc:	8a5b      	ldrh	r3, [r3, #18]
 8007bfe:	b218      	sxth	r0, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	01db      	lsls	r3, r3, #7
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	3378      	adds	r3, #120	@ 0x78
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	01db      	lsls	r3, r3, #7
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	337a      	adds	r3, #122	@ 0x7a
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	4914      	ldr	r1, [pc, #80]	@ (8007c6c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c1a:	f7ff fcfd 	bl	8007618 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	01db      	lsls	r3, r3, #7
 8007c22:	337a      	adds	r3, #122	@ 0x7a
 8007c24:	4a11      	ldr	r2, [pc, #68]	@ (8007c6c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c26:	2120      	movs	r1, #32
 8007c28:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 8007c2a:	4b12      	ldr	r3, [pc, #72]	@ (8007c74 <uSD_Card_SendData_To_Buffer+0x3a8>)
 8007c2c:	edd3 7a00 	vldr	s15, [r3]
 8007c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c34:	ee17 3a90 	vmov	r3, s15
 8007c38:	b218      	sxth	r0, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	01db      	lsls	r3, r3, #7
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	337b      	adds	r3, #123	@ 0x7b
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	01db      	lsls	r3, r3, #7
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	337f      	adds	r3, #127	@ 0x7f
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	4906      	ldr	r1, [pc, #24]	@ (8007c6c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c54:	f7ff fce0 	bl	8007618 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	01db      	lsls	r3, r3, #7
 8007c5e:	4a03      	ldr	r2, [pc, #12]	@ (8007c6c <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007c60:	210a      	movs	r1, #10
 8007c62:	54d1      	strb	r1, [r2, r3]
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	24002f28 	.word	0x24002f28
 8007c70:	00000184 	.word	0x00000184
 8007c74:	00000058 	.word	0x00000058

08007c78 <Stack_Push>:

void Stack_Push(float data){
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007c82:	4b22      	ldr	r3, [pc, #136]	@ (8007d0c <Stack_Push+0x94>)
 8007c84:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c88:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	4b1e      	ldr	r3, [pc, #120]	@ (8007d0c <Stack_Push+0x94>)
 8007c92:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c96:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8007d0c <Stack_Push+0x94>)
 8007c9c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ca0:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007ca4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007ca8:	d105      	bne.n	8007cb6 <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007caa:	4b18      	ldr	r3, [pc, #96]	@ (8007d0c <Stack_Push+0x94>)
 8007cac:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007cb6:	4b15      	ldr	r3, [pc, #84]	@ (8007d0c <Stack_Push+0x94>)
 8007cb8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cbc:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007cc0:	4a12      	ldr	r2, [pc, #72]	@ (8007d0c <Stack_Push+0x94>)
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007cca:	4b10      	ldr	r3, [pc, #64]	@ (8007d0c <Stack_Push+0x94>)
 8007ccc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cd0:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007d0c <Stack_Push+0x94>)
 8007cda:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cde:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8007d0c <Stack_Push+0x94>)
 8007ce4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007ce8:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007cec:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007cf0:	d105      	bne.n	8007cfe <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007cf2:	4b06      	ldr	r3, [pc, #24]	@ (8007d0c <Stack_Push+0x94>)
 8007cf4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 8007cfe:	bf00      	nop
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	000001a8 	.word	0x000001a8

08007d10 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 8007d14:	4b05      	ldr	r3, [pc, #20]	@ (8007d2c <ROOL_MAX_VAL+0x1c>)
 8007d16:	2202      	movs	r2, #2
 8007d18:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 8007d1c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	00000184 	.word	0x00000184

08007d30 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 8007d34:	4b04      	ldr	r3, [pc, #16]	@ (8007d48 <ROOL_MIN_VAL+0x18>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 8007d3c:	4b03      	ldr	r3, [pc, #12]	@ (8007d4c <ROOL_MIN_VAL+0x1c>)
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	00000184 	.word	0x00000184
 8007d4c:	ffffec78 	.word	0xffffec78

08007d50 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 8007d54:	4b05      	ldr	r3, [pc, #20]	@ (8007d6c <PITCH_MAX_VAL+0x1c>)
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007d5c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	00000184 	.word	0x00000184

08007d70 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 8007d74:	4b04      	ldr	r3, [pc, #16]	@ (8007d88 <PITCH_MIN_VAL+0x18>)
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007d7c:	4b03      	ldr	r3, [pc, #12]	@ (8007d8c <PITCH_MIN_VAL+0x1c>)
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr
 8007d88:	00000184 	.word	0x00000184
 8007d8c:	ffffec78 	.word	0xffffec78

08007d90 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 8007d94:	4b05      	ldr	r3, [pc, #20]	@ (8007dac <YAW_MAX_VAL+0x1c>)
 8007d96:	2202      	movs	r2, #2
 8007d98:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007d9c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	00000184 	.word	0x00000184

08007db0 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007db0:	b480      	push	{r7}
 8007db2:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007db4:	4b04      	ldr	r3, [pc, #16]	@ (8007dc8 <YAW_MIN_VAL+0x18>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007dbc:	4b03      	ldr	r3, [pc, #12]	@ (8007dcc <YAW_MIN_VAL+0x1c>)
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	00000184 	.word	0x00000184
 8007dcc:	ffffec78 	.word	0xffffec78

08007dd0 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007dd4:	4b08      	ldr	r3, [pc, #32]	@ (8007df8 <ROOL_GOOD_VAL+0x28>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007ddc:	4b07      	ldr	r3, [pc, #28]	@ (8007dfc <ROOL_GOOD_VAL+0x2c>)
 8007dde:	edd3 7a00 	vldr	s15, [r3]
 8007de2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007de6:	ee17 3a90 	vmov	r3, s15
 8007dea:	b21b      	sxth	r3, r3
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	00000184 	.word	0x00000184
 8007dfc:	000040f0 	.word	0x000040f0

08007e00 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007e04:	4b08      	ldr	r3, [pc, #32]	@ (8007e28 <PITCH_GOOD_VAL+0x28>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007e0c:	4b07      	ldr	r3, [pc, #28]	@ (8007e2c <PITCH_GOOD_VAL+0x2c>)
 8007e0e:	edd3 7a00 	vldr	s15, [r3]
 8007e12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e16:	ee17 3a90 	vmov	r3, s15
 8007e1a:	b21b      	sxth	r3, r3
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	00000184 	.word	0x00000184
 8007e2c:	000040e8 	.word	0x000040e8

08007e30 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 8007e34:	4b08      	ldr	r3, [pc, #32]	@ (8007e58 <YAW_GOOD_VAL+0x28>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8007e3c:	4b07      	ldr	r3, [pc, #28]	@ (8007e5c <YAW_GOOD_VAL+0x2c>)
 8007e3e:	edd3 7a00 	vldr	s15, [r3]
 8007e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e46:	ee17 3a90 	vmov	r3, s15
 8007e4a:	b21b      	sxth	r3, r3
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	00000184 	.word	0x00000184
 8007e5c:	000040ec 	.word	0x000040ec

08007e60 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007e66:	463b      	mov	r3, r7
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	605a      	str	r2, [r3, #4]
 8007e6e:	609a      	str	r2, [r3, #8]
 8007e70:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007e72:	f003 fc3d 	bl	800b6f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007e76:	2301      	movs	r3, #1
 8007e78:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007e82:	231f      	movs	r3, #31
 8007e84:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007e86:	2387      	movs	r3, #135	@ 0x87
 8007e88:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007e92:	2301      	movs	r3, #1
 8007e94:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007e96:	2301      	movs	r3, #1
 8007e98:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f003 fc5b 	bl	800b760 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007eaa:	2004      	movs	r0, #4
 8007eac:	f003 fc38 	bl	800b720 <HAL_MPU_Enable>

}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007ebc:	b672      	cpsid	i
}
 8007ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007ec0:	bf00      	nop
 8007ec2:	e7fd      	b.n	8007ec0 <Error_Handler+0x8>

08007ec4 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007ec8:	4b27      	ldr	r3, [pc, #156]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007eca:	4a28      	ldr	r2, [pc, #160]	@ (8007f6c <MX_SPI2_Init+0xa8>)
 8007ecc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007ece:	4b26      	ldr	r3, [pc, #152]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007ed0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007ed4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007ed6:	4b24      	ldr	r3, [pc, #144]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007edc:	4b22      	ldr	r3, [pc, #136]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007ede:	2207      	movs	r2, #7
 8007ee0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ee2:	4b21      	ldr	r3, [pc, #132]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007eee:	4b1e      	ldr	r3, [pc, #120]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007ef0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007ef4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007efc:	4b1a      	ldr	r3, [pc, #104]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f02:	4b19      	ldr	r3, [pc, #100]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f08:	4b17      	ldr	r3, [pc, #92]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007f0e:	4b16      	ldr	r3, [pc, #88]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007f14:	4b14      	ldr	r3, [pc, #80]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007f1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007f1c:	4b12      	ldr	r3, [pc, #72]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007f22:	4b11      	ldr	r3, [pc, #68]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f28:	4b0f      	ldr	r3, [pc, #60]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007f34:	4b0c      	ldr	r3, [pc, #48]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007f40:	4b09      	ldr	r3, [pc, #36]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007f46:	4b08      	ldr	r3, [pc, #32]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f48:	2200      	movs	r2, #0
 8007f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007f4c:	4b06      	ldr	r3, [pc, #24]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007f52:	4805      	ldr	r0, [pc, #20]	@ (8007f68 <MX_SPI2_Init+0xa4>)
 8007f54:	f00c fc8e 	bl	8014874 <HAL_SPI_Init>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007f5e:	f7ff ffab 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007f62:	bf00      	nop
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	240001ec 	.word	0x240001ec
 8007f6c:	40003800 	.word	0x40003800

08007f70 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007f74:	4b27      	ldr	r3, [pc, #156]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007f76:	4a28      	ldr	r2, [pc, #160]	@ (8008018 <MX_SPI6_Init+0xa8>)
 8007f78:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8007f7a:	4b26      	ldr	r3, [pc, #152]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007f7c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007f80:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007f82:	4b24      	ldr	r3, [pc, #144]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f88:	4b22      	ldr	r3, [pc, #136]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007f8a:	2207      	movs	r2, #7
 8007f8c:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f8e:	4b21      	ldr	r3, [pc, #132]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f94:	4b1f      	ldr	r3, [pc, #124]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007f9c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007fa0:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007fae:	4b19      	ldr	r3, [pc, #100]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fb4:	4b17      	ldr	r3, [pc, #92]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007fba:	4b16      	ldr	r3, [pc, #88]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007fc0:	4b14      	ldr	r3, [pc, #80]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007fc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007fc8:	4b12      	ldr	r3, [pc, #72]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fca:	2200      	movs	r2, #0
 8007fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007fce:	4b11      	ldr	r3, [pc, #68]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007fda:	4b0e      	ldr	r3, [pc, #56]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007fec:	4b09      	ldr	r3, [pc, #36]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007ff2:	4b08      	ldr	r3, [pc, #32]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007ff8:	4b06      	ldr	r3, [pc, #24]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8007ffe:	4805      	ldr	r0, [pc, #20]	@ (8008014 <MX_SPI6_Init+0xa4>)
 8008000:	f00c fc38 	bl	8014874 <HAL_SPI_Init>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 800800a:	f7ff ff55 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 800800e:	bf00      	nop
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	24000274 	.word	0x24000274
 8008018:	58001400 	.word	0x58001400

0800801c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b0ba      	sub	sp, #232	@ 0xe8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008024:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	605a      	str	r2, [r3, #4]
 800802e:	609a      	str	r2, [r3, #8]
 8008030:	60da      	str	r2, [r3, #12]
 8008032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008034:	f107 0318 	add.w	r3, r7, #24
 8008038:	22b8      	movs	r2, #184	@ 0xb8
 800803a:	2100      	movs	r1, #0
 800803c:	4618      	mov	r0, r3
 800803e:	f016 f871 	bl	801e124 <memset>
  if(spiHandle->Instance==SPI2)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a77      	ldr	r2, [pc, #476]	@ (8008224 <HAL_SPI_MspInit+0x208>)
 8008048:	4293      	cmp	r3, r2
 800804a:	f040 8089 	bne.w	8008160 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800804e:	4b76      	ldr	r3, [pc, #472]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 8008050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008054:	4a74      	ldr	r2, [pc, #464]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 8008056:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800805a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800805e:	4b72      	ldr	r3, [pc, #456]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 8008060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008068:	617b      	str	r3, [r7, #20]
 800806a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800806c:	4b6e      	ldr	r3, [pc, #440]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 800806e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008072:	4a6d      	ldr	r2, [pc, #436]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 8008074:	f043 0302 	orr.w	r3, r3, #2
 8008078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800807c:	4b6a      	ldr	r3, [pc, #424]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 800807e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800808a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800808e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008092:	2302      	movs	r3, #2
 8008094:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008098:	2300      	movs	r3, #0
 800809a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800809e:	2301      	movs	r3, #1
 80080a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80080a4:	2305      	movs	r3, #5
 80080a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80080ae:	4619      	mov	r1, r3
 80080b0:	485e      	ldr	r0, [pc, #376]	@ (800822c <HAL_SPI_MspInit+0x210>)
 80080b2:	f006 f9e7 	bl	800e484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80080b6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80080ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080be:	2302      	movs	r3, #2
 80080c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080c4:	2301      	movs	r3, #1
 80080c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80080d0:	2305      	movs	r3, #5
 80080d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080d6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80080da:	4619      	mov	r1, r3
 80080dc:	4853      	ldr	r0, [pc, #332]	@ (800822c <HAL_SPI_MspInit+0x210>)
 80080de:	f006 f9d1 	bl	800e484 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 80080e2:	4b53      	ldr	r3, [pc, #332]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 80080e4:	4a53      	ldr	r2, [pc, #332]	@ (8008234 <HAL_SPI_MspInit+0x218>)
 80080e6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80080e8:	4b51      	ldr	r3, [pc, #324]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 80080ea:	2228      	movs	r2, #40	@ 0x28
 80080ec:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80080ee:	4b50      	ldr	r3, [pc, #320]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 80080f0:	2240      	movs	r2, #64	@ 0x40
 80080f2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80080f4:	4b4e      	ldr	r3, [pc, #312]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80080fa:	4b4d      	ldr	r3, [pc, #308]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 80080fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008100:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008102:	4b4b      	ldr	r3, [pc, #300]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 8008104:	2200      	movs	r2, #0
 8008106:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008108:	4b49      	ldr	r3, [pc, #292]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 800810a:	2200      	movs	r2, #0
 800810c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800810e:	4b48      	ldr	r3, [pc, #288]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 8008110:	2200      	movs	r2, #0
 8008112:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008114:	4b46      	ldr	r3, [pc, #280]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 8008116:	2200      	movs	r2, #0
 8008118:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800811a:	4b45      	ldr	r3, [pc, #276]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 800811c:	2204      	movs	r2, #4
 800811e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008120:	4b43      	ldr	r3, [pc, #268]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 8008122:	2203      	movs	r2, #3
 8008124:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8008126:	4b42      	ldr	r3, [pc, #264]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 8008128:	2200      	movs	r2, #0
 800812a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800812c:	4b40      	ldr	r3, [pc, #256]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 800812e:	2200      	movs	r2, #0
 8008130:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8008132:	483f      	ldr	r0, [pc, #252]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 8008134:	f003 fb54 	bl	800b7e0 <HAL_DMA_Init>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 800813e:	f7ff febb 	bl	8007eb8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a3a      	ldr	r2, [pc, #232]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 8008146:	679a      	str	r2, [r3, #120]	@ 0x78
 8008148:	4a39      	ldr	r2, [pc, #228]	@ (8008230 <HAL_SPI_MspInit+0x214>)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800814e:	2200      	movs	r2, #0
 8008150:	2100      	movs	r1, #0
 8008152:	2024      	movs	r0, #36	@ 0x24
 8008154:	f003 fa97 	bl	800b686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008158:	2024      	movs	r0, #36	@ 0x24
 800815a:	f003 faae 	bl	800b6ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 800815e:	e05c      	b.n	800821a <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a34      	ldr	r2, [pc, #208]	@ (8008238 <HAL_SPI_MspInit+0x21c>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d157      	bne.n	800821a <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 800816a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800816e:	f04f 0300 	mov.w	r3, #0
 8008172:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8008176:	2318      	movs	r3, #24
 8008178:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 800817a:	23c8      	movs	r3, #200	@ 0xc8
 800817c:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 800817e:	2301      	movs	r3, #1
 8008180:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8008182:	230a      	movs	r3, #10
 8008184:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8008186:	2302      	movs	r3, #2
 8008188:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800818a:	2300      	movs	r3, #0
 800818c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800818e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008192:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 8008198:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800819c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80081a0:	f107 0318 	add.w	r3, r7, #24
 80081a4:	4618      	mov	r0, r3
 80081a6:	f009 ff7f 	bl	80120a8 <HAL_RCCEx_PeriphCLKConfig>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <HAL_SPI_MspInit+0x198>
      Error_Handler();
 80081b0:	f7ff fe82 	bl	8007eb8 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80081b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 80081b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 80081bc:	f043 0320 	orr.w	r3, r3, #32
 80081c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80081c4:	4b18      	ldr	r3, [pc, #96]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 80081c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081d2:	4b15      	ldr	r3, [pc, #84]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 80081d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081d8:	4a13      	ldr	r2, [pc, #76]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 80081da:	f043 0302 	orr.w	r3, r3, #2
 80081de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80081e2:	4b11      	ldr	r3, [pc, #68]	@ (8008228 <HAL_SPI_MspInit+0x20c>)
 80081e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	60bb      	str	r3, [r7, #8]
 80081ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80081f0:	2338      	movs	r3, #56	@ 0x38
 80081f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081f6:	2302      	movs	r3, #2
 80081f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008202:	2300      	movs	r3, #0
 8008204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8008208:	2308      	movs	r3, #8
 800820a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800820e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008212:	4619      	mov	r1, r3
 8008214:	4805      	ldr	r0, [pc, #20]	@ (800822c <HAL_SPI_MspInit+0x210>)
 8008216:	f006 f935 	bl	800e484 <HAL_GPIO_Init>
}
 800821a:	bf00      	nop
 800821c:	37e8      	adds	r7, #232	@ 0xe8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	40003800 	.word	0x40003800
 8008228:	58024400 	.word	0x58024400
 800822c:	58020400 	.word	0x58020400
 8008230:	240002fc 	.word	0x240002fc
 8008234:	40020010 	.word	0x40020010
 8008238:	58001400 	.word	0x58001400

0800823c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008242:	4b0a      	ldr	r3, [pc, #40]	@ (800826c <HAL_MspInit+0x30>)
 8008244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008248:	4a08      	ldr	r2, [pc, #32]	@ (800826c <HAL_MspInit+0x30>)
 800824a:	f043 0302 	orr.w	r3, r3, #2
 800824e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008252:	4b06      	ldr	r3, [pc, #24]	@ (800826c <HAL_MspInit+0x30>)
 8008254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	607b      	str	r3, [r7, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	58024400 	.word	0x58024400

08008270 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8008274:	4b0b      	ldr	r3, [pc, #44]	@ (80082a4 <SDTimer_Handler+0x34>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <SDTimer_Handler+0x16>
    Timer1--;
 800827c:	4b09      	ldr	r3, [pc, #36]	@ (80082a4 <SDTimer_Handler+0x34>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3b01      	subs	r3, #1
 8008282:	4a08      	ldr	r2, [pc, #32]	@ (80082a4 <SDTimer_Handler+0x34>)
 8008284:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 8008286:	4b08      	ldr	r3, [pc, #32]	@ (80082a8 <SDTimer_Handler+0x38>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d004      	beq.n	8008298 <SDTimer_Handler+0x28>
    Timer2--;
 800828e:	4b06      	ldr	r3, [pc, #24]	@ (80082a8 <SDTimer_Handler+0x38>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3b01      	subs	r3, #1
 8008294:	4a04      	ldr	r2, [pc, #16]	@ (80082a8 <SDTimer_Handler+0x38>)
 8008296:	6013      	str	r3, [r2, #0]
}
 8008298:	bf00      	nop
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	24000378 	.word	0x24000378
 80082a8:	2400037c 	.word	0x2400037c
 80082ac:	00000000 	.word	0x00000000

080082b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 80082b6:	2200      	movs	r2, #0
 80082b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80082bc:	48bc      	ldr	r0, [pc, #752]	@ (80085b0 <NMI_Handler+0x300>)
 80082be:	f006 faa1 	bl	800e804 <HAL_GPIO_WritePin>
	LED_Y_0;
 80082c2:	2200      	movs	r2, #0
 80082c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80082c8:	48ba      	ldr	r0, [pc, #744]	@ (80085b4 <NMI_Handler+0x304>)
 80082ca:	f006 fa9b 	bl	800e804 <HAL_GPIO_WritePin>
	LED_R_1;
 80082ce:	2201      	movs	r2, #1
 80082d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80082d4:	48b7      	ldr	r0, [pc, #732]	@ (80085b4 <NMI_Handler+0x304>)
 80082d6:	f006 fa95 	bl	800e804 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 80082da:	48b7      	ldr	r0, [pc, #732]	@ (80085b8 <NMI_Handler+0x308>)
 80082dc:	f015 fd2a 	bl	801dd34 <f_close>

	wanted_rool = 0;
 80082e0:	4bb6      	ldr	r3, [pc, #728]	@ (80085bc <NMI_Handler+0x30c>)
 80082e2:	f04f 0200 	mov.w	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80082e8:	4bb5      	ldr	r3, [pc, #724]	@ (80085c0 <NMI_Handler+0x310>)
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80082f0:	4bb4      	ldr	r3, [pc, #720]	@ (80085c4 <NMI_Handler+0x314>)
 80082f2:	f04f 0200 	mov.w	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80082f8:	4bb3      	ldr	r3, [pc, #716]	@ (80085c8 <NMI_Handler+0x318>)
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	b21a      	sxth	r2, r3
 80082fe:	4bb3      	ldr	r3, [pc, #716]	@ (80085cc <NMI_Handler+0x31c>)
 8008300:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 8008302:	2001      	movs	r0, #1
 8008304:	f001 f942 	bl	800958c <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8008308:	4bb1      	ldr	r3, [pc, #708]	@ (80085d0 <NMI_Handler+0x320>)
 800830a:	edd3 7a00 	vldr	s15, [r3]
 800830e:	4bb1      	ldr	r3, [pc, #708]	@ (80085d4 <NMI_Handler+0x324>)
 8008310:	ed93 7a00 	vldr	s14, [r3]
 8008314:	4bb0      	ldr	r3, [pc, #704]	@ (80085d8 <NMI_Handler+0x328>)
 8008316:	edd3 6a00 	vldr	s13, [r3]
 800831a:	4bb0      	ldr	r3, [pc, #704]	@ (80085dc <NMI_Handler+0x32c>)
 800831c:	ed93 6a00 	vldr	s12, [r3]
 8008320:	4baf      	ldr	r3, [pc, #700]	@ (80085e0 <NMI_Handler+0x330>)
 8008322:	edd3 5a00 	vldr	s11, [r3]
 8008326:	4baf      	ldr	r3, [pc, #700]	@ (80085e4 <NMI_Handler+0x334>)
 8008328:	ed93 5a00 	vldr	s10, [r3]
 800832c:	4bae      	ldr	r3, [pc, #696]	@ (80085e8 <NMI_Handler+0x338>)
 800832e:	edd3 4a00 	vldr	s9, [r3]
 8008332:	4bae      	ldr	r3, [pc, #696]	@ (80085ec <NMI_Handler+0x33c>)
 8008334:	ed93 4a00 	vldr	s8, [r3]
 8008338:	4bad      	ldr	r3, [pc, #692]	@ (80085f0 <NMI_Handler+0x340>)
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	4bad      	ldr	r3, [pc, #692]	@ (80085f4 <NMI_Handler+0x344>)
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	eef0 3a44 	vmov.f32	s7, s8
 8008344:	eeb0 3a64 	vmov.f32	s6, s9
 8008348:	eef0 2a45 	vmov.f32	s5, s10
 800834c:	eeb0 2a65 	vmov.f32	s4, s11
 8008350:	eef0 1a46 	vmov.f32	s3, s12
 8008354:	eeb0 1a66 	vmov.f32	s2, s13
 8008358:	eef0 0a47 	vmov.f32	s1, s14
 800835c:	eeb0 0a67 	vmov.f32	s0, s15
 8008360:	4ba5      	ldr	r3, [pc, #660]	@ (80085f8 <NMI_Handler+0x348>)
 8008362:	4aa6      	ldr	r2, [pc, #664]	@ (80085fc <NMI_Handler+0x34c>)
 8008364:	49a6      	ldr	r1, [pc, #664]	@ (8008600 <NMI_Handler+0x350>)
 8008366:	48a7      	ldr	r0, [pc, #668]	@ (8008604 <NMI_Handler+0x354>)
 8008368:	f7f9 f996 	bl	8001698 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 800836c:	4ba5      	ldr	r3, [pc, #660]	@ (8008604 <NMI_Handler+0x354>)
 800836e:	edd3 7a00 	vldr	s15, [r3]
 8008372:	4ba3      	ldr	r3, [pc, #652]	@ (8008600 <NMI_Handler+0x350>)
 8008374:	ed93 7a00 	vldr	s14, [r3]
 8008378:	4ba0      	ldr	r3, [pc, #640]	@ (80085fc <NMI_Handler+0x34c>)
 800837a:	edd3 6a00 	vldr	s13, [r3]
 800837e:	49a2      	ldr	r1, [pc, #648]	@ (8008608 <NMI_Handler+0x358>)
 8008380:	48a2      	ldr	r0, [pc, #648]	@ (800860c <NMI_Handler+0x35c>)
 8008382:	eeb0 1a66 	vmov.f32	s2, s13
 8008386:	eef0 0a47 	vmov.f32	s1, s14
 800838a:	eeb0 0a67 	vmov.f32	s0, s15
 800838e:	f7f9 f907 	bl	80015a0 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8008392:	4b9e      	ldr	r3, [pc, #632]	@ (800860c <NMI_Handler+0x35c>)
 8008394:	edd3 7a00 	vldr	s15, [r3]
 8008398:	4b9b      	ldr	r3, [pc, #620]	@ (8008608 <NMI_Handler+0x358>)
 800839a:	ed93 7a00 	vldr	s14, [r3]
 800839e:	4b9c      	ldr	r3, [pc, #624]	@ (8008610 <NMI_Handler+0x360>)
 80083a0:	edd3 6a00 	vldr	s13, [r3]
 80083a4:	4b94      	ldr	r3, [pc, #592]	@ (80085f8 <NMI_Handler+0x348>)
 80083a6:	ed93 6a00 	vldr	s12, [r3]
 80083aa:	4b92      	ldr	r3, [pc, #584]	@ (80085f4 <NMI_Handler+0x344>)
 80083ac:	edd3 5a00 	vldr	s11, [r3]
 80083b0:	4b8f      	ldr	r3, [pc, #572]	@ (80085f0 <NMI_Handler+0x340>)
 80083b2:	ed93 5a00 	vldr	s10, [r3]
 80083b6:	eef0 2a45 	vmov.f32	s5, s10
 80083ba:	eeb0 2a65 	vmov.f32	s4, s11
 80083be:	eef0 1a46 	vmov.f32	s3, s12
 80083c2:	eeb0 1a66 	vmov.f32	s2, s13
 80083c6:	eef0 0a47 	vmov.f32	s1, s14
 80083ca:	eeb0 0a67 	vmov.f32	s0, s15
 80083ce:	4891      	ldr	r0, [pc, #580]	@ (8008614 <NMI_Handler+0x364>)
 80083d0:	f7f9 fadc 	bl	800198c <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 80083d4:	4b8f      	ldr	r3, [pc, #572]	@ (8008614 <NMI_Handler+0x364>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a8f      	ldr	r2, [pc, #572]	@ (8008618 <NMI_Handler+0x368>)
 80083da:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 80083dc:	4b8d      	ldr	r3, [pc, #564]	@ (8008614 <NMI_Handler+0x364>)
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	4a8e      	ldr	r2, [pc, #568]	@ (800861c <NMI_Handler+0x36c>)
 80083e2:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 80083e4:	4b8b      	ldr	r3, [pc, #556]	@ (8008614 <NMI_Handler+0x364>)
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	4a8d      	ldr	r2, [pc, #564]	@ (8008620 <NMI_Handler+0x370>)
 80083ea:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 80083ec:	4b73      	ldr	r3, [pc, #460]	@ (80085bc <NMI_Handler+0x30c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a8c      	ldr	r2, [pc, #560]	@ (8008624 <NMI_Handler+0x374>)
 80083f2:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 80083f4:	4b72      	ldr	r3, [pc, #456]	@ (80085c0 <NMI_Handler+0x310>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a8b      	ldr	r2, [pc, #556]	@ (8008628 <NMI_Handler+0x378>)
 80083fa:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 80083fc:	4b71      	ldr	r3, [pc, #452]	@ (80085c4 <NMI_Handler+0x314>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a8a      	ldr	r2, [pc, #552]	@ (800862c <NMI_Handler+0x37c>)
 8008402:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 8008404:	4b8a      	ldr	r3, [pc, #552]	@ (8008630 <NMI_Handler+0x380>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	ee07 3a90 	vmov	s15, r3
 800840c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008410:	4b6b      	ldr	r3, [pc, #428]	@ (80085c0 <NMI_Handler+0x310>)
 8008412:	edd3 6a00 	vldr	s13, [r3]
 8008416:	4b80      	ldr	r3, [pc, #512]	@ (8008618 <NMI_Handler+0x368>)
 8008418:	edd3 7a00 	vldr	s15, [r3]
 800841c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008428:	ee17 2a90 	vmov	r2, s15
 800842c:	4b80      	ldr	r3, [pc, #512]	@ (8008630 <NMI_Handler+0x380>)
 800842e:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8008430:	4b80      	ldr	r3, [pc, #512]	@ (8008634 <NMI_Handler+0x384>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	ee07 3a90 	vmov	s15, r3
 8008438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800843c:	4b5f      	ldr	r3, [pc, #380]	@ (80085bc <NMI_Handler+0x30c>)
 800843e:	edd3 6a00 	vldr	s13, [r3]
 8008442:	4b76      	ldr	r3, [pc, #472]	@ (800861c <NMI_Handler+0x36c>)
 8008444:	edd3 7a00 	vldr	s15, [r3]
 8008448:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800844c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008454:	ee17 2a90 	vmov	r2, s15
 8008458:	4b76      	ldr	r3, [pc, #472]	@ (8008634 <NMI_Handler+0x384>)
 800845a:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 800845c:	4b76      	ldr	r3, [pc, #472]	@ (8008638 <NMI_Handler+0x388>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	ee07 3a90 	vmov	s15, r3
 8008464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008468:	4b56      	ldr	r3, [pc, #344]	@ (80085c4 <NMI_Handler+0x314>)
 800846a:	edd3 6a00 	vldr	s13, [r3]
 800846e:	4b6c      	ldr	r3, [pc, #432]	@ (8008620 <NMI_Handler+0x370>)
 8008470:	edd3 7a00 	vldr	s15, [r3]
 8008474:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800847c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008480:	ee17 2a90 	vmov	r2, s15
 8008484:	4b6c      	ldr	r3, [pc, #432]	@ (8008638 <NMI_Handler+0x388>)
 8008486:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 8008488:	4b6c      	ldr	r3, [pc, #432]	@ (800863c <NMI_Handler+0x38c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	ee07 3a90 	vmov	s15, r3
 8008490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008494:	4b6a      	ldr	r3, [pc, #424]	@ (8008640 <NMI_Handler+0x390>)
 8008496:	edd3 6a00 	vldr	s13, [r3]
 800849a:	4b57      	ldr	r3, [pc, #348]	@ (80085f8 <NMI_Handler+0x348>)
 800849c:	edd3 7a00 	vldr	s15, [r3]
 80084a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084ac:	ee17 2a90 	vmov	r2, s15
 80084b0:	4b62      	ldr	r3, [pc, #392]	@ (800863c <NMI_Handler+0x38c>)
 80084b2:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 80084b4:	4b63      	ldr	r3, [pc, #396]	@ (8008644 <NMI_Handler+0x394>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	ee07 3a90 	vmov	s15, r3
 80084bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084c0:	4b61      	ldr	r3, [pc, #388]	@ (8008648 <NMI_Handler+0x398>)
 80084c2:	edd3 6a00 	vldr	s13, [r3]
 80084c6:	4b4b      	ldr	r3, [pc, #300]	@ (80085f4 <NMI_Handler+0x344>)
 80084c8:	edd3 7a00 	vldr	s15, [r3]
 80084cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084d8:	ee17 2a90 	vmov	r2, s15
 80084dc:	4b59      	ldr	r3, [pc, #356]	@ (8008644 <NMI_Handler+0x394>)
 80084de:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 80084e0:	4b5a      	ldr	r3, [pc, #360]	@ (800864c <NMI_Handler+0x39c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084ec:	4b58      	ldr	r3, [pc, #352]	@ (8008650 <NMI_Handler+0x3a0>)
 80084ee:	edd3 6a00 	vldr	s13, [r3]
 80084f2:	4b3f      	ldr	r3, [pc, #252]	@ (80085f0 <NMI_Handler+0x340>)
 80084f4:	edd3 7a00 	vldr	s15, [r3]
 80084f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008504:	ee17 2a90 	vmov	r2, s15
 8008508:	4b50      	ldr	r3, [pc, #320]	@ (800864c <NMI_Handler+0x39c>)
 800850a:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 800850c:	2201      	movs	r2, #1
 800850e:	4951      	ldr	r1, [pc, #324]	@ (8008654 <NMI_Handler+0x3a4>)
 8008510:	484b      	ldr	r0, [pc, #300]	@ (8008640 <NMI_Handler+0x390>)
 8008512:	f7fb faab 	bl	8003a6c <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8008516:	2202      	movs	r2, #2
 8008518:	494f      	ldr	r1, [pc, #316]	@ (8008658 <NMI_Handler+0x3a8>)
 800851a:	484b      	ldr	r0, [pc, #300]	@ (8008648 <NMI_Handler+0x398>)
 800851c:	f7fb faa6 	bl	8003a6c <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8008520:	2204      	movs	r2, #4
 8008522:	494e      	ldr	r1, [pc, #312]	@ (800865c <NMI_Handler+0x3ac>)
 8008524:	484e      	ldr	r0, [pc, #312]	@ (8008660 <NMI_Handler+0x3b0>)
 8008526:	f7fb faa1 	bl	8003a6c <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 800852a:	2205      	movs	r2, #5
 800852c:	494d      	ldr	r1, [pc, #308]	@ (8008664 <NMI_Handler+0x3b4>)
 800852e:	484e      	ldr	r0, [pc, #312]	@ (8008668 <NMI_Handler+0x3b8>)
 8008530:	f7fb fa9c 	bl	8003a6c <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8008534:	2206      	movs	r2, #6
 8008536:	494d      	ldr	r1, [pc, #308]	@ (800866c <NMI_Handler+0x3bc>)
 8008538:	484d      	ldr	r0, [pc, #308]	@ (8008670 <NMI_Handler+0x3c0>)
 800853a:	f7fb fa97 	bl	8003a6c <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 800853e:	4b20      	ldr	r3, [pc, #128]	@ (80085c0 <NMI_Handler+0x310>)
 8008540:	ed93 7a00 	vldr	s14, [r3]
 8008544:	4b34      	ldr	r3, [pc, #208]	@ (8008618 <NMI_Handler+0x368>)
 8008546:	edd3 7a00 	vldr	s15, [r3]
 800854a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800854e:	4b49      	ldr	r3, [pc, #292]	@ (8008674 <NMI_Handler+0x3c4>)
 8008550:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 8008554:	4b19      	ldr	r3, [pc, #100]	@ (80085bc <NMI_Handler+0x30c>)
 8008556:	ed93 7a00 	vldr	s14, [r3]
 800855a:	4b30      	ldr	r3, [pc, #192]	@ (800861c <NMI_Handler+0x36c>)
 800855c:	edd3 7a00 	vldr	s15, [r3]
 8008560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008564:	4b44      	ldr	r3, [pc, #272]	@ (8008678 <NMI_Handler+0x3c8>)
 8008566:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 800856a:	4b35      	ldr	r3, [pc, #212]	@ (8008640 <NMI_Handler+0x390>)
 800856c:	ed93 7a00 	vldr	s14, [r3]
 8008570:	4b21      	ldr	r3, [pc, #132]	@ (80085f8 <NMI_Handler+0x348>)
 8008572:	edd3 7a00 	vldr	s15, [r3]
 8008576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800857a:	4b40      	ldr	r3, [pc, #256]	@ (800867c <NMI_Handler+0x3cc>)
 800857c:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 8008580:	4b31      	ldr	r3, [pc, #196]	@ (8008648 <NMI_Handler+0x398>)
 8008582:	ed93 7a00 	vldr	s14, [r3]
 8008586:	4b1b      	ldr	r3, [pc, #108]	@ (80085f4 <NMI_Handler+0x344>)
 8008588:	edd3 7a00 	vldr	s15, [r3]
 800858c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008590:	4b3b      	ldr	r3, [pc, #236]	@ (8008680 <NMI_Handler+0x3d0>)
 8008592:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 8008596:	4b0b      	ldr	r3, [pc, #44]	@ (80085c4 <NMI_Handler+0x314>)
 8008598:	ed93 7a00 	vldr	s14, [r3]
 800859c:	4b14      	ldr	r3, [pc, #80]	@ (80085f0 <NMI_Handler+0x340>)
 800859e:	edd3 7a00 	vldr	s15, [r3]
 80085a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085a6:	4b37      	ldr	r3, [pc, #220]	@ (8008684 <NMI_Handler+0x3d4>)
 80085a8:	edc3 7a00 	vstr	s15, [r3]
 80085ac:	e06c      	b.n	8008688 <NMI_Handler+0x3d8>
 80085ae:	bf00      	nop
 80085b0:	58021000 	.word	0x58021000
 80085b4:	58020400 	.word	0x58020400
 80085b8:	24001ef0 	.word	0x24001ef0
 80085bc:	0000407c 	.word	0x0000407c
 80085c0:	00004078 	.word	0x00004078
 80085c4:	00004080 	.word	0x00004080
 80085c8:	0801ebe8 	.word	0x0801ebe8
 80085cc:	00004068 	.word	0x00004068
 80085d0:	00000030 	.word	0x00000030
 80085d4:	00000034 	.word	0x00000034
 80085d8:	00000038 	.word	0x00000038
 80085dc:	0000003c 	.word	0x0000003c
 80085e0:	00000040 	.word	0x00000040
 80085e4:	00000044 	.word	0x00000044
 80085e8:	0801ebdc 	.word	0x0801ebdc
 80085ec:	0801ebe0 	.word	0x0801ebe0
 80085f0:	00000014 	.word	0x00000014
 80085f4:	00000010 	.word	0x00000010
 80085f8:	0000000c 	.word	0x0000000c
 80085fc:	00000008 	.word	0x00000008
 8008600:	00000004 	.word	0x00000004
 8008604:	00000000 	.word	0x00000000
 8008608:	0000001c 	.word	0x0000001c
 800860c:	00000018 	.word	0x00000018
 8008610:	00000058 	.word	0x00000058
 8008614:	00000088 	.word	0x00000088
 8008618:	00004088 	.word	0x00004088
 800861c:	0000408c 	.word	0x0000408c
 8008620:	00004090 	.word	0x00004090
 8008624:	00004060 	.word	0x00004060
 8008628:	0000405c 	.word	0x0000405c
 800862c:	00004064 	.word	0x00004064
 8008630:	000040c4 	.word	0x000040c4
 8008634:	000040c8 	.word	0x000040c8
 8008638:	000040cc 	.word	0x000040cc
 800863c:	000040d0 	.word	0x000040d0
 8008640:	000040dc 	.word	0x000040dc
 8008644:	000040d4 	.word	0x000040d4
 8008648:	000040e4 	.word	0x000040e4
 800864c:	000040d8 	.word	0x000040d8
 8008650:	000040e0 	.word	0x000040e0
 8008654:	00004118 	.word	0x00004118
 8008658:	0000412c 	.word	0x0000412c
 800865c:	00004178 	.word	0x00004178
 8008660:	000040e8 	.word	0x000040e8
 8008664:	0000418c 	.word	0x0000418c
 8008668:	000040f0 	.word	0x000040f0
 800866c:	000041a0 	.word	0x000041a0
 8008670:	000040ec 	.word	0x000040ec
 8008674:	000040ac 	.word	0x000040ac
 8008678:	000040b0 	.word	0x000040b0
 800867c:	000040b8 	.word	0x000040b8
 8008680:	000040bc 	.word	0x000040bc
 8008684:	000040c0 	.word	0x000040c0


		MYDRON.ROOL = pid_angular_rate_rool;
 8008688:	4b99      	ldr	r3, [pc, #612]	@ (80088f0 <NMI_Handler+0x640>)
 800868a:	edd3 7a00 	vldr	s15, [r3]
 800868e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008692:	ee17 3a90 	vmov	r3, s15
 8008696:	b21a      	sxth	r2, r3
 8008698:	4b96      	ldr	r3, [pc, #600]	@ (80088f4 <NMI_Handler+0x644>)
 800869a:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 800869c:	4b96      	ldr	r3, [pc, #600]	@ (80088f8 <NMI_Handler+0x648>)
 800869e:	edd3 7a00 	vldr	s15, [r3]
 80086a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086a6:	ee17 3a90 	vmov	r3, s15
 80086aa:	b21a      	sxth	r2, r3
 80086ac:	4b91      	ldr	r3, [pc, #580]	@ (80088f4 <NMI_Handler+0x644>)
 80086ae:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 80086b0:	4b92      	ldr	r3, [pc, #584]	@ (80088fc <NMI_Handler+0x64c>)
 80086b2:	edd3 7a00 	vldr	s15, [r3]
 80086b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086ba:	ee17 3a90 	vmov	r3, s15
 80086be:	b21a      	sxth	r2, r3
 80086c0:	4b8c      	ldr	r3, [pc, #560]	@ (80088f4 <NMI_Handler+0x644>)
 80086c2:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 80086c4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80086c8:	f7fb f8a6 	bl	8003818 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 80086cc:	4b89      	ldr	r3, [pc, #548]	@ (80088f4 <NMI_Handler+0x644>)
 80086ce:	885b      	ldrh	r3, [r3, #2]
 80086d0:	461a      	mov	r2, r3
 80086d2:	4b8b      	ldr	r3, [pc, #556]	@ (8008900 <NMI_Handler+0x650>)
 80086d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086d8:	429a      	cmp	r2, r3
 80086da:	dd05      	ble.n	80086e8 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 80086dc:	4b88      	ldr	r3, [pc, #544]	@ (8008900 <NMI_Handler+0x650>)
 80086de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	4b83      	ldr	r3, [pc, #524]	@ (80088f4 <NMI_Handler+0x644>)
 80086e6:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 80086e8:	4b82      	ldr	r3, [pc, #520]	@ (80088f4 <NMI_Handler+0x644>)
 80086ea:	885b      	ldrh	r3, [r3, #2]
 80086ec:	ee07 3a90 	vmov	s15, r3
 80086f0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086f4:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 80088d8 <NMI_Handler+0x628>
 80086f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80086fc:	4b7d      	ldr	r3, [pc, #500]	@ (80088f4 <NMI_Handler+0x644>)
 80086fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800870a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800870e:	4b79      	ldr	r3, [pc, #484]	@ (80088f4 <NMI_Handler+0x644>)
 8008710:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008714:	ee07 3a90 	vmov	s15, r3
 8008718:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800871c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008720:	4b74      	ldr	r3, [pc, #464]	@ (80088f4 <NMI_Handler+0x644>)
 8008722:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800872e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008732:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 80088e0 <NMI_Handler+0x630>
 8008736:	ee37 7b06 	vadd.f64	d7, d7, d6
 800873a:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 80088e8 <NMI_Handler+0x638>
 800873e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008742:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008746:	ee17 3a90 	vmov	r3, s15
 800874a:	b29a      	uxth	r2, r3
 800874c:	4b6d      	ldr	r3, [pc, #436]	@ (8008904 <NMI_Handler+0x654>)
 800874e:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008750:	4b68      	ldr	r3, [pc, #416]	@ (80088f4 <NMI_Handler+0x644>)
 8008752:	885b      	ldrh	r3, [r3, #2]
 8008754:	ee07 3a90 	vmov	s15, r3
 8008758:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800875c:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 80088d8 <NMI_Handler+0x628>
 8008760:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008764:	4b63      	ldr	r3, [pc, #396]	@ (80088f4 <NMI_Handler+0x644>)
 8008766:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008772:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008776:	4b5f      	ldr	r3, [pc, #380]	@ (80088f4 <NMI_Handler+0x644>)
 8008778:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800877c:	ee07 3a90 	vmov	s15, r3
 8008780:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008784:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008788:	4b5a      	ldr	r3, [pc, #360]	@ (80088f4 <NMI_Handler+0x644>)
 800878a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008796:	ee36 7b47 	vsub.f64	d7, d6, d7
 800879a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 80088e0 <NMI_Handler+0x630>
 800879e:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087a2:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 80088e8 <NMI_Handler+0x638>
 80087a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80087ae:	ee17 3a90 	vmov	r3, s15
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	4b54      	ldr	r3, [pc, #336]	@ (8008908 <NMI_Handler+0x658>)
 80087b6:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80087b8:	4b4e      	ldr	r3, [pc, #312]	@ (80088f4 <NMI_Handler+0x644>)
 80087ba:	885b      	ldrh	r3, [r3, #2]
 80087bc:	ee07 3a90 	vmov	s15, r3
 80087c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087c4:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80088d8 <NMI_Handler+0x628>
 80087c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087cc:	4b49      	ldr	r3, [pc, #292]	@ (80088f4 <NMI_Handler+0x644>)
 80087ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80087d2:	ee07 3a90 	vmov	s15, r3
 80087d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80087de:	4b45      	ldr	r3, [pc, #276]	@ (80088f4 <NMI_Handler+0x644>)
 80087e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80087e4:	ee07 3a90 	vmov	s15, r3
 80087e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80087f0:	4b40      	ldr	r3, [pc, #256]	@ (80088f4 <NMI_Handler+0x644>)
 80087f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008802:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 80088e0 <NMI_Handler+0x630>
 8008806:	ee37 7b06 	vadd.f64	d7, d7, d6
 800880a:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 80088e8 <NMI_Handler+0x638>
 800880e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008812:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008816:	ee17 3a90 	vmov	r3, s15
 800881a:	b29a      	uxth	r2, r3
 800881c:	4b3b      	ldr	r3, [pc, #236]	@ (800890c <NMI_Handler+0x65c>)
 800881e:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8008820:	4b34      	ldr	r3, [pc, #208]	@ (80088f4 <NMI_Handler+0x644>)
 8008822:	885b      	ldrh	r3, [r3, #2]
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800882c:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 80088d8 <NMI_Handler+0x628>
 8008830:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008834:	4b2f      	ldr	r3, [pc, #188]	@ (80088f4 <NMI_Handler+0x644>)
 8008836:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008842:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008846:	4b2b      	ldr	r3, [pc, #172]	@ (80088f4 <NMI_Handler+0x644>)
 8008848:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800884c:	ee07 3a90 	vmov	s15, r3
 8008850:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008854:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008858:	4b26      	ldr	r3, [pc, #152]	@ (80088f4 <NMI_Handler+0x644>)
 800885a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008866:	ee36 7b07 	vadd.f64	d7, d6, d7
 800886a:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80088e0 <NMI_Handler+0x630>
 800886e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008872:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 80088e8 <NMI_Handler+0x638>
 8008876:	ee37 7b06 	vadd.f64	d7, d7, d6
 800887a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800887e:	ee17 3a90 	vmov	r3, s15
 8008882:	b29a      	uxth	r2, r3
 8008884:	4b22      	ldr	r3, [pc, #136]	@ (8008910 <NMI_Handler+0x660>)
 8008886:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 8008888:	4b1e      	ldr	r3, [pc, #120]	@ (8008904 <NMI_Handler+0x654>)
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	4618      	mov	r0, r3
 800888e:	f7f8 fad1 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 8008892:	4b1d      	ldr	r3, [pc, #116]	@ (8008908 <NMI_Handler+0x658>)
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f7f8 faee 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 800889c:	4b1b      	ldr	r3, [pc, #108]	@ (800890c <NMI_Handler+0x65c>)
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7f8 fb0b 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 80088a6:	4b1a      	ldr	r3, [pc, #104]	@ (8008910 <NMI_Handler+0x660>)
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7f8 fb28 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 80088b0:	4b14      	ldr	r3, [pc, #80]	@ (8008904 <NMI_Handler+0x654>)
 80088b2:	881a      	ldrh	r2, [r3, #0]
 80088b4:	4b17      	ldr	r3, [pc, #92]	@ (8008914 <NMI_Handler+0x664>)
 80088b6:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 80088b8:	4b13      	ldr	r3, [pc, #76]	@ (8008908 <NMI_Handler+0x658>)
 80088ba:	881a      	ldrh	r2, [r3, #0]
 80088bc:	4b16      	ldr	r3, [pc, #88]	@ (8008918 <NMI_Handler+0x668>)
 80088be:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 80088c0:	4b12      	ldr	r3, [pc, #72]	@ (800890c <NMI_Handler+0x65c>)
 80088c2:	881a      	ldrh	r2, [r3, #0]
 80088c4:	4b15      	ldr	r3, [pc, #84]	@ (800891c <NMI_Handler+0x66c>)
 80088c6:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 80088c8:	4b11      	ldr	r3, [pc, #68]	@ (8008910 <NMI_Handler+0x660>)
 80088ca:	881a      	ldrh	r2, [r3, #0]
 80088cc:	4b14      	ldr	r3, [pc, #80]	@ (8008920 <NMI_Handler+0x670>)
 80088ce:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 80088d0:	e517      	b.n	8008302 <NMI_Handler+0x52>
 80088d2:	bf00      	nop
 80088d4:	f3af 8000 	nop.w
 80088d8:	66666666 	.word	0x66666666
 80088dc:	3fe66666 	.word	0x3fe66666
 80088e0:	00000000 	.word	0x00000000
 80088e4:	40c48200 	.word	0x40c48200
 80088e8:	00000000 	.word	0x00000000
 80088ec:	407f4000 	.word	0x407f4000
 80088f0:	000040f0 	.word	0x000040f0
 80088f4:	00000184 	.word	0x00000184
 80088f8:	000040e8 	.word	0x000040e8
 80088fc:	000040ec 	.word	0x000040ec
 8008900:	0000406a 	.word	0x0000406a
 8008904:	000041b4 	.word	0x000041b4
 8008908:	000041b6 	.word	0x000041b6
 800890c:	000041b8 	.word	0x000041b8
 8008910:	000041ba 	.word	0x000041ba
 8008914:	000041bc 	.word	0x000041bc
 8008918:	000041be 	.word	0x000041be
 800891c:	000041c0 	.word	0x000041c0
 8008920:	000041c2 	.word	0x000041c2

08008924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8008928:	2201      	movs	r2, #1
 800892a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800892e:	4812      	ldr	r0, [pc, #72]	@ (8008978 <HardFault_Handler+0x54>)
 8008930:	f005 ff68 	bl	800e804 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008934:	2200      	movs	r2, #0
 8008936:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800893a:	4810      	ldr	r0, [pc, #64]	@ (800897c <HardFault_Handler+0x58>)
 800893c:	f005 ff62 	bl	800e804 <HAL_GPIO_WritePin>
	LED_R_1;
 8008940:	2201      	movs	r2, #1
 8008942:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008946:	480d      	ldr	r0, [pc, #52]	@ (800897c <HardFault_Handler+0x58>)
 8008948:	f005 ff5c 	bl	800e804 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 800894c:	480c      	ldr	r0, [pc, #48]	@ (8008980 <HardFault_Handler+0x5c>)
 800894e:	f015 f9f1 	bl	801dd34 <f_close>
	wanted_rool = 0;
 8008952:	4b0c      	ldr	r3, [pc, #48]	@ (8008984 <HardFault_Handler+0x60>)
 8008954:	f04f 0200 	mov.w	r2, #0
 8008958:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800895a:	4b0b      	ldr	r3, [pc, #44]	@ (8008988 <HardFault_Handler+0x64>)
 800895c:	f04f 0200 	mov.w	r2, #0
 8008960:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008962:	4b0a      	ldr	r3, [pc, #40]	@ (800898c <HardFault_Handler+0x68>)
 8008964:	f04f 0200 	mov.w	r2, #0
 8008968:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800896a:	4b09      	ldr	r3, [pc, #36]	@ (8008990 <HardFault_Handler+0x6c>)
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b21a      	sxth	r2, r3
 8008970:	4b08      	ldr	r3, [pc, #32]	@ (8008994 <HardFault_Handler+0x70>)
 8008972:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008974:	bf00      	nop
 8008976:	e7fd      	b.n	8008974 <HardFault_Handler+0x50>
 8008978:	58021000 	.word	0x58021000
 800897c:	58020400 	.word	0x58020400
 8008980:	24001ef0 	.word	0x24001ef0
 8008984:	0000407c 	.word	0x0000407c
 8008988:	00004078 	.word	0x00004078
 800898c:	00004080 	.word	0x00004080
 8008990:	0801ebe8 	.word	0x0801ebe8
 8008994:	00004068 	.word	0x00004068

08008998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 800899c:	2200      	movs	r2, #0
 800899e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80089a2:	4812      	ldr	r0, [pc, #72]	@ (80089ec <MemManage_Handler+0x54>)
 80089a4:	f005 ff2e 	bl	800e804 <HAL_GPIO_WritePin>
	LED_Y_0;
 80089a8:	2200      	movs	r2, #0
 80089aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80089ae:	4810      	ldr	r0, [pc, #64]	@ (80089f0 <MemManage_Handler+0x58>)
 80089b0:	f005 ff28 	bl	800e804 <HAL_GPIO_WritePin>
	LED_R_1;
 80089b4:	2201      	movs	r2, #1
 80089b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80089ba:	480d      	ldr	r0, [pc, #52]	@ (80089f0 <MemManage_Handler+0x58>)
 80089bc:	f005 ff22 	bl	800e804 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80089c0:	480c      	ldr	r0, [pc, #48]	@ (80089f4 <MemManage_Handler+0x5c>)
 80089c2:	f015 f9b7 	bl	801dd34 <f_close>
	wanted_rool = 0;
 80089c6:	4b0c      	ldr	r3, [pc, #48]	@ (80089f8 <MemManage_Handler+0x60>)
 80089c8:	f04f 0200 	mov.w	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80089ce:	4b0b      	ldr	r3, [pc, #44]	@ (80089fc <MemManage_Handler+0x64>)
 80089d0:	f04f 0200 	mov.w	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80089d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a00 <MemManage_Handler+0x68>)
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80089de:	4b09      	ldr	r3, [pc, #36]	@ (8008a04 <MemManage_Handler+0x6c>)
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	b21a      	sxth	r2, r3
 80089e4:	4b08      	ldr	r3, [pc, #32]	@ (8008a08 <MemManage_Handler+0x70>)
 80089e6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80089e8:	bf00      	nop
 80089ea:	e7fd      	b.n	80089e8 <MemManage_Handler+0x50>
 80089ec:	58021000 	.word	0x58021000
 80089f0:	58020400 	.word	0x58020400
 80089f4:	24001ef0 	.word	0x24001ef0
 80089f8:	0000407c 	.word	0x0000407c
 80089fc:	00004078 	.word	0x00004078
 8008a00:	00004080 	.word	0x00004080
 8008a04:	0801ebe8 	.word	0x0801ebe8
 8008a08:	00004068 	.word	0x00004068

08008a0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008a10:	2201      	movs	r2, #1
 8008a12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a16:	4812      	ldr	r0, [pc, #72]	@ (8008a60 <BusFault_Handler+0x54>)
 8008a18:	f005 fef4 	bl	800e804 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a22:	4810      	ldr	r0, [pc, #64]	@ (8008a64 <BusFault_Handler+0x58>)
 8008a24:	f005 feee 	bl	800e804 <HAL_GPIO_WritePin>
	LED_R_1;
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a2e:	480d      	ldr	r0, [pc, #52]	@ (8008a64 <BusFault_Handler+0x58>)
 8008a30:	f005 fee8 	bl	800e804 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008a34:	480c      	ldr	r0, [pc, #48]	@ (8008a68 <BusFault_Handler+0x5c>)
 8008a36:	f015 f97d 	bl	801dd34 <f_close>
	wanted_rool = 0;
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a6c <BusFault_Handler+0x60>)
 8008a3c:	f04f 0200 	mov.w	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008a42:	4b0b      	ldr	r3, [pc, #44]	@ (8008a70 <BusFault_Handler+0x64>)
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a74 <BusFault_Handler+0x68>)
 8008a4c:	f04f 0200 	mov.w	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008a52:	4b09      	ldr	r3, [pc, #36]	@ (8008a78 <BusFault_Handler+0x6c>)
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	b21a      	sxth	r2, r3
 8008a58:	4b08      	ldr	r3, [pc, #32]	@ (8008a7c <BusFault_Handler+0x70>)
 8008a5a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a5c:	bf00      	nop
 8008a5e:	e7fd      	b.n	8008a5c <BusFault_Handler+0x50>
 8008a60:	58021000 	.word	0x58021000
 8008a64:	58020400 	.word	0x58020400
 8008a68:	24001ef0 	.word	0x24001ef0
 8008a6c:	0000407c 	.word	0x0000407c
 8008a70:	00004078 	.word	0x00004078
 8008a74:	00004080 	.word	0x00004080
 8008a78:	0801ebe8 	.word	0x0801ebe8
 8008a7c:	00004068 	.word	0x00004068

08008a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 8008a84:	2200      	movs	r2, #0
 8008a86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a8a:	4812      	ldr	r0, [pc, #72]	@ (8008ad4 <UsageFault_Handler+0x54>)
 8008a8c:	f005 feba 	bl	800e804 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008a90:	2201      	movs	r2, #1
 8008a92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a96:	4810      	ldr	r0, [pc, #64]	@ (8008ad8 <UsageFault_Handler+0x58>)
 8008a98:	f005 feb4 	bl	800e804 <HAL_GPIO_WritePin>
	LED_R_1;
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008aa2:	480d      	ldr	r0, [pc, #52]	@ (8008ad8 <UsageFault_Handler+0x58>)
 8008aa4:	f005 feae 	bl	800e804 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008aa8:	480c      	ldr	r0, [pc, #48]	@ (8008adc <UsageFault_Handler+0x5c>)
 8008aaa:	f015 f943 	bl	801dd34 <f_close>
	wanted_rool = 0;
 8008aae:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae0 <UsageFault_Handler+0x60>)
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae4 <UsageFault_Handler+0x64>)
 8008ab8:	f04f 0200 	mov.w	r2, #0
 8008abc:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008abe:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae8 <UsageFault_Handler+0x68>)
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008ac6:	4b09      	ldr	r3, [pc, #36]	@ (8008aec <UsageFault_Handler+0x6c>)
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	b21a      	sxth	r2, r3
 8008acc:	4b08      	ldr	r3, [pc, #32]	@ (8008af0 <UsageFault_Handler+0x70>)
 8008ace:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ad0:	bf00      	nop
 8008ad2:	e7fd      	b.n	8008ad0 <UsageFault_Handler+0x50>
 8008ad4:	58021000 	.word	0x58021000
 8008ad8:	58020400 	.word	0x58020400
 8008adc:	24001ef0 	.word	0x24001ef0
 8008ae0:	0000407c 	.word	0x0000407c
 8008ae4:	00004078 	.word	0x00004078
 8008ae8:	00004080 	.word	0x00004080
 8008aec:	0801ebe8 	.word	0x0801ebe8
 8008af0:	00004068 	.word	0x00004068

08008af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008af4:	b480      	push	{r7}
 8008af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008af8:	bf00      	nop
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b02:	b480      	push	{r7}
 8008b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b06:	bf00      	nop
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b10:	b480      	push	{r7}
 8008b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b14:	bf00      	nop
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
	...

08008b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8008b24:	4b08      	ldr	r3, [pc, #32]	@ (8008b48 <SysTick_Handler+0x28>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	4a07      	ldr	r2, [pc, #28]	@ (8008b48 <SysTick_Handler+0x28>)
 8008b2c:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8008b2e:	4b06      	ldr	r3, [pc, #24]	@ (8008b48 <SysTick_Handler+0x28>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b09      	cmp	r3, #9
 8008b34:	d904      	bls.n	8008b40 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8008b36:	4b04      	ldr	r3, [pc, #16]	@ (8008b48 <SysTick_Handler+0x28>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8008b3c:	f7ff fb98 	bl	8008270 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b40:	f000 fd04 	bl	800954c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b44:	bf00      	nop
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	24000374 	.word	0x24000374

08008b4c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008b50:	4802      	ldr	r0, [pc, #8]	@ (8008b5c <DMA1_Stream0_IRQHandler+0x10>)
 8008b52:	f004 f96b 	bl	800ce2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008b56:	bf00      	nop
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	240002fc 	.word	0x240002fc

08008b60 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8008b64:	4802      	ldr	r0, [pc, #8]	@ (8008b70 <ADC_IRQHandler+0x10>)
 8008b66:	f001 fb3f 	bl	800a1e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008b6a:	bf00      	nop
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	240000ac 	.word	0x240000ac

08008b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008b78:	4802      	ldr	r0, [pc, #8]	@ (8008b84 <TIM2_IRQHandler+0x10>)
 8008b7a:	f00d ff02 	bl	8016982 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008b7e:	bf00      	nop
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	240003cc 	.word	0x240003cc

08008b88 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008b8c:	4802      	ldr	r0, [pc, #8]	@ (8008b98 <SPI2_IRQHandler+0x10>)
 8008b8e:	f00d f871 	bl	8015c74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008b92:	bf00      	nop
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	240001ec 	.word	0x240001ec

08008b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008ba0:	4802      	ldr	r0, [pc, #8]	@ (8008bac <USART1_IRQHandler+0x10>)
 8008ba2:	f00f fb45 	bl	8018230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008ba6:	bf00      	nop
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	240004b0 	.word	0x240004b0

08008bb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8008bb4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008bb8:	f005 fe3d 	bl	800e836 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008bbc:	bf00      	nop
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008bc4:	4802      	ldr	r0, [pc, #8]	@ (8008bd0 <DMA2_Stream0_IRQHandler+0x10>)
 8008bc6:	f004 f931 	bl	800ce2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008bca:	bf00      	nop
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	2400011c 	.word	0x2400011c

08008bd4 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008bd8:	4802      	ldr	r0, [pc, #8]	@ (8008be4 <I2C5_EV_IRQHandler+0x10>)
 8008bda:	f006 fa21 	bl	800f020 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8008bde:	bf00      	nop
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	24000198 	.word	0x24000198

08008be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008bec:	4b32      	ldr	r3, [pc, #200]	@ (8008cb8 <SystemInit+0xd0>)
 8008bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf2:	4a31      	ldr	r2, [pc, #196]	@ (8008cb8 <SystemInit+0xd0>)
 8008bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8008cbc <SystemInit+0xd4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 030f 	and.w	r3, r3, #15
 8008c04:	2b06      	cmp	r3, #6
 8008c06:	d807      	bhi.n	8008c18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008c08:	4b2c      	ldr	r3, [pc, #176]	@ (8008cbc <SystemInit+0xd4>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f023 030f 	bic.w	r3, r3, #15
 8008c10:	4a2a      	ldr	r2, [pc, #168]	@ (8008cbc <SystemInit+0xd4>)
 8008c12:	f043 0307 	orr.w	r3, r3, #7
 8008c16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008c18:	4b29      	ldr	r3, [pc, #164]	@ (8008cc0 <SystemInit+0xd8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a28      	ldr	r2, [pc, #160]	@ (8008cc0 <SystemInit+0xd8>)
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008c24:	4b26      	ldr	r3, [pc, #152]	@ (8008cc0 <SystemInit+0xd8>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008c2a:	4b25      	ldr	r3, [pc, #148]	@ (8008cc0 <SystemInit+0xd8>)
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	4924      	ldr	r1, [pc, #144]	@ (8008cc0 <SystemInit+0xd8>)
 8008c30:	4b24      	ldr	r3, [pc, #144]	@ (8008cc4 <SystemInit+0xdc>)
 8008c32:	4013      	ands	r3, r2
 8008c34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008c36:	4b21      	ldr	r3, [pc, #132]	@ (8008cbc <SystemInit+0xd4>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d007      	beq.n	8008c52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008c42:	4b1e      	ldr	r3, [pc, #120]	@ (8008cbc <SystemInit+0xd4>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f023 030f 	bic.w	r3, r3, #15
 8008c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008cbc <SystemInit+0xd4>)
 8008c4c:	f043 0307 	orr.w	r3, r3, #7
 8008c50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008c52:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc0 <SystemInit+0xd8>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008c58:	4b19      	ldr	r3, [pc, #100]	@ (8008cc0 <SystemInit+0xd8>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008c5e:	4b18      	ldr	r3, [pc, #96]	@ (8008cc0 <SystemInit+0xd8>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008c64:	4b16      	ldr	r3, [pc, #88]	@ (8008cc0 <SystemInit+0xd8>)
 8008c66:	4a18      	ldr	r2, [pc, #96]	@ (8008cc8 <SystemInit+0xe0>)
 8008c68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008c6a:	4b15      	ldr	r3, [pc, #84]	@ (8008cc0 <SystemInit+0xd8>)
 8008c6c:	4a17      	ldr	r2, [pc, #92]	@ (8008ccc <SystemInit+0xe4>)
 8008c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008c70:	4b13      	ldr	r3, [pc, #76]	@ (8008cc0 <SystemInit+0xd8>)
 8008c72:	4a17      	ldr	r2, [pc, #92]	@ (8008cd0 <SystemInit+0xe8>)
 8008c74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008c76:	4b12      	ldr	r3, [pc, #72]	@ (8008cc0 <SystemInit+0xd8>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008c7c:	4b10      	ldr	r3, [pc, #64]	@ (8008cc0 <SystemInit+0xd8>)
 8008c7e:	4a14      	ldr	r2, [pc, #80]	@ (8008cd0 <SystemInit+0xe8>)
 8008c80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008c82:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc0 <SystemInit+0xd8>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008c88:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc0 <SystemInit+0xd8>)
 8008c8a:	4a11      	ldr	r2, [pc, #68]	@ (8008cd0 <SystemInit+0xe8>)
 8008c8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc0 <SystemInit+0xd8>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008c94:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc0 <SystemInit+0xd8>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a09      	ldr	r2, [pc, #36]	@ (8008cc0 <SystemInit+0xd8>)
 8008c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008ca0:	4b07      	ldr	r3, [pc, #28]	@ (8008cc0 <SystemInit+0xd8>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8008cd4 <SystemInit+0xec>)
 8008ca8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008cac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008cae:	bf00      	nop
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	e000ed00 	.word	0xe000ed00
 8008cbc:	52002000 	.word	0x52002000
 8008cc0:	58024400 	.word	0x58024400
 8008cc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8008cc8:	02020200 	.word	0x02020200
 8008ccc:	01ff0000 	.word	0x01ff0000
 8008cd0:	01010280 	.word	0x01010280
 8008cd4:	52004000 	.word	0x52004000

08008cd8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b098      	sub	sp, #96	@ 0x60
 8008cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008cde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
 8008ce6:	605a      	str	r2, [r3, #4]
 8008ce8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008cea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008cee:	2200      	movs	r2, #0
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	605a      	str	r2, [r3, #4]
 8008cf4:	609a      	str	r2, [r3, #8]
 8008cf6:	60da      	str	r2, [r3, #12]
 8008cf8:	611a      	str	r2, [r3, #16]
 8008cfa:	615a      	str	r2, [r3, #20]
 8008cfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008cfe:	1d3b      	adds	r3, r7, #4
 8008d00:	2234      	movs	r2, #52	@ 0x34
 8008d02:	2100      	movs	r1, #0
 8008d04:	4618      	mov	r0, r3
 8008d06:	f015 fa0d 	bl	801e124 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008d0a:	4b45      	ldr	r3, [pc, #276]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008d0c:	4a45      	ldr	r2, [pc, #276]	@ (8008e24 <MX_TIM1_Init+0x14c>)
 8008d0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008d10:	4b43      	ldr	r3, [pc, #268]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008d12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008d16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d18:	4b41      	ldr	r3, [pc, #260]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008d1e:	4b40      	ldr	r3, [pc, #256]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008d20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d26:	4b3e      	ldr	r3, [pc, #248]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008d2c:	4b3c      	ldr	r3, [pc, #240]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008d32:	4b3b      	ldr	r3, [pc, #236]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008d34:	2280      	movs	r2, #128	@ 0x80
 8008d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008d38:	4839      	ldr	r0, [pc, #228]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008d3a:	f00d fc57 	bl	80165ec <HAL_TIM_PWM_Init>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008d44:	f7ff f8b8 	bl	8007eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d50:	2300      	movs	r3, #0
 8008d52:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008d54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4831      	ldr	r0, [pc, #196]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008d5c:	f00e ff64 	bl	8017c28 <HAL_TIMEx_MasterConfigSynchronization>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008d66:	f7ff f8a7 	bl	8007eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008d6a:	2360      	movs	r3, #96	@ 0x60
 8008d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008d72:	2300      	movs	r3, #0
 8008d74:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008d76:	2300      	movs	r3, #0
 8008d78:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008d82:	2300      	movs	r3, #0
 8008d84:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008d86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d8a:	2204      	movs	r2, #4
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4824      	ldr	r0, [pc, #144]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008d90:	f00d ff9a 	bl	8016cc8 <HAL_TIM_PWM_ConfigChannel>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008d9a:	f7ff f88d 	bl	8007eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008d9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008da2:	2208      	movs	r2, #8
 8008da4:	4619      	mov	r1, r3
 8008da6:	481e      	ldr	r0, [pc, #120]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008da8:	f00d ff8e 	bl	8016cc8 <HAL_TIM_PWM_ConfigChannel>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008db2:	f7ff f881 	bl	8007eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008db6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008dba:	220c      	movs	r2, #12
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4818      	ldr	r0, [pc, #96]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008dc0:	f00d ff82 	bl	8016cc8 <HAL_TIM_PWM_ConfigChannel>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008dca:	f7ff f875 	bl	8007eb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008dde:	2300      	movs	r3, #0
 8008de0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008de6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008dec:	2300      	movs	r3, #0
 8008dee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008df0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008dfe:	1d3b      	adds	r3, r7, #4
 8008e00:	4619      	mov	r1, r3
 8008e02:	4807      	ldr	r0, [pc, #28]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008e04:	f00e ffac 	bl	8017d60 <HAL_TIMEx_ConfigBreakDeadTime>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008e0e:	f7ff f853 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008e12:	4803      	ldr	r0, [pc, #12]	@ (8008e20 <MX_TIM1_Init+0x148>)
 8008e14:	f000 f9da 	bl	80091cc <HAL_TIM_MspPostInit>

}
 8008e18:	bf00      	nop
 8008e1a:	3760      	adds	r7, #96	@ 0x60
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	24000380 	.word	0x24000380
 8008e24:	40010000 	.word	0x40010000

08008e28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e2e:	f107 0314 	add.w	r3, r7, #20
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	605a      	str	r2, [r3, #4]
 8008e38:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008e3a:	1d3b      	adds	r3, r7, #4
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	605a      	str	r2, [r3, #4]
 8008e42:	609a      	str	r2, [r3, #8]
 8008e44:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008e46:	4b21      	ldr	r3, [pc, #132]	@ (8008ecc <MX_TIM2_Init+0xa4>)
 8008e48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008e4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8008ecc <MX_TIM2_Init+0xa4>)
 8008e50:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008e54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e56:	4b1d      	ldr	r3, [pc, #116]	@ (8008ecc <MX_TIM2_Init+0xa4>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8008ecc <MX_TIM2_Init+0xa4>)
 8008e5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008e62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e64:	4b19      	ldr	r3, [pc, #100]	@ (8008ecc <MX_TIM2_Init+0xa4>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008e6a:	4b18      	ldr	r3, [pc, #96]	@ (8008ecc <MX_TIM2_Init+0xa4>)
 8008e6c:	2280      	movs	r2, #128	@ 0x80
 8008e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008e70:	4816      	ldr	r0, [pc, #88]	@ (8008ecc <MX_TIM2_Init+0xa4>)
 8008e72:	f00d fd2f 	bl	80168d4 <HAL_TIM_IC_Init>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008e7c:	f7ff f81c 	bl	8007eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e80:	2300      	movs	r3, #0
 8008e82:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008e88:	f107 0314 	add.w	r3, r7, #20
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	480f      	ldr	r0, [pc, #60]	@ (8008ecc <MX_TIM2_Init+0xa4>)
 8008e90:	f00e feca 	bl	8017c28 <HAL_TIMEx_MasterConfigSynchronization>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008e9a:	f7ff f80d 	bl	8007eb8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008eae:	1d3b      	adds	r3, r7, #4
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	4805      	ldr	r0, [pc, #20]	@ (8008ecc <MX_TIM2_Init+0xa4>)
 8008eb6:	f00d fe6b 	bl	8016b90 <HAL_TIM_IC_ConfigChannel>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008ec0:	f7fe fffa 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008ec4:	bf00      	nop
 8008ec6:	3720      	adds	r7, #32
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	240003cc 	.word	0x240003cc

08008ed0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	@ 0x28
 8008ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ed6:	f107 031c 	add.w	r3, r7, #28
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	605a      	str	r2, [r3, #4]
 8008ee0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	605a      	str	r2, [r3, #4]
 8008eea:	609a      	str	r2, [r3, #8]
 8008eec:	60da      	str	r2, [r3, #12]
 8008eee:	611a      	str	r2, [r3, #16]
 8008ef0:	615a      	str	r2, [r3, #20]
 8008ef2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008ef4:	4b32      	ldr	r3, [pc, #200]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008ef6:	4a33      	ldr	r2, [pc, #204]	@ (8008fc4 <MX_TIM3_Init+0xf4>)
 8008ef8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008efa:	4b31      	ldr	r3, [pc, #196]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008efc:	221c      	movs	r2, #28
 8008efe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f00:	4b2f      	ldr	r3, [pc, #188]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008f06:	4b2e      	ldr	r3, [pc, #184]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008f08:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008f0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f14:	4b2a      	ldr	r3, [pc, #168]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008f1a:	4829      	ldr	r0, [pc, #164]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008f1c:	f00d fb66 	bl	80165ec <HAL_TIM_PWM_Init>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008f26:	f7fe ffc7 	bl	8007eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008f32:	f107 031c 	add.w	r3, r7, #28
 8008f36:	4619      	mov	r1, r3
 8008f38:	4821      	ldr	r0, [pc, #132]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008f3a:	f00e fe75 	bl	8017c28 <HAL_TIMEx_MasterConfigSynchronization>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008f44:	f7fe ffb8 	bl	8007eb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f48:	2360      	movs	r3, #96	@ 0x60
 8008f4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f50:	2300      	movs	r3, #0
 8008f52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f54:	2300      	movs	r3, #0
 8008f56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f58:	463b      	mov	r3, r7
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4818      	ldr	r0, [pc, #96]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008f60:	f00d feb2 	bl	8016cc8 <HAL_TIM_PWM_ConfigChannel>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008f6a:	f7fe ffa5 	bl	8007eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008f6e:	463b      	mov	r3, r7
 8008f70:	2204      	movs	r2, #4
 8008f72:	4619      	mov	r1, r3
 8008f74:	4812      	ldr	r0, [pc, #72]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008f76:	f00d fea7 	bl	8016cc8 <HAL_TIM_PWM_ConfigChannel>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008f80:	f7fe ff9a 	bl	8007eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008f84:	463b      	mov	r3, r7
 8008f86:	2208      	movs	r2, #8
 8008f88:	4619      	mov	r1, r3
 8008f8a:	480d      	ldr	r0, [pc, #52]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008f8c:	f00d fe9c 	bl	8016cc8 <HAL_TIM_PWM_ConfigChannel>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008f96:	f7fe ff8f 	bl	8007eb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008f9a:	463b      	mov	r3, r7
 8008f9c:	220c      	movs	r2, #12
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4807      	ldr	r0, [pc, #28]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008fa2:	f00d fe91 	bl	8016cc8 <HAL_TIM_PWM_ConfigChannel>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008fac:	f7fe ff84 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008fb0:	4803      	ldr	r0, [pc, #12]	@ (8008fc0 <MX_TIM3_Init+0xf0>)
 8008fb2:	f000 f90b 	bl	80091cc <HAL_TIM_MspPostInit>

}
 8008fb6:	bf00      	nop
 8008fb8:	3728      	adds	r7, #40	@ 0x28
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	24000418 	.word	0x24000418
 8008fc4:	40000400 	.word	0x40000400

08008fc8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008fce:	f107 0310 	add.w	r3, r7, #16
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	605a      	str	r2, [r3, #4]
 8008fd8:	609a      	str	r2, [r3, #8]
 8008fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fdc:	1d3b      	adds	r3, r7, #4
 8008fde:	2200      	movs	r2, #0
 8008fe0:	601a      	str	r2, [r3, #0]
 8008fe2:	605a      	str	r2, [r3, #4]
 8008fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008fe6:	4b21      	ldr	r3, [pc, #132]	@ (800906c <MX_TIM8_Init+0xa4>)
 8008fe8:	4a21      	ldr	r2, [pc, #132]	@ (8009070 <MX_TIM8_Init+0xa8>)
 8008fea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008fec:	4b1f      	ldr	r3, [pc, #124]	@ (800906c <MX_TIM8_Init+0xa4>)
 8008fee:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008ff2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800906c <MX_TIM8_Init+0xa4>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800906c <MX_TIM8_Init+0xa4>)
 8008ffc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009000:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009002:	4b1a      	ldr	r3, [pc, #104]	@ (800906c <MX_TIM8_Init+0xa4>)
 8009004:	2200      	movs	r2, #0
 8009006:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009008:	4b18      	ldr	r3, [pc, #96]	@ (800906c <MX_TIM8_Init+0xa4>)
 800900a:	2200      	movs	r2, #0
 800900c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800900e:	4b17      	ldr	r3, [pc, #92]	@ (800906c <MX_TIM8_Init+0xa4>)
 8009010:	2200      	movs	r2, #0
 8009012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009014:	4815      	ldr	r0, [pc, #84]	@ (800906c <MX_TIM8_Init+0xa4>)
 8009016:	f00d f98e 	bl	8016336 <HAL_TIM_Base_Init>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8009020:	f7fe ff4a 	bl	8007eb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009028:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800902a:	f107 0310 	add.w	r3, r7, #16
 800902e:	4619      	mov	r1, r3
 8009030:	480e      	ldr	r0, [pc, #56]	@ (800906c <MX_TIM8_Init+0xa4>)
 8009032:	f00d ff5d 	bl	8016ef0 <HAL_TIM_ConfigClockSource>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800903c:	f7fe ff3c 	bl	8007eb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009040:	2320      	movs	r3, #32
 8009042:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8009044:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009048:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800904e:	1d3b      	adds	r3, r7, #4
 8009050:	4619      	mov	r1, r3
 8009052:	4806      	ldr	r0, [pc, #24]	@ (800906c <MX_TIM8_Init+0xa4>)
 8009054:	f00e fde8 	bl	8017c28 <HAL_TIMEx_MasterConfigSynchronization>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800905e:	f7fe ff2b 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8009062:	bf00      	nop
 8009064:	3720      	adds	r7, #32
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	24000464 	.word	0x24000464
 8009070:	40010400 	.word	0x40010400

08009074 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a16      	ldr	r2, [pc, #88]	@ (80090dc <HAL_TIM_PWM_MspInit+0x68>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d10f      	bne.n	80090a6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009086:	4b16      	ldr	r3, [pc, #88]	@ (80090e0 <HAL_TIM_PWM_MspInit+0x6c>)
 8009088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800908c:	4a14      	ldr	r2, [pc, #80]	@ (80090e0 <HAL_TIM_PWM_MspInit+0x6c>)
 800908e:	f043 0301 	orr.w	r3, r3, #1
 8009092:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009096:	4b12      	ldr	r3, [pc, #72]	@ (80090e0 <HAL_TIM_PWM_MspInit+0x6c>)
 8009098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80090a4:	e013      	b.n	80090ce <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a0e      	ldr	r2, [pc, #56]	@ (80090e4 <HAL_TIM_PWM_MspInit+0x70>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d10e      	bne.n	80090ce <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80090b0:	4b0b      	ldr	r3, [pc, #44]	@ (80090e0 <HAL_TIM_PWM_MspInit+0x6c>)
 80090b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090b6:	4a0a      	ldr	r2, [pc, #40]	@ (80090e0 <HAL_TIM_PWM_MspInit+0x6c>)
 80090b8:	f043 0302 	orr.w	r3, r3, #2
 80090bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80090c0:	4b07      	ldr	r3, [pc, #28]	@ (80090e0 <HAL_TIM_PWM_MspInit+0x6c>)
 80090c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	60bb      	str	r3, [r7, #8]
 80090cc:	68bb      	ldr	r3, [r7, #8]
}
 80090ce:	bf00      	nop
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	40010000 	.word	0x40010000
 80090e0:	58024400 	.word	0x58024400
 80090e4:	40000400 	.word	0x40000400

080090e8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	@ 0x28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090f0:	f107 0314 	add.w	r3, r7, #20
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	605a      	str	r2, [r3, #4]
 80090fa:	609a      	str	r2, [r3, #8]
 80090fc:	60da      	str	r2, [r3, #12]
 80090fe:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009108:	d135      	bne.n	8009176 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800910a:	4b1d      	ldr	r3, [pc, #116]	@ (8009180 <HAL_TIM_IC_MspInit+0x98>)
 800910c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009110:	4a1b      	ldr	r2, [pc, #108]	@ (8009180 <HAL_TIM_IC_MspInit+0x98>)
 8009112:	f043 0301 	orr.w	r3, r3, #1
 8009116:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800911a:	4b19      	ldr	r3, [pc, #100]	@ (8009180 <HAL_TIM_IC_MspInit+0x98>)
 800911c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009128:	4b15      	ldr	r3, [pc, #84]	@ (8009180 <HAL_TIM_IC_MspInit+0x98>)
 800912a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800912e:	4a14      	ldr	r2, [pc, #80]	@ (8009180 <HAL_TIM_IC_MspInit+0x98>)
 8009130:	f043 0301 	orr.w	r3, r3, #1
 8009134:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009138:	4b11      	ldr	r3, [pc, #68]	@ (8009180 <HAL_TIM_IC_MspInit+0x98>)
 800913a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	60fb      	str	r3, [r7, #12]
 8009144:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009146:	2301      	movs	r3, #1
 8009148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800914a:	2302      	movs	r3, #2
 800914c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800914e:	2300      	movs	r3, #0
 8009150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009152:	2300      	movs	r3, #0
 8009154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009156:	2301      	movs	r3, #1
 8009158:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800915a:	f107 0314 	add.w	r3, r7, #20
 800915e:	4619      	mov	r1, r3
 8009160:	4808      	ldr	r0, [pc, #32]	@ (8009184 <HAL_TIM_IC_MspInit+0x9c>)
 8009162:	f005 f98f 	bl	800e484 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8009166:	2200      	movs	r2, #0
 8009168:	2101      	movs	r1, #1
 800916a:	201c      	movs	r0, #28
 800916c:	f002 fa8b 	bl	800b686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009170:	201c      	movs	r0, #28
 8009172:	f002 faa2 	bl	800b6ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8009176:	bf00      	nop
 8009178:	3728      	adds	r7, #40	@ 0x28
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	58024400 	.word	0x58024400
 8009184:	58020000 	.word	0x58020000

08009188 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a0b      	ldr	r2, [pc, #44]	@ (80091c4 <HAL_TIM_Base_MspInit+0x3c>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d10e      	bne.n	80091b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800919a:	4b0b      	ldr	r3, [pc, #44]	@ (80091c8 <HAL_TIM_Base_MspInit+0x40>)
 800919c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091a0:	4a09      	ldr	r2, [pc, #36]	@ (80091c8 <HAL_TIM_Base_MspInit+0x40>)
 80091a2:	f043 0302 	orr.w	r3, r3, #2
 80091a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80091aa:	4b07      	ldr	r3, [pc, #28]	@ (80091c8 <HAL_TIM_Base_MspInit+0x40>)
 80091ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	60fb      	str	r3, [r7, #12]
 80091b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80091b8:	bf00      	nop
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	40010400 	.word	0x40010400
 80091c8:	58024400 	.word	0x58024400

080091cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	@ 0x28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d4:	f107 0314 	add.w	r3, r7, #20
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	605a      	str	r2, [r3, #4]
 80091de:	609a      	str	r2, [r3, #8]
 80091e0:	60da      	str	r2, [r3, #12]
 80091e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a26      	ldr	r2, [pc, #152]	@ (8009284 <HAL_TIM_MspPostInit+0xb8>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d120      	bne.n	8009230 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80091ee:	4b26      	ldr	r3, [pc, #152]	@ (8009288 <HAL_TIM_MspPostInit+0xbc>)
 80091f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80091f4:	4a24      	ldr	r2, [pc, #144]	@ (8009288 <HAL_TIM_MspPostInit+0xbc>)
 80091f6:	f043 0310 	orr.w	r3, r3, #16
 80091fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80091fe:	4b22      	ldr	r3, [pc, #136]	@ (8009288 <HAL_TIM_MspPostInit+0xbc>)
 8009200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009204:	f003 0310 	and.w	r3, r3, #16
 8009208:	613b      	str	r3, [r7, #16]
 800920a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800920c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8009210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009212:	2302      	movs	r3, #2
 8009214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009216:	2300      	movs	r3, #0
 8009218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800921a:	2300      	movs	r3, #0
 800921c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800921e:	2301      	movs	r3, #1
 8009220:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009222:	f107 0314 	add.w	r3, r7, #20
 8009226:	4619      	mov	r1, r3
 8009228:	4818      	ldr	r0, [pc, #96]	@ (800928c <HAL_TIM_MspPostInit+0xc0>)
 800922a:	f005 f92b 	bl	800e484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800922e:	e024      	b.n	800927a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a16      	ldr	r2, [pc, #88]	@ (8009290 <HAL_TIM_MspPostInit+0xc4>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d11f      	bne.n	800927a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800923a:	4b13      	ldr	r3, [pc, #76]	@ (8009288 <HAL_TIM_MspPostInit+0xbc>)
 800923c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009240:	4a11      	ldr	r2, [pc, #68]	@ (8009288 <HAL_TIM_MspPostInit+0xbc>)
 8009242:	f043 0304 	orr.w	r3, r3, #4
 8009246:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800924a:	4b0f      	ldr	r3, [pc, #60]	@ (8009288 <HAL_TIM_MspPostInit+0xbc>)
 800924c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8009258:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800925c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800925e:	2302      	movs	r3, #2
 8009260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009262:	2300      	movs	r3, #0
 8009264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009266:	2300      	movs	r3, #0
 8009268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800926a:	2302      	movs	r3, #2
 800926c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800926e:	f107 0314 	add.w	r3, r7, #20
 8009272:	4619      	mov	r1, r3
 8009274:	4807      	ldr	r0, [pc, #28]	@ (8009294 <HAL_TIM_MspPostInit+0xc8>)
 8009276:	f005 f905 	bl	800e484 <HAL_GPIO_Init>
}
 800927a:	bf00      	nop
 800927c:	3728      	adds	r7, #40	@ 0x28
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	40010000 	.word	0x40010000
 8009288:	58024400 	.word	0x58024400
 800928c:	58021000 	.word	0x58021000
 8009290:	40000400 	.word	0x40000400
 8009294:	58020800 	.word	0x58020800

08009298 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800929c:	4b22      	ldr	r3, [pc, #136]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 800929e:	4a23      	ldr	r2, [pc, #140]	@ (800932c <MX_USART1_UART_Init+0x94>)
 80092a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80092a2:	4b21      	ldr	r3, [pc, #132]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80092a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80092aa:	4b1f      	ldr	r3, [pc, #124]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80092b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80092b6:	4b1c      	ldr	r3, [pc, #112]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80092bc:	4b1a      	ldr	r3, [pc, #104]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092be:	220c      	movs	r2, #12
 80092c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092c2:	4b19      	ldr	r3, [pc, #100]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80092c8:	4b17      	ldr	r3, [pc, #92]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80092ce:	4b16      	ldr	r3, [pc, #88]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80092d4:	4b14      	ldr	r3, [pc, #80]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80092da:	4b13      	ldr	r3, [pc, #76]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092dc:	2200      	movs	r2, #0
 80092de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80092e0:	4811      	ldr	r0, [pc, #68]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092e2:	f00e fde7 	bl	8017eb4 <HAL_UART_Init>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80092ec:	f7fe fde4 	bl	8007eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80092f0:	2100      	movs	r1, #0
 80092f2:	480d      	ldr	r0, [pc, #52]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 80092f4:	f011 fc97 	bl	801ac26 <HAL_UARTEx_SetTxFifoThreshold>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80092fe:	f7fe fddb 	bl	8007eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009302:	2100      	movs	r1, #0
 8009304:	4808      	ldr	r0, [pc, #32]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 8009306:	f011 fccc 	bl	801aca2 <HAL_UARTEx_SetRxFifoThreshold>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8009310:	f7fe fdd2 	bl	8007eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8009314:	4804      	ldr	r0, [pc, #16]	@ (8009328 <MX_USART1_UART_Init+0x90>)
 8009316:	f011 fc4d 	bl	801abb4 <HAL_UARTEx_DisableFifoMode>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009320:	f7fe fdca 	bl	8007eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009324:	bf00      	nop
 8009326:	bd80      	pop	{r7, pc}
 8009328:	240004b0 	.word	0x240004b0
 800932c:	40011000 	.word	0x40011000

08009330 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b0b8      	sub	sp, #224	@ 0xe0
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009338:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800933c:	2200      	movs	r2, #0
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	605a      	str	r2, [r3, #4]
 8009342:	609a      	str	r2, [r3, #8]
 8009344:	60da      	str	r2, [r3, #12]
 8009346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009348:	f107 0310 	add.w	r3, r7, #16
 800934c:	22b8      	movs	r2, #184	@ 0xb8
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f014 fee7 	bl	801e124 <memset>
  if(uartHandle->Instance==USART1)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a2b      	ldr	r2, [pc, #172]	@ (8009408 <HAL_UART_MspInit+0xd8>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d14e      	bne.n	80093fe <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009360:	f04f 0201 	mov.w	r2, #1
 8009364:	f04f 0300 	mov.w	r3, #0
 8009368:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800936c:	2300      	movs	r3, #0
 800936e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009372:	f107 0310 	add.w	r3, r7, #16
 8009376:	4618      	mov	r0, r3
 8009378:	f008 fe96 	bl	80120a8 <HAL_RCCEx_PeriphCLKConfig>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8009382:	f7fe fd99 	bl	8007eb8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009386:	4b21      	ldr	r3, [pc, #132]	@ (800940c <HAL_UART_MspInit+0xdc>)
 8009388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800938c:	4a1f      	ldr	r2, [pc, #124]	@ (800940c <HAL_UART_MspInit+0xdc>)
 800938e:	f043 0310 	orr.w	r3, r3, #16
 8009392:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009396:	4b1d      	ldr	r3, [pc, #116]	@ (800940c <HAL_UART_MspInit+0xdc>)
 8009398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800939c:	f003 0310 	and.w	r3, r3, #16
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093a4:	4b19      	ldr	r3, [pc, #100]	@ (800940c <HAL_UART_MspInit+0xdc>)
 80093a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093aa:	4a18      	ldr	r2, [pc, #96]	@ (800940c <HAL_UART_MspInit+0xdc>)
 80093ac:	f043 0301 	orr.w	r3, r3, #1
 80093b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80093b4:	4b15      	ldr	r3, [pc, #84]	@ (800940c <HAL_UART_MspInit+0xdc>)
 80093b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	60bb      	str	r3, [r7, #8]
 80093c0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80093c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80093c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ca:	2302      	movs	r3, #2
 80093cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093d6:	2300      	movs	r3, #0
 80093d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80093dc:	2307      	movs	r3, #7
 80093de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093e2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80093e6:	4619      	mov	r1, r3
 80093e8:	4809      	ldr	r0, [pc, #36]	@ (8009410 <HAL_UART_MspInit+0xe0>)
 80093ea:	f005 f84b 	bl	800e484 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80093ee:	2200      	movs	r2, #0
 80093f0:	2100      	movs	r1, #0
 80093f2:	2025      	movs	r0, #37	@ 0x25
 80093f4:	f002 f947 	bl	800b686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80093f8:	2025      	movs	r0, #37	@ 0x25
 80093fa:	f002 f95e 	bl	800b6ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80093fe:	bf00      	nop
 8009400:	37e0      	adds	r7, #224	@ 0xe0
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	40011000 	.word	0x40011000
 800940c:	58024400 	.word	0x58024400
 8009410:	58020000 	.word	0x58020000

08009414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009414:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800944c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009418:	f7ff fbe6 	bl	8008be8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800941c:	480c      	ldr	r0, [pc, #48]	@ (8009450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800941e:	490d      	ldr	r1, [pc, #52]	@ (8009454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009420:	4a0d      	ldr	r2, [pc, #52]	@ (8009458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009424:	e002      	b.n	800942c <LoopCopyDataInit>

08009426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800942a:	3304      	adds	r3, #4

0800942c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800942c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800942e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009430:	d3f9      	bcc.n	8009426 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009432:	4a0a      	ldr	r2, [pc, #40]	@ (800945c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009434:	4c0a      	ldr	r4, [pc, #40]	@ (8009460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009438:	e001      	b.n	800943e <LoopFillZerobss>

0800943a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800943a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800943c:	3204      	adds	r2, #4

0800943e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800943e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009440:	d3fb      	bcc.n	800943a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009442:	f014 fe7d 	bl	801e140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009446:	f7fb fdbf 	bl	8004fc8 <main>
  bx  lr
 800944a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800944c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009450:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009454:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8009458:	080209a8 	.word	0x080209a8
  ldr r2, =_sbss
 800945c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8009460:	240008ac 	.word	0x240008ac

08009464 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009464:	e7fe      	b.n	8009464 <ADC3_IRQHandler>
	...

08009468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800946e:	2003      	movs	r0, #3
 8009470:	f002 f8fe 	bl	800b670 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009474:	f008 fc42 	bl	8011cfc <HAL_RCC_GetSysClockFreq>
 8009478:	4602      	mov	r2, r0
 800947a:	4b15      	ldr	r3, [pc, #84]	@ (80094d0 <HAL_Init+0x68>)
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	0a1b      	lsrs	r3, r3, #8
 8009480:	f003 030f 	and.w	r3, r3, #15
 8009484:	4913      	ldr	r1, [pc, #76]	@ (80094d4 <HAL_Init+0x6c>)
 8009486:	5ccb      	ldrb	r3, [r1, r3]
 8009488:	f003 031f 	and.w	r3, r3, #31
 800948c:	fa22 f303 	lsr.w	r3, r2, r3
 8009490:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009492:	4b0f      	ldr	r3, [pc, #60]	@ (80094d0 <HAL_Init+0x68>)
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	f003 030f 	and.w	r3, r3, #15
 800949a:	4a0e      	ldr	r2, [pc, #56]	@ (80094d4 <HAL_Init+0x6c>)
 800949c:	5cd3      	ldrb	r3, [r2, r3]
 800949e:	f003 031f 	and.w	r3, r3, #31
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	fa22 f303 	lsr.w	r3, r2, r3
 80094a8:	4a0b      	ldr	r2, [pc, #44]	@ (80094d8 <HAL_Init+0x70>)
 80094aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80094ac:	4a0b      	ldr	r2, [pc, #44]	@ (80094dc <HAL_Init+0x74>)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80094b2:	200f      	movs	r0, #15
 80094b4:	f000 f814 	bl	80094e0 <HAL_InitTick>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e002      	b.n	80094c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80094c2:	f7fe febb 	bl	800823c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	58024400 	.word	0x58024400
 80094d4:	0801ebec 	.word	0x0801ebec
 80094d8:	24000008 	.word	0x24000008
 80094dc:	24000004 	.word	0x24000004

080094e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80094e8:	4b15      	ldr	r3, [pc, #84]	@ (8009540 <HAL_InitTick+0x60>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e021      	b.n	8009538 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80094f4:	4b13      	ldr	r3, [pc, #76]	@ (8009544 <HAL_InitTick+0x64>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	4b11      	ldr	r3, [pc, #68]	@ (8009540 <HAL_InitTick+0x60>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	4619      	mov	r1, r3
 80094fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009502:	fbb3 f3f1 	udiv	r3, r3, r1
 8009506:	fbb2 f3f3 	udiv	r3, r2, r3
 800950a:	4618      	mov	r0, r3
 800950c:	f002 f8e3 	bl	800b6d6 <HAL_SYSTICK_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e00e      	b.n	8009538 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b0f      	cmp	r3, #15
 800951e:	d80a      	bhi.n	8009536 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009520:	2200      	movs	r2, #0
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	f04f 30ff 	mov.w	r0, #4294967295
 8009528:	f002 f8ad 	bl	800b686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800952c:	4a06      	ldr	r2, [pc, #24]	@ (8009548 <HAL_InitTick+0x68>)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	e000      	b.n	8009538 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	24000010 	.word	0x24000010
 8009544:	24000004 	.word	0x24000004
 8009548:	2400000c 	.word	0x2400000c

0800954c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800954c:	b480      	push	{r7}
 800954e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009550:	4b06      	ldr	r3, [pc, #24]	@ (800956c <HAL_IncTick+0x20>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	461a      	mov	r2, r3
 8009556:	4b06      	ldr	r3, [pc, #24]	@ (8009570 <HAL_IncTick+0x24>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4413      	add	r3, r2
 800955c:	4a04      	ldr	r2, [pc, #16]	@ (8009570 <HAL_IncTick+0x24>)
 800955e:	6013      	str	r3, [r2, #0]
}
 8009560:	bf00      	nop
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	24000010 	.word	0x24000010
 8009570:	24000544 	.word	0x24000544

08009574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009574:	b480      	push	{r7}
 8009576:	af00      	add	r7, sp, #0
  return uwTick;
 8009578:	4b03      	ldr	r3, [pc, #12]	@ (8009588 <HAL_GetTick+0x14>)
 800957a:	681b      	ldr	r3, [r3, #0]
}
 800957c:	4618      	mov	r0, r3
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	24000544 	.word	0x24000544

0800958c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009594:	f7ff ffee 	bl	8009574 <HAL_GetTick>
 8009598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095a4:	d005      	beq.n	80095b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80095a6:	4b0a      	ldr	r3, [pc, #40]	@ (80095d0 <HAL_Delay+0x44>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4413      	add	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80095b2:	bf00      	nop
 80095b4:	f7ff ffde 	bl	8009574 <HAL_GetTick>
 80095b8:	4602      	mov	r2, r0
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d8f7      	bhi.n	80095b4 <HAL_Delay+0x28>
  {
  }
}
 80095c4:	bf00      	nop
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	24000010 	.word	0x24000010

080095d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	431a      	orrs	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	609a      	str	r2, [r3, #8]
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	609a      	str	r2, [r3, #8]
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a18      	ldr	r2, [pc, #96]	@ (80096ac <LL_ADC_SetChannelPreselection+0x70>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d027      	beq.n	800969e <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009654:	2b00      	cmp	r3, #0
 8009656:	d107      	bne.n	8009668 <LL_ADC_SetChannelPreselection+0x2c>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	0e9b      	lsrs	r3, r3, #26
 800965c:	f003 031f 	and.w	r3, r3, #31
 8009660:	2201      	movs	r2, #1
 8009662:	fa02 f303 	lsl.w	r3, r2, r3
 8009666:	e015      	b.n	8009694 <LL_ADC_SetChannelPreselection+0x58>
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	fa93 f3a3 	rbit	r3, r3
 8009672:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800967e:	2320      	movs	r3, #32
 8009680:	e003      	b.n	800968a <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	fab3 f383 	clz	r3, r3
 8009688:	b2db      	uxtb	r3, r3
 800968a:	f003 031f 	and.w	r3, r3, #31
 800968e:	2201      	movs	r2, #1
 8009690:	fa02 f303 	lsl.w	r3, r2, r3
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	69d2      	ldr	r2, [r2, #28]
 8009698:	431a      	orrs	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 800969e:	bf00      	nop
 80096a0:	371c      	adds	r7, #28
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	58026000 	.word	0x58026000

080096b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b087      	sub	sp, #28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3360      	adds	r3, #96	@ 0x60
 80096c2:	461a      	mov	r2, r3
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4a10      	ldr	r2, [pc, #64]	@ (8009710 <LL_ADC_SetOffset+0x60>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d10b      	bne.n	80096ec <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80096ea:	e00b      	b.n	8009704 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	430b      	orrs	r3, r1
 80096fe:	431a      	orrs	r2, r3
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	601a      	str	r2, [r3, #0]
}
 8009704:	bf00      	nop
 8009706:	371c      	adds	r7, #28
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	58026000 	.word	0x58026000

08009714 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	3360      	adds	r3, #96	@ 0x60
 8009722:	461a      	mov	r2, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f003 031f 	and.w	r3, r3, #31
 800975a:	6879      	ldr	r1, [r7, #4]
 800975c:	fa01 f303 	lsl.w	r3, r1, r3
 8009760:	431a      	orrs	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	611a      	str	r2, [r3, #16]
}
 8009766:	bf00      	nop
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
	...

08009774 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4a0c      	ldr	r2, [pc, #48]	@ (80097b4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d00e      	beq.n	80097a6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3360      	adds	r3, #96	@ 0x60
 800978c:	461a      	mov	r2, r3
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	431a      	orrs	r2, r3
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	601a      	str	r2, [r3, #0]
  }
}
 80097a6:	bf00      	nop
 80097a8:	371c      	adds	r7, #28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	58026000 	.word	0x58026000

080097b8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	4a0c      	ldr	r2, [pc, #48]	@ (80097f8 <LL_ADC_SetOffsetSaturation+0x40>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d10e      	bne.n	80097ea <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3360      	adds	r3, #96	@ 0x60
 80097d0:	461a      	mov	r2, r3
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	431a      	orrs	r2, r3
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80097ea:	bf00      	nop
 80097ec:	371c      	adds	r7, #28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	58026000 	.word	0x58026000

080097fc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4a0c      	ldr	r2, [pc, #48]	@ (800983c <LL_ADC_SetOffsetSign+0x40>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d10e      	bne.n	800982e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	3360      	adds	r3, #96	@ 0x60
 8009814:	461a      	mov	r2, r3
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	431a      	orrs	r2, r3
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800982e:	bf00      	nop
 8009830:	371c      	adds	r7, #28
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	58026000 	.word	0x58026000

08009840 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3360      	adds	r3, #96	@ 0x60
 8009850:	461a      	mov	r2, r3
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4a0c      	ldr	r2, [pc, #48]	@ (8009890 <LL_ADC_SetOffsetState+0x50>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d108      	bne.n	8009874 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	431a      	orrs	r2, r3
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8009872:	e007      	b.n	8009884 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	431a      	orrs	r2, r3
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	601a      	str	r2, [r3, #0]
}
 8009884:	bf00      	nop
 8009886:	371c      	adds	r7, #28
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	58026000 	.word	0x58026000

08009894 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80098a8:	2301      	movs	r3, #1
 80098aa:	e000      	b.n	80098ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b087      	sub	sp, #28
 80098be:	af00      	add	r7, sp, #0
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	60b9      	str	r1, [r7, #8]
 80098c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3330      	adds	r3, #48	@ 0x30
 80098ca:	461a      	mov	r2, r3
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	0a1b      	lsrs	r3, r3, #8
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	f003 030c 	and.w	r3, r3, #12
 80098d6:	4413      	add	r3, r2
 80098d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	f003 031f 	and.w	r3, r3, #31
 80098e4:	211f      	movs	r1, #31
 80098e6:	fa01 f303 	lsl.w	r3, r1, r3
 80098ea:	43db      	mvns	r3, r3
 80098ec:	401a      	ands	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	0e9b      	lsrs	r3, r3, #26
 80098f2:	f003 011f 	and.w	r1, r3, #31
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	f003 031f 	and.w	r3, r3, #31
 80098fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009900:	431a      	orrs	r2, r3
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009906:	bf00      	nop
 8009908:	371c      	adds	r7, #28
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8009912:	b480      	push	{r7}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	f023 0203 	bic.w	r2, r3, #3
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60da      	str	r2, [r3, #12]
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	f043 0201 	orr.w	r2, r3, #1
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	60da      	str	r2, [r3, #12]
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a08      	ldr	r2, [pc, #32]	@ (8009988 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d107      	bne.n	800997a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	f023 0203 	bic.w	r2, r3, #3
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	431a      	orrs	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	60da      	str	r2, [r3, #12]
  }
}
 800997a:	bf00      	nop
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	58026000 	.word	0x58026000

0800998c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009998:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80099a0:	2301      	movs	r3, #1
 80099a2:	e000      	b.n	80099a6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b087      	sub	sp, #28
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	3314      	adds	r3, #20
 80099c2:	461a      	mov	r2, r3
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	0e5b      	lsrs	r3, r3, #25
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	f003 0304 	and.w	r3, r3, #4
 80099ce:	4413      	add	r3, r2
 80099d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	0d1b      	lsrs	r3, r3, #20
 80099da:	f003 031f 	and.w	r3, r3, #31
 80099de:	2107      	movs	r1, #7
 80099e0:	fa01 f303 	lsl.w	r3, r1, r3
 80099e4:	43db      	mvns	r3, r3
 80099e6:	401a      	ands	r2, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	0d1b      	lsrs	r3, r3, #20
 80099ec:	f003 031f 	and.w	r3, r3, #31
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	fa01 f303 	lsl.w	r3, r1, r3
 80099f6:	431a      	orrs	r2, r3
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80099fc:	bf00      	nop
 80099fe:	371c      	adds	r7, #28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	4a1a      	ldr	r2, [pc, #104]	@ (8009a80 <LL_ADC_SetChannelSingleDiff+0x78>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d115      	bne.n	8009a48 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a28:	43db      	mvns	r3, r3
 8009a2a:	401a      	ands	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f003 0318 	and.w	r3, r3, #24
 8009a32:	4914      	ldr	r1, [pc, #80]	@ (8009a84 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009a34:	40d9      	lsrs	r1, r3
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	400b      	ands	r3, r1
 8009a3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8009a46:	e014      	b.n	8009a72 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a54:	43db      	mvns	r3, r3
 8009a56:	401a      	ands	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f003 0318 	and.w	r3, r3, #24
 8009a5e:	4909      	ldr	r1, [pc, #36]	@ (8009a84 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009a60:	40d9      	lsrs	r1, r3
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	400b      	ands	r3, r1
 8009a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8009a72:	bf00      	nop
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	58026000 	.word	0x58026000
 8009a84:	000fffff 	.word	0x000fffff

08009a88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f003 031f 	and.w	r3, r3, #31
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689a      	ldr	r2, [r3, #8]
 8009acc:	4b04      	ldr	r3, [pc, #16]	@ (8009ae0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8009ace:	4013      	ands	r3, r2
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	6093      	str	r3, [r2, #8]
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	5fffffc0 	.word	0x5fffffc0

08009ae4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009af8:	d101      	bne.n	8009afe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009afa:	2301      	movs	r3, #1
 8009afc:	e000      	b.n	8009b00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	4b05      	ldr	r3, [pc, #20]	@ (8009b30 <LL_ADC_EnableInternalRegulator+0x24>)
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	6fffffc0 	.word	0x6fffffc0

08009b34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b48:	d101      	bne.n	8009b4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e000      	b.n	8009b50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	4b05      	ldr	r3, [pc, #20]	@ (8009b80 <LL_ADC_Enable+0x24>)
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	f043 0201 	orr.w	r2, r3, #1
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	7fffffc0 	.word	0x7fffffc0

08009b84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d101      	bne.n	8009b9c <LL_ADC_IsEnabled+0x18>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e000      	b.n	8009b9e <LL_ADC_IsEnabled+0x1a>
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
	...

08009bac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689a      	ldr	r2, [r3, #8]
 8009bb8:	4b05      	ldr	r3, [pc, #20]	@ (8009bd0 <LL_ADC_REG_StartConversion+0x24>)
 8009bba:	4013      	ands	r3, r2
 8009bbc:	f043 0204 	orr.w	r2, r3, #4
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	7fffffc0 	.word	0x7fffffc0

08009bd4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d101      	bne.n	8009bec <LL_ADC_REG_IsConversionOngoing+0x18>
 8009be8:	2301      	movs	r3, #1
 8009bea:	e000      	b.n	8009bee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f003 0308 	and.w	r3, r3, #8
 8009c0a:	2b08      	cmp	r3, #8
 8009c0c:	d101      	bne.n	8009c12 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e000      	b.n	8009c14 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009c20:	b590      	push	{r4, r7, lr}
 8009c22:	b089      	sub	sp, #36	@ 0x24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e1ee      	b.n	800a018 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d109      	bne.n	8009c5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7f9 fd29 	bl	80036a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7ff ff3f 	bl	8009ae4 <LL_ADC_IsDeepPowerDownEnabled>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d004      	beq.n	8009c76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff ff25 	bl	8009ac0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7ff ff5a 	bl	8009b34 <LL_ADC_IsInternalRegulatorEnabled>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d114      	bne.n	8009cb0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7ff ff3e 	bl	8009b0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009c90:	4b8e      	ldr	r3, [pc, #568]	@ (8009ecc <HAL_ADC_Init+0x2ac>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	099b      	lsrs	r3, r3, #6
 8009c96:	4a8e      	ldr	r2, [pc, #568]	@ (8009ed0 <HAL_ADC_Init+0x2b0>)
 8009c98:	fba2 2303 	umull	r2, r3, r2, r3
 8009c9c:	099b      	lsrs	r3, r3, #6
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009ca2:	e002      	b.n	8009caa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1f9      	bne.n	8009ca4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7ff ff3d 	bl	8009b34 <LL_ADC_IsInternalRegulatorEnabled>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10d      	bne.n	8009cdc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cc4:	f043 0210 	orr.w	r2, r3, #16
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cd0:	f043 0201 	orr.w	r2, r3, #1
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff ff77 	bl	8009bd4 <LL_ADC_REG_IsConversionOngoing>
 8009ce6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cec:	f003 0310 	and.w	r3, r3, #16
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f040 8188 	bne.w	800a006 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f040 8184 	bne.w	800a006 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d02:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009d06:	f043 0202 	orr.w	r2, r3, #2
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff ff36 	bl	8009b84 <LL_ADC_IsEnabled>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d136      	bne.n	8009d8c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a6c      	ldr	r2, [pc, #432]	@ (8009ed4 <HAL_ADC_Init+0x2b4>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d004      	beq.n	8009d32 <HAL_ADC_Init+0x112>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8009ed8 <HAL_ADC_Init+0x2b8>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d10e      	bne.n	8009d50 <HAL_ADC_Init+0x130>
 8009d32:	4868      	ldr	r0, [pc, #416]	@ (8009ed4 <HAL_ADC_Init+0x2b4>)
 8009d34:	f7ff ff26 	bl	8009b84 <LL_ADC_IsEnabled>
 8009d38:	4604      	mov	r4, r0
 8009d3a:	4867      	ldr	r0, [pc, #412]	@ (8009ed8 <HAL_ADC_Init+0x2b8>)
 8009d3c:	f7ff ff22 	bl	8009b84 <LL_ADC_IsEnabled>
 8009d40:	4603      	mov	r3, r0
 8009d42:	4323      	orrs	r3, r4
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	bf0c      	ite	eq
 8009d48:	2301      	moveq	r3, #1
 8009d4a:	2300      	movne	r3, #0
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	e008      	b.n	8009d62 <HAL_ADC_Init+0x142>
 8009d50:	4862      	ldr	r0, [pc, #392]	@ (8009edc <HAL_ADC_Init+0x2bc>)
 8009d52:	f7ff ff17 	bl	8009b84 <LL_ADC_IsEnabled>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	bf0c      	ite	eq
 8009d5c:	2301      	moveq	r3, #1
 8009d5e:	2300      	movne	r3, #0
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d012      	beq.n	8009d8c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a5a      	ldr	r2, [pc, #360]	@ (8009ed4 <HAL_ADC_Init+0x2b4>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d004      	beq.n	8009d7a <HAL_ADC_Init+0x15a>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a58      	ldr	r2, [pc, #352]	@ (8009ed8 <HAL_ADC_Init+0x2b8>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d101      	bne.n	8009d7e <HAL_ADC_Init+0x15e>
 8009d7a:	4a59      	ldr	r2, [pc, #356]	@ (8009ee0 <HAL_ADC_Init+0x2c0>)
 8009d7c:	e000      	b.n	8009d80 <HAL_ADC_Init+0x160>
 8009d7e:	4a59      	ldr	r2, [pc, #356]	@ (8009ee4 <HAL_ADC_Init+0x2c4>)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	4619      	mov	r1, r3
 8009d86:	4610      	mov	r0, r2
 8009d88:	f7ff fc24 	bl	80095d4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a52      	ldr	r2, [pc, #328]	@ (8009edc <HAL_ADC_Init+0x2bc>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d129      	bne.n	8009dea <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	7e5b      	ldrb	r3, [r3, #25]
 8009d9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009da0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8009da6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	2b08      	cmp	r3, #8
 8009dae:	d013      	beq.n	8009dd8 <HAL_ADC_Init+0x1b8>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	2b0c      	cmp	r3, #12
 8009db6:	d00d      	beq.n	8009dd4 <HAL_ADC_Init+0x1b4>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	2b1c      	cmp	r3, #28
 8009dbe:	d007      	beq.n	8009dd0 <HAL_ADC_Init+0x1b0>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	2b18      	cmp	r3, #24
 8009dc6:	d101      	bne.n	8009dcc <HAL_ADC_Init+0x1ac>
 8009dc8:	2318      	movs	r3, #24
 8009dca:	e006      	b.n	8009dda <HAL_ADC_Init+0x1ba>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	e004      	b.n	8009dda <HAL_ADC_Init+0x1ba>
 8009dd0:	2310      	movs	r3, #16
 8009dd2:	e002      	b.n	8009dda <HAL_ADC_Init+0x1ba>
 8009dd4:	2308      	movs	r3, #8
 8009dd6:	e000      	b.n	8009dda <HAL_ADC_Init+0x1ba>
 8009dd8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009dda:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009de2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009de4:	4313      	orrs	r3, r2
 8009de6:	61bb      	str	r3, [r7, #24]
 8009de8:	e00e      	b.n	8009e08 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	7e5b      	ldrb	r3, [r3, #25]
 8009dee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009df4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009dfa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009e04:	4313      	orrs	r3, r2
 8009e06:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d106      	bne.n	8009e20 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e16:	3b01      	subs	r3, #1
 8009e18:	045b      	lsls	r3, r3, #17
 8009e1a:	69ba      	ldr	r2, [r7, #24]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d009      	beq.n	8009e3c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e34:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a26      	ldr	r2, [pc, #152]	@ (8009edc <HAL_ADC_Init+0x2bc>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d115      	bne.n	8009e72 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68da      	ldr	r2, [r3, #12]
 8009e4c:	4b26      	ldr	r3, [pc, #152]	@ (8009ee8 <HAL_ADC_Init+0x2c8>)
 8009e4e:	4013      	ands	r3, r2
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	6812      	ldr	r2, [r2, #0]
 8009e54:	69b9      	ldr	r1, [r7, #24]
 8009e56:	430b      	orrs	r3, r1
 8009e58:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	611a      	str	r2, [r3, #16]
 8009e70:	e009      	b.n	8009e86 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68da      	ldr	r2, [r3, #12]
 8009e78:	4b1c      	ldr	r3, [pc, #112]	@ (8009eec <HAL_ADC_Init+0x2cc>)
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	6812      	ldr	r2, [r2, #0]
 8009e80:	69b9      	ldr	r1, [r7, #24]
 8009e82:	430b      	orrs	r3, r1
 8009e84:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7ff fea2 	bl	8009bd4 <LL_ADC_REG_IsConversionOngoing>
 8009e90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff feaf 	bl	8009bfa <LL_ADC_INJ_IsConversionOngoing>
 8009e9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f040 808e 	bne.w	8009fc2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f040 808a 	bne.w	8009fc2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8009edc <HAL_ADC_Init+0x2bc>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d11b      	bne.n	8009ef0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	7e1b      	ldrb	r3, [r3, #24]
 8009ebc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009ec4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	61bb      	str	r3, [r7, #24]
 8009eca:	e018      	b.n	8009efe <HAL_ADC_Init+0x2de>
 8009ecc:	24000004 	.word	0x24000004
 8009ed0:	053e2d63 	.word	0x053e2d63
 8009ed4:	40022000 	.word	0x40022000
 8009ed8:	40022100 	.word	0x40022100
 8009edc:	58026000 	.word	0x58026000
 8009ee0:	40022300 	.word	0x40022300
 8009ee4:	58026300 	.word	0x58026300
 8009ee8:	fff04007 	.word	0xfff04007
 8009eec:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	7e1b      	ldrb	r3, [r3, #24]
 8009ef4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009efa:	4313      	orrs	r3, r2
 8009efc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68da      	ldr	r2, [r3, #12]
 8009f04:	4b46      	ldr	r3, [pc, #280]	@ (800a020 <HAL_ADC_Init+0x400>)
 8009f06:	4013      	ands	r3, r2
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	6812      	ldr	r2, [r2, #0]
 8009f0c:	69b9      	ldr	r1, [r7, #24]
 8009f0e:	430b      	orrs	r3, r1
 8009f10:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d137      	bne.n	8009f8c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f20:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a3f      	ldr	r2, [pc, #252]	@ (800a024 <HAL_ADC_Init+0x404>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d116      	bne.n	8009f5a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	691a      	ldr	r2, [r3, #16]
 8009f32:	4b3d      	ldr	r3, [pc, #244]	@ (800a028 <HAL_ADC_Init+0x408>)
 8009f34:	4013      	ands	r3, r2
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009f3e:	4311      	orrs	r1, r2
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009f44:	4311      	orrs	r1, r2
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	431a      	orrs	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f042 0201 	orr.w	r2, r2, #1
 8009f56:	611a      	str	r2, [r3, #16]
 8009f58:	e020      	b.n	8009f9c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	691a      	ldr	r2, [r3, #16]
 8009f60:	4b32      	ldr	r3, [pc, #200]	@ (800a02c <HAL_ADC_Init+0x40c>)
 8009f62:	4013      	ands	r3, r2
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009f68:	3a01      	subs	r2, #1
 8009f6a:	0411      	lsls	r1, r2, #16
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009f70:	4311      	orrs	r1, r2
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009f76:	4311      	orrs	r1, r2
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	431a      	orrs	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f042 0201 	orr.w	r2, r2, #1
 8009f88:	611a      	str	r2, [r3, #16]
 8009f8a:	e007      	b.n	8009f9c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	691a      	ldr	r2, [r3, #16]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f022 0201 	bic.w	r2, r2, #1
 8009f9a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a1b      	ldr	r2, [pc, #108]	@ (800a024 <HAL_ADC_Init+0x404>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d002      	beq.n	8009fc2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f001 f967 	bl	800b290 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d10c      	bne.n	8009fe4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd0:	f023 010f 	bic.w	r1, r3, #15
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	69db      	ldr	r3, [r3, #28]
 8009fd8:	1e5a      	subs	r2, r3, #1
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	631a      	str	r2, [r3, #48]	@ 0x30
 8009fe2:	e007      	b.n	8009ff4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f022 020f 	bic.w	r2, r2, #15
 8009ff2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ff8:	f023 0303 	bic.w	r3, r3, #3
 8009ffc:	f043 0201 	orr.w	r2, r3, #1
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	661a      	str	r2, [r3, #96]	@ 0x60
 800a004:	e007      	b.n	800a016 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a00a:	f043 0210 	orr.w	r2, r3, #16
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a016:	7ffb      	ldrb	r3, [r7, #31]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3724      	adds	r7, #36	@ 0x24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd90      	pop	{r4, r7, pc}
 800a020:	ffffbffc 	.word	0xffffbffc
 800a024:	58026000 	.word	0x58026000
 800a028:	fc00f81f 	.word	0xfc00f81f
 800a02c:	fc00f81e 	.word	0xfc00f81e

0800a030 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a60      	ldr	r2, [pc, #384]	@ (800a1c4 <HAL_ADC_Start_DMA+0x194>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d004      	beq.n	800a050 <HAL_ADC_Start_DMA+0x20>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a5f      	ldr	r2, [pc, #380]	@ (800a1c8 <HAL_ADC_Start_DMA+0x198>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d101      	bne.n	800a054 <HAL_ADC_Start_DMA+0x24>
 800a050:	4b5e      	ldr	r3, [pc, #376]	@ (800a1cc <HAL_ADC_Start_DMA+0x19c>)
 800a052:	e000      	b.n	800a056 <HAL_ADC_Start_DMA+0x26>
 800a054:	4b5e      	ldr	r3, [pc, #376]	@ (800a1d0 <HAL_ADC_Start_DMA+0x1a0>)
 800a056:	4618      	mov	r0, r3
 800a058:	f7ff fd16 	bl	8009a88 <LL_ADC_GetMultimode>
 800a05c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4618      	mov	r0, r3
 800a064:	f7ff fdb6 	bl	8009bd4 <LL_ADC_REG_IsConversionOngoing>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f040 80a2 	bne.w	800a1b4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a076:	2b01      	cmp	r3, #1
 800a078:	d101      	bne.n	800a07e <HAL_ADC_Start_DMA+0x4e>
 800a07a:	2302      	movs	r3, #2
 800a07c:	e09d      	b.n	800a1ba <HAL_ADC_Start_DMA+0x18a>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d006      	beq.n	800a09a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	2b05      	cmp	r3, #5
 800a090:	d003      	beq.n	800a09a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	2b09      	cmp	r3, #9
 800a096:	f040 8086 	bne.w	800a1a6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f000 ffda 	bl	800b054 <ADC_Enable>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d178      	bne.n	800a19c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a0ae:	4b49      	ldr	r3, [pc, #292]	@ (800a1d4 <HAL_ADC_Start_DMA+0x1a4>)
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a42      	ldr	r2, [pc, #264]	@ (800a1c8 <HAL_ADC_Start_DMA+0x198>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d002      	beq.n	800a0ca <HAL_ADC_Start_DMA+0x9a>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	e000      	b.n	800a0cc <HAL_ADC_Start_DMA+0x9c>
 800a0ca:	4b3e      	ldr	r3, [pc, #248]	@ (800a1c4 <HAL_ADC_Start_DMA+0x194>)
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	6812      	ldr	r2, [r2, #0]
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d002      	beq.n	800a0da <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d105      	bne.n	800a0e6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d006      	beq.n	800a100 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0f6:	f023 0206 	bic.w	r2, r3, #6
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	665a      	str	r2, [r3, #100]	@ 0x64
 800a0fe:	e002      	b.n	800a106 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a10a:	4a33      	ldr	r2, [pc, #204]	@ (800a1d8 <HAL_ADC_Start_DMA+0x1a8>)
 800a10c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a112:	4a32      	ldr	r2, [pc, #200]	@ (800a1dc <HAL_ADC_Start_DMA+0x1ac>)
 800a114:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a11a:	4a31      	ldr	r2, [pc, #196]	@ (800a1e0 <HAL_ADC_Start_DMA+0x1b0>)
 800a11c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	221c      	movs	r2, #28
 800a124:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f042 0210 	orr.w	r2, r2, #16
 800a13c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a28      	ldr	r2, [pc, #160]	@ (800a1e4 <HAL_ADC_Start_DMA+0x1b4>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d10f      	bne.n	800a168 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	f7ff fbfe 	bl	8009958 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4618      	mov	r0, r3
 800a162:	f7ff fbe9 	bl	8009938 <LL_ADC_EnableDMAReq>
 800a166:	e007      	b.n	800a178 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a170:	4619      	mov	r1, r3
 800a172:	4610      	mov	r0, r2
 800a174:	f7ff fbcd 	bl	8009912 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3340      	adds	r3, #64	@ 0x40
 800a182:	4619      	mov	r1, r3
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f001 fe82 	bl	800be90 <HAL_DMA_Start_IT>
 800a18c:	4603      	mov	r3, r0
 800a18e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4618      	mov	r0, r3
 800a196:	f7ff fd09 	bl	8009bac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a19a:	e00d      	b.n	800a1b8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800a1a4:	e008      	b.n	800a1b8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a1b2:	e001      	b.n	800a1b8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3718      	adds	r7, #24
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	40022000 	.word	0x40022000
 800a1c8:	40022100 	.word	0x40022100
 800a1cc:	40022300 	.word	0x40022300
 800a1d0:	58026300 	.word	0x58026300
 800a1d4:	fffff0fe 	.word	0xfffff0fe
 800a1d8:	0800b169 	.word	0x0800b169
 800a1dc:	0800b241 	.word	0x0800b241
 800a1e0:	0800b25d 	.word	0x0800b25d
 800a1e4:	58026000 	.word	0x58026000

0800a1e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08a      	sub	sp, #40	@ 0x28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a87      	ldr	r2, [pc, #540]	@ (800a428 <HAL_ADC_IRQHandler+0x240>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d004      	beq.n	800a218 <HAL_ADC_IRQHandler+0x30>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a86      	ldr	r2, [pc, #536]	@ (800a42c <HAL_ADC_IRQHandler+0x244>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d101      	bne.n	800a21c <HAL_ADC_IRQHandler+0x34>
 800a218:	4b85      	ldr	r3, [pc, #532]	@ (800a430 <HAL_ADC_IRQHandler+0x248>)
 800a21a:	e000      	b.n	800a21e <HAL_ADC_IRQHandler+0x36>
 800a21c:	4b85      	ldr	r3, [pc, #532]	@ (800a434 <HAL_ADC_IRQHandler+0x24c>)
 800a21e:	4618      	mov	r0, r3
 800a220:	f7ff fc32 	bl	8009a88 <LL_ADC_GetMultimode>
 800a224:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d017      	beq.n	800a260 <HAL_ADC_IRQHandler+0x78>
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	f003 0302 	and.w	r3, r3, #2
 800a236:	2b00      	cmp	r3, #0
 800a238:	d012      	beq.n	800a260 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a23e:	f003 0310 	and.w	r3, r3, #16
 800a242:	2b00      	cmp	r3, #0
 800a244:	d105      	bne.n	800a252 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a24a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f001 f932 	bl	800b4bc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2202      	movs	r2, #2
 800a25e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	f003 0304 	and.w	r3, r3, #4
 800a266:	2b00      	cmp	r3, #0
 800a268:	d004      	beq.n	800a274 <HAL_ADC_IRQHandler+0x8c>
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10a      	bne.n	800a28a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	f000 8083 	beq.w	800a386 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d07d      	beq.n	800a386 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a28e:	f003 0310 	and.w	r3, r3, #16
 800a292:	2b00      	cmp	r3, #0
 800a294:	d105      	bne.n	800a2a2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a29a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7ff faf4 	bl	8009894 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d062      	beq.n	800a378 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a5d      	ldr	r2, [pc, #372]	@ (800a42c <HAL_ADC_IRQHandler+0x244>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d002      	beq.n	800a2c2 <HAL_ADC_IRQHandler+0xda>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	e000      	b.n	800a2c4 <HAL_ADC_IRQHandler+0xdc>
 800a2c2:	4b59      	ldr	r3, [pc, #356]	@ (800a428 <HAL_ADC_IRQHandler+0x240>)
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	6812      	ldr	r2, [r2, #0]
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d008      	beq.n	800a2de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d005      	beq.n	800a2de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b05      	cmp	r3, #5
 800a2d6:	d002      	beq.n	800a2de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	2b09      	cmp	r3, #9
 800a2dc:	d104      	bne.n	800a2e8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	623b      	str	r3, [r7, #32]
 800a2e6:	e00c      	b.n	800a302 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a4f      	ldr	r2, [pc, #316]	@ (800a42c <HAL_ADC_IRQHandler+0x244>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d002      	beq.n	800a2f8 <HAL_ADC_IRQHandler+0x110>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	e000      	b.n	800a2fa <HAL_ADC_IRQHandler+0x112>
 800a2f8:	4b4b      	ldr	r3, [pc, #300]	@ (800a428 <HAL_ADC_IRQHandler+0x240>)
 800a2fa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a302:	6a3b      	ldr	r3, [r7, #32]
 800a304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d135      	bne.n	800a378 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 0308 	and.w	r3, r3, #8
 800a316:	2b08      	cmp	r3, #8
 800a318:	d12e      	bne.n	800a378 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff fc58 	bl	8009bd4 <LL_ADC_REG_IsConversionOngoing>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d11a      	bne.n	800a360 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 020c 	bic.w	r2, r2, #12
 800a338:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a33e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a34a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d112      	bne.n	800a378 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a356:	f043 0201 	orr.w	r2, r3, #1
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a35e:	e00b      	b.n	800a378 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a364:	f043 0210 	orr.w	r2, r3, #16
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a370:	f043 0201 	orr.w	r2, r3, #1
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f96f 	bl	800a65c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	220c      	movs	r2, #12
 800a384:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	f003 0320 	and.w	r3, r3, #32
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d004      	beq.n	800a39a <HAL_ADC_IRQHandler+0x1b2>
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	f003 0320 	and.w	r3, r3, #32
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10b      	bne.n	800a3b2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 80a0 	beq.w	800a4e6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f000 809a 	beq.w	800a4e6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3b6:	f003 0310 	and.w	r3, r3, #16
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d105      	bne.n	800a3ca <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff fadc 	bl	800998c <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a3d4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7ff fa5a 	bl	8009894 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a3e0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a11      	ldr	r2, [pc, #68]	@ (800a42c <HAL_ADC_IRQHandler+0x244>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d002      	beq.n	800a3f2 <HAL_ADC_IRQHandler+0x20a>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	e000      	b.n	800a3f4 <HAL_ADC_IRQHandler+0x20c>
 800a3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a428 <HAL_ADC_IRQHandler+0x240>)
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	6812      	ldr	r2, [r2, #0]
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d008      	beq.n	800a40e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d005      	beq.n	800a40e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b06      	cmp	r3, #6
 800a406:	d002      	beq.n	800a40e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	2b07      	cmp	r3, #7
 800a40c:	d104      	bne.n	800a418 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	623b      	str	r3, [r7, #32]
 800a416:	e014      	b.n	800a442 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a03      	ldr	r2, [pc, #12]	@ (800a42c <HAL_ADC_IRQHandler+0x244>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d00a      	beq.n	800a438 <HAL_ADC_IRQHandler+0x250>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	e008      	b.n	800a43a <HAL_ADC_IRQHandler+0x252>
 800a428:	40022000 	.word	0x40022000
 800a42c:	40022100 	.word	0x40022100
 800a430:	40022300 	.word	0x40022300
 800a434:	58026300 	.word	0x58026300
 800a438:	4b84      	ldr	r3, [pc, #528]	@ (800a64c <HAL_ADC_IRQHandler+0x464>)
 800a43a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d047      	beq.n	800a4d8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a448:	6a3b      	ldr	r3, [r7, #32]
 800a44a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d007      	beq.n	800a462 <HAL_ADC_IRQHandler+0x27a>
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d03f      	beq.n	800a4d8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a458:	6a3b      	ldr	r3, [r7, #32]
 800a45a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d13a      	bne.n	800a4d8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a46c:	2b40      	cmp	r3, #64	@ 0x40
 800a46e:	d133      	bne.n	800a4d8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a470:	6a3b      	ldr	r3, [r7, #32]
 800a472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d12e      	bne.n	800a4d8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4618      	mov	r0, r3
 800a480:	f7ff fbbb 	bl	8009bfa <LL_ADC_INJ_IsConversionOngoing>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d11a      	bne.n	800a4c0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a498:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a49e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d112      	bne.n	800a4d8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4b6:	f043 0201 	orr.w	r2, r3, #1
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	661a      	str	r2, [r3, #96]	@ 0x60
 800a4be:	e00b      	b.n	800a4d8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4c4:	f043 0210 	orr.w	r2, r3, #16
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4d0:	f043 0201 	orr.w	r2, r3, #1
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 ffc7 	bl	800b46c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2260      	movs	r2, #96	@ 0x60
 800a4e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d011      	beq.n	800a514 <HAL_ADC_IRQHandler+0x32c>
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00c      	beq.n	800a514 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f8bc 	bl	800a684 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2280      	movs	r2, #128	@ 0x80
 800a512:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d012      	beq.n	800a544 <HAL_ADC_IRQHandler+0x35c>
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00d      	beq.n	800a544 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a52c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 ffad 	bl	800b494 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a542:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d012      	beq.n	800a574 <HAL_ADC_IRQHandler+0x38c>
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00d      	beq.n	800a574 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a55c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 ff9f 	bl	800b4a8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a572:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	f003 0310 	and.w	r3, r3, #16
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d043      	beq.n	800a606 <HAL_ADC_IRQHandler+0x41e>
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	f003 0310 	and.w	r3, r3, #16
 800a584:	2b00      	cmp	r3, #0
 800a586:	d03e      	beq.n	800a606 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d102      	bne.n	800a596 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a590:	2301      	movs	r3, #1
 800a592:	627b      	str	r3, [r7, #36]	@ 0x24
 800a594:	e021      	b.n	800a5da <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d015      	beq.n	800a5c8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a2a      	ldr	r2, [pc, #168]	@ (800a64c <HAL_ADC_IRQHandler+0x464>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d004      	beq.n	800a5b0 <HAL_ADC_IRQHandler+0x3c8>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a29      	ldr	r2, [pc, #164]	@ (800a650 <HAL_ADC_IRQHandler+0x468>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d101      	bne.n	800a5b4 <HAL_ADC_IRQHandler+0x3cc>
 800a5b0:	4b28      	ldr	r3, [pc, #160]	@ (800a654 <HAL_ADC_IRQHandler+0x46c>)
 800a5b2:	e000      	b.n	800a5b6 <HAL_ADC_IRQHandler+0x3ce>
 800a5b4:	4b28      	ldr	r3, [pc, #160]	@ (800a658 <HAL_ADC_IRQHandler+0x470>)
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff fa74 	bl	8009aa4 <LL_ADC_GetMultiDMATransfer>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00b      	beq.n	800a5da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5c6:	e008      	b.n	800a5da <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	f003 0303 	and.w	r3, r3, #3
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d10e      	bne.n	800a5fe <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5e4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5f0:	f043 0202 	orr.w	r2, r3, #2
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f84d 	bl	800a698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2210      	movs	r2, #16
 800a604:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d018      	beq.n	800a642 <HAL_ADC_IRQHandler+0x45a>
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a616:	2b00      	cmp	r3, #0
 800a618:	d013      	beq.n	800a642 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a61e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a62a:	f043 0208 	orr.w	r2, r3, #8
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a63a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 ff1f 	bl	800b480 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a642:	bf00      	nop
 800a644:	3728      	adds	r7, #40	@ 0x28
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	40022000 	.word	0x40022000
 800a650:	40022100 	.word	0x40022100
 800a654:	40022300 	.word	0x40022300
 800a658:	58026300 	.word	0x58026300

0800a65c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a6ac:	b590      	push	{r4, r7, lr}
 800a6ae:	b0a5      	sub	sp, #148	@ 0x94
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6c6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	4aa4      	ldr	r2, [pc, #656]	@ (800a960 <HAL_ADC_ConfigChannel+0x2b4>)
 800a6ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d102      	bne.n	800a6e0 <HAL_ADC_ConfigChannel+0x34>
 800a6da:	2302      	movs	r3, #2
 800a6dc:	f000 bca2 	b.w	800b024 <HAL_ADC_ConfigChannel+0x978>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7ff fa71 	bl	8009bd4 <LL_ADC_REG_IsConversionOngoing>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f040 8486 	bne.w	800b006 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	db31      	blt.n	800a766 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a97      	ldr	r2, [pc, #604]	@ (800a964 <HAL_ADC_ConfigChannel+0x2b8>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d02c      	beq.n	800a766 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a714:	2b00      	cmp	r3, #0
 800a716:	d108      	bne.n	800a72a <HAL_ADC_ConfigChannel+0x7e>
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	0e9b      	lsrs	r3, r3, #26
 800a71e:	f003 031f 	and.w	r3, r3, #31
 800a722:	2201      	movs	r2, #1
 800a724:	fa02 f303 	lsl.w	r3, r2, r3
 800a728:	e016      	b.n	800a758 <HAL_ADC_ConfigChannel+0xac>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a730:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a732:	fa93 f3a3 	rbit	r3, r3
 800a736:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a738:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a73a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a73c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800a742:	2320      	movs	r3, #32
 800a744:	e003      	b.n	800a74e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800a746:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a748:	fab3 f383 	clz	r3, r3
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	f003 031f 	and.w	r3, r3, #31
 800a752:	2201      	movs	r2, #1
 800a754:	fa02 f303 	lsl.w	r3, r2, r3
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	6812      	ldr	r2, [r2, #0]
 800a75c:	69d1      	ldr	r1, [r2, #28]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	6812      	ldr	r2, [r2, #0]
 800a762:	430b      	orrs	r3, r1
 800a764:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6818      	ldr	r0, [r3, #0]
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	6859      	ldr	r1, [r3, #4]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	f7ff f8a1 	bl	80098ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff fa29 	bl	8009bd4 <LL_ADC_REG_IsConversionOngoing>
 800a782:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff fa35 	bl	8009bfa <LL_ADC_INJ_IsConversionOngoing>
 800a790:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f040 824a 	bne.w	800ac32 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a79e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f040 8245 	bne.w	800ac32 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6818      	ldr	r0, [r3, #0]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	6819      	ldr	r1, [r3, #0]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	f7ff f8fc 	bl	80099b2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a69      	ldr	r2, [pc, #420]	@ (800a964 <HAL_ADC_ConfigChannel+0x2b8>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d10d      	bne.n	800a7e0 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	695a      	ldr	r2, [r3, #20]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	08db      	lsrs	r3, r3, #3
 800a7d0:	f003 0303 	and.w	r3, r3, #3
 800a7d4:	005b      	lsls	r3, r3, #1
 800a7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a7de:	e032      	b.n	800a846 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a7e0:	4b61      	ldr	r3, [pc, #388]	@ (800a968 <HAL_ADC_ConfigChannel+0x2bc>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a7e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ec:	d10b      	bne.n	800a806 <HAL_ADC_ConfigChannel+0x15a>
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	695a      	ldr	r2, [r3, #20]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	089b      	lsrs	r3, r3, #2
 800a7fa:	f003 0307 	and.w	r3, r3, #7
 800a7fe:	005b      	lsls	r3, r3, #1
 800a800:	fa02 f303 	lsl.w	r3, r2, r3
 800a804:	e01d      	b.n	800a842 <HAL_ADC_ConfigChannel+0x196>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	f003 0310 	and.w	r3, r3, #16
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10b      	bne.n	800a82c <HAL_ADC_ConfigChannel+0x180>
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	695a      	ldr	r2, [r3, #20]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	089b      	lsrs	r3, r3, #2
 800a820:	f003 0307 	and.w	r3, r3, #7
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	fa02 f303 	lsl.w	r3, r2, r3
 800a82a:	e00a      	b.n	800a842 <HAL_ADC_ConfigChannel+0x196>
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	695a      	ldr	r2, [r3, #20]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	089b      	lsrs	r3, r3, #2
 800a838:	f003 0304 	and.w	r3, r3, #4
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	fa02 f303 	lsl.w	r3, r2, r3
 800a842:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	2b04      	cmp	r3, #4
 800a84c:	d048      	beq.n	800a8e0 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6818      	ldr	r0, [r3, #0]
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	6919      	ldr	r1, [r3, #16]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a85e:	f7fe ff27 	bl	80096b0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a3f      	ldr	r2, [pc, #252]	@ (800a964 <HAL_ADC_ConfigChannel+0x2b8>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d119      	bne.n	800a8a0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	6919      	ldr	r1, [r3, #16]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	69db      	ldr	r3, [r3, #28]
 800a878:	461a      	mov	r2, r3
 800a87a:	f7fe ffbf 	bl	80097fc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6818      	ldr	r0, [r3, #0]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	6919      	ldr	r1, [r3, #16]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d102      	bne.n	800a896 <HAL_ADC_ConfigChannel+0x1ea>
 800a890:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a894:	e000      	b.n	800a898 <HAL_ADC_ConfigChannel+0x1ec>
 800a896:	2300      	movs	r3, #0
 800a898:	461a      	mov	r2, r3
 800a89a:	f7fe ff8d 	bl	80097b8 <LL_ADC_SetOffsetSaturation>
 800a89e:	e1c8      	b.n	800ac32 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6818      	ldr	r0, [r3, #0]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	6919      	ldr	r1, [r3, #16]
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d102      	bne.n	800a8b8 <HAL_ADC_ConfigChannel+0x20c>
 800a8b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8b6:	e000      	b.n	800a8ba <HAL_ADC_ConfigChannel+0x20e>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	f7fe ff5a 	bl	8009774 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6818      	ldr	r0, [r3, #0]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	6919      	ldr	r1, [r3, #16]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	7e1b      	ldrb	r3, [r3, #24]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d102      	bne.n	800a8d6 <HAL_ADC_ConfigChannel+0x22a>
 800a8d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8d4:	e000      	b.n	800a8d8 <HAL_ADC_ConfigChannel+0x22c>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f7fe ff31 	bl	8009740 <LL_ADC_SetDataRightShift>
 800a8de:	e1a8      	b.n	800ac32 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a1f      	ldr	r2, [pc, #124]	@ (800a964 <HAL_ADC_ConfigChannel+0x2b8>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	f040 815b 	bne.w	800aba2 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe ff0e 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10a      	bne.n	800a918 <HAL_ADC_ConfigChannel+0x26c>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2100      	movs	r1, #0
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fe ff03 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800a90e:	4603      	mov	r3, r0
 800a910:	0e9b      	lsrs	r3, r3, #26
 800a912:	f003 021f 	and.w	r2, r3, #31
 800a916:	e017      	b.n	800a948 <HAL_ADC_ConfigChannel+0x29c>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2100      	movs	r1, #0
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe fef8 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800a924:	4603      	mov	r3, r0
 800a926:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a928:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a92a:	fa93 f3a3 	rbit	r3, r3
 800a92e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a932:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a93a:	2320      	movs	r3, #32
 800a93c:	e003      	b.n	800a946 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800a93e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a940:	fab3 f383 	clz	r3, r3
 800a944:	b2db      	uxtb	r3, r3
 800a946:	461a      	mov	r2, r3
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a950:	2b00      	cmp	r3, #0
 800a952:	d10b      	bne.n	800a96c <HAL_ADC_ConfigChannel+0x2c0>
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	0e9b      	lsrs	r3, r3, #26
 800a95a:	f003 031f 	and.w	r3, r3, #31
 800a95e:	e017      	b.n	800a990 <HAL_ADC_ConfigChannel+0x2e4>
 800a960:	47ff0000 	.word	0x47ff0000
 800a964:	58026000 	.word	0x58026000
 800a968:	5c001000 	.word	0x5c001000
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a974:	fa93 f3a3 	rbit	r3, r3
 800a978:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a97a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a97c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a97e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800a984:	2320      	movs	r3, #32
 800a986:	e003      	b.n	800a990 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800a988:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a98a:	fab3 f383 	clz	r3, r3
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	429a      	cmp	r2, r3
 800a992:	d106      	bne.n	800a9a2 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2200      	movs	r2, #0
 800a99a:	2100      	movs	r1, #0
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fe ff4f 	bl	8009840 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe feb3 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10a      	bne.n	800a9ce <HAL_ADC_ConfigChannel+0x322>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2101      	movs	r1, #1
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fea8 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	0e9b      	lsrs	r3, r3, #26
 800a9c8:	f003 021f 	and.w	r2, r3, #31
 800a9cc:	e017      	b.n	800a9fe <HAL_ADC_ConfigChannel+0x352>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2101      	movs	r1, #1
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fe fe9d 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9e0:	fa93 f3a3 	rbit	r3, r3
 800a9e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a9e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800a9ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d101      	bne.n	800a9f4 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800a9f0:	2320      	movs	r3, #32
 800a9f2:	e003      	b.n	800a9fc <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800a9f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9f6:	fab3 f383 	clz	r3, r3
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d105      	bne.n	800aa16 <HAL_ADC_ConfigChannel+0x36a>
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	0e9b      	lsrs	r3, r3, #26
 800aa10:	f003 031f 	and.w	r3, r3, #31
 800aa14:	e011      	b.n	800aa3a <HAL_ADC_ConfigChannel+0x38e>
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa1e:	fa93 f3a3 	rbit	r3, r3
 800aa22:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800aa24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa26:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800aa28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800aa2e:	2320      	movs	r3, #32
 800aa30:	e003      	b.n	800aa3a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800aa32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa34:	fab3 f383 	clz	r3, r3
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d106      	bne.n	800aa4c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2200      	movs	r2, #0
 800aa44:	2101      	movs	r1, #1
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fefa 	bl	8009840 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2102      	movs	r1, #2
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fe fe5e 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10a      	bne.n	800aa78 <HAL_ADC_ConfigChannel+0x3cc>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2102      	movs	r1, #2
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7fe fe53 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	0e9b      	lsrs	r3, r3, #26
 800aa72:	f003 021f 	and.w	r2, r3, #31
 800aa76:	e017      	b.n	800aaa8 <HAL_ADC_ConfigChannel+0x3fc>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fe fe48 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800aa84:	4603      	mov	r3, r0
 800aa86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8a:	fa93 f3a3 	rbit	r3, r3
 800aa8e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800aa90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800aa94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800aa9a:	2320      	movs	r3, #32
 800aa9c:	e003      	b.n	800aaa6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800aa9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaa0:	fab3 f383 	clz	r3, r3
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d105      	bne.n	800aac0 <HAL_ADC_ConfigChannel+0x414>
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	0e9b      	lsrs	r3, r3, #26
 800aaba:	f003 031f 	and.w	r3, r3, #31
 800aabe:	e011      	b.n	800aae4 <HAL_ADC_ConfigChannel+0x438>
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac8:	fa93 f3a3 	rbit	r3, r3
 800aacc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800aace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800aad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800aad8:	2320      	movs	r3, #32
 800aada:	e003      	b.n	800aae4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	fab3 f383 	clz	r3, r3
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d106      	bne.n	800aaf6 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2200      	movs	r2, #0
 800aaee:	2102      	movs	r1, #2
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fe fea5 	bl	8009840 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2103      	movs	r1, #3
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe fe09 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800ab02:	4603      	mov	r3, r0
 800ab04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10a      	bne.n	800ab22 <HAL_ADC_ConfigChannel+0x476>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2103      	movs	r1, #3
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe fdfe 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	0e9b      	lsrs	r3, r3, #26
 800ab1c:	f003 021f 	and.w	r2, r3, #31
 800ab20:	e017      	b.n	800ab52 <HAL_ADC_ConfigChannel+0x4a6>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2103      	movs	r1, #3
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe fdf3 	bl	8009714 <LL_ADC_GetOffsetChannel>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab32:	6a3b      	ldr	r3, [r7, #32]
 800ab34:	fa93 f3a3 	rbit	r3, r3
 800ab38:	61fb      	str	r3, [r7, #28]
  return result;
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800ab44:	2320      	movs	r3, #32
 800ab46:	e003      	b.n	800ab50 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800ab48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4a:	fab3 f383 	clz	r3, r3
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	461a      	mov	r2, r3
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d105      	bne.n	800ab6a <HAL_ADC_ConfigChannel+0x4be>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	0e9b      	lsrs	r3, r3, #26
 800ab64:	f003 031f 	and.w	r3, r3, #31
 800ab68:	e011      	b.n	800ab8e <HAL_ADC_ConfigChannel+0x4e2>
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	fa93 f3a3 	rbit	r3, r3
 800ab76:	613b      	str	r3, [r7, #16]
  return result;
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800ab82:	2320      	movs	r3, #32
 800ab84:	e003      	b.n	800ab8e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	fab3 f383 	clz	r3, r3
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d14f      	bne.n	800ac32 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2200      	movs	r2, #0
 800ab98:	2103      	movs	r1, #3
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe fe50 	bl	8009840 <LL_ADC_SetOffsetState>
 800aba0:	e047      	b.n	800ac32 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aba8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	069b      	lsls	r3, r3, #26
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d107      	bne.n	800abc6 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abc4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	069b      	lsls	r3, r3, #26
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d107      	bne.n	800abea <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800abe8:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	069b      	lsls	r3, r3, #26
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d107      	bne.n	800ac0e <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ac0c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	069b      	lsls	r3, r3, #26
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d107      	bne.n	800ac32 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ac30:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe ffa4 	bl	8009b84 <LL_ADC_IsEnabled>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f040 81ea 	bne.w	800b018 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6818      	ldr	r0, [r3, #0]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	6819      	ldr	r1, [r3, #0]
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	461a      	mov	r2, r3
 800ac52:	f7fe fed9 	bl	8009a08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	4a7a      	ldr	r2, [pc, #488]	@ (800ae44 <HAL_ADC_ConfigChannel+0x798>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	f040 80e0 	bne.w	800ae22 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4977      	ldr	r1, [pc, #476]	@ (800ae48 <HAL_ADC_ConfigChannel+0x79c>)
 800ac6c:	428b      	cmp	r3, r1
 800ac6e:	d147      	bne.n	800ad00 <HAL_ADC_ConfigChannel+0x654>
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4975      	ldr	r1, [pc, #468]	@ (800ae4c <HAL_ADC_ConfigChannel+0x7a0>)
 800ac76:	428b      	cmp	r3, r1
 800ac78:	d040      	beq.n	800acfc <HAL_ADC_ConfigChannel+0x650>
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4974      	ldr	r1, [pc, #464]	@ (800ae50 <HAL_ADC_ConfigChannel+0x7a4>)
 800ac80:	428b      	cmp	r3, r1
 800ac82:	d039      	beq.n	800acf8 <HAL_ADC_ConfigChannel+0x64c>
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4972      	ldr	r1, [pc, #456]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7a8>)
 800ac8a:	428b      	cmp	r3, r1
 800ac8c:	d032      	beq.n	800acf4 <HAL_ADC_ConfigChannel+0x648>
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4971      	ldr	r1, [pc, #452]	@ (800ae58 <HAL_ADC_ConfigChannel+0x7ac>)
 800ac94:	428b      	cmp	r3, r1
 800ac96:	d02b      	beq.n	800acf0 <HAL_ADC_ConfigChannel+0x644>
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	496f      	ldr	r1, [pc, #444]	@ (800ae5c <HAL_ADC_ConfigChannel+0x7b0>)
 800ac9e:	428b      	cmp	r3, r1
 800aca0:	d024      	beq.n	800acec <HAL_ADC_ConfigChannel+0x640>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	496e      	ldr	r1, [pc, #440]	@ (800ae60 <HAL_ADC_ConfigChannel+0x7b4>)
 800aca8:	428b      	cmp	r3, r1
 800acaa:	d01d      	beq.n	800ace8 <HAL_ADC_ConfigChannel+0x63c>
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	496c      	ldr	r1, [pc, #432]	@ (800ae64 <HAL_ADC_ConfigChannel+0x7b8>)
 800acb2:	428b      	cmp	r3, r1
 800acb4:	d016      	beq.n	800ace4 <HAL_ADC_ConfigChannel+0x638>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	496b      	ldr	r1, [pc, #428]	@ (800ae68 <HAL_ADC_ConfigChannel+0x7bc>)
 800acbc:	428b      	cmp	r3, r1
 800acbe:	d00f      	beq.n	800ace0 <HAL_ADC_ConfigChannel+0x634>
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4969      	ldr	r1, [pc, #420]	@ (800ae6c <HAL_ADC_ConfigChannel+0x7c0>)
 800acc6:	428b      	cmp	r3, r1
 800acc8:	d008      	beq.n	800acdc <HAL_ADC_ConfigChannel+0x630>
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4968      	ldr	r1, [pc, #416]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7c4>)
 800acd0:	428b      	cmp	r3, r1
 800acd2:	d101      	bne.n	800acd8 <HAL_ADC_ConfigChannel+0x62c>
 800acd4:	4b67      	ldr	r3, [pc, #412]	@ (800ae74 <HAL_ADC_ConfigChannel+0x7c8>)
 800acd6:	e0a0      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800acd8:	2300      	movs	r3, #0
 800acda:	e09e      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800acdc:	4b66      	ldr	r3, [pc, #408]	@ (800ae78 <HAL_ADC_ConfigChannel+0x7cc>)
 800acde:	e09c      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ace0:	4b66      	ldr	r3, [pc, #408]	@ (800ae7c <HAL_ADC_ConfigChannel+0x7d0>)
 800ace2:	e09a      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ace4:	4b60      	ldr	r3, [pc, #384]	@ (800ae68 <HAL_ADC_ConfigChannel+0x7bc>)
 800ace6:	e098      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ace8:	4b5e      	ldr	r3, [pc, #376]	@ (800ae64 <HAL_ADC_ConfigChannel+0x7b8>)
 800acea:	e096      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800acec:	4b64      	ldr	r3, [pc, #400]	@ (800ae80 <HAL_ADC_ConfigChannel+0x7d4>)
 800acee:	e094      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800acf0:	4b64      	ldr	r3, [pc, #400]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7d8>)
 800acf2:	e092      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800acf4:	4b64      	ldr	r3, [pc, #400]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7dc>)
 800acf6:	e090      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800acf8:	4b64      	ldr	r3, [pc, #400]	@ (800ae8c <HAL_ADC_ConfigChannel+0x7e0>)
 800acfa:	e08e      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800acfc:	2301      	movs	r3, #1
 800acfe:	e08c      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4962      	ldr	r1, [pc, #392]	@ (800ae90 <HAL_ADC_ConfigChannel+0x7e4>)
 800ad06:	428b      	cmp	r3, r1
 800ad08:	d140      	bne.n	800ad8c <HAL_ADC_ConfigChannel+0x6e0>
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	494f      	ldr	r1, [pc, #316]	@ (800ae4c <HAL_ADC_ConfigChannel+0x7a0>)
 800ad10:	428b      	cmp	r3, r1
 800ad12:	d039      	beq.n	800ad88 <HAL_ADC_ConfigChannel+0x6dc>
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	494d      	ldr	r1, [pc, #308]	@ (800ae50 <HAL_ADC_ConfigChannel+0x7a4>)
 800ad1a:	428b      	cmp	r3, r1
 800ad1c:	d032      	beq.n	800ad84 <HAL_ADC_ConfigChannel+0x6d8>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	494c      	ldr	r1, [pc, #304]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7a8>)
 800ad24:	428b      	cmp	r3, r1
 800ad26:	d02b      	beq.n	800ad80 <HAL_ADC_ConfigChannel+0x6d4>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	494a      	ldr	r1, [pc, #296]	@ (800ae58 <HAL_ADC_ConfigChannel+0x7ac>)
 800ad2e:	428b      	cmp	r3, r1
 800ad30:	d024      	beq.n	800ad7c <HAL_ADC_ConfigChannel+0x6d0>
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4949      	ldr	r1, [pc, #292]	@ (800ae5c <HAL_ADC_ConfigChannel+0x7b0>)
 800ad38:	428b      	cmp	r3, r1
 800ad3a:	d01d      	beq.n	800ad78 <HAL_ADC_ConfigChannel+0x6cc>
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4947      	ldr	r1, [pc, #284]	@ (800ae60 <HAL_ADC_ConfigChannel+0x7b4>)
 800ad42:	428b      	cmp	r3, r1
 800ad44:	d016      	beq.n	800ad74 <HAL_ADC_ConfigChannel+0x6c8>
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4946      	ldr	r1, [pc, #280]	@ (800ae64 <HAL_ADC_ConfigChannel+0x7b8>)
 800ad4c:	428b      	cmp	r3, r1
 800ad4e:	d00f      	beq.n	800ad70 <HAL_ADC_ConfigChannel+0x6c4>
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4944      	ldr	r1, [pc, #272]	@ (800ae68 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad56:	428b      	cmp	r3, r1
 800ad58:	d008      	beq.n	800ad6c <HAL_ADC_ConfigChannel+0x6c0>
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4944      	ldr	r1, [pc, #272]	@ (800ae70 <HAL_ADC_ConfigChannel+0x7c4>)
 800ad60:	428b      	cmp	r3, r1
 800ad62:	d101      	bne.n	800ad68 <HAL_ADC_ConfigChannel+0x6bc>
 800ad64:	4b43      	ldr	r3, [pc, #268]	@ (800ae74 <HAL_ADC_ConfigChannel+0x7c8>)
 800ad66:	e058      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e056      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ad6c:	4b43      	ldr	r3, [pc, #268]	@ (800ae7c <HAL_ADC_ConfigChannel+0x7d0>)
 800ad6e:	e054      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ad70:	4b3d      	ldr	r3, [pc, #244]	@ (800ae68 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad72:	e052      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ad74:	4b3b      	ldr	r3, [pc, #236]	@ (800ae64 <HAL_ADC_ConfigChannel+0x7b8>)
 800ad76:	e050      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ad78:	4b41      	ldr	r3, [pc, #260]	@ (800ae80 <HAL_ADC_ConfigChannel+0x7d4>)
 800ad7a:	e04e      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ad7c:	4b41      	ldr	r3, [pc, #260]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7d8>)
 800ad7e:	e04c      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ad80:	4b41      	ldr	r3, [pc, #260]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7dc>)
 800ad82:	e04a      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ad84:	4b41      	ldr	r3, [pc, #260]	@ (800ae8c <HAL_ADC_ConfigChannel+0x7e0>)
 800ad86:	e048      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e046      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4940      	ldr	r1, [pc, #256]	@ (800ae94 <HAL_ADC_ConfigChannel+0x7e8>)
 800ad92:	428b      	cmp	r3, r1
 800ad94:	d140      	bne.n	800ae18 <HAL_ADC_ConfigChannel+0x76c>
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	492c      	ldr	r1, [pc, #176]	@ (800ae4c <HAL_ADC_ConfigChannel+0x7a0>)
 800ad9c:	428b      	cmp	r3, r1
 800ad9e:	d039      	beq.n	800ae14 <HAL_ADC_ConfigChannel+0x768>
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	492a      	ldr	r1, [pc, #168]	@ (800ae50 <HAL_ADC_ConfigChannel+0x7a4>)
 800ada6:	428b      	cmp	r3, r1
 800ada8:	d032      	beq.n	800ae10 <HAL_ADC_ConfigChannel+0x764>
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4929      	ldr	r1, [pc, #164]	@ (800ae54 <HAL_ADC_ConfigChannel+0x7a8>)
 800adb0:	428b      	cmp	r3, r1
 800adb2:	d02b      	beq.n	800ae0c <HAL_ADC_ConfigChannel+0x760>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4927      	ldr	r1, [pc, #156]	@ (800ae58 <HAL_ADC_ConfigChannel+0x7ac>)
 800adba:	428b      	cmp	r3, r1
 800adbc:	d024      	beq.n	800ae08 <HAL_ADC_ConfigChannel+0x75c>
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4926      	ldr	r1, [pc, #152]	@ (800ae5c <HAL_ADC_ConfigChannel+0x7b0>)
 800adc4:	428b      	cmp	r3, r1
 800adc6:	d01d      	beq.n	800ae04 <HAL_ADC_ConfigChannel+0x758>
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4924      	ldr	r1, [pc, #144]	@ (800ae60 <HAL_ADC_ConfigChannel+0x7b4>)
 800adce:	428b      	cmp	r3, r1
 800add0:	d016      	beq.n	800ae00 <HAL_ADC_ConfigChannel+0x754>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4923      	ldr	r1, [pc, #140]	@ (800ae64 <HAL_ADC_ConfigChannel+0x7b8>)
 800add8:	428b      	cmp	r3, r1
 800adda:	d00f      	beq.n	800adfc <HAL_ADC_ConfigChannel+0x750>
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4926      	ldr	r1, [pc, #152]	@ (800ae7c <HAL_ADC_ConfigChannel+0x7d0>)
 800ade2:	428b      	cmp	r3, r1
 800ade4:	d008      	beq.n	800adf8 <HAL_ADC_ConfigChannel+0x74c>
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	492b      	ldr	r1, [pc, #172]	@ (800ae98 <HAL_ADC_ConfigChannel+0x7ec>)
 800adec:	428b      	cmp	r3, r1
 800adee:	d101      	bne.n	800adf4 <HAL_ADC_ConfigChannel+0x748>
 800adf0:	4b2a      	ldr	r3, [pc, #168]	@ (800ae9c <HAL_ADC_ConfigChannel+0x7f0>)
 800adf2:	e012      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800adf4:	2300      	movs	r3, #0
 800adf6:	e010      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800adf8:	4b27      	ldr	r3, [pc, #156]	@ (800ae98 <HAL_ADC_ConfigChannel+0x7ec>)
 800adfa:	e00e      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800adfc:	4b1a      	ldr	r3, [pc, #104]	@ (800ae68 <HAL_ADC_ConfigChannel+0x7bc>)
 800adfe:	e00c      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ae00:	4b18      	ldr	r3, [pc, #96]	@ (800ae64 <HAL_ADC_ConfigChannel+0x7b8>)
 800ae02:	e00a      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ae04:	4b1e      	ldr	r3, [pc, #120]	@ (800ae80 <HAL_ADC_ConfigChannel+0x7d4>)
 800ae06:	e008      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ae08:	4b1e      	ldr	r3, [pc, #120]	@ (800ae84 <HAL_ADC_ConfigChannel+0x7d8>)
 800ae0a:	e006      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ae0c:	4b1e      	ldr	r3, [pc, #120]	@ (800ae88 <HAL_ADC_ConfigChannel+0x7dc>)
 800ae0e:	e004      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ae10:	4b1e      	ldr	r3, [pc, #120]	@ (800ae8c <HAL_ADC_ConfigChannel+0x7e0>)
 800ae12:	e002      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ae14:	2301      	movs	r3, #1
 800ae16:	e000      	b.n	800ae1a <HAL_ADC_ConfigChannel+0x76e>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	f7fe fc0d 	bl	800963c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	f280 80f6 	bge.w	800b018 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a05      	ldr	r2, [pc, #20]	@ (800ae48 <HAL_ADC_ConfigChannel+0x79c>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d004      	beq.n	800ae40 <HAL_ADC_ConfigChannel+0x794>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a15      	ldr	r2, [pc, #84]	@ (800ae90 <HAL_ADC_ConfigChannel+0x7e4>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d131      	bne.n	800aea4 <HAL_ADC_ConfigChannel+0x7f8>
 800ae40:	4b17      	ldr	r3, [pc, #92]	@ (800aea0 <HAL_ADC_ConfigChannel+0x7f4>)
 800ae42:	e030      	b.n	800aea6 <HAL_ADC_ConfigChannel+0x7fa>
 800ae44:	47ff0000 	.word	0x47ff0000
 800ae48:	40022000 	.word	0x40022000
 800ae4c:	04300002 	.word	0x04300002
 800ae50:	08600004 	.word	0x08600004
 800ae54:	0c900008 	.word	0x0c900008
 800ae58:	10c00010 	.word	0x10c00010
 800ae5c:	14f00020 	.word	0x14f00020
 800ae60:	2a000400 	.word	0x2a000400
 800ae64:	2e300800 	.word	0x2e300800
 800ae68:	32601000 	.word	0x32601000
 800ae6c:	43210000 	.word	0x43210000
 800ae70:	4b840000 	.word	0x4b840000
 800ae74:	4fb80000 	.word	0x4fb80000
 800ae78:	47520000 	.word	0x47520000
 800ae7c:	36902000 	.word	0x36902000
 800ae80:	25b00200 	.word	0x25b00200
 800ae84:	21800100 	.word	0x21800100
 800ae88:	1d500080 	.word	0x1d500080
 800ae8c:	19200040 	.word	0x19200040
 800ae90:	40022100 	.word	0x40022100
 800ae94:	58026000 	.word	0x58026000
 800ae98:	3ac04000 	.word	0x3ac04000
 800ae9c:	3ef08000 	.word	0x3ef08000
 800aea0:	40022300 	.word	0x40022300
 800aea4:	4b61      	ldr	r3, [pc, #388]	@ (800b02c <HAL_ADC_ConfigChannel+0x980>)
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe fbba 	bl	8009620 <LL_ADC_GetCommonPathInternalCh>
 800aeac:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a5f      	ldr	r2, [pc, #380]	@ (800b030 <HAL_ADC_ConfigChannel+0x984>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d004      	beq.n	800aec2 <HAL_ADC_ConfigChannel+0x816>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a5d      	ldr	r2, [pc, #372]	@ (800b034 <HAL_ADC_ConfigChannel+0x988>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d10e      	bne.n	800aee0 <HAL_ADC_ConfigChannel+0x834>
 800aec2:	485b      	ldr	r0, [pc, #364]	@ (800b030 <HAL_ADC_ConfigChannel+0x984>)
 800aec4:	f7fe fe5e 	bl	8009b84 <LL_ADC_IsEnabled>
 800aec8:	4604      	mov	r4, r0
 800aeca:	485a      	ldr	r0, [pc, #360]	@ (800b034 <HAL_ADC_ConfigChannel+0x988>)
 800aecc:	f7fe fe5a 	bl	8009b84 <LL_ADC_IsEnabled>
 800aed0:	4603      	mov	r3, r0
 800aed2:	4323      	orrs	r3, r4
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	bf0c      	ite	eq
 800aed8:	2301      	moveq	r3, #1
 800aeda:	2300      	movne	r3, #0
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	e008      	b.n	800aef2 <HAL_ADC_ConfigChannel+0x846>
 800aee0:	4855      	ldr	r0, [pc, #340]	@ (800b038 <HAL_ADC_ConfigChannel+0x98c>)
 800aee2:	f7fe fe4f 	bl	8009b84 <LL_ADC_IsEnabled>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	bf0c      	ite	eq
 800aeec:	2301      	moveq	r3, #1
 800aeee:	2300      	movne	r3, #0
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d07d      	beq.n	800aff2 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a50      	ldr	r2, [pc, #320]	@ (800b03c <HAL_ADC_ConfigChannel+0x990>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d130      	bne.n	800af62 <HAL_ADC_ConfigChannel+0x8b6>
 800af00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af06:	2b00      	cmp	r3, #0
 800af08:	d12b      	bne.n	800af62 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a4a      	ldr	r2, [pc, #296]	@ (800b038 <HAL_ADC_ConfigChannel+0x98c>)
 800af10:	4293      	cmp	r3, r2
 800af12:	f040 8081 	bne.w	800b018 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a45      	ldr	r2, [pc, #276]	@ (800b030 <HAL_ADC_ConfigChannel+0x984>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d004      	beq.n	800af2a <HAL_ADC_ConfigChannel+0x87e>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a43      	ldr	r2, [pc, #268]	@ (800b034 <HAL_ADC_ConfigChannel+0x988>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d101      	bne.n	800af2e <HAL_ADC_ConfigChannel+0x882>
 800af2a:	4a45      	ldr	r2, [pc, #276]	@ (800b040 <HAL_ADC_ConfigChannel+0x994>)
 800af2c:	e000      	b.n	800af30 <HAL_ADC_ConfigChannel+0x884>
 800af2e:	4a3f      	ldr	r2, [pc, #252]	@ (800b02c <HAL_ADC_ConfigChannel+0x980>)
 800af30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800af36:	4619      	mov	r1, r3
 800af38:	4610      	mov	r0, r2
 800af3a:	f7fe fb5e 	bl	80095fa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800af3e:	4b41      	ldr	r3, [pc, #260]	@ (800b044 <HAL_ADC_ConfigChannel+0x998>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	099b      	lsrs	r3, r3, #6
 800af44:	4a40      	ldr	r2, [pc, #256]	@ (800b048 <HAL_ADC_ConfigChannel+0x99c>)
 800af46:	fba2 2303 	umull	r2, r3, r2, r3
 800af4a:	099b      	lsrs	r3, r3, #6
 800af4c:	3301      	adds	r3, #1
 800af4e:	005b      	lsls	r3, r3, #1
 800af50:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800af52:	e002      	b.n	800af5a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3b01      	subs	r3, #1
 800af58:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1f9      	bne.n	800af54 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af60:	e05a      	b.n	800b018 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a39      	ldr	r2, [pc, #228]	@ (800b04c <HAL_ADC_ConfigChannel+0x9a0>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d11e      	bne.n	800afaa <HAL_ADC_ConfigChannel+0x8fe>
 800af6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d119      	bne.n	800afaa <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a2f      	ldr	r2, [pc, #188]	@ (800b038 <HAL_ADC_ConfigChannel+0x98c>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d14b      	bne.n	800b018 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a2a      	ldr	r2, [pc, #168]	@ (800b030 <HAL_ADC_ConfigChannel+0x984>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d004      	beq.n	800af94 <HAL_ADC_ConfigChannel+0x8e8>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a29      	ldr	r2, [pc, #164]	@ (800b034 <HAL_ADC_ConfigChannel+0x988>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d101      	bne.n	800af98 <HAL_ADC_ConfigChannel+0x8ec>
 800af94:	4a2a      	ldr	r2, [pc, #168]	@ (800b040 <HAL_ADC_ConfigChannel+0x994>)
 800af96:	e000      	b.n	800af9a <HAL_ADC_ConfigChannel+0x8ee>
 800af98:	4a24      	ldr	r2, [pc, #144]	@ (800b02c <HAL_ADC_ConfigChannel+0x980>)
 800af9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800afa0:	4619      	mov	r1, r3
 800afa2:	4610      	mov	r0, r2
 800afa4:	f7fe fb29 	bl	80095fa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800afa8:	e036      	b.n	800b018 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a28      	ldr	r2, [pc, #160]	@ (800b050 <HAL_ADC_ConfigChannel+0x9a4>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d131      	bne.n	800b018 <HAL_ADC_ConfigChannel+0x96c>
 800afb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800afb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d12c      	bne.n	800b018 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a1d      	ldr	r2, [pc, #116]	@ (800b038 <HAL_ADC_ConfigChannel+0x98c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d127      	bne.n	800b018 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a18      	ldr	r2, [pc, #96]	@ (800b030 <HAL_ADC_ConfigChannel+0x984>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d004      	beq.n	800afdc <HAL_ADC_ConfigChannel+0x930>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a17      	ldr	r2, [pc, #92]	@ (800b034 <HAL_ADC_ConfigChannel+0x988>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d101      	bne.n	800afe0 <HAL_ADC_ConfigChannel+0x934>
 800afdc:	4a18      	ldr	r2, [pc, #96]	@ (800b040 <HAL_ADC_ConfigChannel+0x994>)
 800afde:	e000      	b.n	800afe2 <HAL_ADC_ConfigChannel+0x936>
 800afe0:	4a12      	ldr	r2, [pc, #72]	@ (800b02c <HAL_ADC_ConfigChannel+0x980>)
 800afe2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800afe4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800afe8:	4619      	mov	r1, r3
 800afea:	4610      	mov	r0, r2
 800afec:	f7fe fb05 	bl	80095fa <LL_ADC_SetCommonPathInternalCh>
 800aff0:	e012      	b.n	800b018 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aff6:	f043 0220 	orr.w	r2, r3, #32
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800b004:	e008      	b.n	800b018 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b00a:	f043 0220 	orr.w	r2, r3, #32
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800b020:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800b024:	4618      	mov	r0, r3
 800b026:	3794      	adds	r7, #148	@ 0x94
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd90      	pop	{r4, r7, pc}
 800b02c:	58026300 	.word	0x58026300
 800b030:	40022000 	.word	0x40022000
 800b034:	40022100 	.word	0x40022100
 800b038:	58026000 	.word	0x58026000
 800b03c:	c7520000 	.word	0xc7520000
 800b040:	40022300 	.word	0x40022300
 800b044:	24000004 	.word	0x24000004
 800b048:	053e2d63 	.word	0x053e2d63
 800b04c:	c3210000 	.word	0xc3210000
 800b050:	cb840000 	.word	0xcb840000

0800b054 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4618      	mov	r0, r3
 800b062:	f7fe fd8f 	bl	8009b84 <LL_ADC_IsEnabled>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d16e      	bne.n	800b14a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689a      	ldr	r2, [r3, #8]
 800b072:	4b38      	ldr	r3, [pc, #224]	@ (800b154 <ADC_Enable+0x100>)
 800b074:	4013      	ands	r3, r2
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00d      	beq.n	800b096 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b07e:	f043 0210 	orr.w	r2, r3, #16
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b08a:	f043 0201 	orr.w	r2, r3, #1
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e05a      	b.n	800b14c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe fd5e 	bl	8009b5c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b0a0:	f7fe fa68 	bl	8009574 <HAL_GetTick>
 800b0a4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a2b      	ldr	r2, [pc, #172]	@ (800b158 <ADC_Enable+0x104>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d004      	beq.n	800b0ba <ADC_Enable+0x66>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a29      	ldr	r2, [pc, #164]	@ (800b15c <ADC_Enable+0x108>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d101      	bne.n	800b0be <ADC_Enable+0x6a>
 800b0ba:	4b29      	ldr	r3, [pc, #164]	@ (800b160 <ADC_Enable+0x10c>)
 800b0bc:	e000      	b.n	800b0c0 <ADC_Enable+0x6c>
 800b0be:	4b29      	ldr	r3, [pc, #164]	@ (800b164 <ADC_Enable+0x110>)
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fe fce1 	bl	8009a88 <LL_ADC_GetMultimode>
 800b0c6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a23      	ldr	r2, [pc, #140]	@ (800b15c <ADC_Enable+0x108>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d002      	beq.n	800b0d8 <ADC_Enable+0x84>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	e000      	b.n	800b0da <ADC_Enable+0x86>
 800b0d8:	4b1f      	ldr	r3, [pc, #124]	@ (800b158 <ADC_Enable+0x104>)
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	6812      	ldr	r2, [r2, #0]
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d02c      	beq.n	800b13c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d130      	bne.n	800b14a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b0e8:	e028      	b.n	800b13c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fe fd48 	bl	8009b84 <LL_ADC_IsEnabled>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d104      	bne.n	800b104 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fe fd2c 	bl	8009b5c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b104:	f7fe fa36 	bl	8009574 <HAL_GetTick>
 800b108:	4602      	mov	r2, r0
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d914      	bls.n	800b13c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d00d      	beq.n	800b13c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b124:	f043 0210 	orr.w	r2, r3, #16
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b130:	f043 0201 	orr.w	r2, r3, #1
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e007      	b.n	800b14c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b01      	cmp	r3, #1
 800b148:	d1cf      	bne.n	800b0ea <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	8000003f 	.word	0x8000003f
 800b158:	40022000 	.word	0x40022000
 800b15c:	40022100 	.word	0x40022100
 800b160:	40022300 	.word	0x40022300
 800b164:	58026300 	.word	0x58026300

0800b168 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b174:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b17a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d14b      	bne.n	800b21a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b186:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0308 	and.w	r3, r3, #8
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d021      	beq.n	800b1e0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fe fb77 	bl	8009894 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d032      	beq.n	800b212 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d12b      	bne.n	800b212 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d11f      	bne.n	800b212 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1d6:	f043 0201 	orr.w	r2, r3, #1
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	661a      	str	r2, [r3, #96]	@ 0x60
 800b1de:	e018      	b.n	800b212 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	f003 0303 	and.w	r3, r3, #3
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d111      	bne.n	800b212 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b202:	2b00      	cmp	r3, #0
 800b204:	d105      	bne.n	800b212 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b20a:	f043 0201 	orr.w	r2, r3, #1
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7ff fa22 	bl	800a65c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b218:	e00e      	b.n	800b238 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b21e:	f003 0310 	and.w	r3, r3, #16
 800b222:	2b00      	cmp	r3, #0
 800b224:	d003      	beq.n	800b22e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f7ff fa36 	bl	800a698 <HAL_ADC_ErrorCallback>
}
 800b22c:	e004      	b.n	800b238 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	4798      	blx	r3
}
 800b238:	bf00      	nop
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b24c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f7ff fa0e 	bl	800a670 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b254:	bf00      	nop
 800b256:	3710      	adds	r7, #16
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b268:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b26e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b27a:	f043 0204 	orr.w	r2, r3, #4
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f7ff fa08 	bl	800a698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b288:	bf00      	nop
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a6c      	ldr	r2, [pc, #432]	@ (800b450 <ADC_ConfigureBoostMode+0x1c0>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d004      	beq.n	800b2ac <ADC_ConfigureBoostMode+0x1c>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a6b      	ldr	r2, [pc, #428]	@ (800b454 <ADC_ConfigureBoostMode+0x1c4>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d109      	bne.n	800b2c0 <ADC_ConfigureBoostMode+0x30>
 800b2ac:	4b6a      	ldr	r3, [pc, #424]	@ (800b458 <ADC_ConfigureBoostMode+0x1c8>)
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	bf14      	ite	ne
 800b2b8:	2301      	movne	r3, #1
 800b2ba:	2300      	moveq	r3, #0
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	e008      	b.n	800b2d2 <ADC_ConfigureBoostMode+0x42>
 800b2c0:	4b66      	ldr	r3, [pc, #408]	@ (800b45c <ADC_ConfigureBoostMode+0x1cc>)
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	bf14      	ite	ne
 800b2cc:	2301      	movne	r3, #1
 800b2ce:	2300      	moveq	r3, #0
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d01c      	beq.n	800b310 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b2d6:	f006 fe8b 	bl	8011ff0 <HAL_RCC_GetHCLKFreq>
 800b2da:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b2e4:	d010      	beq.n	800b308 <ADC_ConfigureBoostMode+0x78>
 800b2e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b2ea:	d873      	bhi.n	800b3d4 <ADC_ConfigureBoostMode+0x144>
 800b2ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2f0:	d002      	beq.n	800b2f8 <ADC_ConfigureBoostMode+0x68>
 800b2f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2f6:	d16d      	bne.n	800b3d4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	0c1b      	lsrs	r3, r3, #16
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	fbb2 f3f3 	udiv	r3, r2, r3
 800b304:	60fb      	str	r3, [r7, #12]
        break;
 800b306:	e068      	b.n	800b3da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	089b      	lsrs	r3, r3, #2
 800b30c:	60fb      	str	r3, [r7, #12]
        break;
 800b30e:	e064      	b.n	800b3da <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b310:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b314:	f04f 0100 	mov.w	r1, #0
 800b318:	f008 f866 	bl	80133e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b31c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b326:	d051      	beq.n	800b3cc <ADC_ConfigureBoostMode+0x13c>
 800b328:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b32c:	d854      	bhi.n	800b3d8 <ADC_ConfigureBoostMode+0x148>
 800b32e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b332:	d047      	beq.n	800b3c4 <ADC_ConfigureBoostMode+0x134>
 800b334:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b338:	d84e      	bhi.n	800b3d8 <ADC_ConfigureBoostMode+0x148>
 800b33a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b33e:	d03d      	beq.n	800b3bc <ADC_ConfigureBoostMode+0x12c>
 800b340:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b344:	d848      	bhi.n	800b3d8 <ADC_ConfigureBoostMode+0x148>
 800b346:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b34a:	d033      	beq.n	800b3b4 <ADC_ConfigureBoostMode+0x124>
 800b34c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b350:	d842      	bhi.n	800b3d8 <ADC_ConfigureBoostMode+0x148>
 800b352:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b356:	d029      	beq.n	800b3ac <ADC_ConfigureBoostMode+0x11c>
 800b358:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b35c:	d83c      	bhi.n	800b3d8 <ADC_ConfigureBoostMode+0x148>
 800b35e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b362:	d01a      	beq.n	800b39a <ADC_ConfigureBoostMode+0x10a>
 800b364:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b368:	d836      	bhi.n	800b3d8 <ADC_ConfigureBoostMode+0x148>
 800b36a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b36e:	d014      	beq.n	800b39a <ADC_ConfigureBoostMode+0x10a>
 800b370:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b374:	d830      	bhi.n	800b3d8 <ADC_ConfigureBoostMode+0x148>
 800b376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b37a:	d00e      	beq.n	800b39a <ADC_ConfigureBoostMode+0x10a>
 800b37c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b380:	d82a      	bhi.n	800b3d8 <ADC_ConfigureBoostMode+0x148>
 800b382:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b386:	d008      	beq.n	800b39a <ADC_ConfigureBoostMode+0x10a>
 800b388:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b38c:	d824      	bhi.n	800b3d8 <ADC_ConfigureBoostMode+0x148>
 800b38e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b392:	d002      	beq.n	800b39a <ADC_ConfigureBoostMode+0x10a>
 800b394:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b398:	d11e      	bne.n	800b3d8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	0c9b      	lsrs	r3, r3, #18
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3a8:	60fb      	str	r3, [r7, #12]
        break;
 800b3aa:	e016      	b.n	800b3da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	091b      	lsrs	r3, r3, #4
 800b3b0:	60fb      	str	r3, [r7, #12]
        break;
 800b3b2:	e012      	b.n	800b3da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	095b      	lsrs	r3, r3, #5
 800b3b8:	60fb      	str	r3, [r7, #12]
        break;
 800b3ba:	e00e      	b.n	800b3da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	099b      	lsrs	r3, r3, #6
 800b3c0:	60fb      	str	r3, [r7, #12]
        break;
 800b3c2:	e00a      	b.n	800b3da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	09db      	lsrs	r3, r3, #7
 800b3c8:	60fb      	str	r3, [r7, #12]
        break;
 800b3ca:	e006      	b.n	800b3da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	0a1b      	lsrs	r3, r3, #8
 800b3d0:	60fb      	str	r3, [r7, #12]
        break;
 800b3d2:	e002      	b.n	800b3da <ADC_ConfigureBoostMode+0x14a>
        break;
 800b3d4:	bf00      	nop
 800b3d6:	e000      	b.n	800b3da <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b3d8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	085b      	lsrs	r3, r3, #1
 800b3de:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4a1f      	ldr	r2, [pc, #124]	@ (800b460 <ADC_ConfigureBoostMode+0x1d0>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d808      	bhi.n	800b3fa <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	689a      	ldr	r2, [r3, #8]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b3f6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b3f8:	e025      	b.n	800b446 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	4a19      	ldr	r2, [pc, #100]	@ (800b464 <ADC_ConfigureBoostMode+0x1d4>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d80a      	bhi.n	800b418 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b414:	609a      	str	r2, [r3, #8]
}
 800b416:	e016      	b.n	800b446 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4a13      	ldr	r2, [pc, #76]	@ (800b468 <ADC_ConfigureBoostMode+0x1d8>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d80a      	bhi.n	800b436 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b432:	609a      	str	r2, [r3, #8]
}
 800b434:	e007      	b.n	800b446 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b444:	609a      	str	r2, [r3, #8]
}
 800b446:	bf00      	nop
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	40022000 	.word	0x40022000
 800b454:	40022100 	.word	0x40022100
 800b458:	40022300 	.word	0x40022300
 800b45c:	58026300 	.word	0x58026300
 800b460:	005f5e10 	.word	0x005f5e10
 800b464:	00bebc20 	.word	0x00bebc20
 800b468:	017d7840 	.word	0x017d7840

0800b46c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <__NVIC_SetPriorityGrouping>:
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f003 0307 	and.w	r3, r3, #7
 800b4de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b4e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b510 <__NVIC_SetPriorityGrouping+0x40>)
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b4ec:	4013      	ands	r3, r2
 800b4ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b4f8:	4b06      	ldr	r3, [pc, #24]	@ (800b514 <__NVIC_SetPriorityGrouping+0x44>)
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b4fe:	4a04      	ldr	r2, [pc, #16]	@ (800b510 <__NVIC_SetPriorityGrouping+0x40>)
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	60d3      	str	r3, [r2, #12]
}
 800b504:	bf00      	nop
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	e000ed00 	.word	0xe000ed00
 800b514:	05fa0000 	.word	0x05fa0000

0800b518 <__NVIC_GetPriorityGrouping>:
{
 800b518:	b480      	push	{r7}
 800b51a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b51c:	4b04      	ldr	r3, [pc, #16]	@ (800b530 <__NVIC_GetPriorityGrouping+0x18>)
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	0a1b      	lsrs	r3, r3, #8
 800b522:	f003 0307 	and.w	r3, r3, #7
}
 800b526:	4618      	mov	r0, r3
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	e000ed00 	.word	0xe000ed00

0800b534 <__NVIC_EnableIRQ>:
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	4603      	mov	r3, r0
 800b53c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b53e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b542:	2b00      	cmp	r3, #0
 800b544:	db0b      	blt.n	800b55e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b546:	88fb      	ldrh	r3, [r7, #6]
 800b548:	f003 021f 	and.w	r2, r3, #31
 800b54c:	4907      	ldr	r1, [pc, #28]	@ (800b56c <__NVIC_EnableIRQ+0x38>)
 800b54e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b552:	095b      	lsrs	r3, r3, #5
 800b554:	2001      	movs	r0, #1
 800b556:	fa00 f202 	lsl.w	r2, r0, r2
 800b55a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b55e:	bf00      	nop
 800b560:	370c      	adds	r7, #12
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	e000e100 	.word	0xe000e100

0800b570 <__NVIC_SetPriority>:
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	6039      	str	r1, [r7, #0]
 800b57a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b57c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b580:	2b00      	cmp	r3, #0
 800b582:	db0a      	blt.n	800b59a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	b2da      	uxtb	r2, r3
 800b588:	490c      	ldr	r1, [pc, #48]	@ (800b5bc <__NVIC_SetPriority+0x4c>)
 800b58a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b58e:	0112      	lsls	r2, r2, #4
 800b590:	b2d2      	uxtb	r2, r2
 800b592:	440b      	add	r3, r1
 800b594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b598:	e00a      	b.n	800b5b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	4908      	ldr	r1, [pc, #32]	@ (800b5c0 <__NVIC_SetPriority+0x50>)
 800b5a0:	88fb      	ldrh	r3, [r7, #6]
 800b5a2:	f003 030f 	and.w	r3, r3, #15
 800b5a6:	3b04      	subs	r3, #4
 800b5a8:	0112      	lsls	r2, r2, #4
 800b5aa:	b2d2      	uxtb	r2, r2
 800b5ac:	440b      	add	r3, r1
 800b5ae:	761a      	strb	r2, [r3, #24]
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	e000e100 	.word	0xe000e100
 800b5c0:	e000ed00 	.word	0xe000ed00

0800b5c4 <NVIC_EncodePriority>:
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b089      	sub	sp, #36	@ 0x24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f003 0307 	and.w	r3, r3, #7
 800b5d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	f1c3 0307 	rsb	r3, r3, #7
 800b5de:	2b04      	cmp	r3, #4
 800b5e0:	bf28      	it	cs
 800b5e2:	2304      	movcs	r3, #4
 800b5e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	2b06      	cmp	r3, #6
 800b5ec:	d902      	bls.n	800b5f4 <NVIC_EncodePriority+0x30>
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	3b03      	subs	r3, #3
 800b5f2:	e000      	b.n	800b5f6 <NVIC_EncodePriority+0x32>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fc:	69bb      	ldr	r3, [r7, #24]
 800b5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b602:	43da      	mvns	r2, r3
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	401a      	ands	r2, r3
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b60c:	f04f 31ff 	mov.w	r1, #4294967295
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	fa01 f303 	lsl.w	r3, r1, r3
 800b616:	43d9      	mvns	r1, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b61c:	4313      	orrs	r3, r2
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3724      	adds	r7, #36	@ 0x24
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
	...

0800b62c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3b01      	subs	r3, #1
 800b638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b63c:	d301      	bcc.n	800b642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b63e:	2301      	movs	r3, #1
 800b640:	e00f      	b.n	800b662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b642:	4a0a      	ldr	r2, [pc, #40]	@ (800b66c <SysTick_Config+0x40>)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3b01      	subs	r3, #1
 800b648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b64a:	210f      	movs	r1, #15
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295
 800b650:	f7ff ff8e 	bl	800b570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b654:	4b05      	ldr	r3, [pc, #20]	@ (800b66c <SysTick_Config+0x40>)
 800b656:	2200      	movs	r2, #0
 800b658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b65a:	4b04      	ldr	r3, [pc, #16]	@ (800b66c <SysTick_Config+0x40>)
 800b65c:	2207      	movs	r2, #7
 800b65e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3708      	adds	r7, #8
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	e000e010 	.word	0xe000e010

0800b670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff ff29 	bl	800b4d0 <__NVIC_SetPriorityGrouping>
}
 800b67e:	bf00      	nop
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b086      	sub	sp, #24
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	4603      	mov	r3, r0
 800b68e:	60b9      	str	r1, [r7, #8]
 800b690:	607a      	str	r2, [r7, #4]
 800b692:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b694:	f7ff ff40 	bl	800b518 <__NVIC_GetPriorityGrouping>
 800b698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	68b9      	ldr	r1, [r7, #8]
 800b69e:	6978      	ldr	r0, [r7, #20]
 800b6a0:	f7ff ff90 	bl	800b5c4 <NVIC_EncodePriority>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7ff ff5f 	bl	800b570 <__NVIC_SetPriority>
}
 800b6b2:	bf00      	nop
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b082      	sub	sp, #8
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b6c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7ff ff33 	bl	800b534 <__NVIC_EnableIRQ>
}
 800b6ce:	bf00      	nop
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f7ff ffa4 	bl	800b62c <SysTick_Config>
 800b6e4:	4603      	mov	r3, r0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
	...

0800b6f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b6f4:	f3bf 8f5f 	dmb	sy
}
 800b6f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b6fa:	4b07      	ldr	r3, [pc, #28]	@ (800b718 <HAL_MPU_Disable+0x28>)
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6fe:	4a06      	ldr	r2, [pc, #24]	@ (800b718 <HAL_MPU_Disable+0x28>)
 800b700:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b704:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b706:	4b05      	ldr	r3, [pc, #20]	@ (800b71c <HAL_MPU_Disable+0x2c>)
 800b708:	2200      	movs	r2, #0
 800b70a:	605a      	str	r2, [r3, #4]
}
 800b70c:	bf00      	nop
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	e000ed00 	.word	0xe000ed00
 800b71c:	e000ed90 	.word	0xe000ed90

0800b720 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b728:	4a0b      	ldr	r2, [pc, #44]	@ (800b758 <HAL_MPU_Enable+0x38>)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f043 0301 	orr.w	r3, r3, #1
 800b730:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b732:	4b0a      	ldr	r3, [pc, #40]	@ (800b75c <HAL_MPU_Enable+0x3c>)
 800b734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b736:	4a09      	ldr	r2, [pc, #36]	@ (800b75c <HAL_MPU_Enable+0x3c>)
 800b738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b73c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b73e:	f3bf 8f4f 	dsb	sy
}
 800b742:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b744:	f3bf 8f6f 	isb	sy
}
 800b748:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b74a:	bf00      	nop
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	e000ed90 	.word	0xe000ed90
 800b75c:	e000ed00 	.word	0xe000ed00

0800b760 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	785a      	ldrb	r2, [r3, #1]
 800b76c:	4b1b      	ldr	r3, [pc, #108]	@ (800b7dc <HAL_MPU_ConfigRegion+0x7c>)
 800b76e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b770:	4b1a      	ldr	r3, [pc, #104]	@ (800b7dc <HAL_MPU_ConfigRegion+0x7c>)
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	4a19      	ldr	r2, [pc, #100]	@ (800b7dc <HAL_MPU_ConfigRegion+0x7c>)
 800b776:	f023 0301 	bic.w	r3, r3, #1
 800b77a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b77c:	4a17      	ldr	r2, [pc, #92]	@ (800b7dc <HAL_MPU_ConfigRegion+0x7c>)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	7b1b      	ldrb	r3, [r3, #12]
 800b788:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	7adb      	ldrb	r3, [r3, #11]
 800b78e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b790:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	7a9b      	ldrb	r3, [r3, #10]
 800b796:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b798:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	7b5b      	ldrb	r3, [r3, #13]
 800b79e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b7a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	7b9b      	ldrb	r3, [r3, #14]
 800b7a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b7a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	7bdb      	ldrb	r3, [r3, #15]
 800b7ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b7b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	7a5b      	ldrb	r3, [r3, #9]
 800b7b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b7b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	7a1b      	ldrb	r3, [r3, #8]
 800b7be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b7c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	7812      	ldrb	r2, [r2, #0]
 800b7c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b7c8:	4a04      	ldr	r2, [pc, #16]	@ (800b7dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b7ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b7cc:	6113      	str	r3, [r2, #16]
}
 800b7ce:	bf00      	nop
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	e000ed90 	.word	0xe000ed90

0800b7e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b7e8:	f7fd fec4 	bl	8009574 <HAL_GetTick>
 800b7ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e312      	b.n	800be1e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a66      	ldr	r2, [pc, #408]	@ (800b998 <HAL_DMA_Init+0x1b8>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d04a      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a65      	ldr	r2, [pc, #404]	@ (800b99c <HAL_DMA_Init+0x1bc>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d045      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a63      	ldr	r2, [pc, #396]	@ (800b9a0 <HAL_DMA_Init+0x1c0>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d040      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a62      	ldr	r2, [pc, #392]	@ (800b9a4 <HAL_DMA_Init+0x1c4>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d03b      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a60      	ldr	r2, [pc, #384]	@ (800b9a8 <HAL_DMA_Init+0x1c8>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d036      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a5f      	ldr	r2, [pc, #380]	@ (800b9ac <HAL_DMA_Init+0x1cc>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d031      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a5d      	ldr	r2, [pc, #372]	@ (800b9b0 <HAL_DMA_Init+0x1d0>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d02c      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a5c      	ldr	r2, [pc, #368]	@ (800b9b4 <HAL_DMA_Init+0x1d4>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d027      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a5a      	ldr	r2, [pc, #360]	@ (800b9b8 <HAL_DMA_Init+0x1d8>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d022      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a59      	ldr	r2, [pc, #356]	@ (800b9bc <HAL_DMA_Init+0x1dc>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d01d      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a57      	ldr	r2, [pc, #348]	@ (800b9c0 <HAL_DMA_Init+0x1e0>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d018      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a56      	ldr	r2, [pc, #344]	@ (800b9c4 <HAL_DMA_Init+0x1e4>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d013      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a54      	ldr	r2, [pc, #336]	@ (800b9c8 <HAL_DMA_Init+0x1e8>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d00e      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a53      	ldr	r2, [pc, #332]	@ (800b9cc <HAL_DMA_Init+0x1ec>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d009      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a51      	ldr	r2, [pc, #324]	@ (800b9d0 <HAL_DMA_Init+0x1f0>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d004      	beq.n	800b898 <HAL_DMA_Init+0xb8>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a50      	ldr	r2, [pc, #320]	@ (800b9d4 <HAL_DMA_Init+0x1f4>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d101      	bne.n	800b89c <HAL_DMA_Init+0xbc>
 800b898:	2301      	movs	r3, #1
 800b89a:	e000      	b.n	800b89e <HAL_DMA_Init+0xbe>
 800b89c:	2300      	movs	r3, #0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f000 813c 	beq.w	800bb1c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a37      	ldr	r2, [pc, #220]	@ (800b998 <HAL_DMA_Init+0x1b8>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d04a      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a36      	ldr	r2, [pc, #216]	@ (800b99c <HAL_DMA_Init+0x1bc>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d045      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a34      	ldr	r2, [pc, #208]	@ (800b9a0 <HAL_DMA_Init+0x1c0>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d040      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a33      	ldr	r2, [pc, #204]	@ (800b9a4 <HAL_DMA_Init+0x1c4>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d03b      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a31      	ldr	r2, [pc, #196]	@ (800b9a8 <HAL_DMA_Init+0x1c8>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d036      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a30      	ldr	r2, [pc, #192]	@ (800b9ac <HAL_DMA_Init+0x1cc>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d031      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a2e      	ldr	r2, [pc, #184]	@ (800b9b0 <HAL_DMA_Init+0x1d0>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d02c      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a2d      	ldr	r2, [pc, #180]	@ (800b9b4 <HAL_DMA_Init+0x1d4>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d027      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a2b      	ldr	r2, [pc, #172]	@ (800b9b8 <HAL_DMA_Init+0x1d8>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d022      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a2a      	ldr	r2, [pc, #168]	@ (800b9bc <HAL_DMA_Init+0x1dc>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d01d      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a28      	ldr	r2, [pc, #160]	@ (800b9c0 <HAL_DMA_Init+0x1e0>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d018      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a27      	ldr	r2, [pc, #156]	@ (800b9c4 <HAL_DMA_Init+0x1e4>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d013      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a25      	ldr	r2, [pc, #148]	@ (800b9c8 <HAL_DMA_Init+0x1e8>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d00e      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a24      	ldr	r2, [pc, #144]	@ (800b9cc <HAL_DMA_Init+0x1ec>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d009      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a22      	ldr	r2, [pc, #136]	@ (800b9d0 <HAL_DMA_Init+0x1f0>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d004      	beq.n	800b954 <HAL_DMA_Init+0x174>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a21      	ldr	r2, [pc, #132]	@ (800b9d4 <HAL_DMA_Init+0x1f4>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d108      	bne.n	800b966 <HAL_DMA_Init+0x186>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f022 0201 	bic.w	r2, r2, #1
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	e007      	b.n	800b976 <HAL_DMA_Init+0x196>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f022 0201 	bic.w	r2, r2, #1
 800b974:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b976:	e02f      	b.n	800b9d8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b978:	f7fd fdfc 	bl	8009574 <HAL_GetTick>
 800b97c:	4602      	mov	r2, r0
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	2b05      	cmp	r3, #5
 800b984:	d928      	bls.n	800b9d8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2220      	movs	r2, #32
 800b98a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2203      	movs	r2, #3
 800b990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e242      	b.n	800be1e <HAL_DMA_Init+0x63e>
 800b998:	40020010 	.word	0x40020010
 800b99c:	40020028 	.word	0x40020028
 800b9a0:	40020040 	.word	0x40020040
 800b9a4:	40020058 	.word	0x40020058
 800b9a8:	40020070 	.word	0x40020070
 800b9ac:	40020088 	.word	0x40020088
 800b9b0:	400200a0 	.word	0x400200a0
 800b9b4:	400200b8 	.word	0x400200b8
 800b9b8:	40020410 	.word	0x40020410
 800b9bc:	40020428 	.word	0x40020428
 800b9c0:	40020440 	.word	0x40020440
 800b9c4:	40020458 	.word	0x40020458
 800b9c8:	40020470 	.word	0x40020470
 800b9cc:	40020488 	.word	0x40020488
 800b9d0:	400204a0 	.word	0x400204a0
 800b9d4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f003 0301 	and.w	r3, r3, #1
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1c8      	bne.n	800b978 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	4b83      	ldr	r3, [pc, #524]	@ (800bc00 <HAL_DMA_Init+0x420>)
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800b9fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ba0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	699b      	ldr	r3, [r3, #24]
 800ba10:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ba16:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6a1b      	ldr	r3, [r3, #32]
 800ba1c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba28:	2b04      	cmp	r3, #4
 800ba2a:	d107      	bne.n	800ba3c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba34:	4313      	orrs	r3, r2
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	2b28      	cmp	r3, #40	@ 0x28
 800ba42:	d903      	bls.n	800ba4c <HAL_DMA_Init+0x26c>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba4a:	d91f      	bls.n	800ba8c <HAL_DMA_Init+0x2ac>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba52:	d903      	bls.n	800ba5c <HAL_DMA_Init+0x27c>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	2b42      	cmp	r3, #66	@ 0x42
 800ba5a:	d917      	bls.n	800ba8c <HAL_DMA_Init+0x2ac>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	2b46      	cmp	r3, #70	@ 0x46
 800ba62:	d903      	bls.n	800ba6c <HAL_DMA_Init+0x28c>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	2b48      	cmp	r3, #72	@ 0x48
 800ba6a:	d90f      	bls.n	800ba8c <HAL_DMA_Init+0x2ac>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	2b4e      	cmp	r3, #78	@ 0x4e
 800ba72:	d903      	bls.n	800ba7c <HAL_DMA_Init+0x29c>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	2b52      	cmp	r3, #82	@ 0x52
 800ba7a:	d907      	bls.n	800ba8c <HAL_DMA_Init+0x2ac>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	2b73      	cmp	r3, #115	@ 0x73
 800ba82:	d905      	bls.n	800ba90 <HAL_DMA_Init+0x2b0>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	2b77      	cmp	r3, #119	@ 0x77
 800ba8a:	d801      	bhi.n	800ba90 <HAL_DMA_Init+0x2b0>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e000      	b.n	800ba92 <HAL_DMA_Init+0x2b2>
 800ba90:	2300      	movs	r3, #0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d003      	beq.n	800ba9e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba9c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	695b      	ldr	r3, [r3, #20]
 800baac:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f023 0307 	bic.w	r3, r3, #7
 800bab4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	4313      	orrs	r3, r2
 800babe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac4:	2b04      	cmp	r3, #4
 800bac6:	d117      	bne.n	800baf8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bacc:	697a      	ldr	r2, [r7, #20]
 800bace:	4313      	orrs	r3, r2
 800bad0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00e      	beq.n	800baf8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f002 fb48 	bl	800e170 <DMA_CheckFifoParam>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d008      	beq.n	800baf8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2240      	movs	r2, #64	@ 0x40
 800baea:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e192      	b.n	800be1e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f002 fa83 	bl	800e00c <DMA_CalcBaseAndBitshift>
 800bb06:	4603      	mov	r3, r0
 800bb08:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb0e:	f003 031f 	and.w	r3, r3, #31
 800bb12:	223f      	movs	r2, #63	@ 0x3f
 800bb14:	409a      	lsls	r2, r3
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	609a      	str	r2, [r3, #8]
 800bb1a:	e0c8      	b.n	800bcae <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a38      	ldr	r2, [pc, #224]	@ (800bc04 <HAL_DMA_Init+0x424>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d022      	beq.n	800bb6c <HAL_DMA_Init+0x38c>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a37      	ldr	r2, [pc, #220]	@ (800bc08 <HAL_DMA_Init+0x428>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d01d      	beq.n	800bb6c <HAL_DMA_Init+0x38c>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a35      	ldr	r2, [pc, #212]	@ (800bc0c <HAL_DMA_Init+0x42c>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d018      	beq.n	800bb6c <HAL_DMA_Init+0x38c>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a34      	ldr	r2, [pc, #208]	@ (800bc10 <HAL_DMA_Init+0x430>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d013      	beq.n	800bb6c <HAL_DMA_Init+0x38c>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a32      	ldr	r2, [pc, #200]	@ (800bc14 <HAL_DMA_Init+0x434>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d00e      	beq.n	800bb6c <HAL_DMA_Init+0x38c>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a31      	ldr	r2, [pc, #196]	@ (800bc18 <HAL_DMA_Init+0x438>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d009      	beq.n	800bb6c <HAL_DMA_Init+0x38c>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a2f      	ldr	r2, [pc, #188]	@ (800bc1c <HAL_DMA_Init+0x43c>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d004      	beq.n	800bb6c <HAL_DMA_Init+0x38c>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a2e      	ldr	r2, [pc, #184]	@ (800bc20 <HAL_DMA_Init+0x440>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d101      	bne.n	800bb70 <HAL_DMA_Init+0x390>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e000      	b.n	800bb72 <HAL_DMA_Init+0x392>
 800bb70:	2300      	movs	r3, #0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 8092 	beq.w	800bc9c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a21      	ldr	r2, [pc, #132]	@ (800bc04 <HAL_DMA_Init+0x424>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d021      	beq.n	800bbc6 <HAL_DMA_Init+0x3e6>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a20      	ldr	r2, [pc, #128]	@ (800bc08 <HAL_DMA_Init+0x428>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d01c      	beq.n	800bbc6 <HAL_DMA_Init+0x3e6>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a1e      	ldr	r2, [pc, #120]	@ (800bc0c <HAL_DMA_Init+0x42c>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d017      	beq.n	800bbc6 <HAL_DMA_Init+0x3e6>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a1d      	ldr	r2, [pc, #116]	@ (800bc10 <HAL_DMA_Init+0x430>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d012      	beq.n	800bbc6 <HAL_DMA_Init+0x3e6>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4a1b      	ldr	r2, [pc, #108]	@ (800bc14 <HAL_DMA_Init+0x434>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d00d      	beq.n	800bbc6 <HAL_DMA_Init+0x3e6>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a1a      	ldr	r2, [pc, #104]	@ (800bc18 <HAL_DMA_Init+0x438>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d008      	beq.n	800bbc6 <HAL_DMA_Init+0x3e6>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a18      	ldr	r2, [pc, #96]	@ (800bc1c <HAL_DMA_Init+0x43c>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d003      	beq.n	800bbc6 <HAL_DMA_Init+0x3e6>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a17      	ldr	r2, [pc, #92]	@ (800bc20 <HAL_DMA_Init+0x440>)
 800bbc4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2202      	movs	r2, #2
 800bbca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	4b10      	ldr	r3, [pc, #64]	@ (800bc24 <HAL_DMA_Init+0x444>)
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	2b40      	cmp	r3, #64	@ 0x40
 800bbec:	d01c      	beq.n	800bc28 <HAL_DMA_Init+0x448>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	2b80      	cmp	r3, #128	@ 0x80
 800bbf4:	d102      	bne.n	800bbfc <HAL_DMA_Init+0x41c>
 800bbf6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bbfa:	e016      	b.n	800bc2a <HAL_DMA_Init+0x44a>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	e014      	b.n	800bc2a <HAL_DMA_Init+0x44a>
 800bc00:	fe10803f 	.word	0xfe10803f
 800bc04:	58025408 	.word	0x58025408
 800bc08:	5802541c 	.word	0x5802541c
 800bc0c:	58025430 	.word	0x58025430
 800bc10:	58025444 	.word	0x58025444
 800bc14:	58025458 	.word	0x58025458
 800bc18:	5802546c 	.word	0x5802546c
 800bc1c:	58025480 	.word	0x58025480
 800bc20:	58025494 	.word	0x58025494
 800bc24:	fffe000f 	.word	0xfffe000f
 800bc28:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	68d2      	ldr	r2, [r2, #12]
 800bc2e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bc30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bc38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bc40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bc48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	69db      	ldr	r3, [r3, #28]
 800bc4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bc50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bc58:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bc5a:	697a      	ldr	r2, [r7, #20]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	697a      	ldr	r2, [r7, #20]
 800bc66:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	4b6e      	ldr	r3, [pc, #440]	@ (800be28 <HAL_DMA_Init+0x648>)
 800bc70:	4413      	add	r3, r2
 800bc72:	4a6e      	ldr	r2, [pc, #440]	@ (800be2c <HAL_DMA_Init+0x64c>)
 800bc74:	fba2 2303 	umull	r2, r3, r2, r3
 800bc78:	091b      	lsrs	r3, r3, #4
 800bc7a:	009a      	lsls	r2, r3, #2
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f002 f9c3 	bl	800e00c <DMA_CalcBaseAndBitshift>
 800bc86:	4603      	mov	r3, r0
 800bc88:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc8e:	f003 031f 	and.w	r3, r3, #31
 800bc92:	2201      	movs	r2, #1
 800bc94:	409a      	lsls	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	605a      	str	r2, [r3, #4]
 800bc9a:	e008      	b.n	800bcae <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2240      	movs	r2, #64	@ 0x40
 800bca0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2203      	movs	r2, #3
 800bca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e0b7      	b.n	800be1e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a5f      	ldr	r2, [pc, #380]	@ (800be30 <HAL_DMA_Init+0x650>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d072      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a5d      	ldr	r2, [pc, #372]	@ (800be34 <HAL_DMA_Init+0x654>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d06d      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a5c      	ldr	r2, [pc, #368]	@ (800be38 <HAL_DMA_Init+0x658>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d068      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a5a      	ldr	r2, [pc, #360]	@ (800be3c <HAL_DMA_Init+0x65c>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d063      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a59      	ldr	r2, [pc, #356]	@ (800be40 <HAL_DMA_Init+0x660>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d05e      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a57      	ldr	r2, [pc, #348]	@ (800be44 <HAL_DMA_Init+0x664>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d059      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a56      	ldr	r2, [pc, #344]	@ (800be48 <HAL_DMA_Init+0x668>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d054      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a54      	ldr	r2, [pc, #336]	@ (800be4c <HAL_DMA_Init+0x66c>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d04f      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a53      	ldr	r2, [pc, #332]	@ (800be50 <HAL_DMA_Init+0x670>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d04a      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a51      	ldr	r2, [pc, #324]	@ (800be54 <HAL_DMA_Init+0x674>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d045      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a50      	ldr	r2, [pc, #320]	@ (800be58 <HAL_DMA_Init+0x678>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d040      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a4e      	ldr	r2, [pc, #312]	@ (800be5c <HAL_DMA_Init+0x67c>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d03b      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a4d      	ldr	r2, [pc, #308]	@ (800be60 <HAL_DMA_Init+0x680>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d036      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a4b      	ldr	r2, [pc, #300]	@ (800be64 <HAL_DMA_Init+0x684>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d031      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a4a      	ldr	r2, [pc, #296]	@ (800be68 <HAL_DMA_Init+0x688>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d02c      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a48      	ldr	r2, [pc, #288]	@ (800be6c <HAL_DMA_Init+0x68c>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d027      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a47      	ldr	r2, [pc, #284]	@ (800be70 <HAL_DMA_Init+0x690>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d022      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a45      	ldr	r2, [pc, #276]	@ (800be74 <HAL_DMA_Init+0x694>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d01d      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a44      	ldr	r2, [pc, #272]	@ (800be78 <HAL_DMA_Init+0x698>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d018      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a42      	ldr	r2, [pc, #264]	@ (800be7c <HAL_DMA_Init+0x69c>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d013      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a41      	ldr	r2, [pc, #260]	@ (800be80 <HAL_DMA_Init+0x6a0>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d00e      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a3f      	ldr	r2, [pc, #252]	@ (800be84 <HAL_DMA_Init+0x6a4>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d009      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a3e      	ldr	r2, [pc, #248]	@ (800be88 <HAL_DMA_Init+0x6a8>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d004      	beq.n	800bd9e <HAL_DMA_Init+0x5be>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a3c      	ldr	r2, [pc, #240]	@ (800be8c <HAL_DMA_Init+0x6ac>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d101      	bne.n	800bda2 <HAL_DMA_Init+0x5c2>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e000      	b.n	800bda4 <HAL_DMA_Init+0x5c4>
 800bda2:	2300      	movs	r3, #0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d032      	beq.n	800be0e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f002 fa5d 	bl	800e268 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	2b80      	cmp	r3, #128	@ 0x80
 800bdb4:	d102      	bne.n	800bdbc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685a      	ldr	r2, [r3, #4]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdc4:	b2d2      	uxtb	r2, r2
 800bdc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bdd0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d010      	beq.n	800bdfc <HAL_DMA_Init+0x61c>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	2b08      	cmp	r3, #8
 800bde0:	d80c      	bhi.n	800bdfc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f002 fada 	bl	800e39c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdec:	2200      	movs	r2, #0
 800bdee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bdf8:	605a      	str	r2, [r3, #4]
 800bdfa:	e008      	b.n	800be0e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3718      	adds	r7, #24
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	a7fdabf8 	.word	0xa7fdabf8
 800be2c:	cccccccd 	.word	0xcccccccd
 800be30:	40020010 	.word	0x40020010
 800be34:	40020028 	.word	0x40020028
 800be38:	40020040 	.word	0x40020040
 800be3c:	40020058 	.word	0x40020058
 800be40:	40020070 	.word	0x40020070
 800be44:	40020088 	.word	0x40020088
 800be48:	400200a0 	.word	0x400200a0
 800be4c:	400200b8 	.word	0x400200b8
 800be50:	40020410 	.word	0x40020410
 800be54:	40020428 	.word	0x40020428
 800be58:	40020440 	.word	0x40020440
 800be5c:	40020458 	.word	0x40020458
 800be60:	40020470 	.word	0x40020470
 800be64:	40020488 	.word	0x40020488
 800be68:	400204a0 	.word	0x400204a0
 800be6c:	400204b8 	.word	0x400204b8
 800be70:	58025408 	.word	0x58025408
 800be74:	5802541c 	.word	0x5802541c
 800be78:	58025430 	.word	0x58025430
 800be7c:	58025444 	.word	0x58025444
 800be80:	58025458 	.word	0x58025458
 800be84:	5802546c 	.word	0x5802546c
 800be88:	58025480 	.word	0x58025480
 800be8c:	58025494 	.word	0x58025494

0800be90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
 800be9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e226      	b.n	800c2fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d101      	bne.n	800beba <HAL_DMA_Start_IT+0x2a>
 800beb6:	2302      	movs	r3, #2
 800beb8:	e21f      	b.n	800c2fa <HAL_DMA_Start_IT+0x46a>
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2201      	movs	r2, #1
 800bebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b01      	cmp	r3, #1
 800becc:	f040 820a 	bne.w	800c2e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2202      	movs	r2, #2
 800bed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a68      	ldr	r2, [pc, #416]	@ (800c084 <HAL_DMA_Start_IT+0x1f4>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d04a      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a66      	ldr	r2, [pc, #408]	@ (800c088 <HAL_DMA_Start_IT+0x1f8>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d045      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a65      	ldr	r2, [pc, #404]	@ (800c08c <HAL_DMA_Start_IT+0x1fc>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d040      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a63      	ldr	r2, [pc, #396]	@ (800c090 <HAL_DMA_Start_IT+0x200>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d03b      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a62      	ldr	r2, [pc, #392]	@ (800c094 <HAL_DMA_Start_IT+0x204>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d036      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4a60      	ldr	r2, [pc, #384]	@ (800c098 <HAL_DMA_Start_IT+0x208>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d031      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a5f      	ldr	r2, [pc, #380]	@ (800c09c <HAL_DMA_Start_IT+0x20c>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d02c      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a5d      	ldr	r2, [pc, #372]	@ (800c0a0 <HAL_DMA_Start_IT+0x210>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d027      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a5c      	ldr	r2, [pc, #368]	@ (800c0a4 <HAL_DMA_Start_IT+0x214>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d022      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a5a      	ldr	r2, [pc, #360]	@ (800c0a8 <HAL_DMA_Start_IT+0x218>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d01d      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a59      	ldr	r2, [pc, #356]	@ (800c0ac <HAL_DMA_Start_IT+0x21c>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d018      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a57      	ldr	r2, [pc, #348]	@ (800c0b0 <HAL_DMA_Start_IT+0x220>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d013      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a56      	ldr	r2, [pc, #344]	@ (800c0b4 <HAL_DMA_Start_IT+0x224>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d00e      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a54      	ldr	r2, [pc, #336]	@ (800c0b8 <HAL_DMA_Start_IT+0x228>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d009      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a53      	ldr	r2, [pc, #332]	@ (800c0bc <HAL_DMA_Start_IT+0x22c>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d004      	beq.n	800bf7e <HAL_DMA_Start_IT+0xee>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a51      	ldr	r2, [pc, #324]	@ (800c0c0 <HAL_DMA_Start_IT+0x230>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d108      	bne.n	800bf90 <HAL_DMA_Start_IT+0x100>
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f022 0201 	bic.w	r2, r2, #1
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	e007      	b.n	800bfa0 <HAL_DMA_Start_IT+0x110>
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f022 0201 	bic.w	r2, r2, #1
 800bf9e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	68b9      	ldr	r1, [r7, #8]
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f001 fe84 	bl	800dcb4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a34      	ldr	r2, [pc, #208]	@ (800c084 <HAL_DMA_Start_IT+0x1f4>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d04a      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a33      	ldr	r2, [pc, #204]	@ (800c088 <HAL_DMA_Start_IT+0x1f8>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d045      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a31      	ldr	r2, [pc, #196]	@ (800c08c <HAL_DMA_Start_IT+0x1fc>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d040      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a30      	ldr	r2, [pc, #192]	@ (800c090 <HAL_DMA_Start_IT+0x200>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d03b      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a2e      	ldr	r2, [pc, #184]	@ (800c094 <HAL_DMA_Start_IT+0x204>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d036      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a2d      	ldr	r2, [pc, #180]	@ (800c098 <HAL_DMA_Start_IT+0x208>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d031      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a2b      	ldr	r2, [pc, #172]	@ (800c09c <HAL_DMA_Start_IT+0x20c>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d02c      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4a2a      	ldr	r2, [pc, #168]	@ (800c0a0 <HAL_DMA_Start_IT+0x210>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d027      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a28      	ldr	r2, [pc, #160]	@ (800c0a4 <HAL_DMA_Start_IT+0x214>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d022      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a27      	ldr	r2, [pc, #156]	@ (800c0a8 <HAL_DMA_Start_IT+0x218>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d01d      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a25      	ldr	r2, [pc, #148]	@ (800c0ac <HAL_DMA_Start_IT+0x21c>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d018      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a24      	ldr	r2, [pc, #144]	@ (800c0b0 <HAL_DMA_Start_IT+0x220>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d013      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a22      	ldr	r2, [pc, #136]	@ (800c0b4 <HAL_DMA_Start_IT+0x224>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d00e      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a21      	ldr	r2, [pc, #132]	@ (800c0b8 <HAL_DMA_Start_IT+0x228>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d009      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a1f      	ldr	r2, [pc, #124]	@ (800c0bc <HAL_DMA_Start_IT+0x22c>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d004      	beq.n	800c04c <HAL_DMA_Start_IT+0x1bc>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a1e      	ldr	r2, [pc, #120]	@ (800c0c0 <HAL_DMA_Start_IT+0x230>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d101      	bne.n	800c050 <HAL_DMA_Start_IT+0x1c0>
 800c04c:	2301      	movs	r3, #1
 800c04e:	e000      	b.n	800c052 <HAL_DMA_Start_IT+0x1c2>
 800c050:	2300      	movs	r3, #0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d036      	beq.n	800c0c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f023 021e 	bic.w	r2, r3, #30
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f042 0216 	orr.w	r2, r2, #22
 800c068:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d03e      	beq.n	800c0f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f042 0208 	orr.w	r2, r2, #8
 800c080:	601a      	str	r2, [r3, #0]
 800c082:	e035      	b.n	800c0f0 <HAL_DMA_Start_IT+0x260>
 800c084:	40020010 	.word	0x40020010
 800c088:	40020028 	.word	0x40020028
 800c08c:	40020040 	.word	0x40020040
 800c090:	40020058 	.word	0x40020058
 800c094:	40020070 	.word	0x40020070
 800c098:	40020088 	.word	0x40020088
 800c09c:	400200a0 	.word	0x400200a0
 800c0a0:	400200b8 	.word	0x400200b8
 800c0a4:	40020410 	.word	0x40020410
 800c0a8:	40020428 	.word	0x40020428
 800c0ac:	40020440 	.word	0x40020440
 800c0b0:	40020458 	.word	0x40020458
 800c0b4:	40020470 	.word	0x40020470
 800c0b8:	40020488 	.word	0x40020488
 800c0bc:	400204a0 	.word	0x400204a0
 800c0c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f023 020e 	bic.w	r2, r3, #14
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f042 020a 	orr.w	r2, r2, #10
 800c0d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d007      	beq.n	800c0f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f042 0204 	orr.w	r2, r2, #4
 800c0ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a83      	ldr	r2, [pc, #524]	@ (800c304 <HAL_DMA_Start_IT+0x474>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d072      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a82      	ldr	r2, [pc, #520]	@ (800c308 <HAL_DMA_Start_IT+0x478>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d06d      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a80      	ldr	r2, [pc, #512]	@ (800c30c <HAL_DMA_Start_IT+0x47c>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d068      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a7f      	ldr	r2, [pc, #508]	@ (800c310 <HAL_DMA_Start_IT+0x480>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d063      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a7d      	ldr	r2, [pc, #500]	@ (800c314 <HAL_DMA_Start_IT+0x484>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d05e      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a7c      	ldr	r2, [pc, #496]	@ (800c318 <HAL_DMA_Start_IT+0x488>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d059      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a7a      	ldr	r2, [pc, #488]	@ (800c31c <HAL_DMA_Start_IT+0x48c>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d054      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a79      	ldr	r2, [pc, #484]	@ (800c320 <HAL_DMA_Start_IT+0x490>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d04f      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a77      	ldr	r2, [pc, #476]	@ (800c324 <HAL_DMA_Start_IT+0x494>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d04a      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a76      	ldr	r2, [pc, #472]	@ (800c328 <HAL_DMA_Start_IT+0x498>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d045      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a74      	ldr	r2, [pc, #464]	@ (800c32c <HAL_DMA_Start_IT+0x49c>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d040      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a73      	ldr	r2, [pc, #460]	@ (800c330 <HAL_DMA_Start_IT+0x4a0>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d03b      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a71      	ldr	r2, [pc, #452]	@ (800c334 <HAL_DMA_Start_IT+0x4a4>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d036      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a70      	ldr	r2, [pc, #448]	@ (800c338 <HAL_DMA_Start_IT+0x4a8>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d031      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a6e      	ldr	r2, [pc, #440]	@ (800c33c <HAL_DMA_Start_IT+0x4ac>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d02c      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a6d      	ldr	r2, [pc, #436]	@ (800c340 <HAL_DMA_Start_IT+0x4b0>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d027      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a6b      	ldr	r2, [pc, #428]	@ (800c344 <HAL_DMA_Start_IT+0x4b4>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d022      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a6a      	ldr	r2, [pc, #424]	@ (800c348 <HAL_DMA_Start_IT+0x4b8>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d01d      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a68      	ldr	r2, [pc, #416]	@ (800c34c <HAL_DMA_Start_IT+0x4bc>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d018      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a67      	ldr	r2, [pc, #412]	@ (800c350 <HAL_DMA_Start_IT+0x4c0>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d013      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a65      	ldr	r2, [pc, #404]	@ (800c354 <HAL_DMA_Start_IT+0x4c4>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d00e      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a64      	ldr	r2, [pc, #400]	@ (800c358 <HAL_DMA_Start_IT+0x4c8>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d009      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a62      	ldr	r2, [pc, #392]	@ (800c35c <HAL_DMA_Start_IT+0x4cc>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d004      	beq.n	800c1e0 <HAL_DMA_Start_IT+0x350>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a61      	ldr	r2, [pc, #388]	@ (800c360 <HAL_DMA_Start_IT+0x4d0>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d101      	bne.n	800c1e4 <HAL_DMA_Start_IT+0x354>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e000      	b.n	800c1e6 <HAL_DMA_Start_IT+0x356>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d01a      	beq.n	800c220 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d007      	beq.n	800c208 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c202:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c206:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d007      	beq.n	800c220 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c21a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c21e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a37      	ldr	r2, [pc, #220]	@ (800c304 <HAL_DMA_Start_IT+0x474>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d04a      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a36      	ldr	r2, [pc, #216]	@ (800c308 <HAL_DMA_Start_IT+0x478>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d045      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a34      	ldr	r2, [pc, #208]	@ (800c30c <HAL_DMA_Start_IT+0x47c>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d040      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a33      	ldr	r2, [pc, #204]	@ (800c310 <HAL_DMA_Start_IT+0x480>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d03b      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a31      	ldr	r2, [pc, #196]	@ (800c314 <HAL_DMA_Start_IT+0x484>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d036      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a30      	ldr	r2, [pc, #192]	@ (800c318 <HAL_DMA_Start_IT+0x488>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d031      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a2e      	ldr	r2, [pc, #184]	@ (800c31c <HAL_DMA_Start_IT+0x48c>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d02c      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a2d      	ldr	r2, [pc, #180]	@ (800c320 <HAL_DMA_Start_IT+0x490>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d027      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a2b      	ldr	r2, [pc, #172]	@ (800c324 <HAL_DMA_Start_IT+0x494>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d022      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a2a      	ldr	r2, [pc, #168]	@ (800c328 <HAL_DMA_Start_IT+0x498>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d01d      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a28      	ldr	r2, [pc, #160]	@ (800c32c <HAL_DMA_Start_IT+0x49c>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d018      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4a27      	ldr	r2, [pc, #156]	@ (800c330 <HAL_DMA_Start_IT+0x4a0>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d013      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a25      	ldr	r2, [pc, #148]	@ (800c334 <HAL_DMA_Start_IT+0x4a4>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d00e      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	4a24      	ldr	r2, [pc, #144]	@ (800c338 <HAL_DMA_Start_IT+0x4a8>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d009      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a22      	ldr	r2, [pc, #136]	@ (800c33c <HAL_DMA_Start_IT+0x4ac>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d004      	beq.n	800c2c0 <HAL_DMA_Start_IT+0x430>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a21      	ldr	r2, [pc, #132]	@ (800c340 <HAL_DMA_Start_IT+0x4b0>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d108      	bne.n	800c2d2 <HAL_DMA_Start_IT+0x442>
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f042 0201 	orr.w	r2, r2, #1
 800c2ce:	601a      	str	r2, [r3, #0]
 800c2d0:	e012      	b.n	800c2f8 <HAL_DMA_Start_IT+0x468>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f042 0201 	orr.w	r2, r2, #1
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	e009      	b.n	800c2f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	40020010 	.word	0x40020010
 800c308:	40020028 	.word	0x40020028
 800c30c:	40020040 	.word	0x40020040
 800c310:	40020058 	.word	0x40020058
 800c314:	40020070 	.word	0x40020070
 800c318:	40020088 	.word	0x40020088
 800c31c:	400200a0 	.word	0x400200a0
 800c320:	400200b8 	.word	0x400200b8
 800c324:	40020410 	.word	0x40020410
 800c328:	40020428 	.word	0x40020428
 800c32c:	40020440 	.word	0x40020440
 800c330:	40020458 	.word	0x40020458
 800c334:	40020470 	.word	0x40020470
 800c338:	40020488 	.word	0x40020488
 800c33c:	400204a0 	.word	0x400204a0
 800c340:	400204b8 	.word	0x400204b8
 800c344:	58025408 	.word	0x58025408
 800c348:	5802541c 	.word	0x5802541c
 800c34c:	58025430 	.word	0x58025430
 800c350:	58025444 	.word	0x58025444
 800c354:	58025458 	.word	0x58025458
 800c358:	5802546c 	.word	0x5802546c
 800c35c:	58025480 	.word	0x58025480
 800c360:	58025494 	.word	0x58025494

0800c364 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c36c:	f7fd f902 	bl	8009574 <HAL_GetTick>
 800c370:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	e2dc      	b.n	800c936 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c382:	b2db      	uxtb	r3, r3
 800c384:	2b02      	cmp	r3, #2
 800c386:	d008      	beq.n	800c39a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2280      	movs	r2, #128	@ 0x80
 800c38c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	e2cd      	b.n	800c936 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a76      	ldr	r2, [pc, #472]	@ (800c578 <HAL_DMA_Abort+0x214>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d04a      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a74      	ldr	r2, [pc, #464]	@ (800c57c <HAL_DMA_Abort+0x218>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d045      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a73      	ldr	r2, [pc, #460]	@ (800c580 <HAL_DMA_Abort+0x21c>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d040      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a71      	ldr	r2, [pc, #452]	@ (800c584 <HAL_DMA_Abort+0x220>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d03b      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a70      	ldr	r2, [pc, #448]	@ (800c588 <HAL_DMA_Abort+0x224>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d036      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a6e      	ldr	r2, [pc, #440]	@ (800c58c <HAL_DMA_Abort+0x228>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d031      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a6d      	ldr	r2, [pc, #436]	@ (800c590 <HAL_DMA_Abort+0x22c>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d02c      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a6b      	ldr	r2, [pc, #428]	@ (800c594 <HAL_DMA_Abort+0x230>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d027      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a6a      	ldr	r2, [pc, #424]	@ (800c598 <HAL_DMA_Abort+0x234>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d022      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a68      	ldr	r2, [pc, #416]	@ (800c59c <HAL_DMA_Abort+0x238>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d01d      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a67      	ldr	r2, [pc, #412]	@ (800c5a0 <HAL_DMA_Abort+0x23c>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d018      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a65      	ldr	r2, [pc, #404]	@ (800c5a4 <HAL_DMA_Abort+0x240>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d013      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a64      	ldr	r2, [pc, #400]	@ (800c5a8 <HAL_DMA_Abort+0x244>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d00e      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a62      	ldr	r2, [pc, #392]	@ (800c5ac <HAL_DMA_Abort+0x248>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d009      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a61      	ldr	r2, [pc, #388]	@ (800c5b0 <HAL_DMA_Abort+0x24c>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d004      	beq.n	800c43a <HAL_DMA_Abort+0xd6>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a5f      	ldr	r2, [pc, #380]	@ (800c5b4 <HAL_DMA_Abort+0x250>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d101      	bne.n	800c43e <HAL_DMA_Abort+0xda>
 800c43a:	2301      	movs	r3, #1
 800c43c:	e000      	b.n	800c440 <HAL_DMA_Abort+0xdc>
 800c43e:	2300      	movs	r3, #0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d013      	beq.n	800c46c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f022 021e 	bic.w	r2, r2, #30
 800c452:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	695a      	ldr	r2, [r3, #20]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c462:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	617b      	str	r3, [r7, #20]
 800c46a:	e00a      	b.n	800c482 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f022 020e 	bic.w	r2, r2, #14
 800c47a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a3c      	ldr	r2, [pc, #240]	@ (800c578 <HAL_DMA_Abort+0x214>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d072      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a3a      	ldr	r2, [pc, #232]	@ (800c57c <HAL_DMA_Abort+0x218>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d06d      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a39      	ldr	r2, [pc, #228]	@ (800c580 <HAL_DMA_Abort+0x21c>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d068      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a37      	ldr	r2, [pc, #220]	@ (800c584 <HAL_DMA_Abort+0x220>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d063      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a36      	ldr	r2, [pc, #216]	@ (800c588 <HAL_DMA_Abort+0x224>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d05e      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a34      	ldr	r2, [pc, #208]	@ (800c58c <HAL_DMA_Abort+0x228>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d059      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a33      	ldr	r2, [pc, #204]	@ (800c590 <HAL_DMA_Abort+0x22c>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d054      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a31      	ldr	r2, [pc, #196]	@ (800c594 <HAL_DMA_Abort+0x230>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d04f      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a30      	ldr	r2, [pc, #192]	@ (800c598 <HAL_DMA_Abort+0x234>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d04a      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a2e      	ldr	r2, [pc, #184]	@ (800c59c <HAL_DMA_Abort+0x238>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d045      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a2d      	ldr	r2, [pc, #180]	@ (800c5a0 <HAL_DMA_Abort+0x23c>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d040      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a2b      	ldr	r2, [pc, #172]	@ (800c5a4 <HAL_DMA_Abort+0x240>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d03b      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a2a      	ldr	r2, [pc, #168]	@ (800c5a8 <HAL_DMA_Abort+0x244>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d036      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a28      	ldr	r2, [pc, #160]	@ (800c5ac <HAL_DMA_Abort+0x248>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d031      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a27      	ldr	r2, [pc, #156]	@ (800c5b0 <HAL_DMA_Abort+0x24c>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d02c      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a25      	ldr	r2, [pc, #148]	@ (800c5b4 <HAL_DMA_Abort+0x250>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d027      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a24      	ldr	r2, [pc, #144]	@ (800c5b8 <HAL_DMA_Abort+0x254>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d022      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a22      	ldr	r2, [pc, #136]	@ (800c5bc <HAL_DMA_Abort+0x258>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d01d      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a21      	ldr	r2, [pc, #132]	@ (800c5c0 <HAL_DMA_Abort+0x25c>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d018      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a1f      	ldr	r2, [pc, #124]	@ (800c5c4 <HAL_DMA_Abort+0x260>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d013      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	4a1e      	ldr	r2, [pc, #120]	@ (800c5c8 <HAL_DMA_Abort+0x264>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d00e      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a1c      	ldr	r2, [pc, #112]	@ (800c5cc <HAL_DMA_Abort+0x268>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d009      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a1b      	ldr	r2, [pc, #108]	@ (800c5d0 <HAL_DMA_Abort+0x26c>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d004      	beq.n	800c572 <HAL_DMA_Abort+0x20e>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a19      	ldr	r2, [pc, #100]	@ (800c5d4 <HAL_DMA_Abort+0x270>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d132      	bne.n	800c5d8 <HAL_DMA_Abort+0x274>
 800c572:	2301      	movs	r3, #1
 800c574:	e031      	b.n	800c5da <HAL_DMA_Abort+0x276>
 800c576:	bf00      	nop
 800c578:	40020010 	.word	0x40020010
 800c57c:	40020028 	.word	0x40020028
 800c580:	40020040 	.word	0x40020040
 800c584:	40020058 	.word	0x40020058
 800c588:	40020070 	.word	0x40020070
 800c58c:	40020088 	.word	0x40020088
 800c590:	400200a0 	.word	0x400200a0
 800c594:	400200b8 	.word	0x400200b8
 800c598:	40020410 	.word	0x40020410
 800c59c:	40020428 	.word	0x40020428
 800c5a0:	40020440 	.word	0x40020440
 800c5a4:	40020458 	.word	0x40020458
 800c5a8:	40020470 	.word	0x40020470
 800c5ac:	40020488 	.word	0x40020488
 800c5b0:	400204a0 	.word	0x400204a0
 800c5b4:	400204b8 	.word	0x400204b8
 800c5b8:	58025408 	.word	0x58025408
 800c5bc:	5802541c 	.word	0x5802541c
 800c5c0:	58025430 	.word	0x58025430
 800c5c4:	58025444 	.word	0x58025444
 800c5c8:	58025458 	.word	0x58025458
 800c5cc:	5802546c 	.word	0x5802546c
 800c5d0:	58025480 	.word	0x58025480
 800c5d4:	58025494 	.word	0x58025494
 800c5d8:	2300      	movs	r3, #0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d007      	beq.n	800c5ee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c5e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a6d      	ldr	r2, [pc, #436]	@ (800c7a8 <HAL_DMA_Abort+0x444>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d04a      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a6b      	ldr	r2, [pc, #428]	@ (800c7ac <HAL_DMA_Abort+0x448>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d045      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a6a      	ldr	r2, [pc, #424]	@ (800c7b0 <HAL_DMA_Abort+0x44c>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d040      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a68      	ldr	r2, [pc, #416]	@ (800c7b4 <HAL_DMA_Abort+0x450>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d03b      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a67      	ldr	r2, [pc, #412]	@ (800c7b8 <HAL_DMA_Abort+0x454>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d036      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a65      	ldr	r2, [pc, #404]	@ (800c7bc <HAL_DMA_Abort+0x458>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d031      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a64      	ldr	r2, [pc, #400]	@ (800c7c0 <HAL_DMA_Abort+0x45c>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d02c      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a62      	ldr	r2, [pc, #392]	@ (800c7c4 <HAL_DMA_Abort+0x460>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d027      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a61      	ldr	r2, [pc, #388]	@ (800c7c8 <HAL_DMA_Abort+0x464>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d022      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a5f      	ldr	r2, [pc, #380]	@ (800c7cc <HAL_DMA_Abort+0x468>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d01d      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a5e      	ldr	r2, [pc, #376]	@ (800c7d0 <HAL_DMA_Abort+0x46c>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d018      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a5c      	ldr	r2, [pc, #368]	@ (800c7d4 <HAL_DMA_Abort+0x470>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d013      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a5b      	ldr	r2, [pc, #364]	@ (800c7d8 <HAL_DMA_Abort+0x474>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d00e      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a59      	ldr	r2, [pc, #356]	@ (800c7dc <HAL_DMA_Abort+0x478>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d009      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a58      	ldr	r2, [pc, #352]	@ (800c7e0 <HAL_DMA_Abort+0x47c>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d004      	beq.n	800c68e <HAL_DMA_Abort+0x32a>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a56      	ldr	r2, [pc, #344]	@ (800c7e4 <HAL_DMA_Abort+0x480>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d108      	bne.n	800c6a0 <HAL_DMA_Abort+0x33c>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f022 0201 	bic.w	r2, r2, #1
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	e007      	b.n	800c6b0 <HAL_DMA_Abort+0x34c>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f022 0201 	bic.w	r2, r2, #1
 800c6ae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c6b0:	e013      	b.n	800c6da <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c6b2:	f7fc ff5f 	bl	8009574 <HAL_GetTick>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	2b05      	cmp	r3, #5
 800c6be:	d90c      	bls.n	800c6da <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2220      	movs	r2, #32
 800c6c4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2203      	movs	r2, #3
 800c6ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e12d      	b.n	800c936 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 0301 	and.w	r3, r3, #1
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1e5      	bne.n	800c6b2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a2f      	ldr	r2, [pc, #188]	@ (800c7a8 <HAL_DMA_Abort+0x444>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d04a      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a2d      	ldr	r2, [pc, #180]	@ (800c7ac <HAL_DMA_Abort+0x448>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d045      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a2c      	ldr	r2, [pc, #176]	@ (800c7b0 <HAL_DMA_Abort+0x44c>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d040      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a2a      	ldr	r2, [pc, #168]	@ (800c7b4 <HAL_DMA_Abort+0x450>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d03b      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a29      	ldr	r2, [pc, #164]	@ (800c7b8 <HAL_DMA_Abort+0x454>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d036      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a27      	ldr	r2, [pc, #156]	@ (800c7bc <HAL_DMA_Abort+0x458>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d031      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a26      	ldr	r2, [pc, #152]	@ (800c7c0 <HAL_DMA_Abort+0x45c>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d02c      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a24      	ldr	r2, [pc, #144]	@ (800c7c4 <HAL_DMA_Abort+0x460>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d027      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a23      	ldr	r2, [pc, #140]	@ (800c7c8 <HAL_DMA_Abort+0x464>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d022      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a21      	ldr	r2, [pc, #132]	@ (800c7cc <HAL_DMA_Abort+0x468>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d01d      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a20      	ldr	r2, [pc, #128]	@ (800c7d0 <HAL_DMA_Abort+0x46c>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d018      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a1e      	ldr	r2, [pc, #120]	@ (800c7d4 <HAL_DMA_Abort+0x470>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d013      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a1d      	ldr	r2, [pc, #116]	@ (800c7d8 <HAL_DMA_Abort+0x474>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d00e      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a1b      	ldr	r2, [pc, #108]	@ (800c7dc <HAL_DMA_Abort+0x478>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d009      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a1a      	ldr	r2, [pc, #104]	@ (800c7e0 <HAL_DMA_Abort+0x47c>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d004      	beq.n	800c786 <HAL_DMA_Abort+0x422>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a18      	ldr	r2, [pc, #96]	@ (800c7e4 <HAL_DMA_Abort+0x480>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d101      	bne.n	800c78a <HAL_DMA_Abort+0x426>
 800c786:	2301      	movs	r3, #1
 800c788:	e000      	b.n	800c78c <HAL_DMA_Abort+0x428>
 800c78a:	2300      	movs	r3, #0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d02b      	beq.n	800c7e8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c794:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c79a:	f003 031f 	and.w	r3, r3, #31
 800c79e:	223f      	movs	r2, #63	@ 0x3f
 800c7a0:	409a      	lsls	r2, r3
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	609a      	str	r2, [r3, #8]
 800c7a6:	e02a      	b.n	800c7fe <HAL_DMA_Abort+0x49a>
 800c7a8:	40020010 	.word	0x40020010
 800c7ac:	40020028 	.word	0x40020028
 800c7b0:	40020040 	.word	0x40020040
 800c7b4:	40020058 	.word	0x40020058
 800c7b8:	40020070 	.word	0x40020070
 800c7bc:	40020088 	.word	0x40020088
 800c7c0:	400200a0 	.word	0x400200a0
 800c7c4:	400200b8 	.word	0x400200b8
 800c7c8:	40020410 	.word	0x40020410
 800c7cc:	40020428 	.word	0x40020428
 800c7d0:	40020440 	.word	0x40020440
 800c7d4:	40020458 	.word	0x40020458
 800c7d8:	40020470 	.word	0x40020470
 800c7dc:	40020488 	.word	0x40020488
 800c7e0:	400204a0 	.word	0x400204a0
 800c7e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7ec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7f2:	f003 031f 	and.w	r3, r3, #31
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	409a      	lsls	r2, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a4f      	ldr	r2, [pc, #316]	@ (800c940 <HAL_DMA_Abort+0x5dc>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d072      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a4d      	ldr	r2, [pc, #308]	@ (800c944 <HAL_DMA_Abort+0x5e0>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d06d      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a4c      	ldr	r2, [pc, #304]	@ (800c948 <HAL_DMA_Abort+0x5e4>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d068      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a4a      	ldr	r2, [pc, #296]	@ (800c94c <HAL_DMA_Abort+0x5e8>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d063      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a49      	ldr	r2, [pc, #292]	@ (800c950 <HAL_DMA_Abort+0x5ec>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d05e      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a47      	ldr	r2, [pc, #284]	@ (800c954 <HAL_DMA_Abort+0x5f0>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d059      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a46      	ldr	r2, [pc, #280]	@ (800c958 <HAL_DMA_Abort+0x5f4>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d054      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a44      	ldr	r2, [pc, #272]	@ (800c95c <HAL_DMA_Abort+0x5f8>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d04f      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4a43      	ldr	r2, [pc, #268]	@ (800c960 <HAL_DMA_Abort+0x5fc>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d04a      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a41      	ldr	r2, [pc, #260]	@ (800c964 <HAL_DMA_Abort+0x600>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d045      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a40      	ldr	r2, [pc, #256]	@ (800c968 <HAL_DMA_Abort+0x604>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d040      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a3e      	ldr	r2, [pc, #248]	@ (800c96c <HAL_DMA_Abort+0x608>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d03b      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a3d      	ldr	r2, [pc, #244]	@ (800c970 <HAL_DMA_Abort+0x60c>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d036      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a3b      	ldr	r2, [pc, #236]	@ (800c974 <HAL_DMA_Abort+0x610>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d031      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a3a      	ldr	r2, [pc, #232]	@ (800c978 <HAL_DMA_Abort+0x614>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d02c      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a38      	ldr	r2, [pc, #224]	@ (800c97c <HAL_DMA_Abort+0x618>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d027      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a37      	ldr	r2, [pc, #220]	@ (800c980 <HAL_DMA_Abort+0x61c>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d022      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a35      	ldr	r2, [pc, #212]	@ (800c984 <HAL_DMA_Abort+0x620>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d01d      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a34      	ldr	r2, [pc, #208]	@ (800c988 <HAL_DMA_Abort+0x624>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d018      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a32      	ldr	r2, [pc, #200]	@ (800c98c <HAL_DMA_Abort+0x628>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d013      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a31      	ldr	r2, [pc, #196]	@ (800c990 <HAL_DMA_Abort+0x62c>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d00e      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a2f      	ldr	r2, [pc, #188]	@ (800c994 <HAL_DMA_Abort+0x630>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d009      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a2e      	ldr	r2, [pc, #184]	@ (800c998 <HAL_DMA_Abort+0x634>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d004      	beq.n	800c8ee <HAL_DMA_Abort+0x58a>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a2c      	ldr	r2, [pc, #176]	@ (800c99c <HAL_DMA_Abort+0x638>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d101      	bne.n	800c8f2 <HAL_DMA_Abort+0x58e>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e000      	b.n	800c8f4 <HAL_DMA_Abort+0x590>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d015      	beq.n	800c924 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c900:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00c      	beq.n	800c924 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c914:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c918:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c922:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3718      	adds	r7, #24
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	40020010 	.word	0x40020010
 800c944:	40020028 	.word	0x40020028
 800c948:	40020040 	.word	0x40020040
 800c94c:	40020058 	.word	0x40020058
 800c950:	40020070 	.word	0x40020070
 800c954:	40020088 	.word	0x40020088
 800c958:	400200a0 	.word	0x400200a0
 800c95c:	400200b8 	.word	0x400200b8
 800c960:	40020410 	.word	0x40020410
 800c964:	40020428 	.word	0x40020428
 800c968:	40020440 	.word	0x40020440
 800c96c:	40020458 	.word	0x40020458
 800c970:	40020470 	.word	0x40020470
 800c974:	40020488 	.word	0x40020488
 800c978:	400204a0 	.word	0x400204a0
 800c97c:	400204b8 	.word	0x400204b8
 800c980:	58025408 	.word	0x58025408
 800c984:	5802541c 	.word	0x5802541c
 800c988:	58025430 	.word	0x58025430
 800c98c:	58025444 	.word	0x58025444
 800c990:	58025458 	.word	0x58025458
 800c994:	5802546c 	.word	0x5802546c
 800c998:	58025480 	.word	0x58025480
 800c99c:	58025494 	.word	0x58025494

0800c9a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d101      	bne.n	800c9b2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e237      	b.n	800ce22 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d004      	beq.n	800c9c8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2280      	movs	r2, #128	@ 0x80
 800c9c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e22c      	b.n	800ce22 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a5c      	ldr	r2, [pc, #368]	@ (800cb40 <HAL_DMA_Abort_IT+0x1a0>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d04a      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a5b      	ldr	r2, [pc, #364]	@ (800cb44 <HAL_DMA_Abort_IT+0x1a4>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d045      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a59      	ldr	r2, [pc, #356]	@ (800cb48 <HAL_DMA_Abort_IT+0x1a8>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d040      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a58      	ldr	r2, [pc, #352]	@ (800cb4c <HAL_DMA_Abort_IT+0x1ac>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d03b      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a56      	ldr	r2, [pc, #344]	@ (800cb50 <HAL_DMA_Abort_IT+0x1b0>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d036      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a55      	ldr	r2, [pc, #340]	@ (800cb54 <HAL_DMA_Abort_IT+0x1b4>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d031      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a53      	ldr	r2, [pc, #332]	@ (800cb58 <HAL_DMA_Abort_IT+0x1b8>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d02c      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a52      	ldr	r2, [pc, #328]	@ (800cb5c <HAL_DMA_Abort_IT+0x1bc>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d027      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a50      	ldr	r2, [pc, #320]	@ (800cb60 <HAL_DMA_Abort_IT+0x1c0>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d022      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a4f      	ldr	r2, [pc, #316]	@ (800cb64 <HAL_DMA_Abort_IT+0x1c4>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d01d      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a4d      	ldr	r2, [pc, #308]	@ (800cb68 <HAL_DMA_Abort_IT+0x1c8>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d018      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a4c      	ldr	r2, [pc, #304]	@ (800cb6c <HAL_DMA_Abort_IT+0x1cc>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d013      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a4a      	ldr	r2, [pc, #296]	@ (800cb70 <HAL_DMA_Abort_IT+0x1d0>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d00e      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	4a49      	ldr	r2, [pc, #292]	@ (800cb74 <HAL_DMA_Abort_IT+0x1d4>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d009      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a47      	ldr	r2, [pc, #284]	@ (800cb78 <HAL_DMA_Abort_IT+0x1d8>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d004      	beq.n	800ca68 <HAL_DMA_Abort_IT+0xc8>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a46      	ldr	r2, [pc, #280]	@ (800cb7c <HAL_DMA_Abort_IT+0x1dc>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d101      	bne.n	800ca6c <HAL_DMA_Abort_IT+0xcc>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e000      	b.n	800ca6e <HAL_DMA_Abort_IT+0xce>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f000 8086 	beq.w	800cb80 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2204      	movs	r2, #4
 800ca78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a2f      	ldr	r2, [pc, #188]	@ (800cb40 <HAL_DMA_Abort_IT+0x1a0>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d04a      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a2e      	ldr	r2, [pc, #184]	@ (800cb44 <HAL_DMA_Abort_IT+0x1a4>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d045      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a2c      	ldr	r2, [pc, #176]	@ (800cb48 <HAL_DMA_Abort_IT+0x1a8>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d040      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a2b      	ldr	r2, [pc, #172]	@ (800cb4c <HAL_DMA_Abort_IT+0x1ac>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d03b      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a29      	ldr	r2, [pc, #164]	@ (800cb50 <HAL_DMA_Abort_IT+0x1b0>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d036      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a28      	ldr	r2, [pc, #160]	@ (800cb54 <HAL_DMA_Abort_IT+0x1b4>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d031      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a26      	ldr	r2, [pc, #152]	@ (800cb58 <HAL_DMA_Abort_IT+0x1b8>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d02c      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a25      	ldr	r2, [pc, #148]	@ (800cb5c <HAL_DMA_Abort_IT+0x1bc>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d027      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a23      	ldr	r2, [pc, #140]	@ (800cb60 <HAL_DMA_Abort_IT+0x1c0>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d022      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a22      	ldr	r2, [pc, #136]	@ (800cb64 <HAL_DMA_Abort_IT+0x1c4>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d01d      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a20      	ldr	r2, [pc, #128]	@ (800cb68 <HAL_DMA_Abort_IT+0x1c8>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d018      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a1f      	ldr	r2, [pc, #124]	@ (800cb6c <HAL_DMA_Abort_IT+0x1cc>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d013      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb70 <HAL_DMA_Abort_IT+0x1d0>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d00e      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a1c      	ldr	r2, [pc, #112]	@ (800cb74 <HAL_DMA_Abort_IT+0x1d4>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d009      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a1a      	ldr	r2, [pc, #104]	@ (800cb78 <HAL_DMA_Abort_IT+0x1d8>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d004      	beq.n	800cb1c <HAL_DMA_Abort_IT+0x17c>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a19      	ldr	r2, [pc, #100]	@ (800cb7c <HAL_DMA_Abort_IT+0x1dc>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d108      	bne.n	800cb2e <HAL_DMA_Abort_IT+0x18e>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f022 0201 	bic.w	r2, r2, #1
 800cb2a:	601a      	str	r2, [r3, #0]
 800cb2c:	e178      	b.n	800ce20 <HAL_DMA_Abort_IT+0x480>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f022 0201 	bic.w	r2, r2, #1
 800cb3c:	601a      	str	r2, [r3, #0]
 800cb3e:	e16f      	b.n	800ce20 <HAL_DMA_Abort_IT+0x480>
 800cb40:	40020010 	.word	0x40020010
 800cb44:	40020028 	.word	0x40020028
 800cb48:	40020040 	.word	0x40020040
 800cb4c:	40020058 	.word	0x40020058
 800cb50:	40020070 	.word	0x40020070
 800cb54:	40020088 	.word	0x40020088
 800cb58:	400200a0 	.word	0x400200a0
 800cb5c:	400200b8 	.word	0x400200b8
 800cb60:	40020410 	.word	0x40020410
 800cb64:	40020428 	.word	0x40020428
 800cb68:	40020440 	.word	0x40020440
 800cb6c:	40020458 	.word	0x40020458
 800cb70:	40020470 	.word	0x40020470
 800cb74:	40020488 	.word	0x40020488
 800cb78:	400204a0 	.word	0x400204a0
 800cb7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f022 020e 	bic.w	r2, r2, #14
 800cb8e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a6c      	ldr	r2, [pc, #432]	@ (800cd48 <HAL_DMA_Abort_IT+0x3a8>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d04a      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a6b      	ldr	r2, [pc, #428]	@ (800cd4c <HAL_DMA_Abort_IT+0x3ac>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d045      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a69      	ldr	r2, [pc, #420]	@ (800cd50 <HAL_DMA_Abort_IT+0x3b0>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d040      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a68      	ldr	r2, [pc, #416]	@ (800cd54 <HAL_DMA_Abort_IT+0x3b4>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d03b      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a66      	ldr	r2, [pc, #408]	@ (800cd58 <HAL_DMA_Abort_IT+0x3b8>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d036      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a65      	ldr	r2, [pc, #404]	@ (800cd5c <HAL_DMA_Abort_IT+0x3bc>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d031      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a63      	ldr	r2, [pc, #396]	@ (800cd60 <HAL_DMA_Abort_IT+0x3c0>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d02c      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a62      	ldr	r2, [pc, #392]	@ (800cd64 <HAL_DMA_Abort_IT+0x3c4>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d027      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a60      	ldr	r2, [pc, #384]	@ (800cd68 <HAL_DMA_Abort_IT+0x3c8>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d022      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a5f      	ldr	r2, [pc, #380]	@ (800cd6c <HAL_DMA_Abort_IT+0x3cc>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d01d      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a5d      	ldr	r2, [pc, #372]	@ (800cd70 <HAL_DMA_Abort_IT+0x3d0>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d018      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a5c      	ldr	r2, [pc, #368]	@ (800cd74 <HAL_DMA_Abort_IT+0x3d4>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d013      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a5a      	ldr	r2, [pc, #360]	@ (800cd78 <HAL_DMA_Abort_IT+0x3d8>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d00e      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a59      	ldr	r2, [pc, #356]	@ (800cd7c <HAL_DMA_Abort_IT+0x3dc>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d009      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a57      	ldr	r2, [pc, #348]	@ (800cd80 <HAL_DMA_Abort_IT+0x3e0>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d004      	beq.n	800cc30 <HAL_DMA_Abort_IT+0x290>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a56      	ldr	r2, [pc, #344]	@ (800cd84 <HAL_DMA_Abort_IT+0x3e4>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d108      	bne.n	800cc42 <HAL_DMA_Abort_IT+0x2a2>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f022 0201 	bic.w	r2, r2, #1
 800cc3e:	601a      	str	r2, [r3, #0]
 800cc40:	e007      	b.n	800cc52 <HAL_DMA_Abort_IT+0x2b2>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f022 0201 	bic.w	r2, r2, #1
 800cc50:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a3c      	ldr	r2, [pc, #240]	@ (800cd48 <HAL_DMA_Abort_IT+0x3a8>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d072      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a3a      	ldr	r2, [pc, #232]	@ (800cd4c <HAL_DMA_Abort_IT+0x3ac>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d06d      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a39      	ldr	r2, [pc, #228]	@ (800cd50 <HAL_DMA_Abort_IT+0x3b0>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d068      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a37      	ldr	r2, [pc, #220]	@ (800cd54 <HAL_DMA_Abort_IT+0x3b4>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d063      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a36      	ldr	r2, [pc, #216]	@ (800cd58 <HAL_DMA_Abort_IT+0x3b8>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d05e      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a34      	ldr	r2, [pc, #208]	@ (800cd5c <HAL_DMA_Abort_IT+0x3bc>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d059      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a33      	ldr	r2, [pc, #204]	@ (800cd60 <HAL_DMA_Abort_IT+0x3c0>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d054      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a31      	ldr	r2, [pc, #196]	@ (800cd64 <HAL_DMA_Abort_IT+0x3c4>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d04f      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a30      	ldr	r2, [pc, #192]	@ (800cd68 <HAL_DMA_Abort_IT+0x3c8>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d04a      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a2e      	ldr	r2, [pc, #184]	@ (800cd6c <HAL_DMA_Abort_IT+0x3cc>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d045      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a2d      	ldr	r2, [pc, #180]	@ (800cd70 <HAL_DMA_Abort_IT+0x3d0>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d040      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a2b      	ldr	r2, [pc, #172]	@ (800cd74 <HAL_DMA_Abort_IT+0x3d4>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d03b      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a2a      	ldr	r2, [pc, #168]	@ (800cd78 <HAL_DMA_Abort_IT+0x3d8>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d036      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a28      	ldr	r2, [pc, #160]	@ (800cd7c <HAL_DMA_Abort_IT+0x3dc>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d031      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a27      	ldr	r2, [pc, #156]	@ (800cd80 <HAL_DMA_Abort_IT+0x3e0>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d02c      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a25      	ldr	r2, [pc, #148]	@ (800cd84 <HAL_DMA_Abort_IT+0x3e4>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d027      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a24      	ldr	r2, [pc, #144]	@ (800cd88 <HAL_DMA_Abort_IT+0x3e8>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d022      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a22      	ldr	r2, [pc, #136]	@ (800cd8c <HAL_DMA_Abort_IT+0x3ec>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d01d      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a21      	ldr	r2, [pc, #132]	@ (800cd90 <HAL_DMA_Abort_IT+0x3f0>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d018      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a1f      	ldr	r2, [pc, #124]	@ (800cd94 <HAL_DMA_Abort_IT+0x3f4>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d013      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a1e      	ldr	r2, [pc, #120]	@ (800cd98 <HAL_DMA_Abort_IT+0x3f8>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d00e      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a1c      	ldr	r2, [pc, #112]	@ (800cd9c <HAL_DMA_Abort_IT+0x3fc>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d009      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a1b      	ldr	r2, [pc, #108]	@ (800cda0 <HAL_DMA_Abort_IT+0x400>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d004      	beq.n	800cd42 <HAL_DMA_Abort_IT+0x3a2>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a19      	ldr	r2, [pc, #100]	@ (800cda4 <HAL_DMA_Abort_IT+0x404>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d132      	bne.n	800cda8 <HAL_DMA_Abort_IT+0x408>
 800cd42:	2301      	movs	r3, #1
 800cd44:	e031      	b.n	800cdaa <HAL_DMA_Abort_IT+0x40a>
 800cd46:	bf00      	nop
 800cd48:	40020010 	.word	0x40020010
 800cd4c:	40020028 	.word	0x40020028
 800cd50:	40020040 	.word	0x40020040
 800cd54:	40020058 	.word	0x40020058
 800cd58:	40020070 	.word	0x40020070
 800cd5c:	40020088 	.word	0x40020088
 800cd60:	400200a0 	.word	0x400200a0
 800cd64:	400200b8 	.word	0x400200b8
 800cd68:	40020410 	.word	0x40020410
 800cd6c:	40020428 	.word	0x40020428
 800cd70:	40020440 	.word	0x40020440
 800cd74:	40020458 	.word	0x40020458
 800cd78:	40020470 	.word	0x40020470
 800cd7c:	40020488 	.word	0x40020488
 800cd80:	400204a0 	.word	0x400204a0
 800cd84:	400204b8 	.word	0x400204b8
 800cd88:	58025408 	.word	0x58025408
 800cd8c:	5802541c 	.word	0x5802541c
 800cd90:	58025430 	.word	0x58025430
 800cd94:	58025444 	.word	0x58025444
 800cd98:	58025458 	.word	0x58025458
 800cd9c:	5802546c 	.word	0x5802546c
 800cda0:	58025480 	.word	0x58025480
 800cda4:	58025494 	.word	0x58025494
 800cda8:	2300      	movs	r3, #0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d028      	beq.n	800ce00 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cdbc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdc2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cdc8:	f003 031f 	and.w	r3, r3, #31
 800cdcc:	2201      	movs	r2, #1
 800cdce:	409a      	lsls	r2, r3
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cddc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00c      	beq.n	800ce00 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cdf4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800cdfe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d003      	beq.n	800ce20 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop

0800ce2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b08a      	sub	sp, #40	@ 0x28
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800ce34:	2300      	movs	r3, #0
 800ce36:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ce38:	4b67      	ldr	r3, [pc, #412]	@ (800cfd8 <HAL_DMA_IRQHandler+0x1ac>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a67      	ldr	r2, [pc, #412]	@ (800cfdc <HAL_DMA_IRQHandler+0x1b0>)
 800ce3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce42:	0a9b      	lsrs	r3, r3, #10
 800ce44:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce4a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce50:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a5f      	ldr	r2, [pc, #380]	@ (800cfe0 <HAL_DMA_IRQHandler+0x1b4>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d04a      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4a5d      	ldr	r2, [pc, #372]	@ (800cfe4 <HAL_DMA_IRQHandler+0x1b8>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d045      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a5c      	ldr	r2, [pc, #368]	@ (800cfe8 <HAL_DMA_IRQHandler+0x1bc>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d040      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a5a      	ldr	r2, [pc, #360]	@ (800cfec <HAL_DMA_IRQHandler+0x1c0>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d03b      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a59      	ldr	r2, [pc, #356]	@ (800cff0 <HAL_DMA_IRQHandler+0x1c4>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d036      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a57      	ldr	r2, [pc, #348]	@ (800cff4 <HAL_DMA_IRQHandler+0x1c8>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d031      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a56      	ldr	r2, [pc, #344]	@ (800cff8 <HAL_DMA_IRQHandler+0x1cc>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d02c      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a54      	ldr	r2, [pc, #336]	@ (800cffc <HAL_DMA_IRQHandler+0x1d0>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d027      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a53      	ldr	r2, [pc, #332]	@ (800d000 <HAL_DMA_IRQHandler+0x1d4>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d022      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a51      	ldr	r2, [pc, #324]	@ (800d004 <HAL_DMA_IRQHandler+0x1d8>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d01d      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a50      	ldr	r2, [pc, #320]	@ (800d008 <HAL_DMA_IRQHandler+0x1dc>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d018      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a4e      	ldr	r2, [pc, #312]	@ (800d00c <HAL_DMA_IRQHandler+0x1e0>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d013      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a4d      	ldr	r2, [pc, #308]	@ (800d010 <HAL_DMA_IRQHandler+0x1e4>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d00e      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a4b      	ldr	r2, [pc, #300]	@ (800d014 <HAL_DMA_IRQHandler+0x1e8>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d009      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a4a      	ldr	r2, [pc, #296]	@ (800d018 <HAL_DMA_IRQHandler+0x1ec>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d004      	beq.n	800cefe <HAL_DMA_IRQHandler+0xd2>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a48      	ldr	r2, [pc, #288]	@ (800d01c <HAL_DMA_IRQHandler+0x1f0>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d101      	bne.n	800cf02 <HAL_DMA_IRQHandler+0xd6>
 800cefe:	2301      	movs	r3, #1
 800cf00:	e000      	b.n	800cf04 <HAL_DMA_IRQHandler+0xd8>
 800cf02:	2300      	movs	r3, #0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f000 842b 	beq.w	800d760 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf0e:	f003 031f 	and.w	r3, r3, #31
 800cf12:	2208      	movs	r2, #8
 800cf14:	409a      	lsls	r2, r3
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	4013      	ands	r3, r2
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f000 80a2 	beq.w	800d064 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a2e      	ldr	r2, [pc, #184]	@ (800cfe0 <HAL_DMA_IRQHandler+0x1b4>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d04a      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a2d      	ldr	r2, [pc, #180]	@ (800cfe4 <HAL_DMA_IRQHandler+0x1b8>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d045      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a2b      	ldr	r2, [pc, #172]	@ (800cfe8 <HAL_DMA_IRQHandler+0x1bc>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d040      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a2a      	ldr	r2, [pc, #168]	@ (800cfec <HAL_DMA_IRQHandler+0x1c0>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d03b      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a28      	ldr	r2, [pc, #160]	@ (800cff0 <HAL_DMA_IRQHandler+0x1c4>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d036      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a27      	ldr	r2, [pc, #156]	@ (800cff4 <HAL_DMA_IRQHandler+0x1c8>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d031      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a25      	ldr	r2, [pc, #148]	@ (800cff8 <HAL_DMA_IRQHandler+0x1cc>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d02c      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4a24      	ldr	r2, [pc, #144]	@ (800cffc <HAL_DMA_IRQHandler+0x1d0>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d027      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a22      	ldr	r2, [pc, #136]	@ (800d000 <HAL_DMA_IRQHandler+0x1d4>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d022      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4a21      	ldr	r2, [pc, #132]	@ (800d004 <HAL_DMA_IRQHandler+0x1d8>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d01d      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a1f      	ldr	r2, [pc, #124]	@ (800d008 <HAL_DMA_IRQHandler+0x1dc>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d018      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4a1e      	ldr	r2, [pc, #120]	@ (800d00c <HAL_DMA_IRQHandler+0x1e0>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d013      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a1c      	ldr	r2, [pc, #112]	@ (800d010 <HAL_DMA_IRQHandler+0x1e4>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d00e      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a1b      	ldr	r2, [pc, #108]	@ (800d014 <HAL_DMA_IRQHandler+0x1e8>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d009      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a19      	ldr	r2, [pc, #100]	@ (800d018 <HAL_DMA_IRQHandler+0x1ec>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d004      	beq.n	800cfc0 <HAL_DMA_IRQHandler+0x194>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a18      	ldr	r2, [pc, #96]	@ (800d01c <HAL_DMA_IRQHandler+0x1f0>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d12f      	bne.n	800d020 <HAL_DMA_IRQHandler+0x1f4>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f003 0304 	and.w	r3, r3, #4
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	bf14      	ite	ne
 800cfce:	2301      	movne	r3, #1
 800cfd0:	2300      	moveq	r3, #0
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	e02e      	b.n	800d034 <HAL_DMA_IRQHandler+0x208>
 800cfd6:	bf00      	nop
 800cfd8:	24000004 	.word	0x24000004
 800cfdc:	1b4e81b5 	.word	0x1b4e81b5
 800cfe0:	40020010 	.word	0x40020010
 800cfe4:	40020028 	.word	0x40020028
 800cfe8:	40020040 	.word	0x40020040
 800cfec:	40020058 	.word	0x40020058
 800cff0:	40020070 	.word	0x40020070
 800cff4:	40020088 	.word	0x40020088
 800cff8:	400200a0 	.word	0x400200a0
 800cffc:	400200b8 	.word	0x400200b8
 800d000:	40020410 	.word	0x40020410
 800d004:	40020428 	.word	0x40020428
 800d008:	40020440 	.word	0x40020440
 800d00c:	40020458 	.word	0x40020458
 800d010:	40020470 	.word	0x40020470
 800d014:	40020488 	.word	0x40020488
 800d018:	400204a0 	.word	0x400204a0
 800d01c:	400204b8 	.word	0x400204b8
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f003 0308 	and.w	r3, r3, #8
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	bf14      	ite	ne
 800d02e:	2301      	movne	r3, #1
 800d030:	2300      	moveq	r3, #0
 800d032:	b2db      	uxtb	r3, r3
 800d034:	2b00      	cmp	r3, #0
 800d036:	d015      	beq.n	800d064 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f022 0204 	bic.w	r2, r2, #4
 800d046:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d04c:	f003 031f 	and.w	r3, r3, #31
 800d050:	2208      	movs	r2, #8
 800d052:	409a      	lsls	r2, r3
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d05c:	f043 0201 	orr.w	r2, r3, #1
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d068:	f003 031f 	and.w	r3, r3, #31
 800d06c:	69ba      	ldr	r2, [r7, #24]
 800d06e:	fa22 f303 	lsr.w	r3, r2, r3
 800d072:	f003 0301 	and.w	r3, r3, #1
 800d076:	2b00      	cmp	r3, #0
 800d078:	d06e      	beq.n	800d158 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a69      	ldr	r2, [pc, #420]	@ (800d224 <HAL_DMA_IRQHandler+0x3f8>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d04a      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a67      	ldr	r2, [pc, #412]	@ (800d228 <HAL_DMA_IRQHandler+0x3fc>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d045      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a66      	ldr	r2, [pc, #408]	@ (800d22c <HAL_DMA_IRQHandler+0x400>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d040      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a64      	ldr	r2, [pc, #400]	@ (800d230 <HAL_DMA_IRQHandler+0x404>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d03b      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a63      	ldr	r2, [pc, #396]	@ (800d234 <HAL_DMA_IRQHandler+0x408>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d036      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a61      	ldr	r2, [pc, #388]	@ (800d238 <HAL_DMA_IRQHandler+0x40c>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d031      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a60      	ldr	r2, [pc, #384]	@ (800d23c <HAL_DMA_IRQHandler+0x410>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d02c      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a5e      	ldr	r2, [pc, #376]	@ (800d240 <HAL_DMA_IRQHandler+0x414>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d027      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a5d      	ldr	r2, [pc, #372]	@ (800d244 <HAL_DMA_IRQHandler+0x418>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d022      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a5b      	ldr	r2, [pc, #364]	@ (800d248 <HAL_DMA_IRQHandler+0x41c>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d01d      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4a5a      	ldr	r2, [pc, #360]	@ (800d24c <HAL_DMA_IRQHandler+0x420>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d018      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a58      	ldr	r2, [pc, #352]	@ (800d250 <HAL_DMA_IRQHandler+0x424>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d013      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a57      	ldr	r2, [pc, #348]	@ (800d254 <HAL_DMA_IRQHandler+0x428>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d00e      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a55      	ldr	r2, [pc, #340]	@ (800d258 <HAL_DMA_IRQHandler+0x42c>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d009      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a54      	ldr	r2, [pc, #336]	@ (800d25c <HAL_DMA_IRQHandler+0x430>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d004      	beq.n	800d11a <HAL_DMA_IRQHandler+0x2ee>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a52      	ldr	r2, [pc, #328]	@ (800d260 <HAL_DMA_IRQHandler+0x434>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d10a      	bne.n	800d130 <HAL_DMA_IRQHandler+0x304>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	695b      	ldr	r3, [r3, #20]
 800d120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d124:	2b00      	cmp	r3, #0
 800d126:	bf14      	ite	ne
 800d128:	2301      	movne	r3, #1
 800d12a:	2300      	moveq	r3, #0
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	e003      	b.n	800d138 <HAL_DMA_IRQHandler+0x30c>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2300      	movs	r3, #0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00d      	beq.n	800d158 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d140:	f003 031f 	and.w	r3, r3, #31
 800d144:	2201      	movs	r2, #1
 800d146:	409a      	lsls	r2, r3
 800d148:	6a3b      	ldr	r3, [r7, #32]
 800d14a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d150:	f043 0202 	orr.w	r2, r3, #2
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d15c:	f003 031f 	and.w	r3, r3, #31
 800d160:	2204      	movs	r2, #4
 800d162:	409a      	lsls	r2, r3
 800d164:	69bb      	ldr	r3, [r7, #24]
 800d166:	4013      	ands	r3, r2
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f000 808f 	beq.w	800d28c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a2c      	ldr	r2, [pc, #176]	@ (800d224 <HAL_DMA_IRQHandler+0x3f8>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d04a      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a2a      	ldr	r2, [pc, #168]	@ (800d228 <HAL_DMA_IRQHandler+0x3fc>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d045      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a29      	ldr	r2, [pc, #164]	@ (800d22c <HAL_DMA_IRQHandler+0x400>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d040      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a27      	ldr	r2, [pc, #156]	@ (800d230 <HAL_DMA_IRQHandler+0x404>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d03b      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a26      	ldr	r2, [pc, #152]	@ (800d234 <HAL_DMA_IRQHandler+0x408>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d036      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a24      	ldr	r2, [pc, #144]	@ (800d238 <HAL_DMA_IRQHandler+0x40c>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d031      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a23      	ldr	r2, [pc, #140]	@ (800d23c <HAL_DMA_IRQHandler+0x410>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d02c      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a21      	ldr	r2, [pc, #132]	@ (800d240 <HAL_DMA_IRQHandler+0x414>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d027      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a20      	ldr	r2, [pc, #128]	@ (800d244 <HAL_DMA_IRQHandler+0x418>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d022      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a1e      	ldr	r2, [pc, #120]	@ (800d248 <HAL_DMA_IRQHandler+0x41c>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d01d      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a1d      	ldr	r2, [pc, #116]	@ (800d24c <HAL_DMA_IRQHandler+0x420>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d018      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a1b      	ldr	r2, [pc, #108]	@ (800d250 <HAL_DMA_IRQHandler+0x424>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d013      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a1a      	ldr	r2, [pc, #104]	@ (800d254 <HAL_DMA_IRQHandler+0x428>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d00e      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a18      	ldr	r2, [pc, #96]	@ (800d258 <HAL_DMA_IRQHandler+0x42c>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d009      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4a17      	ldr	r2, [pc, #92]	@ (800d25c <HAL_DMA_IRQHandler+0x430>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d004      	beq.n	800d20e <HAL_DMA_IRQHandler+0x3e2>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a15      	ldr	r2, [pc, #84]	@ (800d260 <HAL_DMA_IRQHandler+0x434>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d12a      	bne.n	800d264 <HAL_DMA_IRQHandler+0x438>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f003 0302 	and.w	r3, r3, #2
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bf14      	ite	ne
 800d21c:	2301      	movne	r3, #1
 800d21e:	2300      	moveq	r3, #0
 800d220:	b2db      	uxtb	r3, r3
 800d222:	e023      	b.n	800d26c <HAL_DMA_IRQHandler+0x440>
 800d224:	40020010 	.word	0x40020010
 800d228:	40020028 	.word	0x40020028
 800d22c:	40020040 	.word	0x40020040
 800d230:	40020058 	.word	0x40020058
 800d234:	40020070 	.word	0x40020070
 800d238:	40020088 	.word	0x40020088
 800d23c:	400200a0 	.word	0x400200a0
 800d240:	400200b8 	.word	0x400200b8
 800d244:	40020410 	.word	0x40020410
 800d248:	40020428 	.word	0x40020428
 800d24c:	40020440 	.word	0x40020440
 800d250:	40020458 	.word	0x40020458
 800d254:	40020470 	.word	0x40020470
 800d258:	40020488 	.word	0x40020488
 800d25c:	400204a0 	.word	0x400204a0
 800d260:	400204b8 	.word	0x400204b8
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2300      	movs	r3, #0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00d      	beq.n	800d28c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d274:	f003 031f 	and.w	r3, r3, #31
 800d278:	2204      	movs	r2, #4
 800d27a:	409a      	lsls	r2, r3
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d284:	f043 0204 	orr.w	r2, r3, #4
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d290:	f003 031f 	and.w	r3, r3, #31
 800d294:	2210      	movs	r2, #16
 800d296:	409a      	lsls	r2, r3
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	4013      	ands	r3, r2
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f000 80a6 	beq.w	800d3ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a85      	ldr	r2, [pc, #532]	@ (800d4bc <HAL_DMA_IRQHandler+0x690>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d04a      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a83      	ldr	r2, [pc, #524]	@ (800d4c0 <HAL_DMA_IRQHandler+0x694>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d045      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a82      	ldr	r2, [pc, #520]	@ (800d4c4 <HAL_DMA_IRQHandler+0x698>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d040      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a80      	ldr	r2, [pc, #512]	@ (800d4c8 <HAL_DMA_IRQHandler+0x69c>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d03b      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a7f      	ldr	r2, [pc, #508]	@ (800d4cc <HAL_DMA_IRQHandler+0x6a0>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d036      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	4a7d      	ldr	r2, [pc, #500]	@ (800d4d0 <HAL_DMA_IRQHandler+0x6a4>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d031      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4a7c      	ldr	r2, [pc, #496]	@ (800d4d4 <HAL_DMA_IRQHandler+0x6a8>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d02c      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a7a      	ldr	r2, [pc, #488]	@ (800d4d8 <HAL_DMA_IRQHandler+0x6ac>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d027      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a79      	ldr	r2, [pc, #484]	@ (800d4dc <HAL_DMA_IRQHandler+0x6b0>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d022      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a77      	ldr	r2, [pc, #476]	@ (800d4e0 <HAL_DMA_IRQHandler+0x6b4>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d01d      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a76      	ldr	r2, [pc, #472]	@ (800d4e4 <HAL_DMA_IRQHandler+0x6b8>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d018      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a74      	ldr	r2, [pc, #464]	@ (800d4e8 <HAL_DMA_IRQHandler+0x6bc>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d013      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a73      	ldr	r2, [pc, #460]	@ (800d4ec <HAL_DMA_IRQHandler+0x6c0>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d00e      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a71      	ldr	r2, [pc, #452]	@ (800d4f0 <HAL_DMA_IRQHandler+0x6c4>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d009      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a70      	ldr	r2, [pc, #448]	@ (800d4f4 <HAL_DMA_IRQHandler+0x6c8>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d004      	beq.n	800d342 <HAL_DMA_IRQHandler+0x516>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a6e      	ldr	r2, [pc, #440]	@ (800d4f8 <HAL_DMA_IRQHandler+0x6cc>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d10a      	bne.n	800d358 <HAL_DMA_IRQHandler+0x52c>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 0308 	and.w	r3, r3, #8
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bf14      	ite	ne
 800d350:	2301      	movne	r3, #1
 800d352:	2300      	moveq	r3, #0
 800d354:	b2db      	uxtb	r3, r3
 800d356:	e009      	b.n	800d36c <HAL_DMA_IRQHandler+0x540>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f003 0304 	and.w	r3, r3, #4
 800d362:	2b00      	cmp	r3, #0
 800d364:	bf14      	ite	ne
 800d366:	2301      	movne	r3, #1
 800d368:	2300      	moveq	r3, #0
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d03e      	beq.n	800d3ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d374:	f003 031f 	and.w	r3, r3, #31
 800d378:	2210      	movs	r2, #16
 800d37a:	409a      	lsls	r2, r3
 800d37c:	6a3b      	ldr	r3, [r7, #32]
 800d37e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d018      	beq.n	800d3c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d108      	bne.n	800d3ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d024      	beq.n	800d3ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	4798      	blx	r3
 800d3ac:	e01f      	b.n	800d3ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d01b      	beq.n	800d3ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	4798      	blx	r3
 800d3be:	e016      	b.n	800d3ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d107      	bne.n	800d3de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f022 0208 	bic.w	r2, r2, #8
 800d3dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d003      	beq.n	800d3ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3f2:	f003 031f 	and.w	r3, r3, #31
 800d3f6:	2220      	movs	r2, #32
 800d3f8:	409a      	lsls	r2, r3
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 8110 	beq.w	800d624 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a2c      	ldr	r2, [pc, #176]	@ (800d4bc <HAL_DMA_IRQHandler+0x690>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d04a      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a2b      	ldr	r2, [pc, #172]	@ (800d4c0 <HAL_DMA_IRQHandler+0x694>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d045      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a29      	ldr	r2, [pc, #164]	@ (800d4c4 <HAL_DMA_IRQHandler+0x698>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d040      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a28      	ldr	r2, [pc, #160]	@ (800d4c8 <HAL_DMA_IRQHandler+0x69c>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d03b      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a26      	ldr	r2, [pc, #152]	@ (800d4cc <HAL_DMA_IRQHandler+0x6a0>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d036      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a25      	ldr	r2, [pc, #148]	@ (800d4d0 <HAL_DMA_IRQHandler+0x6a4>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d031      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a23      	ldr	r2, [pc, #140]	@ (800d4d4 <HAL_DMA_IRQHandler+0x6a8>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d02c      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4a22      	ldr	r2, [pc, #136]	@ (800d4d8 <HAL_DMA_IRQHandler+0x6ac>)
 800d450:	4293      	cmp	r3, r2
 800d452:	d027      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4a20      	ldr	r2, [pc, #128]	@ (800d4dc <HAL_DMA_IRQHandler+0x6b0>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d022      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4a1f      	ldr	r2, [pc, #124]	@ (800d4e0 <HAL_DMA_IRQHandler+0x6b4>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d01d      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a1d      	ldr	r2, [pc, #116]	@ (800d4e4 <HAL_DMA_IRQHandler+0x6b8>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d018      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a1c      	ldr	r2, [pc, #112]	@ (800d4e8 <HAL_DMA_IRQHandler+0x6bc>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d013      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a1a      	ldr	r2, [pc, #104]	@ (800d4ec <HAL_DMA_IRQHandler+0x6c0>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d00e      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a19      	ldr	r2, [pc, #100]	@ (800d4f0 <HAL_DMA_IRQHandler+0x6c4>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d009      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4a17      	ldr	r2, [pc, #92]	@ (800d4f4 <HAL_DMA_IRQHandler+0x6c8>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d004      	beq.n	800d4a4 <HAL_DMA_IRQHandler+0x678>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a16      	ldr	r2, [pc, #88]	@ (800d4f8 <HAL_DMA_IRQHandler+0x6cc>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d12b      	bne.n	800d4fc <HAL_DMA_IRQHandler+0x6d0>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f003 0310 	and.w	r3, r3, #16
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	bf14      	ite	ne
 800d4b2:	2301      	movne	r3, #1
 800d4b4:	2300      	moveq	r3, #0
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	e02a      	b.n	800d510 <HAL_DMA_IRQHandler+0x6e4>
 800d4ba:	bf00      	nop
 800d4bc:	40020010 	.word	0x40020010
 800d4c0:	40020028 	.word	0x40020028
 800d4c4:	40020040 	.word	0x40020040
 800d4c8:	40020058 	.word	0x40020058
 800d4cc:	40020070 	.word	0x40020070
 800d4d0:	40020088 	.word	0x40020088
 800d4d4:	400200a0 	.word	0x400200a0
 800d4d8:	400200b8 	.word	0x400200b8
 800d4dc:	40020410 	.word	0x40020410
 800d4e0:	40020428 	.word	0x40020428
 800d4e4:	40020440 	.word	0x40020440
 800d4e8:	40020458 	.word	0x40020458
 800d4ec:	40020470 	.word	0x40020470
 800d4f0:	40020488 	.word	0x40020488
 800d4f4:	400204a0 	.word	0x400204a0
 800d4f8:	400204b8 	.word	0x400204b8
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f003 0302 	and.w	r3, r3, #2
 800d506:	2b00      	cmp	r3, #0
 800d508:	bf14      	ite	ne
 800d50a:	2301      	movne	r3, #1
 800d50c:	2300      	moveq	r3, #0
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 8087 	beq.w	800d624 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d51a:	f003 031f 	and.w	r3, r3, #31
 800d51e:	2220      	movs	r2, #32
 800d520:	409a      	lsls	r2, r3
 800d522:	6a3b      	ldr	r3, [r7, #32]
 800d524:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d52c:	b2db      	uxtb	r3, r3
 800d52e:	2b04      	cmp	r3, #4
 800d530:	d139      	bne.n	800d5a6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f022 0216 	bic.w	r2, r2, #22
 800d540:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	695a      	ldr	r2, [r3, #20]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d550:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d556:	2b00      	cmp	r3, #0
 800d558:	d103      	bne.n	800d562 <HAL_DMA_IRQHandler+0x736>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d007      	beq.n	800d572 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f022 0208 	bic.w	r2, r2, #8
 800d570:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d576:	f003 031f 	and.w	r3, r3, #31
 800d57a:	223f      	movs	r2, #63	@ 0x3f
 800d57c:	409a      	lsls	r2, r3
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2201      	movs	r2, #1
 800d586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d596:	2b00      	cmp	r3, #0
 800d598:	f000 834a 	beq.w	800dc30 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	4798      	blx	r3
          }
          return;
 800d5a4:	e344      	b.n	800dc30 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d018      	beq.n	800d5e6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d108      	bne.n	800d5d4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d02c      	beq.n	800d624 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	4798      	blx	r3
 800d5d2:	e027      	b.n	800d624 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d023      	beq.n	800d624 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	4798      	blx	r3
 800d5e4:	e01e      	b.n	800d624 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10f      	bne.n	800d614 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f022 0210 	bic.w	r2, r2, #16
 800d602:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2201      	movs	r2, #1
 800d608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d003      	beq.n	800d624 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f000 8306 	beq.w	800dc3a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d632:	f003 0301 	and.w	r3, r3, #1
 800d636:	2b00      	cmp	r3, #0
 800d638:	f000 8088 	beq.w	800d74c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2204      	movs	r2, #4
 800d640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a7a      	ldr	r2, [pc, #488]	@ (800d834 <HAL_DMA_IRQHandler+0xa08>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d04a      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4a79      	ldr	r2, [pc, #484]	@ (800d838 <HAL_DMA_IRQHandler+0xa0c>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d045      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	4a77      	ldr	r2, [pc, #476]	@ (800d83c <HAL_DMA_IRQHandler+0xa10>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d040      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4a76      	ldr	r2, [pc, #472]	@ (800d840 <HAL_DMA_IRQHandler+0xa14>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d03b      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a74      	ldr	r2, [pc, #464]	@ (800d844 <HAL_DMA_IRQHandler+0xa18>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d036      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a73      	ldr	r2, [pc, #460]	@ (800d848 <HAL_DMA_IRQHandler+0xa1c>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d031      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	4a71      	ldr	r2, [pc, #452]	@ (800d84c <HAL_DMA_IRQHandler+0xa20>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d02c      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a70      	ldr	r2, [pc, #448]	@ (800d850 <HAL_DMA_IRQHandler+0xa24>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d027      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4a6e      	ldr	r2, [pc, #440]	@ (800d854 <HAL_DMA_IRQHandler+0xa28>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d022      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4a6d      	ldr	r2, [pc, #436]	@ (800d858 <HAL_DMA_IRQHandler+0xa2c>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d01d      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a6b      	ldr	r2, [pc, #428]	@ (800d85c <HAL_DMA_IRQHandler+0xa30>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d018      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a6a      	ldr	r2, [pc, #424]	@ (800d860 <HAL_DMA_IRQHandler+0xa34>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d013      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a68      	ldr	r2, [pc, #416]	@ (800d864 <HAL_DMA_IRQHandler+0xa38>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d00e      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a67      	ldr	r2, [pc, #412]	@ (800d868 <HAL_DMA_IRQHandler+0xa3c>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d009      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4a65      	ldr	r2, [pc, #404]	@ (800d86c <HAL_DMA_IRQHandler+0xa40>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d004      	beq.n	800d6e4 <HAL_DMA_IRQHandler+0x8b8>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4a64      	ldr	r2, [pc, #400]	@ (800d870 <HAL_DMA_IRQHandler+0xa44>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d108      	bne.n	800d6f6 <HAL_DMA_IRQHandler+0x8ca>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f022 0201 	bic.w	r2, r2, #1
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	e007      	b.n	800d706 <HAL_DMA_IRQHandler+0x8da>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f022 0201 	bic.w	r2, r2, #1
 800d704:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	3301      	adds	r3, #1
 800d70a:	60fb      	str	r3, [r7, #12]
 800d70c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d70e:	429a      	cmp	r2, r3
 800d710:	d307      	bcc.n	800d722 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f003 0301 	and.w	r3, r3, #1
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1f2      	bne.n	800d706 <HAL_DMA_IRQHandler+0x8da>
 800d720:	e000      	b.n	800d724 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d722:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f003 0301 	and.w	r3, r3, #1
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d004      	beq.n	800d73c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2203      	movs	r2, #3
 800d736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d73a:	e003      	b.n	800d744 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2201      	movs	r2, #1
 800d740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2200      	movs	r2, #0
 800d748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 8272 	beq.w	800dc3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	4798      	blx	r3
 800d75e:	e26c      	b.n	800dc3a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a43      	ldr	r2, [pc, #268]	@ (800d874 <HAL_DMA_IRQHandler+0xa48>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d022      	beq.n	800d7b0 <HAL_DMA_IRQHandler+0x984>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a42      	ldr	r2, [pc, #264]	@ (800d878 <HAL_DMA_IRQHandler+0xa4c>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d01d      	beq.n	800d7b0 <HAL_DMA_IRQHandler+0x984>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a40      	ldr	r2, [pc, #256]	@ (800d87c <HAL_DMA_IRQHandler+0xa50>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d018      	beq.n	800d7b0 <HAL_DMA_IRQHandler+0x984>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a3f      	ldr	r2, [pc, #252]	@ (800d880 <HAL_DMA_IRQHandler+0xa54>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d013      	beq.n	800d7b0 <HAL_DMA_IRQHandler+0x984>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a3d      	ldr	r2, [pc, #244]	@ (800d884 <HAL_DMA_IRQHandler+0xa58>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d00e      	beq.n	800d7b0 <HAL_DMA_IRQHandler+0x984>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a3c      	ldr	r2, [pc, #240]	@ (800d888 <HAL_DMA_IRQHandler+0xa5c>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d009      	beq.n	800d7b0 <HAL_DMA_IRQHandler+0x984>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a3a      	ldr	r2, [pc, #232]	@ (800d88c <HAL_DMA_IRQHandler+0xa60>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d004      	beq.n	800d7b0 <HAL_DMA_IRQHandler+0x984>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a39      	ldr	r2, [pc, #228]	@ (800d890 <HAL_DMA_IRQHandler+0xa64>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d101      	bne.n	800d7b4 <HAL_DMA_IRQHandler+0x988>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e000      	b.n	800d7b6 <HAL_DMA_IRQHandler+0x98a>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	f000 823f 	beq.w	800dc3a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7c8:	f003 031f 	and.w	r3, r3, #31
 800d7cc:	2204      	movs	r2, #4
 800d7ce:	409a      	lsls	r2, r3
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	4013      	ands	r3, r2
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f000 80cd 	beq.w	800d974 <HAL_DMA_IRQHandler+0xb48>
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	f003 0304 	and.w	r3, r3, #4
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f000 80c7 	beq.w	800d974 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d7ea:	f003 031f 	and.w	r3, r3, #31
 800d7ee:	2204      	movs	r2, #4
 800d7f0:	409a      	lsls	r2, r3
 800d7f2:	69fb      	ldr	r3, [r7, #28]
 800d7f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d049      	beq.n	800d894 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d806:	2b00      	cmp	r3, #0
 800d808:	d109      	bne.n	800d81e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f000 8210 	beq.w	800dc34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d81c:	e20a      	b.n	800dc34 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d822:	2b00      	cmp	r3, #0
 800d824:	f000 8206 	beq.w	800dc34 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d830:	e200      	b.n	800dc34 <HAL_DMA_IRQHandler+0xe08>
 800d832:	bf00      	nop
 800d834:	40020010 	.word	0x40020010
 800d838:	40020028 	.word	0x40020028
 800d83c:	40020040 	.word	0x40020040
 800d840:	40020058 	.word	0x40020058
 800d844:	40020070 	.word	0x40020070
 800d848:	40020088 	.word	0x40020088
 800d84c:	400200a0 	.word	0x400200a0
 800d850:	400200b8 	.word	0x400200b8
 800d854:	40020410 	.word	0x40020410
 800d858:	40020428 	.word	0x40020428
 800d85c:	40020440 	.word	0x40020440
 800d860:	40020458 	.word	0x40020458
 800d864:	40020470 	.word	0x40020470
 800d868:	40020488 	.word	0x40020488
 800d86c:	400204a0 	.word	0x400204a0
 800d870:	400204b8 	.word	0x400204b8
 800d874:	58025408 	.word	0x58025408
 800d878:	5802541c 	.word	0x5802541c
 800d87c:	58025430 	.word	0x58025430
 800d880:	58025444 	.word	0x58025444
 800d884:	58025458 	.word	0x58025458
 800d888:	5802546c 	.word	0x5802546c
 800d88c:	58025480 	.word	0x58025480
 800d890:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	f003 0320 	and.w	r3, r3, #32
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d160      	bne.n	800d960 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a7f      	ldr	r2, [pc, #508]	@ (800daa0 <HAL_DMA_IRQHandler+0xc74>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d04a      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a7d      	ldr	r2, [pc, #500]	@ (800daa4 <HAL_DMA_IRQHandler+0xc78>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d045      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a7c      	ldr	r2, [pc, #496]	@ (800daa8 <HAL_DMA_IRQHandler+0xc7c>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d040      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a7a      	ldr	r2, [pc, #488]	@ (800daac <HAL_DMA_IRQHandler+0xc80>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d03b      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a79      	ldr	r2, [pc, #484]	@ (800dab0 <HAL_DMA_IRQHandler+0xc84>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d036      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a77      	ldr	r2, [pc, #476]	@ (800dab4 <HAL_DMA_IRQHandler+0xc88>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d031      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4a76      	ldr	r2, [pc, #472]	@ (800dab8 <HAL_DMA_IRQHandler+0xc8c>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d02c      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a74      	ldr	r2, [pc, #464]	@ (800dabc <HAL_DMA_IRQHandler+0xc90>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d027      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a73      	ldr	r2, [pc, #460]	@ (800dac0 <HAL_DMA_IRQHandler+0xc94>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d022      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a71      	ldr	r2, [pc, #452]	@ (800dac4 <HAL_DMA_IRQHandler+0xc98>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d01d      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4a70      	ldr	r2, [pc, #448]	@ (800dac8 <HAL_DMA_IRQHandler+0xc9c>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d018      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a6e      	ldr	r2, [pc, #440]	@ (800dacc <HAL_DMA_IRQHandler+0xca0>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d013      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a6d      	ldr	r2, [pc, #436]	@ (800dad0 <HAL_DMA_IRQHandler+0xca4>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d00e      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a6b      	ldr	r2, [pc, #428]	@ (800dad4 <HAL_DMA_IRQHandler+0xca8>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d009      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4a6a      	ldr	r2, [pc, #424]	@ (800dad8 <HAL_DMA_IRQHandler+0xcac>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d004      	beq.n	800d93e <HAL_DMA_IRQHandler+0xb12>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a68      	ldr	r2, [pc, #416]	@ (800dadc <HAL_DMA_IRQHandler+0xcb0>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d108      	bne.n	800d950 <HAL_DMA_IRQHandler+0xb24>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f022 0208 	bic.w	r2, r2, #8
 800d94c:	601a      	str	r2, [r3, #0]
 800d94e:	e007      	b.n	800d960 <HAL_DMA_IRQHandler+0xb34>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f022 0204 	bic.w	r2, r2, #4
 800d95e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d964:	2b00      	cmp	r3, #0
 800d966:	f000 8165 	beq.w	800dc34 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d972:	e15f      	b.n	800dc34 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d978:	f003 031f 	and.w	r3, r3, #31
 800d97c:	2202      	movs	r2, #2
 800d97e:	409a      	lsls	r2, r3
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	4013      	ands	r3, r2
 800d984:	2b00      	cmp	r3, #0
 800d986:	f000 80c5 	beq.w	800db14 <HAL_DMA_IRQHandler+0xce8>
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	f003 0302 	and.w	r3, r3, #2
 800d990:	2b00      	cmp	r3, #0
 800d992:	f000 80bf 	beq.w	800db14 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d99a:	f003 031f 	and.w	r3, r3, #31
 800d99e:	2202      	movs	r2, #2
 800d9a0:	409a      	lsls	r2, r3
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d018      	beq.n	800d9e2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d109      	bne.n	800d9ce <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f000 813a 	beq.w	800dc38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d9cc:	e134      	b.n	800dc38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f000 8130 	beq.w	800dc38 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d9e0:	e12a      	b.n	800dc38 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	f003 0320 	and.w	r3, r3, #32
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f040 8089 	bne.w	800db00 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a2b      	ldr	r2, [pc, #172]	@ (800daa0 <HAL_DMA_IRQHandler+0xc74>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d04a      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a29      	ldr	r2, [pc, #164]	@ (800daa4 <HAL_DMA_IRQHandler+0xc78>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d045      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a28      	ldr	r2, [pc, #160]	@ (800daa8 <HAL_DMA_IRQHandler+0xc7c>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d040      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a26      	ldr	r2, [pc, #152]	@ (800daac <HAL_DMA_IRQHandler+0xc80>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d03b      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a25      	ldr	r2, [pc, #148]	@ (800dab0 <HAL_DMA_IRQHandler+0xc84>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d036      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a23      	ldr	r2, [pc, #140]	@ (800dab4 <HAL_DMA_IRQHandler+0xc88>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d031      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a22      	ldr	r2, [pc, #136]	@ (800dab8 <HAL_DMA_IRQHandler+0xc8c>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d02c      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a20      	ldr	r2, [pc, #128]	@ (800dabc <HAL_DMA_IRQHandler+0xc90>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d027      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a1f      	ldr	r2, [pc, #124]	@ (800dac0 <HAL_DMA_IRQHandler+0xc94>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d022      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a1d      	ldr	r2, [pc, #116]	@ (800dac4 <HAL_DMA_IRQHandler+0xc98>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d01d      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a1c      	ldr	r2, [pc, #112]	@ (800dac8 <HAL_DMA_IRQHandler+0xc9c>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d018      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a1a      	ldr	r2, [pc, #104]	@ (800dacc <HAL_DMA_IRQHandler+0xca0>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d013      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a19      	ldr	r2, [pc, #100]	@ (800dad0 <HAL_DMA_IRQHandler+0xca4>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d00e      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a17      	ldr	r2, [pc, #92]	@ (800dad4 <HAL_DMA_IRQHandler+0xca8>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d009      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a16      	ldr	r2, [pc, #88]	@ (800dad8 <HAL_DMA_IRQHandler+0xcac>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d004      	beq.n	800da8e <HAL_DMA_IRQHandler+0xc62>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a14      	ldr	r2, [pc, #80]	@ (800dadc <HAL_DMA_IRQHandler+0xcb0>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d128      	bne.n	800dae0 <HAL_DMA_IRQHandler+0xcb4>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f022 0214 	bic.w	r2, r2, #20
 800da9c:	601a      	str	r2, [r3, #0]
 800da9e:	e027      	b.n	800daf0 <HAL_DMA_IRQHandler+0xcc4>
 800daa0:	40020010 	.word	0x40020010
 800daa4:	40020028 	.word	0x40020028
 800daa8:	40020040 	.word	0x40020040
 800daac:	40020058 	.word	0x40020058
 800dab0:	40020070 	.word	0x40020070
 800dab4:	40020088 	.word	0x40020088
 800dab8:	400200a0 	.word	0x400200a0
 800dabc:	400200b8 	.word	0x400200b8
 800dac0:	40020410 	.word	0x40020410
 800dac4:	40020428 	.word	0x40020428
 800dac8:	40020440 	.word	0x40020440
 800dacc:	40020458 	.word	0x40020458
 800dad0:	40020470 	.word	0x40020470
 800dad4:	40020488 	.word	0x40020488
 800dad8:	400204a0 	.word	0x400204a0
 800dadc:	400204b8 	.word	0x400204b8
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f022 020a 	bic.w	r2, r2, #10
 800daee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2201      	movs	r2, #1
 800daf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db04:	2b00      	cmp	r3, #0
 800db06:	f000 8097 	beq.w	800dc38 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800db12:	e091      	b.n	800dc38 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db18:	f003 031f 	and.w	r3, r3, #31
 800db1c:	2208      	movs	r2, #8
 800db1e:	409a      	lsls	r2, r3
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	4013      	ands	r3, r2
 800db24:	2b00      	cmp	r3, #0
 800db26:	f000 8088 	beq.w	800dc3a <HAL_DMA_IRQHandler+0xe0e>
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	f003 0308 	and.w	r3, r3, #8
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 8082 	beq.w	800dc3a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a41      	ldr	r2, [pc, #260]	@ (800dc40 <HAL_DMA_IRQHandler+0xe14>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d04a      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a3f      	ldr	r2, [pc, #252]	@ (800dc44 <HAL_DMA_IRQHandler+0xe18>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d045      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a3e      	ldr	r2, [pc, #248]	@ (800dc48 <HAL_DMA_IRQHandler+0xe1c>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d040      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4a3c      	ldr	r2, [pc, #240]	@ (800dc4c <HAL_DMA_IRQHandler+0xe20>)
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d03b      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4a3b      	ldr	r2, [pc, #236]	@ (800dc50 <HAL_DMA_IRQHandler+0xe24>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d036      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a39      	ldr	r2, [pc, #228]	@ (800dc54 <HAL_DMA_IRQHandler+0xe28>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d031      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4a38      	ldr	r2, [pc, #224]	@ (800dc58 <HAL_DMA_IRQHandler+0xe2c>)
 800db78:	4293      	cmp	r3, r2
 800db7a:	d02c      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a36      	ldr	r2, [pc, #216]	@ (800dc5c <HAL_DMA_IRQHandler+0xe30>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d027      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a35      	ldr	r2, [pc, #212]	@ (800dc60 <HAL_DMA_IRQHandler+0xe34>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d022      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a33      	ldr	r2, [pc, #204]	@ (800dc64 <HAL_DMA_IRQHandler+0xe38>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d01d      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a32      	ldr	r2, [pc, #200]	@ (800dc68 <HAL_DMA_IRQHandler+0xe3c>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d018      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a30      	ldr	r2, [pc, #192]	@ (800dc6c <HAL_DMA_IRQHandler+0xe40>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d013      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4a2f      	ldr	r2, [pc, #188]	@ (800dc70 <HAL_DMA_IRQHandler+0xe44>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d00e      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4a2d      	ldr	r2, [pc, #180]	@ (800dc74 <HAL_DMA_IRQHandler+0xe48>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d009      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4a2c      	ldr	r2, [pc, #176]	@ (800dc78 <HAL_DMA_IRQHandler+0xe4c>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d004      	beq.n	800dbd6 <HAL_DMA_IRQHandler+0xdaa>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a2a      	ldr	r2, [pc, #168]	@ (800dc7c <HAL_DMA_IRQHandler+0xe50>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d108      	bne.n	800dbe8 <HAL_DMA_IRQHandler+0xdbc>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f022 021c 	bic.w	r2, r2, #28
 800dbe4:	601a      	str	r2, [r3, #0]
 800dbe6:	e007      	b.n	800dbf8 <HAL_DMA_IRQHandler+0xdcc>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f022 020e 	bic.w	r2, r2, #14
 800dbf6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dbfc:	f003 031f 	and.w	r3, r3, #31
 800dc00:	2201      	movs	r2, #1
 800dc02:	409a      	lsls	r2, r3
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2201      	movs	r2, #1
 800dc12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d009      	beq.n	800dc3a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	4798      	blx	r3
 800dc2e:	e004      	b.n	800dc3a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800dc30:	bf00      	nop
 800dc32:	e002      	b.n	800dc3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc34:	bf00      	nop
 800dc36:	e000      	b.n	800dc3a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc38:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800dc3a:	3728      	adds	r7, #40	@ 0x28
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	40020010 	.word	0x40020010
 800dc44:	40020028 	.word	0x40020028
 800dc48:	40020040 	.word	0x40020040
 800dc4c:	40020058 	.word	0x40020058
 800dc50:	40020070 	.word	0x40020070
 800dc54:	40020088 	.word	0x40020088
 800dc58:	400200a0 	.word	0x400200a0
 800dc5c:	400200b8 	.word	0x400200b8
 800dc60:	40020410 	.word	0x40020410
 800dc64:	40020428 	.word	0x40020428
 800dc68:	40020440 	.word	0x40020440
 800dc6c:	40020458 	.word	0x40020458
 800dc70:	40020470 	.word	0x40020470
 800dc74:	40020488 	.word	0x40020488
 800dc78:	400204a0 	.word	0x400204a0
 800dc7c:	400204b8 	.word	0x400204b8

0800dc80 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dc8e:	b2db      	uxtb	r3, r3
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b087      	sub	sp, #28
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcc6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dccc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a7f      	ldr	r2, [pc, #508]	@ (800ded0 <DMA_SetConfig+0x21c>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d072      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a7d      	ldr	r2, [pc, #500]	@ (800ded4 <DMA_SetConfig+0x220>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d06d      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a7c      	ldr	r2, [pc, #496]	@ (800ded8 <DMA_SetConfig+0x224>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d068      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a7a      	ldr	r2, [pc, #488]	@ (800dedc <DMA_SetConfig+0x228>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d063      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a79      	ldr	r2, [pc, #484]	@ (800dee0 <DMA_SetConfig+0x22c>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d05e      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a77      	ldr	r2, [pc, #476]	@ (800dee4 <DMA_SetConfig+0x230>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d059      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4a76      	ldr	r2, [pc, #472]	@ (800dee8 <DMA_SetConfig+0x234>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d054      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4a74      	ldr	r2, [pc, #464]	@ (800deec <DMA_SetConfig+0x238>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d04f      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a73      	ldr	r2, [pc, #460]	@ (800def0 <DMA_SetConfig+0x23c>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d04a      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a71      	ldr	r2, [pc, #452]	@ (800def4 <DMA_SetConfig+0x240>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d045      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a70      	ldr	r2, [pc, #448]	@ (800def8 <DMA_SetConfig+0x244>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d040      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a6e      	ldr	r2, [pc, #440]	@ (800defc <DMA_SetConfig+0x248>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d03b      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a6d      	ldr	r2, [pc, #436]	@ (800df00 <DMA_SetConfig+0x24c>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d036      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a6b      	ldr	r2, [pc, #428]	@ (800df04 <DMA_SetConfig+0x250>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d031      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a6a      	ldr	r2, [pc, #424]	@ (800df08 <DMA_SetConfig+0x254>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d02c      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a68      	ldr	r2, [pc, #416]	@ (800df0c <DMA_SetConfig+0x258>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d027      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a67      	ldr	r2, [pc, #412]	@ (800df10 <DMA_SetConfig+0x25c>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d022      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a65      	ldr	r2, [pc, #404]	@ (800df14 <DMA_SetConfig+0x260>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d01d      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a64      	ldr	r2, [pc, #400]	@ (800df18 <DMA_SetConfig+0x264>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d018      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a62      	ldr	r2, [pc, #392]	@ (800df1c <DMA_SetConfig+0x268>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d013      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a61      	ldr	r2, [pc, #388]	@ (800df20 <DMA_SetConfig+0x26c>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d00e      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a5f      	ldr	r2, [pc, #380]	@ (800df24 <DMA_SetConfig+0x270>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d009      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a5e      	ldr	r2, [pc, #376]	@ (800df28 <DMA_SetConfig+0x274>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d004      	beq.n	800ddbe <DMA_SetConfig+0x10a>
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a5c      	ldr	r2, [pc, #368]	@ (800df2c <DMA_SetConfig+0x278>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d101      	bne.n	800ddc2 <DMA_SetConfig+0x10e>
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e000      	b.n	800ddc4 <DMA_SetConfig+0x110>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00d      	beq.n	800dde4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ddd0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d004      	beq.n	800dde4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ddde:	68fa      	ldr	r2, [r7, #12]
 800dde0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800dde2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a39      	ldr	r2, [pc, #228]	@ (800ded0 <DMA_SetConfig+0x21c>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d04a      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a38      	ldr	r2, [pc, #224]	@ (800ded4 <DMA_SetConfig+0x220>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d045      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a36      	ldr	r2, [pc, #216]	@ (800ded8 <DMA_SetConfig+0x224>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d040      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4a35      	ldr	r2, [pc, #212]	@ (800dedc <DMA_SetConfig+0x228>)
 800de08:	4293      	cmp	r3, r2
 800de0a:	d03b      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a33      	ldr	r2, [pc, #204]	@ (800dee0 <DMA_SetConfig+0x22c>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d036      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a32      	ldr	r2, [pc, #200]	@ (800dee4 <DMA_SetConfig+0x230>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d031      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a30      	ldr	r2, [pc, #192]	@ (800dee8 <DMA_SetConfig+0x234>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d02c      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a2f      	ldr	r2, [pc, #188]	@ (800deec <DMA_SetConfig+0x238>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d027      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a2d      	ldr	r2, [pc, #180]	@ (800def0 <DMA_SetConfig+0x23c>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d022      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a2c      	ldr	r2, [pc, #176]	@ (800def4 <DMA_SetConfig+0x240>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d01d      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a2a      	ldr	r2, [pc, #168]	@ (800def8 <DMA_SetConfig+0x244>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d018      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a29      	ldr	r2, [pc, #164]	@ (800defc <DMA_SetConfig+0x248>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d013      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a27      	ldr	r2, [pc, #156]	@ (800df00 <DMA_SetConfig+0x24c>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d00e      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a26      	ldr	r2, [pc, #152]	@ (800df04 <DMA_SetConfig+0x250>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d009      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4a24      	ldr	r2, [pc, #144]	@ (800df08 <DMA_SetConfig+0x254>)
 800de76:	4293      	cmp	r3, r2
 800de78:	d004      	beq.n	800de84 <DMA_SetConfig+0x1d0>
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4a23      	ldr	r2, [pc, #140]	@ (800df0c <DMA_SetConfig+0x258>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d101      	bne.n	800de88 <DMA_SetConfig+0x1d4>
 800de84:	2301      	movs	r3, #1
 800de86:	e000      	b.n	800de8a <DMA_SetConfig+0x1d6>
 800de88:	2300      	movs	r3, #0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d059      	beq.n	800df42 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de92:	f003 031f 	and.w	r3, r3, #31
 800de96:	223f      	movs	r2, #63	@ 0x3f
 800de98:	409a      	lsls	r2, r3
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800deac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	683a      	ldr	r2, [r7, #0]
 800deb4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	689b      	ldr	r3, [r3, #8]
 800deba:	2b40      	cmp	r3, #64	@ 0x40
 800debc:	d138      	bne.n	800df30 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	68ba      	ldr	r2, [r7, #8]
 800decc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800dece:	e086      	b.n	800dfde <DMA_SetConfig+0x32a>
 800ded0:	40020010 	.word	0x40020010
 800ded4:	40020028 	.word	0x40020028
 800ded8:	40020040 	.word	0x40020040
 800dedc:	40020058 	.word	0x40020058
 800dee0:	40020070 	.word	0x40020070
 800dee4:	40020088 	.word	0x40020088
 800dee8:	400200a0 	.word	0x400200a0
 800deec:	400200b8 	.word	0x400200b8
 800def0:	40020410 	.word	0x40020410
 800def4:	40020428 	.word	0x40020428
 800def8:	40020440 	.word	0x40020440
 800defc:	40020458 	.word	0x40020458
 800df00:	40020470 	.word	0x40020470
 800df04:	40020488 	.word	0x40020488
 800df08:	400204a0 	.word	0x400204a0
 800df0c:	400204b8 	.word	0x400204b8
 800df10:	58025408 	.word	0x58025408
 800df14:	5802541c 	.word	0x5802541c
 800df18:	58025430 	.word	0x58025430
 800df1c:	58025444 	.word	0x58025444
 800df20:	58025458 	.word	0x58025458
 800df24:	5802546c 	.word	0x5802546c
 800df28:	58025480 	.word	0x58025480
 800df2c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	68ba      	ldr	r2, [r7, #8]
 800df36:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	60da      	str	r2, [r3, #12]
}
 800df40:	e04d      	b.n	800dfde <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4a29      	ldr	r2, [pc, #164]	@ (800dfec <DMA_SetConfig+0x338>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d022      	beq.n	800df92 <DMA_SetConfig+0x2de>
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a27      	ldr	r2, [pc, #156]	@ (800dff0 <DMA_SetConfig+0x33c>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d01d      	beq.n	800df92 <DMA_SetConfig+0x2de>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a26      	ldr	r2, [pc, #152]	@ (800dff4 <DMA_SetConfig+0x340>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d018      	beq.n	800df92 <DMA_SetConfig+0x2de>
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a24      	ldr	r2, [pc, #144]	@ (800dff8 <DMA_SetConfig+0x344>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d013      	beq.n	800df92 <DMA_SetConfig+0x2de>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a23      	ldr	r2, [pc, #140]	@ (800dffc <DMA_SetConfig+0x348>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d00e      	beq.n	800df92 <DMA_SetConfig+0x2de>
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a21      	ldr	r2, [pc, #132]	@ (800e000 <DMA_SetConfig+0x34c>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d009      	beq.n	800df92 <DMA_SetConfig+0x2de>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a20      	ldr	r2, [pc, #128]	@ (800e004 <DMA_SetConfig+0x350>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d004      	beq.n	800df92 <DMA_SetConfig+0x2de>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a1e      	ldr	r2, [pc, #120]	@ (800e008 <DMA_SetConfig+0x354>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d101      	bne.n	800df96 <DMA_SetConfig+0x2e2>
 800df92:	2301      	movs	r3, #1
 800df94:	e000      	b.n	800df98 <DMA_SetConfig+0x2e4>
 800df96:	2300      	movs	r3, #0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d020      	beq.n	800dfde <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfa0:	f003 031f 	and.w	r3, r3, #31
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	409a      	lsls	r2, r3
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	683a      	ldr	r2, [r7, #0]
 800dfb2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	2b40      	cmp	r3, #64	@ 0x40
 800dfba:	d108      	bne.n	800dfce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68ba      	ldr	r2, [r7, #8]
 800dfca:	60da      	str	r2, [r3, #12]
}
 800dfcc:	e007      	b.n	800dfde <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	68ba      	ldr	r2, [r7, #8]
 800dfd4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	60da      	str	r2, [r3, #12]
}
 800dfde:	bf00      	nop
 800dfe0:	371c      	adds	r7, #28
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	58025408 	.word	0x58025408
 800dff0:	5802541c 	.word	0x5802541c
 800dff4:	58025430 	.word	0x58025430
 800dff8:	58025444 	.word	0x58025444
 800dffc:	58025458 	.word	0x58025458
 800e000:	5802546c 	.word	0x5802546c
 800e004:	58025480 	.word	0x58025480
 800e008:	58025494 	.word	0x58025494

0800e00c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4a42      	ldr	r2, [pc, #264]	@ (800e124 <DMA_CalcBaseAndBitshift+0x118>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d04a      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	4a41      	ldr	r2, [pc, #260]	@ (800e128 <DMA_CalcBaseAndBitshift+0x11c>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d045      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a3f      	ldr	r2, [pc, #252]	@ (800e12c <DMA_CalcBaseAndBitshift+0x120>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d040      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	4a3e      	ldr	r2, [pc, #248]	@ (800e130 <DMA_CalcBaseAndBitshift+0x124>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d03b      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a3c      	ldr	r2, [pc, #240]	@ (800e134 <DMA_CalcBaseAndBitshift+0x128>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d036      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4a3b      	ldr	r2, [pc, #236]	@ (800e138 <DMA_CalcBaseAndBitshift+0x12c>)
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d031      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4a39      	ldr	r2, [pc, #228]	@ (800e13c <DMA_CalcBaseAndBitshift+0x130>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d02c      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4a38      	ldr	r2, [pc, #224]	@ (800e140 <DMA_CalcBaseAndBitshift+0x134>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d027      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a36      	ldr	r2, [pc, #216]	@ (800e144 <DMA_CalcBaseAndBitshift+0x138>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d022      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4a35      	ldr	r2, [pc, #212]	@ (800e148 <DMA_CalcBaseAndBitshift+0x13c>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d01d      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a33      	ldr	r2, [pc, #204]	@ (800e14c <DMA_CalcBaseAndBitshift+0x140>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d018      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a32      	ldr	r2, [pc, #200]	@ (800e150 <DMA_CalcBaseAndBitshift+0x144>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d013      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a30      	ldr	r2, [pc, #192]	@ (800e154 <DMA_CalcBaseAndBitshift+0x148>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d00e      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4a2f      	ldr	r2, [pc, #188]	@ (800e158 <DMA_CalcBaseAndBitshift+0x14c>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d009      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a2d      	ldr	r2, [pc, #180]	@ (800e15c <DMA_CalcBaseAndBitshift+0x150>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d004      	beq.n	800e0b4 <DMA_CalcBaseAndBitshift+0xa8>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4a2c      	ldr	r2, [pc, #176]	@ (800e160 <DMA_CalcBaseAndBitshift+0x154>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d101      	bne.n	800e0b8 <DMA_CalcBaseAndBitshift+0xac>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e000      	b.n	800e0ba <DMA_CalcBaseAndBitshift+0xae>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d024      	beq.n	800e108 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	3b10      	subs	r3, #16
 800e0c6:	4a27      	ldr	r2, [pc, #156]	@ (800e164 <DMA_CalcBaseAndBitshift+0x158>)
 800e0c8:	fba2 2303 	umull	r2, r3, r2, r3
 800e0cc:	091b      	lsrs	r3, r3, #4
 800e0ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f003 0307 	and.w	r3, r3, #7
 800e0d6:	4a24      	ldr	r2, [pc, #144]	@ (800e168 <DMA_CalcBaseAndBitshift+0x15c>)
 800e0d8:	5cd3      	ldrb	r3, [r2, r3]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2b03      	cmp	r3, #3
 800e0e4:	d908      	bls.n	800e0f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	4b1f      	ldr	r3, [pc, #124]	@ (800e16c <DMA_CalcBaseAndBitshift+0x160>)
 800e0ee:	4013      	ands	r3, r2
 800e0f0:	1d1a      	adds	r2, r3, #4
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	659a      	str	r2, [r3, #88]	@ 0x58
 800e0f6:	e00d      	b.n	800e114 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	4b1b      	ldr	r3, [pc, #108]	@ (800e16c <DMA_CalcBaseAndBitshift+0x160>)
 800e100:	4013      	ands	r3, r2
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	6593      	str	r3, [r2, #88]	@ 0x58
 800e106:	e005      	b.n	800e114 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3714      	adds	r7, #20
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr
 800e124:	40020010 	.word	0x40020010
 800e128:	40020028 	.word	0x40020028
 800e12c:	40020040 	.word	0x40020040
 800e130:	40020058 	.word	0x40020058
 800e134:	40020070 	.word	0x40020070
 800e138:	40020088 	.word	0x40020088
 800e13c:	400200a0 	.word	0x400200a0
 800e140:	400200b8 	.word	0x400200b8
 800e144:	40020410 	.word	0x40020410
 800e148:	40020428 	.word	0x40020428
 800e14c:	40020440 	.word	0x40020440
 800e150:	40020458 	.word	0x40020458
 800e154:	40020470 	.word	0x40020470
 800e158:	40020488 	.word	0x40020488
 800e15c:	400204a0 	.word	0x400204a0
 800e160:	400204b8 	.word	0x400204b8
 800e164:	aaaaaaab 	.word	0xaaaaaaab
 800e168:	0801ebfc 	.word	0x0801ebfc
 800e16c:	fffffc00 	.word	0xfffffc00

0800e170 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e178:	2300      	movs	r3, #0
 800e17a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d120      	bne.n	800e1c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e188:	2b03      	cmp	r3, #3
 800e18a:	d858      	bhi.n	800e23e <DMA_CheckFifoParam+0xce>
 800e18c:	a201      	add	r2, pc, #4	@ (adr r2, 800e194 <DMA_CheckFifoParam+0x24>)
 800e18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e192:	bf00      	nop
 800e194:	0800e1a5 	.word	0x0800e1a5
 800e198:	0800e1b7 	.word	0x0800e1b7
 800e19c:	0800e1a5 	.word	0x0800e1a5
 800e1a0:	0800e23f 	.word	0x0800e23f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d048      	beq.n	800e242 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e1b4:	e045      	b.n	800e242 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e1be:	d142      	bne.n	800e246 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e1c4:	e03f      	b.n	800e246 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	699b      	ldr	r3, [r3, #24]
 800e1ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e1ce:	d123      	bne.n	800e218 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1d4:	2b03      	cmp	r3, #3
 800e1d6:	d838      	bhi.n	800e24a <DMA_CheckFifoParam+0xda>
 800e1d8:	a201      	add	r2, pc, #4	@ (adr r2, 800e1e0 <DMA_CheckFifoParam+0x70>)
 800e1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1de:	bf00      	nop
 800e1e0:	0800e1f1 	.word	0x0800e1f1
 800e1e4:	0800e1f7 	.word	0x0800e1f7
 800e1e8:	0800e1f1 	.word	0x0800e1f1
 800e1ec:	0800e209 	.word	0x0800e209
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	73fb      	strb	r3, [r7, #15]
        break;
 800e1f4:	e030      	b.n	800e258 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d025      	beq.n	800e24e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e202:	2301      	movs	r3, #1
 800e204:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e206:	e022      	b.n	800e24e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e20c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e210:	d11f      	bne.n	800e252 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e212:	2301      	movs	r3, #1
 800e214:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e216:	e01c      	b.n	800e252 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	d902      	bls.n	800e226 <DMA_CheckFifoParam+0xb6>
 800e220:	2b03      	cmp	r3, #3
 800e222:	d003      	beq.n	800e22c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e224:	e018      	b.n	800e258 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e226:	2301      	movs	r3, #1
 800e228:	73fb      	strb	r3, [r7, #15]
        break;
 800e22a:	e015      	b.n	800e258 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e230:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e234:	2b00      	cmp	r3, #0
 800e236:	d00e      	beq.n	800e256 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e238:	2301      	movs	r3, #1
 800e23a:	73fb      	strb	r3, [r7, #15]
    break;
 800e23c:	e00b      	b.n	800e256 <DMA_CheckFifoParam+0xe6>
        break;
 800e23e:	bf00      	nop
 800e240:	e00a      	b.n	800e258 <DMA_CheckFifoParam+0xe8>
        break;
 800e242:	bf00      	nop
 800e244:	e008      	b.n	800e258 <DMA_CheckFifoParam+0xe8>
        break;
 800e246:	bf00      	nop
 800e248:	e006      	b.n	800e258 <DMA_CheckFifoParam+0xe8>
        break;
 800e24a:	bf00      	nop
 800e24c:	e004      	b.n	800e258 <DMA_CheckFifoParam+0xe8>
        break;
 800e24e:	bf00      	nop
 800e250:	e002      	b.n	800e258 <DMA_CheckFifoParam+0xe8>
        break;
 800e252:	bf00      	nop
 800e254:	e000      	b.n	800e258 <DMA_CheckFifoParam+0xe8>
    break;
 800e256:	bf00      	nop
    }
  }

  return status;
 800e258:	7bfb      	ldrb	r3, [r7, #15]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3714      	adds	r7, #20
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop

0800e268 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e268:	b480      	push	{r7}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4a38      	ldr	r2, [pc, #224]	@ (800e35c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d022      	beq.n	800e2c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a36      	ldr	r2, [pc, #216]	@ (800e360 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d01d      	beq.n	800e2c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4a35      	ldr	r2, [pc, #212]	@ (800e364 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d018      	beq.n	800e2c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	4a33      	ldr	r2, [pc, #204]	@ (800e368 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e29a:	4293      	cmp	r3, r2
 800e29c:	d013      	beq.n	800e2c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a32      	ldr	r2, [pc, #200]	@ (800e36c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d00e      	beq.n	800e2c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	4a30      	ldr	r2, [pc, #192]	@ (800e370 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d009      	beq.n	800e2c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4a2f      	ldr	r2, [pc, #188]	@ (800e374 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d004      	beq.n	800e2c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a2d      	ldr	r2, [pc, #180]	@ (800e378 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d101      	bne.n	800e2ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e000      	b.n	800e2cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d01a      	beq.n	800e306 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	3b08      	subs	r3, #8
 800e2d8:	4a28      	ldr	r2, [pc, #160]	@ (800e37c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e2da:	fba2 2303 	umull	r2, r3, r2, r3
 800e2de:	091b      	lsrs	r3, r3, #4
 800e2e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e2e2:	68fa      	ldr	r2, [r7, #12]
 800e2e4:	4b26      	ldr	r3, [pc, #152]	@ (800e380 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e2e6:	4413      	add	r3, r2
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	4a24      	ldr	r2, [pc, #144]	@ (800e384 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e2f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f003 031f 	and.w	r3, r3, #31
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	409a      	lsls	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e304:	e024      	b.n	800e350 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	3b10      	subs	r3, #16
 800e30e:	4a1e      	ldr	r2, [pc, #120]	@ (800e388 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e310:	fba2 2303 	umull	r2, r3, r2, r3
 800e314:	091b      	lsrs	r3, r3, #4
 800e316:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	4a1c      	ldr	r2, [pc, #112]	@ (800e38c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d806      	bhi.n	800e32e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	4a1b      	ldr	r2, [pc, #108]	@ (800e390 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d902      	bls.n	800e32e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	3308      	adds	r3, #8
 800e32c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	4b18      	ldr	r3, [pc, #96]	@ (800e394 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e332:	4413      	add	r3, r2
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	461a      	mov	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4a16      	ldr	r2, [pc, #88]	@ (800e398 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e340:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f003 031f 	and.w	r3, r3, #31
 800e348:	2201      	movs	r2, #1
 800e34a:	409a      	lsls	r2, r3
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e350:	bf00      	nop
 800e352:	3714      	adds	r7, #20
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr
 800e35c:	58025408 	.word	0x58025408
 800e360:	5802541c 	.word	0x5802541c
 800e364:	58025430 	.word	0x58025430
 800e368:	58025444 	.word	0x58025444
 800e36c:	58025458 	.word	0x58025458
 800e370:	5802546c 	.word	0x5802546c
 800e374:	58025480 	.word	0x58025480
 800e378:	58025494 	.word	0x58025494
 800e37c:	cccccccd 	.word	0xcccccccd
 800e380:	16009600 	.word	0x16009600
 800e384:	58025880 	.word	0x58025880
 800e388:	aaaaaaab 	.word	0xaaaaaaab
 800e38c:	400204b8 	.word	0x400204b8
 800e390:	4002040f 	.word	0x4002040f
 800e394:	10008200 	.word	0x10008200
 800e398:	40020880 	.word	0x40020880

0800e39c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d04a      	beq.n	800e448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2b08      	cmp	r3, #8
 800e3b6:	d847      	bhi.n	800e448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4a25      	ldr	r2, [pc, #148]	@ (800e454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d022      	beq.n	800e408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4a24      	ldr	r2, [pc, #144]	@ (800e458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d01d      	beq.n	800e408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a22      	ldr	r2, [pc, #136]	@ (800e45c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d018      	beq.n	800e408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a21      	ldr	r2, [pc, #132]	@ (800e460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d013      	beq.n	800e408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4a1f      	ldr	r2, [pc, #124]	@ (800e464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d00e      	beq.n	800e408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	4a1e      	ldr	r2, [pc, #120]	@ (800e468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d009      	beq.n	800e408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a1c      	ldr	r2, [pc, #112]	@ (800e46c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d004      	beq.n	800e408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4a1b      	ldr	r2, [pc, #108]	@ (800e470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e404:	4293      	cmp	r3, r2
 800e406:	d101      	bne.n	800e40c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e408:	2301      	movs	r3, #1
 800e40a:	e000      	b.n	800e40e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e40c:	2300      	movs	r3, #0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00a      	beq.n	800e428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e412:	68fa      	ldr	r2, [r7, #12]
 800e414:	4b17      	ldr	r3, [pc, #92]	@ (800e474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e416:	4413      	add	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	461a      	mov	r2, r3
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	4a15      	ldr	r2, [pc, #84]	@ (800e478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e424:	671a      	str	r2, [r3, #112]	@ 0x70
 800e426:	e009      	b.n	800e43c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e428:	68fa      	ldr	r2, [r7, #12]
 800e42a:	4b14      	ldr	r3, [pc, #80]	@ (800e47c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e42c:	4413      	add	r3, r2
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	461a      	mov	r2, r3
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4a11      	ldr	r2, [pc, #68]	@ (800e480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e43a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	3b01      	subs	r3, #1
 800e440:	2201      	movs	r2, #1
 800e442:	409a      	lsls	r2, r3
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800e448:	bf00      	nop
 800e44a:	3714      	adds	r7, #20
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr
 800e454:	58025408 	.word	0x58025408
 800e458:	5802541c 	.word	0x5802541c
 800e45c:	58025430 	.word	0x58025430
 800e460:	58025444 	.word	0x58025444
 800e464:	58025458 	.word	0x58025458
 800e468:	5802546c 	.word	0x5802546c
 800e46c:	58025480 	.word	0x58025480
 800e470:	58025494 	.word	0x58025494
 800e474:	1600963f 	.word	0x1600963f
 800e478:	58025940 	.word	0x58025940
 800e47c:	1000823f 	.word	0x1000823f
 800e480:	40020940 	.word	0x40020940

0800e484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800e484:	b480      	push	{r7}
 800e486:	b089      	sub	sp, #36	@ 0x24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e48e:	2300      	movs	r3, #0
 800e490:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e492:	4b86      	ldr	r3, [pc, #536]	@ (800e6ac <HAL_GPIO_Init+0x228>)
 800e494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e496:	e18c      	b.n	800e7b2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	2101      	movs	r1, #1
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a4:	4013      	ands	r3, r2
 800e4a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f000 817e 	beq.w	800e7ac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	f003 0303 	and.w	r3, r3, #3
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d005      	beq.n	800e4c8 <HAL_GPIO_Init+0x44>
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	f003 0303 	and.w	r3, r3, #3
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d130      	bne.n	800e52a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	005b      	lsls	r3, r3, #1
 800e4d2:	2203      	movs	r2, #3
 800e4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e4d8:	43db      	mvns	r3, r3
 800e4da:	69ba      	ldr	r2, [r7, #24]
 800e4dc:	4013      	ands	r3, r2
 800e4de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	68da      	ldr	r2, [r3, #12]
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	005b      	lsls	r3, r3, #1
 800e4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ec:	69ba      	ldr	r2, [r7, #24]
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	69ba      	ldr	r2, [r7, #24]
 800e4f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e4fe:	2201      	movs	r2, #1
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	fa02 f303 	lsl.w	r3, r2, r3
 800e506:	43db      	mvns	r3, r3
 800e508:	69ba      	ldr	r2, [r7, #24]
 800e50a:	4013      	ands	r3, r2
 800e50c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	091b      	lsrs	r3, r3, #4
 800e514:	f003 0201 	and.w	r2, r3, #1
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	fa02 f303 	lsl.w	r3, r2, r3
 800e51e:	69ba      	ldr	r2, [r7, #24]
 800e520:	4313      	orrs	r3, r2
 800e522:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	69ba      	ldr	r2, [r7, #24]
 800e528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	f003 0303 	and.w	r3, r3, #3
 800e532:	2b03      	cmp	r3, #3
 800e534:	d017      	beq.n	800e566 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	005b      	lsls	r3, r3, #1
 800e540:	2203      	movs	r2, #3
 800e542:	fa02 f303 	lsl.w	r3, r2, r3
 800e546:	43db      	mvns	r3, r3
 800e548:	69ba      	ldr	r2, [r7, #24]
 800e54a:	4013      	ands	r3, r2
 800e54c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	689a      	ldr	r2, [r3, #8]
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	005b      	lsls	r3, r3, #1
 800e556:	fa02 f303 	lsl.w	r3, r2, r3
 800e55a:	69ba      	ldr	r2, [r7, #24]
 800e55c:	4313      	orrs	r3, r2
 800e55e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	69ba      	ldr	r2, [r7, #24]
 800e564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	f003 0303 	and.w	r3, r3, #3
 800e56e:	2b02      	cmp	r3, #2
 800e570:	d123      	bne.n	800e5ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	08da      	lsrs	r2, r3, #3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	3208      	adds	r2, #8
 800e57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e57e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	f003 0307 	and.w	r3, r3, #7
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	220f      	movs	r2, #15
 800e58a:	fa02 f303 	lsl.w	r3, r2, r3
 800e58e:	43db      	mvns	r3, r3
 800e590:	69ba      	ldr	r2, [r7, #24]
 800e592:	4013      	ands	r3, r2
 800e594:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	691a      	ldr	r2, [r3, #16]
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	f003 0307 	and.w	r3, r3, #7
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e5a6:	69ba      	ldr	r2, [r7, #24]
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	08da      	lsrs	r2, r3, #3
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	3208      	adds	r2, #8
 800e5b4:	69b9      	ldr	r1, [r7, #24]
 800e5b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	005b      	lsls	r3, r3, #1
 800e5c4:	2203      	movs	r2, #3
 800e5c6:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ca:	43db      	mvns	r3, r3
 800e5cc:	69ba      	ldr	r2, [r7, #24]
 800e5ce:	4013      	ands	r3, r2
 800e5d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	f003 0203 	and.w	r2, r3, #3
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	005b      	lsls	r3, r3, #1
 800e5de:	fa02 f303 	lsl.w	r3, r2, r3
 800e5e2:	69ba      	ldr	r2, [r7, #24]
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	69ba      	ldr	r2, [r7, #24]
 800e5ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f000 80d8 	beq.w	800e7ac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e5fc:	4b2c      	ldr	r3, [pc, #176]	@ (800e6b0 <HAL_GPIO_Init+0x22c>)
 800e5fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e602:	4a2b      	ldr	r2, [pc, #172]	@ (800e6b0 <HAL_GPIO_Init+0x22c>)
 800e604:	f043 0302 	orr.w	r3, r3, #2
 800e608:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e60c:	4b28      	ldr	r3, [pc, #160]	@ (800e6b0 <HAL_GPIO_Init+0x22c>)
 800e60e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e612:	f003 0302 	and.w	r3, r3, #2
 800e616:	60fb      	str	r3, [r7, #12]
 800e618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e61a:	4a26      	ldr	r2, [pc, #152]	@ (800e6b4 <HAL_GPIO_Init+0x230>)
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	089b      	lsrs	r3, r3, #2
 800e620:	3302      	adds	r3, #2
 800e622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	f003 0303 	and.w	r3, r3, #3
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	220f      	movs	r2, #15
 800e632:	fa02 f303 	lsl.w	r3, r2, r3
 800e636:	43db      	mvns	r3, r3
 800e638:	69ba      	ldr	r2, [r7, #24]
 800e63a:	4013      	ands	r3, r2
 800e63c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4a1d      	ldr	r2, [pc, #116]	@ (800e6b8 <HAL_GPIO_Init+0x234>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d04a      	beq.n	800e6dc <HAL_GPIO_Init+0x258>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4a1c      	ldr	r2, [pc, #112]	@ (800e6bc <HAL_GPIO_Init+0x238>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d02b      	beq.n	800e6a6 <HAL_GPIO_Init+0x222>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4a1b      	ldr	r2, [pc, #108]	@ (800e6c0 <HAL_GPIO_Init+0x23c>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d025      	beq.n	800e6a2 <HAL_GPIO_Init+0x21e>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a1a      	ldr	r2, [pc, #104]	@ (800e6c4 <HAL_GPIO_Init+0x240>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d01f      	beq.n	800e69e <HAL_GPIO_Init+0x21a>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4a19      	ldr	r2, [pc, #100]	@ (800e6c8 <HAL_GPIO_Init+0x244>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d019      	beq.n	800e69a <HAL_GPIO_Init+0x216>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4a18      	ldr	r2, [pc, #96]	@ (800e6cc <HAL_GPIO_Init+0x248>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d013      	beq.n	800e696 <HAL_GPIO_Init+0x212>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a17      	ldr	r2, [pc, #92]	@ (800e6d0 <HAL_GPIO_Init+0x24c>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d00d      	beq.n	800e692 <HAL_GPIO_Init+0x20e>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	4a16      	ldr	r2, [pc, #88]	@ (800e6d4 <HAL_GPIO_Init+0x250>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d007      	beq.n	800e68e <HAL_GPIO_Init+0x20a>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a15      	ldr	r2, [pc, #84]	@ (800e6d8 <HAL_GPIO_Init+0x254>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d101      	bne.n	800e68a <HAL_GPIO_Init+0x206>
 800e686:	2309      	movs	r3, #9
 800e688:	e029      	b.n	800e6de <HAL_GPIO_Init+0x25a>
 800e68a:	230a      	movs	r3, #10
 800e68c:	e027      	b.n	800e6de <HAL_GPIO_Init+0x25a>
 800e68e:	2307      	movs	r3, #7
 800e690:	e025      	b.n	800e6de <HAL_GPIO_Init+0x25a>
 800e692:	2306      	movs	r3, #6
 800e694:	e023      	b.n	800e6de <HAL_GPIO_Init+0x25a>
 800e696:	2305      	movs	r3, #5
 800e698:	e021      	b.n	800e6de <HAL_GPIO_Init+0x25a>
 800e69a:	2304      	movs	r3, #4
 800e69c:	e01f      	b.n	800e6de <HAL_GPIO_Init+0x25a>
 800e69e:	2303      	movs	r3, #3
 800e6a0:	e01d      	b.n	800e6de <HAL_GPIO_Init+0x25a>
 800e6a2:	2302      	movs	r3, #2
 800e6a4:	e01b      	b.n	800e6de <HAL_GPIO_Init+0x25a>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	e019      	b.n	800e6de <HAL_GPIO_Init+0x25a>
 800e6aa:	bf00      	nop
 800e6ac:	58000080 	.word	0x58000080
 800e6b0:	58024400 	.word	0x58024400
 800e6b4:	58000400 	.word	0x58000400
 800e6b8:	58020000 	.word	0x58020000
 800e6bc:	58020400 	.word	0x58020400
 800e6c0:	58020800 	.word	0x58020800
 800e6c4:	58020c00 	.word	0x58020c00
 800e6c8:	58021000 	.word	0x58021000
 800e6cc:	58021400 	.word	0x58021400
 800e6d0:	58021800 	.word	0x58021800
 800e6d4:	58021c00 	.word	0x58021c00
 800e6d8:	58022400 	.word	0x58022400
 800e6dc:	2300      	movs	r3, #0
 800e6de:	69fa      	ldr	r2, [r7, #28]
 800e6e0:	f002 0203 	and.w	r2, r2, #3
 800e6e4:	0092      	lsls	r2, r2, #2
 800e6e6:	4093      	lsls	r3, r2
 800e6e8:	69ba      	ldr	r2, [r7, #24]
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e6ee:	4938      	ldr	r1, [pc, #224]	@ (800e7d0 <HAL_GPIO_Init+0x34c>)
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	089b      	lsrs	r3, r3, #2
 800e6f4:	3302      	adds	r3, #2
 800e6f6:	69ba      	ldr	r2, [r7, #24]
 800e6f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e6fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	43db      	mvns	r3, r3
 800e708:	69ba      	ldr	r2, [r7, #24]
 800e70a:	4013      	ands	r3, r2
 800e70c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e716:	2b00      	cmp	r3, #0
 800e718:	d003      	beq.n	800e722 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e71a:	69ba      	ldr	r2, [r7, #24]
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	4313      	orrs	r3, r2
 800e720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e722:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e72a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	43db      	mvns	r3, r3
 800e736:	69ba      	ldr	r2, [r7, #24]
 800e738:	4013      	ands	r3, r2
 800e73a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e744:	2b00      	cmp	r3, #0
 800e746:	d003      	beq.n	800e750 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e748:	69ba      	ldr	r2, [r7, #24]
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	4313      	orrs	r3, r2
 800e74e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e750:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	43db      	mvns	r3, r3
 800e762:	69ba      	ldr	r2, [r7, #24]
 800e764:	4013      	ands	r3, r2
 800e766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e770:	2b00      	cmp	r3, #0
 800e772:	d003      	beq.n	800e77c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e774:	69ba      	ldr	r2, [r7, #24]
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	4313      	orrs	r3, r2
 800e77a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	69ba      	ldr	r2, [r7, #24]
 800e780:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	43db      	mvns	r3, r3
 800e78c:	69ba      	ldr	r2, [r7, #24]
 800e78e:	4013      	ands	r3, r2
 800e790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d003      	beq.n	800e7a6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e79e:	69ba      	ldr	r2, [r7, #24]
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	69ba      	ldr	r2, [r7, #24]
 800e7aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f47f ae6b 	bne.w	800e498 <HAL_GPIO_Init+0x14>
  }
}
 800e7c2:	bf00      	nop
 800e7c4:	bf00      	nop
 800e7c6:	3724      	adds	r7, #36	@ 0x24
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr
 800e7d0:	58000400 	.word	0x58000400

0800e7d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	460b      	mov	r3, r1
 800e7de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	691a      	ldr	r2, [r3, #16]
 800e7e4:	887b      	ldrh	r3, [r7, #2]
 800e7e6:	4013      	ands	r3, r2
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d002      	beq.n	800e7f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	73fb      	strb	r3, [r7, #15]
 800e7f0:	e001      	b.n	800e7f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3714      	adds	r7, #20
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	460b      	mov	r3, r1
 800e80e:	807b      	strh	r3, [r7, #2]
 800e810:	4613      	mov	r3, r2
 800e812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e814:	787b      	ldrb	r3, [r7, #1]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d003      	beq.n	800e822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e81a:	887a      	ldrh	r2, [r7, #2]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e820:	e003      	b.n	800e82a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e822:	887b      	ldrh	r3, [r7, #2]
 800e824:	041a      	lsls	r2, r3, #16
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	619a      	str	r2, [r3, #24]
}
 800e82a:	bf00      	nop
 800e82c:	370c      	adds	r7, #12
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr

0800e836 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b082      	sub	sp, #8
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	4603      	mov	r3, r0
 800e83e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e844:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e848:	88fb      	ldrh	r3, [r7, #6]
 800e84a:	4013      	ands	r3, r2
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d008      	beq.n	800e862 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e854:	88fb      	ldrh	r3, [r7, #6]
 800e856:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e85a:	88fb      	ldrh	r3, [r7, #6]
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7f7 fd63 	bl	8006328 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e862:	bf00      	nop
 800e864:	3708      	adds	r7, #8
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
	...

0800e86c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d101      	bne.n	800e87e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e87a:	2301      	movs	r3, #1
 800e87c:	e08b      	b.n	800e996 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e884:	b2db      	uxtb	r3, r3
 800e886:	2b00      	cmp	r3, #0
 800e888:	d106      	bne.n	800e898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7f6 fb10 	bl	8004eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2224      	movs	r2, #36	@ 0x24
 800e89c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f022 0201 	bic.w	r2, r2, #1
 800e8ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	685a      	ldr	r2, [r3, #4]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e8bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	689a      	ldr	r2, [r3, #8]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e8cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	68db      	ldr	r3, [r3, #12]
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d107      	bne.n	800e8e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	689a      	ldr	r2, [r3, #8]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e8e2:	609a      	str	r2, [r3, #8]
 800e8e4:	e006      	b.n	800e8f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	689a      	ldr	r2, [r3, #8]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e8f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	2b02      	cmp	r3, #2
 800e8fa:	d108      	bne.n	800e90e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	685a      	ldr	r2, [r3, #4]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e90a:	605a      	str	r2, [r3, #4]
 800e90c:	e007      	b.n	800e91e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	685a      	ldr	r2, [r3, #4]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e91c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	6859      	ldr	r1, [r3, #4]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681a      	ldr	r2, [r3, #0]
 800e928:	4b1d      	ldr	r3, [pc, #116]	@ (800e9a0 <HAL_I2C_Init+0x134>)
 800e92a:	430b      	orrs	r3, r1
 800e92c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	68da      	ldr	r2, [r3, #12]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e93c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	691a      	ldr	r2, [r3, #16]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	695b      	ldr	r3, [r3, #20]
 800e946:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	699b      	ldr	r3, [r3, #24]
 800e94e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	430a      	orrs	r2, r1
 800e956:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	69d9      	ldr	r1, [r3, #28]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6a1a      	ldr	r2, [r3, #32]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	430a      	orrs	r2, r1
 800e966:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f042 0201 	orr.w	r2, r2, #1
 800e976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2220      	movs	r2, #32
 800e982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e994:	2300      	movs	r3, #0
}
 800e996:	4618      	mov	r0, r3
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	02008000 	.word	0x02008000

0800e9a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b088      	sub	sp, #32
 800e9a8:	af02      	add	r7, sp, #8
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	4608      	mov	r0, r1
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	817b      	strh	r3, [r7, #10]
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	813b      	strh	r3, [r7, #8]
 800e9ba:	4613      	mov	r3, r2
 800e9bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	2b20      	cmp	r3, #32
 800e9c8:	f040 80f9 	bne.w	800ebbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9cc:	6a3b      	ldr	r3, [r7, #32]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d002      	beq.n	800e9d8 <HAL_I2C_Mem_Write+0x34>
 800e9d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d105      	bne.n	800e9e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e0ed      	b.n	800ebc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d101      	bne.n	800e9f2 <HAL_I2C_Mem_Write+0x4e>
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	e0e6      	b.n	800ebc0 <HAL_I2C_Mem_Write+0x21c>
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e9fa:	f7fa fdbb 	bl	8009574 <HAL_GetTick>
 800e9fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	9300      	str	r3, [sp, #0]
 800ea04:	2319      	movs	r3, #25
 800ea06:	2201      	movs	r2, #1
 800ea08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f002 f818 	bl	8010a42 <I2C_WaitOnFlagUntilTimeout>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d001      	beq.n	800ea1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	e0d1      	b.n	800ebc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2221      	movs	r2, #33	@ 0x21
 800ea20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2240      	movs	r2, #64	@ 0x40
 800ea28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6a3a      	ldr	r2, [r7, #32]
 800ea36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ea3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2200      	movs	r2, #0
 800ea42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ea44:	88f8      	ldrh	r0, [r7, #6]
 800ea46:	893a      	ldrh	r2, [r7, #8]
 800ea48:	8979      	ldrh	r1, [r7, #10]
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	9301      	str	r3, [sp, #4]
 800ea4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea50:	9300      	str	r3, [sp, #0]
 800ea52:	4603      	mov	r3, r0
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f001 f965 	bl	800fd24 <I2C_RequestMemoryWrite>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d005      	beq.n	800ea6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2200      	movs	r2, #0
 800ea64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ea68:	2301      	movs	r3, #1
 800ea6a:	e0a9      	b.n	800ebc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	2bff      	cmp	r3, #255	@ 0xff
 800ea74:	d90e      	bls.n	800ea94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	22ff      	movs	r2, #255	@ 0xff
 800ea7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea80:	b2da      	uxtb	r2, r3
 800ea82:	8979      	ldrh	r1, [r7, #10]
 800ea84:	2300      	movs	r3, #0
 800ea86:	9300      	str	r3, [sp, #0]
 800ea88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea8c:	68f8      	ldr	r0, [r7, #12]
 800ea8e:	f002 f99b 	bl	8010dc8 <I2C_TransferConfig>
 800ea92:	e00f      	b.n	800eab4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea98:	b29a      	uxth	r2, r3
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaa2:	b2da      	uxtb	r2, r3
 800eaa4:	8979      	ldrh	r1, [r7, #10]
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eaae:	68f8      	ldr	r0, [r7, #12]
 800eab0:	f002 f98a 	bl	8010dc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eab4:	697a      	ldr	r2, [r7, #20]
 800eab6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eab8:	68f8      	ldr	r0, [r7, #12]
 800eaba:	f002 f81b 	bl	8010af4 <I2C_WaitOnTXISFlagUntilTimeout>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d001      	beq.n	800eac8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800eac4:	2301      	movs	r3, #1
 800eac6:	e07b      	b.n	800ebc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eacc:	781a      	ldrb	r2, [r3, #0]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ead8:	1c5a      	adds	r2, r3, #1
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	3b01      	subs	r3, #1
 800eae6:	b29a      	uxth	r2, r3
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	b29a      	uxth	r2, r3
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d034      	beq.n	800eb6c <HAL_I2C_Mem_Write+0x1c8>
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d130      	bne.n	800eb6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb10:	2200      	movs	r2, #0
 800eb12:	2180      	movs	r1, #128	@ 0x80
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f001 ff94 	bl	8010a42 <I2C_WaitOnFlagUntilTimeout>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d001      	beq.n	800eb24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800eb20:	2301      	movs	r3, #1
 800eb22:	e04d      	b.n	800ebc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	2bff      	cmp	r3, #255	@ 0xff
 800eb2c:	d90e      	bls.n	800eb4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	22ff      	movs	r2, #255	@ 0xff
 800eb32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb38:	b2da      	uxtb	r2, r3
 800eb3a:	8979      	ldrh	r1, [r7, #10]
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f002 f93f 	bl	8010dc8 <I2C_TransferConfig>
 800eb4a:	e00f      	b.n	800eb6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb50:	b29a      	uxth	r2, r3
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb5a:	b2da      	uxtb	r2, r3
 800eb5c:	8979      	ldrh	r1, [r7, #10]
 800eb5e:	2300      	movs	r3, #0
 800eb60:	9300      	str	r3, [sp, #0]
 800eb62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eb66:	68f8      	ldr	r0, [r7, #12]
 800eb68:	f002 f92e 	bl	8010dc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d19e      	bne.n	800eab4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eb76:	697a      	ldr	r2, [r7, #20]
 800eb78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	f002 f801 	bl	8010b82 <I2C_WaitOnSTOPFlagUntilTimeout>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d001      	beq.n	800eb8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800eb86:	2301      	movs	r3, #1
 800eb88:	e01a      	b.n	800ebc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2220      	movs	r2, #32
 800eb90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	6859      	ldr	r1, [r3, #4]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	4b0a      	ldr	r3, [pc, #40]	@ (800ebc8 <HAL_I2C_Mem_Write+0x224>)
 800eb9e:	400b      	ands	r3, r1
 800eba0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2220      	movs	r2, #32
 800eba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2200      	movs	r2, #0
 800ebae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	e000      	b.n	800ebc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ebbe:	2302      	movs	r3, #2
  }
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3718      	adds	r7, #24
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	fe00e800 	.word	0xfe00e800

0800ebcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b088      	sub	sp, #32
 800ebd0:	af02      	add	r7, sp, #8
 800ebd2:	60f8      	str	r0, [r7, #12]
 800ebd4:	4608      	mov	r0, r1
 800ebd6:	4611      	mov	r1, r2
 800ebd8:	461a      	mov	r2, r3
 800ebda:	4603      	mov	r3, r0
 800ebdc:	817b      	strh	r3, [r7, #10]
 800ebde:	460b      	mov	r3, r1
 800ebe0:	813b      	strh	r3, [r7, #8]
 800ebe2:	4613      	mov	r3, r2
 800ebe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	2b20      	cmp	r3, #32
 800ebf0:	f040 80fd 	bne.w	800edee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebf4:	6a3b      	ldr	r3, [r7, #32]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d002      	beq.n	800ec00 <HAL_I2C_Mem_Read+0x34>
 800ebfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d105      	bne.n	800ec0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	e0f1      	b.n	800edf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d101      	bne.n	800ec1a <HAL_I2C_Mem_Read+0x4e>
 800ec16:	2302      	movs	r3, #2
 800ec18:	e0ea      	b.n	800edf0 <HAL_I2C_Mem_Read+0x224>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	2201      	movs	r2, #1
 800ec1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ec22:	f7fa fca7 	bl	8009574 <HAL_GetTick>
 800ec26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	9300      	str	r3, [sp, #0]
 800ec2c:	2319      	movs	r3, #25
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f001 ff04 	bl	8010a42 <I2C_WaitOnFlagUntilTimeout>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d001      	beq.n	800ec44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ec40:	2301      	movs	r3, #1
 800ec42:	e0d5      	b.n	800edf0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2222      	movs	r2, #34	@ 0x22
 800ec48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2240      	movs	r2, #64	@ 0x40
 800ec50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2200      	movs	r2, #0
 800ec58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6a3a      	ldr	r2, [r7, #32]
 800ec5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ec64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ec6c:	88f8      	ldrh	r0, [r7, #6]
 800ec6e:	893a      	ldrh	r2, [r7, #8]
 800ec70:	8979      	ldrh	r1, [r7, #10]
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	9301      	str	r3, [sp, #4]
 800ec76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f001 f8a5 	bl	800fdcc <I2C_RequestMemoryRead>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d005      	beq.n	800ec94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ec90:	2301      	movs	r3, #1
 800ec92:	e0ad      	b.n	800edf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	2bff      	cmp	r3, #255	@ 0xff
 800ec9c:	d90e      	bls.n	800ecbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	22ff      	movs	r2, #255	@ 0xff
 800eca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eca8:	b2da      	uxtb	r2, r3
 800ecaa:	8979      	ldrh	r1, [r7, #10]
 800ecac:	4b52      	ldr	r3, [pc, #328]	@ (800edf8 <HAL_I2C_Mem_Read+0x22c>)
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ecb4:	68f8      	ldr	r0, [r7, #12]
 800ecb6:	f002 f887 	bl	8010dc8 <I2C_TransferConfig>
 800ecba:	e00f      	b.n	800ecdc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecc0:	b29a      	uxth	r2, r3
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	8979      	ldrh	r1, [r7, #10]
 800ecce:	4b4a      	ldr	r3, [pc, #296]	@ (800edf8 <HAL_I2C_Mem_Read+0x22c>)
 800ecd0:	9300      	str	r3, [sp, #0]
 800ecd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	f002 f876 	bl	8010dc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	9300      	str	r3, [sp, #0]
 800ece0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece2:	2200      	movs	r2, #0
 800ece4:	2104      	movs	r1, #4
 800ece6:	68f8      	ldr	r0, [r7, #12]
 800ece8:	f001 feab 	bl	8010a42 <I2C_WaitOnFlagUntilTimeout>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d001      	beq.n	800ecf6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e07c      	b.n	800edf0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed00:	b2d2      	uxtb	r2, r2
 800ed02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed08:	1c5a      	adds	r2, r3, #1
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed12:	3b01      	subs	r3, #1
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	3b01      	subs	r3, #1
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d034      	beq.n	800ed9c <HAL_I2C_Mem_Read+0x1d0>
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d130      	bne.n	800ed9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed40:	2200      	movs	r2, #0
 800ed42:	2180      	movs	r1, #128	@ 0x80
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	f001 fe7c 	bl	8010a42 <I2C_WaitOnFlagUntilTimeout>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d001      	beq.n	800ed54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ed50:	2301      	movs	r3, #1
 800ed52:	e04d      	b.n	800edf0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	2bff      	cmp	r3, #255	@ 0xff
 800ed5c:	d90e      	bls.n	800ed7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	22ff      	movs	r2, #255	@ 0xff
 800ed62:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed68:	b2da      	uxtb	r2, r3
 800ed6a:	8979      	ldrh	r1, [r7, #10]
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f002 f827 	bl	8010dc8 <I2C_TransferConfig>
 800ed7a:	e00f      	b.n	800ed9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed8a:	b2da      	uxtb	r2, r3
 800ed8c:	8979      	ldrh	r1, [r7, #10]
 800ed8e:	2300      	movs	r3, #0
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f002 f816 	bl	8010dc8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d19a      	bne.n	800ecdc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eda6:	697a      	ldr	r2, [r7, #20]
 800eda8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f001 fee9 	bl	8010b82 <I2C_WaitOnSTOPFlagUntilTimeout>
 800edb0:	4603      	mov	r3, r0
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d001      	beq.n	800edba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800edb6:	2301      	movs	r3, #1
 800edb8:	e01a      	b.n	800edf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	2220      	movs	r2, #32
 800edc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	6859      	ldr	r1, [r3, #4]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	4b0b      	ldr	r3, [pc, #44]	@ (800edfc <HAL_I2C_Mem_Read+0x230>)
 800edce:	400b      	ands	r3, r1
 800edd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2220      	movs	r2, #32
 800edd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2200      	movs	r2, #0
 800ede6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800edea:	2300      	movs	r3, #0
 800edec:	e000      	b.n	800edf0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800edee:	2302      	movs	r3, #2
  }
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3718      	adds	r7, #24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	80002400 	.word	0x80002400
 800edfc:	fe00e800 	.word	0xfe00e800

0800ee00 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b086      	sub	sp, #24
 800ee04:	af02      	add	r7, sp, #8
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	4608      	mov	r0, r1
 800ee0a:	4611      	mov	r1, r2
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	4603      	mov	r3, r0
 800ee10:	817b      	strh	r3, [r7, #10]
 800ee12:	460b      	mov	r3, r1
 800ee14:	813b      	strh	r3, [r7, #8]
 800ee16:	4613      	mov	r3, r2
 800ee18:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee20:	b2db      	uxtb	r3, r3
 800ee22:	2b20      	cmp	r3, #32
 800ee24:	d16a      	bne.n	800eefc <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <HAL_I2C_Mem_Write_IT+0x32>
 800ee2c:	8bbb      	ldrh	r3, [r7, #28]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d105      	bne.n	800ee3e <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee38:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e05f      	b.n	800eefe <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	699b      	ldr	r3, [r3, #24]
 800ee44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee4c:	d101      	bne.n	800ee52 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800ee4e:	2302      	movs	r3, #2
 800ee50:	e055      	b.n	800eefe <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d101      	bne.n	800ee60 <HAL_I2C_Mem_Write_IT+0x60>
 800ee5c:	2302      	movs	r3, #2
 800ee5e:	e04e      	b.n	800eefe <HAL_I2C_Mem_Write_IT+0xfe>
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2201      	movs	r2, #1
 800ee64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2221      	movs	r2, #33	@ 0x21
 800ee6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2240      	movs	r2, #64	@ 0x40
 800ee74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2200      	movs	r2, #0
 800ee82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	69ba      	ldr	r2, [r7, #24]
 800ee88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	8bba      	ldrh	r2, [r7, #28]
 800ee8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	4a1d      	ldr	r2, [pc, #116]	@ (800ef08 <HAL_I2C_Mem_Write_IT+0x108>)
 800ee94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	4a1c      	ldr	r2, [pc, #112]	@ (800ef0c <HAL_I2C_Mem_Write_IT+0x10c>)
 800ee9a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800ee9c:	897a      	ldrh	r2, [r7, #10]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eea2:	88fb      	ldrh	r3, [r7, #6]
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d109      	bne.n	800eebc <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800eea8:	893b      	ldrh	r3, [r7, #8]
 800eeaa:	b2da      	uxtb	r2, r3
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb8:	651a      	str	r2, [r3, #80]	@ 0x50
 800eeba:	e00b      	b.n	800eed4 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800eebc:	893b      	ldrh	r3, [r7, #8]
 800eebe:	0a1b      	lsrs	r3, r3, #8
 800eec0:	b29b      	uxth	r3, r3
 800eec2:	b2da      	uxtb	r2, r3
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800eeca:	893b      	ldrh	r3, [r7, #8]
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	461a      	mov	r2, r3
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800eed4:	88fb      	ldrh	r3, [r7, #6]
 800eed6:	b2da      	uxtb	r2, r3
 800eed8:	8979      	ldrh	r1, [r7, #10]
 800eeda:	4b0d      	ldr	r3, [pc, #52]	@ (800ef10 <HAL_I2C_Mem_Write_IT+0x110>)
 800eedc:	9300      	str	r3, [sp, #0]
 800eede:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f001 ff70 	bl	8010dc8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2200      	movs	r2, #0
 800eeec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800eef0:	2101      	movs	r1, #1
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f001 ff9a 	bl	8010e2c <I2C_Enable_IRQ>

    return HAL_OK;
 800eef8:	2300      	movs	r3, #0
 800eefa:	e000      	b.n	800eefe <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800eefc:	2302      	movs	r3, #2
  }
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	ffff0000 	.word	0xffff0000
 800ef0c:	0800f111 	.word	0x0800f111
 800ef10:	80002000 	.word	0x80002000

0800ef14 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b086      	sub	sp, #24
 800ef18:	af02      	add	r7, sp, #8
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	4608      	mov	r0, r1
 800ef1e:	4611      	mov	r1, r2
 800ef20:	461a      	mov	r2, r3
 800ef22:	4603      	mov	r3, r0
 800ef24:	817b      	strh	r3, [r7, #10]
 800ef26:	460b      	mov	r3, r1
 800ef28:	813b      	strh	r3, [r7, #8]
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	2b20      	cmp	r3, #32
 800ef38:	d166      	bne.n	800f008 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d002      	beq.n	800ef46 <HAL_I2C_Mem_Read_IT+0x32>
 800ef40:	8bbb      	ldrh	r3, [r7, #28]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d105      	bne.n	800ef52 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ef4c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e05b      	b.n	800f00a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	699b      	ldr	r3, [r3, #24]
 800ef58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ef5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef60:	d101      	bne.n	800ef66 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800ef62:	2302      	movs	r3, #2
 800ef64:	e051      	b.n	800f00a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d101      	bne.n	800ef74 <HAL_I2C_Mem_Read_IT+0x60>
 800ef70:	2302      	movs	r3, #2
 800ef72:	e04a      	b.n	800f00a <HAL_I2C_Mem_Read_IT+0xf6>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2222      	movs	r2, #34	@ 0x22
 800ef80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2240      	movs	r2, #64	@ 0x40
 800ef88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	69ba      	ldr	r2, [r7, #24]
 800ef96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	8bba      	ldrh	r2, [r7, #28]
 800ef9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	4a1c      	ldr	r2, [pc, #112]	@ (800f014 <HAL_I2C_Mem_Read_IT+0x100>)
 800efa2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	4a1c      	ldr	r2, [pc, #112]	@ (800f018 <HAL_I2C_Mem_Read_IT+0x104>)
 800efa8:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800efaa:	897a      	ldrh	r2, [r7, #10]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800efb0:	88fb      	ldrh	r3, [r7, #6]
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d109      	bne.n	800efca <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800efb6:	893b      	ldrh	r3, [r7, #8]
 800efb8:	b2da      	uxtb	r2, r3
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f04f 32ff 	mov.w	r2, #4294967295
 800efc6:	651a      	str	r2, [r3, #80]	@ 0x50
 800efc8:	e00b      	b.n	800efe2 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800efca:	893b      	ldrh	r3, [r7, #8]
 800efcc:	0a1b      	lsrs	r3, r3, #8
 800efce:	b29b      	uxth	r3, r3
 800efd0:	b2da      	uxtb	r2, r3
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800efd8:	893b      	ldrh	r3, [r7, #8]
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	461a      	mov	r2, r3
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800efe2:	88fb      	ldrh	r3, [r7, #6]
 800efe4:	b2da      	uxtb	r2, r3
 800efe6:	8979      	ldrh	r1, [r7, #10]
 800efe8:	4b0c      	ldr	r3, [pc, #48]	@ (800f01c <HAL_I2C_Mem_Read_IT+0x108>)
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	2300      	movs	r3, #0
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f001 feea 	bl	8010dc8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2200      	movs	r2, #0
 800eff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800effc:	2101      	movs	r1, #1
 800effe:	68f8      	ldr	r0, [r7, #12]
 800f000:	f001 ff14 	bl	8010e2c <I2C_Enable_IRQ>

    return HAL_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	e000      	b.n	800f00a <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800f008:	2302      	movs	r3, #2
  }
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3710      	adds	r7, #16
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	ffff0000 	.word	0xffff0000
 800f018:	0800f111 	.word	0x0800f111
 800f01c:	80002000 	.word	0x80002000

0800f020 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	699b      	ldr	r3, [r3, #24]
 800f02e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d005      	beq.n	800f04c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f044:	68ba      	ldr	r2, [r7, #8]
 800f046:	68f9      	ldr	r1, [r7, #12]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	4798      	blx	r3
  }
}
 800f04c:	bf00      	nop
 800f04e:	3710      	adds	r7, #16
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f05c:	bf00      	nop
 800f05e:	370c      	adds	r7, #12
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr

0800f068 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f068:	b480      	push	{r7}
 800f06a:	b083      	sub	sp, #12
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f070:	bf00      	nop
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f084:	bf00      	nop
 800f086:	370c      	adds	r7, #12
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f098:	bf00      	nop
 800f09a:	370c      	adds	r7, #12
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	70fb      	strb	r3, [r7, #3]
 800f0b0:	4613      	mov	r3, r2
 800f0b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f0b4:	bf00      	nop
 800f0b6:	370c      	adds	r7, #12
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b083      	sub	sp, #12
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f0c8:	bf00      	nop
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f0dc:	bf00      	nop
 800f0de:	370c      	adds	r7, #12
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f0f0:	bf00      	nop
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr

0800f0fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f104:	bf00      	nop
 800f106:	370c      	adds	r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b088      	sub	sp, #32
 800f114:	af02      	add	r7, sp, #8
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f11c:	4b8d      	ldr	r3, [pc, #564]	@ (800f354 <I2C_Mem_ISR_IT+0x244>)
 800f11e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d101      	bne.n	800f132 <I2C_Mem_ISR_IT+0x22>
 800f12e:	2302      	movs	r3, #2
 800f130:	e10c      	b.n	800f34c <I2C_Mem_ISR_IT+0x23c>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2201      	movs	r2, #1
 800f136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	f003 0310 	and.w	r3, r3, #16
 800f140:	2b00      	cmp	r3, #0
 800f142:	d012      	beq.n	800f16a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00d      	beq.n	800f16a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2210      	movs	r2, #16
 800f154:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f15a:	f043 0204 	orr.w	r2, r3, #4
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f162:	68f8      	ldr	r0, [r7, #12]
 800f164:	f001 fc2b 	bl	80109be <I2C_Flush_TXDR>
 800f168:	e0dd      	b.n	800f326 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	f003 0304 	and.w	r3, r3, #4
 800f170:	2b00      	cmp	r3, #0
 800f172:	d022      	beq.n	800f1ba <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d01d      	beq.n	800f1ba <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	f023 0304 	bic.w	r3, r3, #4
 800f184:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f190:	b2d2      	uxtb	r2, r2
 800f192:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f198:	1c5a      	adds	r2, r3, #1
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	b29a      	uxth	r2, r3
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f1b8:	e0b5      	b.n	800f326 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	f003 0302 	and.w	r3, r3, #2
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d02c      	beq.n	800f21e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d027      	beq.n	800f21e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d6:	d118      	bne.n	800f20a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1dc:	781a      	ldrb	r2, [r3, #0]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1e8:	1c5a      	adds	r2, r3, #1
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1f2:	3b01      	subs	r3, #1
 800f1f4:	b29a      	uxth	r2, r3
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	3b01      	subs	r3, #1
 800f202:	b29a      	uxth	r2, r3
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f208:	e08d      	b.n	800f326 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f212:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f04f 32ff 	mov.w	r2, #4294967295
 800f21a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f21c:	e083      	b.n	800f326 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f224:	2b00      	cmp	r3, #0
 800f226:	d03c      	beq.n	800f2a2 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d037      	beq.n	800f2a2 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f236:	b29b      	uxth	r3, r3
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d02c      	beq.n	800f296 <I2C_Mem_ISR_IT+0x186>
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f240:	2b00      	cmp	r3, #0
 800f242:	d128      	bne.n	800f296 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f248:	b29b      	uxth	r3, r3
 800f24a:	2bff      	cmp	r3, #255	@ 0xff
 800f24c:	d910      	bls.n	800f270 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	22ff      	movs	r2, #255	@ 0xff
 800f252:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f258:	b299      	uxth	r1, r3
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f25e:	b2da      	uxtb	r2, r3
 800f260:	2300      	movs	r3, #0
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f001 fdad 	bl	8010dc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f26e:	e017      	b.n	800f2a0 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f274:	b29a      	uxth	r2, r3
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f27e:	b299      	uxth	r1, r3
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f284:	b2da      	uxtb	r2, r3
 800f286:	2300      	movs	r3, #0
 800f288:	9300      	str	r3, [sp, #0]
 800f28a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f001 fd9a 	bl	8010dc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f294:	e004      	b.n	800f2a0 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f296:	2140      	movs	r1, #64	@ 0x40
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f001 fa79 	bl	8010790 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f29e:	e042      	b.n	800f326 <I2C_Mem_ISR_IT+0x216>
 800f2a0:	e041      	b.n	800f326 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d03c      	beq.n	800f326 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d037      	beq.n	800f326 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f2b6:	2101      	movs	r1, #1
 800f2b8:	68f8      	ldr	r0, [r7, #12]
 800f2ba:	f001 fe3b 	bl	8010f34 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f2be:	2102      	movs	r1, #2
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f001 fdb3 	bl	8010e2c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	2b22      	cmp	r3, #34	@ 0x22
 800f2d0:	d101      	bne.n	800f2d6 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800f2d2:	4b21      	ldr	r3, [pc, #132]	@ (800f358 <I2C_Mem_ISR_IT+0x248>)
 800f2d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	2bff      	cmp	r3, #255	@ 0xff
 800f2de:	d910      	bls.n	800f302 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	22ff      	movs	r2, #255	@ 0xff
 800f2e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f2ea:	b299      	uxth	r1, r3
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	9300      	str	r3, [sp, #0]
 800f2f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f2fa:	68f8      	ldr	r0, [r7, #12]
 800f2fc:	f001 fd64 	bl	8010dc8 <I2C_TransferConfig>
 800f300:	e011      	b.n	800f326 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f306:	b29a      	uxth	r2, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f310:	b299      	uxth	r1, r3
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f316:	b2da      	uxtb	r2, r3
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f001 fd51 	bl	8010dc8 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	f003 0320 	and.w	r3, r3, #32
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d008      	beq.n	800f342 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f336:	2b00      	cmp	r3, #0
 800f338:	d003      	beq.n	800f342 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f33a:	6939      	ldr	r1, [r7, #16]
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	f000 feb7 	bl	80100b0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2200      	movs	r2, #0
 800f346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f34a:	2300      	movs	r3, #0
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3718      	adds	r7, #24
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	80002000 	.word	0x80002000
 800f358:	80002400 	.word	0x80002400

0800f35c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b086      	sub	sp, #24
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f36c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f378:	2b01      	cmp	r3, #1
 800f37a:	d101      	bne.n	800f380 <I2C_Slave_ISR_IT+0x24>
 800f37c:	2302      	movs	r3, #2
 800f37e:	e0e2      	b.n	800f546 <I2C_Slave_ISR_IT+0x1ea>
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	2201      	movs	r2, #1
 800f384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	f003 0320 	and.w	r3, r3, #32
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d009      	beq.n	800f3a6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d004      	beq.n	800f3a6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f39c:	6939      	ldr	r1, [r7, #16]
 800f39e:	68f8      	ldr	r0, [r7, #12]
 800f3a0:	f000 ff4e 	bl	8010240 <I2C_ITSlaveCplt>
 800f3a4:	e0ca      	b.n	800f53c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	f003 0310 	and.w	r3, r3, #16
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d04b      	beq.n	800f448 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d046      	beq.n	800f448 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d128      	bne.n	800f416 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	2b28      	cmp	r3, #40	@ 0x28
 800f3ce:	d108      	bne.n	800f3e2 <I2C_Slave_ISR_IT+0x86>
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f3d6:	d104      	bne.n	800f3e2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f3d8:	6939      	ldr	r1, [r7, #16]
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	f001 f984 	bl	80106e8 <I2C_ITListenCplt>
 800f3e0:	e031      	b.n	800f446 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	2b29      	cmp	r3, #41	@ 0x29
 800f3ec:	d10e      	bne.n	800f40c <I2C_Slave_ISR_IT+0xb0>
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f3f4:	d00a      	beq.n	800f40c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2210      	movs	r2, #16
 800f3fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f001 fadd 	bl	80109be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f404:	68f8      	ldr	r0, [r7, #12]
 800f406:	f000 fdf6 	bl	800fff6 <I2C_ITSlaveSeqCplt>
 800f40a:	e01c      	b.n	800f446 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	2210      	movs	r2, #16
 800f412:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f414:	e08f      	b.n	800f536 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2210      	movs	r2, #16
 800f41c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f422:	f043 0204 	orr.w	r2, r3, #4
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d003      	beq.n	800f438 <I2C_Slave_ISR_IT+0xdc>
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f436:	d17e      	bne.n	800f536 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f43c:	4619      	mov	r1, r3
 800f43e:	68f8      	ldr	r0, [r7, #12]
 800f440:	f001 f9a6 	bl	8010790 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f444:	e077      	b.n	800f536 <I2C_Slave_ISR_IT+0x1da>
 800f446:	e076      	b.n	800f536 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	f003 0304 	and.w	r3, r3, #4
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d02f      	beq.n	800f4b2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d02a      	beq.n	800f4b2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f460:	b29b      	uxth	r3, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	d018      	beq.n	800f498 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f470:	b2d2      	uxtb	r2, r2
 800f472:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f478:	1c5a      	adds	r2, r3, #1
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f482:	3b01      	subs	r3, #1
 800f484:	b29a      	uxth	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f48e:	b29b      	uxth	r3, r3
 800f490:	3b01      	subs	r3, #1
 800f492:	b29a      	uxth	r2, r3
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d14b      	bne.n	800f53a <I2C_Slave_ISR_IT+0x1de>
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f4a8:	d047      	beq.n	800f53a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f4aa:	68f8      	ldr	r0, [r7, #12]
 800f4ac:	f000 fda3 	bl	800fff6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f4b0:	e043      	b.n	800f53a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	f003 0308 	and.w	r3, r3, #8
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d009      	beq.n	800f4d0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d004      	beq.n	800f4d0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f4c6:	6939      	ldr	r1, [r7, #16]
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f000 fcd3 	bl	800fe74 <I2C_ITAddrCplt>
 800f4ce:	e035      	b.n	800f53c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	f003 0302 	and.w	r3, r3, #2
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d030      	beq.n	800f53c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d02b      	beq.n	800f53c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d018      	beq.n	800f520 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4f2:	781a      	ldrb	r2, [r3, #0]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4fe:	1c5a      	adds	r2, r3, #1
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f508:	b29b      	uxth	r3, r3
 800f50a:	3b01      	subs	r3, #1
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f516:	3b01      	subs	r3, #1
 800f518:	b29a      	uxth	r2, r3
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f51e:	e00d      	b.n	800f53c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f526:	d002      	beq.n	800f52e <I2C_Slave_ISR_IT+0x1d2>
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d106      	bne.n	800f53c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f000 fd61 	bl	800fff6 <I2C_ITSlaveSeqCplt>
 800f534:	e002      	b.n	800f53c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f536:	bf00      	nop
 800f538:	e000      	b.n	800f53c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f53a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2200      	movs	r2, #0
 800f540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f544:	2300      	movs	r3, #0
}
 800f546:	4618      	mov	r0, r3
 800f548:	3718      	adds	r7, #24
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f54e:	b580      	push	{r7, lr}
 800f550:	b088      	sub	sp, #32
 800f552:	af02      	add	r7, sp, #8
 800f554:	60f8      	str	r0, [r7, #12]
 800f556:	60b9      	str	r1, [r7, #8]
 800f558:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f560:	2b01      	cmp	r3, #1
 800f562:	d101      	bne.n	800f568 <I2C_Master_ISR_DMA+0x1a>
 800f564:	2302      	movs	r3, #2
 800f566:	e0d9      	b.n	800f71c <I2C_Master_ISR_DMA+0x1ce>
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2201      	movs	r2, #1
 800f56c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	f003 0310 	and.w	r3, r3, #16
 800f576:	2b00      	cmp	r3, #0
 800f578:	d016      	beq.n	800f5a8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f580:	2b00      	cmp	r3, #0
 800f582:	d011      	beq.n	800f5a8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	2210      	movs	r2, #16
 800f58a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f590:	f043 0204 	orr.w	r2, r3, #4
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f598:	2120      	movs	r1, #32
 800f59a:	68f8      	ldr	r0, [r7, #12]
 800f59c:	f001 fc46 	bl	8010e2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f001 fa0c 	bl	80109be <I2C_Flush_TXDR>
 800f5a6:	e0b4      	b.n	800f712 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d071      	beq.n	800f696 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d06c      	beq.n	800f696 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f5ca:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d04e      	beq.n	800f674 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f5e2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	2bff      	cmp	r3, #255	@ 0xff
 800f5ec:	d906      	bls.n	800f5fc <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	22ff      	movs	r2, #255	@ 0xff
 800f5f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f5f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f5f8:	617b      	str	r3, [r7, #20]
 800f5fa:	e010      	b.n	800f61e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f600:	b29a      	uxth	r2, r3
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f60a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f60e:	d003      	beq.n	800f618 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f614:	617b      	str	r3, [r7, #20]
 800f616:	e002      	b.n	800f61e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f618:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f61c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f622:	b2da      	uxtb	r2, r3
 800f624:	8a79      	ldrh	r1, [r7, #18]
 800f626:	2300      	movs	r3, #0
 800f628:	9300      	str	r3, [sp, #0]
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	68f8      	ldr	r0, [r7, #12]
 800f62e:	f001 fbcb 	bl	8010dc8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f636:	b29a      	uxth	r2, r3
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f63c:	1ad3      	subs	r3, r2, r3
 800f63e:	b29a      	uxth	r2, r3
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	2b22      	cmp	r3, #34	@ 0x22
 800f64e:	d108      	bne.n	800f662 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f65e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f660:	e057      	b.n	800f712 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f670:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f672:	e04e      	b.n	800f712 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f67e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f682:	d003      	beq.n	800f68c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f684:	68f8      	ldr	r0, [r7, #12]
 800f686:	f000 fc79 	bl	800ff7c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f68a:	e042      	b.n	800f712 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f68c:	2140      	movs	r1, #64	@ 0x40
 800f68e:	68f8      	ldr	r0, [r7, #12]
 800f690:	f001 f87e 	bl	8010790 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f694:	e03d      	b.n	800f712 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d028      	beq.n	800f6f2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d023      	beq.n	800f6f2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d119      	bne.n	800f6e8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f6be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f6c2:	d025      	beq.n	800f710 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f6cc:	d108      	bne.n	800f6e0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	685a      	ldr	r2, [r3, #4]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f6dc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f6de:	e017      	b.n	800f710 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f000 fc4b 	bl	800ff7c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f6e6:	e013      	b.n	800f710 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f6e8:	2140      	movs	r1, #64	@ 0x40
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f001 f850 	bl	8010790 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f6f0:	e00e      	b.n	800f710 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	f003 0320 	and.w	r3, r3, #32
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00a      	beq.n	800f712 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f702:	2b00      	cmp	r3, #0
 800f704:	d005      	beq.n	800f712 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f706:	68b9      	ldr	r1, [r7, #8]
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f000 fcd1 	bl	80100b0 <I2C_ITMasterCplt>
 800f70e:	e000      	b.n	800f712 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f710:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2200      	movs	r2, #0
 800f716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f71a:	2300      	movs	r3, #0
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3718      	adds	r7, #24
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}

0800f724 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b088      	sub	sp, #32
 800f728:	af02      	add	r7, sp, #8
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f730:	4b8d      	ldr	r3, [pc, #564]	@ (800f968 <I2C_Mem_ISR_DMA+0x244>)
 800f732:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d101      	bne.n	800f742 <I2C_Mem_ISR_DMA+0x1e>
 800f73e:	2302      	movs	r3, #2
 800f740:	e10e      	b.n	800f960 <I2C_Mem_ISR_DMA+0x23c>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2201      	movs	r2, #1
 800f746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	f003 0310 	and.w	r3, r3, #16
 800f750:	2b00      	cmp	r3, #0
 800f752:	d016      	beq.n	800f782 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d011      	beq.n	800f782 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	2210      	movs	r2, #16
 800f764:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f76a:	f043 0204 	orr.w	r2, r3, #4
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f772:	2120      	movs	r1, #32
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f001 fb59 	bl	8010e2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f001 f91f 	bl	80109be <I2C_Flush_TXDR>
 800f780:	e0e9      	b.n	800f956 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	f003 0302 	and.w	r3, r3, #2
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d00e      	beq.n	800f7aa <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f792:	2b00      	cmp	r3, #0
 800f794:	d009      	beq.n	800f7aa <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f79e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f7a6:	651a      	str	r2, [r3, #80]	@ 0x50
 800f7a8:	e0d5      	b.n	800f956 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d05f      	beq.n	800f874 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d05a      	beq.n	800f874 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f7be:	2101      	movs	r1, #1
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f001 fbb7 	bl	8010f34 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f7c6:	2110      	movs	r1, #16
 800f7c8:	68f8      	ldr	r0, [r7, #12]
 800f7ca:	f001 fb2f 	bl	8010e2c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d048      	beq.n	800f86a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	2bff      	cmp	r3, #255	@ 0xff
 800f7e0:	d910      	bls.n	800f804 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	22ff      	movs	r2, #255	@ 0xff
 800f7e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7ec:	b299      	uxth	r1, r3
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7f2:	b2da      	uxtb	r2, r3
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	9300      	str	r3, [sp, #0]
 800f7f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f7fc:	68f8      	ldr	r0, [r7, #12]
 800f7fe:	f001 fae3 	bl	8010dc8 <I2C_TransferConfig>
 800f802:	e011      	b.n	800f828 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f808:	b29a      	uxth	r2, r3
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f812:	b299      	uxth	r1, r3
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f818:	b2da      	uxtb	r2, r3
 800f81a:	2300      	movs	r3, #0
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f822:	68f8      	ldr	r0, [r7, #12]
 800f824:	f001 fad0 	bl	8010dc8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f82c:	b29a      	uxth	r2, r3
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f832:	1ad3      	subs	r3, r2, r3
 800f834:	b29a      	uxth	r2, r3
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f840:	b2db      	uxtb	r3, r3
 800f842:	2b22      	cmp	r3, #34	@ 0x22
 800f844:	d108      	bne.n	800f858 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f854:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f856:	e07e      	b.n	800f956 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f866:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f868:	e075      	b.n	800f956 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f86a:	2140      	movs	r1, #64	@ 0x40
 800f86c:	68f8      	ldr	r0, [r7, #12]
 800f86e:	f000 ff8f 	bl	8010790 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f872:	e070      	b.n	800f956 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d05d      	beq.n	800f93a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f884:	2b00      	cmp	r3, #0
 800f886:	d058      	beq.n	800f93a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f888:	2101      	movs	r1, #1
 800f88a:	68f8      	ldr	r0, [r7, #12]
 800f88c:	f001 fb52 	bl	8010f34 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f890:	2110      	movs	r1, #16
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	f001 faca 	bl	8010e2c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	2b22      	cmp	r3, #34	@ 0x22
 800f8a2:	d101      	bne.n	800f8a8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f8a4:	4b31      	ldr	r3, [pc, #196]	@ (800f96c <I2C_Mem_ISR_DMA+0x248>)
 800f8a6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8ac:	b29b      	uxth	r3, r3
 800f8ae:	2bff      	cmp	r3, #255	@ 0xff
 800f8b0:	d910      	bls.n	800f8d4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	22ff      	movs	r2, #255	@ 0xff
 800f8b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8bc:	b299      	uxth	r1, r3
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8c2:	b2da      	uxtb	r2, r3
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	9300      	str	r3, [sp, #0]
 800f8c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f8cc:	68f8      	ldr	r0, [r7, #12]
 800f8ce:	f001 fa7b 	bl	8010dc8 <I2C_TransferConfig>
 800f8d2:	e011      	b.n	800f8f8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8d8:	b29a      	uxth	r2, r3
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8e2:	b299      	uxth	r1, r3
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8e8:	b2da      	uxtb	r2, r3
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	9300      	str	r3, [sp, #0]
 800f8ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f001 fa68 	bl	8010dc8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8fc:	b29a      	uxth	r2, r3
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f902:	1ad3      	subs	r3, r2, r3
 800f904:	b29a      	uxth	r2, r3
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f910:	b2db      	uxtb	r3, r3
 800f912:	2b22      	cmp	r3, #34	@ 0x22
 800f914:	d108      	bne.n	800f928 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f924:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f926:	e016      	b.n	800f956 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f936:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f938:	e00d      	b.n	800f956 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	f003 0320 	and.w	r3, r3, #32
 800f940:	2b00      	cmp	r3, #0
 800f942:	d008      	beq.n	800f956 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d003      	beq.n	800f956 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f94e:	68b9      	ldr	r1, [r7, #8]
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f000 fbad 	bl	80100b0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2200      	movs	r2, #0
 800f95a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f95e:	2300      	movs	r3, #0
}
 800f960:	4618      	mov	r0, r3
 800f962:	3718      	adds	r7, #24
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}
 800f968:	80002000 	.word	0x80002000
 800f96c:	80002400 	.word	0x80002400

0800f970 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b088      	sub	sp, #32
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f980:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f982:	2300      	movs	r3, #0
 800f984:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d101      	bne.n	800f994 <I2C_Slave_ISR_DMA+0x24>
 800f990:	2302      	movs	r3, #2
 800f992:	e1c2      	b.n	800fd1a <I2C_Slave_ISR_DMA+0x3aa>
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2201      	movs	r2, #1
 800f998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	f003 0320 	and.w	r3, r3, #32
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d009      	beq.n	800f9ba <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d004      	beq.n	800f9ba <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f9b0:	68b9      	ldr	r1, [r7, #8]
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f000 fc44 	bl	8010240 <I2C_ITSlaveCplt>
 800f9b8:	e1aa      	b.n	800fd10 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	f003 0310 	and.w	r3, r3, #16
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	f000 8197 	beq.w	800fcf4 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f000 8191 	beq.w	800fcf4 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d105      	bne.n	800f9e8 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	f000 817f 	beq.w	800fce6 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d07b      	beq.n	800fae8 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d076      	beq.n	800fae8 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a74      	ldr	r2, [pc, #464]	@ (800fbd4 <I2C_Slave_ISR_DMA+0x264>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d059      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4a72      	ldr	r2, [pc, #456]	@ (800fbd8 <I2C_Slave_ISR_DMA+0x268>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d053      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a70      	ldr	r2, [pc, #448]	@ (800fbdc <I2C_Slave_ISR_DMA+0x26c>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d04d      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	4a6e      	ldr	r2, [pc, #440]	@ (800fbe0 <I2C_Slave_ISR_DMA+0x270>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d047      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	4a6c      	ldr	r2, [pc, #432]	@ (800fbe4 <I2C_Slave_ISR_DMA+0x274>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d041      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a6a      	ldr	r2, [pc, #424]	@ (800fbe8 <I2C_Slave_ISR_DMA+0x278>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d03b      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4a68      	ldr	r2, [pc, #416]	@ (800fbec <I2C_Slave_ISR_DMA+0x27c>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d035      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	4a66      	ldr	r2, [pc, #408]	@ (800fbf0 <I2C_Slave_ISR_DMA+0x280>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d02f      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4a64      	ldr	r2, [pc, #400]	@ (800fbf4 <I2C_Slave_ISR_DMA+0x284>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d029      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4a62      	ldr	r2, [pc, #392]	@ (800fbf8 <I2C_Slave_ISR_DMA+0x288>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d023      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4a60      	ldr	r2, [pc, #384]	@ (800fbfc <I2C_Slave_ISR_DMA+0x28c>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d01d      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4a5e      	ldr	r2, [pc, #376]	@ (800fc00 <I2C_Slave_ISR_DMA+0x290>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d017      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4a5c      	ldr	r2, [pc, #368]	@ (800fc04 <I2C_Slave_ISR_DMA+0x294>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d011      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	4a5a      	ldr	r2, [pc, #360]	@ (800fc08 <I2C_Slave_ISR_DMA+0x298>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d00b      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4a58      	ldr	r2, [pc, #352]	@ (800fc0c <I2C_Slave_ISR_DMA+0x29c>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d005      	beq.n	800faba <I2C_Slave_ISR_DMA+0x14a>
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4a56      	ldr	r2, [pc, #344]	@ (800fc10 <I2C_Slave_ISR_DMA+0x2a0>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d109      	bne.n	800face <I2C_Slave_ISR_DMA+0x15e>
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	bf0c      	ite	eq
 800fac6:	2301      	moveq	r3, #1
 800fac8:	2300      	movne	r3, #0
 800faca:	b2db      	uxtb	r3, r3
 800facc:	e008      	b.n	800fae0 <I2C_Slave_ISR_DMA+0x170>
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	bf0c      	ite	eq
 800fada:	2301      	moveq	r3, #1
 800fadc:	2300      	movne	r3, #0
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d001      	beq.n	800fae8 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800fae4:	2301      	movs	r3, #1
 800fae6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faec:	2b00      	cmp	r3, #0
 800faee:	f000 809e 	beq.w	800fc2e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	f000 8098 	beq.w	800fc2e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a33      	ldr	r2, [pc, #204]	@ (800fbd4 <I2C_Slave_ISR_DMA+0x264>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d059      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4a31      	ldr	r2, [pc, #196]	@ (800fbd8 <I2C_Slave_ISR_DMA+0x268>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d053      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4a2f      	ldr	r2, [pc, #188]	@ (800fbdc <I2C_Slave_ISR_DMA+0x26c>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d04d      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4a2d      	ldr	r2, [pc, #180]	@ (800fbe0 <I2C_Slave_ISR_DMA+0x270>)
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d047      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4a2b      	ldr	r2, [pc, #172]	@ (800fbe4 <I2C_Slave_ISR_DMA+0x274>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d041      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4a29      	ldr	r2, [pc, #164]	@ (800fbe8 <I2C_Slave_ISR_DMA+0x278>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d03b      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a27      	ldr	r2, [pc, #156]	@ (800fbec <I2C_Slave_ISR_DMA+0x27c>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d035      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a25      	ldr	r2, [pc, #148]	@ (800fbf0 <I2C_Slave_ISR_DMA+0x280>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d02f      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4a23      	ldr	r2, [pc, #140]	@ (800fbf4 <I2C_Slave_ISR_DMA+0x284>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d029      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4a21      	ldr	r2, [pc, #132]	@ (800fbf8 <I2C_Slave_ISR_DMA+0x288>)
 800fb72:	4293      	cmp	r3, r2
 800fb74:	d023      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	4a1f      	ldr	r2, [pc, #124]	@ (800fbfc <I2C_Slave_ISR_DMA+0x28c>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d01d      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a1d      	ldr	r2, [pc, #116]	@ (800fc00 <I2C_Slave_ISR_DMA+0x290>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d017      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4a1b      	ldr	r2, [pc, #108]	@ (800fc04 <I2C_Slave_ISR_DMA+0x294>)
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d011      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4a19      	ldr	r2, [pc, #100]	@ (800fc08 <I2C_Slave_ISR_DMA+0x298>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d00b      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a17      	ldr	r2, [pc, #92]	@ (800fc0c <I2C_Slave_ISR_DMA+0x29c>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d005      	beq.n	800fbbe <I2C_Slave_ISR_DMA+0x24e>
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	4a15      	ldr	r2, [pc, #84]	@ (800fc10 <I2C_Slave_ISR_DMA+0x2a0>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d12a      	bne.n	800fc14 <I2C_Slave_ISR_DMA+0x2a4>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	bf0c      	ite	eq
 800fbca:	2301      	moveq	r3, #1
 800fbcc:	2300      	movne	r3, #0
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	e029      	b.n	800fc26 <I2C_Slave_ISR_DMA+0x2b6>
 800fbd2:	bf00      	nop
 800fbd4:	40020010 	.word	0x40020010
 800fbd8:	40020028 	.word	0x40020028
 800fbdc:	40020040 	.word	0x40020040
 800fbe0:	40020058 	.word	0x40020058
 800fbe4:	40020070 	.word	0x40020070
 800fbe8:	40020088 	.word	0x40020088
 800fbec:	400200a0 	.word	0x400200a0
 800fbf0:	400200b8 	.word	0x400200b8
 800fbf4:	40020410 	.word	0x40020410
 800fbf8:	40020428 	.word	0x40020428
 800fbfc:	40020440 	.word	0x40020440
 800fc00:	40020458 	.word	0x40020458
 800fc04:	40020470 	.word	0x40020470
 800fc08:	40020488 	.word	0x40020488
 800fc0c:	400204a0 	.word	0x400204a0
 800fc10:	400204b8 	.word	0x400204b8
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	bf0c      	ite	eq
 800fc20:	2301      	moveq	r3, #1
 800fc22:	2300      	movne	r3, #0
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d001      	beq.n	800fc2e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800fc2e:	69fb      	ldr	r3, [r7, #28]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d128      	bne.n	800fc86 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	2b28      	cmp	r3, #40	@ 0x28
 800fc3e:	d108      	bne.n	800fc52 <I2C_Slave_ISR_DMA+0x2e2>
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc46:	d104      	bne.n	800fc52 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800fc48:	68b9      	ldr	r1, [r7, #8]
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f000 fd4c 	bl	80106e8 <I2C_ITListenCplt>
 800fc50:	e048      	b.n	800fce4 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	2b29      	cmp	r3, #41	@ 0x29
 800fc5c:	d10e      	bne.n	800fc7c <I2C_Slave_ISR_DMA+0x30c>
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fc64:	d00a      	beq.n	800fc7c <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2210      	movs	r2, #16
 800fc6c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f000 fea5 	bl	80109be <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800fc74:	68f8      	ldr	r0, [r7, #12]
 800fc76:	f000 f9be 	bl	800fff6 <I2C_ITSlaveSeqCplt>
 800fc7a:	e033      	b.n	800fce4 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2210      	movs	r2, #16
 800fc82:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800fc84:	e034      	b.n	800fcf0 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2210      	movs	r2, #16
 800fc8c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc92:	f043 0204 	orr.w	r2, r3, #4
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fca0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d003      	beq.n	800fcb0 <I2C_Slave_ISR_DMA+0x340>
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fcae:	d11f      	bne.n	800fcf0 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fcb0:	7dfb      	ldrb	r3, [r7, #23]
 800fcb2:	2b21      	cmp	r3, #33	@ 0x21
 800fcb4:	d002      	beq.n	800fcbc <I2C_Slave_ISR_DMA+0x34c>
 800fcb6:	7dfb      	ldrb	r3, [r7, #23]
 800fcb8:	2b29      	cmp	r3, #41	@ 0x29
 800fcba:	d103      	bne.n	800fcc4 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2221      	movs	r2, #33	@ 0x21
 800fcc0:	631a      	str	r2, [r3, #48]	@ 0x30
 800fcc2:	e008      	b.n	800fcd6 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fcc4:	7dfb      	ldrb	r3, [r7, #23]
 800fcc6:	2b22      	cmp	r3, #34	@ 0x22
 800fcc8:	d002      	beq.n	800fcd0 <I2C_Slave_ISR_DMA+0x360>
 800fcca:	7dfb      	ldrb	r3, [r7, #23]
 800fccc:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcce:	d102      	bne.n	800fcd6 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2222      	movs	r2, #34	@ 0x22
 800fcd4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcda:	4619      	mov	r1, r3
 800fcdc:	68f8      	ldr	r0, [r7, #12]
 800fcde:	f000 fd57 	bl	8010790 <I2C_ITError>
      if (treatdmanack == 1U)
 800fce2:	e005      	b.n	800fcf0 <I2C_Slave_ISR_DMA+0x380>
 800fce4:	e004      	b.n	800fcf0 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2210      	movs	r2, #16
 800fcec:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fcee:	e00f      	b.n	800fd10 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800fcf0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fcf2:	e00d      	b.n	800fd10 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	f003 0308 	and.w	r3, r3, #8
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d008      	beq.n	800fd10 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d003      	beq.n	800fd10 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800fd08:	68b9      	ldr	r1, [r7, #8]
 800fd0a:	68f8      	ldr	r0, [r7, #12]
 800fd0c:	f000 f8b2 	bl	800fe74 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3720      	adds	r7, #32
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}
 800fd22:	bf00      	nop

0800fd24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b086      	sub	sp, #24
 800fd28:	af02      	add	r7, sp, #8
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	4608      	mov	r0, r1
 800fd2e:	4611      	mov	r1, r2
 800fd30:	461a      	mov	r2, r3
 800fd32:	4603      	mov	r3, r0
 800fd34:	817b      	strh	r3, [r7, #10]
 800fd36:	460b      	mov	r3, r1
 800fd38:	813b      	strh	r3, [r7, #8]
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fd3e:	88fb      	ldrh	r3, [r7, #6]
 800fd40:	b2da      	uxtb	r2, r3
 800fd42:	8979      	ldrh	r1, [r7, #10]
 800fd44:	4b20      	ldr	r3, [pc, #128]	@ (800fdc8 <I2C_RequestMemoryWrite+0xa4>)
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f001 f83b 	bl	8010dc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd52:	69fa      	ldr	r2, [r7, #28]
 800fd54:	69b9      	ldr	r1, [r7, #24]
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f000 fecc 	bl	8010af4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d001      	beq.n	800fd66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fd62:	2301      	movs	r3, #1
 800fd64:	e02c      	b.n	800fdc0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fd66:	88fb      	ldrh	r3, [r7, #6]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d105      	bne.n	800fd78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd6c:	893b      	ldrh	r3, [r7, #8]
 800fd6e:	b2da      	uxtb	r2, r3
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	629a      	str	r2, [r3, #40]	@ 0x28
 800fd76:	e015      	b.n	800fda4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fd78:	893b      	ldrh	r3, [r7, #8]
 800fd7a:	0a1b      	lsrs	r3, r3, #8
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	b2da      	uxtb	r2, r3
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd86:	69fa      	ldr	r2, [r7, #28]
 800fd88:	69b9      	ldr	r1, [r7, #24]
 800fd8a:	68f8      	ldr	r0, [r7, #12]
 800fd8c:	f000 feb2 	bl	8010af4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fd90:	4603      	mov	r3, r0
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d001      	beq.n	800fd9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800fd96:	2301      	movs	r3, #1
 800fd98:	e012      	b.n	800fdc0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd9a:	893b      	ldrh	r3, [r7, #8]
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	2180      	movs	r1, #128	@ 0x80
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f000 fe47 	bl	8010a42 <I2C_WaitOnFlagUntilTimeout>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d001      	beq.n	800fdbe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	e000      	b.n	800fdc0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fdbe:	2300      	movs	r3, #0
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3710      	adds	r7, #16
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	80002000 	.word	0x80002000

0800fdcc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b086      	sub	sp, #24
 800fdd0:	af02      	add	r7, sp, #8
 800fdd2:	60f8      	str	r0, [r7, #12]
 800fdd4:	4608      	mov	r0, r1
 800fdd6:	4611      	mov	r1, r2
 800fdd8:	461a      	mov	r2, r3
 800fdda:	4603      	mov	r3, r0
 800fddc:	817b      	strh	r3, [r7, #10]
 800fdde:	460b      	mov	r3, r1
 800fde0:	813b      	strh	r3, [r7, #8]
 800fde2:	4613      	mov	r3, r2
 800fde4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fde6:	88fb      	ldrh	r3, [r7, #6]
 800fde8:	b2da      	uxtb	r2, r3
 800fdea:	8979      	ldrh	r1, [r7, #10]
 800fdec:	4b20      	ldr	r3, [pc, #128]	@ (800fe70 <I2C_RequestMemoryRead+0xa4>)
 800fdee:	9300      	str	r3, [sp, #0]
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	68f8      	ldr	r0, [r7, #12]
 800fdf4:	f000 ffe8 	bl	8010dc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fdf8:	69fa      	ldr	r2, [r7, #28]
 800fdfa:	69b9      	ldr	r1, [r7, #24]
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f000 fe79 	bl	8010af4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d001      	beq.n	800fe0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	e02c      	b.n	800fe66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fe0c:	88fb      	ldrh	r3, [r7, #6]
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d105      	bne.n	800fe1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fe12:	893b      	ldrh	r3, [r7, #8]
 800fe14:	b2da      	uxtb	r2, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	629a      	str	r2, [r3, #40]	@ 0x28
 800fe1c:	e015      	b.n	800fe4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fe1e:	893b      	ldrh	r3, [r7, #8]
 800fe20:	0a1b      	lsrs	r3, r3, #8
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	b2da      	uxtb	r2, r3
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fe2c:	69fa      	ldr	r2, [r7, #28]
 800fe2e:	69b9      	ldr	r1, [r7, #24]
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	f000 fe5f 	bl	8010af4 <I2C_WaitOnTXISFlagUntilTimeout>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d001      	beq.n	800fe40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	e012      	b.n	800fe66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fe40:	893b      	ldrh	r3, [r7, #8]
 800fe42:	b2da      	uxtb	r2, r3
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fe4a:	69fb      	ldr	r3, [r7, #28]
 800fe4c:	9300      	str	r3, [sp, #0]
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	2200      	movs	r2, #0
 800fe52:	2140      	movs	r1, #64	@ 0x40
 800fe54:	68f8      	ldr	r0, [r7, #12]
 800fe56:	f000 fdf4 	bl	8010a42 <I2C_WaitOnFlagUntilTimeout>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d001      	beq.n	800fe64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fe60:	2301      	movs	r3, #1
 800fe62:	e000      	b.n	800fe66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fe64:	2300      	movs	r3, #0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3710      	adds	r7, #16
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	80002000 	.word	0x80002000

0800fe74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fe8a:	2b28      	cmp	r3, #40	@ 0x28
 800fe8c:	d16a      	bne.n	800ff64 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	699b      	ldr	r3, [r3, #24]
 800fe94:	0c1b      	lsrs	r3, r3, #16
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	f003 0301 	and.w	r3, r3, #1
 800fe9c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	699b      	ldr	r3, [r3, #24]
 800fea4:	0c1b      	lsrs	r3, r3, #16
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800feac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	689b      	ldr	r3, [r3, #8]
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800feba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	68db      	ldr	r3, [r3, #12]
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fec8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	2b02      	cmp	r3, #2
 800fed0:	d138      	bne.n	800ff44 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fed2:	897b      	ldrh	r3, [r7, #10]
 800fed4:	09db      	lsrs	r3, r3, #7
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	89bb      	ldrh	r3, [r7, #12]
 800feda:	4053      	eors	r3, r2
 800fedc:	b29b      	uxth	r3, r3
 800fede:	f003 0306 	and.w	r3, r3, #6
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d11c      	bne.n	800ff20 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fee6:	897b      	ldrh	r3, [r7, #10]
 800fee8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800feee:	1c5a      	adds	r2, r3, #1
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fef8:	2b02      	cmp	r3, #2
 800fefa:	d13b      	bne.n	800ff74 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2200      	movs	r2, #0
 800ff00:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	2208      	movs	r2, #8
 800ff08:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff12:	89ba      	ldrh	r2, [r7, #12]
 800ff14:	7bfb      	ldrb	r3, [r7, #15]
 800ff16:	4619      	mov	r1, r3
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f7ff f8c3 	bl	800f0a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ff1e:	e029      	b.n	800ff74 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800ff20:	893b      	ldrh	r3, [r7, #8]
 800ff22:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ff24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f001 f803 	bl	8010f34 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff36:	89ba      	ldrh	r2, [r7, #12]
 800ff38:	7bfb      	ldrb	r3, [r7, #15]
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f7ff f8b1 	bl	800f0a4 <HAL_I2C_AddrCallback>
}
 800ff42:	e017      	b.n	800ff74 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ff44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f000 fff3 	bl	8010f34 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ff56:	89ba      	ldrh	r2, [r7, #12]
 800ff58:	7bfb      	ldrb	r3, [r7, #15]
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f7ff f8a1 	bl	800f0a4 <HAL_I2C_AddrCallback>
}
 800ff62:	e007      	b.n	800ff74 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2208      	movs	r2, #8
 800ff6a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800ff74:	bf00      	nop
 800ff76:	3710      	adds	r7, #16
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2200      	movs	r2, #0
 800ff88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff92:	b2db      	uxtb	r3, r3
 800ff94:	2b21      	cmp	r3, #33	@ 0x21
 800ff96:	d115      	bne.n	800ffc4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2220      	movs	r2, #32
 800ff9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2211      	movs	r2, #17
 800ffa4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ffac:	2101      	movs	r1, #1
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 ffc0 	bl	8010f34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f7ff f849 	bl	800f054 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ffc2:	e014      	b.n	800ffee <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2220      	movs	r2, #32
 800ffc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2212      	movs	r2, #18
 800ffd0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ffd8:	2102      	movs	r1, #2
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f000 ffaa 	bl	8010f34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7ff f83d 	bl	800f068 <HAL_I2C_MasterRxCpltCallback>
}
 800ffee:	bf00      	nop
 800fff0:	3708      	adds	r7, #8
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b084      	sub	sp, #16
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2200      	movs	r2, #0
 801000a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010014:	2b00      	cmp	r3, #0
 8010016:	d008      	beq.n	801002a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010026:	601a      	str	r2, [r3, #0]
 8010028:	e00c      	b.n	8010044 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010030:	2b00      	cmp	r3, #0
 8010032:	d007      	beq.n	8010044 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010042:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801004a:	b2db      	uxtb	r3, r3
 801004c:	2b29      	cmp	r3, #41	@ 0x29
 801004e:	d112      	bne.n	8010076 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2228      	movs	r2, #40	@ 0x28
 8010054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2221      	movs	r2, #33	@ 0x21
 801005c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801005e:	2101      	movs	r1, #1
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f000 ff67 	bl	8010f34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f7ff f804 	bl	800f07c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010074:	e017      	b.n	80100a6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801007c:	b2db      	uxtb	r3, r3
 801007e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010080:	d111      	bne.n	80100a6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2228      	movs	r2, #40	@ 0x28
 8010086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2222      	movs	r2, #34	@ 0x22
 801008e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010090:	2102      	movs	r1, #2
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f000 ff4e 	bl	8010f34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f7fe fff5 	bl	800f090 <HAL_I2C_SlaveRxCpltCallback>
}
 80100a6:	bf00      	nop
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
	...

080100b0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b086      	sub	sp, #24
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	2220      	movs	r2, #32
 80100c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	2b21      	cmp	r3, #33	@ 0x21
 80100d0:	d107      	bne.n	80100e2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80100d2:	2101      	movs	r1, #1
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 ff2d 	bl	8010f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2211      	movs	r2, #17
 80100de:	631a      	str	r2, [r3, #48]	@ 0x30
 80100e0:	e00c      	b.n	80100fc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	2b22      	cmp	r3, #34	@ 0x22
 80100ec:	d106      	bne.n	80100fc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80100ee:	2102      	movs	r1, #2
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f000 ff1f 	bl	8010f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2212      	movs	r2, #18
 80100fa:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	6859      	ldr	r1, [r3, #4]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	4b4c      	ldr	r3, [pc, #304]	@ (8010238 <I2C_ITMasterCplt+0x188>)
 8010108:	400b      	ands	r3, r1
 801010a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2200      	movs	r2, #0
 8010110:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	4a49      	ldr	r2, [pc, #292]	@ (801023c <I2C_ITMasterCplt+0x18c>)
 8010116:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	f003 0310 	and.w	r3, r3, #16
 801011e:	2b00      	cmp	r3, #0
 8010120:	d009      	beq.n	8010136 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2210      	movs	r2, #16
 8010128:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801012e:	f043 0204 	orr.w	r2, r3, #4
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801013c:	b2db      	uxtb	r3, r3
 801013e:	2b60      	cmp	r3, #96	@ 0x60
 8010140:	d10a      	bne.n	8010158 <I2C_ITMasterCplt+0xa8>
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	f003 0304 	and.w	r3, r3, #4
 8010148:	2b00      	cmp	r3, #0
 801014a:	d005      	beq.n	8010158 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010152:	b2db      	uxtb	r3, r3
 8010154:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8010156:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f000 fc30 	bl	80109be <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010162:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b60      	cmp	r3, #96	@ 0x60
 801016e:	d002      	beq.n	8010176 <I2C_ITMasterCplt+0xc6>
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d006      	beq.n	8010184 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801017a:	4619      	mov	r1, r3
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 fb07 	bl	8010790 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010182:	e054      	b.n	801022e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801018a:	b2db      	uxtb	r3, r3
 801018c:	2b21      	cmp	r3, #33	@ 0x21
 801018e:	d124      	bne.n	80101da <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2220      	movs	r2, #32
 8010194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2200      	movs	r2, #0
 801019c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	2b40      	cmp	r3, #64	@ 0x40
 80101a8:	d10b      	bne.n	80101c2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2200      	movs	r2, #0
 80101ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2200      	movs	r2, #0
 80101b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7fe ff8a 	bl	800f0d4 <HAL_I2C_MemTxCpltCallback>
}
 80101c0:	e035      	b.n	801022e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2200      	movs	r2, #0
 80101c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7fe ff3e 	bl	800f054 <HAL_I2C_MasterTxCpltCallback>
}
 80101d8:	e029      	b.n	801022e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	2b22      	cmp	r3, #34	@ 0x22
 80101e4:	d123      	bne.n	801022e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2220      	movs	r2, #32
 80101ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2200      	movs	r2, #0
 80101f2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80101fa:	b2db      	uxtb	r3, r3
 80101fc:	2b40      	cmp	r3, #64	@ 0x40
 80101fe:	d10b      	bne.n	8010218 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2200      	movs	r2, #0
 8010204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f7f6 fa4d 	bl	80066b0 <HAL_I2C_MemRxCpltCallback>
}
 8010216:	e00a      	b.n	801022e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2200      	movs	r2, #0
 8010224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f7fe ff1d 	bl	800f068 <HAL_I2C_MasterRxCpltCallback>
}
 801022e:	bf00      	nop
 8010230:	3718      	adds	r7, #24
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	fe00e800 	.word	0xfe00e800
 801023c:	ffff0000 	.word	0xffff0000

08010240 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b086      	sub	sp, #24
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801025a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010262:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	2220      	movs	r2, #32
 801026a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801026c:	7afb      	ldrb	r3, [r7, #11]
 801026e:	2b21      	cmp	r3, #33	@ 0x21
 8010270:	d002      	beq.n	8010278 <I2C_ITSlaveCplt+0x38>
 8010272:	7afb      	ldrb	r3, [r7, #11]
 8010274:	2b29      	cmp	r3, #41	@ 0x29
 8010276:	d108      	bne.n	801028a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8010278:	f248 0101 	movw	r1, #32769	@ 0x8001
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 fe59 	bl	8010f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2221      	movs	r2, #33	@ 0x21
 8010286:	631a      	str	r2, [r3, #48]	@ 0x30
 8010288:	e019      	b.n	80102be <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801028a:	7afb      	ldrb	r3, [r7, #11]
 801028c:	2b22      	cmp	r3, #34	@ 0x22
 801028e:	d002      	beq.n	8010296 <I2C_ITSlaveCplt+0x56>
 8010290:	7afb      	ldrb	r3, [r7, #11]
 8010292:	2b2a      	cmp	r3, #42	@ 0x2a
 8010294:	d108      	bne.n	80102a8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8010296:	f248 0102 	movw	r1, #32770	@ 0x8002
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f000 fe4a 	bl	8010f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2222      	movs	r2, #34	@ 0x22
 80102a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80102a6:	e00a      	b.n	80102be <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80102a8:	7afb      	ldrb	r3, [r7, #11]
 80102aa:	2b28      	cmp	r3, #40	@ 0x28
 80102ac:	d107      	bne.n	80102be <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80102ae:	f248 0103 	movw	r1, #32771	@ 0x8003
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 fe3e 	bl	8010f34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2200      	movs	r2, #0
 80102bc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	685a      	ldr	r2, [r3, #4]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80102cc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	6859      	ldr	r1, [r3, #4]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	4b7f      	ldr	r3, [pc, #508]	@ (80104d8 <I2C_ITSlaveCplt+0x298>)
 80102da:	400b      	ands	r3, r1
 80102dc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 fb6d 	bl	80109be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d07a      	beq.n	80103e4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80102fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010302:	2b00      	cmp	r3, #0
 8010304:	f000 8111 	beq.w	801052a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	4a73      	ldr	r2, [pc, #460]	@ (80104dc <I2C_ITSlaveCplt+0x29c>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d059      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4a71      	ldr	r2, [pc, #452]	@ (80104e0 <I2C_ITSlaveCplt+0x2a0>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d053      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4a6f      	ldr	r2, [pc, #444]	@ (80104e4 <I2C_ITSlaveCplt+0x2a4>)
 8010328:	4293      	cmp	r3, r2
 801032a:	d04d      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	4a6d      	ldr	r2, [pc, #436]	@ (80104e8 <I2C_ITSlaveCplt+0x2a8>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d047      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4a6b      	ldr	r2, [pc, #428]	@ (80104ec <I2C_ITSlaveCplt+0x2ac>)
 8010340:	4293      	cmp	r3, r2
 8010342:	d041      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4a69      	ldr	r2, [pc, #420]	@ (80104f0 <I2C_ITSlaveCplt+0x2b0>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d03b      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4a67      	ldr	r2, [pc, #412]	@ (80104f4 <I2C_ITSlaveCplt+0x2b4>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d035      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4a65      	ldr	r2, [pc, #404]	@ (80104f8 <I2C_ITSlaveCplt+0x2b8>)
 8010364:	4293      	cmp	r3, r2
 8010366:	d02f      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	4a63      	ldr	r2, [pc, #396]	@ (80104fc <I2C_ITSlaveCplt+0x2bc>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d029      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	4a61      	ldr	r2, [pc, #388]	@ (8010500 <I2C_ITSlaveCplt+0x2c0>)
 801037c:	4293      	cmp	r3, r2
 801037e:	d023      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4a5f      	ldr	r2, [pc, #380]	@ (8010504 <I2C_ITSlaveCplt+0x2c4>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d01d      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	4a5d      	ldr	r2, [pc, #372]	@ (8010508 <I2C_ITSlaveCplt+0x2c8>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d017      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	4a5b      	ldr	r2, [pc, #364]	@ (801050c <I2C_ITSlaveCplt+0x2cc>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d011      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	4a59      	ldr	r2, [pc, #356]	@ (8010510 <I2C_ITSlaveCplt+0x2d0>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d00b      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a57      	ldr	r2, [pc, #348]	@ (8010514 <I2C_ITSlaveCplt+0x2d4>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d005      	beq.n	80103c8 <I2C_ITSlaveCplt+0x188>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	4a55      	ldr	r2, [pc, #340]	@ (8010518 <I2C_ITSlaveCplt+0x2d8>)
 80103c4:	4293      	cmp	r3, r2
 80103c6:	d105      	bne.n	80103d4 <I2C_ITSlaveCplt+0x194>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	e004      	b.n	80103de <I2C_ITSlaveCplt+0x19e>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	b29b      	uxth	r3, r3
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	8553      	strh	r3, [r2, #42]	@ 0x2a
 80103e2:	e0a2      	b.n	801052a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	f000 809d 	beq.w	801052a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80103fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010404:	2b00      	cmp	r3, #0
 8010406:	f000 8090 	beq.w	801052a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a32      	ldr	r2, [pc, #200]	@ (80104dc <I2C_ITSlaveCplt+0x29c>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d059      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4a30      	ldr	r2, [pc, #192]	@ (80104e0 <I2C_ITSlaveCplt+0x2a0>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d053      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a2e      	ldr	r2, [pc, #184]	@ (80104e4 <I2C_ITSlaveCplt+0x2a4>)
 801042a:	4293      	cmp	r3, r2
 801042c:	d04d      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a2c      	ldr	r2, [pc, #176]	@ (80104e8 <I2C_ITSlaveCplt+0x2a8>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d047      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4a2a      	ldr	r2, [pc, #168]	@ (80104ec <I2C_ITSlaveCplt+0x2ac>)
 8010442:	4293      	cmp	r3, r2
 8010444:	d041      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a28      	ldr	r2, [pc, #160]	@ (80104f0 <I2C_ITSlaveCplt+0x2b0>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d03b      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a26      	ldr	r2, [pc, #152]	@ (80104f4 <I2C_ITSlaveCplt+0x2b4>)
 801045a:	4293      	cmp	r3, r2
 801045c:	d035      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4a24      	ldr	r2, [pc, #144]	@ (80104f8 <I2C_ITSlaveCplt+0x2b8>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d02f      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a22      	ldr	r2, [pc, #136]	@ (80104fc <I2C_ITSlaveCplt+0x2bc>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d029      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4a20      	ldr	r2, [pc, #128]	@ (8010500 <I2C_ITSlaveCplt+0x2c0>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d023      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4a1e      	ldr	r2, [pc, #120]	@ (8010504 <I2C_ITSlaveCplt+0x2c4>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d01d      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	4a1c      	ldr	r2, [pc, #112]	@ (8010508 <I2C_ITSlaveCplt+0x2c8>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d017      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	4a1a      	ldr	r2, [pc, #104]	@ (801050c <I2C_ITSlaveCplt+0x2cc>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d011      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a18      	ldr	r2, [pc, #96]	@ (8010510 <I2C_ITSlaveCplt+0x2d0>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d00b      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	4a16      	ldr	r2, [pc, #88]	@ (8010514 <I2C_ITSlaveCplt+0x2d4>)
 80104ba:	4293      	cmp	r3, r2
 80104bc:	d005      	beq.n	80104ca <I2C_ITSlaveCplt+0x28a>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4a14      	ldr	r2, [pc, #80]	@ (8010518 <I2C_ITSlaveCplt+0x2d8>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d128      	bne.n	801051c <I2C_ITSlaveCplt+0x2dc>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	e027      	b.n	8010526 <I2C_ITSlaveCplt+0x2e6>
 80104d6:	bf00      	nop
 80104d8:	fe00e800 	.word	0xfe00e800
 80104dc:	40020010 	.word	0x40020010
 80104e0:	40020028 	.word	0x40020028
 80104e4:	40020040 	.word	0x40020040
 80104e8:	40020058 	.word	0x40020058
 80104ec:	40020070 	.word	0x40020070
 80104f0:	40020088 	.word	0x40020088
 80104f4:	400200a0 	.word	0x400200a0
 80104f8:	400200b8 	.word	0x400200b8
 80104fc:	40020410 	.word	0x40020410
 8010500:	40020428 	.word	0x40020428
 8010504:	40020440 	.word	0x40020440
 8010508:	40020458 	.word	0x40020458
 801050c:	40020470 	.word	0x40020470
 8010510:	40020488 	.word	0x40020488
 8010514:	400204a0 	.word	0x400204a0
 8010518:	400204b8 	.word	0x400204b8
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	b29b      	uxth	r3, r3
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	f003 0304 	and.w	r3, r3, #4
 8010530:	2b00      	cmp	r3, #0
 8010532:	d020      	beq.n	8010576 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	f023 0304 	bic.w	r3, r3, #4
 801053a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010546:	b2d2      	uxtb	r2, r2
 8010548:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801054e:	1c5a      	adds	r2, r3, #1
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010558:	2b00      	cmp	r3, #0
 801055a:	d00c      	beq.n	8010576 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010560:	3b01      	subs	r3, #1
 8010562:	b29a      	uxth	r2, r3
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801056c:	b29b      	uxth	r3, r3
 801056e:	3b01      	subs	r3, #1
 8010570:	b29a      	uxth	r2, r3
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801057a:	b29b      	uxth	r3, r3
 801057c:	2b00      	cmp	r3, #0
 801057e:	d005      	beq.n	801058c <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010584:	f043 0204 	orr.w	r2, r3, #4
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	f003 0310 	and.w	r3, r3, #16
 8010592:	2b00      	cmp	r3, #0
 8010594:	d049      	beq.n	801062a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801059c:	2b00      	cmp	r3, #0
 801059e:	d044      	beq.n	801062a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d128      	bne.n	80105fc <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	2b28      	cmp	r3, #40	@ 0x28
 80105b4:	d108      	bne.n	80105c8 <I2C_ITSlaveCplt+0x388>
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80105bc:	d104      	bne.n	80105c8 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80105be:	6979      	ldr	r1, [r7, #20]
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 f891 	bl	80106e8 <I2C_ITListenCplt>
 80105c6:	e030      	b.n	801062a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	2b29      	cmp	r3, #41	@ 0x29
 80105d2:	d10e      	bne.n	80105f2 <I2C_ITSlaveCplt+0x3b2>
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80105da:	d00a      	beq.n	80105f2 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2210      	movs	r2, #16
 80105e2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f000 f9ea 	bl	80109be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f7ff fd03 	bl	800fff6 <I2C_ITSlaveSeqCplt>
 80105f0:	e01b      	b.n	801062a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	2210      	movs	r2, #16
 80105f8:	61da      	str	r2, [r3, #28]
 80105fa:	e016      	b.n	801062a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2210      	movs	r2, #16
 8010602:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010608:	f043 0204 	orr.w	r2, r3, #4
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d003      	beq.n	801061e <I2C_ITSlaveCplt+0x3de>
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801061c:	d105      	bne.n	801062a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010622:	4619      	mov	r1, r3
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f000 f8b3 	bl	8010790 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801063c:	2b00      	cmp	r3, #0
 801063e:	d010      	beq.n	8010662 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010644:	4619      	mov	r1, r3
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 f8a2 	bl	8010790 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010652:	b2db      	uxtb	r3, r3
 8010654:	2b28      	cmp	r3, #40	@ 0x28
 8010656:	d141      	bne.n	80106dc <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010658:	6979      	ldr	r1, [r7, #20]
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f000 f844 	bl	80106e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010660:	e03c      	b.n	80106dc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010666:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801066a:	d014      	beq.n	8010696 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f7ff fcc2 	bl	800fff6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4a1b      	ldr	r2, [pc, #108]	@ (80106e4 <I2C_ITSlaveCplt+0x4a4>)
 8010676:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2220      	movs	r2, #32
 801067c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2200      	movs	r2, #0
 8010684:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2200      	movs	r2, #0
 801068a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f7fe fd16 	bl	800f0c0 <HAL_I2C_ListenCpltCallback>
}
 8010694:	e022      	b.n	80106dc <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801069c:	b2db      	uxtb	r3, r3
 801069e:	2b22      	cmp	r3, #34	@ 0x22
 80106a0:	d10e      	bne.n	80106c0 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2220      	movs	r2, #32
 80106a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2200      	movs	r2, #0
 80106b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f7fe fce9 	bl	800f090 <HAL_I2C_SlaveRxCpltCallback>
}
 80106be:	e00d      	b.n	80106dc <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2220      	movs	r2, #32
 80106c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2200      	movs	r2, #0
 80106d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f7fe fcd0 	bl	800f07c <HAL_I2C_SlaveTxCpltCallback>
}
 80106dc:	bf00      	nop
 80106de:	3718      	adds	r7, #24
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	ffff0000 	.word	0xffff0000

080106e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	4a25      	ldr	r2, [pc, #148]	@ (801078c <I2C_ITListenCplt+0xa4>)
 80106f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2200      	movs	r2, #0
 80106fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2220      	movs	r2, #32
 8010702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2200      	movs	r2, #0
 801070a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	f003 0304 	and.w	r3, r3, #4
 801071a:	2b00      	cmp	r3, #0
 801071c:	d022      	beq.n	8010764 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010728:	b2d2      	uxtb	r2, r2
 801072a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010730:	1c5a      	adds	r2, r3, #1
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801073a:	2b00      	cmp	r3, #0
 801073c:	d012      	beq.n	8010764 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010742:	3b01      	subs	r3, #1
 8010744:	b29a      	uxth	r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801074e:	b29b      	uxth	r3, r3
 8010750:	3b01      	subs	r3, #1
 8010752:	b29a      	uxth	r2, r3
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801075c:	f043 0204 	orr.w	r2, r3, #4
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010764:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f000 fbe3 	bl	8010f34 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2210      	movs	r2, #16
 8010774:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2200      	movs	r2, #0
 801077a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f7fe fc9e 	bl	800f0c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010784:	bf00      	nop
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	ffff0000 	.word	0xffff0000

08010790 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80107a0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2200      	movs	r2, #0
 80107a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	4a6d      	ldr	r2, [pc, #436]	@ (8010964 <I2C_ITError+0x1d4>)
 80107ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	431a      	orrs	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80107c2:	7bfb      	ldrb	r3, [r7, #15]
 80107c4:	2b28      	cmp	r3, #40	@ 0x28
 80107c6:	d005      	beq.n	80107d4 <I2C_ITError+0x44>
 80107c8:	7bfb      	ldrb	r3, [r7, #15]
 80107ca:	2b29      	cmp	r3, #41	@ 0x29
 80107cc:	d002      	beq.n	80107d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80107ce:	7bfb      	ldrb	r3, [r7, #15]
 80107d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80107d2:	d10b      	bne.n	80107ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80107d4:	2103      	movs	r1, #3
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f000 fbac 	bl	8010f34 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2228      	movs	r2, #40	@ 0x28
 80107e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	4a60      	ldr	r2, [pc, #384]	@ (8010968 <I2C_ITError+0x1d8>)
 80107e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80107ea:	e030      	b.n	801084e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80107ec:	f248 0103 	movw	r1, #32771	@ 0x8003
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f000 fb9f 	bl	8010f34 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f000 f8e1 	bl	80109be <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010802:	b2db      	uxtb	r3, r3
 8010804:	2b60      	cmp	r3, #96	@ 0x60
 8010806:	d01f      	beq.n	8010848 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2220      	movs	r2, #32
 801080c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	699b      	ldr	r3, [r3, #24]
 8010816:	f003 0320 	and.w	r3, r3, #32
 801081a:	2b20      	cmp	r3, #32
 801081c:	d114      	bne.n	8010848 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	699b      	ldr	r3, [r3, #24]
 8010824:	f003 0310 	and.w	r3, r3, #16
 8010828:	2b10      	cmp	r3, #16
 801082a:	d109      	bne.n	8010840 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	2210      	movs	r2, #16
 8010832:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010838:	f043 0204 	orr.w	r2, r3, #4
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	2220      	movs	r2, #32
 8010846:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2200      	movs	r2, #0
 801084c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010852:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010858:	2b00      	cmp	r3, #0
 801085a:	d039      	beq.n	80108d0 <I2C_ITError+0x140>
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	2b11      	cmp	r3, #17
 8010860:	d002      	beq.n	8010868 <I2C_ITError+0xd8>
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	2b21      	cmp	r3, #33	@ 0x21
 8010866:	d133      	bne.n	80108d0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010872:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010876:	d107      	bne.n	8010888 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010886:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801088c:	4618      	mov	r0, r3
 801088e:	f7fd f9f7 	bl	800dc80 <HAL_DMA_GetState>
 8010892:	4603      	mov	r3, r0
 8010894:	2b01      	cmp	r3, #1
 8010896:	d017      	beq.n	80108c8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801089c:	4a33      	ldr	r2, [pc, #204]	@ (801096c <I2C_ITError+0x1dc>)
 801089e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2200      	movs	r2, #0
 80108a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7fc f877 	bl	800c9a0 <HAL_DMA_Abort_IT>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d04d      	beq.n	8010954 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108be:	687a      	ldr	r2, [r7, #4]
 80108c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80108c2:	4610      	mov	r0, r2
 80108c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108c6:	e045      	b.n	8010954 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f000 f851 	bl	8010970 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108ce:	e041      	b.n	8010954 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d039      	beq.n	801094c <I2C_ITError+0x1bc>
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	2b12      	cmp	r3, #18
 80108dc:	d002      	beq.n	80108e4 <I2C_ITError+0x154>
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	2b22      	cmp	r3, #34	@ 0x22
 80108e2:	d133      	bne.n	801094c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80108ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80108f2:	d107      	bne.n	8010904 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010902:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010908:	4618      	mov	r0, r3
 801090a:	f7fd f9b9 	bl	800dc80 <HAL_DMA_GetState>
 801090e:	4603      	mov	r3, r0
 8010910:	2b01      	cmp	r3, #1
 8010912:	d017      	beq.n	8010944 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010918:	4a14      	ldr	r2, [pc, #80]	@ (801096c <I2C_ITError+0x1dc>)
 801091a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2200      	movs	r2, #0
 8010920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010928:	4618      	mov	r0, r3
 801092a:	f7fc f839 	bl	800c9a0 <HAL_DMA_Abort_IT>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d011      	beq.n	8010958 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801093e:	4610      	mov	r0, r2
 8010940:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010942:	e009      	b.n	8010958 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 f813 	bl	8010970 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801094a:	e005      	b.n	8010958 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f000 f80f 	bl	8010970 <I2C_TreatErrorCallback>
  }
}
 8010952:	e002      	b.n	801095a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010954:	bf00      	nop
 8010956:	e000      	b.n	801095a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010958:	bf00      	nop
}
 801095a:	bf00      	nop
 801095c:	3710      	adds	r7, #16
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	ffff0000 	.word	0xffff0000
 8010968:	0800f35d 	.word	0x0800f35d
 801096c:	08010a07 	.word	0x08010a07

08010970 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b082      	sub	sp, #8
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801097e:	b2db      	uxtb	r3, r3
 8010980:	2b60      	cmp	r3, #96	@ 0x60
 8010982:	d10e      	bne.n	80109a2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2220      	movs	r2, #32
 8010988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2200      	movs	r2, #0
 8010990:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	2200      	movs	r2, #0
 8010996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f7fe fbae 	bl	800f0fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80109a0:	e009      	b.n	80109b6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2200      	movs	r2, #0
 80109a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2200      	movs	r2, #0
 80109ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7fe fb99 	bl	800f0e8 <HAL_I2C_ErrorCallback>
}
 80109b6:	bf00      	nop
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80109be:	b480      	push	{r7}
 80109c0:	b083      	sub	sp, #12
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	699b      	ldr	r3, [r3, #24]
 80109cc:	f003 0302 	and.w	r3, r3, #2
 80109d0:	2b02      	cmp	r3, #2
 80109d2:	d103      	bne.n	80109dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2200      	movs	r2, #0
 80109da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	699b      	ldr	r3, [r3, #24]
 80109e2:	f003 0301 	and.w	r3, r3, #1
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d007      	beq.n	80109fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	699a      	ldr	r2, [r3, #24]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	f042 0201 	orr.w	r2, r2, #1
 80109f8:	619a      	str	r2, [r3, #24]
  }
}
 80109fa:	bf00      	nop
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr

08010a06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b084      	sub	sp, #16
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d003      	beq.n	8010a24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a20:	2200      	movs	r2, #0
 8010a22:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d003      	beq.n	8010a34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a30:	2200      	movs	r2, #0
 8010a32:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8010a34:	68f8      	ldr	r0, [r7, #12]
 8010a36:	f7ff ff9b 	bl	8010970 <I2C_TreatErrorCallback>
}
 8010a3a:	bf00      	nop
 8010a3c:	3710      	adds	r7, #16
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010a42:	b580      	push	{r7, lr}
 8010a44:	b084      	sub	sp, #16
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	60f8      	str	r0, [r7, #12]
 8010a4a:	60b9      	str	r1, [r7, #8]
 8010a4c:	603b      	str	r3, [r7, #0]
 8010a4e:	4613      	mov	r3, r2
 8010a50:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010a52:	e03b      	b.n	8010acc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a54:	69ba      	ldr	r2, [r7, #24]
 8010a56:	6839      	ldr	r1, [r7, #0]
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	f000 f8d5 	bl	8010c08 <I2C_IsErrorOccurred>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d001      	beq.n	8010a68 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8010a64:	2301      	movs	r3, #1
 8010a66:	e041      	b.n	8010aec <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a6e:	d02d      	beq.n	8010acc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a70:	f7f8 fd80 	bl	8009574 <HAL_GetTick>
 8010a74:	4602      	mov	r2, r0
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	1ad3      	subs	r3, r2, r3
 8010a7a:	683a      	ldr	r2, [r7, #0]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d302      	bcc.n	8010a86 <I2C_WaitOnFlagUntilTimeout+0x44>
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d122      	bne.n	8010acc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	699a      	ldr	r2, [r3, #24]
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	4013      	ands	r3, r2
 8010a90:	68ba      	ldr	r2, [r7, #8]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	bf0c      	ite	eq
 8010a96:	2301      	moveq	r3, #1
 8010a98:	2300      	movne	r3, #0
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	79fb      	ldrb	r3, [r7, #7]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d113      	bne.n	8010acc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010aa8:	f043 0220 	orr.w	r2, r3, #32
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2220      	movs	r2, #32
 8010ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2200      	movs	r2, #0
 8010abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010ac8:	2301      	movs	r3, #1
 8010aca:	e00f      	b.n	8010aec <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	699a      	ldr	r2, [r3, #24]
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	4013      	ands	r3, r2
 8010ad6:	68ba      	ldr	r2, [r7, #8]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	bf0c      	ite	eq
 8010adc:	2301      	moveq	r3, #1
 8010ade:	2300      	movne	r3, #0
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	79fb      	ldrb	r3, [r7, #7]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d0b4      	beq.n	8010a54 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010aea:	2300      	movs	r3, #0
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3710      	adds	r7, #16
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010b00:	e033      	b.n	8010b6a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	68b9      	ldr	r1, [r7, #8]
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	f000 f87e 	bl	8010c08 <I2C_IsErrorOccurred>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d001      	beq.n	8010b16 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010b12:	2301      	movs	r3, #1
 8010b14:	e031      	b.n	8010b7a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b1c:	d025      	beq.n	8010b6a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b1e:	f7f8 fd29 	bl	8009574 <HAL_GetTick>
 8010b22:	4602      	mov	r2, r0
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	1ad3      	subs	r3, r2, r3
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d302      	bcc.n	8010b34 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d11a      	bne.n	8010b6a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	699b      	ldr	r3, [r3, #24]
 8010b3a:	f003 0302 	and.w	r3, r3, #2
 8010b3e:	2b02      	cmp	r3, #2
 8010b40:	d013      	beq.n	8010b6a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b46:	f043 0220 	orr.w	r2, r3, #32
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2220      	movs	r2, #32
 8010b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2200      	movs	r2, #0
 8010b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010b66:	2301      	movs	r3, #1
 8010b68:	e007      	b.n	8010b7a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	699b      	ldr	r3, [r3, #24]
 8010b70:	f003 0302 	and.w	r3, r3, #2
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d1c4      	bne.n	8010b02 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010b78:	2300      	movs	r3, #0
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3710      	adds	r7, #16
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}

08010b82 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010b82:	b580      	push	{r7, lr}
 8010b84:	b084      	sub	sp, #16
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	60f8      	str	r0, [r7, #12]
 8010b8a:	60b9      	str	r1, [r7, #8]
 8010b8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010b8e:	e02f      	b.n	8010bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	68b9      	ldr	r1, [r7, #8]
 8010b94:	68f8      	ldr	r0, [r7, #12]
 8010b96:	f000 f837 	bl	8010c08 <I2C_IsErrorOccurred>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d001      	beq.n	8010ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	e02d      	b.n	8010c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ba4:	f7f8 fce6 	bl	8009574 <HAL_GetTick>
 8010ba8:	4602      	mov	r2, r0
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	68ba      	ldr	r2, [r7, #8]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d302      	bcc.n	8010bba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010bb4:	68bb      	ldr	r3, [r7, #8]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d11a      	bne.n	8010bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	699b      	ldr	r3, [r3, #24]
 8010bc0:	f003 0320 	and.w	r3, r3, #32
 8010bc4:	2b20      	cmp	r3, #32
 8010bc6:	d013      	beq.n	8010bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bcc:	f043 0220 	orr.w	r2, r3, #32
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2220      	movs	r2, #32
 8010bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2200      	movs	r2, #0
 8010be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2200      	movs	r2, #0
 8010be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8010bec:	2301      	movs	r3, #1
 8010bee:	e007      	b.n	8010c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	699b      	ldr	r3, [r3, #24]
 8010bf6:	f003 0320 	and.w	r3, r3, #32
 8010bfa:	2b20      	cmp	r3, #32
 8010bfc:	d1c8      	bne.n	8010b90 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010bfe:	2300      	movs	r3, #0
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3710      	adds	r7, #16
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b08a      	sub	sp, #40	@ 0x28
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c14:	2300      	movs	r3, #0
 8010c16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	699b      	ldr	r3, [r3, #24]
 8010c20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010c22:	2300      	movs	r3, #0
 8010c24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010c2a:	69bb      	ldr	r3, [r7, #24]
 8010c2c:	f003 0310 	and.w	r3, r3, #16
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d068      	beq.n	8010d06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	2210      	movs	r2, #16
 8010c3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010c3c:	e049      	b.n	8010cd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c44:	d045      	beq.n	8010cd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010c46:	f7f8 fc95 	bl	8009574 <HAL_GetTick>
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	69fb      	ldr	r3, [r7, #28]
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	68ba      	ldr	r2, [r7, #8]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d302      	bcc.n	8010c5c <I2C_IsErrorOccurred+0x54>
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d13a      	bne.n	8010cd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010c66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	699b      	ldr	r3, [r3, #24]
 8010c76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c7e:	d121      	bne.n	8010cc4 <I2C_IsErrorOccurred+0xbc>
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010c86:	d01d      	beq.n	8010cc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010c88:	7cfb      	ldrb	r3, [r7, #19]
 8010c8a:	2b20      	cmp	r3, #32
 8010c8c:	d01a      	beq.n	8010cc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	685a      	ldr	r2, [r3, #4]
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010c9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010c9e:	f7f8 fc69 	bl	8009574 <HAL_GetTick>
 8010ca2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010ca4:	e00e      	b.n	8010cc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010ca6:	f7f8 fc65 	bl	8009574 <HAL_GetTick>
 8010caa:	4602      	mov	r2, r0
 8010cac:	69fb      	ldr	r3, [r7, #28]
 8010cae:	1ad3      	subs	r3, r2, r3
 8010cb0:	2b19      	cmp	r3, #25
 8010cb2:	d907      	bls.n	8010cc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010cb4:	6a3b      	ldr	r3, [r7, #32]
 8010cb6:	f043 0320 	orr.w	r3, r3, #32
 8010cba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8010cc2:	e006      	b.n	8010cd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	699b      	ldr	r3, [r3, #24]
 8010cca:	f003 0320 	and.w	r3, r3, #32
 8010cce:	2b20      	cmp	r3, #32
 8010cd0:	d1e9      	bne.n	8010ca6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	699b      	ldr	r3, [r3, #24]
 8010cd8:	f003 0320 	and.w	r3, r3, #32
 8010cdc:	2b20      	cmp	r3, #32
 8010cde:	d003      	beq.n	8010ce8 <I2C_IsErrorOccurred+0xe0>
 8010ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d0aa      	beq.n	8010c3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d103      	bne.n	8010cf8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	2220      	movs	r2, #32
 8010cf6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010cf8:	6a3b      	ldr	r3, [r7, #32]
 8010cfa:	f043 0304 	orr.w	r3, r3, #4
 8010cfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010d00:	2301      	movs	r3, #1
 8010d02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	699b      	ldr	r3, [r3, #24]
 8010d0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d00b      	beq.n	8010d30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010d18:	6a3b      	ldr	r3, [r7, #32]
 8010d1a:	f043 0301 	orr.w	r3, r3, #1
 8010d1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010d28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010d30:	69bb      	ldr	r3, [r7, #24]
 8010d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d00b      	beq.n	8010d52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010d3a:	6a3b      	ldr	r3, [r7, #32]
 8010d3c:	f043 0308 	orr.w	r3, r3, #8
 8010d40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010d4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010d52:	69bb      	ldr	r3, [r7, #24]
 8010d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d00b      	beq.n	8010d74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010d5c:	6a3b      	ldr	r3, [r7, #32]
 8010d5e:	f043 0302 	orr.w	r3, r3, #2
 8010d62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010d6e:	2301      	movs	r3, #1
 8010d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010d74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d01c      	beq.n	8010db6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f7ff fe1e 	bl	80109be <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	6859      	ldr	r1, [r3, #4]
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	681a      	ldr	r2, [r3, #0]
 8010d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8010dc4 <I2C_IsErrorOccurred+0x1bc>)
 8010d8e:	400b      	ands	r3, r1
 8010d90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d96:	6a3b      	ldr	r3, [r7, #32]
 8010d98:	431a      	orrs	r2, r3
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2220      	movs	r2, #32
 8010da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2200      	movs	r2, #0
 8010daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	2200      	movs	r2, #0
 8010db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010db6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3728      	adds	r7, #40	@ 0x28
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	fe00e800 	.word	0xfe00e800

08010dc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010dc8:	b480      	push	{r7}
 8010dca:	b087      	sub	sp, #28
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	607b      	str	r3, [r7, #4]
 8010dd2:	460b      	mov	r3, r1
 8010dd4:	817b      	strh	r3, [r7, #10]
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010dda:	897b      	ldrh	r3, [r7, #10]
 8010ddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010de0:	7a7b      	ldrb	r3, [r7, #9]
 8010de2:	041b      	lsls	r3, r3, #16
 8010de4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010de8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010dee:	6a3b      	ldr	r3, [r7, #32]
 8010df0:	4313      	orrs	r3, r2
 8010df2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010df6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	685a      	ldr	r2, [r3, #4]
 8010dfe:	6a3b      	ldr	r3, [r7, #32]
 8010e00:	0d5b      	lsrs	r3, r3, #21
 8010e02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8010e06:	4b08      	ldr	r3, [pc, #32]	@ (8010e28 <I2C_TransferConfig+0x60>)
 8010e08:	430b      	orrs	r3, r1
 8010e0a:	43db      	mvns	r3, r3
 8010e0c:	ea02 0103 	and.w	r1, r2, r3
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	697a      	ldr	r2, [r7, #20]
 8010e16:	430a      	orrs	r2, r1
 8010e18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010e1a:	bf00      	nop
 8010e1c:	371c      	adds	r7, #28
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e24:	4770      	bx	lr
 8010e26:	bf00      	nop
 8010e28:	03ff63ff 	.word	0x03ff63ff

08010e2c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b085      	sub	sp, #20
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	460b      	mov	r3, r1
 8010e36:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e40:	4a39      	ldr	r2, [pc, #228]	@ (8010f28 <I2C_Enable_IRQ+0xfc>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d032      	beq.n	8010eac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010e4a:	4a38      	ldr	r2, [pc, #224]	@ (8010f2c <I2C_Enable_IRQ+0x100>)
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d02d      	beq.n	8010eac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010e54:	4a36      	ldr	r2, [pc, #216]	@ (8010f30 <I2C_Enable_IRQ+0x104>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d028      	beq.n	8010eac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010e5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	da03      	bge.n	8010e6a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010e68:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010e6a:	887b      	ldrh	r3, [r7, #2]
 8010e6c:	f003 0301 	and.w	r3, r3, #1
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d003      	beq.n	8010e7c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010e7a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010e7c:	887b      	ldrh	r3, [r7, #2]
 8010e7e:	f003 0302 	and.w	r3, r3, #2
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d003      	beq.n	8010e8e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010e8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010e8e:	887b      	ldrh	r3, [r7, #2]
 8010e90:	2b10      	cmp	r3, #16
 8010e92:	d103      	bne.n	8010e9c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010e9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010e9c:	887b      	ldrh	r3, [r7, #2]
 8010e9e:	2b20      	cmp	r3, #32
 8010ea0:	d133      	bne.n	8010f0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f043 0320 	orr.w	r3, r3, #32
 8010ea8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010eaa:	e02e      	b.n	8010f0a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010eac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	da03      	bge.n	8010ebc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010eba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010ebc:	887b      	ldrh	r3, [r7, #2]
 8010ebe:	f003 0301 	and.w	r3, r3, #1
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d003      	beq.n	8010ece <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010ecc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010ece:	887b      	ldrh	r3, [r7, #2]
 8010ed0:	f003 0302 	and.w	r3, r3, #2
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d003      	beq.n	8010ee0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010ede:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010ee0:	887b      	ldrh	r3, [r7, #2]
 8010ee2:	2b10      	cmp	r3, #16
 8010ee4:	d103      	bne.n	8010eee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010eec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010eee:	887b      	ldrh	r3, [r7, #2]
 8010ef0:	2b20      	cmp	r3, #32
 8010ef2:	d103      	bne.n	8010efc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010efa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010efc:	887b      	ldrh	r3, [r7, #2]
 8010efe:	2b40      	cmp	r3, #64	@ 0x40
 8010f00:	d103      	bne.n	8010f0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f08:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	6819      	ldr	r1, [r3, #0]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	68fa      	ldr	r2, [r7, #12]
 8010f16:	430a      	orrs	r2, r1
 8010f18:	601a      	str	r2, [r3, #0]
}
 8010f1a:	bf00      	nop
 8010f1c:	3714      	adds	r7, #20
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop
 8010f28:	0800f54f 	.word	0x0800f54f
 8010f2c:	0800f971 	.word	0x0800f971
 8010f30:	0800f725 	.word	0x0800f725

08010f34 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010f34:	b480      	push	{r7}
 8010f36:	b085      	sub	sp, #20
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010f40:	2300      	movs	r3, #0
 8010f42:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010f44:	887b      	ldrh	r3, [r7, #2]
 8010f46:	f003 0301 	and.w	r3, r3, #1
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d00f      	beq.n	8010f6e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010f54:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010f62:	2b28      	cmp	r3, #40	@ 0x28
 8010f64:	d003      	beq.n	8010f6e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010f6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010f6e:	887b      	ldrh	r3, [r7, #2]
 8010f70:	f003 0302 	and.w	r3, r3, #2
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d00f      	beq.n	8010f98 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010f7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f86:	b2db      	uxtb	r3, r3
 8010f88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010f8c:	2b28      	cmp	r3, #40	@ 0x28
 8010f8e:	d003      	beq.n	8010f98 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010f96:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010f98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	da03      	bge.n	8010fa8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010fa6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010fa8:	887b      	ldrh	r3, [r7, #2]
 8010faa:	2b10      	cmp	r3, #16
 8010fac:	d103      	bne.n	8010fb6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010fb4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010fb6:	887b      	ldrh	r3, [r7, #2]
 8010fb8:	2b20      	cmp	r3, #32
 8010fba:	d103      	bne.n	8010fc4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	f043 0320 	orr.w	r3, r3, #32
 8010fc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010fc4:	887b      	ldrh	r3, [r7, #2]
 8010fc6:	2b40      	cmp	r3, #64	@ 0x40
 8010fc8:	d103      	bne.n	8010fd2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fd0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	6819      	ldr	r1, [r3, #0]
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	43da      	mvns	r2, r3
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	400a      	ands	r2, r1
 8010fe2:	601a      	str	r2, [r3, #0]
}
 8010fe4:	bf00      	nop
 8010fe6:	3714      	adds	r7, #20
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fee:	4770      	bx	lr

08010ff0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011000:	b2db      	uxtb	r3, r3
 8011002:	2b20      	cmp	r3, #32
 8011004:	d138      	bne.n	8011078 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801100c:	2b01      	cmp	r3, #1
 801100e:	d101      	bne.n	8011014 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011010:	2302      	movs	r3, #2
 8011012:	e032      	b.n	801107a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2201      	movs	r2, #1
 8011018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2224      	movs	r2, #36	@ 0x24
 8011020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	681a      	ldr	r2, [r3, #0]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f022 0201 	bic.w	r2, r2, #1
 8011032:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011042:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	6819      	ldr	r1, [r3, #0]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	683a      	ldr	r2, [r7, #0]
 8011050:	430a      	orrs	r2, r1
 8011052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	681a      	ldr	r2, [r3, #0]
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	f042 0201 	orr.w	r2, r2, #1
 8011062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2220      	movs	r2, #32
 8011068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2200      	movs	r2, #0
 8011070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8011074:	2300      	movs	r3, #0
 8011076:	e000      	b.n	801107a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011078:	2302      	movs	r3, #2
  }
}
 801107a:	4618      	mov	r0, r3
 801107c:	370c      	adds	r7, #12
 801107e:	46bd      	mov	sp, r7
 8011080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011084:	4770      	bx	lr

08011086 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011086:	b480      	push	{r7}
 8011088:	b085      	sub	sp, #20
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
 801108e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011096:	b2db      	uxtb	r3, r3
 8011098:	2b20      	cmp	r3, #32
 801109a:	d139      	bne.n	8011110 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d101      	bne.n	80110aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80110a6:	2302      	movs	r3, #2
 80110a8:	e033      	b.n	8011112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2201      	movs	r2, #1
 80110ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2224      	movs	r2, #36	@ 0x24
 80110b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	f022 0201 	bic.w	r2, r2, #1
 80110c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80110d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	021b      	lsls	r3, r3, #8
 80110de:	68fa      	ldr	r2, [r7, #12]
 80110e0:	4313      	orrs	r3, r2
 80110e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	681a      	ldr	r2, [r3, #0]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	f042 0201 	orr.w	r2, r2, #1
 80110fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2220      	movs	r2, #32
 8011100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2200      	movs	r2, #0
 8011108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801110c:	2300      	movs	r3, #0
 801110e:	e000      	b.n	8011112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011110:	2302      	movs	r3, #2
  }
}
 8011112:	4618      	mov	r0, r3
 8011114:	3714      	adds	r7, #20
 8011116:	46bd      	mov	sp, r7
 8011118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111c:	4770      	bx	lr
	...

08011120 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8011120:	b480      	push	{r7}
 8011122:	b085      	sub	sp, #20
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011128:	4b0d      	ldr	r3, [pc, #52]	@ (8011160 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801112a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801112e:	4a0c      	ldr	r2, [pc, #48]	@ (8011160 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8011130:	f043 0302 	orr.w	r3, r3, #2
 8011134:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011138:	4b09      	ldr	r3, [pc, #36]	@ (8011160 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801113a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801113e:	f003 0302 	and.w	r3, r3, #2
 8011142:	60fb      	str	r3, [r7, #12]
 8011144:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8011146:	4b07      	ldr	r3, [pc, #28]	@ (8011164 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8011148:	685a      	ldr	r2, [r3, #4]
 801114a:	4906      	ldr	r1, [pc, #24]	@ (8011164 <HAL_I2CEx_EnableFastModePlus+0x44>)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	4313      	orrs	r3, r2
 8011150:	604b      	str	r3, [r1, #4]
}
 8011152:	bf00      	nop
 8011154:	3714      	adds	r7, #20
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	58024400 	.word	0x58024400
 8011164:	58000400 	.word	0x58000400

08011168 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8011170:	4b19      	ldr	r3, [pc, #100]	@ (80111d8 <HAL_PWREx_ConfigSupply+0x70>)
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	f003 0304 	and.w	r3, r3, #4
 8011178:	2b04      	cmp	r3, #4
 801117a:	d00a      	beq.n	8011192 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801117c:	4b16      	ldr	r3, [pc, #88]	@ (80111d8 <HAL_PWREx_ConfigSupply+0x70>)
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	f003 0307 	and.w	r3, r3, #7
 8011184:	687a      	ldr	r2, [r7, #4]
 8011186:	429a      	cmp	r2, r3
 8011188:	d001      	beq.n	801118e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801118a:	2301      	movs	r3, #1
 801118c:	e01f      	b.n	80111ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801118e:	2300      	movs	r3, #0
 8011190:	e01d      	b.n	80111ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8011192:	4b11      	ldr	r3, [pc, #68]	@ (80111d8 <HAL_PWREx_ConfigSupply+0x70>)
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	f023 0207 	bic.w	r2, r3, #7
 801119a:	490f      	ldr	r1, [pc, #60]	@ (80111d8 <HAL_PWREx_ConfigSupply+0x70>)
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	4313      	orrs	r3, r2
 80111a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80111a2:	f7f8 f9e7 	bl	8009574 <HAL_GetTick>
 80111a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80111a8:	e009      	b.n	80111be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80111aa:	f7f8 f9e3 	bl	8009574 <HAL_GetTick>
 80111ae:	4602      	mov	r2, r0
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	1ad3      	subs	r3, r2, r3
 80111b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80111b8:	d901      	bls.n	80111be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80111ba:	2301      	movs	r3, #1
 80111bc:	e007      	b.n	80111ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80111be:	4b06      	ldr	r3, [pc, #24]	@ (80111d8 <HAL_PWREx_ConfigSupply+0x70>)
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80111c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80111ca:	d1ee      	bne.n	80111aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80111cc:	2300      	movs	r3, #0
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3710      	adds	r7, #16
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	58024800 	.word	0x58024800

080111dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b08c      	sub	sp, #48	@ 0x30
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d101      	bne.n	80111ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80111ea:	2301      	movs	r3, #1
 80111ec:	e3c8      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	f003 0301 	and.w	r3, r3, #1
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	f000 8087 	beq.w	801130a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80111fc:	4b88      	ldr	r3, [pc, #544]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 80111fe:	691b      	ldr	r3, [r3, #16]
 8011200:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011206:	4b86      	ldr	r3, [pc, #536]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801120a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801120c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801120e:	2b10      	cmp	r3, #16
 8011210:	d007      	beq.n	8011222 <HAL_RCC_OscConfig+0x46>
 8011212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011214:	2b18      	cmp	r3, #24
 8011216:	d110      	bne.n	801123a <HAL_RCC_OscConfig+0x5e>
 8011218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801121a:	f003 0303 	and.w	r3, r3, #3
 801121e:	2b02      	cmp	r3, #2
 8011220:	d10b      	bne.n	801123a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011222:	4b7f      	ldr	r3, [pc, #508]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801122a:	2b00      	cmp	r3, #0
 801122c:	d06c      	beq.n	8011308 <HAL_RCC_OscConfig+0x12c>
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d168      	bne.n	8011308 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8011236:	2301      	movs	r3, #1
 8011238:	e3a2      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011242:	d106      	bne.n	8011252 <HAL_RCC_OscConfig+0x76>
 8011244:	4b76      	ldr	r3, [pc, #472]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	4a75      	ldr	r2, [pc, #468]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 801124a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801124e:	6013      	str	r3, [r2, #0]
 8011250:	e02e      	b.n	80112b0 <HAL_RCC_OscConfig+0xd4>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d10c      	bne.n	8011274 <HAL_RCC_OscConfig+0x98>
 801125a:	4b71      	ldr	r3, [pc, #452]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	4a70      	ldr	r2, [pc, #448]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011260:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011264:	6013      	str	r3, [r2, #0]
 8011266:	4b6e      	ldr	r3, [pc, #440]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	4a6d      	ldr	r2, [pc, #436]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 801126c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011270:	6013      	str	r3, [r2, #0]
 8011272:	e01d      	b.n	80112b0 <HAL_RCC_OscConfig+0xd4>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801127c:	d10c      	bne.n	8011298 <HAL_RCC_OscConfig+0xbc>
 801127e:	4b68      	ldr	r3, [pc, #416]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	4a67      	ldr	r2, [pc, #412]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011288:	6013      	str	r3, [r2, #0]
 801128a:	4b65      	ldr	r3, [pc, #404]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	4a64      	ldr	r2, [pc, #400]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011294:	6013      	str	r3, [r2, #0]
 8011296:	e00b      	b.n	80112b0 <HAL_RCC_OscConfig+0xd4>
 8011298:	4b61      	ldr	r3, [pc, #388]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	4a60      	ldr	r2, [pc, #384]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 801129e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80112a2:	6013      	str	r3, [r2, #0]
 80112a4:	4b5e      	ldr	r3, [pc, #376]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	4a5d      	ldr	r2, [pc, #372]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 80112aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80112ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d013      	beq.n	80112e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112b8:	f7f8 f95c 	bl	8009574 <HAL_GetTick>
 80112bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80112be:	e008      	b.n	80112d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80112c0:	f7f8 f958 	bl	8009574 <HAL_GetTick>
 80112c4:	4602      	mov	r2, r0
 80112c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112c8:	1ad3      	subs	r3, r2, r3
 80112ca:	2b64      	cmp	r3, #100	@ 0x64
 80112cc:	d901      	bls.n	80112d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80112ce:	2303      	movs	r3, #3
 80112d0:	e356      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80112d2:	4b53      	ldr	r3, [pc, #332]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d0f0      	beq.n	80112c0 <HAL_RCC_OscConfig+0xe4>
 80112de:	e014      	b.n	801130a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112e0:	f7f8 f948 	bl	8009574 <HAL_GetTick>
 80112e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80112e6:	e008      	b.n	80112fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80112e8:	f7f8 f944 	bl	8009574 <HAL_GetTick>
 80112ec:	4602      	mov	r2, r0
 80112ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f0:	1ad3      	subs	r3, r2, r3
 80112f2:	2b64      	cmp	r3, #100	@ 0x64
 80112f4:	d901      	bls.n	80112fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80112f6:	2303      	movs	r3, #3
 80112f8:	e342      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80112fa:	4b49      	ldr	r3, [pc, #292]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011302:	2b00      	cmp	r3, #0
 8011304:	d1f0      	bne.n	80112e8 <HAL_RCC_OscConfig+0x10c>
 8011306:	e000      	b.n	801130a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f003 0302 	and.w	r3, r3, #2
 8011312:	2b00      	cmp	r3, #0
 8011314:	f000 808c 	beq.w	8011430 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011318:	4b41      	ldr	r3, [pc, #260]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 801131a:	691b      	ldr	r3, [r3, #16]
 801131c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011320:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011322:	4b3f      	ldr	r3, [pc, #252]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011326:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011328:	6a3b      	ldr	r3, [r7, #32]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d007      	beq.n	801133e <HAL_RCC_OscConfig+0x162>
 801132e:	6a3b      	ldr	r3, [r7, #32]
 8011330:	2b18      	cmp	r3, #24
 8011332:	d137      	bne.n	80113a4 <HAL_RCC_OscConfig+0x1c8>
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	f003 0303 	and.w	r3, r3, #3
 801133a:	2b00      	cmp	r3, #0
 801133c:	d132      	bne.n	80113a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801133e:	4b38      	ldr	r3, [pc, #224]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	f003 0304 	and.w	r3, r3, #4
 8011346:	2b00      	cmp	r3, #0
 8011348:	d005      	beq.n	8011356 <HAL_RCC_OscConfig+0x17a>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d101      	bne.n	8011356 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8011352:	2301      	movs	r3, #1
 8011354:	e314      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011356:	4b32      	ldr	r3, [pc, #200]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f023 0219 	bic.w	r2, r3, #25
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	68db      	ldr	r3, [r3, #12]
 8011362:	492f      	ldr	r1, [pc, #188]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011364:	4313      	orrs	r3, r2
 8011366:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011368:	f7f8 f904 	bl	8009574 <HAL_GetTick>
 801136c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801136e:	e008      	b.n	8011382 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011370:	f7f8 f900 	bl	8009574 <HAL_GetTick>
 8011374:	4602      	mov	r2, r0
 8011376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011378:	1ad3      	subs	r3, r2, r3
 801137a:	2b02      	cmp	r3, #2
 801137c:	d901      	bls.n	8011382 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801137e:	2303      	movs	r3, #3
 8011380:	e2fe      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011382:	4b27      	ldr	r3, [pc, #156]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f003 0304 	and.w	r3, r3, #4
 801138a:	2b00      	cmp	r3, #0
 801138c:	d0f0      	beq.n	8011370 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801138e:	4b24      	ldr	r3, [pc, #144]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	691b      	ldr	r3, [r3, #16]
 801139a:	061b      	lsls	r3, r3, #24
 801139c:	4920      	ldr	r1, [pc, #128]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 801139e:	4313      	orrs	r3, r2
 80113a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80113a2:	e045      	b.n	8011430 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d026      	beq.n	80113fa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80113ac:	4b1c      	ldr	r3, [pc, #112]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f023 0219 	bic.w	r2, r3, #25
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	68db      	ldr	r3, [r3, #12]
 80113b8:	4919      	ldr	r1, [pc, #100]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 80113ba:	4313      	orrs	r3, r2
 80113bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113be:	f7f8 f8d9 	bl	8009574 <HAL_GetTick>
 80113c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113c4:	e008      	b.n	80113d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80113c6:	f7f8 f8d5 	bl	8009574 <HAL_GetTick>
 80113ca:	4602      	mov	r2, r0
 80113cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ce:	1ad3      	subs	r3, r2, r3
 80113d0:	2b02      	cmp	r3, #2
 80113d2:	d901      	bls.n	80113d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80113d4:	2303      	movs	r3, #3
 80113d6:	e2d3      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80113d8:	4b11      	ldr	r3, [pc, #68]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	f003 0304 	and.w	r3, r3, #4
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d0f0      	beq.n	80113c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80113e4:	4b0e      	ldr	r3, [pc, #56]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	691b      	ldr	r3, [r3, #16]
 80113f0:	061b      	lsls	r3, r3, #24
 80113f2:	490b      	ldr	r1, [pc, #44]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 80113f4:	4313      	orrs	r3, r2
 80113f6:	604b      	str	r3, [r1, #4]
 80113f8:	e01a      	b.n	8011430 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80113fa:	4b09      	ldr	r3, [pc, #36]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	4a08      	ldr	r2, [pc, #32]	@ (8011420 <HAL_RCC_OscConfig+0x244>)
 8011400:	f023 0301 	bic.w	r3, r3, #1
 8011404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011406:	f7f8 f8b5 	bl	8009574 <HAL_GetTick>
 801140a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801140c:	e00a      	b.n	8011424 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801140e:	f7f8 f8b1 	bl	8009574 <HAL_GetTick>
 8011412:	4602      	mov	r2, r0
 8011414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011416:	1ad3      	subs	r3, r2, r3
 8011418:	2b02      	cmp	r3, #2
 801141a:	d903      	bls.n	8011424 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801141c:	2303      	movs	r3, #3
 801141e:	e2af      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
 8011420:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011424:	4b96      	ldr	r3, [pc, #600]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f003 0304 	and.w	r3, r3, #4
 801142c:	2b00      	cmp	r3, #0
 801142e:	d1ee      	bne.n	801140e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f003 0310 	and.w	r3, r3, #16
 8011438:	2b00      	cmp	r3, #0
 801143a:	d06a      	beq.n	8011512 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801143c:	4b90      	ldr	r3, [pc, #576]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 801143e:	691b      	ldr	r3, [r3, #16]
 8011440:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011444:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011446:	4b8e      	ldr	r3, [pc, #568]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801144a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801144c:	69bb      	ldr	r3, [r7, #24]
 801144e:	2b08      	cmp	r3, #8
 8011450:	d007      	beq.n	8011462 <HAL_RCC_OscConfig+0x286>
 8011452:	69bb      	ldr	r3, [r7, #24]
 8011454:	2b18      	cmp	r3, #24
 8011456:	d11b      	bne.n	8011490 <HAL_RCC_OscConfig+0x2b4>
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	f003 0303 	and.w	r3, r3, #3
 801145e:	2b01      	cmp	r3, #1
 8011460:	d116      	bne.n	8011490 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011462:	4b87      	ldr	r3, [pc, #540]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801146a:	2b00      	cmp	r3, #0
 801146c:	d005      	beq.n	801147a <HAL_RCC_OscConfig+0x29e>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	69db      	ldr	r3, [r3, #28]
 8011472:	2b80      	cmp	r3, #128	@ 0x80
 8011474:	d001      	beq.n	801147a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8011476:	2301      	movs	r3, #1
 8011478:	e282      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801147a:	4b81      	ldr	r3, [pc, #516]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 801147c:	68db      	ldr	r3, [r3, #12]
 801147e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6a1b      	ldr	r3, [r3, #32]
 8011486:	061b      	lsls	r3, r3, #24
 8011488:	497d      	ldr	r1, [pc, #500]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 801148a:	4313      	orrs	r3, r2
 801148c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801148e:	e040      	b.n	8011512 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	69db      	ldr	r3, [r3, #28]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d023      	beq.n	80114e0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011498:	4b79      	ldr	r3, [pc, #484]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	4a78      	ldr	r2, [pc, #480]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 801149e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114a4:	f7f8 f866 	bl	8009574 <HAL_GetTick>
 80114a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80114aa:	e008      	b.n	80114be <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80114ac:	f7f8 f862 	bl	8009574 <HAL_GetTick>
 80114b0:	4602      	mov	r2, r0
 80114b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b4:	1ad3      	subs	r3, r2, r3
 80114b6:	2b02      	cmp	r3, #2
 80114b8:	d901      	bls.n	80114be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80114ba:	2303      	movs	r3, #3
 80114bc:	e260      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80114be:	4b70      	ldr	r3, [pc, #448]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d0f0      	beq.n	80114ac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80114ca:	4b6d      	ldr	r3, [pc, #436]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6a1b      	ldr	r3, [r3, #32]
 80114d6:	061b      	lsls	r3, r3, #24
 80114d8:	4969      	ldr	r1, [pc, #420]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 80114da:	4313      	orrs	r3, r2
 80114dc:	60cb      	str	r3, [r1, #12]
 80114de:	e018      	b.n	8011512 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80114e0:	4b67      	ldr	r3, [pc, #412]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	4a66      	ldr	r2, [pc, #408]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 80114e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80114ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114ec:	f7f8 f842 	bl	8009574 <HAL_GetTick>
 80114f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80114f2:	e008      	b.n	8011506 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80114f4:	f7f8 f83e 	bl	8009574 <HAL_GetTick>
 80114f8:	4602      	mov	r2, r0
 80114fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fc:	1ad3      	subs	r3, r2, r3
 80114fe:	2b02      	cmp	r3, #2
 8011500:	d901      	bls.n	8011506 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8011502:	2303      	movs	r3, #3
 8011504:	e23c      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011506:	4b5e      	ldr	r3, [pc, #376]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801150e:	2b00      	cmp	r3, #0
 8011510:	d1f0      	bne.n	80114f4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	f003 0308 	and.w	r3, r3, #8
 801151a:	2b00      	cmp	r3, #0
 801151c:	d036      	beq.n	801158c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	695b      	ldr	r3, [r3, #20]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d019      	beq.n	801155a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011526:	4b56      	ldr	r3, [pc, #344]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801152a:	4a55      	ldr	r2, [pc, #340]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 801152c:	f043 0301 	orr.w	r3, r3, #1
 8011530:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011532:	f7f8 f81f 	bl	8009574 <HAL_GetTick>
 8011536:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011538:	e008      	b.n	801154c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801153a:	f7f8 f81b 	bl	8009574 <HAL_GetTick>
 801153e:	4602      	mov	r2, r0
 8011540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011542:	1ad3      	subs	r3, r2, r3
 8011544:	2b02      	cmp	r3, #2
 8011546:	d901      	bls.n	801154c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8011548:	2303      	movs	r3, #3
 801154a:	e219      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801154c:	4b4c      	ldr	r3, [pc, #304]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 801154e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011550:	f003 0302 	and.w	r3, r3, #2
 8011554:	2b00      	cmp	r3, #0
 8011556:	d0f0      	beq.n	801153a <HAL_RCC_OscConfig+0x35e>
 8011558:	e018      	b.n	801158c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801155a:	4b49      	ldr	r3, [pc, #292]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 801155c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801155e:	4a48      	ldr	r2, [pc, #288]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011560:	f023 0301 	bic.w	r3, r3, #1
 8011564:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011566:	f7f8 f805 	bl	8009574 <HAL_GetTick>
 801156a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801156c:	e008      	b.n	8011580 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801156e:	f7f8 f801 	bl	8009574 <HAL_GetTick>
 8011572:	4602      	mov	r2, r0
 8011574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011576:	1ad3      	subs	r3, r2, r3
 8011578:	2b02      	cmp	r3, #2
 801157a:	d901      	bls.n	8011580 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801157c:	2303      	movs	r3, #3
 801157e:	e1ff      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011580:	4b3f      	ldr	r3, [pc, #252]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011584:	f003 0302 	and.w	r3, r3, #2
 8011588:	2b00      	cmp	r3, #0
 801158a:	d1f0      	bne.n	801156e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f003 0320 	and.w	r3, r3, #32
 8011594:	2b00      	cmp	r3, #0
 8011596:	d036      	beq.n	8011606 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	699b      	ldr	r3, [r3, #24]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d019      	beq.n	80115d4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80115a0:	4b37      	ldr	r3, [pc, #220]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a36      	ldr	r2, [pc, #216]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 80115a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80115aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80115ac:	f7f7 ffe2 	bl	8009574 <HAL_GetTick>
 80115b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80115b2:	e008      	b.n	80115c6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80115b4:	f7f7 ffde 	bl	8009574 <HAL_GetTick>
 80115b8:	4602      	mov	r2, r0
 80115ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	2b02      	cmp	r3, #2
 80115c0:	d901      	bls.n	80115c6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80115c2:	2303      	movs	r3, #3
 80115c4:	e1dc      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80115c6:	4b2e      	ldr	r3, [pc, #184]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d0f0      	beq.n	80115b4 <HAL_RCC_OscConfig+0x3d8>
 80115d2:	e018      	b.n	8011606 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80115d4:	4b2a      	ldr	r3, [pc, #168]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	4a29      	ldr	r2, [pc, #164]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 80115da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80115e0:	f7f7 ffc8 	bl	8009574 <HAL_GetTick>
 80115e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80115e6:	e008      	b.n	80115fa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80115e8:	f7f7 ffc4 	bl	8009574 <HAL_GetTick>
 80115ec:	4602      	mov	r2, r0
 80115ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f0:	1ad3      	subs	r3, r2, r3
 80115f2:	2b02      	cmp	r3, #2
 80115f4:	d901      	bls.n	80115fa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80115f6:	2303      	movs	r3, #3
 80115f8:	e1c2      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80115fa:	4b21      	ldr	r3, [pc, #132]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1f0      	bne.n	80115e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	f003 0304 	and.w	r3, r3, #4
 801160e:	2b00      	cmp	r3, #0
 8011610:	f000 8086 	beq.w	8011720 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011614:	4b1b      	ldr	r3, [pc, #108]	@ (8011684 <HAL_RCC_OscConfig+0x4a8>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	4a1a      	ldr	r2, [pc, #104]	@ (8011684 <HAL_RCC_OscConfig+0x4a8>)
 801161a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801161e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011620:	f7f7 ffa8 	bl	8009574 <HAL_GetTick>
 8011624:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011626:	e008      	b.n	801163a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011628:	f7f7 ffa4 	bl	8009574 <HAL_GetTick>
 801162c:	4602      	mov	r2, r0
 801162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011630:	1ad3      	subs	r3, r2, r3
 8011632:	2b64      	cmp	r3, #100	@ 0x64
 8011634:	d901      	bls.n	801163a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8011636:	2303      	movs	r3, #3
 8011638:	e1a2      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801163a:	4b12      	ldr	r3, [pc, #72]	@ (8011684 <HAL_RCC_OscConfig+0x4a8>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011642:	2b00      	cmp	r3, #0
 8011644:	d0f0      	beq.n	8011628 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	689b      	ldr	r3, [r3, #8]
 801164a:	2b01      	cmp	r3, #1
 801164c:	d106      	bne.n	801165c <HAL_RCC_OscConfig+0x480>
 801164e:	4b0c      	ldr	r3, [pc, #48]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011652:	4a0b      	ldr	r2, [pc, #44]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011654:	f043 0301 	orr.w	r3, r3, #1
 8011658:	6713      	str	r3, [r2, #112]	@ 0x70
 801165a:	e032      	b.n	80116c2 <HAL_RCC_OscConfig+0x4e6>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	689b      	ldr	r3, [r3, #8]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d111      	bne.n	8011688 <HAL_RCC_OscConfig+0x4ac>
 8011664:	4b06      	ldr	r3, [pc, #24]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011668:	4a05      	ldr	r2, [pc, #20]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 801166a:	f023 0301 	bic.w	r3, r3, #1
 801166e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011670:	4b03      	ldr	r3, [pc, #12]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011674:	4a02      	ldr	r2, [pc, #8]	@ (8011680 <HAL_RCC_OscConfig+0x4a4>)
 8011676:	f023 0304 	bic.w	r3, r3, #4
 801167a:	6713      	str	r3, [r2, #112]	@ 0x70
 801167c:	e021      	b.n	80116c2 <HAL_RCC_OscConfig+0x4e6>
 801167e:	bf00      	nop
 8011680:	58024400 	.word	0x58024400
 8011684:	58024800 	.word	0x58024800
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	689b      	ldr	r3, [r3, #8]
 801168c:	2b05      	cmp	r3, #5
 801168e:	d10c      	bne.n	80116aa <HAL_RCC_OscConfig+0x4ce>
 8011690:	4b83      	ldr	r3, [pc, #524]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011694:	4a82      	ldr	r2, [pc, #520]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011696:	f043 0304 	orr.w	r3, r3, #4
 801169a:	6713      	str	r3, [r2, #112]	@ 0x70
 801169c:	4b80      	ldr	r3, [pc, #512]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 801169e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116a0:	4a7f      	ldr	r2, [pc, #508]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80116a2:	f043 0301 	orr.w	r3, r3, #1
 80116a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80116a8:	e00b      	b.n	80116c2 <HAL_RCC_OscConfig+0x4e6>
 80116aa:	4b7d      	ldr	r3, [pc, #500]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80116ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116ae:	4a7c      	ldr	r2, [pc, #496]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80116b0:	f023 0301 	bic.w	r3, r3, #1
 80116b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80116b6:	4b7a      	ldr	r3, [pc, #488]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80116b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116ba:	4a79      	ldr	r2, [pc, #484]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80116bc:	f023 0304 	bic.w	r3, r3, #4
 80116c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	689b      	ldr	r3, [r3, #8]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d015      	beq.n	80116f6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116ca:	f7f7 ff53 	bl	8009574 <HAL_GetTick>
 80116ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80116d0:	e00a      	b.n	80116e8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80116d2:	f7f7 ff4f 	bl	8009574 <HAL_GetTick>
 80116d6:	4602      	mov	r2, r0
 80116d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80116e0:	4293      	cmp	r3, r2
 80116e2:	d901      	bls.n	80116e8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80116e4:	2303      	movs	r3, #3
 80116e6:	e14b      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80116e8:	4b6d      	ldr	r3, [pc, #436]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80116ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116ec:	f003 0302 	and.w	r3, r3, #2
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d0ee      	beq.n	80116d2 <HAL_RCC_OscConfig+0x4f6>
 80116f4:	e014      	b.n	8011720 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116f6:	f7f7 ff3d 	bl	8009574 <HAL_GetTick>
 80116fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80116fc:	e00a      	b.n	8011714 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80116fe:	f7f7 ff39 	bl	8009574 <HAL_GetTick>
 8011702:	4602      	mov	r2, r0
 8011704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011706:	1ad3      	subs	r3, r2, r3
 8011708:	f241 3288 	movw	r2, #5000	@ 0x1388
 801170c:	4293      	cmp	r3, r2
 801170e:	d901      	bls.n	8011714 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8011710:	2303      	movs	r3, #3
 8011712:	e135      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011714:	4b62      	ldr	r3, [pc, #392]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011718:	f003 0302 	and.w	r3, r3, #2
 801171c:	2b00      	cmp	r3, #0
 801171e:	d1ee      	bne.n	80116fe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011724:	2b00      	cmp	r3, #0
 8011726:	f000 812a 	beq.w	801197e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801172a:	4b5d      	ldr	r3, [pc, #372]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 801172c:	691b      	ldr	r3, [r3, #16]
 801172e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011732:	2b18      	cmp	r3, #24
 8011734:	f000 80ba 	beq.w	80118ac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801173c:	2b02      	cmp	r3, #2
 801173e:	f040 8095 	bne.w	801186c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011742:	4b57      	ldr	r3, [pc, #348]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	4a56      	ldr	r2, [pc, #344]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011748:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801174c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801174e:	f7f7 ff11 	bl	8009574 <HAL_GetTick>
 8011752:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011754:	e008      	b.n	8011768 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011756:	f7f7 ff0d 	bl	8009574 <HAL_GetTick>
 801175a:	4602      	mov	r2, r0
 801175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	2b02      	cmp	r3, #2
 8011762:	d901      	bls.n	8011768 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8011764:	2303      	movs	r3, #3
 8011766:	e10b      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011768:	4b4d      	ldr	r3, [pc, #308]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011770:	2b00      	cmp	r3, #0
 8011772:	d1f0      	bne.n	8011756 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011774:	4b4a      	ldr	r3, [pc, #296]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011776:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011778:	4b4a      	ldr	r3, [pc, #296]	@ (80118a4 <HAL_RCC_OscConfig+0x6c8>)
 801177a:	4013      	ands	r3, r2
 801177c:	687a      	ldr	r2, [r7, #4]
 801177e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8011780:	687a      	ldr	r2, [r7, #4]
 8011782:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011784:	0112      	lsls	r2, r2, #4
 8011786:	430a      	orrs	r2, r1
 8011788:	4945      	ldr	r1, [pc, #276]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 801178a:	4313      	orrs	r3, r2
 801178c:	628b      	str	r3, [r1, #40]	@ 0x28
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011792:	3b01      	subs	r3, #1
 8011794:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801179c:	3b01      	subs	r3, #1
 801179e:	025b      	lsls	r3, r3, #9
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	431a      	orrs	r2, r3
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117a8:	3b01      	subs	r3, #1
 80117aa:	041b      	lsls	r3, r3, #16
 80117ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80117b0:	431a      	orrs	r2, r3
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117b6:	3b01      	subs	r3, #1
 80117b8:	061b      	lsls	r3, r3, #24
 80117ba:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80117be:	4938      	ldr	r1, [pc, #224]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80117c0:	4313      	orrs	r3, r2
 80117c2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80117c4:	4b36      	ldr	r3, [pc, #216]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80117c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117c8:	4a35      	ldr	r2, [pc, #212]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80117ca:	f023 0301 	bic.w	r3, r3, #1
 80117ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80117d0:	4b33      	ldr	r3, [pc, #204]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80117d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80117d4:	4b34      	ldr	r3, [pc, #208]	@ (80118a8 <HAL_RCC_OscConfig+0x6cc>)
 80117d6:	4013      	ands	r3, r2
 80117d8:	687a      	ldr	r2, [r7, #4]
 80117da:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80117dc:	00d2      	lsls	r2, r2, #3
 80117de:	4930      	ldr	r1, [pc, #192]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80117e0:	4313      	orrs	r3, r2
 80117e2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80117e4:	4b2e      	ldr	r3, [pc, #184]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80117e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117e8:	f023 020c 	bic.w	r2, r3, #12
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117f0:	492b      	ldr	r1, [pc, #172]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80117f2:	4313      	orrs	r3, r2
 80117f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80117f6:	4b2a      	ldr	r3, [pc, #168]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 80117f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117fa:	f023 0202 	bic.w	r2, r3, #2
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011802:	4927      	ldr	r1, [pc, #156]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011804:	4313      	orrs	r3, r2
 8011806:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011808:	4b25      	ldr	r3, [pc, #148]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 801180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801180c:	4a24      	ldr	r2, [pc, #144]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 801180e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011814:	4b22      	ldr	r3, [pc, #136]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011818:	4a21      	ldr	r2, [pc, #132]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 801181a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801181e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011820:	4b1f      	ldr	r3, [pc, #124]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011824:	4a1e      	ldr	r2, [pc, #120]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011826:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801182a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801182c:	4b1c      	ldr	r3, [pc, #112]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 801182e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011830:	4a1b      	ldr	r2, [pc, #108]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011832:	f043 0301 	orr.w	r3, r3, #1
 8011836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011838:	4b19      	ldr	r3, [pc, #100]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	4a18      	ldr	r2, [pc, #96]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 801183e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011844:	f7f7 fe96 	bl	8009574 <HAL_GetTick>
 8011848:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801184a:	e008      	b.n	801185e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801184c:	f7f7 fe92 	bl	8009574 <HAL_GetTick>
 8011850:	4602      	mov	r2, r0
 8011852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011854:	1ad3      	subs	r3, r2, r3
 8011856:	2b02      	cmp	r3, #2
 8011858:	d901      	bls.n	801185e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801185a:	2303      	movs	r3, #3
 801185c:	e090      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801185e:	4b10      	ldr	r3, [pc, #64]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011866:	2b00      	cmp	r3, #0
 8011868:	d0f0      	beq.n	801184c <HAL_RCC_OscConfig+0x670>
 801186a:	e088      	b.n	801197e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801186c:	4b0c      	ldr	r3, [pc, #48]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	4a0b      	ldr	r2, [pc, #44]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011878:	f7f7 fe7c 	bl	8009574 <HAL_GetTick>
 801187c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801187e:	e008      	b.n	8011892 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011880:	f7f7 fe78 	bl	8009574 <HAL_GetTick>
 8011884:	4602      	mov	r2, r0
 8011886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011888:	1ad3      	subs	r3, r2, r3
 801188a:	2b02      	cmp	r3, #2
 801188c:	d901      	bls.n	8011892 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801188e:	2303      	movs	r3, #3
 8011890:	e076      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011892:	4b03      	ldr	r3, [pc, #12]	@ (80118a0 <HAL_RCC_OscConfig+0x6c4>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801189a:	2b00      	cmp	r3, #0
 801189c:	d1f0      	bne.n	8011880 <HAL_RCC_OscConfig+0x6a4>
 801189e:	e06e      	b.n	801197e <HAL_RCC_OscConfig+0x7a2>
 80118a0:	58024400 	.word	0x58024400
 80118a4:	fffffc0c 	.word	0xfffffc0c
 80118a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80118ac:	4b36      	ldr	r3, [pc, #216]	@ (8011988 <HAL_RCC_OscConfig+0x7ac>)
 80118ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80118b2:	4b35      	ldr	r3, [pc, #212]	@ (8011988 <HAL_RCC_OscConfig+0x7ac>)
 80118b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d031      	beq.n	8011924 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	f003 0203 	and.w	r2, r3, #3
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d12a      	bne.n	8011924 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	091b      	lsrs	r3, r3, #4
 80118d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80118da:	429a      	cmp	r2, r3
 80118dc:	d122      	bne.n	8011924 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80118e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d11a      	bne.n	8011924 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	0a5b      	lsrs	r3, r3, #9
 80118f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d111      	bne.n	8011924 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	0c1b      	lsrs	r3, r3, #16
 8011904:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801190c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801190e:	429a      	cmp	r2, r3
 8011910:	d108      	bne.n	8011924 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	0e1b      	lsrs	r3, r3, #24
 8011916:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801191e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011920:	429a      	cmp	r2, r3
 8011922:	d001      	beq.n	8011928 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8011924:	2301      	movs	r3, #1
 8011926:	e02b      	b.n	8011980 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011928:	4b17      	ldr	r3, [pc, #92]	@ (8011988 <HAL_RCC_OscConfig+0x7ac>)
 801192a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801192c:	08db      	lsrs	r3, r3, #3
 801192e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011932:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011938:	693a      	ldr	r2, [r7, #16]
 801193a:	429a      	cmp	r2, r3
 801193c:	d01f      	beq.n	801197e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801193e:	4b12      	ldr	r3, [pc, #72]	@ (8011988 <HAL_RCC_OscConfig+0x7ac>)
 8011940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011942:	4a11      	ldr	r2, [pc, #68]	@ (8011988 <HAL_RCC_OscConfig+0x7ac>)
 8011944:	f023 0301 	bic.w	r3, r3, #1
 8011948:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801194a:	f7f7 fe13 	bl	8009574 <HAL_GetTick>
 801194e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011950:	bf00      	nop
 8011952:	f7f7 fe0f 	bl	8009574 <HAL_GetTick>
 8011956:	4602      	mov	r2, r0
 8011958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801195a:	4293      	cmp	r3, r2
 801195c:	d0f9      	beq.n	8011952 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801195e:	4b0a      	ldr	r3, [pc, #40]	@ (8011988 <HAL_RCC_OscConfig+0x7ac>)
 8011960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011962:	4b0a      	ldr	r3, [pc, #40]	@ (801198c <HAL_RCC_OscConfig+0x7b0>)
 8011964:	4013      	ands	r3, r2
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801196a:	00d2      	lsls	r2, r2, #3
 801196c:	4906      	ldr	r1, [pc, #24]	@ (8011988 <HAL_RCC_OscConfig+0x7ac>)
 801196e:	4313      	orrs	r3, r2
 8011970:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8011972:	4b05      	ldr	r3, [pc, #20]	@ (8011988 <HAL_RCC_OscConfig+0x7ac>)
 8011974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011976:	4a04      	ldr	r2, [pc, #16]	@ (8011988 <HAL_RCC_OscConfig+0x7ac>)
 8011978:	f043 0301 	orr.w	r3, r3, #1
 801197c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801197e:	2300      	movs	r3, #0
}
 8011980:	4618      	mov	r0, r3
 8011982:	3730      	adds	r7, #48	@ 0x30
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}
 8011988:	58024400 	.word	0x58024400
 801198c:	ffff0007 	.word	0xffff0007

08011990 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b086      	sub	sp, #24
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d101      	bne.n	80119a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80119a0:	2301      	movs	r3, #1
 80119a2:	e19c      	b.n	8011cde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80119a4:	4b8a      	ldr	r3, [pc, #552]	@ (8011bd0 <HAL_RCC_ClockConfig+0x240>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	f003 030f 	and.w	r3, r3, #15
 80119ac:	683a      	ldr	r2, [r7, #0]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d910      	bls.n	80119d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80119b2:	4b87      	ldr	r3, [pc, #540]	@ (8011bd0 <HAL_RCC_ClockConfig+0x240>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	f023 020f 	bic.w	r2, r3, #15
 80119ba:	4985      	ldr	r1, [pc, #532]	@ (8011bd0 <HAL_RCC_ClockConfig+0x240>)
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	4313      	orrs	r3, r2
 80119c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80119c2:	4b83      	ldr	r3, [pc, #524]	@ (8011bd0 <HAL_RCC_ClockConfig+0x240>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	f003 030f 	and.w	r3, r3, #15
 80119ca:	683a      	ldr	r2, [r7, #0]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d001      	beq.n	80119d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80119d0:	2301      	movs	r3, #1
 80119d2:	e184      	b.n	8011cde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f003 0304 	and.w	r3, r3, #4
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d010      	beq.n	8011a02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	691a      	ldr	r2, [r3, #16]
 80119e4:	4b7b      	ldr	r3, [pc, #492]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 80119e6:	699b      	ldr	r3, [r3, #24]
 80119e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d908      	bls.n	8011a02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80119f0:	4b78      	ldr	r3, [pc, #480]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 80119f2:	699b      	ldr	r3, [r3, #24]
 80119f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	691b      	ldr	r3, [r3, #16]
 80119fc:	4975      	ldr	r1, [pc, #468]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 80119fe:	4313      	orrs	r3, r2
 8011a00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f003 0308 	and.w	r3, r3, #8
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d010      	beq.n	8011a30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	695a      	ldr	r2, [r3, #20]
 8011a12:	4b70      	ldr	r3, [pc, #448]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011a14:	69db      	ldr	r3, [r3, #28]
 8011a16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d908      	bls.n	8011a30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011a20:	69db      	ldr	r3, [r3, #28]
 8011a22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	695b      	ldr	r3, [r3, #20]
 8011a2a:	496a      	ldr	r1, [pc, #424]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011a2c:	4313      	orrs	r3, r2
 8011a2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f003 0310 	and.w	r3, r3, #16
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d010      	beq.n	8011a5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	699a      	ldr	r2, [r3, #24]
 8011a40:	4b64      	ldr	r3, [pc, #400]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011a42:	69db      	ldr	r3, [r3, #28]
 8011a44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d908      	bls.n	8011a5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011a4c:	4b61      	ldr	r3, [pc, #388]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011a4e:	69db      	ldr	r3, [r3, #28]
 8011a50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	699b      	ldr	r3, [r3, #24]
 8011a58:	495e      	ldr	r1, [pc, #376]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011a5a:	4313      	orrs	r3, r2
 8011a5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	f003 0320 	and.w	r3, r3, #32
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d010      	beq.n	8011a8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	69da      	ldr	r2, [r3, #28]
 8011a6e:	4b59      	ldr	r3, [pc, #356]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011a70:	6a1b      	ldr	r3, [r3, #32]
 8011a72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d908      	bls.n	8011a8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011a7a:	4b56      	ldr	r3, [pc, #344]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011a7c:	6a1b      	ldr	r3, [r3, #32]
 8011a7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	69db      	ldr	r3, [r3, #28]
 8011a86:	4953      	ldr	r1, [pc, #332]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011a88:	4313      	orrs	r3, r2
 8011a8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	f003 0302 	and.w	r3, r3, #2
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d010      	beq.n	8011aba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	68da      	ldr	r2, [r3, #12]
 8011a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011a9e:	699b      	ldr	r3, [r3, #24]
 8011aa0:	f003 030f 	and.w	r3, r3, #15
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d908      	bls.n	8011aba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011aaa:	699b      	ldr	r3, [r3, #24]
 8011aac:	f023 020f 	bic.w	r2, r3, #15
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	68db      	ldr	r3, [r3, #12]
 8011ab4:	4947      	ldr	r1, [pc, #284]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	f003 0301 	and.w	r3, r3, #1
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d055      	beq.n	8011b72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011ac6:	4b43      	ldr	r3, [pc, #268]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011ac8:	699b      	ldr	r3, [r3, #24]
 8011aca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	689b      	ldr	r3, [r3, #8]
 8011ad2:	4940      	ldr	r1, [pc, #256]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011ad4:	4313      	orrs	r3, r2
 8011ad6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d107      	bne.n	8011af0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011ae0:	4b3c      	ldr	r3, [pc, #240]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d121      	bne.n	8011b30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011aec:	2301      	movs	r3, #1
 8011aee:	e0f6      	b.n	8011cde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	2b03      	cmp	r3, #3
 8011af6:	d107      	bne.n	8011b08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011af8:	4b36      	ldr	r3, [pc, #216]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d115      	bne.n	8011b30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b04:	2301      	movs	r3, #1
 8011b06:	e0ea      	b.n	8011cde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	685b      	ldr	r3, [r3, #4]
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	d107      	bne.n	8011b20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011b10:	4b30      	ldr	r3, [pc, #192]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d109      	bne.n	8011b30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e0de      	b.n	8011cde <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011b20:	4b2c      	ldr	r3, [pc, #176]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	f003 0304 	and.w	r3, r3, #4
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d101      	bne.n	8011b30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	e0d6      	b.n	8011cde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011b30:	4b28      	ldr	r3, [pc, #160]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011b32:	691b      	ldr	r3, [r3, #16]
 8011b34:	f023 0207 	bic.w	r2, r3, #7
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	4925      	ldr	r1, [pc, #148]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011b3e:	4313      	orrs	r3, r2
 8011b40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011b42:	f7f7 fd17 	bl	8009574 <HAL_GetTick>
 8011b46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011b48:	e00a      	b.n	8011b60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011b4a:	f7f7 fd13 	bl	8009574 <HAL_GetTick>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011b58:	4293      	cmp	r3, r2
 8011b5a:	d901      	bls.n	8011b60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011b5c:	2303      	movs	r3, #3
 8011b5e:	e0be      	b.n	8011cde <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011b60:	4b1c      	ldr	r3, [pc, #112]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011b62:	691b      	ldr	r3, [r3, #16]
 8011b64:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	685b      	ldr	r3, [r3, #4]
 8011b6c:	00db      	lsls	r3, r3, #3
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d1eb      	bne.n	8011b4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	f003 0302 	and.w	r3, r3, #2
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d010      	beq.n	8011ba0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	68da      	ldr	r2, [r3, #12]
 8011b82:	4b14      	ldr	r3, [pc, #80]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011b84:	699b      	ldr	r3, [r3, #24]
 8011b86:	f003 030f 	and.w	r3, r3, #15
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d208      	bcs.n	8011ba0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011b8e:	4b11      	ldr	r3, [pc, #68]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011b90:	699b      	ldr	r3, [r3, #24]
 8011b92:	f023 020f 	bic.w	r2, r3, #15
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	490e      	ldr	r1, [pc, #56]	@ (8011bd4 <HAL_RCC_ClockConfig+0x244>)
 8011b9c:	4313      	orrs	r3, r2
 8011b9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8011bd0 <HAL_RCC_ClockConfig+0x240>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	f003 030f 	and.w	r3, r3, #15
 8011ba8:	683a      	ldr	r2, [r7, #0]
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d214      	bcs.n	8011bd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011bae:	4b08      	ldr	r3, [pc, #32]	@ (8011bd0 <HAL_RCC_ClockConfig+0x240>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f023 020f 	bic.w	r2, r3, #15
 8011bb6:	4906      	ldr	r1, [pc, #24]	@ (8011bd0 <HAL_RCC_ClockConfig+0x240>)
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	4313      	orrs	r3, r2
 8011bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011bbe:	4b04      	ldr	r3, [pc, #16]	@ (8011bd0 <HAL_RCC_ClockConfig+0x240>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	f003 030f 	and.w	r3, r3, #15
 8011bc6:	683a      	ldr	r2, [r7, #0]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d005      	beq.n	8011bd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011bcc:	2301      	movs	r3, #1
 8011bce:	e086      	b.n	8011cde <HAL_RCC_ClockConfig+0x34e>
 8011bd0:	52002000 	.word	0x52002000
 8011bd4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	f003 0304 	and.w	r3, r3, #4
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d010      	beq.n	8011c06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	691a      	ldr	r2, [r3, #16]
 8011be8:	4b3f      	ldr	r3, [pc, #252]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011bea:	699b      	ldr	r3, [r3, #24]
 8011bec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d208      	bcs.n	8011c06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011bf6:	699b      	ldr	r3, [r3, #24]
 8011bf8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	691b      	ldr	r3, [r3, #16]
 8011c00:	4939      	ldr	r1, [pc, #228]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011c02:	4313      	orrs	r3, r2
 8011c04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f003 0308 	and.w	r3, r3, #8
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d010      	beq.n	8011c34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	695a      	ldr	r2, [r3, #20]
 8011c16:	4b34      	ldr	r3, [pc, #208]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011c18:	69db      	ldr	r3, [r3, #28]
 8011c1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d208      	bcs.n	8011c34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011c22:	4b31      	ldr	r3, [pc, #196]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011c24:	69db      	ldr	r3, [r3, #28]
 8011c26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	695b      	ldr	r3, [r3, #20]
 8011c2e:	492e      	ldr	r1, [pc, #184]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011c30:	4313      	orrs	r3, r2
 8011c32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f003 0310 	and.w	r3, r3, #16
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d010      	beq.n	8011c62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	699a      	ldr	r2, [r3, #24]
 8011c44:	4b28      	ldr	r3, [pc, #160]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011c46:	69db      	ldr	r3, [r3, #28]
 8011c48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d208      	bcs.n	8011c62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011c50:	4b25      	ldr	r3, [pc, #148]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011c52:	69db      	ldr	r3, [r3, #28]
 8011c54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	699b      	ldr	r3, [r3, #24]
 8011c5c:	4922      	ldr	r1, [pc, #136]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	f003 0320 	and.w	r3, r3, #32
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d010      	beq.n	8011c90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	69da      	ldr	r2, [r3, #28]
 8011c72:	4b1d      	ldr	r3, [pc, #116]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011c74:	6a1b      	ldr	r3, [r3, #32]
 8011c76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d208      	bcs.n	8011c90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011c80:	6a1b      	ldr	r3, [r3, #32]
 8011c82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	69db      	ldr	r3, [r3, #28]
 8011c8a:	4917      	ldr	r1, [pc, #92]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011c8c:	4313      	orrs	r3, r2
 8011c8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011c90:	f000 f834 	bl	8011cfc <HAL_RCC_GetSysClockFreq>
 8011c94:	4602      	mov	r2, r0
 8011c96:	4b14      	ldr	r3, [pc, #80]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011c98:	699b      	ldr	r3, [r3, #24]
 8011c9a:	0a1b      	lsrs	r3, r3, #8
 8011c9c:	f003 030f 	and.w	r3, r3, #15
 8011ca0:	4912      	ldr	r1, [pc, #72]	@ (8011cec <HAL_RCC_ClockConfig+0x35c>)
 8011ca2:	5ccb      	ldrb	r3, [r1, r3]
 8011ca4:	f003 031f 	and.w	r3, r3, #31
 8011ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8011cac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011cae:	4b0e      	ldr	r3, [pc, #56]	@ (8011ce8 <HAL_RCC_ClockConfig+0x358>)
 8011cb0:	699b      	ldr	r3, [r3, #24]
 8011cb2:	f003 030f 	and.w	r3, r3, #15
 8011cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8011cec <HAL_RCC_ClockConfig+0x35c>)
 8011cb8:	5cd3      	ldrb	r3, [r2, r3]
 8011cba:	f003 031f 	and.w	r3, r3, #31
 8011cbe:	693a      	ldr	r2, [r7, #16]
 8011cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8011cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8011cf0 <HAL_RCC_ClockConfig+0x360>)
 8011cc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8011cf4 <HAL_RCC_ClockConfig+0x364>)
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8011cce:	4b0a      	ldr	r3, [pc, #40]	@ (8011cf8 <HAL_RCC_ClockConfig+0x368>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7f7 fc04 	bl	80094e0 <HAL_InitTick>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3718      	adds	r7, #24
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	58024400 	.word	0x58024400
 8011cec:	0801ebec 	.word	0x0801ebec
 8011cf0:	24000008 	.word	0x24000008
 8011cf4:	24000004 	.word	0x24000004
 8011cf8:	2400000c 	.word	0x2400000c

08011cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b089      	sub	sp, #36	@ 0x24
 8011d00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011d02:	4bb3      	ldr	r3, [pc, #716]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d04:	691b      	ldr	r3, [r3, #16]
 8011d06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011d0a:	2b18      	cmp	r3, #24
 8011d0c:	f200 8155 	bhi.w	8011fba <HAL_RCC_GetSysClockFreq+0x2be>
 8011d10:	a201      	add	r2, pc, #4	@ (adr r2, 8011d18 <HAL_RCC_GetSysClockFreq+0x1c>)
 8011d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d16:	bf00      	nop
 8011d18:	08011d7d 	.word	0x08011d7d
 8011d1c:	08011fbb 	.word	0x08011fbb
 8011d20:	08011fbb 	.word	0x08011fbb
 8011d24:	08011fbb 	.word	0x08011fbb
 8011d28:	08011fbb 	.word	0x08011fbb
 8011d2c:	08011fbb 	.word	0x08011fbb
 8011d30:	08011fbb 	.word	0x08011fbb
 8011d34:	08011fbb 	.word	0x08011fbb
 8011d38:	08011da3 	.word	0x08011da3
 8011d3c:	08011fbb 	.word	0x08011fbb
 8011d40:	08011fbb 	.word	0x08011fbb
 8011d44:	08011fbb 	.word	0x08011fbb
 8011d48:	08011fbb 	.word	0x08011fbb
 8011d4c:	08011fbb 	.word	0x08011fbb
 8011d50:	08011fbb 	.word	0x08011fbb
 8011d54:	08011fbb 	.word	0x08011fbb
 8011d58:	08011da9 	.word	0x08011da9
 8011d5c:	08011fbb 	.word	0x08011fbb
 8011d60:	08011fbb 	.word	0x08011fbb
 8011d64:	08011fbb 	.word	0x08011fbb
 8011d68:	08011fbb 	.word	0x08011fbb
 8011d6c:	08011fbb 	.word	0x08011fbb
 8011d70:	08011fbb 	.word	0x08011fbb
 8011d74:	08011fbb 	.word	0x08011fbb
 8011d78:	08011daf 	.word	0x08011daf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d7c:	4b94      	ldr	r3, [pc, #592]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	f003 0320 	and.w	r3, r3, #32
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d009      	beq.n	8011d9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011d88:	4b91      	ldr	r3, [pc, #580]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	08db      	lsrs	r3, r3, #3
 8011d8e:	f003 0303 	and.w	r3, r3, #3
 8011d92:	4a90      	ldr	r2, [pc, #576]	@ (8011fd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011d94:	fa22 f303 	lsr.w	r3, r2, r3
 8011d98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011d9a:	e111      	b.n	8011fc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011d9c:	4b8d      	ldr	r3, [pc, #564]	@ (8011fd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011d9e:	61bb      	str	r3, [r7, #24]
      break;
 8011da0:	e10e      	b.n	8011fc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8011da2:	4b8d      	ldr	r3, [pc, #564]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011da4:	61bb      	str	r3, [r7, #24]
      break;
 8011da6:	e10b      	b.n	8011fc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011da8:	4b8c      	ldr	r3, [pc, #560]	@ (8011fdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011daa:	61bb      	str	r3, [r7, #24]
      break;
 8011dac:	e108      	b.n	8011fc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011dae:	4b88      	ldr	r3, [pc, #544]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011db2:	f003 0303 	and.w	r3, r3, #3
 8011db6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011db8:	4b85      	ldr	r3, [pc, #532]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dbc:	091b      	lsrs	r3, r3, #4
 8011dbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011dc2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011dc4:	4b82      	ldr	r3, [pc, #520]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dc8:	f003 0301 	and.w	r3, r3, #1
 8011dcc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011dce:	4b80      	ldr	r3, [pc, #512]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dd2:	08db      	lsrs	r3, r3, #3
 8011dd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011dd8:	68fa      	ldr	r2, [r7, #12]
 8011dda:	fb02 f303 	mul.w	r3, r2, r3
 8011dde:	ee07 3a90 	vmov	s15, r3
 8011de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011de6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	f000 80e1 	beq.w	8011fb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8011df2:	697b      	ldr	r3, [r7, #20]
 8011df4:	2b02      	cmp	r3, #2
 8011df6:	f000 8083 	beq.w	8011f00 <HAL_RCC_GetSysClockFreq+0x204>
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	2b02      	cmp	r3, #2
 8011dfe:	f200 80a1 	bhi.w	8011f44 <HAL_RCC_GetSysClockFreq+0x248>
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d003      	beq.n	8011e10 <HAL_RCC_GetSysClockFreq+0x114>
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	d056      	beq.n	8011ebc <HAL_RCC_GetSysClockFreq+0x1c0>
 8011e0e:	e099      	b.n	8011f44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e10:	4b6f      	ldr	r3, [pc, #444]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	f003 0320 	and.w	r3, r3, #32
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d02d      	beq.n	8011e78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011e1c:	4b6c      	ldr	r3, [pc, #432]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	08db      	lsrs	r3, r3, #3
 8011e22:	f003 0303 	and.w	r3, r3, #3
 8011e26:	4a6b      	ldr	r2, [pc, #428]	@ (8011fd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011e28:	fa22 f303 	lsr.w	r3, r2, r3
 8011e2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	ee07 3a90 	vmov	s15, r3
 8011e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	ee07 3a90 	vmov	s15, r3
 8011e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e46:	4b62      	ldr	r3, [pc, #392]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e4e:	ee07 3a90 	vmov	s15, r3
 8011e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e56:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e5a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011e76:	e087      	b.n	8011f88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	ee07 3a90 	vmov	s15, r3
 8011e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011fe4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e8a:	4b51      	ldr	r3, [pc, #324]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e92:	ee07 3a90 	vmov	s15, r3
 8011e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e9e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011eb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011eba:	e065      	b.n	8011f88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	ee07 3a90 	vmov	s15, r3
 8011ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ec6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011fe8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ece:	4b40      	ldr	r3, [pc, #256]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ed6:	ee07 3a90 	vmov	s15, r3
 8011eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8011ee2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011efa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011efe:	e043      	b.n	8011f88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	ee07 3a90 	vmov	s15, r3
 8011f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011fec <HAL_RCC_GetSysClockFreq+0x2f0>
 8011f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f12:	4b2f      	ldr	r3, [pc, #188]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f1a:	ee07 3a90 	vmov	s15, r3
 8011f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8011f26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011f42:	e021      	b.n	8011f88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	ee07 3a90 	vmov	s15, r3
 8011f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011fe8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f56:	4b1e      	ldr	r3, [pc, #120]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f5e:	ee07 3a90 	vmov	s15, r3
 8011f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8011f6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011fe0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011f86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011f88:	4b11      	ldr	r3, [pc, #68]	@ (8011fd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f8c:	0a5b      	lsrs	r3, r3, #9
 8011f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f92:	3301      	adds	r3, #1
 8011f94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	ee07 3a90 	vmov	s15, r3
 8011f9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011fa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8011fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011fac:	ee17 3a90 	vmov	r3, s15
 8011fb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011fb2:	e005      	b.n	8011fc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	61bb      	str	r3, [r7, #24]
      break;
 8011fb8:	e002      	b.n	8011fc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011fba:	4b07      	ldr	r3, [pc, #28]	@ (8011fd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011fbc:	61bb      	str	r3, [r7, #24]
      break;
 8011fbe:	bf00      	nop
  }

  return sysclockfreq;
 8011fc0:	69bb      	ldr	r3, [r7, #24]
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	3724      	adds	r7, #36	@ 0x24
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fcc:	4770      	bx	lr
 8011fce:	bf00      	nop
 8011fd0:	58024400 	.word	0x58024400
 8011fd4:	03d09000 	.word	0x03d09000
 8011fd8:	003d0900 	.word	0x003d0900
 8011fdc:	016e3600 	.word	0x016e3600
 8011fe0:	46000000 	.word	0x46000000
 8011fe4:	4c742400 	.word	0x4c742400
 8011fe8:	4a742400 	.word	0x4a742400
 8011fec:	4bb71b00 	.word	0x4bb71b00

08011ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011ff6:	f7ff fe81 	bl	8011cfc <HAL_RCC_GetSysClockFreq>
 8011ffa:	4602      	mov	r2, r0
 8011ffc:	4b10      	ldr	r3, [pc, #64]	@ (8012040 <HAL_RCC_GetHCLKFreq+0x50>)
 8011ffe:	699b      	ldr	r3, [r3, #24]
 8012000:	0a1b      	lsrs	r3, r3, #8
 8012002:	f003 030f 	and.w	r3, r3, #15
 8012006:	490f      	ldr	r1, [pc, #60]	@ (8012044 <HAL_RCC_GetHCLKFreq+0x54>)
 8012008:	5ccb      	ldrb	r3, [r1, r3]
 801200a:	f003 031f 	and.w	r3, r3, #31
 801200e:	fa22 f303 	lsr.w	r3, r2, r3
 8012012:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012014:	4b0a      	ldr	r3, [pc, #40]	@ (8012040 <HAL_RCC_GetHCLKFreq+0x50>)
 8012016:	699b      	ldr	r3, [r3, #24]
 8012018:	f003 030f 	and.w	r3, r3, #15
 801201c:	4a09      	ldr	r2, [pc, #36]	@ (8012044 <HAL_RCC_GetHCLKFreq+0x54>)
 801201e:	5cd3      	ldrb	r3, [r2, r3]
 8012020:	f003 031f 	and.w	r3, r3, #31
 8012024:	687a      	ldr	r2, [r7, #4]
 8012026:	fa22 f303 	lsr.w	r3, r2, r3
 801202a:	4a07      	ldr	r2, [pc, #28]	@ (8012048 <HAL_RCC_GetHCLKFreq+0x58>)
 801202c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801202e:	4a07      	ldr	r2, [pc, #28]	@ (801204c <HAL_RCC_GetHCLKFreq+0x5c>)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012034:	4b04      	ldr	r3, [pc, #16]	@ (8012048 <HAL_RCC_GetHCLKFreq+0x58>)
 8012036:	681b      	ldr	r3, [r3, #0]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3708      	adds	r7, #8
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	58024400 	.word	0x58024400
 8012044:	0801ebec 	.word	0x0801ebec
 8012048:	24000008 	.word	0x24000008
 801204c:	24000004 	.word	0x24000004

08012050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8012054:	f7ff ffcc 	bl	8011ff0 <HAL_RCC_GetHCLKFreq>
 8012058:	4602      	mov	r2, r0
 801205a:	4b06      	ldr	r3, [pc, #24]	@ (8012074 <HAL_RCC_GetPCLK1Freq+0x24>)
 801205c:	69db      	ldr	r3, [r3, #28]
 801205e:	091b      	lsrs	r3, r3, #4
 8012060:	f003 0307 	and.w	r3, r3, #7
 8012064:	4904      	ldr	r1, [pc, #16]	@ (8012078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8012066:	5ccb      	ldrb	r3, [r1, r3]
 8012068:	f003 031f 	and.w	r3, r3, #31
 801206c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012070:	4618      	mov	r0, r3
 8012072:	bd80      	pop	{r7, pc}
 8012074:	58024400 	.word	0x58024400
 8012078:	0801ebec 	.word	0x0801ebec

0801207c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8012080:	f7ff ffb6 	bl	8011ff0 <HAL_RCC_GetHCLKFreq>
 8012084:	4602      	mov	r2, r0
 8012086:	4b06      	ldr	r3, [pc, #24]	@ (80120a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012088:	69db      	ldr	r3, [r3, #28]
 801208a:	0a1b      	lsrs	r3, r3, #8
 801208c:	f003 0307 	and.w	r3, r3, #7
 8012090:	4904      	ldr	r1, [pc, #16]	@ (80120a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8012092:	5ccb      	ldrb	r3, [r1, r3]
 8012094:	f003 031f 	and.w	r3, r3, #31
 8012098:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801209c:	4618      	mov	r0, r3
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	58024400 	.word	0x58024400
 80120a4:	0801ebec 	.word	0x0801ebec

080120a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80120a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80120ac:	b0c6      	sub	sp, #280	@ 0x118
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80120b4:	2300      	movs	r3, #0
 80120b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80120ba:	2300      	movs	r3, #0
 80120bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80120c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80120cc:	2500      	movs	r5, #0
 80120ce:	ea54 0305 	orrs.w	r3, r4, r5
 80120d2:	d049      	beq.n	8012168 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80120d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80120da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80120de:	d02f      	beq.n	8012140 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80120e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80120e4:	d828      	bhi.n	8012138 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80120e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80120ea:	d01a      	beq.n	8012122 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80120ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80120f0:	d822      	bhi.n	8012138 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d003      	beq.n	80120fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80120f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80120fa:	d007      	beq.n	801210c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80120fc:	e01c      	b.n	8012138 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80120fe:	4bab      	ldr	r3, [pc, #684]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012102:	4aaa      	ldr	r2, [pc, #680]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012108:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801210a:	e01a      	b.n	8012142 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801210c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012110:	3308      	adds	r3, #8
 8012112:	2102      	movs	r1, #2
 8012114:	4618      	mov	r0, r3
 8012116:	f002 fa49 	bl	80145ac <RCCEx_PLL2_Config>
 801211a:	4603      	mov	r3, r0
 801211c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012120:	e00f      	b.n	8012142 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012126:	3328      	adds	r3, #40	@ 0x28
 8012128:	2102      	movs	r1, #2
 801212a:	4618      	mov	r0, r3
 801212c:	f002 faf0 	bl	8014710 <RCCEx_PLL3_Config>
 8012130:	4603      	mov	r3, r0
 8012132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012136:	e004      	b.n	8012142 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012138:	2301      	movs	r3, #1
 801213a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801213e:	e000      	b.n	8012142 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8012140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012146:	2b00      	cmp	r3, #0
 8012148:	d10a      	bne.n	8012160 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801214a:	4b98      	ldr	r3, [pc, #608]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801214c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801214e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012158:	4a94      	ldr	r2, [pc, #592]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801215a:	430b      	orrs	r3, r1
 801215c:	6513      	str	r3, [r2, #80]	@ 0x50
 801215e:	e003      	b.n	8012168 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012170:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8012174:	f04f 0900 	mov.w	r9, #0
 8012178:	ea58 0309 	orrs.w	r3, r8, r9
 801217c:	d047      	beq.n	801220e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801217e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012184:	2b04      	cmp	r3, #4
 8012186:	d82a      	bhi.n	80121de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8012188:	a201      	add	r2, pc, #4	@ (adr r2, 8012190 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801218a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801218e:	bf00      	nop
 8012190:	080121a5 	.word	0x080121a5
 8012194:	080121b3 	.word	0x080121b3
 8012198:	080121c9 	.word	0x080121c9
 801219c:	080121e7 	.word	0x080121e7
 80121a0:	080121e7 	.word	0x080121e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121a4:	4b81      	ldr	r3, [pc, #516]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121a8:	4a80      	ldr	r2, [pc, #512]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80121ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121b0:	e01a      	b.n	80121e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80121b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121b6:	3308      	adds	r3, #8
 80121b8:	2100      	movs	r1, #0
 80121ba:	4618      	mov	r0, r3
 80121bc:	f002 f9f6 	bl	80145ac <RCCEx_PLL2_Config>
 80121c0:	4603      	mov	r3, r0
 80121c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121c6:	e00f      	b.n	80121e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80121c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121cc:	3328      	adds	r3, #40	@ 0x28
 80121ce:	2100      	movs	r1, #0
 80121d0:	4618      	mov	r0, r3
 80121d2:	f002 fa9d 	bl	8014710 <RCCEx_PLL3_Config>
 80121d6:	4603      	mov	r3, r0
 80121d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121dc:	e004      	b.n	80121e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80121de:	2301      	movs	r3, #1
 80121e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80121e4:	e000      	b.n	80121e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80121e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80121e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d10a      	bne.n	8012206 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80121f0:	4b6e      	ldr	r3, [pc, #440]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80121f4:	f023 0107 	bic.w	r1, r3, #7
 80121f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80121fe:	4a6b      	ldr	r2, [pc, #428]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012200:	430b      	orrs	r3, r1
 8012202:	6513      	str	r3, [r2, #80]	@ 0x50
 8012204:	e003      	b.n	801220e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012206:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801220a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801220e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012216:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 801221a:	f04f 0b00 	mov.w	fp, #0
 801221e:	ea5a 030b 	orrs.w	r3, sl, fp
 8012222:	d05b      	beq.n	80122dc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8012224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012228:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801222c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8012230:	d03b      	beq.n	80122aa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8012232:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8012236:	d834      	bhi.n	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012238:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801223c:	d037      	beq.n	80122ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 801223e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012242:	d82e      	bhi.n	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012244:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012248:	d033      	beq.n	80122b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801224a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801224e:	d828      	bhi.n	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012250:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012254:	d01a      	beq.n	801228c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8012256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801225a:	d822      	bhi.n	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801225c:	2b00      	cmp	r3, #0
 801225e:	d003      	beq.n	8012268 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8012260:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012264:	d007      	beq.n	8012276 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8012266:	e01c      	b.n	80122a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012268:	4b50      	ldr	r3, [pc, #320]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801226c:	4a4f      	ldr	r2, [pc, #316]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801226e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012274:	e01e      	b.n	80122b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801227a:	3308      	adds	r3, #8
 801227c:	2100      	movs	r1, #0
 801227e:	4618      	mov	r0, r3
 8012280:	f002 f994 	bl	80145ac <RCCEx_PLL2_Config>
 8012284:	4603      	mov	r3, r0
 8012286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801228a:	e013      	b.n	80122b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801228c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012290:	3328      	adds	r3, #40	@ 0x28
 8012292:	2100      	movs	r1, #0
 8012294:	4618      	mov	r0, r3
 8012296:	f002 fa3b 	bl	8014710 <RCCEx_PLL3_Config>
 801229a:	4603      	mov	r3, r0
 801229c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80122a0:	e008      	b.n	80122b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80122a2:	2301      	movs	r3, #1
 80122a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80122a8:	e004      	b.n	80122b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80122aa:	bf00      	nop
 80122ac:	e002      	b.n	80122b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80122ae:	bf00      	nop
 80122b0:	e000      	b.n	80122b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80122b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80122b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d10b      	bne.n	80122d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80122bc:	4b3b      	ldr	r3, [pc, #236]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122c0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80122c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80122cc:	4a37      	ldr	r2, [pc, #220]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122ce:	430b      	orrs	r3, r1
 80122d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80122d2:	e003      	b.n	80122dc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80122dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80122e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80122ec:	2300      	movs	r3, #0
 80122ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80122f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80122f6:	460b      	mov	r3, r1
 80122f8:	4313      	orrs	r3, r2
 80122fa:	d05d      	beq.n	80123b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80122fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012300:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012304:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8012308:	d03b      	beq.n	8012382 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801230a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801230e:	d834      	bhi.n	801237a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012310:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012314:	d037      	beq.n	8012386 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8012316:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801231a:	d82e      	bhi.n	801237a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801231c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012320:	d033      	beq.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8012322:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012326:	d828      	bhi.n	801237a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012328:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801232c:	d01a      	beq.n	8012364 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801232e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012332:	d822      	bhi.n	801237a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012334:	2b00      	cmp	r3, #0
 8012336:	d003      	beq.n	8012340 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8012338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801233c:	d007      	beq.n	801234e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801233e:	e01c      	b.n	801237a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012340:	4b1a      	ldr	r3, [pc, #104]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012344:	4a19      	ldr	r2, [pc, #100]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801234a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801234c:	e01e      	b.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801234e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012352:	3308      	adds	r3, #8
 8012354:	2100      	movs	r1, #0
 8012356:	4618      	mov	r0, r3
 8012358:	f002 f928 	bl	80145ac <RCCEx_PLL2_Config>
 801235c:	4603      	mov	r3, r0
 801235e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8012362:	e013      	b.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012368:	3328      	adds	r3, #40	@ 0x28
 801236a:	2100      	movs	r1, #0
 801236c:	4618      	mov	r0, r3
 801236e:	f002 f9cf 	bl	8014710 <RCCEx_PLL3_Config>
 8012372:	4603      	mov	r3, r0
 8012374:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012378:	e008      	b.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801237a:	2301      	movs	r3, #1
 801237c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012380:	e004      	b.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8012382:	bf00      	nop
 8012384:	e002      	b.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8012386:	bf00      	nop
 8012388:	e000      	b.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801238a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801238c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012390:	2b00      	cmp	r3, #0
 8012392:	d10d      	bne.n	80123b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8012394:	4b05      	ldr	r3, [pc, #20]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012398:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801239c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80123a4:	4a01      	ldr	r2, [pc, #4]	@ (80123ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80123a6:	430b      	orrs	r3, r1
 80123a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80123aa:	e005      	b.n	80123b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80123ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80123b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80123b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80123b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80123c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80123c8:	2300      	movs	r3, #0
 80123ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80123ce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80123d2:	460b      	mov	r3, r1
 80123d4:	4313      	orrs	r3, r2
 80123d6:	d03a      	beq.n	801244e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80123d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123de:	2b30      	cmp	r3, #48	@ 0x30
 80123e0:	d01f      	beq.n	8012422 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80123e2:	2b30      	cmp	r3, #48	@ 0x30
 80123e4:	d819      	bhi.n	801241a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80123e6:	2b20      	cmp	r3, #32
 80123e8:	d00c      	beq.n	8012404 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80123ea:	2b20      	cmp	r3, #32
 80123ec:	d815      	bhi.n	801241a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d019      	beq.n	8012426 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80123f2:	2b10      	cmp	r3, #16
 80123f4:	d111      	bne.n	801241a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80123f6:	4baa      	ldr	r3, [pc, #680]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80123f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123fa:	4aa9      	ldr	r2, [pc, #676]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80123fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012400:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012402:	e011      	b.n	8012428 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012408:	3308      	adds	r3, #8
 801240a:	2102      	movs	r1, #2
 801240c:	4618      	mov	r0, r3
 801240e:	f002 f8cd 	bl	80145ac <RCCEx_PLL2_Config>
 8012412:	4603      	mov	r3, r0
 8012414:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012418:	e006      	b.n	8012428 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801241a:	2301      	movs	r3, #1
 801241c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012420:	e002      	b.n	8012428 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012422:	bf00      	nop
 8012424:	e000      	b.n	8012428 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801242c:	2b00      	cmp	r3, #0
 801242e:	d10a      	bne.n	8012446 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8012430:	4b9b      	ldr	r3, [pc, #620]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012434:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8012438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801243c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801243e:	4a98      	ldr	r2, [pc, #608]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012440:	430b      	orrs	r3, r1
 8012442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012444:	e003      	b.n	801244e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801244a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801244e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012456:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801245a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801245e:	2300      	movs	r3, #0
 8012460:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8012464:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8012468:	460b      	mov	r3, r1
 801246a:	4313      	orrs	r3, r2
 801246c:	d051      	beq.n	8012512 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801246e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012478:	d035      	beq.n	80124e6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801247a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801247e:	d82e      	bhi.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012480:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012484:	d031      	beq.n	80124ea <HAL_RCCEx_PeriphCLKConfig+0x442>
 8012486:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801248a:	d828      	bhi.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x436>
 801248c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012490:	d01a      	beq.n	80124c8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8012492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012496:	d822      	bhi.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012498:	2b00      	cmp	r3, #0
 801249a:	d003      	beq.n	80124a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801249c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80124a0:	d007      	beq.n	80124b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80124a2:	e01c      	b.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80124a4:	4b7e      	ldr	r3, [pc, #504]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80124a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124a8:	4a7d      	ldr	r2, [pc, #500]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80124aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80124ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124b0:	e01c      	b.n	80124ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80124b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124b6:	3308      	adds	r3, #8
 80124b8:	2100      	movs	r1, #0
 80124ba:	4618      	mov	r0, r3
 80124bc:	f002 f876 	bl	80145ac <RCCEx_PLL2_Config>
 80124c0:	4603      	mov	r3, r0
 80124c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124c6:	e011      	b.n	80124ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80124c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124cc:	3328      	adds	r3, #40	@ 0x28
 80124ce:	2100      	movs	r1, #0
 80124d0:	4618      	mov	r0, r3
 80124d2:	f002 f91d 	bl	8014710 <RCCEx_PLL3_Config>
 80124d6:	4603      	mov	r3, r0
 80124d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80124dc:	e006      	b.n	80124ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80124de:	2301      	movs	r3, #1
 80124e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80124e4:	e002      	b.n	80124ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80124e6:	bf00      	nop
 80124e8:	e000      	b.n	80124ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80124ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80124ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d10a      	bne.n	801250a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80124f4:	4b6a      	ldr	r3, [pc, #424]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80124f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80124f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80124fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012502:	4a67      	ldr	r2, [pc, #412]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012504:	430b      	orrs	r3, r1
 8012506:	6513      	str	r3, [r2, #80]	@ 0x50
 8012508:	e003      	b.n	8012512 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801250a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801250e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801251e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012522:	2300      	movs	r3, #0
 8012524:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012528:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801252c:	460b      	mov	r3, r1
 801252e:	4313      	orrs	r3, r2
 8012530:	d053      	beq.n	80125da <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8012532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801253c:	d033      	beq.n	80125a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801253e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012542:	d82c      	bhi.n	801259e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012544:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012548:	d02f      	beq.n	80125aa <HAL_RCCEx_PeriphCLKConfig+0x502>
 801254a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801254e:	d826      	bhi.n	801259e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012550:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012554:	d02b      	beq.n	80125ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 8012556:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801255a:	d820      	bhi.n	801259e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801255c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012560:	d012      	beq.n	8012588 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8012562:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012566:	d81a      	bhi.n	801259e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012568:	2b00      	cmp	r3, #0
 801256a:	d022      	beq.n	80125b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801256c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012570:	d115      	bne.n	801259e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012576:	3308      	adds	r3, #8
 8012578:	2101      	movs	r1, #1
 801257a:	4618      	mov	r0, r3
 801257c:	f002 f816 	bl	80145ac <RCCEx_PLL2_Config>
 8012580:	4603      	mov	r3, r0
 8012582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012586:	e015      	b.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801258c:	3328      	adds	r3, #40	@ 0x28
 801258e:	2101      	movs	r1, #1
 8012590:	4618      	mov	r0, r3
 8012592:	f002 f8bd 	bl	8014710 <RCCEx_PLL3_Config>
 8012596:	4603      	mov	r3, r0
 8012598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801259c:	e00a      	b.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801259e:	2301      	movs	r3, #1
 80125a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80125a4:	e006      	b.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125a6:	bf00      	nop
 80125a8:	e004      	b.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125aa:	bf00      	nop
 80125ac:	e002      	b.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125ae:	bf00      	nop
 80125b0:	e000      	b.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80125b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80125b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d10a      	bne.n	80125d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80125bc:	4b38      	ldr	r3, [pc, #224]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80125be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80125c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80125c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125ca:	4a35      	ldr	r2, [pc, #212]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80125cc:	430b      	orrs	r3, r1
 80125ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80125d0:	e003      	b.n	80125da <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80125da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80125e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80125ea:	2300      	movs	r3, #0
 80125ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80125f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80125f4:	460b      	mov	r3, r1
 80125f6:	4313      	orrs	r3, r2
 80125f8:	d058      	beq.n	80126ac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80125fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012602:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012606:	d033      	beq.n	8012670 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012608:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801260c:	d82c      	bhi.n	8012668 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801260e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012612:	d02f      	beq.n	8012674 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8012614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012618:	d826      	bhi.n	8012668 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801261a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801261e:	d02b      	beq.n	8012678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8012620:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012624:	d820      	bhi.n	8012668 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012626:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801262a:	d012      	beq.n	8012652 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801262c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012630:	d81a      	bhi.n	8012668 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012632:	2b00      	cmp	r3, #0
 8012634:	d022      	beq.n	801267c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8012636:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801263a:	d115      	bne.n	8012668 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801263c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012640:	3308      	adds	r3, #8
 8012642:	2101      	movs	r1, #1
 8012644:	4618      	mov	r0, r3
 8012646:	f001 ffb1 	bl	80145ac <RCCEx_PLL2_Config>
 801264a:	4603      	mov	r3, r0
 801264c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012650:	e015      	b.n	801267e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012656:	3328      	adds	r3, #40	@ 0x28
 8012658:	2101      	movs	r1, #1
 801265a:	4618      	mov	r0, r3
 801265c:	f002 f858 	bl	8014710 <RCCEx_PLL3_Config>
 8012660:	4603      	mov	r3, r0
 8012662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012666:	e00a      	b.n	801267e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8012668:	2301      	movs	r3, #1
 801266a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801266e:	e006      	b.n	801267e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012670:	bf00      	nop
 8012672:	e004      	b.n	801267e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012674:	bf00      	nop
 8012676:	e002      	b.n	801267e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012678:	bf00      	nop
 801267a:	e000      	b.n	801267e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801267c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801267e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012682:	2b00      	cmp	r3, #0
 8012684:	d10e      	bne.n	80126a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012686:	4b06      	ldr	r3, [pc, #24]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801268a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801268e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012692:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012696:	4a02      	ldr	r2, [pc, #8]	@ (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012698:	430b      	orrs	r3, r1
 801269a:	6593      	str	r3, [r2, #88]	@ 0x58
 801269c:	e006      	b.n	80126ac <HAL_RCCEx_PeriphCLKConfig+0x604>
 801269e:	bf00      	nop
 80126a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80126ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80126b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80126bc:	2300      	movs	r3, #0
 80126be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80126c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80126c6:	460b      	mov	r3, r1
 80126c8:	4313      	orrs	r3, r2
 80126ca:	d037      	beq.n	801273c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80126cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126d6:	d00e      	beq.n	80126f6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80126d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80126dc:	d816      	bhi.n	801270c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d018      	beq.n	8012714 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80126e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80126e6:	d111      	bne.n	801270c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126e8:	4bc4      	ldr	r3, [pc, #784]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126ec:	4ac3      	ldr	r2, [pc, #780]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80126f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80126f4:	e00f      	b.n	8012716 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80126f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126fa:	3308      	adds	r3, #8
 80126fc:	2101      	movs	r1, #1
 80126fe:	4618      	mov	r0, r3
 8012700:	f001 ff54 	bl	80145ac <RCCEx_PLL2_Config>
 8012704:	4603      	mov	r3, r0
 8012706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801270a:	e004      	b.n	8012716 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801270c:	2301      	movs	r3, #1
 801270e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012712:	e000      	b.n	8012716 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8012714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012716:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801271a:	2b00      	cmp	r3, #0
 801271c:	d10a      	bne.n	8012734 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801271e:	4bb7      	ldr	r3, [pc, #732]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012722:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801272a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801272c:	4ab3      	ldr	r2, [pc, #716]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801272e:	430b      	orrs	r3, r1
 8012730:	6513      	str	r3, [r2, #80]	@ 0x50
 8012732:	e003      	b.n	801273c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012738:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801273c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012744:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012748:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801274c:	2300      	movs	r3, #0
 801274e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012752:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8012756:	460b      	mov	r3, r1
 8012758:	4313      	orrs	r3, r2
 801275a:	d039      	beq.n	80127d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801275c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012762:	2b03      	cmp	r3, #3
 8012764:	d81c      	bhi.n	80127a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8012766:	a201      	add	r2, pc, #4	@ (adr r2, 801276c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8012768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801276c:	080127a9 	.word	0x080127a9
 8012770:	0801277d 	.word	0x0801277d
 8012774:	0801278b 	.word	0x0801278b
 8012778:	080127a9 	.word	0x080127a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801277c:	4b9f      	ldr	r3, [pc, #636]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012780:	4a9e      	ldr	r2, [pc, #632]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012788:	e00f      	b.n	80127aa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801278a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801278e:	3308      	adds	r3, #8
 8012790:	2102      	movs	r1, #2
 8012792:	4618      	mov	r0, r3
 8012794:	f001 ff0a 	bl	80145ac <RCCEx_PLL2_Config>
 8012798:	4603      	mov	r3, r0
 801279a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801279e:	e004      	b.n	80127aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80127a0:	2301      	movs	r3, #1
 80127a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80127a6:	e000      	b.n	80127aa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80127a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80127aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d10a      	bne.n	80127c8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80127b2:	4b92      	ldr	r3, [pc, #584]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80127b6:	f023 0103 	bic.w	r1, r3, #3
 80127ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80127c0:	4a8e      	ldr	r2, [pc, #568]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127c2:	430b      	orrs	r3, r1
 80127c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80127c6:	e003      	b.n	80127d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80127d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80127dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80127e0:	2300      	movs	r3, #0
 80127e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80127e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80127ea:	460b      	mov	r3, r1
 80127ec:	4313      	orrs	r3, r2
 80127ee:	f000 8099 	beq.w	8012924 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80127f2:	4b83      	ldr	r3, [pc, #524]	@ (8012a00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	4a82      	ldr	r2, [pc, #520]	@ (8012a00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80127f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80127fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80127fe:	f7f6 feb9 	bl	8009574 <HAL_GetTick>
 8012802:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012806:	e00b      	b.n	8012820 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012808:	f7f6 feb4 	bl	8009574 <HAL_GetTick>
 801280c:	4602      	mov	r2, r0
 801280e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	2b64      	cmp	r3, #100	@ 0x64
 8012816:	d903      	bls.n	8012820 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8012818:	2303      	movs	r3, #3
 801281a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801281e:	e005      	b.n	801282c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012820:	4b77      	ldr	r3, [pc, #476]	@ (8012a00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012828:	2b00      	cmp	r3, #0
 801282a:	d0ed      	beq.n	8012808 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801282c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012830:	2b00      	cmp	r3, #0
 8012832:	d173      	bne.n	801291c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012834:	4b71      	ldr	r3, [pc, #452]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012836:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801283c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012840:	4053      	eors	r3, r2
 8012842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012846:	2b00      	cmp	r3, #0
 8012848:	d015      	beq.n	8012876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801284a:	4b6c      	ldr	r3, [pc, #432]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801284e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012852:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012856:	4b69      	ldr	r3, [pc, #420]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801285a:	4a68      	ldr	r2, [pc, #416]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801285c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012860:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012862:	4b66      	ldr	r3, [pc, #408]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012866:	4a65      	ldr	r2, [pc, #404]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801286c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801286e:	4a63      	ldr	r2, [pc, #396]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012874:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801287a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801287e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012882:	d118      	bne.n	80128b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012884:	f7f6 fe76 	bl	8009574 <HAL_GetTick>
 8012888:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801288c:	e00d      	b.n	80128aa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801288e:	f7f6 fe71 	bl	8009574 <HAL_GetTick>
 8012892:	4602      	mov	r2, r0
 8012894:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012898:	1ad2      	subs	r2, r2, r3
 801289a:	f241 3388 	movw	r3, #5000	@ 0x1388
 801289e:	429a      	cmp	r2, r3
 80128a0:	d903      	bls.n	80128aa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80128a2:	2303      	movs	r3, #3
 80128a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80128a8:	e005      	b.n	80128b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80128aa:	4b54      	ldr	r3, [pc, #336]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80128ae:	f003 0302 	and.w	r3, r3, #2
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d0eb      	beq.n	801288e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80128b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d129      	bne.n	8012912 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80128be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80128c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80128ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80128ce:	d10e      	bne.n	80128ee <HAL_RCCEx_PeriphCLKConfig+0x846>
 80128d0:	4b4a      	ldr	r3, [pc, #296]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128d2:	691b      	ldr	r3, [r3, #16]
 80128d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80128d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80128e0:	091a      	lsrs	r2, r3, #4
 80128e2:	4b48      	ldr	r3, [pc, #288]	@ (8012a04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80128e4:	4013      	ands	r3, r2
 80128e6:	4a45      	ldr	r2, [pc, #276]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128e8:	430b      	orrs	r3, r1
 80128ea:	6113      	str	r3, [r2, #16]
 80128ec:	e005      	b.n	80128fa <HAL_RCCEx_PeriphCLKConfig+0x852>
 80128ee:	4b43      	ldr	r3, [pc, #268]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128f0:	691b      	ldr	r3, [r3, #16]
 80128f2:	4a42      	ldr	r2, [pc, #264]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80128f8:	6113      	str	r3, [r2, #16]
 80128fa:	4b40      	ldr	r3, [pc, #256]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80128fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80128fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801290a:	4a3c      	ldr	r2, [pc, #240]	@ (80129fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801290c:	430b      	orrs	r3, r1
 801290e:	6713      	str	r3, [r2, #112]	@ 0x70
 8012910:	e008      	b.n	8012924 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012912:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012916:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801291a:	e003      	b.n	8012924 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801291c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012920:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801292c:	f002 0301 	and.w	r3, r2, #1
 8012930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012934:	2300      	movs	r3, #0
 8012936:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801293a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801293e:	460b      	mov	r3, r1
 8012940:	4313      	orrs	r3, r2
 8012942:	f000 808f 	beq.w	8012a64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801294a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801294c:	2b28      	cmp	r3, #40	@ 0x28
 801294e:	d871      	bhi.n	8012a34 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8012950:	a201      	add	r2, pc, #4	@ (adr r2, 8012958 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8012952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012956:	bf00      	nop
 8012958:	08012a3d 	.word	0x08012a3d
 801295c:	08012a35 	.word	0x08012a35
 8012960:	08012a35 	.word	0x08012a35
 8012964:	08012a35 	.word	0x08012a35
 8012968:	08012a35 	.word	0x08012a35
 801296c:	08012a35 	.word	0x08012a35
 8012970:	08012a35 	.word	0x08012a35
 8012974:	08012a35 	.word	0x08012a35
 8012978:	08012a09 	.word	0x08012a09
 801297c:	08012a35 	.word	0x08012a35
 8012980:	08012a35 	.word	0x08012a35
 8012984:	08012a35 	.word	0x08012a35
 8012988:	08012a35 	.word	0x08012a35
 801298c:	08012a35 	.word	0x08012a35
 8012990:	08012a35 	.word	0x08012a35
 8012994:	08012a35 	.word	0x08012a35
 8012998:	08012a1f 	.word	0x08012a1f
 801299c:	08012a35 	.word	0x08012a35
 80129a0:	08012a35 	.word	0x08012a35
 80129a4:	08012a35 	.word	0x08012a35
 80129a8:	08012a35 	.word	0x08012a35
 80129ac:	08012a35 	.word	0x08012a35
 80129b0:	08012a35 	.word	0x08012a35
 80129b4:	08012a35 	.word	0x08012a35
 80129b8:	08012a3d 	.word	0x08012a3d
 80129bc:	08012a35 	.word	0x08012a35
 80129c0:	08012a35 	.word	0x08012a35
 80129c4:	08012a35 	.word	0x08012a35
 80129c8:	08012a35 	.word	0x08012a35
 80129cc:	08012a35 	.word	0x08012a35
 80129d0:	08012a35 	.word	0x08012a35
 80129d4:	08012a35 	.word	0x08012a35
 80129d8:	08012a3d 	.word	0x08012a3d
 80129dc:	08012a35 	.word	0x08012a35
 80129e0:	08012a35 	.word	0x08012a35
 80129e4:	08012a35 	.word	0x08012a35
 80129e8:	08012a35 	.word	0x08012a35
 80129ec:	08012a35 	.word	0x08012a35
 80129f0:	08012a35 	.word	0x08012a35
 80129f4:	08012a35 	.word	0x08012a35
 80129f8:	08012a3d 	.word	0x08012a3d
 80129fc:	58024400 	.word	0x58024400
 8012a00:	58024800 	.word	0x58024800
 8012a04:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a0c:	3308      	adds	r3, #8
 8012a0e:	2101      	movs	r1, #1
 8012a10:	4618      	mov	r0, r3
 8012a12:	f001 fdcb 	bl	80145ac <RCCEx_PLL2_Config>
 8012a16:	4603      	mov	r3, r0
 8012a18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012a1c:	e00f      	b.n	8012a3e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a22:	3328      	adds	r3, #40	@ 0x28
 8012a24:	2101      	movs	r1, #1
 8012a26:	4618      	mov	r0, r3
 8012a28:	f001 fe72 	bl	8014710 <RCCEx_PLL3_Config>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012a32:	e004      	b.n	8012a3e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a34:	2301      	movs	r3, #1
 8012a36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012a3a:	e000      	b.n	8012a3e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8012a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d10a      	bne.n	8012a5c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012a46:	4bbf      	ldr	r3, [pc, #764]	@ (8012d44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8012a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a54:	4abb      	ldr	r2, [pc, #748]	@ (8012d44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a56:	430b      	orrs	r3, r1
 8012a58:	6553      	str	r3, [r2, #84]	@ 0x54
 8012a5a:	e003      	b.n	8012a64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6c:	f002 0302 	and.w	r3, r2, #2
 8012a70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012a74:	2300      	movs	r3, #0
 8012a76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012a7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8012a7e:	460b      	mov	r3, r1
 8012a80:	4313      	orrs	r3, r2
 8012a82:	d041      	beq.n	8012b08 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a8a:	2b05      	cmp	r3, #5
 8012a8c:	d824      	bhi.n	8012ad8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8012a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8012a94 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8012a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a94:	08012ae1 	.word	0x08012ae1
 8012a98:	08012aad 	.word	0x08012aad
 8012a9c:	08012ac3 	.word	0x08012ac3
 8012aa0:	08012ae1 	.word	0x08012ae1
 8012aa4:	08012ae1 	.word	0x08012ae1
 8012aa8:	08012ae1 	.word	0x08012ae1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ab0:	3308      	adds	r3, #8
 8012ab2:	2101      	movs	r1, #1
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f001 fd79 	bl	80145ac <RCCEx_PLL2_Config>
 8012aba:	4603      	mov	r3, r0
 8012abc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012ac0:	e00f      	b.n	8012ae2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ac6:	3328      	adds	r3, #40	@ 0x28
 8012ac8:	2101      	movs	r1, #1
 8012aca:	4618      	mov	r0, r3
 8012acc:	f001 fe20 	bl	8014710 <RCCEx_PLL3_Config>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012ad6:	e004      	b.n	8012ae2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ad8:	2301      	movs	r3, #1
 8012ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012ade:	e000      	b.n	8012ae2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8012ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d10a      	bne.n	8012b00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012aea:	4b96      	ldr	r3, [pc, #600]	@ (8012d44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012aee:	f023 0107 	bic.w	r1, r3, #7
 8012af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012af8:	4a92      	ldr	r2, [pc, #584]	@ (8012d44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012afa:	430b      	orrs	r3, r1
 8012afc:	6553      	str	r3, [r2, #84]	@ 0x54
 8012afe:	e003      	b.n	8012b08 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b10:	f002 0304 	and.w	r3, r2, #4
 8012b14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012b18:	2300      	movs	r3, #0
 8012b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012b1e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012b22:	460b      	mov	r3, r1
 8012b24:	4313      	orrs	r3, r2
 8012b26:	d044      	beq.n	8012bb2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012b30:	2b05      	cmp	r3, #5
 8012b32:	d825      	bhi.n	8012b80 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012b34:	a201      	add	r2, pc, #4	@ (adr r2, 8012b3c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8012b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b3a:	bf00      	nop
 8012b3c:	08012b89 	.word	0x08012b89
 8012b40:	08012b55 	.word	0x08012b55
 8012b44:	08012b6b 	.word	0x08012b6b
 8012b48:	08012b89 	.word	0x08012b89
 8012b4c:	08012b89 	.word	0x08012b89
 8012b50:	08012b89 	.word	0x08012b89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b58:	3308      	adds	r3, #8
 8012b5a:	2101      	movs	r1, #1
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f001 fd25 	bl	80145ac <RCCEx_PLL2_Config>
 8012b62:	4603      	mov	r3, r0
 8012b64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012b68:	e00f      	b.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b6e:	3328      	adds	r3, #40	@ 0x28
 8012b70:	2101      	movs	r1, #1
 8012b72:	4618      	mov	r0, r3
 8012b74:	f001 fdcc 	bl	8014710 <RCCEx_PLL3_Config>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012b7e:	e004      	b.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012b80:	2301      	movs	r3, #1
 8012b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012b86:	e000      	b.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d10b      	bne.n	8012baa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012b92:	4b6c      	ldr	r3, [pc, #432]	@ (8012d44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b96:	f023 0107 	bic.w	r1, r3, #7
 8012b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ba2:	4a68      	ldr	r2, [pc, #416]	@ (8012d44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012ba4:	430b      	orrs	r3, r1
 8012ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8012ba8:	e003      	b.n	8012bb2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012baa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012bae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bba:	f002 0320 	and.w	r3, r2, #32
 8012bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012bc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012bcc:	460b      	mov	r3, r1
 8012bce:	4313      	orrs	r3, r2
 8012bd0:	d055      	beq.n	8012c7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8012bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012bde:	d033      	beq.n	8012c48 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8012be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012be4:	d82c      	bhi.n	8012c40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012bea:	d02f      	beq.n	8012c4c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8012bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012bf0:	d826      	bhi.n	8012c40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012bf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012bf6:	d02b      	beq.n	8012c50 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012bf8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012bfc:	d820      	bhi.n	8012c40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012c02:	d012      	beq.n	8012c2a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8012c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012c08:	d81a      	bhi.n	8012c40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d022      	beq.n	8012c54 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8012c0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012c12:	d115      	bne.n	8012c40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c18:	3308      	adds	r3, #8
 8012c1a:	2100      	movs	r1, #0
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f001 fcc5 	bl	80145ac <RCCEx_PLL2_Config>
 8012c22:	4603      	mov	r3, r0
 8012c24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012c28:	e015      	b.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c2e:	3328      	adds	r3, #40	@ 0x28
 8012c30:	2102      	movs	r1, #2
 8012c32:	4618      	mov	r0, r3
 8012c34:	f001 fd6c 	bl	8014710 <RCCEx_PLL3_Config>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012c3e:	e00a      	b.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c40:	2301      	movs	r3, #1
 8012c42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c46:	e006      	b.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c48:	bf00      	nop
 8012c4a:	e004      	b.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c4c:	bf00      	nop
 8012c4e:	e002      	b.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c50:	bf00      	nop
 8012c52:	e000      	b.n	8012c56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d10b      	bne.n	8012c76 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012c5e:	4b39      	ldr	r3, [pc, #228]	@ (8012d44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012c6e:	4a35      	ldr	r2, [pc, #212]	@ (8012d44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c70:	430b      	orrs	r3, r1
 8012c72:	6553      	str	r3, [r2, #84]	@ 0x54
 8012c74:	e003      	b.n	8012c7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012c8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012c8e:	2300      	movs	r3, #0
 8012c90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012c94:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012c98:	460b      	mov	r3, r1
 8012c9a:	4313      	orrs	r3, r2
 8012c9c:	d058      	beq.n	8012d50 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8012c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012ca6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012caa:	d033      	beq.n	8012d14 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012cac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012cb0:	d82c      	bhi.n	8012d0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012cb6:	d02f      	beq.n	8012d18 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012cbc:	d826      	bhi.n	8012d0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012cc2:	d02b      	beq.n	8012d1c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012cc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012cc8:	d820      	bhi.n	8012d0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012cce:	d012      	beq.n	8012cf6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012cd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012cd4:	d81a      	bhi.n	8012d0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d022      	beq.n	8012d20 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012cde:	d115      	bne.n	8012d0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ce4:	3308      	adds	r3, #8
 8012ce6:	2100      	movs	r1, #0
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f001 fc5f 	bl	80145ac <RCCEx_PLL2_Config>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012cf4:	e015      	b.n	8012d22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cfa:	3328      	adds	r3, #40	@ 0x28
 8012cfc:	2102      	movs	r1, #2
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f001 fd06 	bl	8014710 <RCCEx_PLL3_Config>
 8012d04:	4603      	mov	r3, r0
 8012d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012d0a:	e00a      	b.n	8012d22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012d12:	e006      	b.n	8012d22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d14:	bf00      	nop
 8012d16:	e004      	b.n	8012d22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d18:	bf00      	nop
 8012d1a:	e002      	b.n	8012d22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d1c:	bf00      	nop
 8012d1e:	e000      	b.n	8012d22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012d22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d10e      	bne.n	8012d48 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012d2a:	4b06      	ldr	r3, [pc, #24]	@ (8012d44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012d3a:	4a02      	ldr	r2, [pc, #8]	@ (8012d44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012d3c:	430b      	orrs	r3, r1
 8012d3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8012d40:	e006      	b.n	8012d50 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012d42:	bf00      	nop
 8012d44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012d5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012d60:	2300      	movs	r3, #0
 8012d62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012d66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012d6a:	460b      	mov	r3, r1
 8012d6c:	4313      	orrs	r3, r2
 8012d6e:	d055      	beq.n	8012e1c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012d78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012d7c:	d033      	beq.n	8012de6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012d7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012d82:	d82c      	bhi.n	8012dde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d88:	d02f      	beq.n	8012dea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012d8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012d8e:	d826      	bhi.n	8012dde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012d94:	d02b      	beq.n	8012dee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012d96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012d9a:	d820      	bhi.n	8012dde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012d9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012da0:	d012      	beq.n	8012dc8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012da2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012da6:	d81a      	bhi.n	8012dde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d022      	beq.n	8012df2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012db0:	d115      	bne.n	8012dde <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012db6:	3308      	adds	r3, #8
 8012db8:	2100      	movs	r1, #0
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f001 fbf6 	bl	80145ac <RCCEx_PLL2_Config>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012dc6:	e015      	b.n	8012df4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dcc:	3328      	adds	r3, #40	@ 0x28
 8012dce:	2102      	movs	r1, #2
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f001 fc9d 	bl	8014710 <RCCEx_PLL3_Config>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012ddc:	e00a      	b.n	8012df4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012dde:	2301      	movs	r3, #1
 8012de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012de4:	e006      	b.n	8012df4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012de6:	bf00      	nop
 8012de8:	e004      	b.n	8012df4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012dea:	bf00      	nop
 8012dec:	e002      	b.n	8012df4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012dee:	bf00      	nop
 8012df0:	e000      	b.n	8012df4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d10b      	bne.n	8012e14 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012dfc:	4ba0      	ldr	r3, [pc, #640]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e00:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012e0c:	4a9c      	ldr	r2, [pc, #624]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e0e:	430b      	orrs	r3, r1
 8012e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8012e12:	e003      	b.n	8012e1c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8012e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e24:	f002 0308 	and.w	r3, r2, #8
 8012e28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012e32:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012e36:	460b      	mov	r3, r1
 8012e38:	4313      	orrs	r3, r2
 8012e3a:	d01e      	beq.n	8012e7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012e48:	d10c      	bne.n	8012e64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e4e:	3328      	adds	r3, #40	@ 0x28
 8012e50:	2102      	movs	r1, #2
 8012e52:	4618      	mov	r0, r3
 8012e54:	f001 fc5c 	bl	8014710 <RCCEx_PLL3_Config>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d002      	beq.n	8012e64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8012e5e:	2301      	movs	r3, #1
 8012e60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012e64:	4b86      	ldr	r3, [pc, #536]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e68:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012e74:	4a82      	ldr	r2, [pc, #520]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e76:	430b      	orrs	r3, r1
 8012e78:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e82:	f002 0310 	and.w	r3, r2, #16
 8012e86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012e90:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012e94:	460b      	mov	r3, r1
 8012e96:	4313      	orrs	r3, r2
 8012e98:	d01e      	beq.n	8012ed8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ea6:	d10c      	bne.n	8012ec2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eac:	3328      	adds	r3, #40	@ 0x28
 8012eae:	2102      	movs	r1, #2
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f001 fc2d 	bl	8014710 <RCCEx_PLL3_Config>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d002      	beq.n	8012ec2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012ec2:	4b6f      	ldr	r3, [pc, #444]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ec6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012ed2:	4a6b      	ldr	r2, [pc, #428]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ed4:	430b      	orrs	r3, r1
 8012ed6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012ee4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012eea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012eee:	460b      	mov	r3, r1
 8012ef0:	4313      	orrs	r3, r2
 8012ef2:	d03e      	beq.n	8012f72 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ef8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012efc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f00:	d022      	beq.n	8012f48 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012f02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f06:	d81b      	bhi.n	8012f40 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d003      	beq.n	8012f14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f10:	d00b      	beq.n	8012f2a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012f12:	e015      	b.n	8012f40 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f18:	3308      	adds	r3, #8
 8012f1a:	2100      	movs	r1, #0
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f001 fb45 	bl	80145ac <RCCEx_PLL2_Config>
 8012f22:	4603      	mov	r3, r0
 8012f24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012f28:	e00f      	b.n	8012f4a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f2e:	3328      	adds	r3, #40	@ 0x28
 8012f30:	2102      	movs	r1, #2
 8012f32:	4618      	mov	r0, r3
 8012f34:	f001 fbec 	bl	8014710 <RCCEx_PLL3_Config>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012f3e:	e004      	b.n	8012f4a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f40:	2301      	movs	r3, #1
 8012f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012f46:	e000      	b.n	8012f4a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d10b      	bne.n	8012f6a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012f52:	4b4b      	ldr	r3, [pc, #300]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f62:	4a47      	ldr	r2, [pc, #284]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f64:	430b      	orrs	r3, r1
 8012f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8012f68:	e003      	b.n	8012f72 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012f7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8012f80:	2300      	movs	r3, #0
 8012f82:	677b      	str	r3, [r7, #116]	@ 0x74
 8012f84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012f88:	460b      	mov	r3, r1
 8012f8a:	4313      	orrs	r3, r2
 8012f8c:	d03b      	beq.n	8013006 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012f9a:	d01f      	beq.n	8012fdc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012f9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012fa0:	d818      	bhi.n	8012fd4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012fa6:	d003      	beq.n	8012fb0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012fa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012fac:	d007      	beq.n	8012fbe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012fae:	e011      	b.n	8012fd4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012fb0:	4b33      	ldr	r3, [pc, #204]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fb4:	4a32      	ldr	r2, [pc, #200]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012fbc:	e00f      	b.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fc2:	3328      	adds	r3, #40	@ 0x28
 8012fc4:	2101      	movs	r1, #1
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f001 fba2 	bl	8014710 <RCCEx_PLL3_Config>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012fd2:	e004      	b.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012fda:	e000      	b.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012fde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d10b      	bne.n	8012ffe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012fe6:	4b26      	ldr	r3, [pc, #152]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ff6:	4a22      	ldr	r2, [pc, #136]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ff8:	430b      	orrs	r3, r1
 8012ffa:	6553      	str	r3, [r2, #84]	@ 0x54
 8012ffc:	e003      	b.n	8013006 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ffe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013002:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8013012:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013014:	2300      	movs	r3, #0
 8013016:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013018:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801301c:	460b      	mov	r3, r1
 801301e:	4313      	orrs	r3, r2
 8013020:	d034      	beq.n	801308c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8013022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013028:	2b00      	cmp	r3, #0
 801302a:	d003      	beq.n	8013034 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801302c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013030:	d007      	beq.n	8013042 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8013032:	e011      	b.n	8013058 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013034:	4b12      	ldr	r3, [pc, #72]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013038:	4a11      	ldr	r2, [pc, #68]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801303a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801303e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013040:	e00e      	b.n	8013060 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013046:	3308      	adds	r3, #8
 8013048:	2102      	movs	r1, #2
 801304a:	4618      	mov	r0, r3
 801304c:	f001 faae 	bl	80145ac <RCCEx_PLL2_Config>
 8013050:	4603      	mov	r3, r0
 8013052:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8013056:	e003      	b.n	8013060 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8013058:	2301      	movs	r3, #1
 801305a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801305e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013064:	2b00      	cmp	r3, #0
 8013066:	d10d      	bne.n	8013084 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8013068:	4b05      	ldr	r3, [pc, #20]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801306a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801306c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8013070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013076:	4a02      	ldr	r2, [pc, #8]	@ (8013080 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8013078:	430b      	orrs	r3, r1
 801307a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801307c:	e006      	b.n	801308c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801307e:	bf00      	nop
 8013080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801308c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013094:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8013098:	663b      	str	r3, [r7, #96]	@ 0x60
 801309a:	2300      	movs	r3, #0
 801309c:	667b      	str	r3, [r7, #100]	@ 0x64
 801309e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80130a2:	460b      	mov	r3, r1
 80130a4:	4313      	orrs	r3, r2
 80130a6:	d00c      	beq.n	80130c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80130a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130ac:	3328      	adds	r3, #40	@ 0x28
 80130ae:	2102      	movs	r1, #2
 80130b0:	4618      	mov	r0, r3
 80130b2:	f001 fb2d 	bl	8014710 <RCCEx_PLL3_Config>
 80130b6:	4603      	mov	r3, r0
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d002      	beq.n	80130c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80130bc:	2301      	movs	r3, #1
 80130be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80130c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80130ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80130d0:	2300      	movs	r3, #0
 80130d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80130d4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80130d8:	460b      	mov	r3, r1
 80130da:	4313      	orrs	r3, r2
 80130dc:	d036      	beq.n	801314c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80130de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80130e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80130e8:	d018      	beq.n	801311c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80130ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80130ee:	d811      	bhi.n	8013114 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80130f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130f4:	d014      	beq.n	8013120 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80130f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130fa:	d80b      	bhi.n	8013114 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d011      	beq.n	8013124 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8013100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013104:	d106      	bne.n	8013114 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013106:	4bb7      	ldr	r3, [pc, #732]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801310a:	4ab6      	ldr	r2, [pc, #728]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801310c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013110:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8013112:	e008      	b.n	8013126 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013114:	2301      	movs	r3, #1
 8013116:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801311a:	e004      	b.n	8013126 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801311c:	bf00      	nop
 801311e:	e002      	b.n	8013126 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013120:	bf00      	nop
 8013122:	e000      	b.n	8013126 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013126:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801312a:	2b00      	cmp	r3, #0
 801312c:	d10a      	bne.n	8013144 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801312e:	4bad      	ldr	r3, [pc, #692]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013132:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8013136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801313a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801313c:	4aa9      	ldr	r2, [pc, #676]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801313e:	430b      	orrs	r3, r1
 8013140:	6553      	str	r3, [r2, #84]	@ 0x54
 8013142:	e003      	b.n	801314c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013148:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801314c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013154:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8013158:	653b      	str	r3, [r7, #80]	@ 0x50
 801315a:	2300      	movs	r3, #0
 801315c:	657b      	str	r3, [r7, #84]	@ 0x54
 801315e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8013162:	460b      	mov	r3, r1
 8013164:	4313      	orrs	r3, r2
 8013166:	d009      	beq.n	801317c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013168:	4b9e      	ldr	r3, [pc, #632]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801316a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801316c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013176:	4a9b      	ldr	r2, [pc, #620]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013178:	430b      	orrs	r3, r1
 801317a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801317c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013184:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8013188:	64bb      	str	r3, [r7, #72]	@ 0x48
 801318a:	2300      	movs	r3, #0
 801318c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801318e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8013192:	460b      	mov	r3, r1
 8013194:	4313      	orrs	r3, r2
 8013196:	d009      	beq.n	80131ac <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013198:	4b92      	ldr	r3, [pc, #584]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801319a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801319c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80131a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80131a6:	4a8f      	ldr	r2, [pc, #572]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131a8:	430b      	orrs	r3, r1
 80131aa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80131ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80131b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80131ba:	2300      	movs	r3, #0
 80131bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80131be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80131c2:	460b      	mov	r3, r1
 80131c4:	4313      	orrs	r3, r2
 80131c6:	d00e      	beq.n	80131e6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80131c8:	4b86      	ldr	r3, [pc, #536]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131ca:	691b      	ldr	r3, [r3, #16]
 80131cc:	4a85      	ldr	r2, [pc, #532]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80131d2:	6113      	str	r3, [r2, #16]
 80131d4:	4b83      	ldr	r3, [pc, #524]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131d6:	6919      	ldr	r1, [r3, #16]
 80131d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80131e0:	4a80      	ldr	r2, [pc, #512]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80131e2:	430b      	orrs	r3, r1
 80131e4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80131e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80131f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80131f4:	2300      	movs	r3, #0
 80131f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80131fc:	460b      	mov	r3, r1
 80131fe:	4313      	orrs	r3, r2
 8013200:	d009      	beq.n	8013216 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013202:	4b78      	ldr	r3, [pc, #480]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013206:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801320a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801320e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013210:	4a74      	ldr	r2, [pc, #464]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013212:	430b      	orrs	r3, r1
 8013214:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8013222:	633b      	str	r3, [r7, #48]	@ 0x30
 8013224:	2300      	movs	r3, #0
 8013226:	637b      	str	r3, [r7, #52]	@ 0x34
 8013228:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801322c:	460b      	mov	r3, r1
 801322e:	4313      	orrs	r3, r2
 8013230:	d00a      	beq.n	8013248 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013232:	4b6c      	ldr	r3, [pc, #432]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013236:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801323a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013242:	4a68      	ldr	r2, [pc, #416]	@ (80133e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013244:	430b      	orrs	r3, r1
 8013246:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8013248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013250:	2100      	movs	r1, #0
 8013252:	62b9      	str	r1, [r7, #40]	@ 0x28
 8013254:	f003 0301 	and.w	r3, r3, #1
 8013258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801325a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801325e:	460b      	mov	r3, r1
 8013260:	4313      	orrs	r3, r2
 8013262:	d011      	beq.n	8013288 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013268:	3308      	adds	r3, #8
 801326a:	2100      	movs	r1, #0
 801326c:	4618      	mov	r0, r3
 801326e:	f001 f99d 	bl	80145ac <RCCEx_PLL2_Config>
 8013272:	4603      	mov	r3, r0
 8013274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801327c:	2b00      	cmp	r3, #0
 801327e:	d003      	beq.n	8013288 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013284:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8013288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013290:	2100      	movs	r1, #0
 8013292:	6239      	str	r1, [r7, #32]
 8013294:	f003 0302 	and.w	r3, r3, #2
 8013298:	627b      	str	r3, [r7, #36]	@ 0x24
 801329a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801329e:	460b      	mov	r3, r1
 80132a0:	4313      	orrs	r3, r2
 80132a2:	d011      	beq.n	80132c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80132a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132a8:	3308      	adds	r3, #8
 80132aa:	2101      	movs	r1, #1
 80132ac:	4618      	mov	r0, r3
 80132ae:	f001 f97d 	bl	80145ac <RCCEx_PLL2_Config>
 80132b2:	4603      	mov	r3, r0
 80132b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80132b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d003      	beq.n	80132c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80132c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d0:	2100      	movs	r1, #0
 80132d2:	61b9      	str	r1, [r7, #24]
 80132d4:	f003 0304 	and.w	r3, r3, #4
 80132d8:	61fb      	str	r3, [r7, #28]
 80132da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80132de:	460b      	mov	r3, r1
 80132e0:	4313      	orrs	r3, r2
 80132e2:	d011      	beq.n	8013308 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80132e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132e8:	3308      	adds	r3, #8
 80132ea:	2102      	movs	r1, #2
 80132ec:	4618      	mov	r0, r3
 80132ee:	f001 f95d 	bl	80145ac <RCCEx_PLL2_Config>
 80132f2:	4603      	mov	r3, r0
 80132f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80132f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d003      	beq.n	8013308 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013304:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8013308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013310:	2100      	movs	r1, #0
 8013312:	6139      	str	r1, [r7, #16]
 8013314:	f003 0308 	and.w	r3, r3, #8
 8013318:	617b      	str	r3, [r7, #20]
 801331a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801331e:	460b      	mov	r3, r1
 8013320:	4313      	orrs	r3, r2
 8013322:	d011      	beq.n	8013348 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013328:	3328      	adds	r3, #40	@ 0x28
 801332a:	2100      	movs	r1, #0
 801332c:	4618      	mov	r0, r3
 801332e:	f001 f9ef 	bl	8014710 <RCCEx_PLL3_Config>
 8013332:	4603      	mov	r3, r0
 8013334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8013338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801333c:	2b00      	cmp	r3, #0
 801333e:	d003      	beq.n	8013348 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8013348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013350:	2100      	movs	r1, #0
 8013352:	60b9      	str	r1, [r7, #8]
 8013354:	f003 0310 	and.w	r3, r3, #16
 8013358:	60fb      	str	r3, [r7, #12]
 801335a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801335e:	460b      	mov	r3, r1
 8013360:	4313      	orrs	r3, r2
 8013362:	d011      	beq.n	8013388 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013368:	3328      	adds	r3, #40	@ 0x28
 801336a:	2101      	movs	r1, #1
 801336c:	4618      	mov	r0, r3
 801336e:	f001 f9cf 	bl	8014710 <RCCEx_PLL3_Config>
 8013372:	4603      	mov	r3, r0
 8013374:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801337c:	2b00      	cmp	r3, #0
 801337e:	d003      	beq.n	8013388 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013384:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8013388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013390:	2100      	movs	r1, #0
 8013392:	6039      	str	r1, [r7, #0]
 8013394:	f003 0320 	and.w	r3, r3, #32
 8013398:	607b      	str	r3, [r7, #4]
 801339a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801339e:	460b      	mov	r3, r1
 80133a0:	4313      	orrs	r3, r2
 80133a2:	d011      	beq.n	80133c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80133a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80133a8:	3328      	adds	r3, #40	@ 0x28
 80133aa:	2102      	movs	r1, #2
 80133ac:	4618      	mov	r0, r3
 80133ae:	f001 f9af 	bl	8014710 <RCCEx_PLL3_Config>
 80133b2:	4603      	mov	r3, r0
 80133b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80133b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d003      	beq.n	80133c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80133c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80133c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80133c8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d101      	bne.n	80133d4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80133d0:	2300      	movs	r3, #0
 80133d2:	e000      	b.n	80133d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80133d4:	2301      	movs	r3, #1
}
 80133d6:	4618      	mov	r0, r3
 80133d8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80133dc:	46bd      	mov	sp, r7
 80133de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80133e2:	bf00      	nop
 80133e4:	58024400 	.word	0x58024400

080133e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b090      	sub	sp, #64	@ 0x40
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80133f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133f6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80133fa:	430b      	orrs	r3, r1
 80133fc:	f040 8094 	bne.w	8013528 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8013400:	4b9b      	ldr	r3, [pc, #620]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013404:	f003 0307 	and.w	r3, r3, #7
 8013408:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801340a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801340c:	2b04      	cmp	r3, #4
 801340e:	f200 8087 	bhi.w	8013520 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8013412:	a201      	add	r2, pc, #4	@ (adr r2, 8013418 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8013414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013418:	0801342d 	.word	0x0801342d
 801341c:	08013455 	.word	0x08013455
 8013420:	0801347d 	.word	0x0801347d
 8013424:	08013519 	.word	0x08013519
 8013428:	080134a5 	.word	0x080134a5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801342c:	4b90      	ldr	r3, [pc, #576]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013438:	d108      	bne.n	801344c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801343a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801343e:	4618      	mov	r0, r3
 8013440:	f000 ff62 	bl	8014308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013448:	f000 bc93 	b.w	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801344c:	2300      	movs	r3, #0
 801344e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013450:	f000 bc8f 	b.w	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013454:	4b86      	ldr	r3, [pc, #536]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801345c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013460:	d108      	bne.n	8013474 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013462:	f107 0318 	add.w	r3, r7, #24
 8013466:	4618      	mov	r0, r3
 8013468:	f000 fca6 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801346c:	69bb      	ldr	r3, [r7, #24]
 801346e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013470:	f000 bc7f 	b.w	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013474:	2300      	movs	r3, #0
 8013476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013478:	f000 bc7b 	b.w	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801347c:	4b7c      	ldr	r3, [pc, #496]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013488:	d108      	bne.n	801349c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801348a:	f107 030c 	add.w	r3, r7, #12
 801348e:	4618      	mov	r0, r3
 8013490:	f000 fde6 	bl	8014060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013498:	f000 bc6b 	b.w	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801349c:	2300      	movs	r3, #0
 801349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134a0:	f000 bc67 	b.w	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80134a4:	4b72      	ldr	r3, [pc, #456]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80134a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80134ac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80134ae:	4b70      	ldr	r3, [pc, #448]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	f003 0304 	and.w	r3, r3, #4
 80134b6:	2b04      	cmp	r3, #4
 80134b8:	d10c      	bne.n	80134d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80134ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d109      	bne.n	80134d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80134c0:	4b6b      	ldr	r3, [pc, #428]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	08db      	lsrs	r3, r3, #3
 80134c6:	f003 0303 	and.w	r3, r3, #3
 80134ca:	4a6a      	ldr	r2, [pc, #424]	@ (8013674 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80134cc:	fa22 f303 	lsr.w	r3, r2, r3
 80134d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134d2:	e01f      	b.n	8013514 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80134d4:	4b66      	ldr	r3, [pc, #408]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80134dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80134e0:	d106      	bne.n	80134f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80134e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80134e8:	d102      	bne.n	80134f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80134ea:	4b63      	ldr	r3, [pc, #396]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80134ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134ee:	e011      	b.n	8013514 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80134f0:	4b5f      	ldr	r3, [pc, #380]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80134fc:	d106      	bne.n	801350c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80134fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013504:	d102      	bne.n	801350c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013506:	4b5d      	ldr	r3, [pc, #372]	@ (801367c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801350a:	e003      	b.n	8013514 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801350c:	2300      	movs	r3, #0
 801350e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013510:	f000 bc2f 	b.w	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013514:	f000 bc2d 	b.w	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013518:	4b59      	ldr	r3, [pc, #356]	@ (8013680 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801351a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801351c:	f000 bc29 	b.w	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013520:	2300      	movs	r3, #0
 8013522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013524:	f000 bc25 	b.w	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013528:	e9d7 2300 	ldrd	r2, r3, [r7]
 801352c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8013530:	430b      	orrs	r3, r1
 8013532:	f040 80a7 	bne.w	8013684 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8013536:	4b4e      	ldr	r3, [pc, #312]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801353a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801353e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013542:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013546:	d054      	beq.n	80135f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8013548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801354a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801354e:	f200 808b 	bhi.w	8013668 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013554:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013558:	f000 8083 	beq.w	8013662 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801355e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013562:	f200 8081 	bhi.w	8013668 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013568:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801356c:	d02f      	beq.n	80135ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013574:	d878      	bhi.n	8013668 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013578:	2b00      	cmp	r3, #0
 801357a:	d004      	beq.n	8013586 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801357e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013582:	d012      	beq.n	80135aa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8013584:	e070      	b.n	8013668 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013586:	4b3a      	ldr	r3, [pc, #232]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801358e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013592:	d107      	bne.n	80135a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013598:	4618      	mov	r0, r3
 801359a:	f000 feb5 	bl	8014308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801359e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135a2:	e3e6      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135a4:	2300      	movs	r3, #0
 80135a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135a8:	e3e3      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80135aa:	4b31      	ldr	r3, [pc, #196]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80135b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80135b6:	d107      	bne.n	80135c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80135b8:	f107 0318 	add.w	r3, r7, #24
 80135bc:	4618      	mov	r0, r3
 80135be:	f000 fbfb 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80135c2:	69bb      	ldr	r3, [r7, #24]
 80135c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135c6:	e3d4      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135c8:	2300      	movs	r3, #0
 80135ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135cc:	e3d1      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80135ce:	4b28      	ldr	r3, [pc, #160]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80135d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80135da:	d107      	bne.n	80135ec <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80135dc:	f107 030c 	add.w	r3, r7, #12
 80135e0:	4618      	mov	r0, r3
 80135e2:	f000 fd3d 	bl	8014060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80135ea:	e3c2      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80135ec:	2300      	movs	r3, #0
 80135ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135f0:	e3bf      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80135f2:	4b1f      	ldr	r3, [pc, #124]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80135f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80135fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80135fc:	4b1c      	ldr	r3, [pc, #112]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	f003 0304 	and.w	r3, r3, #4
 8013604:	2b04      	cmp	r3, #4
 8013606:	d10c      	bne.n	8013622 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8013608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801360a:	2b00      	cmp	r3, #0
 801360c:	d109      	bne.n	8013622 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801360e:	4b18      	ldr	r3, [pc, #96]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	08db      	lsrs	r3, r3, #3
 8013614:	f003 0303 	and.w	r3, r3, #3
 8013618:	4a16      	ldr	r2, [pc, #88]	@ (8013674 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801361a:	fa22 f303 	lsr.w	r3, r2, r3
 801361e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013620:	e01e      	b.n	8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013622:	4b13      	ldr	r3, [pc, #76]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801362a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801362e:	d106      	bne.n	801363e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8013630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013636:	d102      	bne.n	801363e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013638:	4b0f      	ldr	r3, [pc, #60]	@ (8013678 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801363a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801363c:	e010      	b.n	8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801363e:	4b0c      	ldr	r3, [pc, #48]	@ (8013670 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801364a:	d106      	bne.n	801365a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801364e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013652:	d102      	bne.n	801365a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013654:	4b09      	ldr	r3, [pc, #36]	@ (801367c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013658:	e002      	b.n	8013660 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801365a:	2300      	movs	r3, #0
 801365c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801365e:	e388      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013660:	e387      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013662:	4b07      	ldr	r3, [pc, #28]	@ (8013680 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013666:	e384      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013668:	2300      	movs	r3, #0
 801366a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801366c:	e381      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801366e:	bf00      	nop
 8013670:	58024400 	.word	0x58024400
 8013674:	03d09000 	.word	0x03d09000
 8013678:	003d0900 	.word	0x003d0900
 801367c:	016e3600 	.word	0x016e3600
 8013680:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8013684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013688:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801368c:	430b      	orrs	r3, r1
 801368e:	f040 809c 	bne.w	80137ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8013692:	4b9e      	ldr	r3, [pc, #632]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013696:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801369a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801369e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80136a2:	d054      	beq.n	801374e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80136a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80136aa:	f200 808b 	bhi.w	80137c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80136ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80136b4:	f000 8083 	beq.w	80137be <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80136b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80136be:	f200 8081 	bhi.w	80137c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80136c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136c8:	d02f      	beq.n	801372a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80136ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136d0:	d878      	bhi.n	80137c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80136d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d004      	beq.n	80136e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80136d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80136de:	d012      	beq.n	8013706 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80136e0:	e070      	b.n	80137c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80136e2:	4b8a      	ldr	r3, [pc, #552]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80136ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80136ee:	d107      	bne.n	8013700 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80136f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80136f4:	4618      	mov	r0, r3
 80136f6:	f000 fe07 	bl	8014308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80136fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80136fe:	e338      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013700:	2300      	movs	r3, #0
 8013702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013704:	e335      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013706:	4b81      	ldr	r3, [pc, #516]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801370e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013712:	d107      	bne.n	8013724 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013714:	f107 0318 	add.w	r3, r7, #24
 8013718:	4618      	mov	r0, r3
 801371a:	f000 fb4d 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013722:	e326      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013724:	2300      	movs	r3, #0
 8013726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013728:	e323      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801372a:	4b78      	ldr	r3, [pc, #480]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013736:	d107      	bne.n	8013748 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013738:	f107 030c 	add.w	r3, r7, #12
 801373c:	4618      	mov	r0, r3
 801373e:	f000 fc8f 	bl	8014060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013746:	e314      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013748:	2300      	movs	r3, #0
 801374a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801374c:	e311      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801374e:	4b6f      	ldr	r3, [pc, #444]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013752:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013756:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013758:	4b6c      	ldr	r3, [pc, #432]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	f003 0304 	and.w	r3, r3, #4
 8013760:	2b04      	cmp	r3, #4
 8013762:	d10c      	bne.n	801377e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8013764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013766:	2b00      	cmp	r3, #0
 8013768:	d109      	bne.n	801377e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801376a:	4b68      	ldr	r3, [pc, #416]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	08db      	lsrs	r3, r3, #3
 8013770:	f003 0303 	and.w	r3, r3, #3
 8013774:	4a66      	ldr	r2, [pc, #408]	@ (8013910 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8013776:	fa22 f303 	lsr.w	r3, r2, r3
 801377a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801377c:	e01e      	b.n	80137bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801377e:	4b63      	ldr	r3, [pc, #396]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801378a:	d106      	bne.n	801379a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801378c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801378e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013792:	d102      	bne.n	801379a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013794:	4b5f      	ldr	r3, [pc, #380]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8013796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013798:	e010      	b.n	80137bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801379a:	4b5c      	ldr	r3, [pc, #368]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80137a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80137a6:	d106      	bne.n	80137b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80137a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137ae:	d102      	bne.n	80137b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80137b0:	4b59      	ldr	r3, [pc, #356]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80137b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80137b4:	e002      	b.n	80137bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80137b6:	2300      	movs	r3, #0
 80137b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80137ba:	e2da      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80137bc:	e2d9      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80137be:	4b57      	ldr	r3, [pc, #348]	@ (801391c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80137c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137c2:	e2d6      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80137c4:	2300      	movs	r3, #0
 80137c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137c8:	e2d3      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80137ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80137ce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80137d2:	430b      	orrs	r3, r1
 80137d4:	f040 80a7 	bne.w	8013926 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80137d8:	4b4c      	ldr	r3, [pc, #304]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80137dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80137e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80137e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80137e8:	d055      	beq.n	8013896 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80137ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80137f0:	f200 8096 	bhi.w	8013920 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80137f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80137fa:	f000 8084 	beq.w	8013906 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80137fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013800:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013804:	f200 808c 	bhi.w	8013920 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801380a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801380e:	d030      	beq.n	8013872 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8013810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013816:	f200 8083 	bhi.w	8013920 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801381c:	2b00      	cmp	r3, #0
 801381e:	d004      	beq.n	801382a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8013820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013826:	d012      	beq.n	801384e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8013828:	e07a      	b.n	8013920 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801382a:	4b38      	ldr	r3, [pc, #224]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013832:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013836:	d107      	bne.n	8013848 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801383c:	4618      	mov	r0, r3
 801383e:	f000 fd63 	bl	8014308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013846:	e294      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013848:	2300      	movs	r3, #0
 801384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801384c:	e291      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801384e:	4b2f      	ldr	r3, [pc, #188]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801385a:	d107      	bne.n	801386c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801385c:	f107 0318 	add.w	r3, r7, #24
 8013860:	4618      	mov	r0, r3
 8013862:	f000 faa9 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013866:	69bb      	ldr	r3, [r7, #24]
 8013868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801386a:	e282      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801386c:	2300      	movs	r3, #0
 801386e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013870:	e27f      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013872:	4b26      	ldr	r3, [pc, #152]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801387a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801387e:	d107      	bne.n	8013890 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013880:	f107 030c 	add.w	r3, r7, #12
 8013884:	4618      	mov	r0, r3
 8013886:	f000 fbeb 	bl	8014060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801388e:	e270      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013890:	2300      	movs	r3, #0
 8013892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013894:	e26d      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013896:	4b1d      	ldr	r3, [pc, #116]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801389a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801389e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80138a0:	4b1a      	ldr	r3, [pc, #104]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f003 0304 	and.w	r3, r3, #4
 80138a8:	2b04      	cmp	r3, #4
 80138aa:	d10c      	bne.n	80138c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80138ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d109      	bne.n	80138c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80138b2:	4b16      	ldr	r3, [pc, #88]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	08db      	lsrs	r3, r3, #3
 80138b8:	f003 0303 	and.w	r3, r3, #3
 80138bc:	4a14      	ldr	r2, [pc, #80]	@ (8013910 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80138be:	fa22 f303 	lsr.w	r3, r2, r3
 80138c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138c4:	e01e      	b.n	8013904 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80138c6:	4b11      	ldr	r3, [pc, #68]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80138ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80138d2:	d106      	bne.n	80138e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80138d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80138da:	d102      	bne.n	80138e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80138dc:	4b0d      	ldr	r3, [pc, #52]	@ (8013914 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80138de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138e0:	e010      	b.n	8013904 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80138e2:	4b0a      	ldr	r3, [pc, #40]	@ (801390c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80138ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80138ee:	d106      	bne.n	80138fe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80138f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80138f6:	d102      	bne.n	80138fe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80138f8:	4b07      	ldr	r3, [pc, #28]	@ (8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80138fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80138fc:	e002      	b.n	8013904 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80138fe:	2300      	movs	r3, #0
 8013900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013902:	e236      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013904:	e235      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013906:	4b05      	ldr	r3, [pc, #20]	@ (801391c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801390a:	e232      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801390c:	58024400 	.word	0x58024400
 8013910:	03d09000 	.word	0x03d09000
 8013914:	003d0900 	.word	0x003d0900
 8013918:	016e3600 	.word	0x016e3600
 801391c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8013920:	2300      	movs	r3, #0
 8013922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013924:	e225      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8013926:	e9d7 2300 	ldrd	r2, r3, [r7]
 801392a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801392e:	430b      	orrs	r3, r1
 8013930:	f040 8085 	bne.w	8013a3e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8013934:	4b9c      	ldr	r3, [pc, #624]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013938:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801393c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013944:	d06b      	beq.n	8013a1e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8013946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801394c:	d874      	bhi.n	8013a38 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013950:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013954:	d056      	beq.n	8013a04 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8013956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013958:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801395c:	d86c      	bhi.n	8013a38 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013960:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013964:	d03b      	beq.n	80139de <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8013966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013968:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801396c:	d864      	bhi.n	8013a38 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801396e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013970:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013974:	d021      	beq.n	80139ba <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8013976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801397c:	d85c      	bhi.n	8013a38 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013980:	2b00      	cmp	r3, #0
 8013982:	d004      	beq.n	801398e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8013984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801398a:	d004      	beq.n	8013996 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801398c:	e054      	b.n	8013a38 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801398e:	f7fe fb5f 	bl	8012050 <HAL_RCC_GetPCLK1Freq>
 8013992:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013994:	e1ed      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013996:	4b84      	ldr	r3, [pc, #528]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801399e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80139a2:	d107      	bne.n	80139b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80139a4:	f107 0318 	add.w	r3, r7, #24
 80139a8:	4618      	mov	r0, r3
 80139aa:	f000 fa05 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80139ae:	69fb      	ldr	r3, [r7, #28]
 80139b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139b2:	e1de      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139b4:	2300      	movs	r3, #0
 80139b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139b8:	e1db      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80139ba:	4b7b      	ldr	r3, [pc, #492]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80139c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80139c6:	d107      	bne.n	80139d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80139c8:	f107 030c 	add.w	r3, r7, #12
 80139cc:	4618      	mov	r0, r3
 80139ce:	f000 fb47 	bl	8014060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139d6:	e1cc      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139d8:	2300      	movs	r3, #0
 80139da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139dc:	e1c9      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80139de:	4b72      	ldr	r3, [pc, #456]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	f003 0304 	and.w	r3, r3, #4
 80139e6:	2b04      	cmp	r3, #4
 80139e8:	d109      	bne.n	80139fe <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80139ea:	4b6f      	ldr	r3, [pc, #444]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	08db      	lsrs	r3, r3, #3
 80139f0:	f003 0303 	and.w	r3, r3, #3
 80139f4:	4a6d      	ldr	r2, [pc, #436]	@ (8013bac <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80139f6:	fa22 f303 	lsr.w	r3, r2, r3
 80139fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139fc:	e1b9      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139fe:	2300      	movs	r3, #0
 8013a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a02:	e1b6      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013a04:	4b68      	ldr	r3, [pc, #416]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a10:	d102      	bne.n	8013a18 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8013a12:	4b67      	ldr	r3, [pc, #412]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a16:	e1ac      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a1c:	e1a9      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013a1e:	4b62      	ldr	r3, [pc, #392]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013a26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a2a:	d102      	bne.n	8013a32 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8013a2c:	4b61      	ldr	r3, [pc, #388]	@ (8013bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a30:	e19f      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a32:	2300      	movs	r3, #0
 8013a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a36:	e19c      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a3c:	e199      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8013a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a42:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8013a46:	430b      	orrs	r3, r1
 8013a48:	d173      	bne.n	8013b32 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8013a4a:	4b57      	ldr	r3, [pc, #348]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013a52:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a5a:	d02f      	beq.n	8013abc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a62:	d863      	bhi.n	8013b2c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d004      	beq.n	8013a74 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8013a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a70:	d012      	beq.n	8013a98 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8013a72:	e05b      	b.n	8013b2c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013a74:	4b4c      	ldr	r3, [pc, #304]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013a80:	d107      	bne.n	8013a92 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a82:	f107 0318 	add.w	r3, r7, #24
 8013a86:	4618      	mov	r0, r3
 8013a88:	f000 f996 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013a8c:	69bb      	ldr	r3, [r7, #24]
 8013a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a90:	e16f      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013a92:	2300      	movs	r3, #0
 8013a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a96:	e16c      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013a98:	4b43      	ldr	r3, [pc, #268]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013aa4:	d107      	bne.n	8013ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013aa6:	f107 030c 	add.w	r3, r7, #12
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f000 fad8 	bl	8014060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013ab0:	697b      	ldr	r3, [r7, #20]
 8013ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ab4:	e15d      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013aba:	e15a      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013abc:	4b3a      	ldr	r3, [pc, #232]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ac0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013ac4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013ac6:	4b38      	ldr	r3, [pc, #224]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	f003 0304 	and.w	r3, r3, #4
 8013ace:	2b04      	cmp	r3, #4
 8013ad0:	d10c      	bne.n	8013aec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8013ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d109      	bne.n	8013aec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013ad8:	4b33      	ldr	r3, [pc, #204]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	08db      	lsrs	r3, r3, #3
 8013ade:	f003 0303 	and.w	r3, r3, #3
 8013ae2:	4a32      	ldr	r2, [pc, #200]	@ (8013bac <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8013ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013aea:	e01e      	b.n	8013b2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013aec:	4b2e      	ldr	r3, [pc, #184]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013af8:	d106      	bne.n	8013b08 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8013afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013afc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b00:	d102      	bne.n	8013b08 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013b02:	4b2b      	ldr	r3, [pc, #172]	@ (8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b06:	e010      	b.n	8013b2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013b08:	4b27      	ldr	r3, [pc, #156]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013b10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013b14:	d106      	bne.n	8013b24 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8013b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b1c:	d102      	bne.n	8013b24 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013b1e:	4b25      	ldr	r3, [pc, #148]	@ (8013bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b22:	e002      	b.n	8013b2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013b24:	2300      	movs	r3, #0
 8013b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013b28:	e123      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013b2a:	e122      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b30:	e11f      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b36:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8013b3a:	430b      	orrs	r3, r1
 8013b3c:	d13c      	bne.n	8013bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8013b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013b46:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d004      	beq.n	8013b58 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8013b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013b54:	d012      	beq.n	8013b7c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013b56:	e023      	b.n	8013ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013b58:	4b13      	ldr	r3, [pc, #76]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013b60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013b64:	d107      	bne.n	8013b76 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f000 fbcc 	bl	8014308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b74:	e0fd      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013b76:	2300      	movs	r3, #0
 8013b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b7a:	e0fa      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8013ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013b84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013b88:	d107      	bne.n	8013b9a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013b8a:	f107 0318 	add.w	r3, r7, #24
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f000 f912 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013b94:	6a3b      	ldr	r3, [r7, #32]
 8013b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b98:	e0eb      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b9e:	e0e8      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ba4:	e0e5      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013ba6:	bf00      	nop
 8013ba8:	58024400 	.word	0x58024400
 8013bac:	03d09000 	.word	0x03d09000
 8013bb0:	003d0900 	.word	0x003d0900
 8013bb4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013bbc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013bc0:	430b      	orrs	r3, r1
 8013bc2:	f040 8085 	bne.w	8013cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8013bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8013d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013bca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8013bce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013bd6:	d06b      	beq.n	8013cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013bde:	d874      	bhi.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013be6:	d056      	beq.n	8013c96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8013be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013bee:	d86c      	bhi.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013bf6:	d03b      	beq.n	8013c70 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013bfe:	d864      	bhi.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c06:	d021      	beq.n	8013c4c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8013c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c0e:	d85c      	bhi.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d004      	beq.n	8013c20 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8013c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c1c:	d004      	beq.n	8013c28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8013c1e:	e054      	b.n	8013cca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013c20:	f000 f8b4 	bl	8013d8c <HAL_RCCEx_GetD3PCLK1Freq>
 8013c24:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013c26:	e0a4      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013c28:	4b54      	ldr	r3, [pc, #336]	@ (8013d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013c30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013c34:	d107      	bne.n	8013c46 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013c36:	f107 0318 	add.w	r3, r7, #24
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f000 f8bc 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013c40:	69fb      	ldr	r3, [r7, #28]
 8013c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c44:	e095      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c46:	2300      	movs	r3, #0
 8013c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c4a:	e092      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8013d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c58:	d107      	bne.n	8013c6a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013c5a:	f107 030c 	add.w	r3, r7, #12
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f000 f9fe 	bl	8014060 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c68:	e083      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c6e:	e080      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013c70:	4b42      	ldr	r3, [pc, #264]	@ (8013d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	f003 0304 	and.w	r3, r3, #4
 8013c78:	2b04      	cmp	r3, #4
 8013c7a:	d109      	bne.n	8013c90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013c7c:	4b3f      	ldr	r3, [pc, #252]	@ (8013d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	08db      	lsrs	r3, r3, #3
 8013c82:	f003 0303 	and.w	r3, r3, #3
 8013c86:	4a3e      	ldr	r2, [pc, #248]	@ (8013d80 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013c88:	fa22 f303 	lsr.w	r3, r2, r3
 8013c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c8e:	e070      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c90:	2300      	movs	r3, #0
 8013c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c94:	e06d      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013c96:	4b39      	ldr	r3, [pc, #228]	@ (8013d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ca2:	d102      	bne.n	8013caa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013ca4:	4b37      	ldr	r3, [pc, #220]	@ (8013d84 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ca8:	e063      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013caa:	2300      	movs	r3, #0
 8013cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cae:	e060      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013cb0:	4b32      	ldr	r3, [pc, #200]	@ (8013d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013cbc:	d102      	bne.n	8013cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8013cbe:	4b32      	ldr	r3, [pc, #200]	@ (8013d88 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013cc2:	e056      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cc8:	e053      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cce:	e050      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013cd4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013cd8:	430b      	orrs	r3, r1
 8013cda:	d148      	bne.n	8013d6e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8013cdc:	4b27      	ldr	r3, [pc, #156]	@ (8013d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013ce0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013ce4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ce8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013cec:	d02a      	beq.n	8013d44 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8013cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013cf4:	d838      	bhi.n	8013d68 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d004      	beq.n	8013d06 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8013cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013d02:	d00d      	beq.n	8013d20 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8013d04:	e030      	b.n	8013d68 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013d06:	4b1d      	ldr	r3, [pc, #116]	@ (8013d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013d0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013d12:	d102      	bne.n	8013d1a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8013d14:	4b1c      	ldr	r3, [pc, #112]	@ (8013d88 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d18:	e02b      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d1e:	e028      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013d20:	4b16      	ldr	r3, [pc, #88]	@ (8013d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013d28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013d2c:	d107      	bne.n	8013d3e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013d32:	4618      	mov	r0, r3
 8013d34:	f000 fae8 	bl	8014308 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d3c:	e019      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d42:	e016      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013d44:	4b0d      	ldr	r3, [pc, #52]	@ (8013d7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013d4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013d50:	d107      	bne.n	8013d62 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013d52:	f107 0318 	add.w	r3, r7, #24
 8013d56:	4618      	mov	r0, r3
 8013d58:	f000 f82e 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013d5c:	69fb      	ldr	r3, [r7, #28]
 8013d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d60:	e007      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013d62:	2300      	movs	r3, #0
 8013d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d66:	e004      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013d68:	2300      	movs	r3, #0
 8013d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d6c:	e001      	b.n	8013d72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	3740      	adds	r7, #64	@ 0x40
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	58024400 	.word	0x58024400
 8013d80:	03d09000 	.word	0x03d09000
 8013d84:	003d0900 	.word	0x003d0900
 8013d88:	016e3600 	.word	0x016e3600

08013d8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013d90:	f7fe f92e 	bl	8011ff0 <HAL_RCC_GetHCLKFreq>
 8013d94:	4602      	mov	r2, r0
 8013d96:	4b06      	ldr	r3, [pc, #24]	@ (8013db0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013d98:	6a1b      	ldr	r3, [r3, #32]
 8013d9a:	091b      	lsrs	r3, r3, #4
 8013d9c:	f003 0307 	and.w	r3, r3, #7
 8013da0:	4904      	ldr	r1, [pc, #16]	@ (8013db4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013da2:	5ccb      	ldrb	r3, [r1, r3]
 8013da4:	f003 031f 	and.w	r3, r3, #31
 8013da8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	58024400 	.word	0x58024400
 8013db4:	0801ebec 	.word	0x0801ebec

08013db8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b089      	sub	sp, #36	@ 0x24
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013dc0:	4ba1      	ldr	r3, [pc, #644]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013dc4:	f003 0303 	and.w	r3, r3, #3
 8013dc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013dca:	4b9f      	ldr	r3, [pc, #636]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013dce:	0b1b      	lsrs	r3, r3, #12
 8013dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013dd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dda:	091b      	lsrs	r3, r3, #4
 8013ddc:	f003 0301 	and.w	r3, r3, #1
 8013de0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013de2:	4b99      	ldr	r3, [pc, #612]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013de6:	08db      	lsrs	r3, r3, #3
 8013de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013dec:	693a      	ldr	r2, [r7, #16]
 8013dee:	fb02 f303 	mul.w	r3, r2, r3
 8013df2:	ee07 3a90 	vmov	s15, r3
 8013df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	f000 8111 	beq.w	8014028 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013e06:	69bb      	ldr	r3, [r7, #24]
 8013e08:	2b02      	cmp	r3, #2
 8013e0a:	f000 8083 	beq.w	8013f14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	2b02      	cmp	r3, #2
 8013e12:	f200 80a1 	bhi.w	8013f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013e16:	69bb      	ldr	r3, [r7, #24]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d003      	beq.n	8013e24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013e1c:	69bb      	ldr	r3, [r7, #24]
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d056      	beq.n	8013ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013e22:	e099      	b.n	8013f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013e24:	4b88      	ldr	r3, [pc, #544]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	f003 0320 	and.w	r3, r3, #32
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d02d      	beq.n	8013e8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013e30:	4b85      	ldr	r3, [pc, #532]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	08db      	lsrs	r3, r3, #3
 8013e36:	f003 0303 	and.w	r3, r3, #3
 8013e3a:	4a84      	ldr	r2, [pc, #528]	@ (801404c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8013e40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	ee07 3a90 	vmov	s15, r3
 8013e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	ee07 3a90 	vmov	s15, r3
 8013e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e62:	ee07 3a90 	vmov	s15, r3
 8013e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013e8a:	e087      	b.n	8013f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	ee07 3a90 	vmov	s15, r3
 8013e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8014054 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ea6:	ee07 3a90 	vmov	s15, r3
 8013eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8013eb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013ece:	e065      	b.n	8013f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013ed0:	697b      	ldr	r3, [r7, #20]
 8013ed2:	ee07 3a90 	vmov	s15, r3
 8013ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013eda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ee2:	4b59      	ldr	r3, [pc, #356]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013eea:	ee07 3a90 	vmov	s15, r3
 8013eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ef6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f12:	e043      	b.n	8013f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013f14:	697b      	ldr	r3, [r7, #20]
 8013f16:	ee07 3a90 	vmov	s15, r3
 8013f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801405c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f26:	4b48      	ldr	r3, [pc, #288]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f2e:	ee07 3a90 	vmov	s15, r3
 8013f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f56:	e021      	b.n	8013f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	ee07 3a90 	vmov	s15, r3
 8013f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f6a:	4b37      	ldr	r3, [pc, #220]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f72:	ee07 3a90 	vmov	s15, r3
 8013f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013f9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fa0:	0a5b      	lsrs	r3, r3, #9
 8013fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fa6:	ee07 3a90 	vmov	s15, r3
 8013faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8013fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fc2:	ee17 2a90 	vmov	r2, s15
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013fca:	4b1f      	ldr	r3, [pc, #124]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013fce:	0c1b      	lsrs	r3, r3, #16
 8013fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013fd4:	ee07 3a90 	vmov	s15, r3
 8013fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8013fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ff0:	ee17 2a90 	vmov	r2, s15
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013ff8:	4b13      	ldr	r3, [pc, #76]	@ (8014048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ffc:	0e1b      	lsrs	r3, r3, #24
 8013ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014002:	ee07 3a90 	vmov	s15, r3
 8014006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801400a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801400e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014012:	edd7 6a07 	vldr	s13, [r7, #28]
 8014016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801401a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801401e:	ee17 2a90 	vmov	r2, s15
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8014026:	e008      	b.n	801403a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	2200      	movs	r2, #0
 801402c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2200      	movs	r2, #0
 8014032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2200      	movs	r2, #0
 8014038:	609a      	str	r2, [r3, #8]
}
 801403a:	bf00      	nop
 801403c:	3724      	adds	r7, #36	@ 0x24
 801403e:	46bd      	mov	sp, r7
 8014040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014044:	4770      	bx	lr
 8014046:	bf00      	nop
 8014048:	58024400 	.word	0x58024400
 801404c:	03d09000 	.word	0x03d09000
 8014050:	46000000 	.word	0x46000000
 8014054:	4c742400 	.word	0x4c742400
 8014058:	4a742400 	.word	0x4a742400
 801405c:	4bb71b00 	.word	0x4bb71b00

08014060 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8014060:	b480      	push	{r7}
 8014062:	b089      	sub	sp, #36	@ 0x24
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014068:	4ba1      	ldr	r3, [pc, #644]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801406c:	f003 0303 	and.w	r3, r3, #3
 8014070:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8014072:	4b9f      	ldr	r3, [pc, #636]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014076:	0d1b      	lsrs	r3, r3, #20
 8014078:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801407c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801407e:	4b9c      	ldr	r3, [pc, #624]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014082:	0a1b      	lsrs	r3, r3, #8
 8014084:	f003 0301 	and.w	r3, r3, #1
 8014088:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801408a:	4b99      	ldr	r3, [pc, #612]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801408c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801408e:	08db      	lsrs	r3, r3, #3
 8014090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014094:	693a      	ldr	r2, [r7, #16]
 8014096:	fb02 f303 	mul.w	r3, r2, r3
 801409a:	ee07 3a90 	vmov	s15, r3
 801409e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	f000 8111 	beq.w	80142d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	2b02      	cmp	r3, #2
 80140b2:	f000 8083 	beq.w	80141bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80140b6:	69bb      	ldr	r3, [r7, #24]
 80140b8:	2b02      	cmp	r3, #2
 80140ba:	f200 80a1 	bhi.w	8014200 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80140be:	69bb      	ldr	r3, [r7, #24]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d003      	beq.n	80140cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80140c4:	69bb      	ldr	r3, [r7, #24]
 80140c6:	2b01      	cmp	r3, #1
 80140c8:	d056      	beq.n	8014178 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80140ca:	e099      	b.n	8014200 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80140cc:	4b88      	ldr	r3, [pc, #544]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	f003 0320 	and.w	r3, r3, #32
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d02d      	beq.n	8014134 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80140d8:	4b85      	ldr	r3, [pc, #532]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	08db      	lsrs	r3, r3, #3
 80140de:	f003 0303 	and.w	r3, r3, #3
 80140e2:	4a84      	ldr	r2, [pc, #528]	@ (80142f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80140e4:	fa22 f303 	lsr.w	r3, r2, r3
 80140e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80140ea:	68bb      	ldr	r3, [r7, #8]
 80140ec:	ee07 3a90 	vmov	s15, r3
 80140f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	ee07 3a90 	vmov	s15, r3
 80140fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014102:	4b7b      	ldr	r3, [pc, #492]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801410a:	ee07 3a90 	vmov	s15, r3
 801410e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014112:	ed97 6a03 	vldr	s12, [r7, #12]
 8014116:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801411a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801411e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801412a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801412e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8014132:	e087      	b.n	8014244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	ee07 3a90 	vmov	s15, r3
 801413a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801413e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80142fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8014142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014146:	4b6a      	ldr	r3, [pc, #424]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801414a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801414e:	ee07 3a90 	vmov	s15, r3
 8014152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014156:	ed97 6a03 	vldr	s12, [r7, #12]
 801415a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801415e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801416a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801416e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014176:	e065      	b.n	8014244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	ee07 3a90 	vmov	s15, r3
 801417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014182:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8014186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801418a:	4b59      	ldr	r3, [pc, #356]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801418c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801418e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014192:	ee07 3a90 	vmov	s15, r3
 8014196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801419a:	ed97 6a03 	vldr	s12, [r7, #12]
 801419e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80141a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80141a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80141ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80141ba:	e043      	b.n	8014244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	ee07 3a90 	vmov	s15, r3
 80141c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80141ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80141ce:	4b48      	ldr	r3, [pc, #288]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141d6:	ee07 3a90 	vmov	s15, r3
 80141da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141de:	ed97 6a03 	vldr	s12, [r7, #12]
 80141e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80141e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80141ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80141f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80141fe:	e021      	b.n	8014244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	ee07 3a90 	vmov	s15, r3
 8014206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801420a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801420e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014212:	4b37      	ldr	r3, [pc, #220]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801421a:	ee07 3a90 	vmov	s15, r3
 801421e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014222:	ed97 6a03 	vldr	s12, [r7, #12]
 8014226:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80142f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801422a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801422e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801423a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801423e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014242:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8014244:	4b2a      	ldr	r3, [pc, #168]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014248:	0a5b      	lsrs	r3, r3, #9
 801424a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801424e:	ee07 3a90 	vmov	s15, r3
 8014252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014256:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801425a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801425e:	edd7 6a07 	vldr	s13, [r7, #28]
 8014262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801426a:	ee17 2a90 	vmov	r2, s15
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8014272:	4b1f      	ldr	r3, [pc, #124]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014276:	0c1b      	lsrs	r3, r3, #16
 8014278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801427c:	ee07 3a90 	vmov	s15, r3
 8014280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014284:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014288:	ee37 7a87 	vadd.f32	s14, s15, s14
 801428c:	edd7 6a07 	vldr	s13, [r7, #28]
 8014290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014298:	ee17 2a90 	vmov	r2, s15
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80142a0:	4b13      	ldr	r3, [pc, #76]	@ (80142f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80142a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142a4:	0e1b      	lsrs	r3, r3, #24
 80142a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80142aa:	ee07 3a90 	vmov	s15, r3
 80142ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80142b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80142ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80142be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80142c6:	ee17 2a90 	vmov	r2, s15
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80142ce:	e008      	b.n	80142e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2200      	movs	r2, #0
 80142d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	2200      	movs	r2, #0
 80142da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	2200      	movs	r2, #0
 80142e0:	609a      	str	r2, [r3, #8]
}
 80142e2:	bf00      	nop
 80142e4:	3724      	adds	r7, #36	@ 0x24
 80142e6:	46bd      	mov	sp, r7
 80142e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ec:	4770      	bx	lr
 80142ee:	bf00      	nop
 80142f0:	58024400 	.word	0x58024400
 80142f4:	03d09000 	.word	0x03d09000
 80142f8:	46000000 	.word	0x46000000
 80142fc:	4c742400 	.word	0x4c742400
 8014300:	4a742400 	.word	0x4a742400
 8014304:	4bb71b00 	.word	0x4bb71b00

08014308 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8014308:	b480      	push	{r7}
 801430a:	b089      	sub	sp, #36	@ 0x24
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014310:	4ba0      	ldr	r3, [pc, #640]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014314:	f003 0303 	and.w	r3, r3, #3
 8014318:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801431a:	4b9e      	ldr	r3, [pc, #632]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801431c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801431e:	091b      	lsrs	r3, r3, #4
 8014320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014324:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8014326:	4b9b      	ldr	r3, [pc, #620]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801432a:	f003 0301 	and.w	r3, r3, #1
 801432e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8014330:	4b98      	ldr	r3, [pc, #608]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014334:	08db      	lsrs	r3, r3, #3
 8014336:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801433a:	693a      	ldr	r2, [r7, #16]
 801433c:	fb02 f303 	mul.w	r3, r2, r3
 8014340:	ee07 3a90 	vmov	s15, r3
 8014344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014348:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	2b00      	cmp	r3, #0
 8014350:	f000 8111 	beq.w	8014576 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8014354:	69bb      	ldr	r3, [r7, #24]
 8014356:	2b02      	cmp	r3, #2
 8014358:	f000 8083 	beq.w	8014462 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	2b02      	cmp	r3, #2
 8014360:	f200 80a1 	bhi.w	80144a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8014364:	69bb      	ldr	r3, [r7, #24]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d003      	beq.n	8014372 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801436a:	69bb      	ldr	r3, [r7, #24]
 801436c:	2b01      	cmp	r3, #1
 801436e:	d056      	beq.n	801441e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8014370:	e099      	b.n	80144a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014372:	4b88      	ldr	r3, [pc, #544]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	f003 0320 	and.w	r3, r3, #32
 801437a:	2b00      	cmp	r3, #0
 801437c:	d02d      	beq.n	80143da <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801437e:	4b85      	ldr	r3, [pc, #532]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	08db      	lsrs	r3, r3, #3
 8014384:	f003 0303 	and.w	r3, r3, #3
 8014388:	4a83      	ldr	r2, [pc, #524]	@ (8014598 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801438a:	fa22 f303 	lsr.w	r3, r2, r3
 801438e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	ee07 3a90 	vmov	s15, r3
 8014396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	ee07 3a90 	vmov	s15, r3
 80143a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143a8:	4b7a      	ldr	r3, [pc, #488]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143b0:	ee07 3a90 	vmov	s15, r3
 80143b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80143bc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801459c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80143c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80143c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80143cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143d4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80143d8:	e087      	b.n	80144ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80143da:	697b      	ldr	r3, [r7, #20]
 80143dc:	ee07 3a90 	vmov	s15, r3
 80143e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143e4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80145a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80143e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143ec:	4b69      	ldr	r3, [pc, #420]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143f4:	ee07 3a90 	vmov	s15, r3
 80143f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8014400:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801459c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801440c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014418:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801441c:	e065      	b.n	80144ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	ee07 3a90 	vmov	s15, r3
 8014424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014428:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80145a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801442c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014430:	4b58      	ldr	r3, [pc, #352]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014438:	ee07 3a90 	vmov	s15, r3
 801443c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014440:	ed97 6a03 	vldr	s12, [r7, #12]
 8014444:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801459c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801444c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014450:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014458:	ee67 7a27 	vmul.f32	s15, s14, s15
 801445c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014460:	e043      	b.n	80144ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	ee07 3a90 	vmov	s15, r3
 8014468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801446c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80145a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8014470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014474:	4b47      	ldr	r3, [pc, #284]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801447c:	ee07 3a90 	vmov	s15, r3
 8014480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014484:	ed97 6a03 	vldr	s12, [r7, #12]
 8014488:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801459c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801448c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014494:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801449c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80144a4:	e021      	b.n	80144ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80144a6:	697b      	ldr	r3, [r7, #20]
 80144a8:	ee07 3a90 	vmov	s15, r3
 80144ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144b0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80145a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80144b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80144b8:	4b36      	ldr	r3, [pc, #216]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80144ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80144c0:	ee07 3a90 	vmov	s15, r3
 80144c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80144c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80144cc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801459c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80144d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80144d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80144d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80144dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80144e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80144e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80144ea:	4b2a      	ldr	r3, [pc, #168]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80144ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144ee:	0a5b      	lsrs	r3, r3, #9
 80144f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144f4:	ee07 3a90 	vmov	s15, r3
 80144f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014500:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014504:	edd7 6a07 	vldr	s13, [r7, #28]
 8014508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801450c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014510:	ee17 2a90 	vmov	r2, s15
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8014518:	4b1e      	ldr	r3, [pc, #120]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801451c:	0c1b      	lsrs	r3, r3, #16
 801451e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014522:	ee07 3a90 	vmov	s15, r3
 8014526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801452a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801452e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014532:	edd7 6a07 	vldr	s13, [r7, #28]
 8014536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801453a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801453e:	ee17 2a90 	vmov	r2, s15
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8014546:	4b13      	ldr	r3, [pc, #76]	@ (8014594 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801454a:	0e1b      	lsrs	r3, r3, #24
 801454c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014550:	ee07 3a90 	vmov	s15, r3
 8014554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014558:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801455c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014560:	edd7 6a07 	vldr	s13, [r7, #28]
 8014564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801456c:	ee17 2a90 	vmov	r2, s15
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8014574:	e008      	b.n	8014588 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2200      	movs	r2, #0
 801457a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2200      	movs	r2, #0
 8014580:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2200      	movs	r2, #0
 8014586:	609a      	str	r2, [r3, #8]
}
 8014588:	bf00      	nop
 801458a:	3724      	adds	r7, #36	@ 0x24
 801458c:	46bd      	mov	sp, r7
 801458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014592:	4770      	bx	lr
 8014594:	58024400 	.word	0x58024400
 8014598:	03d09000 	.word	0x03d09000
 801459c:	46000000 	.word	0x46000000
 80145a0:	4c742400 	.word	0x4c742400
 80145a4:	4a742400 	.word	0x4a742400
 80145a8:	4bb71b00 	.word	0x4bb71b00

080145ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80145b6:	2300      	movs	r3, #0
 80145b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80145ba:	4b53      	ldr	r3, [pc, #332]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80145bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145be:	f003 0303 	and.w	r3, r3, #3
 80145c2:	2b03      	cmp	r3, #3
 80145c4:	d101      	bne.n	80145ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80145c6:	2301      	movs	r3, #1
 80145c8:	e099      	b.n	80146fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80145ca:	4b4f      	ldr	r3, [pc, #316]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	4a4e      	ldr	r2, [pc, #312]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80145d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80145d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80145d6:	f7f4 ffcd 	bl	8009574 <HAL_GetTick>
 80145da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80145dc:	e008      	b.n	80145f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80145de:	f7f4 ffc9 	bl	8009574 <HAL_GetTick>
 80145e2:	4602      	mov	r2, r0
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	1ad3      	subs	r3, r2, r3
 80145e8:	2b02      	cmp	r3, #2
 80145ea:	d901      	bls.n	80145f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80145ec:	2303      	movs	r3, #3
 80145ee:	e086      	b.n	80146fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80145f0:	4b45      	ldr	r3, [pc, #276]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d1f0      	bne.n	80145de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80145fc:	4b42      	ldr	r3, [pc, #264]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80145fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014600:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	031b      	lsls	r3, r3, #12
 801460a:	493f      	ldr	r1, [pc, #252]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 801460c:	4313      	orrs	r3, r2
 801460e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	685b      	ldr	r3, [r3, #4]
 8014614:	3b01      	subs	r3, #1
 8014616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	689b      	ldr	r3, [r3, #8]
 801461e:	3b01      	subs	r3, #1
 8014620:	025b      	lsls	r3, r3, #9
 8014622:	b29b      	uxth	r3, r3
 8014624:	431a      	orrs	r2, r3
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	68db      	ldr	r3, [r3, #12]
 801462a:	3b01      	subs	r3, #1
 801462c:	041b      	lsls	r3, r3, #16
 801462e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014632:	431a      	orrs	r2, r3
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	691b      	ldr	r3, [r3, #16]
 8014638:	3b01      	subs	r3, #1
 801463a:	061b      	lsls	r3, r3, #24
 801463c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014640:	4931      	ldr	r1, [pc, #196]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 8014642:	4313      	orrs	r3, r2
 8014644:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014646:	4b30      	ldr	r3, [pc, #192]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 8014648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801464a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	695b      	ldr	r3, [r3, #20]
 8014652:	492d      	ldr	r1, [pc, #180]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 8014654:	4313      	orrs	r3, r2
 8014656:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014658:	4b2b      	ldr	r3, [pc, #172]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 801465a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801465c:	f023 0220 	bic.w	r2, r3, #32
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	699b      	ldr	r3, [r3, #24]
 8014664:	4928      	ldr	r1, [pc, #160]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 8014666:	4313      	orrs	r3, r2
 8014668:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801466a:	4b27      	ldr	r3, [pc, #156]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 801466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801466e:	4a26      	ldr	r2, [pc, #152]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 8014670:	f023 0310 	bic.w	r3, r3, #16
 8014674:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8014676:	4b24      	ldr	r3, [pc, #144]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 8014678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801467a:	4b24      	ldr	r3, [pc, #144]	@ (801470c <RCCEx_PLL2_Config+0x160>)
 801467c:	4013      	ands	r3, r2
 801467e:	687a      	ldr	r2, [r7, #4]
 8014680:	69d2      	ldr	r2, [r2, #28]
 8014682:	00d2      	lsls	r2, r2, #3
 8014684:	4920      	ldr	r1, [pc, #128]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 8014686:	4313      	orrs	r3, r2
 8014688:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801468a:	4b1f      	ldr	r3, [pc, #124]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 801468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801468e:	4a1e      	ldr	r2, [pc, #120]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 8014690:	f043 0310 	orr.w	r3, r3, #16
 8014694:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d106      	bne.n	80146aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801469c:	4b1a      	ldr	r3, [pc, #104]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 801469e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146a0:	4a19      	ldr	r2, [pc, #100]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80146a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80146a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80146a8:	e00f      	b.n	80146ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	2b01      	cmp	r3, #1
 80146ae:	d106      	bne.n	80146be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80146b0:	4b15      	ldr	r3, [pc, #84]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80146b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146b4:	4a14      	ldr	r2, [pc, #80]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80146b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80146ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80146bc:	e005      	b.n	80146ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80146be:	4b12      	ldr	r3, [pc, #72]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80146c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146c2:	4a11      	ldr	r2, [pc, #68]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80146c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80146c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80146ca:	4b0f      	ldr	r3, [pc, #60]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	4a0e      	ldr	r2, [pc, #56]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80146d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80146d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80146d6:	f7f4 ff4d 	bl	8009574 <HAL_GetTick>
 80146da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80146dc:	e008      	b.n	80146f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80146de:	f7f4 ff49 	bl	8009574 <HAL_GetTick>
 80146e2:	4602      	mov	r2, r0
 80146e4:	68bb      	ldr	r3, [r7, #8]
 80146e6:	1ad3      	subs	r3, r2, r3
 80146e8:	2b02      	cmp	r3, #2
 80146ea:	d901      	bls.n	80146f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80146ec:	2303      	movs	r3, #3
 80146ee:	e006      	b.n	80146fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80146f0:	4b05      	ldr	r3, [pc, #20]	@ (8014708 <RCCEx_PLL2_Config+0x15c>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d0f0      	beq.n	80146de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80146fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3710      	adds	r7, #16
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
 8014706:	bf00      	nop
 8014708:	58024400 	.word	0x58024400
 801470c:	ffff0007 	.word	0xffff0007

08014710 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b084      	sub	sp, #16
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801471a:	2300      	movs	r3, #0
 801471c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801471e:	4b53      	ldr	r3, [pc, #332]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014722:	f003 0303 	and.w	r3, r3, #3
 8014726:	2b03      	cmp	r3, #3
 8014728:	d101      	bne.n	801472e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801472a:	2301      	movs	r3, #1
 801472c:	e099      	b.n	8014862 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801472e:	4b4f      	ldr	r3, [pc, #316]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	4a4e      	ldr	r2, [pc, #312]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801473a:	f7f4 ff1b 	bl	8009574 <HAL_GetTick>
 801473e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014740:	e008      	b.n	8014754 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014742:	f7f4 ff17 	bl	8009574 <HAL_GetTick>
 8014746:	4602      	mov	r2, r0
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	1ad3      	subs	r3, r2, r3
 801474c:	2b02      	cmp	r3, #2
 801474e:	d901      	bls.n	8014754 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014750:	2303      	movs	r3, #3
 8014752:	e086      	b.n	8014862 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014754:	4b45      	ldr	r3, [pc, #276]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801475c:	2b00      	cmp	r3, #0
 801475e:	d1f0      	bne.n	8014742 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014760:	4b42      	ldr	r3, [pc, #264]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014764:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	051b      	lsls	r3, r3, #20
 801476e:	493f      	ldr	r1, [pc, #252]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014770:	4313      	orrs	r3, r2
 8014772:	628b      	str	r3, [r1, #40]	@ 0x28
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	685b      	ldr	r3, [r3, #4]
 8014778:	3b01      	subs	r3, #1
 801477a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	689b      	ldr	r3, [r3, #8]
 8014782:	3b01      	subs	r3, #1
 8014784:	025b      	lsls	r3, r3, #9
 8014786:	b29b      	uxth	r3, r3
 8014788:	431a      	orrs	r2, r3
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	68db      	ldr	r3, [r3, #12]
 801478e:	3b01      	subs	r3, #1
 8014790:	041b      	lsls	r3, r3, #16
 8014792:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014796:	431a      	orrs	r2, r3
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	691b      	ldr	r3, [r3, #16]
 801479c:	3b01      	subs	r3, #1
 801479e:	061b      	lsls	r3, r3, #24
 80147a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80147a4:	4931      	ldr	r1, [pc, #196]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 80147a6:	4313      	orrs	r3, r2
 80147a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80147aa:	4b30      	ldr	r3, [pc, #192]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 80147ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	695b      	ldr	r3, [r3, #20]
 80147b6:	492d      	ldr	r1, [pc, #180]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 80147b8:	4313      	orrs	r3, r2
 80147ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80147bc:	4b2b      	ldr	r3, [pc, #172]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 80147be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	699b      	ldr	r3, [r3, #24]
 80147c8:	4928      	ldr	r1, [pc, #160]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 80147ca:	4313      	orrs	r3, r2
 80147cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80147ce:	4b27      	ldr	r3, [pc, #156]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 80147d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147d2:	4a26      	ldr	r2, [pc, #152]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 80147d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80147d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80147da:	4b24      	ldr	r3, [pc, #144]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 80147dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80147de:	4b24      	ldr	r3, [pc, #144]	@ (8014870 <RCCEx_PLL3_Config+0x160>)
 80147e0:	4013      	ands	r3, r2
 80147e2:	687a      	ldr	r2, [r7, #4]
 80147e4:	69d2      	ldr	r2, [r2, #28]
 80147e6:	00d2      	lsls	r2, r2, #3
 80147e8:	4920      	ldr	r1, [pc, #128]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 80147ea:	4313      	orrs	r3, r2
 80147ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80147ee:	4b1f      	ldr	r3, [pc, #124]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 80147f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147f2:	4a1e      	ldr	r2, [pc, #120]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 80147f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80147f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d106      	bne.n	801480e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014800:	4b1a      	ldr	r3, [pc, #104]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014804:	4a19      	ldr	r2, [pc, #100]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014806:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801480a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801480c:	e00f      	b.n	801482e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	2b01      	cmp	r3, #1
 8014812:	d106      	bne.n	8014822 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014814:	4b15      	ldr	r3, [pc, #84]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014818:	4a14      	ldr	r2, [pc, #80]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 801481a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801481e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014820:	e005      	b.n	801482e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014822:	4b12      	ldr	r3, [pc, #72]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014826:	4a11      	ldr	r2, [pc, #68]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014828:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801482c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801482e:	4b0f      	ldr	r3, [pc, #60]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	4a0e      	ldr	r2, [pc, #56]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801483a:	f7f4 fe9b 	bl	8009574 <HAL_GetTick>
 801483e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014840:	e008      	b.n	8014854 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014842:	f7f4 fe97 	bl	8009574 <HAL_GetTick>
 8014846:	4602      	mov	r2, r0
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	1ad3      	subs	r3, r2, r3
 801484c:	2b02      	cmp	r3, #2
 801484e:	d901      	bls.n	8014854 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014850:	2303      	movs	r3, #3
 8014852:	e006      	b.n	8014862 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014854:	4b05      	ldr	r3, [pc, #20]	@ (801486c <RCCEx_PLL3_Config+0x15c>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801485c:	2b00      	cmp	r3, #0
 801485e:	d0f0      	beq.n	8014842 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014860:	7bfb      	ldrb	r3, [r7, #15]
}
 8014862:	4618      	mov	r0, r3
 8014864:	3710      	adds	r7, #16
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}
 801486a:	bf00      	nop
 801486c:	58024400 	.word	0x58024400
 8014870:	ffff0007 	.word	0xffff0007

08014874 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b084      	sub	sp, #16
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d101      	bne.n	8014886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8014882:	2301      	movs	r3, #1
 8014884:	e10f      	b.n	8014aa6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	2200      	movs	r2, #0
 801488a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	4a87      	ldr	r2, [pc, #540]	@ (8014ab0 <HAL_SPI_Init+0x23c>)
 8014892:	4293      	cmp	r3, r2
 8014894:	d00f      	beq.n	80148b6 <HAL_SPI_Init+0x42>
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	4a86      	ldr	r2, [pc, #536]	@ (8014ab4 <HAL_SPI_Init+0x240>)
 801489c:	4293      	cmp	r3, r2
 801489e:	d00a      	beq.n	80148b6 <HAL_SPI_Init+0x42>
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	4a84      	ldr	r2, [pc, #528]	@ (8014ab8 <HAL_SPI_Init+0x244>)
 80148a6:	4293      	cmp	r3, r2
 80148a8:	d005      	beq.n	80148b6 <HAL_SPI_Init+0x42>
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	2b0f      	cmp	r3, #15
 80148b0:	d901      	bls.n	80148b6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80148b2:	2301      	movs	r3, #1
 80148b4:	e0f7      	b.n	8014aa6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f001 fd22 	bl	8016300 <SPI_GetPacketSize>
 80148bc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	4a7b      	ldr	r2, [pc, #492]	@ (8014ab0 <HAL_SPI_Init+0x23c>)
 80148c4:	4293      	cmp	r3, r2
 80148c6:	d00c      	beq.n	80148e2 <HAL_SPI_Init+0x6e>
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	4a79      	ldr	r2, [pc, #484]	@ (8014ab4 <HAL_SPI_Init+0x240>)
 80148ce:	4293      	cmp	r3, r2
 80148d0:	d007      	beq.n	80148e2 <HAL_SPI_Init+0x6e>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	4a78      	ldr	r2, [pc, #480]	@ (8014ab8 <HAL_SPI_Init+0x244>)
 80148d8:	4293      	cmp	r3, r2
 80148da:	d002      	beq.n	80148e2 <HAL_SPI_Init+0x6e>
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	2b08      	cmp	r3, #8
 80148e0:	d811      	bhi.n	8014906 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80148e6:	4a72      	ldr	r2, [pc, #456]	@ (8014ab0 <HAL_SPI_Init+0x23c>)
 80148e8:	4293      	cmp	r3, r2
 80148ea:	d009      	beq.n	8014900 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	4a70      	ldr	r2, [pc, #448]	@ (8014ab4 <HAL_SPI_Init+0x240>)
 80148f2:	4293      	cmp	r3, r2
 80148f4:	d004      	beq.n	8014900 <HAL_SPI_Init+0x8c>
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	4a6f      	ldr	r2, [pc, #444]	@ (8014ab8 <HAL_SPI_Init+0x244>)
 80148fc:	4293      	cmp	r3, r2
 80148fe:	d104      	bne.n	801490a <HAL_SPI_Init+0x96>
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	2b10      	cmp	r3, #16
 8014904:	d901      	bls.n	801490a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8014906:	2301      	movs	r3, #1
 8014908:	e0cd      	b.n	8014aa6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014910:	b2db      	uxtb	r3, r3
 8014912:	2b00      	cmp	r3, #0
 8014914:	d106      	bne.n	8014924 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2200      	movs	r2, #0
 801491a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f7f3 fb7c 	bl	800801c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2202      	movs	r2, #2
 8014928:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	681a      	ldr	r2, [r3, #0]
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	f022 0201 	bic.w	r2, r2, #1
 801493a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	689b      	ldr	r3, [r3, #8]
 8014942:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8014946:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	699b      	ldr	r3, [r3, #24]
 801494c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014950:	d119      	bne.n	8014986 <HAL_SPI_Init+0x112>
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801495a:	d103      	bne.n	8014964 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014960:	2b00      	cmp	r3, #0
 8014962:	d008      	beq.n	8014976 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014968:	2b00      	cmp	r3, #0
 801496a:	d10c      	bne.n	8014986 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014974:	d107      	bne.n	8014986 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	681a      	ldr	r2, [r3, #0]
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8014984:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801498e:	2b00      	cmp	r3, #0
 8014990:	d00f      	beq.n	80149b2 <HAL_SPI_Init+0x13e>
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	68db      	ldr	r3, [r3, #12]
 8014996:	2b06      	cmp	r3, #6
 8014998:	d90b      	bls.n	80149b2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	430a      	orrs	r2, r1
 80149ae:	601a      	str	r2, [r3, #0]
 80149b0:	e007      	b.n	80149c2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	681a      	ldr	r2, [r3, #0]
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80149c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	69da      	ldr	r2, [r3, #28]
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149ca:	431a      	orrs	r2, r3
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	431a      	orrs	r2, r3
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80149d4:	ea42 0103 	orr.w	r1, r2, r3
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	68da      	ldr	r2, [r3, #12]
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	430a      	orrs	r2, r1
 80149e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149ec:	431a      	orrs	r2, r3
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80149f2:	431a      	orrs	r2, r3
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	699b      	ldr	r3, [r3, #24]
 80149f8:	431a      	orrs	r2, r3
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	691b      	ldr	r3, [r3, #16]
 80149fe:	431a      	orrs	r2, r3
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	695b      	ldr	r3, [r3, #20]
 8014a04:	431a      	orrs	r2, r3
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	6a1b      	ldr	r3, [r3, #32]
 8014a0a:	431a      	orrs	r2, r3
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	431a      	orrs	r2, r3
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a16:	431a      	orrs	r2, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	689b      	ldr	r3, [r3, #8]
 8014a1c:	431a      	orrs	r2, r3
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014a22:	ea42 0103 	orr.w	r1, r2, r3
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	430a      	orrs	r2, r1
 8014a30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	685b      	ldr	r3, [r3, #4]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d113      	bne.n	8014a62 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	689b      	ldr	r3, [r3, #8]
 8014a40:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014a4c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	689b      	ldr	r3, [r3, #8]
 8014a54:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8014a60:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	f022 0201 	bic.w	r2, r2, #1
 8014a70:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	685b      	ldr	r3, [r3, #4]
 8014a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d00a      	beq.n	8014a94 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	430a      	orrs	r2, r1
 8014a92:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2200      	movs	r2, #0
 8014a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2201      	movs	r2, #1
 8014aa0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8014aa4:	2300      	movs	r3, #0
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3710      	adds	r7, #16
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	40013000 	.word	0x40013000
 8014ab4:	40003800 	.word	0x40003800
 8014ab8:	40003c00 	.word	0x40003c00

08014abc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b088      	sub	sp, #32
 8014ac0:	af02      	add	r7, sp, #8
 8014ac2:	60f8      	str	r0, [r7, #12]
 8014ac4:	60b9      	str	r1, [r7, #8]
 8014ac6:	603b      	str	r3, [r7, #0]
 8014ac8:	4613      	mov	r3, r2
 8014aca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	3320      	adds	r3, #32
 8014ad2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014ad4:	f7f4 fd4e 	bl	8009574 <HAL_GetTick>
 8014ad8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014ae0:	b2db      	uxtb	r3, r3
 8014ae2:	2b01      	cmp	r3, #1
 8014ae4:	d001      	beq.n	8014aea <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8014ae6:	2302      	movs	r3, #2
 8014ae8:	e1d1      	b.n	8014e8e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d002      	beq.n	8014af6 <HAL_SPI_Transmit+0x3a>
 8014af0:	88fb      	ldrh	r3, [r7, #6]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d101      	bne.n	8014afa <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8014af6:	2301      	movs	r3, #1
 8014af8:	e1c9      	b.n	8014e8e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014b00:	2b01      	cmp	r3, #1
 8014b02:	d101      	bne.n	8014b08 <HAL_SPI_Transmit+0x4c>
 8014b04:	2302      	movs	r3, #2
 8014b06:	e1c2      	b.n	8014e8e <HAL_SPI_Transmit+0x3d2>
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	2201      	movs	r2, #1
 8014b0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	2203      	movs	r2, #3
 8014b14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	68ba      	ldr	r2, [r7, #8]
 8014b24:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	88fa      	ldrh	r2, [r7, #6]
 8014b2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	88fa      	ldrh	r2, [r7, #6]
 8014b32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	2200      	movs	r2, #0
 8014b48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	2200      	movs	r2, #0
 8014b56:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	689b      	ldr	r3, [r3, #8]
 8014b5c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014b60:	d108      	bne.n	8014b74 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	681a      	ldr	r2, [r3, #0]
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014b70:	601a      	str	r2, [r3, #0]
 8014b72:	e009      	b.n	8014b88 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	68db      	ldr	r3, [r3, #12]
 8014b7a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014b86:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	685a      	ldr	r2, [r3, #4]
 8014b8e:	4b96      	ldr	r3, [pc, #600]	@ (8014de8 <HAL_SPI_Transmit+0x32c>)
 8014b90:	4013      	ands	r3, r2
 8014b92:	88f9      	ldrh	r1, [r7, #6]
 8014b94:	68fa      	ldr	r2, [r7, #12]
 8014b96:	6812      	ldr	r2, [r2, #0]
 8014b98:	430b      	orrs	r3, r1
 8014b9a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	f042 0201 	orr.w	r2, r2, #1
 8014baa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	685b      	ldr	r3, [r3, #4]
 8014bb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014bb4:	d107      	bne.n	8014bc6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	681a      	ldr	r2, [r3, #0]
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014bc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	68db      	ldr	r3, [r3, #12]
 8014bca:	2b0f      	cmp	r3, #15
 8014bcc:	d947      	bls.n	8014c5e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014bce:	e03f      	b.n	8014c50 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	695b      	ldr	r3, [r3, #20]
 8014bd6:	f003 0302 	and.w	r3, r3, #2
 8014bda:	2b02      	cmp	r3, #2
 8014bdc:	d114      	bne.n	8014c08 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	6812      	ldr	r2, [r2, #0]
 8014be8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014bee:	1d1a      	adds	r2, r3, #4
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014bfa:	b29b      	uxth	r3, r3
 8014bfc:	3b01      	subs	r3, #1
 8014bfe:	b29a      	uxth	r2, r3
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014c06:	e023      	b.n	8014c50 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014c08:	f7f4 fcb4 	bl	8009574 <HAL_GetTick>
 8014c0c:	4602      	mov	r2, r0
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	1ad3      	subs	r3, r2, r3
 8014c12:	683a      	ldr	r2, [r7, #0]
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d803      	bhi.n	8014c20 <HAL_SPI_Transmit+0x164>
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c1e:	d102      	bne.n	8014c26 <HAL_SPI_Transmit+0x16a>
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d114      	bne.n	8014c50 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014c26:	68f8      	ldr	r0, [r7, #12]
 8014c28:	f001 fa9c 	bl	8016164 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	2201      	movs	r2, #1
 8014c40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	2200      	movs	r2, #0
 8014c48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014c4c:	2303      	movs	r3, #3
 8014c4e:	e11e      	b.n	8014e8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c56:	b29b      	uxth	r3, r3
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d1b9      	bne.n	8014bd0 <HAL_SPI_Transmit+0x114>
 8014c5c:	e0f1      	b.n	8014e42 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	68db      	ldr	r3, [r3, #12]
 8014c62:	2b07      	cmp	r3, #7
 8014c64:	f240 80e6 	bls.w	8014e34 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014c68:	e05d      	b.n	8014d26 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	695b      	ldr	r3, [r3, #20]
 8014c70:	f003 0302 	and.w	r3, r3, #2
 8014c74:	2b02      	cmp	r3, #2
 8014c76:	d132      	bne.n	8014cde <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c7e:	b29b      	uxth	r3, r3
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	d918      	bls.n	8014cb6 <HAL_SPI_Transmit+0x1fa>
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d014      	beq.n	8014cb6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	6812      	ldr	r2, [r2, #0]
 8014c96:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c9c:	1d1a      	adds	r2, r3, #4
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	3b02      	subs	r3, #2
 8014cac:	b29a      	uxth	r2, r3
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014cb4:	e037      	b.n	8014d26 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cba:	881a      	ldrh	r2, [r3, #0]
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cc4:	1c9a      	adds	r2, r3, #2
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cd0:	b29b      	uxth	r3, r3
 8014cd2:	3b01      	subs	r3, #1
 8014cd4:	b29a      	uxth	r2, r3
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014cdc:	e023      	b.n	8014d26 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014cde:	f7f4 fc49 	bl	8009574 <HAL_GetTick>
 8014ce2:	4602      	mov	r2, r0
 8014ce4:	693b      	ldr	r3, [r7, #16]
 8014ce6:	1ad3      	subs	r3, r2, r3
 8014ce8:	683a      	ldr	r2, [r7, #0]
 8014cea:	429a      	cmp	r2, r3
 8014cec:	d803      	bhi.n	8014cf6 <HAL_SPI_Transmit+0x23a>
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cf4:	d102      	bne.n	8014cfc <HAL_SPI_Transmit+0x240>
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d114      	bne.n	8014d26 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014cfc:	68f8      	ldr	r0, [r7, #12]
 8014cfe:	f001 fa31 	bl	8016164 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	2201      	movs	r2, #1
 8014d16:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014d22:	2303      	movs	r3, #3
 8014d24:	e0b3      	b.n	8014e8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d2c:	b29b      	uxth	r3, r3
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d19b      	bne.n	8014c6a <HAL_SPI_Transmit+0x1ae>
 8014d32:	e086      	b.n	8014e42 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	695b      	ldr	r3, [r3, #20]
 8014d3a:	f003 0302 	and.w	r3, r3, #2
 8014d3e:	2b02      	cmp	r3, #2
 8014d40:	d154      	bne.n	8014dec <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d48:	b29b      	uxth	r3, r3
 8014d4a:	2b03      	cmp	r3, #3
 8014d4c:	d918      	bls.n	8014d80 <HAL_SPI_Transmit+0x2c4>
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d52:	2b40      	cmp	r3, #64	@ 0x40
 8014d54:	d914      	bls.n	8014d80 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	6812      	ldr	r2, [r2, #0]
 8014d60:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d66:	1d1a      	adds	r2, r3, #4
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d72:	b29b      	uxth	r3, r3
 8014d74:	3b04      	subs	r3, #4
 8014d76:	b29a      	uxth	r2, r3
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014d7e:	e059      	b.n	8014e34 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d86:	b29b      	uxth	r3, r3
 8014d88:	2b01      	cmp	r3, #1
 8014d8a:	d917      	bls.n	8014dbc <HAL_SPI_Transmit+0x300>
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d013      	beq.n	8014dbc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d98:	881a      	ldrh	r2, [r3, #0]
 8014d9a:	697b      	ldr	r3, [r7, #20]
 8014d9c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014da2:	1c9a      	adds	r2, r3, #2
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	3b02      	subs	r3, #2
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014dba:	e03b      	b.n	8014e34 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	3320      	adds	r3, #32
 8014dc6:	7812      	ldrb	r2, [r2, #0]
 8014dc8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014dce:	1c5a      	adds	r2, r3, #1
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014dda:	b29b      	uxth	r3, r3
 8014ddc:	3b01      	subs	r3, #1
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014de6:	e025      	b.n	8014e34 <HAL_SPI_Transmit+0x378>
 8014de8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014dec:	f7f4 fbc2 	bl	8009574 <HAL_GetTick>
 8014df0:	4602      	mov	r2, r0
 8014df2:	693b      	ldr	r3, [r7, #16]
 8014df4:	1ad3      	subs	r3, r2, r3
 8014df6:	683a      	ldr	r2, [r7, #0]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d803      	bhi.n	8014e04 <HAL_SPI_Transmit+0x348>
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e02:	d102      	bne.n	8014e0a <HAL_SPI_Transmit+0x34e>
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d114      	bne.n	8014e34 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014e0a:	68f8      	ldr	r0, [r7, #12]
 8014e0c:	f001 f9aa 	bl	8016164 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	2201      	movs	r2, #1
 8014e24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014e30:	2303      	movs	r3, #3
 8014e32:	e02c      	b.n	8014e8e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014e3a:	b29b      	uxth	r3, r3
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	f47f af79 	bne.w	8014d34 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	2108      	movs	r1, #8
 8014e4c:	68f8      	ldr	r0, [r7, #12]
 8014e4e:	f001 fa29 	bl	80162a4 <SPI_WaitOnFlagUntilTimeout>
 8014e52:	4603      	mov	r3, r0
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d007      	beq.n	8014e68 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e5e:	f043 0220 	orr.w	r2, r3, #32
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014e68:	68f8      	ldr	r0, [r7, #12]
 8014e6a:	f001 f97b 	bl	8016164 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	2201      	movs	r2, #1
 8014e72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d001      	beq.n	8014e8c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8014e88:	2301      	movs	r3, #1
 8014e8a:	e000      	b.n	8014e8e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8014e8c:	2300      	movs	r3, #0
  }
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3718      	adds	r7, #24
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop

08014e98 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b088      	sub	sp, #32
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	60f8      	str	r0, [r7, #12]
 8014ea0:	60b9      	str	r1, [r7, #8]
 8014ea2:	603b      	str	r3, [r7, #0]
 8014ea4:	4613      	mov	r3, r2
 8014ea6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014eac:	095b      	lsrs	r3, r3, #5
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	3301      	adds	r3, #1
 8014eb2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	3330      	adds	r3, #48	@ 0x30
 8014eba:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014ebc:	f7f4 fb5a 	bl	8009574 <HAL_GetTick>
 8014ec0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014ec8:	b2db      	uxtb	r3, r3
 8014eca:	2b01      	cmp	r3, #1
 8014ecc:	d001      	beq.n	8014ed2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8014ece:	2302      	movs	r3, #2
 8014ed0:	e250      	b.n	8015374 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014ed2:	68bb      	ldr	r3, [r7, #8]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d002      	beq.n	8014ede <HAL_SPI_Receive+0x46>
 8014ed8:	88fb      	ldrh	r3, [r7, #6]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d101      	bne.n	8014ee2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8014ede:	2301      	movs	r3, #1
 8014ee0:	e248      	b.n	8015374 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014ee8:	2b01      	cmp	r3, #1
 8014eea:	d101      	bne.n	8014ef0 <HAL_SPI_Receive+0x58>
 8014eec:	2302      	movs	r3, #2
 8014eee:	e241      	b.n	8015374 <HAL_SPI_Receive+0x4dc>
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2201      	movs	r2, #1
 8014ef4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	2204      	movs	r2, #4
 8014efc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	2200      	movs	r2, #0
 8014f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	68ba      	ldr	r2, [r7, #8]
 8014f0c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	88fa      	ldrh	r2, [r7, #6]
 8014f12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	88fa      	ldrh	r2, [r7, #6]
 8014f1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	2200      	movs	r2, #0
 8014f22:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	2200      	movs	r2, #0
 8014f28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	2200      	movs	r2, #0
 8014f38:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	689b      	ldr	r3, [r3, #8]
 8014f44:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014f48:	d108      	bne.n	8014f5c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	681a      	ldr	r2, [r3, #0]
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014f58:	601a      	str	r2, [r3, #0]
 8014f5a:	e009      	b.n	8014f70 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	68db      	ldr	r3, [r3, #12]
 8014f62:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014f6e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	685a      	ldr	r2, [r3, #4]
 8014f76:	4b95      	ldr	r3, [pc, #596]	@ (80151cc <HAL_SPI_Receive+0x334>)
 8014f78:	4013      	ands	r3, r2
 8014f7a:	88f9      	ldrh	r1, [r7, #6]
 8014f7c:	68fa      	ldr	r2, [r7, #12]
 8014f7e:	6812      	ldr	r2, [r2, #0]
 8014f80:	430b      	orrs	r3, r1
 8014f82:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	681a      	ldr	r2, [r3, #0]
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	f042 0201 	orr.w	r2, r2, #1
 8014f92:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	685b      	ldr	r3, [r3, #4]
 8014f98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014f9c:	d107      	bne.n	8014fae <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	681a      	ldr	r2, [r3, #0]
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014fac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	68db      	ldr	r3, [r3, #12]
 8014fb2:	2b0f      	cmp	r3, #15
 8014fb4:	d96c      	bls.n	8015090 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014fb6:	e064      	b.n	8015082 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	695b      	ldr	r3, [r3, #20]
 8014fbe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	695b      	ldr	r3, [r3, #20]
 8014fc6:	f003 0301 	and.w	r3, r3, #1
 8014fca:	2b01      	cmp	r3, #1
 8014fcc:	d114      	bne.n	8014ff8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	681a      	ldr	r2, [r3, #0]
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fd6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014fd8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fde:	1d1a      	adds	r2, r3, #4
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014fea:	b29b      	uxth	r3, r3
 8014fec:	3b01      	subs	r3, #1
 8014fee:	b29a      	uxth	r2, r3
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014ff6:	e044      	b.n	8015082 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ffe:	b29b      	uxth	r3, r3
 8015000:	8bfa      	ldrh	r2, [r7, #30]
 8015002:	429a      	cmp	r2, r3
 8015004:	d919      	bls.n	801503a <HAL_SPI_Receive+0x1a2>
 8015006:	693b      	ldr	r3, [r7, #16]
 8015008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801500c:	2b00      	cmp	r3, #0
 801500e:	d014      	beq.n	801503a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	681a      	ldr	r2, [r3, #0]
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015018:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801501a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015020:	1d1a      	adds	r2, r3, #4
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801502c:	b29b      	uxth	r3, r3
 801502e:	3b01      	subs	r3, #1
 8015030:	b29a      	uxth	r2, r3
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015038:	e023      	b.n	8015082 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801503a:	f7f4 fa9b 	bl	8009574 <HAL_GetTick>
 801503e:	4602      	mov	r2, r0
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	1ad3      	subs	r3, r2, r3
 8015044:	683a      	ldr	r2, [r7, #0]
 8015046:	429a      	cmp	r2, r3
 8015048:	d803      	bhi.n	8015052 <HAL_SPI_Receive+0x1ba>
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015050:	d102      	bne.n	8015058 <HAL_SPI_Receive+0x1c0>
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d114      	bne.n	8015082 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015058:	68f8      	ldr	r0, [r7, #12]
 801505a:	f001 f883 	bl	8016164 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015064:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	2201      	movs	r2, #1
 8015072:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	2200      	movs	r2, #0
 801507a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801507e:	2303      	movs	r3, #3
 8015080:	e178      	b.n	8015374 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015088:	b29b      	uxth	r3, r3
 801508a:	2b00      	cmp	r3, #0
 801508c:	d194      	bne.n	8014fb8 <HAL_SPI_Receive+0x120>
 801508e:	e15e      	b.n	801534e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	68db      	ldr	r3, [r3, #12]
 8015094:	2b07      	cmp	r3, #7
 8015096:	f240 8153 	bls.w	8015340 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 801509a:	e08f      	b.n	80151bc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	695b      	ldr	r3, [r3, #20]
 80150a2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	695b      	ldr	r3, [r3, #20]
 80150aa:	f003 0301 	and.w	r3, r3, #1
 80150ae:	2b01      	cmp	r3, #1
 80150b0:	d114      	bne.n	80150dc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150b6:	69ba      	ldr	r2, [r7, #24]
 80150b8:	8812      	ldrh	r2, [r2, #0]
 80150ba:	b292      	uxth	r2, r2
 80150bc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150c2:	1c9a      	adds	r2, r3, #2
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150ce:	b29b      	uxth	r3, r3
 80150d0:	3b01      	subs	r3, #1
 80150d2:	b29a      	uxth	r2, r3
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80150da:	e06f      	b.n	80151bc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150e2:	b29b      	uxth	r3, r3
 80150e4:	8bfa      	ldrh	r2, [r7, #30]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d924      	bls.n	8015134 <HAL_SPI_Receive+0x29c>
 80150ea:	693b      	ldr	r3, [r7, #16]
 80150ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d01f      	beq.n	8015134 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150f8:	69ba      	ldr	r2, [r7, #24]
 80150fa:	8812      	ldrh	r2, [r2, #0]
 80150fc:	b292      	uxth	r2, r2
 80150fe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015104:	1c9a      	adds	r2, r3, #2
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801510e:	69ba      	ldr	r2, [r7, #24]
 8015110:	8812      	ldrh	r2, [r2, #0]
 8015112:	b292      	uxth	r2, r2
 8015114:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801511a:	1c9a      	adds	r2, r3, #2
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015126:	b29b      	uxth	r3, r3
 8015128:	3b02      	subs	r3, #2
 801512a:	b29a      	uxth	r2, r3
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015132:	e043      	b.n	80151bc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801513a:	b29b      	uxth	r3, r3
 801513c:	2b01      	cmp	r3, #1
 801513e:	d119      	bne.n	8015174 <HAL_SPI_Receive+0x2dc>
 8015140:	693b      	ldr	r3, [r7, #16]
 8015142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015146:	2b00      	cmp	r3, #0
 8015148:	d014      	beq.n	8015174 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801514e:	69ba      	ldr	r2, [r7, #24]
 8015150:	8812      	ldrh	r2, [r2, #0]
 8015152:	b292      	uxth	r2, r2
 8015154:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801515a:	1c9a      	adds	r2, r3, #2
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015166:	b29b      	uxth	r3, r3
 8015168:	3b01      	subs	r3, #1
 801516a:	b29a      	uxth	r2, r3
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015172:	e023      	b.n	80151bc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015174:	f7f4 f9fe 	bl	8009574 <HAL_GetTick>
 8015178:	4602      	mov	r2, r0
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	1ad3      	subs	r3, r2, r3
 801517e:	683a      	ldr	r2, [r7, #0]
 8015180:	429a      	cmp	r2, r3
 8015182:	d803      	bhi.n	801518c <HAL_SPI_Receive+0x2f4>
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801518a:	d102      	bne.n	8015192 <HAL_SPI_Receive+0x2fa>
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d114      	bne.n	80151bc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015192:	68f8      	ldr	r0, [r7, #12]
 8015194:	f000 ffe6 	bl	8016164 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801519e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	2201      	movs	r2, #1
 80151ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2200      	movs	r2, #0
 80151b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80151b8:	2303      	movs	r3, #3
 80151ba:	e0db      	b.n	8015374 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151c2:	b29b      	uxth	r3, r3
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	f47f af69 	bne.w	801509c <HAL_SPI_Receive+0x204>
 80151ca:	e0c0      	b.n	801534e <HAL_SPI_Receive+0x4b6>
 80151cc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	695b      	ldr	r3, [r3, #20]
 80151d6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	695b      	ldr	r3, [r3, #20]
 80151de:	f003 0301 	and.w	r3, r3, #1
 80151e2:	2b01      	cmp	r3, #1
 80151e4:	d117      	bne.n	8015216 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151f2:	7812      	ldrb	r2, [r2, #0]
 80151f4:	b2d2      	uxtb	r2, r2
 80151f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151fc:	1c5a      	adds	r2, r3, #1
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015208:	b29b      	uxth	r3, r3
 801520a:	3b01      	subs	r3, #1
 801520c:	b29a      	uxth	r2, r3
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015214:	e094      	b.n	8015340 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801521c:	b29b      	uxth	r3, r3
 801521e:	8bfa      	ldrh	r2, [r7, #30]
 8015220:	429a      	cmp	r2, r3
 8015222:	d946      	bls.n	80152b2 <HAL_SPI_Receive+0x41a>
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801522a:	2b00      	cmp	r3, #0
 801522c:	d041      	beq.n	80152b2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801523a:	7812      	ldrb	r2, [r2, #0]
 801523c:	b2d2      	uxtb	r2, r2
 801523e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015244:	1c5a      	adds	r2, r3, #1
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015256:	7812      	ldrb	r2, [r2, #0]
 8015258:	b2d2      	uxtb	r2, r2
 801525a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015260:	1c5a      	adds	r2, r3, #1
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015272:	7812      	ldrb	r2, [r2, #0]
 8015274:	b2d2      	uxtb	r2, r2
 8015276:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801527c:	1c5a      	adds	r2, r3, #1
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801528e:	7812      	ldrb	r2, [r2, #0]
 8015290:	b2d2      	uxtb	r2, r2
 8015292:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015298:	1c5a      	adds	r2, r3, #1
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152a4:	b29b      	uxth	r3, r3
 80152a6:	3b04      	subs	r3, #4
 80152a8:	b29a      	uxth	r2, r3
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152b0:	e046      	b.n	8015340 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152b8:	b29b      	uxth	r3, r3
 80152ba:	2b03      	cmp	r3, #3
 80152bc:	d81c      	bhi.n	80152f8 <HAL_SPI_Receive+0x460>
 80152be:	693b      	ldr	r3, [r7, #16]
 80152c0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d017      	beq.n	80152f8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152d4:	7812      	ldrb	r2, [r2, #0]
 80152d6:	b2d2      	uxtb	r2, r2
 80152d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80152de:	1c5a      	adds	r2, r3, #1
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80152ea:	b29b      	uxth	r3, r3
 80152ec:	3b01      	subs	r3, #1
 80152ee:	b29a      	uxth	r2, r3
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80152f6:	e023      	b.n	8015340 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80152f8:	f7f4 f93c 	bl	8009574 <HAL_GetTick>
 80152fc:	4602      	mov	r2, r0
 80152fe:	697b      	ldr	r3, [r7, #20]
 8015300:	1ad3      	subs	r3, r2, r3
 8015302:	683a      	ldr	r2, [r7, #0]
 8015304:	429a      	cmp	r2, r3
 8015306:	d803      	bhi.n	8015310 <HAL_SPI_Receive+0x478>
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801530e:	d102      	bne.n	8015316 <HAL_SPI_Receive+0x47e>
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d114      	bne.n	8015340 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015316:	68f8      	ldr	r0, [r7, #12]
 8015318:	f000 ff24 	bl	8016164 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015322:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2201      	movs	r2, #1
 8015330:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2200      	movs	r2, #0
 8015338:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801533c:	2303      	movs	r3, #3
 801533e:	e019      	b.n	8015374 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015346:	b29b      	uxth	r3, r3
 8015348:	2b00      	cmp	r3, #0
 801534a:	f47f af41 	bne.w	80151d0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801534e:	68f8      	ldr	r0, [r7, #12]
 8015350:	f000 ff08 	bl	8016164 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2201      	movs	r2, #1
 8015358:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	2200      	movs	r2, #0
 8015360:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801536a:	2b00      	cmp	r3, #0
 801536c:	d001      	beq.n	8015372 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 801536e:	2301      	movs	r3, #1
 8015370:	e000      	b.n	8015374 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8015372:	2300      	movs	r3, #0
  }
}
 8015374:	4618      	mov	r0, r3
 8015376:	3720      	adds	r7, #32
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}

0801537c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b08e      	sub	sp, #56	@ 0x38
 8015380:	af02      	add	r7, sp, #8
 8015382:	60f8      	str	r0, [r7, #12]
 8015384:	60b9      	str	r1, [r7, #8]
 8015386:	607a      	str	r2, [r7, #4]
 8015388:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	3320      	adds	r3, #32
 8015390:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	3330      	adds	r3, #48	@ 0x30
 8015398:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801539e:	095b      	lsrs	r3, r3, #5
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	3301      	adds	r3, #1
 80153a4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80153a6:	f7f4 f8e5 	bl	8009574 <HAL_GetTick>
 80153aa:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80153ac:	887b      	ldrh	r3, [r7, #2]
 80153ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80153b0:	887b      	ldrh	r3, [r7, #2]
 80153b2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	2b01      	cmp	r3, #1
 80153be:	d001      	beq.n	80153c4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80153c0:	2302      	movs	r3, #2
 80153c2:	e310      	b.n	80159e6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80153c4:	68bb      	ldr	r3, [r7, #8]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d005      	beq.n	80153d6 <HAL_SPI_TransmitReceive+0x5a>
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d002      	beq.n	80153d6 <HAL_SPI_TransmitReceive+0x5a>
 80153d0:	887b      	ldrh	r3, [r7, #2]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d101      	bne.n	80153da <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80153d6:	2301      	movs	r3, #1
 80153d8:	e305      	b.n	80159e6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80153e0:	2b01      	cmp	r3, #1
 80153e2:	d101      	bne.n	80153e8 <HAL_SPI_TransmitReceive+0x6c>
 80153e4:	2302      	movs	r3, #2
 80153e6:	e2fe      	b.n	80159e6 <HAL_SPI_TransmitReceive+0x66a>
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2201      	movs	r2, #1
 80153ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	2205      	movs	r2, #5
 80153f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2200      	movs	r2, #0
 80153fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	687a      	ldr	r2, [r7, #4]
 8015404:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	887a      	ldrh	r2, [r7, #2]
 801540a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	887a      	ldrh	r2, [r7, #2]
 8015412:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	68ba      	ldr	r2, [r7, #8]
 801541a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	887a      	ldrh	r2, [r7, #2]
 8015420:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	887a      	ldrh	r2, [r7, #2]
 8015428:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	2200      	movs	r2, #0
 8015430:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	2200      	movs	r2, #0
 8015436:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	68da      	ldr	r2, [r3, #12]
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8015446:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	4a70      	ldr	r2, [pc, #448]	@ (8015610 <HAL_SPI_TransmitReceive+0x294>)
 801544e:	4293      	cmp	r3, r2
 8015450:	d009      	beq.n	8015466 <HAL_SPI_TransmitReceive+0xea>
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	4a6f      	ldr	r2, [pc, #444]	@ (8015614 <HAL_SPI_TransmitReceive+0x298>)
 8015458:	4293      	cmp	r3, r2
 801545a:	d004      	beq.n	8015466 <HAL_SPI_TransmitReceive+0xea>
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	4a6d      	ldr	r2, [pc, #436]	@ (8015618 <HAL_SPI_TransmitReceive+0x29c>)
 8015462:	4293      	cmp	r3, r2
 8015464:	d102      	bne.n	801546c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8015466:	2310      	movs	r3, #16
 8015468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801546a:	e001      	b.n	8015470 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 801546c:	2308      	movs	r3, #8
 801546e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	685a      	ldr	r2, [r3, #4]
 8015476:	4b69      	ldr	r3, [pc, #420]	@ (801561c <HAL_SPI_TransmitReceive+0x2a0>)
 8015478:	4013      	ands	r3, r2
 801547a:	8879      	ldrh	r1, [r7, #2]
 801547c:	68fa      	ldr	r2, [r7, #12]
 801547e:	6812      	ldr	r2, [r2, #0]
 8015480:	430b      	orrs	r3, r1
 8015482:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	681a      	ldr	r2, [r3, #0]
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	f042 0201 	orr.w	r2, r2, #1
 8015492:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	685b      	ldr	r3, [r3, #4]
 8015498:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801549c:	d107      	bne.n	80154ae <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80154ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	68db      	ldr	r3, [r3, #12]
 80154b2:	2b0f      	cmp	r3, #15
 80154b4:	f240 80a2 	bls.w	80155fc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80154b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ba:	089b      	lsrs	r3, r3, #2
 80154bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80154be:	e094      	b.n	80155ea <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	695b      	ldr	r3, [r3, #20]
 80154c6:	f003 0302 	and.w	r3, r3, #2
 80154ca:	2b02      	cmp	r3, #2
 80154cc:	d120      	bne.n	8015510 <HAL_SPI_TransmitReceive+0x194>
 80154ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d01d      	beq.n	8015510 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80154d4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80154d6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80154d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154da:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80154dc:	429a      	cmp	r2, r3
 80154de:	d217      	bcs.n	8015510 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	6812      	ldr	r2, [r2, #0]
 80154ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80154f0:	1d1a      	adds	r2, r3, #4
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80154fc:	b29b      	uxth	r3, r3
 80154fe:	3b01      	subs	r3, #1
 8015500:	b29a      	uxth	r2, r3
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801550e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	695b      	ldr	r3, [r3, #20]
 8015516:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015518:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801551a:	2b00      	cmp	r3, #0
 801551c:	d065      	beq.n	80155ea <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	695b      	ldr	r3, [r3, #20]
 8015524:	f003 0301 	and.w	r3, r3, #1
 8015528:	2b01      	cmp	r3, #1
 801552a:	d118      	bne.n	801555e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	681a      	ldr	r2, [r3, #0]
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015534:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015536:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801553c:	1d1a      	adds	r2, r3, #4
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015548:	b29b      	uxth	r3, r3
 801554a:	3b01      	subs	r3, #1
 801554c:	b29a      	uxth	r2, r3
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801555a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801555c:	e045      	b.n	80155ea <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801555e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015560:	8bfb      	ldrh	r3, [r7, #30]
 8015562:	429a      	cmp	r2, r3
 8015564:	d21d      	bcs.n	80155a2 <HAL_SPI_TransmitReceive+0x226>
 8015566:	697b      	ldr	r3, [r7, #20]
 8015568:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801556c:	2b00      	cmp	r3, #0
 801556e:	d018      	beq.n	80155a2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	681a      	ldr	r2, [r3, #0]
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015578:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801557a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015580:	1d1a      	adds	r2, r3, #4
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801558c:	b29b      	uxth	r3, r3
 801558e:	3b01      	subs	r3, #1
 8015590:	b29a      	uxth	r2, r3
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801559e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80155a0:	e023      	b.n	80155ea <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80155a2:	f7f3 ffe7 	bl	8009574 <HAL_GetTick>
 80155a6:	4602      	mov	r2, r0
 80155a8:	69bb      	ldr	r3, [r7, #24]
 80155aa:	1ad3      	subs	r3, r2, r3
 80155ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80155ae:	429a      	cmp	r2, r3
 80155b0:	d803      	bhi.n	80155ba <HAL_SPI_TransmitReceive+0x23e>
 80155b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155b8:	d102      	bne.n	80155c0 <HAL_SPI_TransmitReceive+0x244>
 80155ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d114      	bne.n	80155ea <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80155c0:	68f8      	ldr	r0, [r7, #12]
 80155c2:	f000 fdcf 	bl	8016164 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80155cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	2201      	movs	r2, #1
 80155da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	2200      	movs	r2, #0
 80155e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80155e6:	2303      	movs	r3, #3
 80155e8:	e1fd      	b.n	80159e6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80155ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	f47f af67 	bne.w	80154c0 <HAL_SPI_TransmitReceive+0x144>
 80155f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	f47f af63 	bne.w	80154c0 <HAL_SPI_TransmitReceive+0x144>
 80155fa:	e1ce      	b.n	801599a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	2b07      	cmp	r3, #7
 8015602:	f240 81c2 	bls.w	801598a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8015606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015608:	085b      	lsrs	r3, r3, #1
 801560a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801560c:	e0c9      	b.n	80157a2 <HAL_SPI_TransmitReceive+0x426>
 801560e:	bf00      	nop
 8015610:	40013000 	.word	0x40013000
 8015614:	40003800 	.word	0x40003800
 8015618:	40003c00 	.word	0x40003c00
 801561c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	695b      	ldr	r3, [r3, #20]
 8015626:	f003 0302 	and.w	r3, r3, #2
 801562a:	2b02      	cmp	r3, #2
 801562c:	d11f      	bne.n	801566e <HAL_SPI_TransmitReceive+0x2f2>
 801562e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015630:	2b00      	cmp	r3, #0
 8015632:	d01c      	beq.n	801566e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015634:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015636:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801563a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801563c:	429a      	cmp	r2, r3
 801563e:	d216      	bcs.n	801566e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015644:	881a      	ldrh	r2, [r3, #0]
 8015646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015648:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801564e:	1c9a      	adds	r2, r3, #2
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801565a:	b29b      	uxth	r3, r3
 801565c:	3b01      	subs	r3, #1
 801565e:	b29a      	uxth	r2, r3
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801566c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	695b      	ldr	r3, [r3, #20]
 8015674:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015676:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015678:	2b00      	cmp	r3, #0
 801567a:	f000 8092 	beq.w	80157a2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	695b      	ldr	r3, [r3, #20]
 8015684:	f003 0301 	and.w	r3, r3, #1
 8015688:	2b01      	cmp	r3, #1
 801568a:	d118      	bne.n	80156be <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015690:	6a3a      	ldr	r2, [r7, #32]
 8015692:	8812      	ldrh	r2, [r2, #0]
 8015694:	b292      	uxth	r2, r2
 8015696:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801569c:	1c9a      	adds	r2, r3, #2
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	3b01      	subs	r3, #1
 80156ac:	b29a      	uxth	r2, r3
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80156ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 80156bc:	e071      	b.n	80157a2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80156be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80156c0:	8bfb      	ldrh	r3, [r7, #30]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d228      	bcs.n	8015718 <HAL_SPI_TransmitReceive+0x39c>
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d023      	beq.n	8015718 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156d4:	6a3a      	ldr	r2, [r7, #32]
 80156d6:	8812      	ldrh	r2, [r2, #0]
 80156d8:	b292      	uxth	r2, r2
 80156da:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156e0:	1c9a      	adds	r2, r3, #2
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156ea:	6a3a      	ldr	r2, [r7, #32]
 80156ec:	8812      	ldrh	r2, [r2, #0]
 80156ee:	b292      	uxth	r2, r2
 80156f0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156f6:	1c9a      	adds	r2, r3, #2
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015702:	b29b      	uxth	r3, r3
 8015704:	3b02      	subs	r3, #2
 8015706:	b29a      	uxth	r2, r3
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015714:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015716:	e044      	b.n	80157a2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015718:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801571a:	2b01      	cmp	r3, #1
 801571c:	d11d      	bne.n	801575a <HAL_SPI_TransmitReceive+0x3de>
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015724:	2b00      	cmp	r3, #0
 8015726:	d018      	beq.n	801575a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801572c:	6a3a      	ldr	r2, [r7, #32]
 801572e:	8812      	ldrh	r2, [r2, #0]
 8015730:	b292      	uxth	r2, r2
 8015732:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015738:	1c9a      	adds	r2, r3, #2
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015744:	b29b      	uxth	r3, r3
 8015746:	3b01      	subs	r3, #1
 8015748:	b29a      	uxth	r2, r3
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015756:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015758:	e023      	b.n	80157a2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801575a:	f7f3 ff0b 	bl	8009574 <HAL_GetTick>
 801575e:	4602      	mov	r2, r0
 8015760:	69bb      	ldr	r3, [r7, #24]
 8015762:	1ad3      	subs	r3, r2, r3
 8015764:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015766:	429a      	cmp	r2, r3
 8015768:	d803      	bhi.n	8015772 <HAL_SPI_TransmitReceive+0x3f6>
 801576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015770:	d102      	bne.n	8015778 <HAL_SPI_TransmitReceive+0x3fc>
 8015772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015774:	2b00      	cmp	r3, #0
 8015776:	d114      	bne.n	80157a2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015778:	68f8      	ldr	r0, [r7, #12]
 801577a:	f000 fcf3 	bl	8016164 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015784:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	2201      	movs	r2, #1
 8015792:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	2200      	movs	r2, #0
 801579a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 801579e:	2303      	movs	r3, #3
 80157a0:	e121      	b.n	80159e6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80157a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	f47f af3b 	bne.w	8015620 <HAL_SPI_TransmitReceive+0x2a4>
 80157aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	f47f af37 	bne.w	8015620 <HAL_SPI_TransmitReceive+0x2a4>
 80157b2:	e0f2      	b.n	801599a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	695b      	ldr	r3, [r3, #20]
 80157ba:	f003 0302 	and.w	r3, r3, #2
 80157be:	2b02      	cmp	r3, #2
 80157c0:	d121      	bne.n	8015806 <HAL_SPI_TransmitReceive+0x48a>
 80157c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d01e      	beq.n	8015806 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80157c8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80157ca:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80157cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157ce:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d218      	bcs.n	8015806 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	3320      	adds	r3, #32
 80157de:	7812      	ldrb	r2, [r2, #0]
 80157e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80157e6:	1c5a      	adds	r2, r3, #1
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80157f2:	b29b      	uxth	r3, r3
 80157f4:	3b01      	subs	r3, #1
 80157f6:	b29a      	uxth	r2, r3
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015804:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	695b      	ldr	r3, [r3, #20]
 801580c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 801580e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015810:	2b00      	cmp	r3, #0
 8015812:	f000 80ba 	beq.w	801598a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	695b      	ldr	r3, [r3, #20]
 801581c:	f003 0301 	and.w	r3, r3, #1
 8015820:	2b01      	cmp	r3, #1
 8015822:	d11b      	bne.n	801585c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015830:	7812      	ldrb	r2, [r2, #0]
 8015832:	b2d2      	uxtb	r2, r2
 8015834:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801583a:	1c5a      	adds	r2, r3, #1
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015846:	b29b      	uxth	r3, r3
 8015848:	3b01      	subs	r3, #1
 801584a:	b29a      	uxth	r2, r3
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015858:	853b      	strh	r3, [r7, #40]	@ 0x28
 801585a:	e096      	b.n	801598a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801585c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801585e:	8bfb      	ldrh	r3, [r7, #30]
 8015860:	429a      	cmp	r2, r3
 8015862:	d24a      	bcs.n	80158fa <HAL_SPI_TransmitReceive+0x57e>
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801586a:	2b00      	cmp	r3, #0
 801586c:	d045      	beq.n	80158fa <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801587a:	7812      	ldrb	r2, [r2, #0]
 801587c:	b2d2      	uxtb	r2, r2
 801587e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015884:	1c5a      	adds	r2, r3, #1
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015896:	7812      	ldrb	r2, [r2, #0]
 8015898:	b2d2      	uxtb	r2, r2
 801589a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158a0:	1c5a      	adds	r2, r3, #1
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158b2:	7812      	ldrb	r2, [r2, #0]
 80158b4:	b2d2      	uxtb	r2, r2
 80158b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158bc:	1c5a      	adds	r2, r3, #1
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158ce:	7812      	ldrb	r2, [r2, #0]
 80158d0:	b2d2      	uxtb	r2, r2
 80158d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158d8:	1c5a      	adds	r2, r3, #1
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158e4:	b29b      	uxth	r3, r3
 80158e6:	3b04      	subs	r3, #4
 80158e8:	b29a      	uxth	r2, r3
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80158f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80158f8:	e047      	b.n	801598a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80158fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80158fc:	2b03      	cmp	r3, #3
 80158fe:	d820      	bhi.n	8015942 <HAL_SPI_TransmitReceive+0x5c6>
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8015906:	2b00      	cmp	r3, #0
 8015908:	d01b      	beq.n	8015942 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015916:	7812      	ldrb	r2, [r2, #0]
 8015918:	b2d2      	uxtb	r2, r2
 801591a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015920:	1c5a      	adds	r2, r3, #1
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801592c:	b29b      	uxth	r3, r3
 801592e:	3b01      	subs	r3, #1
 8015930:	b29a      	uxth	r2, r3
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801593e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015940:	e023      	b.n	801598a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015942:	f7f3 fe17 	bl	8009574 <HAL_GetTick>
 8015946:	4602      	mov	r2, r0
 8015948:	69bb      	ldr	r3, [r7, #24]
 801594a:	1ad3      	subs	r3, r2, r3
 801594c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801594e:	429a      	cmp	r2, r3
 8015950:	d803      	bhi.n	801595a <HAL_SPI_TransmitReceive+0x5de>
 8015952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015958:	d102      	bne.n	8015960 <HAL_SPI_TransmitReceive+0x5e4>
 801595a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801595c:	2b00      	cmp	r3, #0
 801595e:	d114      	bne.n	801598a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015960:	68f8      	ldr	r0, [r7, #12]
 8015962:	f000 fbff 	bl	8016164 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801596c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	2201      	movs	r2, #1
 801597a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	2200      	movs	r2, #0
 8015982:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8015986:	2303      	movs	r3, #3
 8015988:	e02d      	b.n	80159e6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801598a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801598c:	2b00      	cmp	r3, #0
 801598e:	f47f af11 	bne.w	80157b4 <HAL_SPI_TransmitReceive+0x438>
 8015992:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015994:	2b00      	cmp	r3, #0
 8015996:	f47f af0d 	bne.w	80157b4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 801599a:	69bb      	ldr	r3, [r7, #24]
 801599c:	9300      	str	r3, [sp, #0]
 801599e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159a0:	2200      	movs	r2, #0
 80159a2:	2108      	movs	r1, #8
 80159a4:	68f8      	ldr	r0, [r7, #12]
 80159a6:	f000 fc7d 	bl	80162a4 <SPI_WaitOnFlagUntilTimeout>
 80159aa:	4603      	mov	r3, r0
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d007      	beq.n	80159c0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159b6:	f043 0220 	orr.w	r2, r3, #32
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80159c0:	68f8      	ldr	r0, [r7, #12]
 80159c2:	f000 fbcf 	bl	8016164 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	2201      	movs	r2, #1
 80159ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	2200      	movs	r2, #0
 80159d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d001      	beq.n	80159e4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80159e0:	2301      	movs	r3, #1
 80159e2:	e000      	b.n	80159e6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80159e4:	2300      	movs	r3, #0
  }
}
 80159e6:	4618      	mov	r0, r3
 80159e8:	3730      	adds	r7, #48	@ 0x30
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bd80      	pop	{r7, pc}
 80159ee:	bf00      	nop

080159f0 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b084      	sub	sp, #16
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	60f8      	str	r0, [r7, #12]
 80159f8:	60b9      	str	r1, [r7, #8]
 80159fa:	4613      	mov	r3, r2
 80159fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015a04:	b2db      	uxtb	r3, r3
 8015a06:	2b01      	cmp	r3, #1
 8015a08:	d001      	beq.n	8015a0e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8015a0a:	2302      	movs	r3, #2
 8015a0c:	e126      	b.n	8015c5c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8015a0e:	68bb      	ldr	r3, [r7, #8]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d002      	beq.n	8015a1a <HAL_SPI_Transmit_DMA+0x2a>
 8015a14:	88fb      	ldrh	r3, [r7, #6]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d101      	bne.n	8015a1e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	e11e      	b.n	8015c5c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015a24:	2b01      	cmp	r3, #1
 8015a26:	d101      	bne.n	8015a2c <HAL_SPI_Transmit_DMA+0x3c>
 8015a28:	2302      	movs	r3, #2
 8015a2a:	e117      	b.n	8015c5c <HAL_SPI_Transmit_DMA+0x26c>
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	2201      	movs	r2, #1
 8015a30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	2203      	movs	r2, #3
 8015a38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	2200      	movs	r2, #0
 8015a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	68ba      	ldr	r2, [r7, #8]
 8015a48:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	88fa      	ldrh	r2, [r7, #6]
 8015a4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	88fa      	ldrh	r2, [r7, #6]
 8015a56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	2200      	movs	r2, #0
 8015a64:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	2200      	movs	r2, #0
 8015a6a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8015a6c:	68fb      	ldr	r3, [r7, #12]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	2200      	movs	r2, #0
 8015a78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	689b      	ldr	r3, [r3, #8]
 8015a80:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015a84:	d108      	bne.n	8015a98 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	681a      	ldr	r2, [r3, #0]
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015a94:	601a      	str	r2, [r3, #0]
 8015a96:	e009      	b.n	8015aac <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	68db      	ldr	r3, [r3, #12]
 8015a9e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015aaa:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	68db      	ldr	r3, [r3, #12]
 8015ab0:	2b0f      	cmp	r3, #15
 8015ab2:	d905      	bls.n	8015ac0 <HAL_SPI_Transmit_DMA+0xd0>
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ab8:	699b      	ldr	r3, [r3, #24]
 8015aba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015abe:	d10f      	bne.n	8015ae0 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015ac4:	2b07      	cmp	r3, #7
 8015ac6:	d911      	bls.n	8015aec <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015acc:	699b      	ldr	r3, [r3, #24]
 8015ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015ad2:	d00b      	beq.n	8015aec <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ad8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015ade:	d005      	beq.n	8015aec <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8015ae8:	2301      	movs	r3, #1
 8015aea:	e0b7      	b.n	8015c5c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	68db      	ldr	r3, [r3, #12]
 8015af0:	2b07      	cmp	r3, #7
 8015af2:	d820      	bhi.n	8015b36 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015af8:	699b      	ldr	r3, [r3, #24]
 8015afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015afe:	d109      	bne.n	8015b14 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b06:	b29b      	uxth	r3, r3
 8015b08:	3301      	adds	r3, #1
 8015b0a:	105b      	asrs	r3, r3, #1
 8015b0c:	b29a      	uxth	r2, r3
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b18:	699b      	ldr	r3, [r3, #24]
 8015b1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015b1e:	d11e      	bne.n	8015b5e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b26:	b29b      	uxth	r3, r3
 8015b28:	3303      	adds	r3, #3
 8015b2a:	109b      	asrs	r3, r3, #2
 8015b2c:	b29a      	uxth	r2, r3
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015b34:	e013      	b.n	8015b5e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	68db      	ldr	r3, [r3, #12]
 8015b3a:	2b0f      	cmp	r3, #15
 8015b3c:	d80f      	bhi.n	8015b5e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b42:	699b      	ldr	r3, [r3, #24]
 8015b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015b48:	d109      	bne.n	8015b5e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015b50:	b29b      	uxth	r3, r3
 8015b52:	3301      	adds	r3, #1
 8015b54:	105b      	asrs	r3, r3, #1
 8015b56:	b29a      	uxth	r2, r3
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b62:	4a40      	ldr	r2, [pc, #256]	@ (8015c64 <HAL_SPI_Transmit_DMA+0x274>)
 8015b64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b6a:	4a3f      	ldr	r2, [pc, #252]	@ (8015c68 <HAL_SPI_Transmit_DMA+0x278>)
 8015b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b72:	4a3e      	ldr	r2, [pc, #248]	@ (8015c6c <HAL_SPI_Transmit_DMA+0x27c>)
 8015b74:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	689a      	ldr	r2, [r3, #8]
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015b8c:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015b96:	4619      	mov	r1, r3
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	3320      	adds	r3, #32
 8015b9e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015ba6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015ba8:	f7f6 f972 	bl	800be90 <HAL_DMA_Start_IT>
 8015bac:	4603      	mov	r3, r0
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d011      	beq.n	8015bd6 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015bb8:	f043 0210 	orr.w	r2, r3, #16
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	2201      	movs	r2, #1
 8015bc6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	2200      	movs	r2, #0
 8015bce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	e042      	b.n	8015c5c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015bda:	69db      	ldr	r3, [r3, #28]
 8015bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015be0:	d108      	bne.n	8015bf4 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	6859      	ldr	r1, [r3, #4]
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	681a      	ldr	r2, [r3, #0]
 8015bec:	4b20      	ldr	r3, [pc, #128]	@ (8015c70 <HAL_SPI_Transmit_DMA+0x280>)
 8015bee:	400b      	ands	r3, r1
 8015bf0:	6053      	str	r3, [r2, #4]
 8015bf2:	e009      	b.n	8015c08 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	685a      	ldr	r2, [r3, #4]
 8015bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8015c70 <HAL_SPI_Transmit_DMA+0x280>)
 8015bfc:	4013      	ands	r3, r2
 8015bfe:	88f9      	ldrh	r1, [r7, #6]
 8015c00:	68fa      	ldr	r2, [r7, #12]
 8015c02:	6812      	ldr	r2, [r2, #0]
 8015c04:	430b      	orrs	r3, r1
 8015c06:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	689a      	ldr	r2, [r3, #8]
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015c16:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	691a      	ldr	r2, [r3, #16]
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8015c26:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	681a      	ldr	r2, [r3, #0]
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	f042 0201 	orr.w	r2, r2, #1
 8015c36:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015c40:	d107      	bne.n	8015c52 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	681a      	ldr	r2, [r3, #0]
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015c50:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	2200      	movs	r2, #0
 8015c56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015c5a:	2300      	movs	r3, #0
}
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	3710      	adds	r7, #16
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bd80      	pop	{r7, pc}
 8015c64:	080160cf 	.word	0x080160cf
 8015c68:	08016089 	.word	0x08016089
 8015c6c:	080160eb 	.word	0x080160eb
 8015c70:	ffff0000 	.word	0xffff0000

08015c74 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b08a      	sub	sp, #40	@ 0x28
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	691b      	ldr	r3, [r3, #16]
 8015c82:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	695b      	ldr	r3, [r3, #20]
 8015c8a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015c8c:	6a3a      	ldr	r2, [r7, #32]
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	4013      	ands	r3, r2
 8015c92:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	689b      	ldr	r3, [r3, #8]
 8015c9a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015ca6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	3330      	adds	r3, #48	@ 0x30
 8015cae:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015cb0:	69fb      	ldr	r3, [r7, #28]
 8015cb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d010      	beq.n	8015cdc <HAL_SPI_IRQHandler+0x68>
 8015cba:	6a3b      	ldr	r3, [r7, #32]
 8015cbc:	f003 0308 	and.w	r3, r3, #8
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d00b      	beq.n	8015cdc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	699a      	ldr	r2, [r3, #24]
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015cd2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f000 f9cd 	bl	8016074 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8015cda:	e192      	b.n	8016002 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015cdc:	69bb      	ldr	r3, [r7, #24]
 8015cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d113      	bne.n	8015d0e <HAL_SPI_IRQHandler+0x9a>
 8015ce6:	69bb      	ldr	r3, [r7, #24]
 8015ce8:	f003 0320 	and.w	r3, r3, #32
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d10e      	bne.n	8015d0e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8015cf0:	69bb      	ldr	r3, [r7, #24]
 8015cf2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d009      	beq.n	8015d0e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	4798      	blx	r3
    hspi->RxISR(hspi);
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	4798      	blx	r3
    handled = 1UL;
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015d0e:	69bb      	ldr	r3, [r7, #24]
 8015d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d10f      	bne.n	8015d38 <HAL_SPI_IRQHandler+0xc4>
 8015d18:	69bb      	ldr	r3, [r7, #24]
 8015d1a:	f003 0301 	and.w	r3, r3, #1
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d00a      	beq.n	8015d38 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015d22:	69bb      	ldr	r3, [r7, #24]
 8015d24:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d105      	bne.n	8015d38 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d30:	6878      	ldr	r0, [r7, #4]
 8015d32:	4798      	blx	r3
    handled = 1UL;
 8015d34:	2301      	movs	r3, #1
 8015d36:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015d38:	69bb      	ldr	r3, [r7, #24]
 8015d3a:	f003 0320 	and.w	r3, r3, #32
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d10f      	bne.n	8015d62 <HAL_SPI_IRQHandler+0xee>
 8015d42:	69bb      	ldr	r3, [r7, #24]
 8015d44:	f003 0302 	and.w	r3, r3, #2
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d00a      	beq.n	8015d62 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015d4c:	69bb      	ldr	r3, [r7, #24]
 8015d4e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d105      	bne.n	8015d62 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d5a:	6878      	ldr	r0, [r7, #4]
 8015d5c:	4798      	blx	r3
    handled = 1UL;
 8015d5e:	2301      	movs	r3, #1
 8015d60:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8015d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	f040 8147 	bne.w	8015ff8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015d6a:	69bb      	ldr	r3, [r7, #24]
 8015d6c:	f003 0308 	and.w	r3, r3, #8
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	f000 808b 	beq.w	8015e8c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	699a      	ldr	r2, [r3, #24]
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	f042 0208 	orr.w	r2, r2, #8
 8015d84:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	699a      	ldr	r2, [r3, #24]
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	f042 0210 	orr.w	r2, r2, #16
 8015d94:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	699a      	ldr	r2, [r3, #24]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015da4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	691a      	ldr	r2, [r3, #16]
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	f022 0208 	bic.w	r2, r2, #8
 8015db4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	689b      	ldr	r3, [r3, #8]
 8015dbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d13d      	bne.n	8015e40 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015dc4:	e036      	b.n	8015e34 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	68db      	ldr	r3, [r3, #12]
 8015dca:	2b0f      	cmp	r3, #15
 8015dcc:	d90b      	bls.n	8015de6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	681a      	ldr	r2, [r3, #0]
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015dd6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015dd8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015dde:	1d1a      	adds	r2, r3, #4
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	665a      	str	r2, [r3, #100]	@ 0x64
 8015de4:	e01d      	b.n	8015e22 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	68db      	ldr	r3, [r3, #12]
 8015dea:	2b07      	cmp	r3, #7
 8015dec:	d90b      	bls.n	8015e06 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015df2:	68fa      	ldr	r2, [r7, #12]
 8015df4:	8812      	ldrh	r2, [r2, #0]
 8015df6:	b292      	uxth	r2, r2
 8015df8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015dfe:	1c9a      	adds	r2, r3, #2
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	665a      	str	r2, [r3, #100]	@ 0x64
 8015e04:	e00d      	b.n	8015e22 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015e12:	7812      	ldrb	r2, [r2, #0]
 8015e14:	b2d2      	uxtb	r2, r2
 8015e16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015e1c:	1c5a      	adds	r2, r3, #1
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015e28:	b29b      	uxth	r3, r3
 8015e2a:	3b01      	subs	r3, #1
 8015e2c:	b29a      	uxth	r2, r3
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015e3a:	b29b      	uxth	r3, r3
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d1c2      	bne.n	8015dc6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	f000 f98f 	bl	8016164 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	2201      	movs	r2, #1
 8015e4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d003      	beq.n	8015e60 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015e58:	6878      	ldr	r0, [r7, #4]
 8015e5a:	f000 f901 	bl	8016060 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015e5e:	e0d0      	b.n	8016002 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015e60:	7cfb      	ldrb	r3, [r7, #19]
 8015e62:	2b05      	cmp	r3, #5
 8015e64:	d103      	bne.n	8015e6e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f000 f8e6 	bl	8016038 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015e6c:	e0c6      	b.n	8015ffc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015e6e:	7cfb      	ldrb	r3, [r7, #19]
 8015e70:	2b04      	cmp	r3, #4
 8015e72:	d103      	bne.n	8015e7c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f000 f8d5 	bl	8016024 <HAL_SPI_RxCpltCallback>
    return;
 8015e7a:	e0bf      	b.n	8015ffc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015e7c:	7cfb      	ldrb	r3, [r7, #19]
 8015e7e:	2b03      	cmp	r3, #3
 8015e80:	f040 80bc 	bne.w	8015ffc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f000 f8c3 	bl	8016010 <HAL_SPI_TxCpltCallback>
    return;
 8015e8a:	e0b7      	b.n	8015ffc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015e8c:	69bb      	ldr	r3, [r7, #24]
 8015e8e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	f000 80b5 	beq.w	8016002 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015e98:	69bb      	ldr	r3, [r7, #24]
 8015e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d00f      	beq.n	8015ec2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ea8:	f043 0204 	orr.w	r2, r3, #4
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	699a      	ldr	r2, [r3, #24]
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015ec0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d00f      	beq.n	8015eec <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015ed2:	f043 0201 	orr.w	r2, r3, #1
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	699a      	ldr	r2, [r3, #24]
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015eea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8015eec:	69bb      	ldr	r3, [r7, #24]
 8015eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d00f      	beq.n	8015f16 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015efc:	f043 0208 	orr.w	r2, r3, #8
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	699a      	ldr	r2, [r3, #24]
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015f14:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015f16:	69bb      	ldr	r3, [r7, #24]
 8015f18:	f003 0320 	and.w	r3, r3, #32
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d00f      	beq.n	8015f40 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f26:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	699a      	ldr	r2, [r3, #24]
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	f042 0220 	orr.w	r2, r2, #32
 8015f3e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d05a      	beq.n	8016000 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	681a      	ldr	r2, [r3, #0]
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	f022 0201 	bic.w	r2, r2, #1
 8015f58:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	6919      	ldr	r1, [r3, #16]
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681a      	ldr	r2, [r3, #0]
 8015f64:	4b28      	ldr	r3, [pc, #160]	@ (8016008 <HAL_SPI_IRQHandler+0x394>)
 8015f66:	400b      	ands	r3, r1
 8015f68:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015f6a:	697b      	ldr	r3, [r7, #20]
 8015f6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015f70:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015f74:	d138      	bne.n	8015fe8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	689a      	ldr	r2, [r3, #8]
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015f84:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d013      	beq.n	8015fb6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f92:	4a1e      	ldr	r2, [pc, #120]	@ (801600c <HAL_SPI_IRQHandler+0x398>)
 8015f94:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f7f6 fd00 	bl	800c9a0 <HAL_DMA_Abort_IT>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d007      	beq.n	8015fb6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015fac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d020      	beq.n	8016000 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fc2:	4a12      	ldr	r2, [pc, #72]	@ (801600c <HAL_SPI_IRQHandler+0x398>)
 8015fc4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7f6 fce8 	bl	800c9a0 <HAL_DMA_Abort_IT>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d014      	beq.n	8016000 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015fdc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015fe6:	e00b      	b.n	8016000 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2201      	movs	r2, #1
 8015fec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f000 f835 	bl	8016060 <HAL_SPI_ErrorCallback>
    return;
 8015ff6:	e003      	b.n	8016000 <HAL_SPI_IRQHandler+0x38c>
    return;
 8015ff8:	bf00      	nop
 8015ffa:	e002      	b.n	8016002 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015ffc:	bf00      	nop
 8015ffe:	e000      	b.n	8016002 <HAL_SPI_IRQHandler+0x38e>
    return;
 8016000:	bf00      	nop
  }
}
 8016002:	3728      	adds	r7, #40	@ 0x28
 8016004:	46bd      	mov	sp, r7
 8016006:	bd80      	pop	{r7, pc}
 8016008:	fffffc94 	.word	0xfffffc94
 801600c:	08016131 	.word	0x08016131

08016010 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016010:	b480      	push	{r7}
 8016012:	b083      	sub	sp, #12
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8016018:	bf00      	nop
 801601a:	370c      	adds	r7, #12
 801601c:	46bd      	mov	sp, r7
 801601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016022:	4770      	bx	lr

08016024 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016024:	b480      	push	{r7}
 8016026:	b083      	sub	sp, #12
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801602c:	bf00      	nop
 801602e:	370c      	adds	r7, #12
 8016030:	46bd      	mov	sp, r7
 8016032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016036:	4770      	bx	lr

08016038 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016038:	b480      	push	{r7}
 801603a:	b083      	sub	sp, #12
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8016040:	bf00      	nop
 8016042:	370c      	adds	r7, #12
 8016044:	46bd      	mov	sp, r7
 8016046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604a:	4770      	bx	lr

0801604c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801604c:	b480      	push	{r7}
 801604e:	b083      	sub	sp, #12
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8016054:	bf00      	nop
 8016056:	370c      	adds	r7, #12
 8016058:	46bd      	mov	sp, r7
 801605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605e:	4770      	bx	lr

08016060 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016060:	b480      	push	{r7}
 8016062:	b083      	sub	sp, #12
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8016068:	bf00      	nop
 801606a:	370c      	adds	r7, #12
 801606c:	46bd      	mov	sp, r7
 801606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016072:	4770      	bx	lr

08016074 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016074:	b480      	push	{r7}
 8016076:	b083      	sub	sp, #12
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801607c:	bf00      	nop
 801607e:	370c      	adds	r7, #12
 8016080:	46bd      	mov	sp, r7
 8016082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016086:	4770      	bx	lr

08016088 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b084      	sub	sp, #16
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016094:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801609c:	b2db      	uxtb	r3, r3
 801609e:	2b07      	cmp	r3, #7
 80160a0:	d011      	beq.n	80160c6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80160a6:	69db      	ldr	r3, [r3, #28]
 80160a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80160ac:	d103      	bne.n	80160b6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80160ae:	68f8      	ldr	r0, [r7, #12]
 80160b0:	f7ff ffae 	bl	8016010 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80160b4:	e007      	b.n	80160c6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	691a      	ldr	r2, [r3, #16]
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	f042 0208 	orr.w	r2, r2, #8
 80160c4:	611a      	str	r2, [r3, #16]
}
 80160c6:	bf00      	nop
 80160c8:	3710      	adds	r7, #16
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}

080160ce <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80160ce:	b580      	push	{r7, lr}
 80160d0:	b084      	sub	sp, #16
 80160d2:	af00      	add	r7, sp, #0
 80160d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160da:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80160dc:	68f8      	ldr	r0, [r7, #12]
 80160de:	f7ff ffb5 	bl	801604c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80160e2:	bf00      	nop
 80160e4:	3710      	adds	r7, #16
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd80      	pop	{r7, pc}

080160ea <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80160ea:	b580      	push	{r7, lr}
 80160ec:	b084      	sub	sp, #16
 80160ee:	af00      	add	r7, sp, #0
 80160f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160f6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80160f8:	6878      	ldr	r0, [r7, #4]
 80160fa:	f7f7 fdcf 	bl	800dc9c <HAL_DMA_GetError>
 80160fe:	4603      	mov	r3, r0
 8016100:	2b02      	cmp	r3, #2
 8016102:	d011      	beq.n	8016128 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8016104:	68f8      	ldr	r0, [r7, #12]
 8016106:	f000 f82d 	bl	8016164 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016110:	f043 0210 	orr.w	r2, r3, #16
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	2201      	movs	r2, #1
 801611e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8016122:	68f8      	ldr	r0, [r7, #12]
 8016124:	f7ff ff9c 	bl	8016060 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8016128:	bf00      	nop
 801612a:	3710      	adds	r7, #16
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}

08016130 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b084      	sub	sp, #16
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801613c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	2200      	movs	r2, #0
 8016142:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	2200      	movs	r2, #0
 801614a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	2201      	movs	r2, #1
 8016152:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8016156:	68f8      	ldr	r0, [r7, #12]
 8016158:	f7ff ff82 	bl	8016060 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801615c:	bf00      	nop
 801615e:	3710      	adds	r7, #16
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}

08016164 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8016164:	b480      	push	{r7}
 8016166:	b085      	sub	sp, #20
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	695b      	ldr	r3, [r3, #20]
 8016172:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	699a      	ldr	r2, [r3, #24]
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	f042 0208 	orr.w	r2, r2, #8
 8016182:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	699a      	ldr	r2, [r3, #24]
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	f042 0210 	orr.w	r2, r2, #16
 8016192:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	681a      	ldr	r2, [r3, #0]
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	f022 0201 	bic.w	r2, r2, #1
 80161a2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	6919      	ldr	r1, [r3, #16]
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681a      	ldr	r2, [r3, #0]
 80161ae:	4b3c      	ldr	r3, [pc, #240]	@ (80162a0 <SPI_CloseTransfer+0x13c>)
 80161b0:	400b      	ands	r3, r1
 80161b2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	689a      	ldr	r2, [r3, #8]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80161c2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80161ca:	b2db      	uxtb	r3, r3
 80161cc:	2b04      	cmp	r3, #4
 80161ce:	d014      	beq.n	80161fa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	f003 0320 	and.w	r3, r3, #32
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d00f      	beq.n	80161fa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	699a      	ldr	r2, [r3, #24]
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	f042 0220 	orr.w	r2, r2, #32
 80161f8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016200:	b2db      	uxtb	r3, r3
 8016202:	2b03      	cmp	r3, #3
 8016204:	d014      	beq.n	8016230 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801620c:	2b00      	cmp	r3, #0
 801620e:	d00f      	beq.n	8016230 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016216:	f043 0204 	orr.w	r2, r3, #4
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	699a      	ldr	r2, [r3, #24]
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801622e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016236:	2b00      	cmp	r3, #0
 8016238:	d00f      	beq.n	801625a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016240:	f043 0201 	orr.w	r2, r3, #1
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	699a      	ldr	r2, [r3, #24]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016258:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016260:	2b00      	cmp	r3, #0
 8016262:	d00f      	beq.n	8016284 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801626a:	f043 0208 	orr.w	r2, r3, #8
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	699a      	ldr	r2, [r3, #24]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016282:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2200      	movs	r2, #0
 8016288:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2200      	movs	r2, #0
 8016290:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8016294:	bf00      	nop
 8016296:	3714      	adds	r7, #20
 8016298:	46bd      	mov	sp, r7
 801629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629e:	4770      	bx	lr
 80162a0:	fffffc90 	.word	0xfffffc90

080162a4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b084      	sub	sp, #16
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	60f8      	str	r0, [r7, #12]
 80162ac:	60b9      	str	r1, [r7, #8]
 80162ae:	603b      	str	r3, [r7, #0]
 80162b0:	4613      	mov	r3, r2
 80162b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80162b4:	e010      	b.n	80162d8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80162b6:	f7f3 f95d 	bl	8009574 <HAL_GetTick>
 80162ba:	4602      	mov	r2, r0
 80162bc:	69bb      	ldr	r3, [r7, #24]
 80162be:	1ad3      	subs	r3, r2, r3
 80162c0:	683a      	ldr	r2, [r7, #0]
 80162c2:	429a      	cmp	r2, r3
 80162c4:	d803      	bhi.n	80162ce <SPI_WaitOnFlagUntilTimeout+0x2a>
 80162c6:	683b      	ldr	r3, [r7, #0]
 80162c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162cc:	d102      	bne.n	80162d4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d101      	bne.n	80162d8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80162d4:	2303      	movs	r3, #3
 80162d6:	e00f      	b.n	80162f8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	695a      	ldr	r2, [r3, #20]
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	4013      	ands	r3, r2
 80162e2:	68ba      	ldr	r2, [r7, #8]
 80162e4:	429a      	cmp	r2, r3
 80162e6:	bf0c      	ite	eq
 80162e8:	2301      	moveq	r3, #1
 80162ea:	2300      	movne	r3, #0
 80162ec:	b2db      	uxtb	r3, r3
 80162ee:	461a      	mov	r2, r3
 80162f0:	79fb      	ldrb	r3, [r7, #7]
 80162f2:	429a      	cmp	r2, r3
 80162f4:	d0df      	beq.n	80162b6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80162f6:	2300      	movs	r3, #0
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3710      	adds	r7, #16
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd80      	pop	{r7, pc}

08016300 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8016300:	b480      	push	{r7}
 8016302:	b085      	sub	sp, #20
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801630c:	095b      	lsrs	r3, r3, #5
 801630e:	3301      	adds	r3, #1
 8016310:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	68db      	ldr	r3, [r3, #12]
 8016316:	3301      	adds	r3, #1
 8016318:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801631a:	68bb      	ldr	r3, [r7, #8]
 801631c:	3307      	adds	r3, #7
 801631e:	08db      	lsrs	r3, r3, #3
 8016320:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	68fa      	ldr	r2, [r7, #12]
 8016326:	fb02 f303 	mul.w	r3, r2, r3
}
 801632a:	4618      	mov	r0, r3
 801632c:	3714      	adds	r7, #20
 801632e:	46bd      	mov	sp, r7
 8016330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016334:	4770      	bx	lr

08016336 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016336:	b580      	push	{r7, lr}
 8016338:	b082      	sub	sp, #8
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d101      	bne.n	8016348 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016344:	2301      	movs	r3, #1
 8016346:	e049      	b.n	80163dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801634e:	b2db      	uxtb	r3, r3
 8016350:	2b00      	cmp	r3, #0
 8016352:	d106      	bne.n	8016362 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2200      	movs	r2, #0
 8016358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801635c:	6878      	ldr	r0, [r7, #4]
 801635e:	f7f2 ff13 	bl	8009188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2202      	movs	r2, #2
 8016366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681a      	ldr	r2, [r3, #0]
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	3304      	adds	r3, #4
 8016372:	4619      	mov	r1, r3
 8016374:	4610      	mov	r0, r2
 8016376:	f000 fedb 	bl	8017130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	2201      	movs	r2, #1
 801637e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2201      	movs	r2, #1
 8016386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2201      	movs	r2, #1
 801638e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2201      	movs	r2, #1
 8016396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2201      	movs	r2, #1
 801639e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2201      	movs	r2, #1
 80163a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2201      	movs	r2, #1
 80163ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2201      	movs	r2, #1
 80163b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	2201      	movs	r2, #1
 80163be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2201      	movs	r2, #1
 80163c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	2201      	movs	r2, #1
 80163ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	2201      	movs	r2, #1
 80163d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80163da:	2300      	movs	r3, #0
}
 80163dc:	4618      	mov	r0, r3
 80163de:	3708      	adds	r7, #8
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}

080163e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80163e4:	b480      	push	{r7}
 80163e6:	b085      	sub	sp, #20
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80163f2:	b2db      	uxtb	r3, r3
 80163f4:	2b01      	cmp	r3, #1
 80163f6:	d001      	beq.n	80163fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80163f8:	2301      	movs	r3, #1
 80163fa:	e056      	b.n	80164aa <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2202      	movs	r2, #2
 8016400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	4a2b      	ldr	r2, [pc, #172]	@ (80164b8 <HAL_TIM_Base_Start+0xd4>)
 801640a:	4293      	cmp	r3, r2
 801640c:	d02c      	beq.n	8016468 <HAL_TIM_Base_Start+0x84>
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016416:	d027      	beq.n	8016468 <HAL_TIM_Base_Start+0x84>
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	4a27      	ldr	r2, [pc, #156]	@ (80164bc <HAL_TIM_Base_Start+0xd8>)
 801641e:	4293      	cmp	r3, r2
 8016420:	d022      	beq.n	8016468 <HAL_TIM_Base_Start+0x84>
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	4a26      	ldr	r2, [pc, #152]	@ (80164c0 <HAL_TIM_Base_Start+0xdc>)
 8016428:	4293      	cmp	r3, r2
 801642a:	d01d      	beq.n	8016468 <HAL_TIM_Base_Start+0x84>
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	4a24      	ldr	r2, [pc, #144]	@ (80164c4 <HAL_TIM_Base_Start+0xe0>)
 8016432:	4293      	cmp	r3, r2
 8016434:	d018      	beq.n	8016468 <HAL_TIM_Base_Start+0x84>
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	4a23      	ldr	r2, [pc, #140]	@ (80164c8 <HAL_TIM_Base_Start+0xe4>)
 801643c:	4293      	cmp	r3, r2
 801643e:	d013      	beq.n	8016468 <HAL_TIM_Base_Start+0x84>
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	4a21      	ldr	r2, [pc, #132]	@ (80164cc <HAL_TIM_Base_Start+0xe8>)
 8016446:	4293      	cmp	r3, r2
 8016448:	d00e      	beq.n	8016468 <HAL_TIM_Base_Start+0x84>
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	4a20      	ldr	r2, [pc, #128]	@ (80164d0 <HAL_TIM_Base_Start+0xec>)
 8016450:	4293      	cmp	r3, r2
 8016452:	d009      	beq.n	8016468 <HAL_TIM_Base_Start+0x84>
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	4a1e      	ldr	r2, [pc, #120]	@ (80164d4 <HAL_TIM_Base_Start+0xf0>)
 801645a:	4293      	cmp	r3, r2
 801645c:	d004      	beq.n	8016468 <HAL_TIM_Base_Start+0x84>
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	4a1d      	ldr	r2, [pc, #116]	@ (80164d8 <HAL_TIM_Base_Start+0xf4>)
 8016464:	4293      	cmp	r3, r2
 8016466:	d115      	bne.n	8016494 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	689a      	ldr	r2, [r3, #8]
 801646e:	4b1b      	ldr	r3, [pc, #108]	@ (80164dc <HAL_TIM_Base_Start+0xf8>)
 8016470:	4013      	ands	r3, r2
 8016472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	2b06      	cmp	r3, #6
 8016478:	d015      	beq.n	80164a6 <HAL_TIM_Base_Start+0xc2>
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016480:	d011      	beq.n	80164a6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	681a      	ldr	r2, [r3, #0]
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	f042 0201 	orr.w	r2, r2, #1
 8016490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016492:	e008      	b.n	80164a6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	681a      	ldr	r2, [r3, #0]
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	f042 0201 	orr.w	r2, r2, #1
 80164a2:	601a      	str	r2, [r3, #0]
 80164a4:	e000      	b.n	80164a8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80164a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80164a8:	2300      	movs	r3, #0
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3714      	adds	r7, #20
 80164ae:	46bd      	mov	sp, r7
 80164b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b4:	4770      	bx	lr
 80164b6:	bf00      	nop
 80164b8:	40010000 	.word	0x40010000
 80164bc:	40000400 	.word	0x40000400
 80164c0:	40000800 	.word	0x40000800
 80164c4:	40000c00 	.word	0x40000c00
 80164c8:	40010400 	.word	0x40010400
 80164cc:	40001800 	.word	0x40001800
 80164d0:	40014000 	.word	0x40014000
 80164d4:	4000e000 	.word	0x4000e000
 80164d8:	4000e400 	.word	0x4000e400
 80164dc:	00010007 	.word	0x00010007

080164e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80164e0:	b480      	push	{r7}
 80164e2:	b085      	sub	sp, #20
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80164ee:	b2db      	uxtb	r3, r3
 80164f0:	2b01      	cmp	r3, #1
 80164f2:	d001      	beq.n	80164f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80164f4:	2301      	movs	r3, #1
 80164f6:	e05e      	b.n	80165b6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2202      	movs	r2, #2
 80164fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	68da      	ldr	r2, [r3, #12]
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	f042 0201 	orr.w	r2, r2, #1
 801650e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	4a2b      	ldr	r2, [pc, #172]	@ (80165c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8016516:	4293      	cmp	r3, r2
 8016518:	d02c      	beq.n	8016574 <HAL_TIM_Base_Start_IT+0x94>
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016522:	d027      	beq.n	8016574 <HAL_TIM_Base_Start_IT+0x94>
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	4a27      	ldr	r2, [pc, #156]	@ (80165c8 <HAL_TIM_Base_Start_IT+0xe8>)
 801652a:	4293      	cmp	r3, r2
 801652c:	d022      	beq.n	8016574 <HAL_TIM_Base_Start_IT+0x94>
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	4a26      	ldr	r2, [pc, #152]	@ (80165cc <HAL_TIM_Base_Start_IT+0xec>)
 8016534:	4293      	cmp	r3, r2
 8016536:	d01d      	beq.n	8016574 <HAL_TIM_Base_Start_IT+0x94>
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	4a24      	ldr	r2, [pc, #144]	@ (80165d0 <HAL_TIM_Base_Start_IT+0xf0>)
 801653e:	4293      	cmp	r3, r2
 8016540:	d018      	beq.n	8016574 <HAL_TIM_Base_Start_IT+0x94>
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	4a23      	ldr	r2, [pc, #140]	@ (80165d4 <HAL_TIM_Base_Start_IT+0xf4>)
 8016548:	4293      	cmp	r3, r2
 801654a:	d013      	beq.n	8016574 <HAL_TIM_Base_Start_IT+0x94>
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	4a21      	ldr	r2, [pc, #132]	@ (80165d8 <HAL_TIM_Base_Start_IT+0xf8>)
 8016552:	4293      	cmp	r3, r2
 8016554:	d00e      	beq.n	8016574 <HAL_TIM_Base_Start_IT+0x94>
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	4a20      	ldr	r2, [pc, #128]	@ (80165dc <HAL_TIM_Base_Start_IT+0xfc>)
 801655c:	4293      	cmp	r3, r2
 801655e:	d009      	beq.n	8016574 <HAL_TIM_Base_Start_IT+0x94>
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	4a1e      	ldr	r2, [pc, #120]	@ (80165e0 <HAL_TIM_Base_Start_IT+0x100>)
 8016566:	4293      	cmp	r3, r2
 8016568:	d004      	beq.n	8016574 <HAL_TIM_Base_Start_IT+0x94>
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	4a1d      	ldr	r2, [pc, #116]	@ (80165e4 <HAL_TIM_Base_Start_IT+0x104>)
 8016570:	4293      	cmp	r3, r2
 8016572:	d115      	bne.n	80165a0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	689a      	ldr	r2, [r3, #8]
 801657a:	4b1b      	ldr	r3, [pc, #108]	@ (80165e8 <HAL_TIM_Base_Start_IT+0x108>)
 801657c:	4013      	ands	r3, r2
 801657e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	2b06      	cmp	r3, #6
 8016584:	d015      	beq.n	80165b2 <HAL_TIM_Base_Start_IT+0xd2>
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801658c:	d011      	beq.n	80165b2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	681a      	ldr	r2, [r3, #0]
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	f042 0201 	orr.w	r2, r2, #1
 801659c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801659e:	e008      	b.n	80165b2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	681a      	ldr	r2, [r3, #0]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	f042 0201 	orr.w	r2, r2, #1
 80165ae:	601a      	str	r2, [r3, #0]
 80165b0:	e000      	b.n	80165b4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80165b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80165b4:	2300      	movs	r3, #0
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3714      	adds	r7, #20
 80165ba:	46bd      	mov	sp, r7
 80165bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c0:	4770      	bx	lr
 80165c2:	bf00      	nop
 80165c4:	40010000 	.word	0x40010000
 80165c8:	40000400 	.word	0x40000400
 80165cc:	40000800 	.word	0x40000800
 80165d0:	40000c00 	.word	0x40000c00
 80165d4:	40010400 	.word	0x40010400
 80165d8:	40001800 	.word	0x40001800
 80165dc:	40014000 	.word	0x40014000
 80165e0:	4000e000 	.word	0x4000e000
 80165e4:	4000e400 	.word	0x4000e400
 80165e8:	00010007 	.word	0x00010007

080165ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b082      	sub	sp, #8
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d101      	bne.n	80165fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80165fa:	2301      	movs	r3, #1
 80165fc:	e049      	b.n	8016692 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016604:	b2db      	uxtb	r3, r3
 8016606:	2b00      	cmp	r3, #0
 8016608:	d106      	bne.n	8016618 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	2200      	movs	r2, #0
 801660e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016612:	6878      	ldr	r0, [r7, #4]
 8016614:	f7f2 fd2e 	bl	8009074 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2202      	movs	r2, #2
 801661c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681a      	ldr	r2, [r3, #0]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	3304      	adds	r3, #4
 8016628:	4619      	mov	r1, r3
 801662a:	4610      	mov	r0, r2
 801662c:	f000 fd80 	bl	8017130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2201      	movs	r2, #1
 8016634:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	2201      	movs	r2, #1
 801663c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	2201      	movs	r2, #1
 8016644:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	2201      	movs	r2, #1
 801664c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	2201      	movs	r2, #1
 8016654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2201      	movs	r2, #1
 801665c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2201      	movs	r2, #1
 8016664:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2201      	movs	r2, #1
 801666c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	2201      	movs	r2, #1
 8016674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2201      	movs	r2, #1
 801667c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2201      	movs	r2, #1
 8016684:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2201      	movs	r2, #1
 801668c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016690:	2300      	movs	r3, #0
}
 8016692:	4618      	mov	r0, r3
 8016694:	3708      	adds	r7, #8
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}
	...

0801669c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b084      	sub	sp, #16
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80166a6:	683b      	ldr	r3, [r7, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d109      	bne.n	80166c0 <HAL_TIM_PWM_Start+0x24>
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80166b2:	b2db      	uxtb	r3, r3
 80166b4:	2b01      	cmp	r3, #1
 80166b6:	bf14      	ite	ne
 80166b8:	2301      	movne	r3, #1
 80166ba:	2300      	moveq	r3, #0
 80166bc:	b2db      	uxtb	r3, r3
 80166be:	e03c      	b.n	801673a <HAL_TIM_PWM_Start+0x9e>
 80166c0:	683b      	ldr	r3, [r7, #0]
 80166c2:	2b04      	cmp	r3, #4
 80166c4:	d109      	bne.n	80166da <HAL_TIM_PWM_Start+0x3e>
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80166cc:	b2db      	uxtb	r3, r3
 80166ce:	2b01      	cmp	r3, #1
 80166d0:	bf14      	ite	ne
 80166d2:	2301      	movne	r3, #1
 80166d4:	2300      	moveq	r3, #0
 80166d6:	b2db      	uxtb	r3, r3
 80166d8:	e02f      	b.n	801673a <HAL_TIM_PWM_Start+0x9e>
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	2b08      	cmp	r3, #8
 80166de:	d109      	bne.n	80166f4 <HAL_TIM_PWM_Start+0x58>
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80166e6:	b2db      	uxtb	r3, r3
 80166e8:	2b01      	cmp	r3, #1
 80166ea:	bf14      	ite	ne
 80166ec:	2301      	movne	r3, #1
 80166ee:	2300      	moveq	r3, #0
 80166f0:	b2db      	uxtb	r3, r3
 80166f2:	e022      	b.n	801673a <HAL_TIM_PWM_Start+0x9e>
 80166f4:	683b      	ldr	r3, [r7, #0]
 80166f6:	2b0c      	cmp	r3, #12
 80166f8:	d109      	bne.n	801670e <HAL_TIM_PWM_Start+0x72>
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016700:	b2db      	uxtb	r3, r3
 8016702:	2b01      	cmp	r3, #1
 8016704:	bf14      	ite	ne
 8016706:	2301      	movne	r3, #1
 8016708:	2300      	moveq	r3, #0
 801670a:	b2db      	uxtb	r3, r3
 801670c:	e015      	b.n	801673a <HAL_TIM_PWM_Start+0x9e>
 801670e:	683b      	ldr	r3, [r7, #0]
 8016710:	2b10      	cmp	r3, #16
 8016712:	d109      	bne.n	8016728 <HAL_TIM_PWM_Start+0x8c>
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801671a:	b2db      	uxtb	r3, r3
 801671c:	2b01      	cmp	r3, #1
 801671e:	bf14      	ite	ne
 8016720:	2301      	movne	r3, #1
 8016722:	2300      	moveq	r3, #0
 8016724:	b2db      	uxtb	r3, r3
 8016726:	e008      	b.n	801673a <HAL_TIM_PWM_Start+0x9e>
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801672e:	b2db      	uxtb	r3, r3
 8016730:	2b01      	cmp	r3, #1
 8016732:	bf14      	ite	ne
 8016734:	2301      	movne	r3, #1
 8016736:	2300      	moveq	r3, #0
 8016738:	b2db      	uxtb	r3, r3
 801673a:	2b00      	cmp	r3, #0
 801673c:	d001      	beq.n	8016742 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801673e:	2301      	movs	r3, #1
 8016740:	e0ab      	b.n	801689a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d104      	bne.n	8016752 <HAL_TIM_PWM_Start+0xb6>
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2202      	movs	r2, #2
 801674c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016750:	e023      	b.n	801679a <HAL_TIM_PWM_Start+0xfe>
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	2b04      	cmp	r3, #4
 8016756:	d104      	bne.n	8016762 <HAL_TIM_PWM_Start+0xc6>
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2202      	movs	r2, #2
 801675c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016760:	e01b      	b.n	801679a <HAL_TIM_PWM_Start+0xfe>
 8016762:	683b      	ldr	r3, [r7, #0]
 8016764:	2b08      	cmp	r3, #8
 8016766:	d104      	bne.n	8016772 <HAL_TIM_PWM_Start+0xd6>
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	2202      	movs	r2, #2
 801676c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016770:	e013      	b.n	801679a <HAL_TIM_PWM_Start+0xfe>
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	2b0c      	cmp	r3, #12
 8016776:	d104      	bne.n	8016782 <HAL_TIM_PWM_Start+0xe6>
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2202      	movs	r2, #2
 801677c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016780:	e00b      	b.n	801679a <HAL_TIM_PWM_Start+0xfe>
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	2b10      	cmp	r3, #16
 8016786:	d104      	bne.n	8016792 <HAL_TIM_PWM_Start+0xf6>
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	2202      	movs	r2, #2
 801678c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016790:	e003      	b.n	801679a <HAL_TIM_PWM_Start+0xfe>
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2202      	movs	r2, #2
 8016796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	2201      	movs	r2, #1
 80167a0:	6839      	ldr	r1, [r7, #0]
 80167a2:	4618      	mov	r0, r3
 80167a4:	f001 fa1a 	bl	8017bdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	4a3d      	ldr	r2, [pc, #244]	@ (80168a4 <HAL_TIM_PWM_Start+0x208>)
 80167ae:	4293      	cmp	r3, r2
 80167b0:	d013      	beq.n	80167da <HAL_TIM_PWM_Start+0x13e>
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	4a3c      	ldr	r2, [pc, #240]	@ (80168a8 <HAL_TIM_PWM_Start+0x20c>)
 80167b8:	4293      	cmp	r3, r2
 80167ba:	d00e      	beq.n	80167da <HAL_TIM_PWM_Start+0x13e>
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	4a3a      	ldr	r2, [pc, #232]	@ (80168ac <HAL_TIM_PWM_Start+0x210>)
 80167c2:	4293      	cmp	r3, r2
 80167c4:	d009      	beq.n	80167da <HAL_TIM_PWM_Start+0x13e>
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	4a39      	ldr	r2, [pc, #228]	@ (80168b0 <HAL_TIM_PWM_Start+0x214>)
 80167cc:	4293      	cmp	r3, r2
 80167ce:	d004      	beq.n	80167da <HAL_TIM_PWM_Start+0x13e>
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	4a37      	ldr	r2, [pc, #220]	@ (80168b4 <HAL_TIM_PWM_Start+0x218>)
 80167d6:	4293      	cmp	r3, r2
 80167d8:	d101      	bne.n	80167de <HAL_TIM_PWM_Start+0x142>
 80167da:	2301      	movs	r3, #1
 80167dc:	e000      	b.n	80167e0 <HAL_TIM_PWM_Start+0x144>
 80167de:	2300      	movs	r3, #0
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d007      	beq.n	80167f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80167f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	4a2a      	ldr	r2, [pc, #168]	@ (80168a4 <HAL_TIM_PWM_Start+0x208>)
 80167fa:	4293      	cmp	r3, r2
 80167fc:	d02c      	beq.n	8016858 <HAL_TIM_PWM_Start+0x1bc>
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016806:	d027      	beq.n	8016858 <HAL_TIM_PWM_Start+0x1bc>
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	4a2a      	ldr	r2, [pc, #168]	@ (80168b8 <HAL_TIM_PWM_Start+0x21c>)
 801680e:	4293      	cmp	r3, r2
 8016810:	d022      	beq.n	8016858 <HAL_TIM_PWM_Start+0x1bc>
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	4a29      	ldr	r2, [pc, #164]	@ (80168bc <HAL_TIM_PWM_Start+0x220>)
 8016818:	4293      	cmp	r3, r2
 801681a:	d01d      	beq.n	8016858 <HAL_TIM_PWM_Start+0x1bc>
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	4a27      	ldr	r2, [pc, #156]	@ (80168c0 <HAL_TIM_PWM_Start+0x224>)
 8016822:	4293      	cmp	r3, r2
 8016824:	d018      	beq.n	8016858 <HAL_TIM_PWM_Start+0x1bc>
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	4a1f      	ldr	r2, [pc, #124]	@ (80168a8 <HAL_TIM_PWM_Start+0x20c>)
 801682c:	4293      	cmp	r3, r2
 801682e:	d013      	beq.n	8016858 <HAL_TIM_PWM_Start+0x1bc>
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	4a23      	ldr	r2, [pc, #140]	@ (80168c4 <HAL_TIM_PWM_Start+0x228>)
 8016836:	4293      	cmp	r3, r2
 8016838:	d00e      	beq.n	8016858 <HAL_TIM_PWM_Start+0x1bc>
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	4a1b      	ldr	r2, [pc, #108]	@ (80168ac <HAL_TIM_PWM_Start+0x210>)
 8016840:	4293      	cmp	r3, r2
 8016842:	d009      	beq.n	8016858 <HAL_TIM_PWM_Start+0x1bc>
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	4a1f      	ldr	r2, [pc, #124]	@ (80168c8 <HAL_TIM_PWM_Start+0x22c>)
 801684a:	4293      	cmp	r3, r2
 801684c:	d004      	beq.n	8016858 <HAL_TIM_PWM_Start+0x1bc>
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	4a1e      	ldr	r2, [pc, #120]	@ (80168cc <HAL_TIM_PWM_Start+0x230>)
 8016854:	4293      	cmp	r3, r2
 8016856:	d115      	bne.n	8016884 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	689a      	ldr	r2, [r3, #8]
 801685e:	4b1c      	ldr	r3, [pc, #112]	@ (80168d0 <HAL_TIM_PWM_Start+0x234>)
 8016860:	4013      	ands	r3, r2
 8016862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	2b06      	cmp	r3, #6
 8016868:	d015      	beq.n	8016896 <HAL_TIM_PWM_Start+0x1fa>
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016870:	d011      	beq.n	8016896 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	681a      	ldr	r2, [r3, #0]
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	f042 0201 	orr.w	r2, r2, #1
 8016880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016882:	e008      	b.n	8016896 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	681a      	ldr	r2, [r3, #0]
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	f042 0201 	orr.w	r2, r2, #1
 8016892:	601a      	str	r2, [r3, #0]
 8016894:	e000      	b.n	8016898 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016896:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016898:	2300      	movs	r3, #0
}
 801689a:	4618      	mov	r0, r3
 801689c:	3710      	adds	r7, #16
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}
 80168a2:	bf00      	nop
 80168a4:	40010000 	.word	0x40010000
 80168a8:	40010400 	.word	0x40010400
 80168ac:	40014000 	.word	0x40014000
 80168b0:	40014400 	.word	0x40014400
 80168b4:	40014800 	.word	0x40014800
 80168b8:	40000400 	.word	0x40000400
 80168bc:	40000800 	.word	0x40000800
 80168c0:	40000c00 	.word	0x40000c00
 80168c4:	40001800 	.word	0x40001800
 80168c8:	4000e000 	.word	0x4000e000
 80168cc:	4000e400 	.word	0x4000e400
 80168d0:	00010007 	.word	0x00010007

080168d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d101      	bne.n	80168e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80168e2:	2301      	movs	r3, #1
 80168e4:	e049      	b.n	801697a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d106      	bne.n	8016900 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2200      	movs	r2, #0
 80168f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80168fa:	6878      	ldr	r0, [r7, #4]
 80168fc:	f7f2 fbf4 	bl	80090e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2202      	movs	r2, #2
 8016904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681a      	ldr	r2, [r3, #0]
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	3304      	adds	r3, #4
 8016910:	4619      	mov	r1, r3
 8016912:	4610      	mov	r0, r2
 8016914:	f000 fc0c 	bl	8017130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2201      	movs	r2, #1
 801691c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2201      	movs	r2, #1
 8016924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2201      	movs	r2, #1
 801692c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	2201      	movs	r2, #1
 8016934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2201      	movs	r2, #1
 801693c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2201      	movs	r2, #1
 8016944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2201      	movs	r2, #1
 801694c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2201      	movs	r2, #1
 8016954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2201      	movs	r2, #1
 801695c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	2201      	movs	r2, #1
 8016964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2201      	movs	r2, #1
 801696c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2201      	movs	r2, #1
 8016974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016978:	2300      	movs	r3, #0
}
 801697a:	4618      	mov	r0, r3
 801697c:	3708      	adds	r7, #8
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}

08016982 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016982:	b580      	push	{r7, lr}
 8016984:	b084      	sub	sp, #16
 8016986:	af00      	add	r7, sp, #0
 8016988:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	68db      	ldr	r3, [r3, #12]
 8016990:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	691b      	ldr	r3, [r3, #16]
 8016998:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801699a:	68bb      	ldr	r3, [r7, #8]
 801699c:	f003 0302 	and.w	r3, r3, #2
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d020      	beq.n	80169e6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	f003 0302 	and.w	r3, r3, #2
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d01b      	beq.n	80169e6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	f06f 0202 	mvn.w	r2, #2
 80169b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	2201      	movs	r2, #1
 80169bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	699b      	ldr	r3, [r3, #24]
 80169c4:	f003 0303 	and.w	r3, r3, #3
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d003      	beq.n	80169d4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80169cc:	6878      	ldr	r0, [r7, #4]
 80169ce:	f000 fb91 	bl	80170f4 <HAL_TIM_IC_CaptureCallback>
 80169d2:	e005      	b.n	80169e0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80169d4:	6878      	ldr	r0, [r7, #4]
 80169d6:	f000 fb83 	bl	80170e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80169da:	6878      	ldr	r0, [r7, #4]
 80169dc:	f000 fb94 	bl	8017108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	2200      	movs	r2, #0
 80169e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80169e6:	68bb      	ldr	r3, [r7, #8]
 80169e8:	f003 0304 	and.w	r3, r3, #4
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d020      	beq.n	8016a32 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	f003 0304 	and.w	r3, r3, #4
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d01b      	beq.n	8016a32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	f06f 0204 	mvn.w	r2, #4
 8016a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	2202      	movs	r2, #2
 8016a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	699b      	ldr	r3, [r3, #24]
 8016a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d003      	beq.n	8016a20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a18:	6878      	ldr	r0, [r7, #4]
 8016a1a:	f000 fb6b 	bl	80170f4 <HAL_TIM_IC_CaptureCallback>
 8016a1e:	e005      	b.n	8016a2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f000 fb5d 	bl	80170e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f000 fb6e 	bl	8017108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2200      	movs	r2, #0
 8016a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016a32:	68bb      	ldr	r3, [r7, #8]
 8016a34:	f003 0308 	and.w	r3, r3, #8
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d020      	beq.n	8016a7e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	f003 0308 	and.w	r3, r3, #8
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d01b      	beq.n	8016a7e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	f06f 0208 	mvn.w	r2, #8
 8016a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2204      	movs	r2, #4
 8016a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	69db      	ldr	r3, [r3, #28]
 8016a5c:	f003 0303 	and.w	r3, r3, #3
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d003      	beq.n	8016a6c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f000 fb45 	bl	80170f4 <HAL_TIM_IC_CaptureCallback>
 8016a6a:	e005      	b.n	8016a78 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	f000 fb37 	bl	80170e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f000 fb48 	bl	8017108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8016a7e:	68bb      	ldr	r3, [r7, #8]
 8016a80:	f003 0310 	and.w	r3, r3, #16
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d020      	beq.n	8016aca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	f003 0310 	and.w	r3, r3, #16
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d01b      	beq.n	8016aca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	f06f 0210 	mvn.w	r2, #16
 8016a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	2208      	movs	r2, #8
 8016aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	69db      	ldr	r3, [r3, #28]
 8016aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d003      	beq.n	8016ab8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016ab0:	6878      	ldr	r0, [r7, #4]
 8016ab2:	f000 fb1f 	bl	80170f4 <HAL_TIM_IC_CaptureCallback>
 8016ab6:	e005      	b.n	8016ac4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ab8:	6878      	ldr	r0, [r7, #4]
 8016aba:	f000 fb11 	bl	80170e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	f000 fb22 	bl	8017108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8016aca:	68bb      	ldr	r3, [r7, #8]
 8016acc:	f003 0301 	and.w	r3, r3, #1
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d00c      	beq.n	8016aee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	f003 0301 	and.w	r3, r3, #1
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d007      	beq.n	8016aee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	f06f 0201 	mvn.w	r2, #1
 8016ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f7ef fadf 	bl	80060ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016aee:	68bb      	ldr	r3, [r7, #8]
 8016af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d104      	bne.n	8016b02 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8016af8:	68bb      	ldr	r3, [r7, #8]
 8016afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d00c      	beq.n	8016b1c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d007      	beq.n	8016b1c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016b16:	6878      	ldr	r0, [r7, #4]
 8016b18:	f001 f9b8 	bl	8017e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8016b1c:	68bb      	ldr	r3, [r7, #8]
 8016b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d00c      	beq.n	8016b40 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d007      	beq.n	8016b40 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016b3a:	6878      	ldr	r0, [r7, #4]
 8016b3c:	f001 f9b0 	bl	8017ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016b40:	68bb      	ldr	r3, [r7, #8]
 8016b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d00c      	beq.n	8016b64 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d007      	beq.n	8016b64 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016b5e:	6878      	ldr	r0, [r7, #4]
 8016b60:	f000 fadc 	bl	801711c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016b64:	68bb      	ldr	r3, [r7, #8]
 8016b66:	f003 0320 	and.w	r3, r3, #32
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d00c      	beq.n	8016b88 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	f003 0320 	and.w	r3, r3, #32
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d007      	beq.n	8016b88 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	f06f 0220 	mvn.w	r2, #32
 8016b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016b82:	6878      	ldr	r0, [r7, #4]
 8016b84:	f001 f978 	bl	8017e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016b88:	bf00      	nop
 8016b8a:	3710      	adds	r7, #16
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}

08016b90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b086      	sub	sp, #24
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	60f8      	str	r0, [r7, #12]
 8016b98:	60b9      	str	r1, [r7, #8]
 8016b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016ba6:	2b01      	cmp	r3, #1
 8016ba8:	d101      	bne.n	8016bae <HAL_TIM_IC_ConfigChannel+0x1e>
 8016baa:	2302      	movs	r3, #2
 8016bac:	e088      	b.n	8016cc0 <HAL_TIM_IC_ConfigChannel+0x130>
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	2201      	movs	r2, #1
 8016bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d11b      	bne.n	8016bf4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016bc8:	68bb      	ldr	r3, [r7, #8]
 8016bca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8016bcc:	f000 fe32 	bl	8017834 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	699a      	ldr	r2, [r3, #24]
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	f022 020c 	bic.w	r2, r2, #12
 8016bde:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	6999      	ldr	r1, [r3, #24]
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	689a      	ldr	r2, [r3, #8]
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	430a      	orrs	r2, r1
 8016bf0:	619a      	str	r2, [r3, #24]
 8016bf2:	e060      	b.n	8016cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	2b04      	cmp	r3, #4
 8016bf8:	d11c      	bne.n	8016c34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8016c0a:	f000 fec2 	bl	8017992 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	699a      	ldr	r2, [r3, #24]
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016c1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	6999      	ldr	r1, [r3, #24]
 8016c24:	68bb      	ldr	r3, [r7, #8]
 8016c26:	689b      	ldr	r3, [r3, #8]
 8016c28:	021a      	lsls	r2, r3, #8
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	430a      	orrs	r2, r1
 8016c30:	619a      	str	r2, [r3, #24]
 8016c32:	e040      	b.n	8016cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2b08      	cmp	r3, #8
 8016c38:	d11b      	bne.n	8016c72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c3e:	68bb      	ldr	r3, [r7, #8]
 8016c40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c42:	68bb      	ldr	r3, [r7, #8]
 8016c44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c46:	68bb      	ldr	r3, [r7, #8]
 8016c48:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8016c4a:	f000 ff0f 	bl	8017a6c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	69da      	ldr	r2, [r3, #28]
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	f022 020c 	bic.w	r2, r2, #12
 8016c5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	69d9      	ldr	r1, [r3, #28]
 8016c64:	68bb      	ldr	r3, [r7, #8]
 8016c66:	689a      	ldr	r2, [r3, #8]
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	430a      	orrs	r2, r1
 8016c6e:	61da      	str	r2, [r3, #28]
 8016c70:	e021      	b.n	8016cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2b0c      	cmp	r3, #12
 8016c76:	d11c      	bne.n	8016cb2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016c7c:	68bb      	ldr	r3, [r7, #8]
 8016c7e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016c80:	68bb      	ldr	r3, [r7, #8]
 8016c82:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016c88:	f000 ff2c 	bl	8017ae4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	69da      	ldr	r2, [r3, #28]
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016c9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	69d9      	ldr	r1, [r3, #28]
 8016ca2:	68bb      	ldr	r3, [r7, #8]
 8016ca4:	689b      	ldr	r3, [r3, #8]
 8016ca6:	021a      	lsls	r2, r3, #8
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	430a      	orrs	r2, r1
 8016cae:	61da      	str	r2, [r3, #28]
 8016cb0:	e001      	b.n	8016cb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	2200      	movs	r2, #0
 8016cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	3718      	adds	r7, #24
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	bd80      	pop	{r7, pc}

08016cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b086      	sub	sp, #24
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	60f8      	str	r0, [r7, #12]
 8016cd0:	60b9      	str	r1, [r7, #8]
 8016cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016cde:	2b01      	cmp	r3, #1
 8016ce0:	d101      	bne.n	8016ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016ce2:	2302      	movs	r3, #2
 8016ce4:	e0ff      	b.n	8016ee6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	2201      	movs	r2, #1
 8016cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	2b14      	cmp	r3, #20
 8016cf2:	f200 80f0 	bhi.w	8016ed6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8016cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cfc:	08016d51 	.word	0x08016d51
 8016d00:	08016ed7 	.word	0x08016ed7
 8016d04:	08016ed7 	.word	0x08016ed7
 8016d08:	08016ed7 	.word	0x08016ed7
 8016d0c:	08016d91 	.word	0x08016d91
 8016d10:	08016ed7 	.word	0x08016ed7
 8016d14:	08016ed7 	.word	0x08016ed7
 8016d18:	08016ed7 	.word	0x08016ed7
 8016d1c:	08016dd3 	.word	0x08016dd3
 8016d20:	08016ed7 	.word	0x08016ed7
 8016d24:	08016ed7 	.word	0x08016ed7
 8016d28:	08016ed7 	.word	0x08016ed7
 8016d2c:	08016e13 	.word	0x08016e13
 8016d30:	08016ed7 	.word	0x08016ed7
 8016d34:	08016ed7 	.word	0x08016ed7
 8016d38:	08016ed7 	.word	0x08016ed7
 8016d3c:	08016e55 	.word	0x08016e55
 8016d40:	08016ed7 	.word	0x08016ed7
 8016d44:	08016ed7 	.word	0x08016ed7
 8016d48:	08016ed7 	.word	0x08016ed7
 8016d4c:	08016e95 	.word	0x08016e95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	68b9      	ldr	r1, [r7, #8]
 8016d56:	4618      	mov	r0, r3
 8016d58:	f000 fa96 	bl	8017288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	699a      	ldr	r2, [r3, #24]
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	f042 0208 	orr.w	r2, r2, #8
 8016d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	699a      	ldr	r2, [r3, #24]
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	f022 0204 	bic.w	r2, r2, #4
 8016d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	6999      	ldr	r1, [r3, #24]
 8016d82:	68bb      	ldr	r3, [r7, #8]
 8016d84:	691a      	ldr	r2, [r3, #16]
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	430a      	orrs	r2, r1
 8016d8c:	619a      	str	r2, [r3, #24]
      break;
 8016d8e:	e0a5      	b.n	8016edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	68b9      	ldr	r1, [r7, #8]
 8016d96:	4618      	mov	r0, r3
 8016d98:	f000 fb06 	bl	80173a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	699a      	ldr	r2, [r3, #24]
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	699a      	ldr	r2, [r3, #24]
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	6999      	ldr	r1, [r3, #24]
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	691b      	ldr	r3, [r3, #16]
 8016dc6:	021a      	lsls	r2, r3, #8
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	430a      	orrs	r2, r1
 8016dce:	619a      	str	r2, [r3, #24]
      break;
 8016dd0:	e084      	b.n	8016edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	68b9      	ldr	r1, [r7, #8]
 8016dd8:	4618      	mov	r0, r3
 8016dda:	f000 fb6f 	bl	80174bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	69da      	ldr	r2, [r3, #28]
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	f042 0208 	orr.w	r2, r2, #8
 8016dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	69da      	ldr	r2, [r3, #28]
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	f022 0204 	bic.w	r2, r2, #4
 8016dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	69d9      	ldr	r1, [r3, #28]
 8016e04:	68bb      	ldr	r3, [r7, #8]
 8016e06:	691a      	ldr	r2, [r3, #16]
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	430a      	orrs	r2, r1
 8016e0e:	61da      	str	r2, [r3, #28]
      break;
 8016e10:	e064      	b.n	8016edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	68b9      	ldr	r1, [r7, #8]
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f000 fbd7 	bl	80175cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	69da      	ldr	r2, [r3, #28]
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	69da      	ldr	r2, [r3, #28]
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	69d9      	ldr	r1, [r3, #28]
 8016e44:	68bb      	ldr	r3, [r7, #8]
 8016e46:	691b      	ldr	r3, [r3, #16]
 8016e48:	021a      	lsls	r2, r3, #8
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	430a      	orrs	r2, r1
 8016e50:	61da      	str	r2, [r3, #28]
      break;
 8016e52:	e043      	b.n	8016edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	68b9      	ldr	r1, [r7, #8]
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	f000 fc20 	bl	80176a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	f042 0208 	orr.w	r2, r2, #8
 8016e6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	f022 0204 	bic.w	r2, r2, #4
 8016e7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	691a      	ldr	r2, [r3, #16]
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	430a      	orrs	r2, r1
 8016e90:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016e92:	e023      	b.n	8016edc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	68b9      	ldr	r1, [r7, #8]
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f000 fc64 	bl	8017768 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016eae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016ebe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016ec6:	68bb      	ldr	r3, [r7, #8]
 8016ec8:	691b      	ldr	r3, [r3, #16]
 8016eca:	021a      	lsls	r2, r3, #8
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	430a      	orrs	r2, r1
 8016ed2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016ed4:	e002      	b.n	8016edc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016ed6:	2301      	movs	r3, #1
 8016ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8016eda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	2200      	movs	r2, #0
 8016ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3718      	adds	r7, #24
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}
 8016eee:	bf00      	nop

08016ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b084      	sub	sp, #16
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
 8016ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016efa:	2300      	movs	r3, #0
 8016efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016f04:	2b01      	cmp	r3, #1
 8016f06:	d101      	bne.n	8016f0c <HAL_TIM_ConfigClockSource+0x1c>
 8016f08:	2302      	movs	r3, #2
 8016f0a:	e0dc      	b.n	80170c6 <HAL_TIM_ConfigClockSource+0x1d6>
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2201      	movs	r2, #1
 8016f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	2202      	movs	r2, #2
 8016f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	689b      	ldr	r3, [r3, #8]
 8016f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016f24:	68ba      	ldr	r2, [r7, #8]
 8016f26:	4b6a      	ldr	r3, [pc, #424]	@ (80170d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016f28:	4013      	ands	r3, r2
 8016f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	68ba      	ldr	r2, [r7, #8]
 8016f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016f3c:	683b      	ldr	r3, [r7, #0]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	4a64      	ldr	r2, [pc, #400]	@ (80170d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016f42:	4293      	cmp	r3, r2
 8016f44:	f000 80a9 	beq.w	801709a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f48:	4a62      	ldr	r2, [pc, #392]	@ (80170d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	f200 80ae 	bhi.w	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016f50:	4a61      	ldr	r2, [pc, #388]	@ (80170d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016f52:	4293      	cmp	r3, r2
 8016f54:	f000 80a1 	beq.w	801709a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f58:	4a5f      	ldr	r2, [pc, #380]	@ (80170d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016f5a:	4293      	cmp	r3, r2
 8016f5c:	f200 80a6 	bhi.w	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016f60:	4a5e      	ldr	r2, [pc, #376]	@ (80170dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8016f62:	4293      	cmp	r3, r2
 8016f64:	f000 8099 	beq.w	801709a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f68:	4a5c      	ldr	r2, [pc, #368]	@ (80170dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8016f6a:	4293      	cmp	r3, r2
 8016f6c:	f200 809e 	bhi.w	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016f70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016f74:	f000 8091 	beq.w	801709a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f78:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016f7c:	f200 8096 	bhi.w	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f84:	f000 8089 	beq.w	801709a <HAL_TIM_ConfigClockSource+0x1aa>
 8016f88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016f8c:	f200 808e 	bhi.w	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f94:	d03e      	beq.n	8017014 <HAL_TIM_ConfigClockSource+0x124>
 8016f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f9a:	f200 8087 	bhi.w	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016fa2:	f000 8086 	beq.w	80170b2 <HAL_TIM_ConfigClockSource+0x1c2>
 8016fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016faa:	d87f      	bhi.n	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016fac:	2b70      	cmp	r3, #112	@ 0x70
 8016fae:	d01a      	beq.n	8016fe6 <HAL_TIM_ConfigClockSource+0xf6>
 8016fb0:	2b70      	cmp	r3, #112	@ 0x70
 8016fb2:	d87b      	bhi.n	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016fb4:	2b60      	cmp	r3, #96	@ 0x60
 8016fb6:	d050      	beq.n	801705a <HAL_TIM_ConfigClockSource+0x16a>
 8016fb8:	2b60      	cmp	r3, #96	@ 0x60
 8016fba:	d877      	bhi.n	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016fbc:	2b50      	cmp	r3, #80	@ 0x50
 8016fbe:	d03c      	beq.n	801703a <HAL_TIM_ConfigClockSource+0x14a>
 8016fc0:	2b50      	cmp	r3, #80	@ 0x50
 8016fc2:	d873      	bhi.n	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016fc4:	2b40      	cmp	r3, #64	@ 0x40
 8016fc6:	d058      	beq.n	801707a <HAL_TIM_ConfigClockSource+0x18a>
 8016fc8:	2b40      	cmp	r3, #64	@ 0x40
 8016fca:	d86f      	bhi.n	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016fcc:	2b30      	cmp	r3, #48	@ 0x30
 8016fce:	d064      	beq.n	801709a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fd0:	2b30      	cmp	r3, #48	@ 0x30
 8016fd2:	d86b      	bhi.n	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016fd4:	2b20      	cmp	r3, #32
 8016fd6:	d060      	beq.n	801709a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fd8:	2b20      	cmp	r3, #32
 8016fda:	d867      	bhi.n	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d05c      	beq.n	801709a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fe0:	2b10      	cmp	r3, #16
 8016fe2:	d05a      	beq.n	801709a <HAL_TIM_ConfigClockSource+0x1aa>
 8016fe4:	e062      	b.n	80170ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016fea:	683b      	ldr	r3, [r7, #0]
 8016fec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016ff2:	683b      	ldr	r3, [r7, #0]
 8016ff4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016ff6:	f000 fdd1 	bl	8017b9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	689b      	ldr	r3, [r3, #8]
 8017000:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8017002:	68bb      	ldr	r3, [r7, #8]
 8017004:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8017008:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	68ba      	ldr	r2, [r7, #8]
 8017010:	609a      	str	r2, [r3, #8]
      break;
 8017012:	e04f      	b.n	80170b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8017018:	683b      	ldr	r3, [r7, #0]
 801701a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8017020:	683b      	ldr	r3, [r7, #0]
 8017022:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8017024:	f000 fdba 	bl	8017b9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	689a      	ldr	r2, [r3, #8]
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8017036:	609a      	str	r2, [r3, #8]
      break;
 8017038:	e03c      	b.n	80170b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017046:	461a      	mov	r2, r3
 8017048:	f000 fc74 	bl	8017934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	2150      	movs	r1, #80	@ 0x50
 8017052:	4618      	mov	r0, r3
 8017054:	f000 fd84 	bl	8017b60 <TIM_ITRx_SetConfig>
      break;
 8017058:	e02c      	b.n	80170b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8017066:	461a      	mov	r2, r3
 8017068:	f000 fcd0 	bl	8017a0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	2160      	movs	r1, #96	@ 0x60
 8017072:	4618      	mov	r0, r3
 8017074:	f000 fd74 	bl	8017b60 <TIM_ITRx_SetConfig>
      break;
 8017078:	e01c      	b.n	80170b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017086:	461a      	mov	r2, r3
 8017088:	f000 fc54 	bl	8017934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	2140      	movs	r1, #64	@ 0x40
 8017092:	4618      	mov	r0, r3
 8017094:	f000 fd64 	bl	8017b60 <TIM_ITRx_SetConfig>
      break;
 8017098:	e00c      	b.n	80170b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	681a      	ldr	r2, [r3, #0]
 801709e:	683b      	ldr	r3, [r7, #0]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	4619      	mov	r1, r3
 80170a4:	4610      	mov	r0, r2
 80170a6:	f000 fd5b 	bl	8017b60 <TIM_ITRx_SetConfig>
      break;
 80170aa:	e003      	b.n	80170b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80170ac:	2301      	movs	r3, #1
 80170ae:	73fb      	strb	r3, [r7, #15]
      break;
 80170b0:	e000      	b.n	80170b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80170b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	2201      	movs	r2, #1
 80170b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2200      	movs	r2, #0
 80170c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80170c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	3710      	adds	r7, #16
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop
 80170d0:	ffceff88 	.word	0xffceff88
 80170d4:	00100040 	.word	0x00100040
 80170d8:	00100030 	.word	0x00100030
 80170dc:	00100020 	.word	0x00100020

080170e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80170e0:	b480      	push	{r7}
 80170e2:	b083      	sub	sp, #12
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80170e8:	bf00      	nop
 80170ea:	370c      	adds	r7, #12
 80170ec:	46bd      	mov	sp, r7
 80170ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f2:	4770      	bx	lr

080170f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80170f4:	b480      	push	{r7}
 80170f6:	b083      	sub	sp, #12
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80170fc:	bf00      	nop
 80170fe:	370c      	adds	r7, #12
 8017100:	46bd      	mov	sp, r7
 8017102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017106:	4770      	bx	lr

08017108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017108:	b480      	push	{r7}
 801710a:	b083      	sub	sp, #12
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017110:	bf00      	nop
 8017112:	370c      	adds	r7, #12
 8017114:	46bd      	mov	sp, r7
 8017116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711a:	4770      	bx	lr

0801711c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801711c:	b480      	push	{r7}
 801711e:	b083      	sub	sp, #12
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017124:	bf00      	nop
 8017126:	370c      	adds	r7, #12
 8017128:	46bd      	mov	sp, r7
 801712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712e:	4770      	bx	lr

08017130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017130:	b480      	push	{r7}
 8017132:	b085      	sub	sp, #20
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
 8017138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	4a47      	ldr	r2, [pc, #284]	@ (8017260 <TIM_Base_SetConfig+0x130>)
 8017144:	4293      	cmp	r3, r2
 8017146:	d013      	beq.n	8017170 <TIM_Base_SetConfig+0x40>
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801714e:	d00f      	beq.n	8017170 <TIM_Base_SetConfig+0x40>
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	4a44      	ldr	r2, [pc, #272]	@ (8017264 <TIM_Base_SetConfig+0x134>)
 8017154:	4293      	cmp	r3, r2
 8017156:	d00b      	beq.n	8017170 <TIM_Base_SetConfig+0x40>
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	4a43      	ldr	r2, [pc, #268]	@ (8017268 <TIM_Base_SetConfig+0x138>)
 801715c:	4293      	cmp	r3, r2
 801715e:	d007      	beq.n	8017170 <TIM_Base_SetConfig+0x40>
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	4a42      	ldr	r2, [pc, #264]	@ (801726c <TIM_Base_SetConfig+0x13c>)
 8017164:	4293      	cmp	r3, r2
 8017166:	d003      	beq.n	8017170 <TIM_Base_SetConfig+0x40>
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	4a41      	ldr	r2, [pc, #260]	@ (8017270 <TIM_Base_SetConfig+0x140>)
 801716c:	4293      	cmp	r3, r2
 801716e:	d108      	bne.n	8017182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017178:	683b      	ldr	r3, [r7, #0]
 801717a:	685b      	ldr	r3, [r3, #4]
 801717c:	68fa      	ldr	r2, [r7, #12]
 801717e:	4313      	orrs	r3, r2
 8017180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	4a36      	ldr	r2, [pc, #216]	@ (8017260 <TIM_Base_SetConfig+0x130>)
 8017186:	4293      	cmp	r3, r2
 8017188:	d027      	beq.n	80171da <TIM_Base_SetConfig+0xaa>
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017190:	d023      	beq.n	80171da <TIM_Base_SetConfig+0xaa>
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	4a33      	ldr	r2, [pc, #204]	@ (8017264 <TIM_Base_SetConfig+0x134>)
 8017196:	4293      	cmp	r3, r2
 8017198:	d01f      	beq.n	80171da <TIM_Base_SetConfig+0xaa>
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	4a32      	ldr	r2, [pc, #200]	@ (8017268 <TIM_Base_SetConfig+0x138>)
 801719e:	4293      	cmp	r3, r2
 80171a0:	d01b      	beq.n	80171da <TIM_Base_SetConfig+0xaa>
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	4a31      	ldr	r2, [pc, #196]	@ (801726c <TIM_Base_SetConfig+0x13c>)
 80171a6:	4293      	cmp	r3, r2
 80171a8:	d017      	beq.n	80171da <TIM_Base_SetConfig+0xaa>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	4a30      	ldr	r2, [pc, #192]	@ (8017270 <TIM_Base_SetConfig+0x140>)
 80171ae:	4293      	cmp	r3, r2
 80171b0:	d013      	beq.n	80171da <TIM_Base_SetConfig+0xaa>
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	4a2f      	ldr	r2, [pc, #188]	@ (8017274 <TIM_Base_SetConfig+0x144>)
 80171b6:	4293      	cmp	r3, r2
 80171b8:	d00f      	beq.n	80171da <TIM_Base_SetConfig+0xaa>
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	4a2e      	ldr	r2, [pc, #184]	@ (8017278 <TIM_Base_SetConfig+0x148>)
 80171be:	4293      	cmp	r3, r2
 80171c0:	d00b      	beq.n	80171da <TIM_Base_SetConfig+0xaa>
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	4a2d      	ldr	r2, [pc, #180]	@ (801727c <TIM_Base_SetConfig+0x14c>)
 80171c6:	4293      	cmp	r3, r2
 80171c8:	d007      	beq.n	80171da <TIM_Base_SetConfig+0xaa>
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	4a2c      	ldr	r2, [pc, #176]	@ (8017280 <TIM_Base_SetConfig+0x150>)
 80171ce:	4293      	cmp	r3, r2
 80171d0:	d003      	beq.n	80171da <TIM_Base_SetConfig+0xaa>
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	4a2b      	ldr	r2, [pc, #172]	@ (8017284 <TIM_Base_SetConfig+0x154>)
 80171d6:	4293      	cmp	r3, r2
 80171d8:	d108      	bne.n	80171ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80171e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	68db      	ldr	r3, [r3, #12]
 80171e6:	68fa      	ldr	r2, [r7, #12]
 80171e8:	4313      	orrs	r3, r2
 80171ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	695b      	ldr	r3, [r3, #20]
 80171f6:	4313      	orrs	r3, r2
 80171f8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	689a      	ldr	r2, [r3, #8]
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017202:	683b      	ldr	r3, [r7, #0]
 8017204:	681a      	ldr	r2, [r3, #0]
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	4a14      	ldr	r2, [pc, #80]	@ (8017260 <TIM_Base_SetConfig+0x130>)
 801720e:	4293      	cmp	r3, r2
 8017210:	d00f      	beq.n	8017232 <TIM_Base_SetConfig+0x102>
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	4a16      	ldr	r2, [pc, #88]	@ (8017270 <TIM_Base_SetConfig+0x140>)
 8017216:	4293      	cmp	r3, r2
 8017218:	d00b      	beq.n	8017232 <TIM_Base_SetConfig+0x102>
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	4a15      	ldr	r2, [pc, #84]	@ (8017274 <TIM_Base_SetConfig+0x144>)
 801721e:	4293      	cmp	r3, r2
 8017220:	d007      	beq.n	8017232 <TIM_Base_SetConfig+0x102>
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	4a14      	ldr	r2, [pc, #80]	@ (8017278 <TIM_Base_SetConfig+0x148>)
 8017226:	4293      	cmp	r3, r2
 8017228:	d003      	beq.n	8017232 <TIM_Base_SetConfig+0x102>
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	4a13      	ldr	r2, [pc, #76]	@ (801727c <TIM_Base_SetConfig+0x14c>)
 801722e:	4293      	cmp	r3, r2
 8017230:	d103      	bne.n	801723a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	691a      	ldr	r2, [r3, #16]
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	f043 0204 	orr.w	r2, r3, #4
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	2201      	movs	r2, #1
 801724a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	68fa      	ldr	r2, [r7, #12]
 8017250:	601a      	str	r2, [r3, #0]
}
 8017252:	bf00      	nop
 8017254:	3714      	adds	r7, #20
 8017256:	46bd      	mov	sp, r7
 8017258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725c:	4770      	bx	lr
 801725e:	bf00      	nop
 8017260:	40010000 	.word	0x40010000
 8017264:	40000400 	.word	0x40000400
 8017268:	40000800 	.word	0x40000800
 801726c:	40000c00 	.word	0x40000c00
 8017270:	40010400 	.word	0x40010400
 8017274:	40014000 	.word	0x40014000
 8017278:	40014400 	.word	0x40014400
 801727c:	40014800 	.word	0x40014800
 8017280:	4000e000 	.word	0x4000e000
 8017284:	4000e400 	.word	0x4000e400

08017288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017288:	b480      	push	{r7}
 801728a:	b087      	sub	sp, #28
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	6a1b      	ldr	r3, [r3, #32]
 8017296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	6a1b      	ldr	r3, [r3, #32]
 801729c:	f023 0201 	bic.w	r2, r3, #1
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	685b      	ldr	r3, [r3, #4]
 80172a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	699b      	ldr	r3, [r3, #24]
 80172ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80172b0:	68fa      	ldr	r2, [r7, #12]
 80172b2:	4b37      	ldr	r3, [pc, #220]	@ (8017390 <TIM_OC1_SetConfig+0x108>)
 80172b4:	4013      	ands	r3, r2
 80172b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	f023 0303 	bic.w	r3, r3, #3
 80172be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	68fa      	ldr	r2, [r7, #12]
 80172c6:	4313      	orrs	r3, r2
 80172c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80172ca:	697b      	ldr	r3, [r7, #20]
 80172cc:	f023 0302 	bic.w	r3, r3, #2
 80172d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	689b      	ldr	r3, [r3, #8]
 80172d6:	697a      	ldr	r2, [r7, #20]
 80172d8:	4313      	orrs	r3, r2
 80172da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	4a2d      	ldr	r2, [pc, #180]	@ (8017394 <TIM_OC1_SetConfig+0x10c>)
 80172e0:	4293      	cmp	r3, r2
 80172e2:	d00f      	beq.n	8017304 <TIM_OC1_SetConfig+0x7c>
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	4a2c      	ldr	r2, [pc, #176]	@ (8017398 <TIM_OC1_SetConfig+0x110>)
 80172e8:	4293      	cmp	r3, r2
 80172ea:	d00b      	beq.n	8017304 <TIM_OC1_SetConfig+0x7c>
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	4a2b      	ldr	r2, [pc, #172]	@ (801739c <TIM_OC1_SetConfig+0x114>)
 80172f0:	4293      	cmp	r3, r2
 80172f2:	d007      	beq.n	8017304 <TIM_OC1_SetConfig+0x7c>
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	4a2a      	ldr	r2, [pc, #168]	@ (80173a0 <TIM_OC1_SetConfig+0x118>)
 80172f8:	4293      	cmp	r3, r2
 80172fa:	d003      	beq.n	8017304 <TIM_OC1_SetConfig+0x7c>
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	4a29      	ldr	r2, [pc, #164]	@ (80173a4 <TIM_OC1_SetConfig+0x11c>)
 8017300:	4293      	cmp	r3, r2
 8017302:	d10c      	bne.n	801731e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8017304:	697b      	ldr	r3, [r7, #20]
 8017306:	f023 0308 	bic.w	r3, r3, #8
 801730a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	68db      	ldr	r3, [r3, #12]
 8017310:	697a      	ldr	r2, [r7, #20]
 8017312:	4313      	orrs	r3, r2
 8017314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8017316:	697b      	ldr	r3, [r7, #20]
 8017318:	f023 0304 	bic.w	r3, r3, #4
 801731c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	4a1c      	ldr	r2, [pc, #112]	@ (8017394 <TIM_OC1_SetConfig+0x10c>)
 8017322:	4293      	cmp	r3, r2
 8017324:	d00f      	beq.n	8017346 <TIM_OC1_SetConfig+0xbe>
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	4a1b      	ldr	r2, [pc, #108]	@ (8017398 <TIM_OC1_SetConfig+0x110>)
 801732a:	4293      	cmp	r3, r2
 801732c:	d00b      	beq.n	8017346 <TIM_OC1_SetConfig+0xbe>
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	4a1a      	ldr	r2, [pc, #104]	@ (801739c <TIM_OC1_SetConfig+0x114>)
 8017332:	4293      	cmp	r3, r2
 8017334:	d007      	beq.n	8017346 <TIM_OC1_SetConfig+0xbe>
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	4a19      	ldr	r2, [pc, #100]	@ (80173a0 <TIM_OC1_SetConfig+0x118>)
 801733a:	4293      	cmp	r3, r2
 801733c:	d003      	beq.n	8017346 <TIM_OC1_SetConfig+0xbe>
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	4a18      	ldr	r2, [pc, #96]	@ (80173a4 <TIM_OC1_SetConfig+0x11c>)
 8017342:	4293      	cmp	r3, r2
 8017344:	d111      	bne.n	801736a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8017346:	693b      	ldr	r3, [r7, #16]
 8017348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801734c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801734e:	693b      	ldr	r3, [r7, #16]
 8017350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	695b      	ldr	r3, [r3, #20]
 801735a:	693a      	ldr	r2, [r7, #16]
 801735c:	4313      	orrs	r3, r2
 801735e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017360:	683b      	ldr	r3, [r7, #0]
 8017362:	699b      	ldr	r3, [r3, #24]
 8017364:	693a      	ldr	r2, [r7, #16]
 8017366:	4313      	orrs	r3, r2
 8017368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	693a      	ldr	r2, [r7, #16]
 801736e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	68fa      	ldr	r2, [r7, #12]
 8017374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017376:	683b      	ldr	r3, [r7, #0]
 8017378:	685a      	ldr	r2, [r3, #4]
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	697a      	ldr	r2, [r7, #20]
 8017382:	621a      	str	r2, [r3, #32]
}
 8017384:	bf00      	nop
 8017386:	371c      	adds	r7, #28
 8017388:	46bd      	mov	sp, r7
 801738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738e:	4770      	bx	lr
 8017390:	fffeff8f 	.word	0xfffeff8f
 8017394:	40010000 	.word	0x40010000
 8017398:	40010400 	.word	0x40010400
 801739c:	40014000 	.word	0x40014000
 80173a0:	40014400 	.word	0x40014400
 80173a4:	40014800 	.word	0x40014800

080173a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80173a8:	b480      	push	{r7}
 80173aa:	b087      	sub	sp, #28
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
 80173b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	6a1b      	ldr	r3, [r3, #32]
 80173b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	6a1b      	ldr	r3, [r3, #32]
 80173bc:	f023 0210 	bic.w	r2, r3, #16
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	685b      	ldr	r3, [r3, #4]
 80173c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	699b      	ldr	r3, [r3, #24]
 80173ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80173d0:	68fa      	ldr	r2, [r7, #12]
 80173d2:	4b34      	ldr	r3, [pc, #208]	@ (80174a4 <TIM_OC2_SetConfig+0xfc>)
 80173d4:	4013      	ands	r3, r2
 80173d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80173de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80173e0:	683b      	ldr	r3, [r7, #0]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	021b      	lsls	r3, r3, #8
 80173e6:	68fa      	ldr	r2, [r7, #12]
 80173e8:	4313      	orrs	r3, r2
 80173ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80173ec:	697b      	ldr	r3, [r7, #20]
 80173ee:	f023 0320 	bic.w	r3, r3, #32
 80173f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80173f4:	683b      	ldr	r3, [r7, #0]
 80173f6:	689b      	ldr	r3, [r3, #8]
 80173f8:	011b      	lsls	r3, r3, #4
 80173fa:	697a      	ldr	r2, [r7, #20]
 80173fc:	4313      	orrs	r3, r2
 80173fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	4a29      	ldr	r2, [pc, #164]	@ (80174a8 <TIM_OC2_SetConfig+0x100>)
 8017404:	4293      	cmp	r3, r2
 8017406:	d003      	beq.n	8017410 <TIM_OC2_SetConfig+0x68>
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	4a28      	ldr	r2, [pc, #160]	@ (80174ac <TIM_OC2_SetConfig+0x104>)
 801740c:	4293      	cmp	r3, r2
 801740e:	d10d      	bne.n	801742c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017410:	697b      	ldr	r3, [r7, #20]
 8017412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017418:	683b      	ldr	r3, [r7, #0]
 801741a:	68db      	ldr	r3, [r3, #12]
 801741c:	011b      	lsls	r3, r3, #4
 801741e:	697a      	ldr	r2, [r7, #20]
 8017420:	4313      	orrs	r3, r2
 8017422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017424:	697b      	ldr	r3, [r7, #20]
 8017426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801742a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	4a1e      	ldr	r2, [pc, #120]	@ (80174a8 <TIM_OC2_SetConfig+0x100>)
 8017430:	4293      	cmp	r3, r2
 8017432:	d00f      	beq.n	8017454 <TIM_OC2_SetConfig+0xac>
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	4a1d      	ldr	r2, [pc, #116]	@ (80174ac <TIM_OC2_SetConfig+0x104>)
 8017438:	4293      	cmp	r3, r2
 801743a:	d00b      	beq.n	8017454 <TIM_OC2_SetConfig+0xac>
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	4a1c      	ldr	r2, [pc, #112]	@ (80174b0 <TIM_OC2_SetConfig+0x108>)
 8017440:	4293      	cmp	r3, r2
 8017442:	d007      	beq.n	8017454 <TIM_OC2_SetConfig+0xac>
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	4a1b      	ldr	r2, [pc, #108]	@ (80174b4 <TIM_OC2_SetConfig+0x10c>)
 8017448:	4293      	cmp	r3, r2
 801744a:	d003      	beq.n	8017454 <TIM_OC2_SetConfig+0xac>
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	4a1a      	ldr	r2, [pc, #104]	@ (80174b8 <TIM_OC2_SetConfig+0x110>)
 8017450:	4293      	cmp	r3, r2
 8017452:	d113      	bne.n	801747c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017454:	693b      	ldr	r3, [r7, #16]
 8017456:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801745a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801745c:	693b      	ldr	r3, [r7, #16]
 801745e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	695b      	ldr	r3, [r3, #20]
 8017468:	009b      	lsls	r3, r3, #2
 801746a:	693a      	ldr	r2, [r7, #16]
 801746c:	4313      	orrs	r3, r2
 801746e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017470:	683b      	ldr	r3, [r7, #0]
 8017472:	699b      	ldr	r3, [r3, #24]
 8017474:	009b      	lsls	r3, r3, #2
 8017476:	693a      	ldr	r2, [r7, #16]
 8017478:	4313      	orrs	r3, r2
 801747a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	693a      	ldr	r2, [r7, #16]
 8017480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	68fa      	ldr	r2, [r7, #12]
 8017486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017488:	683b      	ldr	r3, [r7, #0]
 801748a:	685a      	ldr	r2, [r3, #4]
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	697a      	ldr	r2, [r7, #20]
 8017494:	621a      	str	r2, [r3, #32]
}
 8017496:	bf00      	nop
 8017498:	371c      	adds	r7, #28
 801749a:	46bd      	mov	sp, r7
 801749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a0:	4770      	bx	lr
 80174a2:	bf00      	nop
 80174a4:	feff8fff 	.word	0xfeff8fff
 80174a8:	40010000 	.word	0x40010000
 80174ac:	40010400 	.word	0x40010400
 80174b0:	40014000 	.word	0x40014000
 80174b4:	40014400 	.word	0x40014400
 80174b8:	40014800 	.word	0x40014800

080174bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80174bc:	b480      	push	{r7}
 80174be:	b087      	sub	sp, #28
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
 80174c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	6a1b      	ldr	r3, [r3, #32]
 80174ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	6a1b      	ldr	r3, [r3, #32]
 80174d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	69db      	ldr	r3, [r3, #28]
 80174e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80174e4:	68fa      	ldr	r2, [r7, #12]
 80174e6:	4b33      	ldr	r3, [pc, #204]	@ (80175b4 <TIM_OC3_SetConfig+0xf8>)
 80174e8:	4013      	ands	r3, r2
 80174ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	f023 0303 	bic.w	r3, r3, #3
 80174f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	68fa      	ldr	r2, [r7, #12]
 80174fa:	4313      	orrs	r3, r2
 80174fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80174fe:	697b      	ldr	r3, [r7, #20]
 8017500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	689b      	ldr	r3, [r3, #8]
 801750a:	021b      	lsls	r3, r3, #8
 801750c:	697a      	ldr	r2, [r7, #20]
 801750e:	4313      	orrs	r3, r2
 8017510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	4a28      	ldr	r2, [pc, #160]	@ (80175b8 <TIM_OC3_SetConfig+0xfc>)
 8017516:	4293      	cmp	r3, r2
 8017518:	d003      	beq.n	8017522 <TIM_OC3_SetConfig+0x66>
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	4a27      	ldr	r2, [pc, #156]	@ (80175bc <TIM_OC3_SetConfig+0x100>)
 801751e:	4293      	cmp	r3, r2
 8017520:	d10d      	bne.n	801753e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017522:	697b      	ldr	r3, [r7, #20]
 8017524:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	68db      	ldr	r3, [r3, #12]
 801752e:	021b      	lsls	r3, r3, #8
 8017530:	697a      	ldr	r2, [r7, #20]
 8017532:	4313      	orrs	r3, r2
 8017534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8017536:	697b      	ldr	r3, [r7, #20]
 8017538:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801753c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	4a1d      	ldr	r2, [pc, #116]	@ (80175b8 <TIM_OC3_SetConfig+0xfc>)
 8017542:	4293      	cmp	r3, r2
 8017544:	d00f      	beq.n	8017566 <TIM_OC3_SetConfig+0xaa>
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	4a1c      	ldr	r2, [pc, #112]	@ (80175bc <TIM_OC3_SetConfig+0x100>)
 801754a:	4293      	cmp	r3, r2
 801754c:	d00b      	beq.n	8017566 <TIM_OC3_SetConfig+0xaa>
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	4a1b      	ldr	r2, [pc, #108]	@ (80175c0 <TIM_OC3_SetConfig+0x104>)
 8017552:	4293      	cmp	r3, r2
 8017554:	d007      	beq.n	8017566 <TIM_OC3_SetConfig+0xaa>
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	4a1a      	ldr	r2, [pc, #104]	@ (80175c4 <TIM_OC3_SetConfig+0x108>)
 801755a:	4293      	cmp	r3, r2
 801755c:	d003      	beq.n	8017566 <TIM_OC3_SetConfig+0xaa>
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	4a19      	ldr	r2, [pc, #100]	@ (80175c8 <TIM_OC3_SetConfig+0x10c>)
 8017562:	4293      	cmp	r3, r2
 8017564:	d113      	bne.n	801758e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8017566:	693b      	ldr	r3, [r7, #16]
 8017568:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801756c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8017576:	683b      	ldr	r3, [r7, #0]
 8017578:	695b      	ldr	r3, [r3, #20]
 801757a:	011b      	lsls	r3, r3, #4
 801757c:	693a      	ldr	r2, [r7, #16]
 801757e:	4313      	orrs	r3, r2
 8017580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	699b      	ldr	r3, [r3, #24]
 8017586:	011b      	lsls	r3, r3, #4
 8017588:	693a      	ldr	r2, [r7, #16]
 801758a:	4313      	orrs	r3, r2
 801758c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	693a      	ldr	r2, [r7, #16]
 8017592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	68fa      	ldr	r2, [r7, #12]
 8017598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801759a:	683b      	ldr	r3, [r7, #0]
 801759c:	685a      	ldr	r2, [r3, #4]
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	697a      	ldr	r2, [r7, #20]
 80175a6:	621a      	str	r2, [r3, #32]
}
 80175a8:	bf00      	nop
 80175aa:	371c      	adds	r7, #28
 80175ac:	46bd      	mov	sp, r7
 80175ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b2:	4770      	bx	lr
 80175b4:	fffeff8f 	.word	0xfffeff8f
 80175b8:	40010000 	.word	0x40010000
 80175bc:	40010400 	.word	0x40010400
 80175c0:	40014000 	.word	0x40014000
 80175c4:	40014400 	.word	0x40014400
 80175c8:	40014800 	.word	0x40014800

080175cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80175cc:	b480      	push	{r7}
 80175ce:	b087      	sub	sp, #28
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
 80175d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	6a1b      	ldr	r3, [r3, #32]
 80175da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	6a1b      	ldr	r3, [r3, #32]
 80175e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	685b      	ldr	r3, [r3, #4]
 80175ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	69db      	ldr	r3, [r3, #28]
 80175f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80175f4:	68fa      	ldr	r2, [r7, #12]
 80175f6:	4b24      	ldr	r3, [pc, #144]	@ (8017688 <TIM_OC4_SetConfig+0xbc>)
 80175f8:	4013      	ands	r3, r2
 80175fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017604:	683b      	ldr	r3, [r7, #0]
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	021b      	lsls	r3, r3, #8
 801760a:	68fa      	ldr	r2, [r7, #12]
 801760c:	4313      	orrs	r3, r2
 801760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017610:	693b      	ldr	r3, [r7, #16]
 8017612:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017618:	683b      	ldr	r3, [r7, #0]
 801761a:	689b      	ldr	r3, [r3, #8]
 801761c:	031b      	lsls	r3, r3, #12
 801761e:	693a      	ldr	r2, [r7, #16]
 8017620:	4313      	orrs	r3, r2
 8017622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	4a19      	ldr	r2, [pc, #100]	@ (801768c <TIM_OC4_SetConfig+0xc0>)
 8017628:	4293      	cmp	r3, r2
 801762a:	d00f      	beq.n	801764c <TIM_OC4_SetConfig+0x80>
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	4a18      	ldr	r2, [pc, #96]	@ (8017690 <TIM_OC4_SetConfig+0xc4>)
 8017630:	4293      	cmp	r3, r2
 8017632:	d00b      	beq.n	801764c <TIM_OC4_SetConfig+0x80>
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	4a17      	ldr	r2, [pc, #92]	@ (8017694 <TIM_OC4_SetConfig+0xc8>)
 8017638:	4293      	cmp	r3, r2
 801763a:	d007      	beq.n	801764c <TIM_OC4_SetConfig+0x80>
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	4a16      	ldr	r2, [pc, #88]	@ (8017698 <TIM_OC4_SetConfig+0xcc>)
 8017640:	4293      	cmp	r3, r2
 8017642:	d003      	beq.n	801764c <TIM_OC4_SetConfig+0x80>
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	4a15      	ldr	r2, [pc, #84]	@ (801769c <TIM_OC4_SetConfig+0xd0>)
 8017648:	4293      	cmp	r3, r2
 801764a:	d109      	bne.n	8017660 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801764c:	697b      	ldr	r3, [r7, #20]
 801764e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	695b      	ldr	r3, [r3, #20]
 8017658:	019b      	lsls	r3, r3, #6
 801765a:	697a      	ldr	r2, [r7, #20]
 801765c:	4313      	orrs	r3, r2
 801765e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	697a      	ldr	r2, [r7, #20]
 8017664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	68fa      	ldr	r2, [r7, #12]
 801766a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801766c:	683b      	ldr	r3, [r7, #0]
 801766e:	685a      	ldr	r2, [r3, #4]
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	693a      	ldr	r2, [r7, #16]
 8017678:	621a      	str	r2, [r3, #32]
}
 801767a:	bf00      	nop
 801767c:	371c      	adds	r7, #28
 801767e:	46bd      	mov	sp, r7
 8017680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017684:	4770      	bx	lr
 8017686:	bf00      	nop
 8017688:	feff8fff 	.word	0xfeff8fff
 801768c:	40010000 	.word	0x40010000
 8017690:	40010400 	.word	0x40010400
 8017694:	40014000 	.word	0x40014000
 8017698:	40014400 	.word	0x40014400
 801769c:	40014800 	.word	0x40014800

080176a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80176a0:	b480      	push	{r7}
 80176a2:	b087      	sub	sp, #28
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
 80176a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	6a1b      	ldr	r3, [r3, #32]
 80176ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	6a1b      	ldr	r3, [r3, #32]
 80176b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	685b      	ldr	r3, [r3, #4]
 80176c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80176c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80176c8:	68fa      	ldr	r2, [r7, #12]
 80176ca:	4b21      	ldr	r3, [pc, #132]	@ (8017750 <TIM_OC5_SetConfig+0xb0>)
 80176cc:	4013      	ands	r3, r2
 80176ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80176d0:	683b      	ldr	r3, [r7, #0]
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	68fa      	ldr	r2, [r7, #12]
 80176d6:	4313      	orrs	r3, r2
 80176d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80176da:	693b      	ldr	r3, [r7, #16]
 80176dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80176e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80176e2:	683b      	ldr	r3, [r7, #0]
 80176e4:	689b      	ldr	r3, [r3, #8]
 80176e6:	041b      	lsls	r3, r3, #16
 80176e8:	693a      	ldr	r2, [r7, #16]
 80176ea:	4313      	orrs	r3, r2
 80176ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	4a18      	ldr	r2, [pc, #96]	@ (8017754 <TIM_OC5_SetConfig+0xb4>)
 80176f2:	4293      	cmp	r3, r2
 80176f4:	d00f      	beq.n	8017716 <TIM_OC5_SetConfig+0x76>
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	4a17      	ldr	r2, [pc, #92]	@ (8017758 <TIM_OC5_SetConfig+0xb8>)
 80176fa:	4293      	cmp	r3, r2
 80176fc:	d00b      	beq.n	8017716 <TIM_OC5_SetConfig+0x76>
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	4a16      	ldr	r2, [pc, #88]	@ (801775c <TIM_OC5_SetConfig+0xbc>)
 8017702:	4293      	cmp	r3, r2
 8017704:	d007      	beq.n	8017716 <TIM_OC5_SetConfig+0x76>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	4a15      	ldr	r2, [pc, #84]	@ (8017760 <TIM_OC5_SetConfig+0xc0>)
 801770a:	4293      	cmp	r3, r2
 801770c:	d003      	beq.n	8017716 <TIM_OC5_SetConfig+0x76>
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	4a14      	ldr	r2, [pc, #80]	@ (8017764 <TIM_OC5_SetConfig+0xc4>)
 8017712:	4293      	cmp	r3, r2
 8017714:	d109      	bne.n	801772a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017716:	697b      	ldr	r3, [r7, #20]
 8017718:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801771c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801771e:	683b      	ldr	r3, [r7, #0]
 8017720:	695b      	ldr	r3, [r3, #20]
 8017722:	021b      	lsls	r3, r3, #8
 8017724:	697a      	ldr	r2, [r7, #20]
 8017726:	4313      	orrs	r3, r2
 8017728:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	697a      	ldr	r2, [r7, #20]
 801772e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	68fa      	ldr	r2, [r7, #12]
 8017734:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017736:	683b      	ldr	r3, [r7, #0]
 8017738:	685a      	ldr	r2, [r3, #4]
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	693a      	ldr	r2, [r7, #16]
 8017742:	621a      	str	r2, [r3, #32]
}
 8017744:	bf00      	nop
 8017746:	371c      	adds	r7, #28
 8017748:	46bd      	mov	sp, r7
 801774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774e:	4770      	bx	lr
 8017750:	fffeff8f 	.word	0xfffeff8f
 8017754:	40010000 	.word	0x40010000
 8017758:	40010400 	.word	0x40010400
 801775c:	40014000 	.word	0x40014000
 8017760:	40014400 	.word	0x40014400
 8017764:	40014800 	.word	0x40014800

08017768 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8017768:	b480      	push	{r7}
 801776a:	b087      	sub	sp, #28
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
 8017770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	6a1b      	ldr	r3, [r3, #32]
 8017776:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	6a1b      	ldr	r3, [r3, #32]
 801777c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	685b      	ldr	r3, [r3, #4]
 8017788:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017790:	68fa      	ldr	r2, [r7, #12]
 8017792:	4b22      	ldr	r3, [pc, #136]	@ (801781c <TIM_OC6_SetConfig+0xb4>)
 8017794:	4013      	ands	r3, r2
 8017796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017798:	683b      	ldr	r3, [r7, #0]
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	021b      	lsls	r3, r3, #8
 801779e:	68fa      	ldr	r2, [r7, #12]
 80177a0:	4313      	orrs	r3, r2
 80177a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80177a4:	693b      	ldr	r3, [r7, #16]
 80177a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80177aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80177ac:	683b      	ldr	r3, [r7, #0]
 80177ae:	689b      	ldr	r3, [r3, #8]
 80177b0:	051b      	lsls	r3, r3, #20
 80177b2:	693a      	ldr	r2, [r7, #16]
 80177b4:	4313      	orrs	r3, r2
 80177b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	4a19      	ldr	r2, [pc, #100]	@ (8017820 <TIM_OC6_SetConfig+0xb8>)
 80177bc:	4293      	cmp	r3, r2
 80177be:	d00f      	beq.n	80177e0 <TIM_OC6_SetConfig+0x78>
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	4a18      	ldr	r2, [pc, #96]	@ (8017824 <TIM_OC6_SetConfig+0xbc>)
 80177c4:	4293      	cmp	r3, r2
 80177c6:	d00b      	beq.n	80177e0 <TIM_OC6_SetConfig+0x78>
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	4a17      	ldr	r2, [pc, #92]	@ (8017828 <TIM_OC6_SetConfig+0xc0>)
 80177cc:	4293      	cmp	r3, r2
 80177ce:	d007      	beq.n	80177e0 <TIM_OC6_SetConfig+0x78>
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	4a16      	ldr	r2, [pc, #88]	@ (801782c <TIM_OC6_SetConfig+0xc4>)
 80177d4:	4293      	cmp	r3, r2
 80177d6:	d003      	beq.n	80177e0 <TIM_OC6_SetConfig+0x78>
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	4a15      	ldr	r2, [pc, #84]	@ (8017830 <TIM_OC6_SetConfig+0xc8>)
 80177dc:	4293      	cmp	r3, r2
 80177de:	d109      	bne.n	80177f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80177e0:	697b      	ldr	r3, [r7, #20]
 80177e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80177e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80177e8:	683b      	ldr	r3, [r7, #0]
 80177ea:	695b      	ldr	r3, [r3, #20]
 80177ec:	029b      	lsls	r3, r3, #10
 80177ee:	697a      	ldr	r2, [r7, #20]
 80177f0:	4313      	orrs	r3, r2
 80177f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	697a      	ldr	r2, [r7, #20]
 80177f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	68fa      	ldr	r2, [r7, #12]
 80177fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017800:	683b      	ldr	r3, [r7, #0]
 8017802:	685a      	ldr	r2, [r3, #4]
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	693a      	ldr	r2, [r7, #16]
 801780c:	621a      	str	r2, [r3, #32]
}
 801780e:	bf00      	nop
 8017810:	371c      	adds	r7, #28
 8017812:	46bd      	mov	sp, r7
 8017814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017818:	4770      	bx	lr
 801781a:	bf00      	nop
 801781c:	feff8fff 	.word	0xfeff8fff
 8017820:	40010000 	.word	0x40010000
 8017824:	40010400 	.word	0x40010400
 8017828:	40014000 	.word	0x40014000
 801782c:	40014400 	.word	0x40014400
 8017830:	40014800 	.word	0x40014800

08017834 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8017834:	b480      	push	{r7}
 8017836:	b087      	sub	sp, #28
 8017838:	af00      	add	r7, sp, #0
 801783a:	60f8      	str	r0, [r7, #12]
 801783c:	60b9      	str	r1, [r7, #8]
 801783e:	607a      	str	r2, [r7, #4]
 8017840:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	6a1b      	ldr	r3, [r3, #32]
 8017846:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	6a1b      	ldr	r3, [r3, #32]
 801784c:	f023 0201 	bic.w	r2, r3, #1
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	699b      	ldr	r3, [r3, #24]
 8017858:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	4a2c      	ldr	r2, [pc, #176]	@ (8017910 <TIM_TI1_SetConfig+0xdc>)
 801785e:	4293      	cmp	r3, r2
 8017860:	d023      	beq.n	80178aa <TIM_TI1_SetConfig+0x76>
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017868:	d01f      	beq.n	80178aa <TIM_TI1_SetConfig+0x76>
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	4a29      	ldr	r2, [pc, #164]	@ (8017914 <TIM_TI1_SetConfig+0xe0>)
 801786e:	4293      	cmp	r3, r2
 8017870:	d01b      	beq.n	80178aa <TIM_TI1_SetConfig+0x76>
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	4a28      	ldr	r2, [pc, #160]	@ (8017918 <TIM_TI1_SetConfig+0xe4>)
 8017876:	4293      	cmp	r3, r2
 8017878:	d017      	beq.n	80178aa <TIM_TI1_SetConfig+0x76>
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	4a27      	ldr	r2, [pc, #156]	@ (801791c <TIM_TI1_SetConfig+0xe8>)
 801787e:	4293      	cmp	r3, r2
 8017880:	d013      	beq.n	80178aa <TIM_TI1_SetConfig+0x76>
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	4a26      	ldr	r2, [pc, #152]	@ (8017920 <TIM_TI1_SetConfig+0xec>)
 8017886:	4293      	cmp	r3, r2
 8017888:	d00f      	beq.n	80178aa <TIM_TI1_SetConfig+0x76>
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	4a25      	ldr	r2, [pc, #148]	@ (8017924 <TIM_TI1_SetConfig+0xf0>)
 801788e:	4293      	cmp	r3, r2
 8017890:	d00b      	beq.n	80178aa <TIM_TI1_SetConfig+0x76>
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	4a24      	ldr	r2, [pc, #144]	@ (8017928 <TIM_TI1_SetConfig+0xf4>)
 8017896:	4293      	cmp	r3, r2
 8017898:	d007      	beq.n	80178aa <TIM_TI1_SetConfig+0x76>
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	4a23      	ldr	r2, [pc, #140]	@ (801792c <TIM_TI1_SetConfig+0xf8>)
 801789e:	4293      	cmp	r3, r2
 80178a0:	d003      	beq.n	80178aa <TIM_TI1_SetConfig+0x76>
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	4a22      	ldr	r2, [pc, #136]	@ (8017930 <TIM_TI1_SetConfig+0xfc>)
 80178a6:	4293      	cmp	r3, r2
 80178a8:	d101      	bne.n	80178ae <TIM_TI1_SetConfig+0x7a>
 80178aa:	2301      	movs	r3, #1
 80178ac:	e000      	b.n	80178b0 <TIM_TI1_SetConfig+0x7c>
 80178ae:	2300      	movs	r3, #0
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d008      	beq.n	80178c6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80178b4:	697b      	ldr	r3, [r7, #20]
 80178b6:	f023 0303 	bic.w	r3, r3, #3
 80178ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80178bc:	697a      	ldr	r2, [r7, #20]
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	4313      	orrs	r3, r2
 80178c2:	617b      	str	r3, [r7, #20]
 80178c4:	e003      	b.n	80178ce <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80178c6:	697b      	ldr	r3, [r7, #20]
 80178c8:	f043 0301 	orr.w	r3, r3, #1
 80178cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80178ce:	697b      	ldr	r3, [r7, #20]
 80178d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80178d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	011b      	lsls	r3, r3, #4
 80178da:	b2db      	uxtb	r3, r3
 80178dc:	697a      	ldr	r2, [r7, #20]
 80178de:	4313      	orrs	r3, r2
 80178e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80178e2:	693b      	ldr	r3, [r7, #16]
 80178e4:	f023 030a 	bic.w	r3, r3, #10
 80178e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80178ea:	68bb      	ldr	r3, [r7, #8]
 80178ec:	f003 030a 	and.w	r3, r3, #10
 80178f0:	693a      	ldr	r2, [r7, #16]
 80178f2:	4313      	orrs	r3, r2
 80178f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	697a      	ldr	r2, [r7, #20]
 80178fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	693a      	ldr	r2, [r7, #16]
 8017900:	621a      	str	r2, [r3, #32]
}
 8017902:	bf00      	nop
 8017904:	371c      	adds	r7, #28
 8017906:	46bd      	mov	sp, r7
 8017908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790c:	4770      	bx	lr
 801790e:	bf00      	nop
 8017910:	40010000 	.word	0x40010000
 8017914:	40000400 	.word	0x40000400
 8017918:	40000800 	.word	0x40000800
 801791c:	40000c00 	.word	0x40000c00
 8017920:	40010400 	.word	0x40010400
 8017924:	40001800 	.word	0x40001800
 8017928:	40014000 	.word	0x40014000
 801792c:	4000e000 	.word	0x4000e000
 8017930:	4000e400 	.word	0x4000e400

08017934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017934:	b480      	push	{r7}
 8017936:	b087      	sub	sp, #28
 8017938:	af00      	add	r7, sp, #0
 801793a:	60f8      	str	r0, [r7, #12]
 801793c:	60b9      	str	r1, [r7, #8]
 801793e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	6a1b      	ldr	r3, [r3, #32]
 8017944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	6a1b      	ldr	r3, [r3, #32]
 801794a:	f023 0201 	bic.w	r2, r3, #1
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	699b      	ldr	r3, [r3, #24]
 8017956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017958:	693b      	ldr	r3, [r7, #16]
 801795a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801795e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	011b      	lsls	r3, r3, #4
 8017964:	693a      	ldr	r2, [r7, #16]
 8017966:	4313      	orrs	r3, r2
 8017968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801796a:	697b      	ldr	r3, [r7, #20]
 801796c:	f023 030a 	bic.w	r3, r3, #10
 8017970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017972:	697a      	ldr	r2, [r7, #20]
 8017974:	68bb      	ldr	r3, [r7, #8]
 8017976:	4313      	orrs	r3, r2
 8017978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	693a      	ldr	r2, [r7, #16]
 801797e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	697a      	ldr	r2, [r7, #20]
 8017984:	621a      	str	r2, [r3, #32]
}
 8017986:	bf00      	nop
 8017988:	371c      	adds	r7, #28
 801798a:	46bd      	mov	sp, r7
 801798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017990:	4770      	bx	lr

08017992 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017992:	b480      	push	{r7}
 8017994:	b087      	sub	sp, #28
 8017996:	af00      	add	r7, sp, #0
 8017998:	60f8      	str	r0, [r7, #12]
 801799a:	60b9      	str	r1, [r7, #8]
 801799c:	607a      	str	r2, [r7, #4]
 801799e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80179a0:	68fb      	ldr	r3, [r7, #12]
 80179a2:	6a1b      	ldr	r3, [r3, #32]
 80179a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	6a1b      	ldr	r3, [r3, #32]
 80179aa:	f023 0210 	bic.w	r2, r3, #16
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	699b      	ldr	r3, [r3, #24]
 80179b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80179b8:	693b      	ldr	r3, [r7, #16]
 80179ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80179be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	021b      	lsls	r3, r3, #8
 80179c4:	693a      	ldr	r2, [r7, #16]
 80179c6:	4313      	orrs	r3, r2
 80179c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80179ca:	693b      	ldr	r3, [r7, #16]
 80179cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80179d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80179d2:	683b      	ldr	r3, [r7, #0]
 80179d4:	031b      	lsls	r3, r3, #12
 80179d6:	b29b      	uxth	r3, r3
 80179d8:	693a      	ldr	r2, [r7, #16]
 80179da:	4313      	orrs	r3, r2
 80179dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80179de:	697b      	ldr	r3, [r7, #20]
 80179e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80179e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80179e6:	68bb      	ldr	r3, [r7, #8]
 80179e8:	011b      	lsls	r3, r3, #4
 80179ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80179ee:	697a      	ldr	r2, [r7, #20]
 80179f0:	4313      	orrs	r3, r2
 80179f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	693a      	ldr	r2, [r7, #16]
 80179f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	697a      	ldr	r2, [r7, #20]
 80179fe:	621a      	str	r2, [r3, #32]
}
 8017a00:	bf00      	nop
 8017a02:	371c      	adds	r7, #28
 8017a04:	46bd      	mov	sp, r7
 8017a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a0a:	4770      	bx	lr

08017a0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017a0c:	b480      	push	{r7}
 8017a0e:	b087      	sub	sp, #28
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	60f8      	str	r0, [r7, #12]
 8017a14:	60b9      	str	r1, [r7, #8]
 8017a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	6a1b      	ldr	r3, [r3, #32]
 8017a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	6a1b      	ldr	r3, [r3, #32]
 8017a22:	f023 0210 	bic.w	r2, r3, #16
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	699b      	ldr	r3, [r3, #24]
 8017a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017a30:	693b      	ldr	r3, [r7, #16]
 8017a32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	031b      	lsls	r3, r3, #12
 8017a3c:	693a      	ldr	r2, [r7, #16]
 8017a3e:	4313      	orrs	r3, r2
 8017a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017a42:	697b      	ldr	r3, [r7, #20]
 8017a44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017a48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017a4a:	68bb      	ldr	r3, [r7, #8]
 8017a4c:	011b      	lsls	r3, r3, #4
 8017a4e:	697a      	ldr	r2, [r7, #20]
 8017a50:	4313      	orrs	r3, r2
 8017a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	693a      	ldr	r2, [r7, #16]
 8017a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	697a      	ldr	r2, [r7, #20]
 8017a5e:	621a      	str	r2, [r3, #32]
}
 8017a60:	bf00      	nop
 8017a62:	371c      	adds	r7, #28
 8017a64:	46bd      	mov	sp, r7
 8017a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6a:	4770      	bx	lr

08017a6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017a6c:	b480      	push	{r7}
 8017a6e:	b087      	sub	sp, #28
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	60f8      	str	r0, [r7, #12]
 8017a74:	60b9      	str	r1, [r7, #8]
 8017a76:	607a      	str	r2, [r7, #4]
 8017a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	6a1b      	ldr	r3, [r3, #32]
 8017a7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	6a1b      	ldr	r3, [r3, #32]
 8017a84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	69db      	ldr	r3, [r3, #28]
 8017a90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017a92:	693b      	ldr	r3, [r7, #16]
 8017a94:	f023 0303 	bic.w	r3, r3, #3
 8017a98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8017a9a:	693a      	ldr	r2, [r7, #16]
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	4313      	orrs	r3, r2
 8017aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8017aa2:	693b      	ldr	r3, [r7, #16]
 8017aa4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017aa8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8017aaa:	683b      	ldr	r3, [r7, #0]
 8017aac:	011b      	lsls	r3, r3, #4
 8017aae:	b2db      	uxtb	r3, r3
 8017ab0:	693a      	ldr	r2, [r7, #16]
 8017ab2:	4313      	orrs	r3, r2
 8017ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8017ab6:	697b      	ldr	r3, [r7, #20]
 8017ab8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8017abc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8017abe:	68bb      	ldr	r3, [r7, #8]
 8017ac0:	021b      	lsls	r3, r3, #8
 8017ac2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8017ac6:	697a      	ldr	r2, [r7, #20]
 8017ac8:	4313      	orrs	r3, r2
 8017aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	693a      	ldr	r2, [r7, #16]
 8017ad0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	697a      	ldr	r2, [r7, #20]
 8017ad6:	621a      	str	r2, [r3, #32]
}
 8017ad8:	bf00      	nop
 8017ada:	371c      	adds	r7, #28
 8017adc:	46bd      	mov	sp, r7
 8017ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae2:	4770      	bx	lr

08017ae4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017ae4:	b480      	push	{r7}
 8017ae6:	b087      	sub	sp, #28
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	60f8      	str	r0, [r7, #12]
 8017aec:	60b9      	str	r1, [r7, #8]
 8017aee:	607a      	str	r2, [r7, #4]
 8017af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	6a1b      	ldr	r3, [r3, #32]
 8017af6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	6a1b      	ldr	r3, [r3, #32]
 8017afc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	69db      	ldr	r3, [r3, #28]
 8017b08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8017b0a:	693b      	ldr	r3, [r7, #16]
 8017b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017b10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	021b      	lsls	r3, r3, #8
 8017b16:	693a      	ldr	r2, [r7, #16]
 8017b18:	4313      	orrs	r3, r2
 8017b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8017b1c:	693b      	ldr	r3, [r7, #16]
 8017b1e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017b22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017b24:	683b      	ldr	r3, [r7, #0]
 8017b26:	031b      	lsls	r3, r3, #12
 8017b28:	b29b      	uxth	r3, r3
 8017b2a:	693a      	ldr	r2, [r7, #16]
 8017b2c:	4313      	orrs	r3, r2
 8017b2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017b30:	697b      	ldr	r3, [r7, #20]
 8017b32:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8017b36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017b38:	68bb      	ldr	r3, [r7, #8]
 8017b3a:	031b      	lsls	r3, r3, #12
 8017b3c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017b40:	697a      	ldr	r2, [r7, #20]
 8017b42:	4313      	orrs	r3, r2
 8017b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	693a      	ldr	r2, [r7, #16]
 8017b4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	697a      	ldr	r2, [r7, #20]
 8017b50:	621a      	str	r2, [r3, #32]
}
 8017b52:	bf00      	nop
 8017b54:	371c      	adds	r7, #28
 8017b56:	46bd      	mov	sp, r7
 8017b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5c:	4770      	bx	lr
	...

08017b60 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017b60:	b480      	push	{r7}
 8017b62:	b085      	sub	sp, #20
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
 8017b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	689b      	ldr	r3, [r3, #8]
 8017b6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017b70:	68fa      	ldr	r2, [r7, #12]
 8017b72:	4b09      	ldr	r3, [pc, #36]	@ (8017b98 <TIM_ITRx_SetConfig+0x38>)
 8017b74:	4013      	ands	r3, r2
 8017b76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017b78:	683a      	ldr	r2, [r7, #0]
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	4313      	orrs	r3, r2
 8017b7e:	f043 0307 	orr.w	r3, r3, #7
 8017b82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	68fa      	ldr	r2, [r7, #12]
 8017b88:	609a      	str	r2, [r3, #8]
}
 8017b8a:	bf00      	nop
 8017b8c:	3714      	adds	r7, #20
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b94:	4770      	bx	lr
 8017b96:	bf00      	nop
 8017b98:	ffcfff8f 	.word	0xffcfff8f

08017b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017b9c:	b480      	push	{r7}
 8017b9e:	b087      	sub	sp, #28
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	60f8      	str	r0, [r7, #12]
 8017ba4:	60b9      	str	r1, [r7, #8]
 8017ba6:	607a      	str	r2, [r7, #4]
 8017ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	689b      	ldr	r3, [r3, #8]
 8017bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017bb0:	697b      	ldr	r3, [r7, #20]
 8017bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	021a      	lsls	r2, r3, #8
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	431a      	orrs	r2, r3
 8017bc0:	68bb      	ldr	r3, [r7, #8]
 8017bc2:	4313      	orrs	r3, r2
 8017bc4:	697a      	ldr	r2, [r7, #20]
 8017bc6:	4313      	orrs	r3, r2
 8017bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	697a      	ldr	r2, [r7, #20]
 8017bce:	609a      	str	r2, [r3, #8]
}
 8017bd0:	bf00      	nop
 8017bd2:	371c      	adds	r7, #28
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bda:	4770      	bx	lr

08017bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017bdc:	b480      	push	{r7}
 8017bde:	b087      	sub	sp, #28
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	60f8      	str	r0, [r7, #12]
 8017be4:	60b9      	str	r1, [r7, #8]
 8017be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	f003 031f 	and.w	r3, r3, #31
 8017bee:	2201      	movs	r2, #1
 8017bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8017bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	6a1a      	ldr	r2, [r3, #32]
 8017bfa:	697b      	ldr	r3, [r7, #20]
 8017bfc:	43db      	mvns	r3, r3
 8017bfe:	401a      	ands	r2, r3
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	6a1a      	ldr	r2, [r3, #32]
 8017c08:	68bb      	ldr	r3, [r7, #8]
 8017c0a:	f003 031f 	and.w	r3, r3, #31
 8017c0e:	6879      	ldr	r1, [r7, #4]
 8017c10:	fa01 f303 	lsl.w	r3, r1, r3
 8017c14:	431a      	orrs	r2, r3
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	621a      	str	r2, [r3, #32]
}
 8017c1a:	bf00      	nop
 8017c1c:	371c      	adds	r7, #28
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c24:	4770      	bx	lr
	...

08017c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017c28:	b480      	push	{r7}
 8017c2a:	b085      	sub	sp, #20
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
 8017c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017c38:	2b01      	cmp	r3, #1
 8017c3a:	d101      	bne.n	8017c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017c3c:	2302      	movs	r3, #2
 8017c3e:	e077      	b.n	8017d30 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	2201      	movs	r2, #1
 8017c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2202      	movs	r2, #2
 8017c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	685b      	ldr	r3, [r3, #4]
 8017c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	689b      	ldr	r3, [r3, #8]
 8017c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	4a35      	ldr	r2, [pc, #212]	@ (8017d3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017c66:	4293      	cmp	r3, r2
 8017c68:	d004      	beq.n	8017c74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	4a34      	ldr	r2, [pc, #208]	@ (8017d40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017c70:	4293      	cmp	r3, r2
 8017c72:	d108      	bne.n	8017c86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017c7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017c7c:	683b      	ldr	r3, [r7, #0]
 8017c7e:	685b      	ldr	r3, [r3, #4]
 8017c80:	68fa      	ldr	r2, [r7, #12]
 8017c82:	4313      	orrs	r3, r2
 8017c84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017c8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017c8e:	683b      	ldr	r3, [r7, #0]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	68fa      	ldr	r2, [r7, #12]
 8017c94:	4313      	orrs	r3, r2
 8017c96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	68fa      	ldr	r2, [r7, #12]
 8017c9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	4a25      	ldr	r2, [pc, #148]	@ (8017d3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017ca6:	4293      	cmp	r3, r2
 8017ca8:	d02c      	beq.n	8017d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017cb2:	d027      	beq.n	8017d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	4a22      	ldr	r2, [pc, #136]	@ (8017d44 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017cba:	4293      	cmp	r3, r2
 8017cbc:	d022      	beq.n	8017d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	4a21      	ldr	r2, [pc, #132]	@ (8017d48 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8017cc4:	4293      	cmp	r3, r2
 8017cc6:	d01d      	beq.n	8017d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8017d4c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8017cce:	4293      	cmp	r3, r2
 8017cd0:	d018      	beq.n	8017d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8017d40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017cd8:	4293      	cmp	r3, r2
 8017cda:	d013      	beq.n	8017d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8017d50 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8017ce2:	4293      	cmp	r3, r2
 8017ce4:	d00e      	beq.n	8017d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	4a1a      	ldr	r2, [pc, #104]	@ (8017d54 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8017cec:	4293      	cmp	r3, r2
 8017cee:	d009      	beq.n	8017d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	4a18      	ldr	r2, [pc, #96]	@ (8017d58 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017cf6:	4293      	cmp	r3, r2
 8017cf8:	d004      	beq.n	8017d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	4a17      	ldr	r2, [pc, #92]	@ (8017d5c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017d00:	4293      	cmp	r3, r2
 8017d02:	d10c      	bne.n	8017d1e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017d04:	68bb      	ldr	r3, [r7, #8]
 8017d06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017d0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017d0c:	683b      	ldr	r3, [r7, #0]
 8017d0e:	689b      	ldr	r3, [r3, #8]
 8017d10:	68ba      	ldr	r2, [r7, #8]
 8017d12:	4313      	orrs	r3, r2
 8017d14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	68ba      	ldr	r2, [r7, #8]
 8017d1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	2201      	movs	r2, #1
 8017d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	2200      	movs	r2, #0
 8017d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017d2e:	2300      	movs	r3, #0
}
 8017d30:	4618      	mov	r0, r3
 8017d32:	3714      	adds	r7, #20
 8017d34:	46bd      	mov	sp, r7
 8017d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d3a:	4770      	bx	lr
 8017d3c:	40010000 	.word	0x40010000
 8017d40:	40010400 	.word	0x40010400
 8017d44:	40000400 	.word	0x40000400
 8017d48:	40000800 	.word	0x40000800
 8017d4c:	40000c00 	.word	0x40000c00
 8017d50:	40001800 	.word	0x40001800
 8017d54:	40014000 	.word	0x40014000
 8017d58:	4000e000 	.word	0x4000e000
 8017d5c:	4000e400 	.word	0x4000e400

08017d60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017d60:	b480      	push	{r7}
 8017d62:	b085      	sub	sp, #20
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]
 8017d68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017d74:	2b01      	cmp	r3, #1
 8017d76:	d101      	bne.n	8017d7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017d78:	2302      	movs	r3, #2
 8017d7a:	e073      	b.n	8017e64 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2201      	movs	r2, #1
 8017d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017d8a:	683b      	ldr	r3, [r7, #0]
 8017d8c:	68db      	ldr	r3, [r3, #12]
 8017d8e:	4313      	orrs	r3, r2
 8017d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017d98:	683b      	ldr	r3, [r7, #0]
 8017d9a:	689b      	ldr	r3, [r3, #8]
 8017d9c:	4313      	orrs	r3, r2
 8017d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017da6:	683b      	ldr	r3, [r7, #0]
 8017da8:	685b      	ldr	r3, [r3, #4]
 8017daa:	4313      	orrs	r3, r2
 8017dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017db4:	683b      	ldr	r3, [r7, #0]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	4313      	orrs	r3, r2
 8017dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017dc2:	683b      	ldr	r3, [r7, #0]
 8017dc4:	691b      	ldr	r3, [r3, #16]
 8017dc6:	4313      	orrs	r3, r2
 8017dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017dd0:	683b      	ldr	r3, [r7, #0]
 8017dd2:	695b      	ldr	r3, [r3, #20]
 8017dd4:	4313      	orrs	r3, r2
 8017dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017dde:	683b      	ldr	r3, [r7, #0]
 8017de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017de2:	4313      	orrs	r3, r2
 8017de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	699b      	ldr	r3, [r3, #24]
 8017df0:	041b      	lsls	r3, r3, #16
 8017df2:	4313      	orrs	r3, r2
 8017df4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017dfc:	683b      	ldr	r3, [r7, #0]
 8017dfe:	69db      	ldr	r3, [r3, #28]
 8017e00:	4313      	orrs	r3, r2
 8017e02:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	4a19      	ldr	r2, [pc, #100]	@ (8017e70 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8017e0a:	4293      	cmp	r3, r2
 8017e0c:	d004      	beq.n	8017e18 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	4a18      	ldr	r2, [pc, #96]	@ (8017e74 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017e14:	4293      	cmp	r3, r2
 8017e16:	d11c      	bne.n	8017e52 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e22:	051b      	lsls	r3, r3, #20
 8017e24:	4313      	orrs	r3, r2
 8017e26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017e2e:	683b      	ldr	r3, [r7, #0]
 8017e30:	6a1b      	ldr	r3, [r3, #32]
 8017e32:	4313      	orrs	r3, r2
 8017e34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017e3c:	683b      	ldr	r3, [r7, #0]
 8017e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e40:	4313      	orrs	r3, r2
 8017e42:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017e4a:	683b      	ldr	r3, [r7, #0]
 8017e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e4e:	4313      	orrs	r3, r2
 8017e50:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	68fa      	ldr	r2, [r7, #12]
 8017e58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017e62:	2300      	movs	r3, #0
}
 8017e64:	4618      	mov	r0, r3
 8017e66:	3714      	adds	r7, #20
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6e:	4770      	bx	lr
 8017e70:	40010000 	.word	0x40010000
 8017e74:	40010400 	.word	0x40010400

08017e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017e78:	b480      	push	{r7}
 8017e7a:	b083      	sub	sp, #12
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017e80:	bf00      	nop
 8017e82:	370c      	adds	r7, #12
 8017e84:	46bd      	mov	sp, r7
 8017e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e8a:	4770      	bx	lr

08017e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017e8c:	b480      	push	{r7}
 8017e8e:	b083      	sub	sp, #12
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017e94:	bf00      	nop
 8017e96:	370c      	adds	r7, #12
 8017e98:	46bd      	mov	sp, r7
 8017e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9e:	4770      	bx	lr

08017ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017ea0:	b480      	push	{r7}
 8017ea2:	b083      	sub	sp, #12
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017ea8:	bf00      	nop
 8017eaa:	370c      	adds	r7, #12
 8017eac:	46bd      	mov	sp, r7
 8017eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb2:	4770      	bx	lr

08017eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b082      	sub	sp, #8
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d101      	bne.n	8017ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	e042      	b.n	8017f4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d106      	bne.n	8017ede <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017ed8:	6878      	ldr	r0, [r7, #4]
 8017eda:	f7f1 fa29 	bl	8009330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	2224      	movs	r2, #36	@ 0x24
 8017ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	681a      	ldr	r2, [r3, #0]
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	f022 0201 	bic.w	r2, r2, #1
 8017ef4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d002      	beq.n	8017f04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017efe:	6878      	ldr	r0, [r7, #4]
 8017f00:	f001 fbf8 	bl	80196f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017f04:	6878      	ldr	r0, [r7, #4]
 8017f06:	f000 fd89 	bl	8018a1c <UART_SetConfig>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	2b01      	cmp	r3, #1
 8017f0e:	d101      	bne.n	8017f14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017f10:	2301      	movs	r3, #1
 8017f12:	e01b      	b.n	8017f4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	685a      	ldr	r2, [r3, #4]
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	689a      	ldr	r2, [r3, #8]
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	681a      	ldr	r2, [r3, #0]
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	f042 0201 	orr.w	r2, r2, #1
 8017f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017f44:	6878      	ldr	r0, [r7, #4]
 8017f46:	f001 fc77 	bl	8019838 <UART_CheckIdleState>
 8017f4a:	4603      	mov	r3, r0
}
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	3708      	adds	r7, #8
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}

08017f54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b08a      	sub	sp, #40	@ 0x28
 8017f58:	af02      	add	r7, sp, #8
 8017f5a:	60f8      	str	r0, [r7, #12]
 8017f5c:	60b9      	str	r1, [r7, #8]
 8017f5e:	603b      	str	r3, [r7, #0]
 8017f60:	4613      	mov	r3, r2
 8017f62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017f64:	68fb      	ldr	r3, [r7, #12]
 8017f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f6a:	2b20      	cmp	r3, #32
 8017f6c:	d17b      	bne.n	8018066 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017f6e:	68bb      	ldr	r3, [r7, #8]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d002      	beq.n	8017f7a <HAL_UART_Transmit+0x26>
 8017f74:	88fb      	ldrh	r3, [r7, #6]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d101      	bne.n	8017f7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017f7a:	2301      	movs	r3, #1
 8017f7c:	e074      	b.n	8018068 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	2200      	movs	r2, #0
 8017f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	2221      	movs	r2, #33	@ 0x21
 8017f8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017f8e:	f7f1 faf1 	bl	8009574 <HAL_GetTick>
 8017f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	88fa      	ldrh	r2, [r7, #6]
 8017f98:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	88fa      	ldrh	r2, [r7, #6]
 8017fa0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	689b      	ldr	r3, [r3, #8]
 8017fa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017fac:	d108      	bne.n	8017fc0 <HAL_UART_Transmit+0x6c>
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	691b      	ldr	r3, [r3, #16]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d104      	bne.n	8017fc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017fba:	68bb      	ldr	r3, [r7, #8]
 8017fbc:	61bb      	str	r3, [r7, #24]
 8017fbe:	e003      	b.n	8017fc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017fc0:	68bb      	ldr	r3, [r7, #8]
 8017fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017fc8:	e030      	b.n	801802c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017fca:	683b      	ldr	r3, [r7, #0]
 8017fcc:	9300      	str	r3, [sp, #0]
 8017fce:	697b      	ldr	r3, [r7, #20]
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	2180      	movs	r1, #128	@ 0x80
 8017fd4:	68f8      	ldr	r0, [r7, #12]
 8017fd6:	f001 fcd9 	bl	801998c <UART_WaitOnFlagUntilTimeout>
 8017fda:	4603      	mov	r3, r0
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d005      	beq.n	8017fec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	2220      	movs	r2, #32
 8017fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017fe8:	2303      	movs	r3, #3
 8017fea:	e03d      	b.n	8018068 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017fec:	69fb      	ldr	r3, [r7, #28]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d10b      	bne.n	801800a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017ff2:	69bb      	ldr	r3, [r7, #24]
 8017ff4:	881b      	ldrh	r3, [r3, #0]
 8017ff6:	461a      	mov	r2, r3
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018000:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8018002:	69bb      	ldr	r3, [r7, #24]
 8018004:	3302      	adds	r3, #2
 8018006:	61bb      	str	r3, [r7, #24]
 8018008:	e007      	b.n	801801a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801800a:	69fb      	ldr	r3, [r7, #28]
 801800c:	781a      	ldrb	r2, [r3, #0]
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8018014:	69fb      	ldr	r3, [r7, #28]
 8018016:	3301      	adds	r3, #1
 8018018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018020:	b29b      	uxth	r3, r3
 8018022:	3b01      	subs	r3, #1
 8018024:	b29a      	uxth	r2, r3
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018032:	b29b      	uxth	r3, r3
 8018034:	2b00      	cmp	r3, #0
 8018036:	d1c8      	bne.n	8017fca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018038:	683b      	ldr	r3, [r7, #0]
 801803a:	9300      	str	r3, [sp, #0]
 801803c:	697b      	ldr	r3, [r7, #20]
 801803e:	2200      	movs	r2, #0
 8018040:	2140      	movs	r1, #64	@ 0x40
 8018042:	68f8      	ldr	r0, [r7, #12]
 8018044:	f001 fca2 	bl	801998c <UART_WaitOnFlagUntilTimeout>
 8018048:	4603      	mov	r3, r0
 801804a:	2b00      	cmp	r3, #0
 801804c:	d005      	beq.n	801805a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	2220      	movs	r2, #32
 8018052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8018056:	2303      	movs	r3, #3
 8018058:	e006      	b.n	8018068 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	2220      	movs	r2, #32
 801805e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8018062:	2300      	movs	r3, #0
 8018064:	e000      	b.n	8018068 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8018066:	2302      	movs	r3, #2
  }
}
 8018068:	4618      	mov	r0, r3
 801806a:	3720      	adds	r7, #32
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}

08018070 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8018070:	b480      	push	{r7}
 8018072:	b091      	sub	sp, #68	@ 0x44
 8018074:	af00      	add	r7, sp, #0
 8018076:	60f8      	str	r0, [r7, #12]
 8018078:	60b9      	str	r1, [r7, #8]
 801807a:	4613      	mov	r3, r2
 801807c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018084:	2b20      	cmp	r3, #32
 8018086:	d178      	bne.n	801817a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8018088:	68bb      	ldr	r3, [r7, #8]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d002      	beq.n	8018094 <HAL_UART_Transmit_IT+0x24>
 801808e:	88fb      	ldrh	r3, [r7, #6]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d101      	bne.n	8018098 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8018094:	2301      	movs	r3, #1
 8018096:	e071      	b.n	801817c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	68ba      	ldr	r2, [r7, #8]
 801809c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	88fa      	ldrh	r2, [r7, #6]
 80180a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	88fa      	ldrh	r2, [r7, #6]
 80180aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	2200      	movs	r2, #0
 80180b2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	2200      	movs	r2, #0
 80180b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	2221      	movs	r2, #33	@ 0x21
 80180c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80180c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80180cc:	d12a      	bne.n	8018124 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	689b      	ldr	r3, [r3, #8]
 80180d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80180d6:	d107      	bne.n	80180e8 <HAL_UART_Transmit_IT+0x78>
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	691b      	ldr	r3, [r3, #16]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d103      	bne.n	80180e8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	4a29      	ldr	r2, [pc, #164]	@ (8018188 <HAL_UART_Transmit_IT+0x118>)
 80180e4:	679a      	str	r2, [r3, #120]	@ 0x78
 80180e6:	e002      	b.n	80180ee <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	4a28      	ldr	r2, [pc, #160]	@ (801818c <HAL_UART_Transmit_IT+0x11c>)
 80180ec:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	3308      	adds	r3, #8
 80180f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180f8:	e853 3f00 	ldrex	r3, [r3]
 80180fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80180fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018100:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8018104:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	3308      	adds	r3, #8
 801810c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801810e:	637a      	str	r2, [r7, #52]	@ 0x34
 8018110:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018112:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018114:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018116:	e841 2300 	strex	r3, r2, [r1]
 801811a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801811c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801811e:	2b00      	cmp	r3, #0
 8018120:	d1e5      	bne.n	80180ee <HAL_UART_Transmit_IT+0x7e>
 8018122:	e028      	b.n	8018176 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	689b      	ldr	r3, [r3, #8]
 8018128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801812c:	d107      	bne.n	801813e <HAL_UART_Transmit_IT+0xce>
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	691b      	ldr	r3, [r3, #16]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d103      	bne.n	801813e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	4a15      	ldr	r2, [pc, #84]	@ (8018190 <HAL_UART_Transmit_IT+0x120>)
 801813a:	679a      	str	r2, [r3, #120]	@ 0x78
 801813c:	e002      	b.n	8018144 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	4a14      	ldr	r2, [pc, #80]	@ (8018194 <HAL_UART_Transmit_IT+0x124>)
 8018142:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801814a:	697b      	ldr	r3, [r7, #20]
 801814c:	e853 3f00 	ldrex	r3, [r3]
 8018150:	613b      	str	r3, [r7, #16]
   return(result);
 8018152:	693b      	ldr	r3, [r7, #16]
 8018154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018158:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	461a      	mov	r2, r3
 8018160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018162:	623b      	str	r3, [r7, #32]
 8018164:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018166:	69f9      	ldr	r1, [r7, #28]
 8018168:	6a3a      	ldr	r2, [r7, #32]
 801816a:	e841 2300 	strex	r3, r2, [r1]
 801816e:	61bb      	str	r3, [r7, #24]
   return(result);
 8018170:	69bb      	ldr	r3, [r7, #24]
 8018172:	2b00      	cmp	r3, #0
 8018174:	d1e6      	bne.n	8018144 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8018176:	2300      	movs	r3, #0
 8018178:	e000      	b.n	801817c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 801817a:	2302      	movs	r3, #2
  }
}
 801817c:	4618      	mov	r0, r3
 801817e:	3744      	adds	r7, #68	@ 0x44
 8018180:	46bd      	mov	sp, r7
 8018182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018186:	4770      	bx	lr
 8018188:	08019ff7 	.word	0x08019ff7
 801818c:	08019f17 	.word	0x08019f17
 8018190:	08019e55 	.word	0x08019e55
 8018194:	08019d9d 	.word	0x08019d9d

08018198 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b08a      	sub	sp, #40	@ 0x28
 801819c:	af00      	add	r7, sp, #0
 801819e:	60f8      	str	r0, [r7, #12]
 80181a0:	60b9      	str	r1, [r7, #8]
 80181a2:	4613      	mov	r3, r2
 80181a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80181ac:	2b20      	cmp	r3, #32
 80181ae:	d137      	bne.n	8018220 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80181b0:	68bb      	ldr	r3, [r7, #8]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d002      	beq.n	80181bc <HAL_UART_Receive_IT+0x24>
 80181b6:	88fb      	ldrh	r3, [r7, #6]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d101      	bne.n	80181c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80181bc:	2301      	movs	r3, #1
 80181be:	e030      	b.n	8018222 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	2200      	movs	r2, #0
 80181c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	4a18      	ldr	r2, [pc, #96]	@ (801822c <HAL_UART_Receive_IT+0x94>)
 80181cc:	4293      	cmp	r3, r2
 80181ce:	d01f      	beq.n	8018210 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	685b      	ldr	r3, [r3, #4]
 80181d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d018      	beq.n	8018210 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181e4:	697b      	ldr	r3, [r7, #20]
 80181e6:	e853 3f00 	ldrex	r3, [r3]
 80181ea:	613b      	str	r3, [r7, #16]
   return(result);
 80181ec:	693b      	ldr	r3, [r7, #16]
 80181ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80181f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	461a      	mov	r2, r3
 80181fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181fc:	623b      	str	r3, [r7, #32]
 80181fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018200:	69f9      	ldr	r1, [r7, #28]
 8018202:	6a3a      	ldr	r2, [r7, #32]
 8018204:	e841 2300 	strex	r3, r2, [r1]
 8018208:	61bb      	str	r3, [r7, #24]
   return(result);
 801820a:	69bb      	ldr	r3, [r7, #24]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d1e6      	bne.n	80181de <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018210:	88fb      	ldrh	r3, [r7, #6]
 8018212:	461a      	mov	r2, r3
 8018214:	68b9      	ldr	r1, [r7, #8]
 8018216:	68f8      	ldr	r0, [r7, #12]
 8018218:	f001 fc26 	bl	8019a68 <UART_Start_Receive_IT>
 801821c:	4603      	mov	r3, r0
 801821e:	e000      	b.n	8018222 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018220:	2302      	movs	r3, #2
  }
}
 8018222:	4618      	mov	r0, r3
 8018224:	3728      	adds	r7, #40	@ 0x28
 8018226:	46bd      	mov	sp, r7
 8018228:	bd80      	pop	{r7, pc}
 801822a:	bf00      	nop
 801822c:	58000c00 	.word	0x58000c00

08018230 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b0ba      	sub	sp, #232	@ 0xe8
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	69db      	ldr	r3, [r3, #28]
 801823e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	689b      	ldr	r3, [r3, #8]
 8018252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8018256:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801825a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801825e:	4013      	ands	r3, r2
 8018260:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8018264:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018268:	2b00      	cmp	r3, #0
 801826a:	d11b      	bne.n	80182a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801826c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018270:	f003 0320 	and.w	r3, r3, #32
 8018274:	2b00      	cmp	r3, #0
 8018276:	d015      	beq.n	80182a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8018278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801827c:	f003 0320 	and.w	r3, r3, #32
 8018280:	2b00      	cmp	r3, #0
 8018282:	d105      	bne.n	8018290 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8018284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801828c:	2b00      	cmp	r3, #0
 801828e:	d009      	beq.n	80182a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018294:	2b00      	cmp	r3, #0
 8018296:	f000 8393 	beq.w	80189c0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801829e:	6878      	ldr	r0, [r7, #4]
 80182a0:	4798      	blx	r3
      }
      return;
 80182a2:	e38d      	b.n	80189c0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80182a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	f000 8123 	beq.w	80184f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80182ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80182b2:	4b8d      	ldr	r3, [pc, #564]	@ (80184e8 <HAL_UART_IRQHandler+0x2b8>)
 80182b4:	4013      	ands	r3, r2
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d106      	bne.n	80182c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80182ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80182be:	4b8b      	ldr	r3, [pc, #556]	@ (80184ec <HAL_UART_IRQHandler+0x2bc>)
 80182c0:	4013      	ands	r3, r2
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	f000 8116 	beq.w	80184f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80182c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182cc:	f003 0301 	and.w	r3, r3, #1
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d011      	beq.n	80182f8 <HAL_UART_IRQHandler+0xc8>
 80182d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80182d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d00b      	beq.n	80182f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	2201      	movs	r2, #1
 80182e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80182ee:	f043 0201 	orr.w	r2, r3, #1
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80182f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182fc:	f003 0302 	and.w	r3, r3, #2
 8018300:	2b00      	cmp	r3, #0
 8018302:	d011      	beq.n	8018328 <HAL_UART_IRQHandler+0xf8>
 8018304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018308:	f003 0301 	and.w	r3, r3, #1
 801830c:	2b00      	cmp	r3, #0
 801830e:	d00b      	beq.n	8018328 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	2202      	movs	r2, #2
 8018316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801831e:	f043 0204 	orr.w	r2, r3, #4
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801832c:	f003 0304 	and.w	r3, r3, #4
 8018330:	2b00      	cmp	r3, #0
 8018332:	d011      	beq.n	8018358 <HAL_UART_IRQHandler+0x128>
 8018334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018338:	f003 0301 	and.w	r3, r3, #1
 801833c:	2b00      	cmp	r3, #0
 801833e:	d00b      	beq.n	8018358 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	2204      	movs	r2, #4
 8018346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801834e:	f043 0202 	orr.w	r2, r3, #2
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801835c:	f003 0308 	and.w	r3, r3, #8
 8018360:	2b00      	cmp	r3, #0
 8018362:	d017      	beq.n	8018394 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018368:	f003 0320 	and.w	r3, r3, #32
 801836c:	2b00      	cmp	r3, #0
 801836e:	d105      	bne.n	801837c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8018370:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8018374:	4b5c      	ldr	r3, [pc, #368]	@ (80184e8 <HAL_UART_IRQHandler+0x2b8>)
 8018376:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018378:	2b00      	cmp	r3, #0
 801837a:	d00b      	beq.n	8018394 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	2208      	movs	r2, #8
 8018382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801838a:	f043 0208 	orr.w	r2, r3, #8
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8018394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801839c:	2b00      	cmp	r3, #0
 801839e:	d012      	beq.n	80183c6 <HAL_UART_IRQHandler+0x196>
 80183a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80183a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d00c      	beq.n	80183c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80183b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183bc:	f043 0220 	orr.w	r2, r3, #32
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	f000 82f9 	beq.w	80189c4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80183d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80183d6:	f003 0320 	and.w	r3, r3, #32
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d013      	beq.n	8018406 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80183de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80183e2:	f003 0320 	and.w	r3, r3, #32
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d105      	bne.n	80183f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80183ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80183ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d007      	beq.n	8018406 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d003      	beq.n	8018406 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018402:	6878      	ldr	r0, [r7, #4]
 8018404:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801840c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	689b      	ldr	r3, [r3, #8]
 8018416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801841a:	2b40      	cmp	r3, #64	@ 0x40
 801841c:	d005      	beq.n	801842a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801841e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8018422:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018426:	2b00      	cmp	r3, #0
 8018428:	d054      	beq.n	80184d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801842a:	6878      	ldr	r0, [r7, #4]
 801842c:	f001 fc3e 	bl	8019cac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	689b      	ldr	r3, [r3, #8]
 8018436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801843a:	2b40      	cmp	r3, #64	@ 0x40
 801843c:	d146      	bne.n	80184cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	3308      	adds	r3, #8
 8018444:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018448:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801844c:	e853 3f00 	ldrex	r3, [r3]
 8018450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8018454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801845c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	3308      	adds	r3, #8
 8018466:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801846a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801846e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018472:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8018476:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801847a:	e841 2300 	strex	r3, r2, [r1]
 801847e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8018482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018486:	2b00      	cmp	r3, #0
 8018488:	d1d9      	bne.n	801843e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018490:	2b00      	cmp	r3, #0
 8018492:	d017      	beq.n	80184c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801849a:	4a15      	ldr	r2, [pc, #84]	@ (80184f0 <HAL_UART_IRQHandler+0x2c0>)
 801849c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7f4 fa7b 	bl	800c9a0 <HAL_DMA_Abort_IT>
 80184aa:	4603      	mov	r3, r0
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d019      	beq.n	80184e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80184b8:	687a      	ldr	r2, [r7, #4]
 80184ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80184be:	4610      	mov	r0, r2
 80184c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184c2:	e00f      	b.n	80184e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80184c4:	6878      	ldr	r0, [r7, #4]
 80184c6:	f000 fa93 	bl	80189f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184ca:	e00b      	b.n	80184e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f000 fa8f 	bl	80189f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184d2:	e007      	b.n	80184e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80184d4:	6878      	ldr	r0, [r7, #4]
 80184d6:	f000 fa8b 	bl	80189f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	2200      	movs	r2, #0
 80184de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80184e2:	e26f      	b.n	80189c4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184e4:	bf00      	nop
    return;
 80184e6:	e26d      	b.n	80189c4 <HAL_UART_IRQHandler+0x794>
 80184e8:	10000001 	.word	0x10000001
 80184ec:	04000120 	.word	0x04000120
 80184f0:	08019d79 	.word	0x08019d79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80184f8:	2b01      	cmp	r3, #1
 80184fa:	f040 8203 	bne.w	8018904 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80184fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018502:	f003 0310 	and.w	r3, r3, #16
 8018506:	2b00      	cmp	r3, #0
 8018508:	f000 81fc 	beq.w	8018904 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801850c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018510:	f003 0310 	and.w	r3, r3, #16
 8018514:	2b00      	cmp	r3, #0
 8018516:	f000 81f5 	beq.w	8018904 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	2210      	movs	r2, #16
 8018520:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	689b      	ldr	r3, [r3, #8]
 8018528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801852c:	2b40      	cmp	r3, #64	@ 0x40
 801852e:	f040 816d 	bne.w	801880c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	4aa4      	ldr	r2, [pc, #656]	@ (80187cc <HAL_UART_IRQHandler+0x59c>)
 801853c:	4293      	cmp	r3, r2
 801853e:	d068      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	4aa1      	ldr	r2, [pc, #644]	@ (80187d0 <HAL_UART_IRQHandler+0x5a0>)
 801854a:	4293      	cmp	r3, r2
 801854c:	d061      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	4a9f      	ldr	r2, [pc, #636]	@ (80187d4 <HAL_UART_IRQHandler+0x5a4>)
 8018558:	4293      	cmp	r3, r2
 801855a:	d05a      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	4a9c      	ldr	r2, [pc, #624]	@ (80187d8 <HAL_UART_IRQHandler+0x5a8>)
 8018566:	4293      	cmp	r3, r2
 8018568:	d053      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	4a9a      	ldr	r2, [pc, #616]	@ (80187dc <HAL_UART_IRQHandler+0x5ac>)
 8018574:	4293      	cmp	r3, r2
 8018576:	d04c      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	4a97      	ldr	r2, [pc, #604]	@ (80187e0 <HAL_UART_IRQHandler+0x5b0>)
 8018582:	4293      	cmp	r3, r2
 8018584:	d045      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	4a95      	ldr	r2, [pc, #596]	@ (80187e4 <HAL_UART_IRQHandler+0x5b4>)
 8018590:	4293      	cmp	r3, r2
 8018592:	d03e      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	4a92      	ldr	r2, [pc, #584]	@ (80187e8 <HAL_UART_IRQHandler+0x5b8>)
 801859e:	4293      	cmp	r3, r2
 80185a0:	d037      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	4a90      	ldr	r2, [pc, #576]	@ (80187ec <HAL_UART_IRQHandler+0x5bc>)
 80185ac:	4293      	cmp	r3, r2
 80185ae:	d030      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	4a8d      	ldr	r2, [pc, #564]	@ (80187f0 <HAL_UART_IRQHandler+0x5c0>)
 80185ba:	4293      	cmp	r3, r2
 80185bc:	d029      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	4a8b      	ldr	r2, [pc, #556]	@ (80187f4 <HAL_UART_IRQHandler+0x5c4>)
 80185c8:	4293      	cmp	r3, r2
 80185ca:	d022      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	4a88      	ldr	r2, [pc, #544]	@ (80187f8 <HAL_UART_IRQHandler+0x5c8>)
 80185d6:	4293      	cmp	r3, r2
 80185d8:	d01b      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	4a86      	ldr	r2, [pc, #536]	@ (80187fc <HAL_UART_IRQHandler+0x5cc>)
 80185e4:	4293      	cmp	r3, r2
 80185e6:	d014      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	4a83      	ldr	r2, [pc, #524]	@ (8018800 <HAL_UART_IRQHandler+0x5d0>)
 80185f2:	4293      	cmp	r3, r2
 80185f4:	d00d      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	4a81      	ldr	r2, [pc, #516]	@ (8018804 <HAL_UART_IRQHandler+0x5d4>)
 8018600:	4293      	cmp	r3, r2
 8018602:	d006      	beq.n	8018612 <HAL_UART_IRQHandler+0x3e2>
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	4a7e      	ldr	r2, [pc, #504]	@ (8018808 <HAL_UART_IRQHandler+0x5d8>)
 801860e:	4293      	cmp	r3, r2
 8018610:	d106      	bne.n	8018620 <HAL_UART_IRQHandler+0x3f0>
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	685b      	ldr	r3, [r3, #4]
 801861c:	b29b      	uxth	r3, r3
 801861e:	e005      	b.n	801862c <HAL_UART_IRQHandler+0x3fc>
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	685b      	ldr	r3, [r3, #4]
 801862a:	b29b      	uxth	r3, r3
 801862c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8018634:	2b00      	cmp	r3, #0
 8018636:	f000 80ad 	beq.w	8018794 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018640:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018644:	429a      	cmp	r2, r3
 8018646:	f080 80a5 	bcs.w	8018794 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018650:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801865a:	69db      	ldr	r3, [r3, #28]
 801865c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018660:	f000 8087 	beq.w	8018772 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801866c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018670:	e853 3f00 	ldrex	r3, [r3]
 8018674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8018678:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801867c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8018680:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	461a      	mov	r2, r3
 801868a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801868e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8018692:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018696:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801869a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801869e:	e841 2300 	strex	r3, r2, [r1]
 80186a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80186a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d1da      	bne.n	8018664 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	3308      	adds	r3, #8
 80186b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80186b8:	e853 3f00 	ldrex	r3, [r3]
 80186bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80186be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80186c0:	f023 0301 	bic.w	r3, r3, #1
 80186c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	3308      	adds	r3, #8
 80186ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80186d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80186d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80186d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80186da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80186de:	e841 2300 	strex	r3, r2, [r1]
 80186e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80186e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d1e1      	bne.n	80186ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	3308      	adds	r3, #8
 80186f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80186f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80186f4:	e853 3f00 	ldrex	r3, [r3]
 80186f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80186fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80186fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	3308      	adds	r3, #8
 801870a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801870e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8018710:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018712:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8018714:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8018716:	e841 2300 	strex	r3, r2, [r1]
 801871a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801871c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801871e:	2b00      	cmp	r3, #0
 8018720:	d1e3      	bne.n	80186ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	2220      	movs	r2, #32
 8018726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2200      	movs	r2, #0
 801872e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018738:	e853 3f00 	ldrex	r3, [r3]
 801873c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801873e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018740:	f023 0310 	bic.w	r3, r3, #16
 8018744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	461a      	mov	r2, r3
 801874e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018752:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018754:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018756:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018758:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801875a:	e841 2300 	strex	r3, r2, [r1]
 801875e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8018760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018762:	2b00      	cmp	r3, #0
 8018764:	d1e4      	bne.n	8018730 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801876c:	4618      	mov	r0, r3
 801876e:	f7f3 fdf9 	bl	800c364 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	2202      	movs	r2, #2
 8018776:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018784:	b29b      	uxth	r3, r3
 8018786:	1ad3      	subs	r3, r2, r3
 8018788:	b29b      	uxth	r3, r3
 801878a:	4619      	mov	r1, r3
 801878c:	6878      	ldr	r0, [r7, #4]
 801878e:	f000 f939 	bl	8018a04 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8018792:	e119      	b.n	80189c8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801879a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801879e:	429a      	cmp	r2, r3
 80187a0:	f040 8112 	bne.w	80189c8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80187aa:	69db      	ldr	r3, [r3, #28]
 80187ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80187b0:	f040 810a 	bne.w	80189c8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	2202      	movs	r2, #2
 80187b8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80187c0:	4619      	mov	r1, r3
 80187c2:	6878      	ldr	r0, [r7, #4]
 80187c4:	f000 f91e 	bl	8018a04 <HAL_UARTEx_RxEventCallback>
      return;
 80187c8:	e0fe      	b.n	80189c8 <HAL_UART_IRQHandler+0x798>
 80187ca:	bf00      	nop
 80187cc:	40020010 	.word	0x40020010
 80187d0:	40020028 	.word	0x40020028
 80187d4:	40020040 	.word	0x40020040
 80187d8:	40020058 	.word	0x40020058
 80187dc:	40020070 	.word	0x40020070
 80187e0:	40020088 	.word	0x40020088
 80187e4:	400200a0 	.word	0x400200a0
 80187e8:	400200b8 	.word	0x400200b8
 80187ec:	40020410 	.word	0x40020410
 80187f0:	40020428 	.word	0x40020428
 80187f4:	40020440 	.word	0x40020440
 80187f8:	40020458 	.word	0x40020458
 80187fc:	40020470 	.word	0x40020470
 8018800:	40020488 	.word	0x40020488
 8018804:	400204a0 	.word	0x400204a0
 8018808:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018818:	b29b      	uxth	r3, r3
 801881a:	1ad3      	subs	r3, r2, r3
 801881c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018826:	b29b      	uxth	r3, r3
 8018828:	2b00      	cmp	r3, #0
 801882a:	f000 80cf 	beq.w	80189cc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801882e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018832:	2b00      	cmp	r3, #0
 8018834:	f000 80ca 	beq.w	80189cc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018840:	e853 3f00 	ldrex	r3, [r3]
 8018844:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801884c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	461a      	mov	r2, r3
 8018856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801885a:	647b      	str	r3, [r7, #68]	@ 0x44
 801885c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801885e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018860:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018862:	e841 2300 	strex	r3, r2, [r1]
 8018866:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8018868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801886a:	2b00      	cmp	r3, #0
 801886c:	d1e4      	bne.n	8018838 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	3308      	adds	r3, #8
 8018874:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018878:	e853 3f00 	ldrex	r3, [r3]
 801887c:	623b      	str	r3, [r7, #32]
   return(result);
 801887e:	6a3a      	ldr	r2, [r7, #32]
 8018880:	4b55      	ldr	r3, [pc, #340]	@ (80189d8 <HAL_UART_IRQHandler+0x7a8>)
 8018882:	4013      	ands	r3, r2
 8018884:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	3308      	adds	r3, #8
 801888e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8018892:	633a      	str	r2, [r7, #48]	@ 0x30
 8018894:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801889a:	e841 2300 	strex	r3, r2, [r1]
 801889e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80188a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d1e3      	bne.n	801886e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	2220      	movs	r2, #32
 80188aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	2200      	movs	r2, #0
 80188b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	2200      	movs	r2, #0
 80188b8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80188c0:	693b      	ldr	r3, [r7, #16]
 80188c2:	e853 3f00 	ldrex	r3, [r3]
 80188c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	f023 0310 	bic.w	r3, r3, #16
 80188ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	461a      	mov	r2, r3
 80188d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80188dc:	61fb      	str	r3, [r7, #28]
 80188de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80188e0:	69b9      	ldr	r1, [r7, #24]
 80188e2:	69fa      	ldr	r2, [r7, #28]
 80188e4:	e841 2300 	strex	r3, r2, [r1]
 80188e8:	617b      	str	r3, [r7, #20]
   return(result);
 80188ea:	697b      	ldr	r3, [r7, #20]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d1e4      	bne.n	80188ba <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	2202      	movs	r2, #2
 80188f4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80188f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80188fa:	4619      	mov	r1, r3
 80188fc:	6878      	ldr	r0, [r7, #4]
 80188fe:	f000 f881 	bl	8018a04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8018902:	e063      	b.n	80189cc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8018904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801890c:	2b00      	cmp	r3, #0
 801890e:	d00e      	beq.n	801892e <HAL_UART_IRQHandler+0x6fe>
 8018910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018914:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018918:	2b00      	cmp	r3, #0
 801891a:	d008      	beq.n	801892e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018926:	6878      	ldr	r0, [r7, #4]
 8018928:	f002 f926 	bl	801ab78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801892c:	e051      	b.n	80189d2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018936:	2b00      	cmp	r3, #0
 8018938:	d014      	beq.n	8018964 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801893a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801893e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018942:	2b00      	cmp	r3, #0
 8018944:	d105      	bne.n	8018952 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801894a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801894e:	2b00      	cmp	r3, #0
 8018950:	d008      	beq.n	8018964 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018956:	2b00      	cmp	r3, #0
 8018958:	d03a      	beq.n	80189d0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801895e:	6878      	ldr	r0, [r7, #4]
 8018960:	4798      	blx	r3
    }
    return;
 8018962:	e035      	b.n	80189d0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801896c:	2b00      	cmp	r3, #0
 801896e:	d009      	beq.n	8018984 <HAL_UART_IRQHandler+0x754>
 8018970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018978:	2b00      	cmp	r3, #0
 801897a:	d003      	beq.n	8018984 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 801897c:	6878      	ldr	r0, [r7, #4]
 801897e:	f001 fbaf 	bl	801a0e0 <UART_EndTransmit_IT>
    return;
 8018982:	e026      	b.n	80189d2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8018984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801898c:	2b00      	cmp	r3, #0
 801898e:	d009      	beq.n	80189a4 <HAL_UART_IRQHandler+0x774>
 8018990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018994:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018998:	2b00      	cmp	r3, #0
 801899a:	d003      	beq.n	80189a4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801899c:	6878      	ldr	r0, [r7, #4]
 801899e:	f002 f8ff 	bl	801aba0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80189a2:	e016      	b.n	80189d2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80189a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80189a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d010      	beq.n	80189d2 <HAL_UART_IRQHandler+0x7a2>
 80189b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	da0c      	bge.n	80189d2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80189b8:	6878      	ldr	r0, [r7, #4]
 80189ba:	f002 f8e7 	bl	801ab8c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80189be:	e008      	b.n	80189d2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189c0:	bf00      	nop
 80189c2:	e006      	b.n	80189d2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80189c4:	bf00      	nop
 80189c6:	e004      	b.n	80189d2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189c8:	bf00      	nop
 80189ca:	e002      	b.n	80189d2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80189cc:	bf00      	nop
 80189ce:	e000      	b.n	80189d2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80189d0:	bf00      	nop
  }
}
 80189d2:	37e8      	adds	r7, #232	@ 0xe8
 80189d4:	46bd      	mov	sp, r7
 80189d6:	bd80      	pop	{r7, pc}
 80189d8:	effffffe 	.word	0xeffffffe

080189dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80189dc:	b480      	push	{r7}
 80189de:	b083      	sub	sp, #12
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80189e4:	bf00      	nop
 80189e6:	370c      	adds	r7, #12
 80189e8:	46bd      	mov	sp, r7
 80189ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189ee:	4770      	bx	lr

080189f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80189f0:	b480      	push	{r7}
 80189f2:	b083      	sub	sp, #12
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80189f8:	bf00      	nop
 80189fa:	370c      	adds	r7, #12
 80189fc:	46bd      	mov	sp, r7
 80189fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a02:	4770      	bx	lr

08018a04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018a04:	b480      	push	{r7}
 8018a06:	b083      	sub	sp, #12
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
 8018a0c:	460b      	mov	r3, r1
 8018a0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018a10:	bf00      	nop
 8018a12:	370c      	adds	r7, #12
 8018a14:	46bd      	mov	sp, r7
 8018a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1a:	4770      	bx	lr

08018a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018a20:	b092      	sub	sp, #72	@ 0x48
 8018a22:	af00      	add	r7, sp, #0
 8018a24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018a26:	2300      	movs	r3, #0
 8018a28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	689a      	ldr	r2, [r3, #8]
 8018a30:	697b      	ldr	r3, [r7, #20]
 8018a32:	691b      	ldr	r3, [r3, #16]
 8018a34:	431a      	orrs	r2, r3
 8018a36:	697b      	ldr	r3, [r7, #20]
 8018a38:	695b      	ldr	r3, [r3, #20]
 8018a3a:	431a      	orrs	r2, r3
 8018a3c:	697b      	ldr	r3, [r7, #20]
 8018a3e:	69db      	ldr	r3, [r3, #28]
 8018a40:	4313      	orrs	r3, r2
 8018a42:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018a44:	697b      	ldr	r3, [r7, #20]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	681a      	ldr	r2, [r3, #0]
 8018a4a:	4bbe      	ldr	r3, [pc, #760]	@ (8018d44 <UART_SetConfig+0x328>)
 8018a4c:	4013      	ands	r3, r2
 8018a4e:	697a      	ldr	r2, [r7, #20]
 8018a50:	6812      	ldr	r2, [r2, #0]
 8018a52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018a54:	430b      	orrs	r3, r1
 8018a56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018a58:	697b      	ldr	r3, [r7, #20]
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	685b      	ldr	r3, [r3, #4]
 8018a5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8018a62:	697b      	ldr	r3, [r7, #20]
 8018a64:	68da      	ldr	r2, [r3, #12]
 8018a66:	697b      	ldr	r3, [r7, #20]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	430a      	orrs	r2, r1
 8018a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018a6e:	697b      	ldr	r3, [r7, #20]
 8018a70:	699b      	ldr	r3, [r3, #24]
 8018a72:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018a74:	697b      	ldr	r3, [r7, #20]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	4ab3      	ldr	r2, [pc, #716]	@ (8018d48 <UART_SetConfig+0x32c>)
 8018a7a:	4293      	cmp	r3, r2
 8018a7c:	d004      	beq.n	8018a88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018a7e:	697b      	ldr	r3, [r7, #20]
 8018a80:	6a1b      	ldr	r3, [r3, #32]
 8018a82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018a84:	4313      	orrs	r3, r2
 8018a86:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	689a      	ldr	r2, [r3, #8]
 8018a8e:	4baf      	ldr	r3, [pc, #700]	@ (8018d4c <UART_SetConfig+0x330>)
 8018a90:	4013      	ands	r3, r2
 8018a92:	697a      	ldr	r2, [r7, #20]
 8018a94:	6812      	ldr	r2, [r2, #0]
 8018a96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018a98:	430b      	orrs	r3, r1
 8018a9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018a9c:	697b      	ldr	r3, [r7, #20]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018aa2:	f023 010f 	bic.w	r1, r3, #15
 8018aa6:	697b      	ldr	r3, [r7, #20]
 8018aa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018aaa:	697b      	ldr	r3, [r7, #20]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	430a      	orrs	r2, r1
 8018ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018ab2:	697b      	ldr	r3, [r7, #20]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	4aa6      	ldr	r2, [pc, #664]	@ (8018d50 <UART_SetConfig+0x334>)
 8018ab8:	4293      	cmp	r3, r2
 8018aba:	d177      	bne.n	8018bac <UART_SetConfig+0x190>
 8018abc:	4ba5      	ldr	r3, [pc, #660]	@ (8018d54 <UART_SetConfig+0x338>)
 8018abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ac0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018ac4:	2b28      	cmp	r3, #40	@ 0x28
 8018ac6:	d86d      	bhi.n	8018ba4 <UART_SetConfig+0x188>
 8018ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8018ad0 <UART_SetConfig+0xb4>)
 8018aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ace:	bf00      	nop
 8018ad0:	08018b75 	.word	0x08018b75
 8018ad4:	08018ba5 	.word	0x08018ba5
 8018ad8:	08018ba5 	.word	0x08018ba5
 8018adc:	08018ba5 	.word	0x08018ba5
 8018ae0:	08018ba5 	.word	0x08018ba5
 8018ae4:	08018ba5 	.word	0x08018ba5
 8018ae8:	08018ba5 	.word	0x08018ba5
 8018aec:	08018ba5 	.word	0x08018ba5
 8018af0:	08018b7d 	.word	0x08018b7d
 8018af4:	08018ba5 	.word	0x08018ba5
 8018af8:	08018ba5 	.word	0x08018ba5
 8018afc:	08018ba5 	.word	0x08018ba5
 8018b00:	08018ba5 	.word	0x08018ba5
 8018b04:	08018ba5 	.word	0x08018ba5
 8018b08:	08018ba5 	.word	0x08018ba5
 8018b0c:	08018ba5 	.word	0x08018ba5
 8018b10:	08018b85 	.word	0x08018b85
 8018b14:	08018ba5 	.word	0x08018ba5
 8018b18:	08018ba5 	.word	0x08018ba5
 8018b1c:	08018ba5 	.word	0x08018ba5
 8018b20:	08018ba5 	.word	0x08018ba5
 8018b24:	08018ba5 	.word	0x08018ba5
 8018b28:	08018ba5 	.word	0x08018ba5
 8018b2c:	08018ba5 	.word	0x08018ba5
 8018b30:	08018b8d 	.word	0x08018b8d
 8018b34:	08018ba5 	.word	0x08018ba5
 8018b38:	08018ba5 	.word	0x08018ba5
 8018b3c:	08018ba5 	.word	0x08018ba5
 8018b40:	08018ba5 	.word	0x08018ba5
 8018b44:	08018ba5 	.word	0x08018ba5
 8018b48:	08018ba5 	.word	0x08018ba5
 8018b4c:	08018ba5 	.word	0x08018ba5
 8018b50:	08018b95 	.word	0x08018b95
 8018b54:	08018ba5 	.word	0x08018ba5
 8018b58:	08018ba5 	.word	0x08018ba5
 8018b5c:	08018ba5 	.word	0x08018ba5
 8018b60:	08018ba5 	.word	0x08018ba5
 8018b64:	08018ba5 	.word	0x08018ba5
 8018b68:	08018ba5 	.word	0x08018ba5
 8018b6c:	08018ba5 	.word	0x08018ba5
 8018b70:	08018b9d 	.word	0x08018b9d
 8018b74:	2301      	movs	r3, #1
 8018b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b7a:	e326      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018b7c:	2304      	movs	r3, #4
 8018b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b82:	e322      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018b84:	2308      	movs	r3, #8
 8018b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b8a:	e31e      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018b8c:	2310      	movs	r3, #16
 8018b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b92:	e31a      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018b94:	2320      	movs	r3, #32
 8018b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b9a:	e316      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018b9c:	2340      	movs	r3, #64	@ 0x40
 8018b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ba2:	e312      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018ba4:	2380      	movs	r3, #128	@ 0x80
 8018ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018baa:	e30e      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018bac:	697b      	ldr	r3, [r7, #20]
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	4a69      	ldr	r2, [pc, #420]	@ (8018d58 <UART_SetConfig+0x33c>)
 8018bb2:	4293      	cmp	r3, r2
 8018bb4:	d130      	bne.n	8018c18 <UART_SetConfig+0x1fc>
 8018bb6:	4b67      	ldr	r3, [pc, #412]	@ (8018d54 <UART_SetConfig+0x338>)
 8018bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bba:	f003 0307 	and.w	r3, r3, #7
 8018bbe:	2b05      	cmp	r3, #5
 8018bc0:	d826      	bhi.n	8018c10 <UART_SetConfig+0x1f4>
 8018bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8018bc8 <UART_SetConfig+0x1ac>)
 8018bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bc8:	08018be1 	.word	0x08018be1
 8018bcc:	08018be9 	.word	0x08018be9
 8018bd0:	08018bf1 	.word	0x08018bf1
 8018bd4:	08018bf9 	.word	0x08018bf9
 8018bd8:	08018c01 	.word	0x08018c01
 8018bdc:	08018c09 	.word	0x08018c09
 8018be0:	2300      	movs	r3, #0
 8018be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018be6:	e2f0      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018be8:	2304      	movs	r3, #4
 8018bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bee:	e2ec      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018bf0:	2308      	movs	r3, #8
 8018bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bf6:	e2e8      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018bf8:	2310      	movs	r3, #16
 8018bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bfe:	e2e4      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018c00:	2320      	movs	r3, #32
 8018c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c06:	e2e0      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018c08:	2340      	movs	r3, #64	@ 0x40
 8018c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c0e:	e2dc      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018c10:	2380      	movs	r3, #128	@ 0x80
 8018c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c16:	e2d8      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018c18:	697b      	ldr	r3, [r7, #20]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	4a4f      	ldr	r2, [pc, #316]	@ (8018d5c <UART_SetConfig+0x340>)
 8018c1e:	4293      	cmp	r3, r2
 8018c20:	d130      	bne.n	8018c84 <UART_SetConfig+0x268>
 8018c22:	4b4c      	ldr	r3, [pc, #304]	@ (8018d54 <UART_SetConfig+0x338>)
 8018c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c26:	f003 0307 	and.w	r3, r3, #7
 8018c2a:	2b05      	cmp	r3, #5
 8018c2c:	d826      	bhi.n	8018c7c <UART_SetConfig+0x260>
 8018c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8018c34 <UART_SetConfig+0x218>)
 8018c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c34:	08018c4d 	.word	0x08018c4d
 8018c38:	08018c55 	.word	0x08018c55
 8018c3c:	08018c5d 	.word	0x08018c5d
 8018c40:	08018c65 	.word	0x08018c65
 8018c44:	08018c6d 	.word	0x08018c6d
 8018c48:	08018c75 	.word	0x08018c75
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c52:	e2ba      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018c54:	2304      	movs	r3, #4
 8018c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c5a:	e2b6      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018c5c:	2308      	movs	r3, #8
 8018c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c62:	e2b2      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018c64:	2310      	movs	r3, #16
 8018c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c6a:	e2ae      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018c6c:	2320      	movs	r3, #32
 8018c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c72:	e2aa      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018c74:	2340      	movs	r3, #64	@ 0x40
 8018c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c7a:	e2a6      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018c7c:	2380      	movs	r3, #128	@ 0x80
 8018c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c82:	e2a2      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018c84:	697b      	ldr	r3, [r7, #20]
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	4a35      	ldr	r2, [pc, #212]	@ (8018d60 <UART_SetConfig+0x344>)
 8018c8a:	4293      	cmp	r3, r2
 8018c8c:	d130      	bne.n	8018cf0 <UART_SetConfig+0x2d4>
 8018c8e:	4b31      	ldr	r3, [pc, #196]	@ (8018d54 <UART_SetConfig+0x338>)
 8018c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c92:	f003 0307 	and.w	r3, r3, #7
 8018c96:	2b05      	cmp	r3, #5
 8018c98:	d826      	bhi.n	8018ce8 <UART_SetConfig+0x2cc>
 8018c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8018ca0 <UART_SetConfig+0x284>)
 8018c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ca0:	08018cb9 	.word	0x08018cb9
 8018ca4:	08018cc1 	.word	0x08018cc1
 8018ca8:	08018cc9 	.word	0x08018cc9
 8018cac:	08018cd1 	.word	0x08018cd1
 8018cb0:	08018cd9 	.word	0x08018cd9
 8018cb4:	08018ce1 	.word	0x08018ce1
 8018cb8:	2300      	movs	r3, #0
 8018cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cbe:	e284      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018cc0:	2304      	movs	r3, #4
 8018cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cc6:	e280      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018cc8:	2308      	movs	r3, #8
 8018cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cce:	e27c      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018cd0:	2310      	movs	r3, #16
 8018cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cd6:	e278      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018cd8:	2320      	movs	r3, #32
 8018cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cde:	e274      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018ce0:	2340      	movs	r3, #64	@ 0x40
 8018ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ce6:	e270      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018ce8:	2380      	movs	r3, #128	@ 0x80
 8018cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cee:	e26c      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8018d64 <UART_SetConfig+0x348>)
 8018cf6:	4293      	cmp	r3, r2
 8018cf8:	d142      	bne.n	8018d80 <UART_SetConfig+0x364>
 8018cfa:	4b16      	ldr	r3, [pc, #88]	@ (8018d54 <UART_SetConfig+0x338>)
 8018cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018cfe:	f003 0307 	and.w	r3, r3, #7
 8018d02:	2b05      	cmp	r3, #5
 8018d04:	d838      	bhi.n	8018d78 <UART_SetConfig+0x35c>
 8018d06:	a201      	add	r2, pc, #4	@ (adr r2, 8018d0c <UART_SetConfig+0x2f0>)
 8018d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d0c:	08018d25 	.word	0x08018d25
 8018d10:	08018d2d 	.word	0x08018d2d
 8018d14:	08018d35 	.word	0x08018d35
 8018d18:	08018d3d 	.word	0x08018d3d
 8018d1c:	08018d69 	.word	0x08018d69
 8018d20:	08018d71 	.word	0x08018d71
 8018d24:	2300      	movs	r3, #0
 8018d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d2a:	e24e      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018d2c:	2304      	movs	r3, #4
 8018d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d32:	e24a      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018d34:	2308      	movs	r3, #8
 8018d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d3a:	e246      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018d3c:	2310      	movs	r3, #16
 8018d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d42:	e242      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018d44:	cfff69f3 	.word	0xcfff69f3
 8018d48:	58000c00 	.word	0x58000c00
 8018d4c:	11fff4ff 	.word	0x11fff4ff
 8018d50:	40011000 	.word	0x40011000
 8018d54:	58024400 	.word	0x58024400
 8018d58:	40004400 	.word	0x40004400
 8018d5c:	40004800 	.word	0x40004800
 8018d60:	40004c00 	.word	0x40004c00
 8018d64:	40005000 	.word	0x40005000
 8018d68:	2320      	movs	r3, #32
 8018d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d6e:	e22c      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018d70:	2340      	movs	r3, #64	@ 0x40
 8018d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d76:	e228      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018d78:	2380      	movs	r3, #128	@ 0x80
 8018d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d7e:	e224      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018d80:	697b      	ldr	r3, [r7, #20]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	4ab1      	ldr	r2, [pc, #708]	@ (801904c <UART_SetConfig+0x630>)
 8018d86:	4293      	cmp	r3, r2
 8018d88:	d176      	bne.n	8018e78 <UART_SetConfig+0x45c>
 8018d8a:	4bb1      	ldr	r3, [pc, #708]	@ (8019050 <UART_SetConfig+0x634>)
 8018d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018d8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018d92:	2b28      	cmp	r3, #40	@ 0x28
 8018d94:	d86c      	bhi.n	8018e70 <UART_SetConfig+0x454>
 8018d96:	a201      	add	r2, pc, #4	@ (adr r2, 8018d9c <UART_SetConfig+0x380>)
 8018d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d9c:	08018e41 	.word	0x08018e41
 8018da0:	08018e71 	.word	0x08018e71
 8018da4:	08018e71 	.word	0x08018e71
 8018da8:	08018e71 	.word	0x08018e71
 8018dac:	08018e71 	.word	0x08018e71
 8018db0:	08018e71 	.word	0x08018e71
 8018db4:	08018e71 	.word	0x08018e71
 8018db8:	08018e71 	.word	0x08018e71
 8018dbc:	08018e49 	.word	0x08018e49
 8018dc0:	08018e71 	.word	0x08018e71
 8018dc4:	08018e71 	.word	0x08018e71
 8018dc8:	08018e71 	.word	0x08018e71
 8018dcc:	08018e71 	.word	0x08018e71
 8018dd0:	08018e71 	.word	0x08018e71
 8018dd4:	08018e71 	.word	0x08018e71
 8018dd8:	08018e71 	.word	0x08018e71
 8018ddc:	08018e51 	.word	0x08018e51
 8018de0:	08018e71 	.word	0x08018e71
 8018de4:	08018e71 	.word	0x08018e71
 8018de8:	08018e71 	.word	0x08018e71
 8018dec:	08018e71 	.word	0x08018e71
 8018df0:	08018e71 	.word	0x08018e71
 8018df4:	08018e71 	.word	0x08018e71
 8018df8:	08018e71 	.word	0x08018e71
 8018dfc:	08018e59 	.word	0x08018e59
 8018e00:	08018e71 	.word	0x08018e71
 8018e04:	08018e71 	.word	0x08018e71
 8018e08:	08018e71 	.word	0x08018e71
 8018e0c:	08018e71 	.word	0x08018e71
 8018e10:	08018e71 	.word	0x08018e71
 8018e14:	08018e71 	.word	0x08018e71
 8018e18:	08018e71 	.word	0x08018e71
 8018e1c:	08018e61 	.word	0x08018e61
 8018e20:	08018e71 	.word	0x08018e71
 8018e24:	08018e71 	.word	0x08018e71
 8018e28:	08018e71 	.word	0x08018e71
 8018e2c:	08018e71 	.word	0x08018e71
 8018e30:	08018e71 	.word	0x08018e71
 8018e34:	08018e71 	.word	0x08018e71
 8018e38:	08018e71 	.word	0x08018e71
 8018e3c:	08018e69 	.word	0x08018e69
 8018e40:	2301      	movs	r3, #1
 8018e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e46:	e1c0      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018e48:	2304      	movs	r3, #4
 8018e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e4e:	e1bc      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018e50:	2308      	movs	r3, #8
 8018e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e56:	e1b8      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018e58:	2310      	movs	r3, #16
 8018e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e5e:	e1b4      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018e60:	2320      	movs	r3, #32
 8018e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e66:	e1b0      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018e68:	2340      	movs	r3, #64	@ 0x40
 8018e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e6e:	e1ac      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018e70:	2380      	movs	r3, #128	@ 0x80
 8018e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e76:	e1a8      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	4a75      	ldr	r2, [pc, #468]	@ (8019054 <UART_SetConfig+0x638>)
 8018e7e:	4293      	cmp	r3, r2
 8018e80:	d130      	bne.n	8018ee4 <UART_SetConfig+0x4c8>
 8018e82:	4b73      	ldr	r3, [pc, #460]	@ (8019050 <UART_SetConfig+0x634>)
 8018e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e86:	f003 0307 	and.w	r3, r3, #7
 8018e8a:	2b05      	cmp	r3, #5
 8018e8c:	d826      	bhi.n	8018edc <UART_SetConfig+0x4c0>
 8018e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8018e94 <UART_SetConfig+0x478>)
 8018e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e94:	08018ead 	.word	0x08018ead
 8018e98:	08018eb5 	.word	0x08018eb5
 8018e9c:	08018ebd 	.word	0x08018ebd
 8018ea0:	08018ec5 	.word	0x08018ec5
 8018ea4:	08018ecd 	.word	0x08018ecd
 8018ea8:	08018ed5 	.word	0x08018ed5
 8018eac:	2300      	movs	r3, #0
 8018eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eb2:	e18a      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018eb4:	2304      	movs	r3, #4
 8018eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eba:	e186      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018ebc:	2308      	movs	r3, #8
 8018ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ec2:	e182      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018ec4:	2310      	movs	r3, #16
 8018ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eca:	e17e      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018ecc:	2320      	movs	r3, #32
 8018ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ed2:	e17a      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018ed4:	2340      	movs	r3, #64	@ 0x40
 8018ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018eda:	e176      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018edc:	2380      	movs	r3, #128	@ 0x80
 8018ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ee2:	e172      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018ee4:	697b      	ldr	r3, [r7, #20]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	4a5b      	ldr	r2, [pc, #364]	@ (8019058 <UART_SetConfig+0x63c>)
 8018eea:	4293      	cmp	r3, r2
 8018eec:	d130      	bne.n	8018f50 <UART_SetConfig+0x534>
 8018eee:	4b58      	ldr	r3, [pc, #352]	@ (8019050 <UART_SetConfig+0x634>)
 8018ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ef2:	f003 0307 	and.w	r3, r3, #7
 8018ef6:	2b05      	cmp	r3, #5
 8018ef8:	d826      	bhi.n	8018f48 <UART_SetConfig+0x52c>
 8018efa:	a201      	add	r2, pc, #4	@ (adr r2, 8018f00 <UART_SetConfig+0x4e4>)
 8018efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f00:	08018f19 	.word	0x08018f19
 8018f04:	08018f21 	.word	0x08018f21
 8018f08:	08018f29 	.word	0x08018f29
 8018f0c:	08018f31 	.word	0x08018f31
 8018f10:	08018f39 	.word	0x08018f39
 8018f14:	08018f41 	.word	0x08018f41
 8018f18:	2300      	movs	r3, #0
 8018f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f1e:	e154      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018f20:	2304      	movs	r3, #4
 8018f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f26:	e150      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018f28:	2308      	movs	r3, #8
 8018f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f2e:	e14c      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018f30:	2310      	movs	r3, #16
 8018f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f36:	e148      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018f38:	2320      	movs	r3, #32
 8018f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f3e:	e144      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018f40:	2340      	movs	r3, #64	@ 0x40
 8018f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f46:	e140      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018f48:	2380      	movs	r3, #128	@ 0x80
 8018f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f4e:	e13c      	b.n	80191ca <UART_SetConfig+0x7ae>
 8018f50:	697b      	ldr	r3, [r7, #20]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	4a41      	ldr	r2, [pc, #260]	@ (801905c <UART_SetConfig+0x640>)
 8018f56:	4293      	cmp	r3, r2
 8018f58:	f040 8082 	bne.w	8019060 <UART_SetConfig+0x644>
 8018f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8019050 <UART_SetConfig+0x634>)
 8018f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018f60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018f64:	2b28      	cmp	r3, #40	@ 0x28
 8018f66:	d86d      	bhi.n	8019044 <UART_SetConfig+0x628>
 8018f68:	a201      	add	r2, pc, #4	@ (adr r2, 8018f70 <UART_SetConfig+0x554>)
 8018f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f6e:	bf00      	nop
 8018f70:	08019015 	.word	0x08019015
 8018f74:	08019045 	.word	0x08019045
 8018f78:	08019045 	.word	0x08019045
 8018f7c:	08019045 	.word	0x08019045
 8018f80:	08019045 	.word	0x08019045
 8018f84:	08019045 	.word	0x08019045
 8018f88:	08019045 	.word	0x08019045
 8018f8c:	08019045 	.word	0x08019045
 8018f90:	0801901d 	.word	0x0801901d
 8018f94:	08019045 	.word	0x08019045
 8018f98:	08019045 	.word	0x08019045
 8018f9c:	08019045 	.word	0x08019045
 8018fa0:	08019045 	.word	0x08019045
 8018fa4:	08019045 	.word	0x08019045
 8018fa8:	08019045 	.word	0x08019045
 8018fac:	08019045 	.word	0x08019045
 8018fb0:	08019025 	.word	0x08019025
 8018fb4:	08019045 	.word	0x08019045
 8018fb8:	08019045 	.word	0x08019045
 8018fbc:	08019045 	.word	0x08019045
 8018fc0:	08019045 	.word	0x08019045
 8018fc4:	08019045 	.word	0x08019045
 8018fc8:	08019045 	.word	0x08019045
 8018fcc:	08019045 	.word	0x08019045
 8018fd0:	0801902d 	.word	0x0801902d
 8018fd4:	08019045 	.word	0x08019045
 8018fd8:	08019045 	.word	0x08019045
 8018fdc:	08019045 	.word	0x08019045
 8018fe0:	08019045 	.word	0x08019045
 8018fe4:	08019045 	.word	0x08019045
 8018fe8:	08019045 	.word	0x08019045
 8018fec:	08019045 	.word	0x08019045
 8018ff0:	08019035 	.word	0x08019035
 8018ff4:	08019045 	.word	0x08019045
 8018ff8:	08019045 	.word	0x08019045
 8018ffc:	08019045 	.word	0x08019045
 8019000:	08019045 	.word	0x08019045
 8019004:	08019045 	.word	0x08019045
 8019008:	08019045 	.word	0x08019045
 801900c:	08019045 	.word	0x08019045
 8019010:	0801903d 	.word	0x0801903d
 8019014:	2301      	movs	r3, #1
 8019016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801901a:	e0d6      	b.n	80191ca <UART_SetConfig+0x7ae>
 801901c:	2304      	movs	r3, #4
 801901e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019022:	e0d2      	b.n	80191ca <UART_SetConfig+0x7ae>
 8019024:	2308      	movs	r3, #8
 8019026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801902a:	e0ce      	b.n	80191ca <UART_SetConfig+0x7ae>
 801902c:	2310      	movs	r3, #16
 801902e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019032:	e0ca      	b.n	80191ca <UART_SetConfig+0x7ae>
 8019034:	2320      	movs	r3, #32
 8019036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801903a:	e0c6      	b.n	80191ca <UART_SetConfig+0x7ae>
 801903c:	2340      	movs	r3, #64	@ 0x40
 801903e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019042:	e0c2      	b.n	80191ca <UART_SetConfig+0x7ae>
 8019044:	2380      	movs	r3, #128	@ 0x80
 8019046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801904a:	e0be      	b.n	80191ca <UART_SetConfig+0x7ae>
 801904c:	40011400 	.word	0x40011400
 8019050:	58024400 	.word	0x58024400
 8019054:	40007800 	.word	0x40007800
 8019058:	40007c00 	.word	0x40007c00
 801905c:	40011800 	.word	0x40011800
 8019060:	697b      	ldr	r3, [r7, #20]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	4aad      	ldr	r2, [pc, #692]	@ (801931c <UART_SetConfig+0x900>)
 8019066:	4293      	cmp	r3, r2
 8019068:	d176      	bne.n	8019158 <UART_SetConfig+0x73c>
 801906a:	4bad      	ldr	r3, [pc, #692]	@ (8019320 <UART_SetConfig+0x904>)
 801906c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801906e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019072:	2b28      	cmp	r3, #40	@ 0x28
 8019074:	d86c      	bhi.n	8019150 <UART_SetConfig+0x734>
 8019076:	a201      	add	r2, pc, #4	@ (adr r2, 801907c <UART_SetConfig+0x660>)
 8019078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801907c:	08019121 	.word	0x08019121
 8019080:	08019151 	.word	0x08019151
 8019084:	08019151 	.word	0x08019151
 8019088:	08019151 	.word	0x08019151
 801908c:	08019151 	.word	0x08019151
 8019090:	08019151 	.word	0x08019151
 8019094:	08019151 	.word	0x08019151
 8019098:	08019151 	.word	0x08019151
 801909c:	08019129 	.word	0x08019129
 80190a0:	08019151 	.word	0x08019151
 80190a4:	08019151 	.word	0x08019151
 80190a8:	08019151 	.word	0x08019151
 80190ac:	08019151 	.word	0x08019151
 80190b0:	08019151 	.word	0x08019151
 80190b4:	08019151 	.word	0x08019151
 80190b8:	08019151 	.word	0x08019151
 80190bc:	08019131 	.word	0x08019131
 80190c0:	08019151 	.word	0x08019151
 80190c4:	08019151 	.word	0x08019151
 80190c8:	08019151 	.word	0x08019151
 80190cc:	08019151 	.word	0x08019151
 80190d0:	08019151 	.word	0x08019151
 80190d4:	08019151 	.word	0x08019151
 80190d8:	08019151 	.word	0x08019151
 80190dc:	08019139 	.word	0x08019139
 80190e0:	08019151 	.word	0x08019151
 80190e4:	08019151 	.word	0x08019151
 80190e8:	08019151 	.word	0x08019151
 80190ec:	08019151 	.word	0x08019151
 80190f0:	08019151 	.word	0x08019151
 80190f4:	08019151 	.word	0x08019151
 80190f8:	08019151 	.word	0x08019151
 80190fc:	08019141 	.word	0x08019141
 8019100:	08019151 	.word	0x08019151
 8019104:	08019151 	.word	0x08019151
 8019108:	08019151 	.word	0x08019151
 801910c:	08019151 	.word	0x08019151
 8019110:	08019151 	.word	0x08019151
 8019114:	08019151 	.word	0x08019151
 8019118:	08019151 	.word	0x08019151
 801911c:	08019149 	.word	0x08019149
 8019120:	2301      	movs	r3, #1
 8019122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019126:	e050      	b.n	80191ca <UART_SetConfig+0x7ae>
 8019128:	2304      	movs	r3, #4
 801912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801912e:	e04c      	b.n	80191ca <UART_SetConfig+0x7ae>
 8019130:	2308      	movs	r3, #8
 8019132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019136:	e048      	b.n	80191ca <UART_SetConfig+0x7ae>
 8019138:	2310      	movs	r3, #16
 801913a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801913e:	e044      	b.n	80191ca <UART_SetConfig+0x7ae>
 8019140:	2320      	movs	r3, #32
 8019142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019146:	e040      	b.n	80191ca <UART_SetConfig+0x7ae>
 8019148:	2340      	movs	r3, #64	@ 0x40
 801914a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801914e:	e03c      	b.n	80191ca <UART_SetConfig+0x7ae>
 8019150:	2380      	movs	r3, #128	@ 0x80
 8019152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019156:	e038      	b.n	80191ca <UART_SetConfig+0x7ae>
 8019158:	697b      	ldr	r3, [r7, #20]
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	4a71      	ldr	r2, [pc, #452]	@ (8019324 <UART_SetConfig+0x908>)
 801915e:	4293      	cmp	r3, r2
 8019160:	d130      	bne.n	80191c4 <UART_SetConfig+0x7a8>
 8019162:	4b6f      	ldr	r3, [pc, #444]	@ (8019320 <UART_SetConfig+0x904>)
 8019164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019166:	f003 0307 	and.w	r3, r3, #7
 801916a:	2b05      	cmp	r3, #5
 801916c:	d826      	bhi.n	80191bc <UART_SetConfig+0x7a0>
 801916e:	a201      	add	r2, pc, #4	@ (adr r2, 8019174 <UART_SetConfig+0x758>)
 8019170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019174:	0801918d 	.word	0x0801918d
 8019178:	08019195 	.word	0x08019195
 801917c:	0801919d 	.word	0x0801919d
 8019180:	080191a5 	.word	0x080191a5
 8019184:	080191ad 	.word	0x080191ad
 8019188:	080191b5 	.word	0x080191b5
 801918c:	2302      	movs	r3, #2
 801918e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019192:	e01a      	b.n	80191ca <UART_SetConfig+0x7ae>
 8019194:	2304      	movs	r3, #4
 8019196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801919a:	e016      	b.n	80191ca <UART_SetConfig+0x7ae>
 801919c:	2308      	movs	r3, #8
 801919e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191a2:	e012      	b.n	80191ca <UART_SetConfig+0x7ae>
 80191a4:	2310      	movs	r3, #16
 80191a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191aa:	e00e      	b.n	80191ca <UART_SetConfig+0x7ae>
 80191ac:	2320      	movs	r3, #32
 80191ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191b2:	e00a      	b.n	80191ca <UART_SetConfig+0x7ae>
 80191b4:	2340      	movs	r3, #64	@ 0x40
 80191b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191ba:	e006      	b.n	80191ca <UART_SetConfig+0x7ae>
 80191bc:	2380      	movs	r3, #128	@ 0x80
 80191be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80191c2:	e002      	b.n	80191ca <UART_SetConfig+0x7ae>
 80191c4:	2380      	movs	r3, #128	@ 0x80
 80191c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80191ca:	697b      	ldr	r3, [r7, #20]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	4a55      	ldr	r2, [pc, #340]	@ (8019324 <UART_SetConfig+0x908>)
 80191d0:	4293      	cmp	r3, r2
 80191d2:	f040 80f8 	bne.w	80193c6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80191d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80191da:	2b20      	cmp	r3, #32
 80191dc:	dc46      	bgt.n	801926c <UART_SetConfig+0x850>
 80191de:	2b02      	cmp	r3, #2
 80191e0:	db75      	blt.n	80192ce <UART_SetConfig+0x8b2>
 80191e2:	3b02      	subs	r3, #2
 80191e4:	2b1e      	cmp	r3, #30
 80191e6:	d872      	bhi.n	80192ce <UART_SetConfig+0x8b2>
 80191e8:	a201      	add	r2, pc, #4	@ (adr r2, 80191f0 <UART_SetConfig+0x7d4>)
 80191ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191ee:	bf00      	nop
 80191f0:	08019273 	.word	0x08019273
 80191f4:	080192cf 	.word	0x080192cf
 80191f8:	0801927b 	.word	0x0801927b
 80191fc:	080192cf 	.word	0x080192cf
 8019200:	080192cf 	.word	0x080192cf
 8019204:	080192cf 	.word	0x080192cf
 8019208:	0801928b 	.word	0x0801928b
 801920c:	080192cf 	.word	0x080192cf
 8019210:	080192cf 	.word	0x080192cf
 8019214:	080192cf 	.word	0x080192cf
 8019218:	080192cf 	.word	0x080192cf
 801921c:	080192cf 	.word	0x080192cf
 8019220:	080192cf 	.word	0x080192cf
 8019224:	080192cf 	.word	0x080192cf
 8019228:	0801929b 	.word	0x0801929b
 801922c:	080192cf 	.word	0x080192cf
 8019230:	080192cf 	.word	0x080192cf
 8019234:	080192cf 	.word	0x080192cf
 8019238:	080192cf 	.word	0x080192cf
 801923c:	080192cf 	.word	0x080192cf
 8019240:	080192cf 	.word	0x080192cf
 8019244:	080192cf 	.word	0x080192cf
 8019248:	080192cf 	.word	0x080192cf
 801924c:	080192cf 	.word	0x080192cf
 8019250:	080192cf 	.word	0x080192cf
 8019254:	080192cf 	.word	0x080192cf
 8019258:	080192cf 	.word	0x080192cf
 801925c:	080192cf 	.word	0x080192cf
 8019260:	080192cf 	.word	0x080192cf
 8019264:	080192cf 	.word	0x080192cf
 8019268:	080192c1 	.word	0x080192c1
 801926c:	2b40      	cmp	r3, #64	@ 0x40
 801926e:	d02a      	beq.n	80192c6 <UART_SetConfig+0x8aa>
 8019270:	e02d      	b.n	80192ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8019272:	f7fa fd8b 	bl	8013d8c <HAL_RCCEx_GetD3PCLK1Freq>
 8019276:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019278:	e02f      	b.n	80192da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801927a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801927e:	4618      	mov	r0, r3
 8019280:	f7fa fd9a 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8019284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019288:	e027      	b.n	80192da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801928a:	f107 0318 	add.w	r3, r7, #24
 801928e:	4618      	mov	r0, r3
 8019290:	f7fa fee6 	bl	8014060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8019294:	69fb      	ldr	r3, [r7, #28]
 8019296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019298:	e01f      	b.n	80192da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801929a:	4b21      	ldr	r3, [pc, #132]	@ (8019320 <UART_SetConfig+0x904>)
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	f003 0320 	and.w	r3, r3, #32
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d009      	beq.n	80192ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80192a6:	4b1e      	ldr	r3, [pc, #120]	@ (8019320 <UART_SetConfig+0x904>)
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	08db      	lsrs	r3, r3, #3
 80192ac:	f003 0303 	and.w	r3, r3, #3
 80192b0:	4a1d      	ldr	r2, [pc, #116]	@ (8019328 <UART_SetConfig+0x90c>)
 80192b2:	fa22 f303 	lsr.w	r3, r2, r3
 80192b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80192b8:	e00f      	b.n	80192da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80192ba:	4b1b      	ldr	r3, [pc, #108]	@ (8019328 <UART_SetConfig+0x90c>)
 80192bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192be:	e00c      	b.n	80192da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80192c0:	4b1a      	ldr	r3, [pc, #104]	@ (801932c <UART_SetConfig+0x910>)
 80192c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192c4:	e009      	b.n	80192da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80192c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80192ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80192cc:	e005      	b.n	80192da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80192ce:	2300      	movs	r3, #0
 80192d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80192d2:	2301      	movs	r3, #1
 80192d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80192d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80192da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192dc:	2b00      	cmp	r3, #0
 80192de:	f000 81ee 	beq.w	80196be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80192e2:	697b      	ldr	r3, [r7, #20]
 80192e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192e6:	4a12      	ldr	r2, [pc, #72]	@ (8019330 <UART_SetConfig+0x914>)
 80192e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80192ec:	461a      	mov	r2, r3
 80192ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80192f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80192f4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80192f6:	697b      	ldr	r3, [r7, #20]
 80192f8:	685a      	ldr	r2, [r3, #4]
 80192fa:	4613      	mov	r3, r2
 80192fc:	005b      	lsls	r3, r3, #1
 80192fe:	4413      	add	r3, r2
 8019300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019302:	429a      	cmp	r2, r3
 8019304:	d305      	bcc.n	8019312 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8019306:	697b      	ldr	r3, [r7, #20]
 8019308:	685b      	ldr	r3, [r3, #4]
 801930a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801930c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801930e:	429a      	cmp	r2, r3
 8019310:	d910      	bls.n	8019334 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8019312:	2301      	movs	r3, #1
 8019314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019318:	e1d1      	b.n	80196be <UART_SetConfig+0xca2>
 801931a:	bf00      	nop
 801931c:	40011c00 	.word	0x40011c00
 8019320:	58024400 	.word	0x58024400
 8019324:	58000c00 	.word	0x58000c00
 8019328:	03d09000 	.word	0x03d09000
 801932c:	003d0900 	.word	0x003d0900
 8019330:	0801ec04 	.word	0x0801ec04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019336:	2200      	movs	r2, #0
 8019338:	60bb      	str	r3, [r7, #8]
 801933a:	60fa      	str	r2, [r7, #12]
 801933c:	697b      	ldr	r3, [r7, #20]
 801933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019340:	4ac0      	ldr	r2, [pc, #768]	@ (8019644 <UART_SetConfig+0xc28>)
 8019342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019346:	b29b      	uxth	r3, r3
 8019348:	2200      	movs	r2, #0
 801934a:	603b      	str	r3, [r7, #0]
 801934c:	607a      	str	r2, [r7, #4]
 801934e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8019356:	f7e7 f82b 	bl	80003b0 <__aeabi_uldivmod>
 801935a:	4602      	mov	r2, r0
 801935c:	460b      	mov	r3, r1
 801935e:	4610      	mov	r0, r2
 8019360:	4619      	mov	r1, r3
 8019362:	f04f 0200 	mov.w	r2, #0
 8019366:	f04f 0300 	mov.w	r3, #0
 801936a:	020b      	lsls	r3, r1, #8
 801936c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8019370:	0202      	lsls	r2, r0, #8
 8019372:	6979      	ldr	r1, [r7, #20]
 8019374:	6849      	ldr	r1, [r1, #4]
 8019376:	0849      	lsrs	r1, r1, #1
 8019378:	2000      	movs	r0, #0
 801937a:	460c      	mov	r4, r1
 801937c:	4605      	mov	r5, r0
 801937e:	eb12 0804 	adds.w	r8, r2, r4
 8019382:	eb43 0905 	adc.w	r9, r3, r5
 8019386:	697b      	ldr	r3, [r7, #20]
 8019388:	685b      	ldr	r3, [r3, #4]
 801938a:	2200      	movs	r2, #0
 801938c:	469a      	mov	sl, r3
 801938e:	4693      	mov	fp, r2
 8019390:	4652      	mov	r2, sl
 8019392:	465b      	mov	r3, fp
 8019394:	4640      	mov	r0, r8
 8019396:	4649      	mov	r1, r9
 8019398:	f7e7 f80a 	bl	80003b0 <__aeabi_uldivmod>
 801939c:	4602      	mov	r2, r0
 801939e:	460b      	mov	r3, r1
 80193a0:	4613      	mov	r3, r2
 80193a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80193a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80193aa:	d308      	bcc.n	80193be <UART_SetConfig+0x9a2>
 80193ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80193b2:	d204      	bcs.n	80193be <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80193b4:	697b      	ldr	r3, [r7, #20]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80193ba:	60da      	str	r2, [r3, #12]
 80193bc:	e17f      	b.n	80196be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80193be:	2301      	movs	r3, #1
 80193c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80193c4:	e17b      	b.n	80196be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80193c6:	697b      	ldr	r3, [r7, #20]
 80193c8:	69db      	ldr	r3, [r3, #28]
 80193ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80193ce:	f040 80bd 	bne.w	801954c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80193d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80193d6:	2b20      	cmp	r3, #32
 80193d8:	dc48      	bgt.n	801946c <UART_SetConfig+0xa50>
 80193da:	2b00      	cmp	r3, #0
 80193dc:	db7b      	blt.n	80194d6 <UART_SetConfig+0xaba>
 80193de:	2b20      	cmp	r3, #32
 80193e0:	d879      	bhi.n	80194d6 <UART_SetConfig+0xaba>
 80193e2:	a201      	add	r2, pc, #4	@ (adr r2, 80193e8 <UART_SetConfig+0x9cc>)
 80193e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193e8:	08019473 	.word	0x08019473
 80193ec:	0801947b 	.word	0x0801947b
 80193f0:	080194d7 	.word	0x080194d7
 80193f4:	080194d7 	.word	0x080194d7
 80193f8:	08019483 	.word	0x08019483
 80193fc:	080194d7 	.word	0x080194d7
 8019400:	080194d7 	.word	0x080194d7
 8019404:	080194d7 	.word	0x080194d7
 8019408:	08019493 	.word	0x08019493
 801940c:	080194d7 	.word	0x080194d7
 8019410:	080194d7 	.word	0x080194d7
 8019414:	080194d7 	.word	0x080194d7
 8019418:	080194d7 	.word	0x080194d7
 801941c:	080194d7 	.word	0x080194d7
 8019420:	080194d7 	.word	0x080194d7
 8019424:	080194d7 	.word	0x080194d7
 8019428:	080194a3 	.word	0x080194a3
 801942c:	080194d7 	.word	0x080194d7
 8019430:	080194d7 	.word	0x080194d7
 8019434:	080194d7 	.word	0x080194d7
 8019438:	080194d7 	.word	0x080194d7
 801943c:	080194d7 	.word	0x080194d7
 8019440:	080194d7 	.word	0x080194d7
 8019444:	080194d7 	.word	0x080194d7
 8019448:	080194d7 	.word	0x080194d7
 801944c:	080194d7 	.word	0x080194d7
 8019450:	080194d7 	.word	0x080194d7
 8019454:	080194d7 	.word	0x080194d7
 8019458:	080194d7 	.word	0x080194d7
 801945c:	080194d7 	.word	0x080194d7
 8019460:	080194d7 	.word	0x080194d7
 8019464:	080194d7 	.word	0x080194d7
 8019468:	080194c9 	.word	0x080194c9
 801946c:	2b40      	cmp	r3, #64	@ 0x40
 801946e:	d02e      	beq.n	80194ce <UART_SetConfig+0xab2>
 8019470:	e031      	b.n	80194d6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019472:	f7f8 fded 	bl	8012050 <HAL_RCC_GetPCLK1Freq>
 8019476:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019478:	e033      	b.n	80194e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801947a:	f7f8 fdff 	bl	801207c <HAL_RCC_GetPCLK2Freq>
 801947e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019480:	e02f      	b.n	80194e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019482:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019486:	4618      	mov	r0, r3
 8019488:	f7fa fc96 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801948c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801948e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019490:	e027      	b.n	80194e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019492:	f107 0318 	add.w	r3, r7, #24
 8019496:	4618      	mov	r0, r3
 8019498:	f7fa fde2 	bl	8014060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801949c:	69fb      	ldr	r3, [r7, #28]
 801949e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194a0:	e01f      	b.n	80194e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80194a2:	4b69      	ldr	r3, [pc, #420]	@ (8019648 <UART_SetConfig+0xc2c>)
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	f003 0320 	and.w	r3, r3, #32
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d009      	beq.n	80194c2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80194ae:	4b66      	ldr	r3, [pc, #408]	@ (8019648 <UART_SetConfig+0xc2c>)
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	08db      	lsrs	r3, r3, #3
 80194b4:	f003 0303 	and.w	r3, r3, #3
 80194b8:	4a64      	ldr	r2, [pc, #400]	@ (801964c <UART_SetConfig+0xc30>)
 80194ba:	fa22 f303 	lsr.w	r3, r2, r3
 80194be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80194c0:	e00f      	b.n	80194e2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80194c2:	4b62      	ldr	r3, [pc, #392]	@ (801964c <UART_SetConfig+0xc30>)
 80194c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194c6:	e00c      	b.n	80194e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80194c8:	4b61      	ldr	r3, [pc, #388]	@ (8019650 <UART_SetConfig+0xc34>)
 80194ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194cc:	e009      	b.n	80194e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80194ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80194d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80194d4:	e005      	b.n	80194e2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80194d6:	2300      	movs	r3, #0
 80194d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80194da:	2301      	movs	r3, #1
 80194dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80194e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80194e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	f000 80ea 	beq.w	80196be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80194ea:	697b      	ldr	r3, [r7, #20]
 80194ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194ee:	4a55      	ldr	r2, [pc, #340]	@ (8019644 <UART_SetConfig+0xc28>)
 80194f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80194f4:	461a      	mov	r2, r3
 80194f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80194fc:	005a      	lsls	r2, r3, #1
 80194fe:	697b      	ldr	r3, [r7, #20]
 8019500:	685b      	ldr	r3, [r3, #4]
 8019502:	085b      	lsrs	r3, r3, #1
 8019504:	441a      	add	r2, r3
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	685b      	ldr	r3, [r3, #4]
 801950a:	fbb2 f3f3 	udiv	r3, r2, r3
 801950e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019512:	2b0f      	cmp	r3, #15
 8019514:	d916      	bls.n	8019544 <UART_SetConfig+0xb28>
 8019516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801951c:	d212      	bcs.n	8019544 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801951e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019520:	b29b      	uxth	r3, r3
 8019522:	f023 030f 	bic.w	r3, r3, #15
 8019526:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801952a:	085b      	lsrs	r3, r3, #1
 801952c:	b29b      	uxth	r3, r3
 801952e:	f003 0307 	and.w	r3, r3, #7
 8019532:	b29a      	uxth	r2, r3
 8019534:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019536:	4313      	orrs	r3, r2
 8019538:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801953a:	697b      	ldr	r3, [r7, #20]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019540:	60da      	str	r2, [r3, #12]
 8019542:	e0bc      	b.n	80196be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019544:	2301      	movs	r3, #1
 8019546:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801954a:	e0b8      	b.n	80196be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801954c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019550:	2b20      	cmp	r3, #32
 8019552:	dc4b      	bgt.n	80195ec <UART_SetConfig+0xbd0>
 8019554:	2b00      	cmp	r3, #0
 8019556:	f2c0 8087 	blt.w	8019668 <UART_SetConfig+0xc4c>
 801955a:	2b20      	cmp	r3, #32
 801955c:	f200 8084 	bhi.w	8019668 <UART_SetConfig+0xc4c>
 8019560:	a201      	add	r2, pc, #4	@ (adr r2, 8019568 <UART_SetConfig+0xb4c>)
 8019562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019566:	bf00      	nop
 8019568:	080195f3 	.word	0x080195f3
 801956c:	080195fb 	.word	0x080195fb
 8019570:	08019669 	.word	0x08019669
 8019574:	08019669 	.word	0x08019669
 8019578:	08019603 	.word	0x08019603
 801957c:	08019669 	.word	0x08019669
 8019580:	08019669 	.word	0x08019669
 8019584:	08019669 	.word	0x08019669
 8019588:	08019613 	.word	0x08019613
 801958c:	08019669 	.word	0x08019669
 8019590:	08019669 	.word	0x08019669
 8019594:	08019669 	.word	0x08019669
 8019598:	08019669 	.word	0x08019669
 801959c:	08019669 	.word	0x08019669
 80195a0:	08019669 	.word	0x08019669
 80195a4:	08019669 	.word	0x08019669
 80195a8:	08019623 	.word	0x08019623
 80195ac:	08019669 	.word	0x08019669
 80195b0:	08019669 	.word	0x08019669
 80195b4:	08019669 	.word	0x08019669
 80195b8:	08019669 	.word	0x08019669
 80195bc:	08019669 	.word	0x08019669
 80195c0:	08019669 	.word	0x08019669
 80195c4:	08019669 	.word	0x08019669
 80195c8:	08019669 	.word	0x08019669
 80195cc:	08019669 	.word	0x08019669
 80195d0:	08019669 	.word	0x08019669
 80195d4:	08019669 	.word	0x08019669
 80195d8:	08019669 	.word	0x08019669
 80195dc:	08019669 	.word	0x08019669
 80195e0:	08019669 	.word	0x08019669
 80195e4:	08019669 	.word	0x08019669
 80195e8:	0801965b 	.word	0x0801965b
 80195ec:	2b40      	cmp	r3, #64	@ 0x40
 80195ee:	d037      	beq.n	8019660 <UART_SetConfig+0xc44>
 80195f0:	e03a      	b.n	8019668 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80195f2:	f7f8 fd2d 	bl	8012050 <HAL_RCC_GetPCLK1Freq>
 80195f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80195f8:	e03c      	b.n	8019674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80195fa:	f7f8 fd3f 	bl	801207c <HAL_RCC_GetPCLK2Freq>
 80195fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019600:	e038      	b.n	8019674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019606:	4618      	mov	r0, r3
 8019608:	f7fa fbd6 	bl	8013db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801960c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801960e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019610:	e030      	b.n	8019674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019612:	f107 0318 	add.w	r3, r7, #24
 8019616:	4618      	mov	r0, r3
 8019618:	f7fa fd22 	bl	8014060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801961c:	69fb      	ldr	r3, [r7, #28]
 801961e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019620:	e028      	b.n	8019674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019622:	4b09      	ldr	r3, [pc, #36]	@ (8019648 <UART_SetConfig+0xc2c>)
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	f003 0320 	and.w	r3, r3, #32
 801962a:	2b00      	cmp	r3, #0
 801962c:	d012      	beq.n	8019654 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801962e:	4b06      	ldr	r3, [pc, #24]	@ (8019648 <UART_SetConfig+0xc2c>)
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	08db      	lsrs	r3, r3, #3
 8019634:	f003 0303 	and.w	r3, r3, #3
 8019638:	4a04      	ldr	r2, [pc, #16]	@ (801964c <UART_SetConfig+0xc30>)
 801963a:	fa22 f303 	lsr.w	r3, r2, r3
 801963e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019640:	e018      	b.n	8019674 <UART_SetConfig+0xc58>
 8019642:	bf00      	nop
 8019644:	0801ec04 	.word	0x0801ec04
 8019648:	58024400 	.word	0x58024400
 801964c:	03d09000 	.word	0x03d09000
 8019650:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8019654:	4b24      	ldr	r3, [pc, #144]	@ (80196e8 <UART_SetConfig+0xccc>)
 8019656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019658:	e00c      	b.n	8019674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801965a:	4b24      	ldr	r3, [pc, #144]	@ (80196ec <UART_SetConfig+0xcd0>)
 801965c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801965e:	e009      	b.n	8019674 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019660:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019666:	e005      	b.n	8019674 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8019668:	2300      	movs	r3, #0
 801966a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801966c:	2301      	movs	r3, #1
 801966e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019672:	bf00      	nop
    }

    if (pclk != 0U)
 8019674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019676:	2b00      	cmp	r3, #0
 8019678:	d021      	beq.n	80196be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801967a:	697b      	ldr	r3, [r7, #20]
 801967c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801967e:	4a1c      	ldr	r2, [pc, #112]	@ (80196f0 <UART_SetConfig+0xcd4>)
 8019680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019684:	461a      	mov	r2, r3
 8019686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019688:	fbb3 f2f2 	udiv	r2, r3, r2
 801968c:	697b      	ldr	r3, [r7, #20]
 801968e:	685b      	ldr	r3, [r3, #4]
 8019690:	085b      	lsrs	r3, r3, #1
 8019692:	441a      	add	r2, r3
 8019694:	697b      	ldr	r3, [r7, #20]
 8019696:	685b      	ldr	r3, [r3, #4]
 8019698:	fbb2 f3f3 	udiv	r3, r2, r3
 801969c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801969e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196a0:	2b0f      	cmp	r3, #15
 80196a2:	d909      	bls.n	80196b8 <UART_SetConfig+0xc9c>
 80196a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80196aa:	d205      	bcs.n	80196b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80196ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196ae:	b29a      	uxth	r2, r3
 80196b0:	697b      	ldr	r3, [r7, #20]
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	60da      	str	r2, [r3, #12]
 80196b6:	e002      	b.n	80196be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80196b8:	2301      	movs	r3, #1
 80196ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80196be:	697b      	ldr	r3, [r7, #20]
 80196c0:	2201      	movs	r2, #1
 80196c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80196c6:	697b      	ldr	r3, [r7, #20]
 80196c8:	2201      	movs	r2, #1
 80196ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80196ce:	697b      	ldr	r3, [r7, #20]
 80196d0:	2200      	movs	r2, #0
 80196d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80196d4:	697b      	ldr	r3, [r7, #20]
 80196d6:	2200      	movs	r2, #0
 80196d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80196da:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80196de:	4618      	mov	r0, r3
 80196e0:	3748      	adds	r7, #72	@ 0x48
 80196e2:	46bd      	mov	sp, r7
 80196e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80196e8:	03d09000 	.word	0x03d09000
 80196ec:	003d0900 	.word	0x003d0900
 80196f0:	0801ec04 	.word	0x0801ec04

080196f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80196f4:	b480      	push	{r7}
 80196f6:	b083      	sub	sp, #12
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019700:	f003 0308 	and.w	r3, r3, #8
 8019704:	2b00      	cmp	r3, #0
 8019706:	d00a      	beq.n	801971e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	685b      	ldr	r3, [r3, #4]
 801970e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	430a      	orrs	r2, r1
 801971c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019722:	f003 0301 	and.w	r3, r3, #1
 8019726:	2b00      	cmp	r3, #0
 8019728:	d00a      	beq.n	8019740 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	685b      	ldr	r3, [r3, #4]
 8019730:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	430a      	orrs	r2, r1
 801973e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019744:	f003 0302 	and.w	r3, r3, #2
 8019748:	2b00      	cmp	r3, #0
 801974a:	d00a      	beq.n	8019762 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	685b      	ldr	r3, [r3, #4]
 8019752:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	430a      	orrs	r2, r1
 8019760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019766:	f003 0304 	and.w	r3, r3, #4
 801976a:	2b00      	cmp	r3, #0
 801976c:	d00a      	beq.n	8019784 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	685b      	ldr	r3, [r3, #4]
 8019774:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	430a      	orrs	r2, r1
 8019782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019788:	f003 0310 	and.w	r3, r3, #16
 801978c:	2b00      	cmp	r3, #0
 801978e:	d00a      	beq.n	80197a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	689b      	ldr	r3, [r3, #8]
 8019796:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	430a      	orrs	r2, r1
 80197a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197aa:	f003 0320 	and.w	r3, r3, #32
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d00a      	beq.n	80197c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	689b      	ldr	r3, [r3, #8]
 80197b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	430a      	orrs	r2, r1
 80197c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80197cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d01a      	beq.n	801980a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	685b      	ldr	r3, [r3, #4]
 80197da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	430a      	orrs	r2, r1
 80197e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80197ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80197f2:	d10a      	bne.n	801980a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	685b      	ldr	r3, [r3, #4]
 80197fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	430a      	orrs	r2, r1
 8019808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801980e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019812:	2b00      	cmp	r3, #0
 8019814:	d00a      	beq.n	801982c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	685b      	ldr	r3, [r3, #4]
 801981c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	430a      	orrs	r2, r1
 801982a:	605a      	str	r2, [r3, #4]
  }
}
 801982c:	bf00      	nop
 801982e:	370c      	adds	r7, #12
 8019830:	46bd      	mov	sp, r7
 8019832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019836:	4770      	bx	lr

08019838 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b098      	sub	sp, #96	@ 0x60
 801983c:	af02      	add	r7, sp, #8
 801983e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	2200      	movs	r2, #0
 8019844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019848:	f7ef fe94 	bl	8009574 <HAL_GetTick>
 801984c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	f003 0308 	and.w	r3, r3, #8
 8019858:	2b08      	cmp	r3, #8
 801985a:	d12f      	bne.n	80198bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801985c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019860:	9300      	str	r3, [sp, #0]
 8019862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019864:	2200      	movs	r2, #0
 8019866:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801986a:	6878      	ldr	r0, [r7, #4]
 801986c:	f000 f88e 	bl	801998c <UART_WaitOnFlagUntilTimeout>
 8019870:	4603      	mov	r3, r0
 8019872:	2b00      	cmp	r3, #0
 8019874:	d022      	beq.n	80198bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801987c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801987e:	e853 3f00 	ldrex	r3, [r3]
 8019882:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801988a:	653b      	str	r3, [r7, #80]	@ 0x50
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	461a      	mov	r2, r3
 8019892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019894:	647b      	str	r3, [r7, #68]	@ 0x44
 8019896:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801989a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801989c:	e841 2300 	strex	r3, r2, [r1]
 80198a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80198a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d1e6      	bne.n	8019876 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	2220      	movs	r2, #32
 80198ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	2200      	movs	r2, #0
 80198b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80198b8:	2303      	movs	r3, #3
 80198ba:	e063      	b.n	8019984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	f003 0304 	and.w	r3, r3, #4
 80198c6:	2b04      	cmp	r3, #4
 80198c8:	d149      	bne.n	801995e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80198ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80198ce:	9300      	str	r3, [sp, #0]
 80198d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80198d2:	2200      	movs	r2, #0
 80198d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	f000 f857 	bl	801998c <UART_WaitOnFlagUntilTimeout>
 80198de:	4603      	mov	r3, r0
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d03c      	beq.n	801995e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80198ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198ec:	e853 3f00 	ldrex	r3, [r3]
 80198f0:	623b      	str	r3, [r7, #32]
   return(result);
 80198f2:	6a3b      	ldr	r3, [r7, #32]
 80198f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80198f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	461a      	mov	r2, r3
 8019900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019902:	633b      	str	r3, [r7, #48]	@ 0x30
 8019904:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801990a:	e841 2300 	strex	r3, r2, [r1]
 801990e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019912:	2b00      	cmp	r3, #0
 8019914:	d1e6      	bne.n	80198e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	3308      	adds	r3, #8
 801991c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801991e:	693b      	ldr	r3, [r7, #16]
 8019920:	e853 3f00 	ldrex	r3, [r3]
 8019924:	60fb      	str	r3, [r7, #12]
   return(result);
 8019926:	68fb      	ldr	r3, [r7, #12]
 8019928:	f023 0301 	bic.w	r3, r3, #1
 801992c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	3308      	adds	r3, #8
 8019934:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019936:	61fa      	str	r2, [r7, #28]
 8019938:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801993a:	69b9      	ldr	r1, [r7, #24]
 801993c:	69fa      	ldr	r2, [r7, #28]
 801993e:	e841 2300 	strex	r3, r2, [r1]
 8019942:	617b      	str	r3, [r7, #20]
   return(result);
 8019944:	697b      	ldr	r3, [r7, #20]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d1e5      	bne.n	8019916 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	2220      	movs	r2, #32
 801994e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	2200      	movs	r2, #0
 8019956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801995a:	2303      	movs	r3, #3
 801995c:	e012      	b.n	8019984 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	2220      	movs	r2, #32
 8019962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	2220      	movs	r2, #32
 801996a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	2200      	movs	r2, #0
 8019972:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	2200      	movs	r2, #0
 8019978:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	2200      	movs	r2, #0
 801997e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019982:	2300      	movs	r3, #0
}
 8019984:	4618      	mov	r0, r3
 8019986:	3758      	adds	r7, #88	@ 0x58
 8019988:	46bd      	mov	sp, r7
 801998a:	bd80      	pop	{r7, pc}

0801998c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b084      	sub	sp, #16
 8019990:	af00      	add	r7, sp, #0
 8019992:	60f8      	str	r0, [r7, #12]
 8019994:	60b9      	str	r1, [r7, #8]
 8019996:	603b      	str	r3, [r7, #0]
 8019998:	4613      	mov	r3, r2
 801999a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801999c:	e04f      	b.n	8019a3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801999e:	69bb      	ldr	r3, [r7, #24]
 80199a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199a4:	d04b      	beq.n	8019a3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80199a6:	f7ef fde5 	bl	8009574 <HAL_GetTick>
 80199aa:	4602      	mov	r2, r0
 80199ac:	683b      	ldr	r3, [r7, #0]
 80199ae:	1ad3      	subs	r3, r2, r3
 80199b0:	69ba      	ldr	r2, [r7, #24]
 80199b2:	429a      	cmp	r2, r3
 80199b4:	d302      	bcc.n	80199bc <UART_WaitOnFlagUntilTimeout+0x30>
 80199b6:	69bb      	ldr	r3, [r7, #24]
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d101      	bne.n	80199c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80199bc:	2303      	movs	r3, #3
 80199be:	e04e      	b.n	8019a5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	f003 0304 	and.w	r3, r3, #4
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d037      	beq.n	8019a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80199ce:	68bb      	ldr	r3, [r7, #8]
 80199d0:	2b80      	cmp	r3, #128	@ 0x80
 80199d2:	d034      	beq.n	8019a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80199d4:	68bb      	ldr	r3, [r7, #8]
 80199d6:	2b40      	cmp	r3, #64	@ 0x40
 80199d8:	d031      	beq.n	8019a3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	69db      	ldr	r3, [r3, #28]
 80199e0:	f003 0308 	and.w	r3, r3, #8
 80199e4:	2b08      	cmp	r3, #8
 80199e6:	d110      	bne.n	8019a0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	2208      	movs	r2, #8
 80199ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80199f0:	68f8      	ldr	r0, [r7, #12]
 80199f2:	f000 f95b 	bl	8019cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	2208      	movs	r2, #8
 80199fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	2200      	movs	r2, #0
 8019a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8019a06:	2301      	movs	r3, #1
 8019a08:	e029      	b.n	8019a5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	69db      	ldr	r3, [r3, #28]
 8019a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019a18:	d111      	bne.n	8019a3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019a24:	68f8      	ldr	r0, [r7, #12]
 8019a26:	f000 f941 	bl	8019cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	2220      	movs	r2, #32
 8019a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	2200      	movs	r2, #0
 8019a36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8019a3a:	2303      	movs	r3, #3
 8019a3c:	e00f      	b.n	8019a5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	69da      	ldr	r2, [r3, #28]
 8019a44:	68bb      	ldr	r3, [r7, #8]
 8019a46:	4013      	ands	r3, r2
 8019a48:	68ba      	ldr	r2, [r7, #8]
 8019a4a:	429a      	cmp	r2, r3
 8019a4c:	bf0c      	ite	eq
 8019a4e:	2301      	moveq	r3, #1
 8019a50:	2300      	movne	r3, #0
 8019a52:	b2db      	uxtb	r3, r3
 8019a54:	461a      	mov	r2, r3
 8019a56:	79fb      	ldrb	r3, [r7, #7]
 8019a58:	429a      	cmp	r2, r3
 8019a5a:	d0a0      	beq.n	801999e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8019a5c:	2300      	movs	r3, #0
}
 8019a5e:	4618      	mov	r0, r3
 8019a60:	3710      	adds	r7, #16
 8019a62:	46bd      	mov	sp, r7
 8019a64:	bd80      	pop	{r7, pc}
	...

08019a68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019a68:	b480      	push	{r7}
 8019a6a:	b0a3      	sub	sp, #140	@ 0x8c
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	60f8      	str	r0, [r7, #12]
 8019a70:	60b9      	str	r1, [r7, #8]
 8019a72:	4613      	mov	r3, r2
 8019a74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	68ba      	ldr	r2, [r7, #8]
 8019a7a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	88fa      	ldrh	r2, [r7, #6]
 8019a80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	88fa      	ldrh	r2, [r7, #6]
 8019a88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	2200      	movs	r2, #0
 8019a90:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	689b      	ldr	r3, [r3, #8]
 8019a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019a9a:	d10e      	bne.n	8019aba <UART_Start_Receive_IT+0x52>
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	691b      	ldr	r3, [r3, #16]
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d105      	bne.n	8019ab0 <UART_Start_Receive_IT+0x48>
 8019aa4:	68fb      	ldr	r3, [r7, #12]
 8019aa6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8019aaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019aae:	e02d      	b.n	8019b0c <UART_Start_Receive_IT+0xa4>
 8019ab0:	68fb      	ldr	r3, [r7, #12]
 8019ab2:	22ff      	movs	r2, #255	@ 0xff
 8019ab4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ab8:	e028      	b.n	8019b0c <UART_Start_Receive_IT+0xa4>
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	689b      	ldr	r3, [r3, #8]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d10d      	bne.n	8019ade <UART_Start_Receive_IT+0x76>
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	691b      	ldr	r3, [r3, #16]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d104      	bne.n	8019ad4 <UART_Start_Receive_IT+0x6c>
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	22ff      	movs	r2, #255	@ 0xff
 8019ace:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019ad2:	e01b      	b.n	8019b0c <UART_Start_Receive_IT+0xa4>
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	227f      	movs	r2, #127	@ 0x7f
 8019ad8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019adc:	e016      	b.n	8019b0c <UART_Start_Receive_IT+0xa4>
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	689b      	ldr	r3, [r3, #8]
 8019ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019ae6:	d10d      	bne.n	8019b04 <UART_Start_Receive_IT+0x9c>
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	691b      	ldr	r3, [r3, #16]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d104      	bne.n	8019afa <UART_Start_Receive_IT+0x92>
 8019af0:	68fb      	ldr	r3, [r7, #12]
 8019af2:	227f      	movs	r2, #127	@ 0x7f
 8019af4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019af8:	e008      	b.n	8019b0c <UART_Start_Receive_IT+0xa4>
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	223f      	movs	r2, #63	@ 0x3f
 8019afe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019b02:	e003      	b.n	8019b0c <UART_Start_Receive_IT+0xa4>
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	2200      	movs	r2, #0
 8019b08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	2200      	movs	r2, #0
 8019b10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019b14:	68fb      	ldr	r3, [r7, #12]
 8019b16:	2222      	movs	r2, #34	@ 0x22
 8019b18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	3308      	adds	r3, #8
 8019b22:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019b26:	e853 3f00 	ldrex	r3, [r3]
 8019b2a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019b2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019b2e:	f043 0301 	orr.w	r3, r3, #1
 8019b32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	3308      	adds	r3, #8
 8019b3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019b40:	673a      	str	r2, [r7, #112]	@ 0x70
 8019b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b44:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019b46:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019b48:	e841 2300 	strex	r3, r2, [r1]
 8019b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8019b4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d1e3      	bne.n	8019b1c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019b58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019b5c:	d14f      	bne.n	8019bfe <UART_Start_Receive_IT+0x196>
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019b64:	88fa      	ldrh	r2, [r7, #6]
 8019b66:	429a      	cmp	r2, r3
 8019b68:	d349      	bcc.n	8019bfe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	689b      	ldr	r3, [r3, #8]
 8019b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019b72:	d107      	bne.n	8019b84 <UART_Start_Receive_IT+0x11c>
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	691b      	ldr	r3, [r3, #16]
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d103      	bne.n	8019b84 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	4a47      	ldr	r2, [pc, #284]	@ (8019c9c <UART_Start_Receive_IT+0x234>)
 8019b80:	675a      	str	r2, [r3, #116]	@ 0x74
 8019b82:	e002      	b.n	8019b8a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	4a46      	ldr	r2, [pc, #280]	@ (8019ca0 <UART_Start_Receive_IT+0x238>)
 8019b88:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019b8a:	68fb      	ldr	r3, [r7, #12]
 8019b8c:	691b      	ldr	r3, [r3, #16]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d01a      	beq.n	8019bc8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019b9a:	e853 3f00 	ldrex	r3, [r3]
 8019b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019ba6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	461a      	mov	r2, r3
 8019bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019bb6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bb8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019bba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019bbc:	e841 2300 	strex	r3, r2, [r1]
 8019bc0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d1e4      	bne.n	8019b92 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	3308      	adds	r3, #8
 8019bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bd2:	e853 3f00 	ldrex	r3, [r3]
 8019bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019bde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	3308      	adds	r3, #8
 8019be6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019be8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8019bea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019bee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019bf0:	e841 2300 	strex	r3, r2, [r1]
 8019bf4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d1e5      	bne.n	8019bc8 <UART_Start_Receive_IT+0x160>
 8019bfc:	e046      	b.n	8019c8c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	689b      	ldr	r3, [r3, #8]
 8019c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019c06:	d107      	bne.n	8019c18 <UART_Start_Receive_IT+0x1b0>
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	691b      	ldr	r3, [r3, #16]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d103      	bne.n	8019c18 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	4a24      	ldr	r2, [pc, #144]	@ (8019ca4 <UART_Start_Receive_IT+0x23c>)
 8019c14:	675a      	str	r2, [r3, #116]	@ 0x74
 8019c16:	e002      	b.n	8019c1e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	4a23      	ldr	r2, [pc, #140]	@ (8019ca8 <UART_Start_Receive_IT+0x240>)
 8019c1c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	691b      	ldr	r3, [r3, #16]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d019      	beq.n	8019c5a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c2e:	e853 3f00 	ldrex	r3, [r3]
 8019c32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c36:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8019c3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	461a      	mov	r2, r3
 8019c42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8019c46:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019c4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019c4c:	e841 2300 	strex	r3, r2, [r1]
 8019c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d1e6      	bne.n	8019c26 <UART_Start_Receive_IT+0x1be>
 8019c58:	e018      	b.n	8019c8c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c60:	697b      	ldr	r3, [r7, #20]
 8019c62:	e853 3f00 	ldrex	r3, [r3]
 8019c66:	613b      	str	r3, [r7, #16]
   return(result);
 8019c68:	693b      	ldr	r3, [r7, #16]
 8019c6a:	f043 0320 	orr.w	r3, r3, #32
 8019c6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	461a      	mov	r2, r3
 8019c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019c78:	623b      	str	r3, [r7, #32]
 8019c7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c7c:	69f9      	ldr	r1, [r7, #28]
 8019c7e:	6a3a      	ldr	r2, [r7, #32]
 8019c80:	e841 2300 	strex	r3, r2, [r1]
 8019c84:	61bb      	str	r3, [r7, #24]
   return(result);
 8019c86:	69bb      	ldr	r3, [r7, #24]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d1e6      	bne.n	8019c5a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019c8c:	2300      	movs	r3, #0
}
 8019c8e:	4618      	mov	r0, r3
 8019c90:	378c      	adds	r7, #140	@ 0x8c
 8019c92:	46bd      	mov	sp, r7
 8019c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c98:	4770      	bx	lr
 8019c9a:	bf00      	nop
 8019c9c:	0801a80d 	.word	0x0801a80d
 8019ca0:	0801a4a9 	.word	0x0801a4a9
 8019ca4:	0801a2f1 	.word	0x0801a2f1
 8019ca8:	0801a139 	.word	0x0801a139

08019cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019cac:	b480      	push	{r7}
 8019cae:	b095      	sub	sp, #84	@ 0x54
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cbc:	e853 3f00 	ldrex	r3, [r3]
 8019cc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	461a      	mov	r2, r3
 8019cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8019cd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019cd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019cda:	e841 2300 	strex	r3, r2, [r1]
 8019cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d1e6      	bne.n	8019cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	3308      	adds	r3, #8
 8019cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019cee:	6a3b      	ldr	r3, [r7, #32]
 8019cf0:	e853 3f00 	ldrex	r3, [r3]
 8019cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8019cf6:	69fa      	ldr	r2, [r7, #28]
 8019cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8019d74 <UART_EndRxTransfer+0xc8>)
 8019cfa:	4013      	ands	r3, r2
 8019cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	3308      	adds	r3, #8
 8019d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d0e:	e841 2300 	strex	r3, r2, [r1]
 8019d12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d1e5      	bne.n	8019ce6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019d1e:	2b01      	cmp	r3, #1
 8019d20:	d118      	bne.n	8019d54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	e853 3f00 	ldrex	r3, [r3]
 8019d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d30:	68bb      	ldr	r3, [r7, #8]
 8019d32:	f023 0310 	bic.w	r3, r3, #16
 8019d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	461a      	mov	r2, r3
 8019d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d40:	61bb      	str	r3, [r7, #24]
 8019d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d44:	6979      	ldr	r1, [r7, #20]
 8019d46:	69ba      	ldr	r2, [r7, #24]
 8019d48:	e841 2300 	strex	r3, r2, [r1]
 8019d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8019d4e:	693b      	ldr	r3, [r7, #16]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d1e6      	bne.n	8019d22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	2220      	movs	r2, #32
 8019d58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	2200      	movs	r2, #0
 8019d60:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	2200      	movs	r2, #0
 8019d66:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019d68:	bf00      	nop
 8019d6a:	3754      	adds	r7, #84	@ 0x54
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d72:	4770      	bx	lr
 8019d74:	effffffe 	.word	0xeffffffe

08019d78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019d78:	b580      	push	{r7, lr}
 8019d7a:	b084      	sub	sp, #16
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019d84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	2200      	movs	r2, #0
 8019d8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019d8e:	68f8      	ldr	r0, [r7, #12]
 8019d90:	f7fe fe2e 	bl	80189f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019d94:	bf00      	nop
 8019d96:	3710      	adds	r7, #16
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	bd80      	pop	{r7, pc}

08019d9c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019d9c:	b480      	push	{r7}
 8019d9e:	b08f      	sub	sp, #60	@ 0x3c
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019daa:	2b21      	cmp	r3, #33	@ 0x21
 8019dac:	d14c      	bne.n	8019e48 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019db4:	b29b      	uxth	r3, r3
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d132      	bne.n	8019e20 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019dc0:	6a3b      	ldr	r3, [r7, #32]
 8019dc2:	e853 3f00 	ldrex	r3, [r3]
 8019dc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8019dc8:	69fb      	ldr	r3, [r7, #28]
 8019dca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	461a      	mov	r2, r3
 8019dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019dda:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ddc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019dde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019de0:	e841 2300 	strex	r3, r2, [r1]
 8019de4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d1e6      	bne.n	8019dba <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	e853 3f00 	ldrex	r3, [r3]
 8019df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8019dfa:	68bb      	ldr	r3, [r7, #8]
 8019dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	461a      	mov	r2, r3
 8019e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e0a:	61bb      	str	r3, [r7, #24]
 8019e0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e0e:	6979      	ldr	r1, [r7, #20]
 8019e10:	69ba      	ldr	r2, [r7, #24]
 8019e12:	e841 2300 	strex	r3, r2, [r1]
 8019e16:	613b      	str	r3, [r7, #16]
   return(result);
 8019e18:	693b      	ldr	r3, [r7, #16]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d1e6      	bne.n	8019dec <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8019e1e:	e013      	b.n	8019e48 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e24:	781a      	ldrb	r2, [r3, #0]
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8019e2c:	687b      	ldr	r3, [r7, #4]
 8019e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e30:	1c5a      	adds	r2, r3, #1
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e3c:	b29b      	uxth	r3, r3
 8019e3e:	3b01      	subs	r3, #1
 8019e40:	b29a      	uxth	r2, r3
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019e48:	bf00      	nop
 8019e4a:	373c      	adds	r7, #60	@ 0x3c
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e52:	4770      	bx	lr

08019e54 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019e54:	b480      	push	{r7}
 8019e56:	b091      	sub	sp, #68	@ 0x44
 8019e58:	af00      	add	r7, sp, #0
 8019e5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019e62:	2b21      	cmp	r3, #33	@ 0x21
 8019e64:	d151      	bne.n	8019f0a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e6c:	b29b      	uxth	r3, r3
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d132      	bne.n	8019ed8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e7a:	e853 3f00 	ldrex	r3, [r3]
 8019e7e:	623b      	str	r3, [r7, #32]
   return(result);
 8019e80:	6a3b      	ldr	r3, [r7, #32]
 8019e82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019e86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	461a      	mov	r2, r3
 8019e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8019e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019e98:	e841 2300 	strex	r3, r2, [r1]
 8019e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d1e6      	bne.n	8019e72 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019eaa:	693b      	ldr	r3, [r7, #16]
 8019eac:	e853 3f00 	ldrex	r3, [r3]
 8019eb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	461a      	mov	r2, r3
 8019ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ec2:	61fb      	str	r3, [r7, #28]
 8019ec4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ec6:	69b9      	ldr	r1, [r7, #24]
 8019ec8:	69fa      	ldr	r2, [r7, #28]
 8019eca:	e841 2300 	strex	r3, r2, [r1]
 8019ece:	617b      	str	r3, [r7, #20]
   return(result);
 8019ed0:	697b      	ldr	r3, [r7, #20]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d1e6      	bne.n	8019ea4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019ed6:	e018      	b.n	8019f0a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ee0:	881b      	ldrh	r3, [r3, #0]
 8019ee2:	461a      	mov	r2, r3
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019eec:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019ef2:	1c9a      	adds	r2, r3, #2
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019efe:	b29b      	uxth	r3, r3
 8019f00:	3b01      	subs	r3, #1
 8019f02:	b29a      	uxth	r2, r3
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019f0a:	bf00      	nop
 8019f0c:	3744      	adds	r7, #68	@ 0x44
 8019f0e:	46bd      	mov	sp, r7
 8019f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f14:	4770      	bx	lr

08019f16 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019f16:	b480      	push	{r7}
 8019f18:	b091      	sub	sp, #68	@ 0x44
 8019f1a:	af00      	add	r7, sp, #0
 8019f1c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019f24:	2b21      	cmp	r3, #33	@ 0x21
 8019f26:	d160      	bne.n	8019fea <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019f2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019f30:	e057      	b.n	8019fe2 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f38:	b29b      	uxth	r3, r3
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d133      	bne.n	8019fa6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	3308      	adds	r3, #8
 8019f44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f48:	e853 3f00 	ldrex	r3, [r3]
 8019f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8019f4e:	6a3b      	ldr	r3, [r7, #32]
 8019f50:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019f54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	3308      	adds	r3, #8
 8019f5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019f5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8019f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019f66:	e841 2300 	strex	r3, r2, [r1]
 8019f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d1e5      	bne.n	8019f3e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f78:	693b      	ldr	r3, [r7, #16]
 8019f7a:	e853 3f00 	ldrex	r3, [r3]
 8019f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	461a      	mov	r2, r3
 8019f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f90:	61fb      	str	r3, [r7, #28]
 8019f92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f94:	69b9      	ldr	r1, [r7, #24]
 8019f96:	69fa      	ldr	r2, [r7, #28]
 8019f98:	e841 2300 	strex	r3, r2, [r1]
 8019f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8019f9e:	697b      	ldr	r3, [r7, #20]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d1e6      	bne.n	8019f72 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019fa4:	e021      	b.n	8019fea <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	69db      	ldr	r3, [r3, #28]
 8019fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d013      	beq.n	8019fdc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fb8:	781a      	ldrb	r2, [r3, #0]
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fc4:	1c5a      	adds	r2, r3, #1
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019fd0:	b29b      	uxth	r3, r3
 8019fd2:	3b01      	subs	r3, #1
 8019fd4:	b29a      	uxth	r2, r3
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019fdc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019fde:	3b01      	subs	r3, #1
 8019fe0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019fe2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d1a4      	bne.n	8019f32 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019fe8:	e7ff      	b.n	8019fea <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019fea:	bf00      	nop
 8019fec:	3744      	adds	r7, #68	@ 0x44
 8019fee:	46bd      	mov	sp, r7
 8019ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ff4:	4770      	bx	lr

08019ff6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019ff6:	b480      	push	{r7}
 8019ff8:	b091      	sub	sp, #68	@ 0x44
 8019ffa:	af00      	add	r7, sp, #0
 8019ffc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801a004:	2b21      	cmp	r3, #33	@ 0x21
 801a006:	d165      	bne.n	801a0d4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801a00e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a010:	e05c      	b.n	801a0cc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a018:	b29b      	uxth	r3, r3
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d133      	bne.n	801a086 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	3308      	adds	r3, #8
 801a024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a026:	6a3b      	ldr	r3, [r7, #32]
 801a028:	e853 3f00 	ldrex	r3, [r3]
 801a02c:	61fb      	str	r3, [r7, #28]
   return(result);
 801a02e:	69fb      	ldr	r3, [r7, #28]
 801a030:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801a034:	637b      	str	r3, [r7, #52]	@ 0x34
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	3308      	adds	r3, #8
 801a03c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a03e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a040:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a042:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a046:	e841 2300 	strex	r3, r2, [r1]
 801a04a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d1e5      	bne.n	801a01e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	e853 3f00 	ldrex	r3, [r3]
 801a05e:	60bb      	str	r3, [r7, #8]
   return(result);
 801a060:	68bb      	ldr	r3, [r7, #8]
 801a062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a066:	633b      	str	r3, [r7, #48]	@ 0x30
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	461a      	mov	r2, r3
 801a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a070:	61bb      	str	r3, [r7, #24]
 801a072:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a074:	6979      	ldr	r1, [r7, #20]
 801a076:	69ba      	ldr	r2, [r7, #24]
 801a078:	e841 2300 	strex	r3, r2, [r1]
 801a07c:	613b      	str	r3, [r7, #16]
   return(result);
 801a07e:	693b      	ldr	r3, [r7, #16]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d1e6      	bne.n	801a052 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801a084:	e026      	b.n	801a0d4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	69db      	ldr	r3, [r3, #28]
 801a08c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a090:	2b00      	cmp	r3, #0
 801a092:	d018      	beq.n	801a0c6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a098:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801a09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a09c:	881b      	ldrh	r3, [r3, #0]
 801a09e:	461a      	mov	r2, r3
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a0a8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a0ae:	1c9a      	adds	r2, r3, #2
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801a0ba:	b29b      	uxth	r3, r3
 801a0bc:	3b01      	subs	r3, #1
 801a0be:	b29a      	uxth	r2, r3
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a0c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a0c8:	3b01      	subs	r3, #1
 801a0ca:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a0cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d19f      	bne.n	801a012 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801a0d2:	e7ff      	b.n	801a0d4 <UART_TxISR_16BIT_FIFOEN+0xde>
 801a0d4:	bf00      	nop
 801a0d6:	3744      	adds	r7, #68	@ 0x44
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0de:	4770      	bx	lr

0801a0e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a0e0:	b580      	push	{r7, lr}
 801a0e2:	b088      	sub	sp, #32
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	e853 3f00 	ldrex	r3, [r3]
 801a0f4:	60bb      	str	r3, [r7, #8]
   return(result);
 801a0f6:	68bb      	ldr	r3, [r7, #8]
 801a0f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a0fc:	61fb      	str	r3, [r7, #28]
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	461a      	mov	r2, r3
 801a104:	69fb      	ldr	r3, [r7, #28]
 801a106:	61bb      	str	r3, [r7, #24]
 801a108:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a10a:	6979      	ldr	r1, [r7, #20]
 801a10c:	69ba      	ldr	r2, [r7, #24]
 801a10e:	e841 2300 	strex	r3, r2, [r1]
 801a112:	613b      	str	r3, [r7, #16]
   return(result);
 801a114:	693b      	ldr	r3, [r7, #16]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d1e6      	bne.n	801a0e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	2220      	movs	r2, #32
 801a11e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	2200      	movs	r2, #0
 801a126:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a128:	6878      	ldr	r0, [r7, #4]
 801a12a:	f7fe fc57 	bl	80189dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a12e:	bf00      	nop
 801a130:	3720      	adds	r7, #32
 801a132:	46bd      	mov	sp, r7
 801a134:	bd80      	pop	{r7, pc}
	...

0801a138 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a138:	b580      	push	{r7, lr}
 801a13a:	b09c      	sub	sp, #112	@ 0x70
 801a13c:	af00      	add	r7, sp, #0
 801a13e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a146:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a150:	2b22      	cmp	r3, #34	@ 0x22
 801a152:	f040 80be 	bne.w	801a2d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a15c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a160:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801a164:	b2d9      	uxtb	r1, r3
 801a166:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a16a:	b2da      	uxtb	r2, r3
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a170:	400a      	ands	r2, r1
 801a172:	b2d2      	uxtb	r2, r2
 801a174:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a17a:	1c5a      	adds	r2, r3, #1
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a186:	b29b      	uxth	r3, r3
 801a188:	3b01      	subs	r3, #1
 801a18a:	b29a      	uxth	r2, r3
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a198:	b29b      	uxth	r3, r3
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	f040 80a1 	bne.w	801a2e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a1a8:	e853 3f00 	ldrex	r3, [r3]
 801a1ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a1ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a1b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a1b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	461a      	mov	r2, r3
 801a1bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1be:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a1c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a1c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a1c6:	e841 2300 	strex	r3, r2, [r1]
 801a1ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a1cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d1e6      	bne.n	801a1a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	3308      	adds	r3, #8
 801a1d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1dc:	e853 3f00 	ldrex	r3, [r3]
 801a1e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a1e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1e4:	f023 0301 	bic.w	r3, r3, #1
 801a1e8:	667b      	str	r3, [r7, #100]	@ 0x64
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	3308      	adds	r3, #8
 801a1f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a1f2:	647a      	str	r2, [r7, #68]	@ 0x44
 801a1f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a1f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a1fa:	e841 2300 	strex	r3, r2, [r1]
 801a1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a202:	2b00      	cmp	r3, #0
 801a204:	d1e5      	bne.n	801a1d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	2220      	movs	r2, #32
 801a20a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	2200      	movs	r2, #0
 801a212:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	2200      	movs	r2, #0
 801a218:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	4a33      	ldr	r2, [pc, #204]	@ (801a2ec <UART_RxISR_8BIT+0x1b4>)
 801a220:	4293      	cmp	r3, r2
 801a222:	d01f      	beq.n	801a264 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	685b      	ldr	r3, [r3, #4]
 801a22a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d018      	beq.n	801a264 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a23a:	e853 3f00 	ldrex	r3, [r3]
 801a23e:	623b      	str	r3, [r7, #32]
   return(result);
 801a240:	6a3b      	ldr	r3, [r7, #32]
 801a242:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a246:	663b      	str	r3, [r7, #96]	@ 0x60
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	461a      	mov	r2, r3
 801a24e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a250:	633b      	str	r3, [r7, #48]	@ 0x30
 801a252:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a258:	e841 2300 	strex	r3, r2, [r1]
 801a25c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a260:	2b00      	cmp	r3, #0
 801a262:	d1e6      	bne.n	801a232 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a268:	2b01      	cmp	r3, #1
 801a26a:	d12e      	bne.n	801a2ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	2200      	movs	r2, #0
 801a270:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a278:	693b      	ldr	r3, [r7, #16]
 801a27a:	e853 3f00 	ldrex	r3, [r3]
 801a27e:	60fb      	str	r3, [r7, #12]
   return(result);
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	f023 0310 	bic.w	r3, r3, #16
 801a286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	461a      	mov	r2, r3
 801a28e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a290:	61fb      	str	r3, [r7, #28]
 801a292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a294:	69b9      	ldr	r1, [r7, #24]
 801a296:	69fa      	ldr	r2, [r7, #28]
 801a298:	e841 2300 	strex	r3, r2, [r1]
 801a29c:	617b      	str	r3, [r7, #20]
   return(result);
 801a29e:	697b      	ldr	r3, [r7, #20]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d1e6      	bne.n	801a272 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	69db      	ldr	r3, [r3, #28]
 801a2aa:	f003 0310 	and.w	r3, r3, #16
 801a2ae:	2b10      	cmp	r3, #16
 801a2b0:	d103      	bne.n	801a2ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	2210      	movs	r2, #16
 801a2b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a2c0:	4619      	mov	r1, r3
 801a2c2:	6878      	ldr	r0, [r7, #4]
 801a2c4:	f7fe fb9e 	bl	8018a04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a2c8:	e00b      	b.n	801a2e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a2ca:	6878      	ldr	r0, [r7, #4]
 801a2cc:	f7ec f998 	bl	8006600 <HAL_UART_RxCpltCallback>
}
 801a2d0:	e007      	b.n	801a2e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	699a      	ldr	r2, [r3, #24]
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	f042 0208 	orr.w	r2, r2, #8
 801a2e0:	619a      	str	r2, [r3, #24]
}
 801a2e2:	bf00      	nop
 801a2e4:	3770      	adds	r7, #112	@ 0x70
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	bd80      	pop	{r7, pc}
 801a2ea:	bf00      	nop
 801a2ec:	58000c00 	.word	0x58000c00

0801a2f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b09c      	sub	sp, #112	@ 0x70
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a2fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a308:	2b22      	cmp	r3, #34	@ 0x22
 801a30a:	f040 80be 	bne.w	801a48a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a314:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a31c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801a31e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a322:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a326:	4013      	ands	r3, r2
 801a328:	b29a      	uxth	r2, r3
 801a32a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a32c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a332:	1c9a      	adds	r2, r3, #2
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a33e:	b29b      	uxth	r3, r3
 801a340:	3b01      	subs	r3, #1
 801a342:	b29a      	uxth	r2, r3
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a350:	b29b      	uxth	r3, r3
 801a352:	2b00      	cmp	r3, #0
 801a354:	f040 80a1 	bne.w	801a49a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a35e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a360:	e853 3f00 	ldrex	r3, [r3]
 801a364:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a368:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a36c:	667b      	str	r3, [r7, #100]	@ 0x64
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	461a      	mov	r2, r3
 801a374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a376:	657b      	str	r3, [r7, #84]	@ 0x54
 801a378:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a37a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a37c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a37e:	e841 2300 	strex	r3, r2, [r1]
 801a382:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a386:	2b00      	cmp	r3, #0
 801a388:	d1e6      	bne.n	801a358 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	3308      	adds	r3, #8
 801a390:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a394:	e853 3f00 	ldrex	r3, [r3]
 801a398:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a39c:	f023 0301 	bic.w	r3, r3, #1
 801a3a0:	663b      	str	r3, [r7, #96]	@ 0x60
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	3308      	adds	r3, #8
 801a3a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a3aa:	643a      	str	r2, [r7, #64]	@ 0x40
 801a3ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a3b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a3b2:	e841 2300 	strex	r3, r2, [r1]
 801a3b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d1e5      	bne.n	801a38a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	2220      	movs	r2, #32
 801a3c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	2200      	movs	r2, #0
 801a3ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	2200      	movs	r2, #0
 801a3d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	4a33      	ldr	r2, [pc, #204]	@ (801a4a4 <UART_RxISR_16BIT+0x1b4>)
 801a3d8:	4293      	cmp	r3, r2
 801a3da:	d01f      	beq.n	801a41c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	685b      	ldr	r3, [r3, #4]
 801a3e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d018      	beq.n	801a41c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3f0:	6a3b      	ldr	r3, [r7, #32]
 801a3f2:	e853 3f00 	ldrex	r3, [r3]
 801a3f6:	61fb      	str	r3, [r7, #28]
   return(result);
 801a3f8:	69fb      	ldr	r3, [r7, #28]
 801a3fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a3fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	461a      	mov	r2, r3
 801a406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a40a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a40c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a40e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a410:	e841 2300 	strex	r3, r2, [r1]
 801a414:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d1e6      	bne.n	801a3ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a420:	2b01      	cmp	r3, #1
 801a422:	d12e      	bne.n	801a482 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	2200      	movs	r2, #0
 801a428:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	e853 3f00 	ldrex	r3, [r3]
 801a436:	60bb      	str	r3, [r7, #8]
   return(result);
 801a438:	68bb      	ldr	r3, [r7, #8]
 801a43a:	f023 0310 	bic.w	r3, r3, #16
 801a43e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	461a      	mov	r2, r3
 801a446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a448:	61bb      	str	r3, [r7, #24]
 801a44a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a44c:	6979      	ldr	r1, [r7, #20]
 801a44e:	69ba      	ldr	r2, [r7, #24]
 801a450:	e841 2300 	strex	r3, r2, [r1]
 801a454:	613b      	str	r3, [r7, #16]
   return(result);
 801a456:	693b      	ldr	r3, [r7, #16]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d1e6      	bne.n	801a42a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	69db      	ldr	r3, [r3, #28]
 801a462:	f003 0310 	and.w	r3, r3, #16
 801a466:	2b10      	cmp	r3, #16
 801a468:	d103      	bne.n	801a472 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	2210      	movs	r2, #16
 801a470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a478:	4619      	mov	r1, r3
 801a47a:	6878      	ldr	r0, [r7, #4]
 801a47c:	f7fe fac2 	bl	8018a04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a480:	e00b      	b.n	801a49a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a482:	6878      	ldr	r0, [r7, #4]
 801a484:	f7ec f8bc 	bl	8006600 <HAL_UART_RxCpltCallback>
}
 801a488:	e007      	b.n	801a49a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	699a      	ldr	r2, [r3, #24]
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	f042 0208 	orr.w	r2, r2, #8
 801a498:	619a      	str	r2, [r3, #24]
}
 801a49a:	bf00      	nop
 801a49c:	3770      	adds	r7, #112	@ 0x70
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	bd80      	pop	{r7, pc}
 801a4a2:	bf00      	nop
 801a4a4:	58000c00 	.word	0x58000c00

0801a4a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a4a8:	b580      	push	{r7, lr}
 801a4aa:	b0ac      	sub	sp, #176	@ 0xb0
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a4b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	681b      	ldr	r3, [r3, #0]
 801a4be:	69db      	ldr	r3, [r3, #28]
 801a4c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	689b      	ldr	r3, [r3, #8]
 801a4d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a4de:	2b22      	cmp	r3, #34	@ 0x22
 801a4e0:	f040 8181 	bne.w	801a7e6 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a4ea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a4ee:	e124      	b.n	801a73a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4f6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a4fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a4fe:	b2d9      	uxtb	r1, r3
 801a500:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a504:	b2da      	uxtb	r2, r3
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a50a:	400a      	ands	r2, r1
 801a50c:	b2d2      	uxtb	r2, r2
 801a50e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a514:	1c5a      	adds	r2, r3, #1
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a520:	b29b      	uxth	r3, r3
 801a522:	3b01      	subs	r3, #1
 801a524:	b29a      	uxth	r2, r3
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	69db      	ldr	r3, [r3, #28]
 801a532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a53a:	f003 0307 	and.w	r3, r3, #7
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d053      	beq.n	801a5ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a546:	f003 0301 	and.w	r3, r3, #1
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d011      	beq.n	801a572 <UART_RxISR_8BIT_FIFOEN+0xca>
 801a54e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a556:	2b00      	cmp	r3, #0
 801a558:	d00b      	beq.n	801a572 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	2201      	movs	r2, #1
 801a560:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a568:	f043 0201 	orr.w	r2, r3, #1
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a576:	f003 0302 	and.w	r3, r3, #2
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d011      	beq.n	801a5a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a57e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a582:	f003 0301 	and.w	r3, r3, #1
 801a586:	2b00      	cmp	r3, #0
 801a588:	d00b      	beq.n	801a5a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	2202      	movs	r2, #2
 801a590:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a598:	f043 0204 	orr.w	r2, r3, #4
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a5a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a5a6:	f003 0304 	and.w	r3, r3, #4
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d011      	beq.n	801a5d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a5ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a5b2:	f003 0301 	and.w	r3, r3, #1
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d00b      	beq.n	801a5d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	2204      	movs	r2, #4
 801a5c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5c8:	f043 0202 	orr.w	r2, r3, #2
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d006      	beq.n	801a5ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a5dc:	6878      	ldr	r0, [r7, #4]
 801a5de:	f7fe fa07 	bl	80189f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a5f0:	b29b      	uxth	r3, r3
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	f040 80a1 	bne.w	801a73a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a600:	e853 3f00 	ldrex	r3, [r3]
 801a604:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a60c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	461a      	mov	r2, r3
 801a616:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a61a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a61c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a61e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a620:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a622:	e841 2300 	strex	r3, r2, [r1]
 801a626:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a628:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d1e4      	bne.n	801a5f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	3308      	adds	r3, #8
 801a634:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a638:	e853 3f00 	ldrex	r3, [r3]
 801a63c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a63e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a640:	4b6f      	ldr	r3, [pc, #444]	@ (801a800 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a642:	4013      	ands	r3, r2
 801a644:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	3308      	adds	r3, #8
 801a64e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a652:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a654:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a656:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a658:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a65a:	e841 2300 	strex	r3, r2, [r1]
 801a65e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a660:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a662:	2b00      	cmp	r3, #0
 801a664:	d1e3      	bne.n	801a62e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	2220      	movs	r2, #32
 801a66a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	2200      	movs	r2, #0
 801a672:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	2200      	movs	r2, #0
 801a678:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	4a61      	ldr	r2, [pc, #388]	@ (801a804 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a680:	4293      	cmp	r3, r2
 801a682:	d021      	beq.n	801a6c8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	685b      	ldr	r3, [r3, #4]
 801a68a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d01a      	beq.n	801a6c8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a69a:	e853 3f00 	ldrex	r3, [r3]
 801a69e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a6a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a6a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a6a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	461a      	mov	r2, r3
 801a6b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a6b4:	657b      	str	r3, [r7, #84]	@ 0x54
 801a6b6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a6ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a6bc:	e841 2300 	strex	r3, r2, [r1]
 801a6c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a6c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d1e4      	bne.n	801a692 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a6cc:	2b01      	cmp	r3, #1
 801a6ce:	d130      	bne.n	801a732 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	2200      	movs	r2, #0
 801a6d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6de:	e853 3f00 	ldrex	r3, [r3]
 801a6e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6e6:	f023 0310 	bic.w	r3, r3, #16
 801a6ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	461a      	mov	r2, r3
 801a6f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a6f8:	643b      	str	r3, [r7, #64]	@ 0x40
 801a6fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a6fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a700:	e841 2300 	strex	r3, r2, [r1]
 801a704:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d1e4      	bne.n	801a6d6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	69db      	ldr	r3, [r3, #28]
 801a712:	f003 0310 	and.w	r3, r3, #16
 801a716:	2b10      	cmp	r3, #16
 801a718:	d103      	bne.n	801a722 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	2210      	movs	r2, #16
 801a720:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a728:	4619      	mov	r1, r3
 801a72a:	6878      	ldr	r0, [r7, #4]
 801a72c:	f7fe f96a 	bl	8018a04 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a730:	e00e      	b.n	801a750 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801a732:	6878      	ldr	r0, [r7, #4]
 801a734:	f7eb ff64 	bl	8006600 <HAL_UART_RxCpltCallback>
        break;
 801a738:	e00a      	b.n	801a750 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a73a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d006      	beq.n	801a750 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801a742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a746:	f003 0320 	and.w	r3, r3, #32
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	f47f aed0 	bne.w	801a4f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a756:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a75a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d049      	beq.n	801a7f6 <UART_RxISR_8BIT_FIFOEN+0x34e>
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a768:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a76c:	429a      	cmp	r2, r3
 801a76e:	d242      	bcs.n	801a7f6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	3308      	adds	r3, #8
 801a776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a778:	6a3b      	ldr	r3, [r7, #32]
 801a77a:	e853 3f00 	ldrex	r3, [r3]
 801a77e:	61fb      	str	r3, [r7, #28]
   return(result);
 801a780:	69fb      	ldr	r3, [r7, #28]
 801a782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a786:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	3308      	adds	r3, #8
 801a790:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a794:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a796:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a79a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a79c:	e841 2300 	strex	r3, r2, [r1]
 801a7a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d1e3      	bne.n	801a770 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	4a17      	ldr	r2, [pc, #92]	@ (801a808 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801a7ac:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7b4:	68fb      	ldr	r3, [r7, #12]
 801a7b6:	e853 3f00 	ldrex	r3, [r3]
 801a7ba:	60bb      	str	r3, [r7, #8]
   return(result);
 801a7bc:	68bb      	ldr	r3, [r7, #8]
 801a7be:	f043 0320 	orr.w	r3, r3, #32
 801a7c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	461a      	mov	r2, r3
 801a7cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a7d0:	61bb      	str	r3, [r7, #24]
 801a7d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7d4:	6979      	ldr	r1, [r7, #20]
 801a7d6:	69ba      	ldr	r2, [r7, #24]
 801a7d8:	e841 2300 	strex	r3, r2, [r1]
 801a7dc:	613b      	str	r3, [r7, #16]
   return(result);
 801a7de:	693b      	ldr	r3, [r7, #16]
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	d1e4      	bne.n	801a7ae <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a7e4:	e007      	b.n	801a7f6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	699a      	ldr	r2, [r3, #24]
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	f042 0208 	orr.w	r2, r2, #8
 801a7f4:	619a      	str	r2, [r3, #24]
}
 801a7f6:	bf00      	nop
 801a7f8:	37b0      	adds	r7, #176	@ 0xb0
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	bd80      	pop	{r7, pc}
 801a7fe:	bf00      	nop
 801a800:	effffffe 	.word	0xeffffffe
 801a804:	58000c00 	.word	0x58000c00
 801a808:	0801a139 	.word	0x0801a139

0801a80c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a80c:	b580      	push	{r7, lr}
 801a80e:	b0ae      	sub	sp, #184	@ 0xb8
 801a810:	af00      	add	r7, sp, #0
 801a812:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a81a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	69db      	ldr	r3, [r3, #28]
 801a824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	689b      	ldr	r3, [r3, #8]
 801a838:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a842:	2b22      	cmp	r3, #34	@ 0x22
 801a844:	f040 8185 	bne.w	801ab52 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a84e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a852:	e128      	b.n	801aaa6 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a85a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a866:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a86a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a86e:	4013      	ands	r3, r2
 801a870:	b29a      	uxth	r2, r3
 801a872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a876:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a87c:	1c9a      	adds	r2, r3, #2
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a888:	b29b      	uxth	r3, r3
 801a88a:	3b01      	subs	r3, #1
 801a88c:	b29a      	uxth	r2, r3
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	69db      	ldr	r3, [r3, #28]
 801a89a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a89e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8a2:	f003 0307 	and.w	r3, r3, #7
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d053      	beq.n	801a952 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a8aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8ae:	f003 0301 	and.w	r3, r3, #1
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d011      	beq.n	801a8da <UART_RxISR_16BIT_FIFOEN+0xce>
 801a8b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a8ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d00b      	beq.n	801a8da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	2201      	movs	r2, #1
 801a8c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a8d0:	f043 0201 	orr.w	r2, r3, #1
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a8da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a8de:	f003 0302 	and.w	r3, r3, #2
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d011      	beq.n	801a90a <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a8e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a8ea:	f003 0301 	and.w	r3, r3, #1
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d00b      	beq.n	801a90a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	2202      	movs	r2, #2
 801a8f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a900:	f043 0204 	orr.w	r2, r3, #4
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a90a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a90e:	f003 0304 	and.w	r3, r3, #4
 801a912:	2b00      	cmp	r3, #0
 801a914:	d011      	beq.n	801a93a <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a91a:	f003 0301 	and.w	r3, r3, #1
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d00b      	beq.n	801a93a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	2204      	movs	r2, #4
 801a928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a930:	f043 0202 	orr.w	r2, r3, #2
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a940:	2b00      	cmp	r3, #0
 801a942:	d006      	beq.n	801a952 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a944:	6878      	ldr	r0, [r7, #4]
 801a946:	f7fe f853 	bl	80189f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	2200      	movs	r2, #0
 801a94e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a958:	b29b      	uxth	r3, r3
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	f040 80a3 	bne.w	801aaa6 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a968:	e853 3f00 	ldrex	r3, [r3]
 801a96c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a96e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a974:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	461a      	mov	r2, r3
 801a97e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a982:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a986:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a988:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a98a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a98e:	e841 2300 	strex	r3, r2, [r1]
 801a992:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a996:	2b00      	cmp	r3, #0
 801a998:	d1e2      	bne.n	801a960 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	3308      	adds	r3, #8
 801a9a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a9a4:	e853 3f00 	ldrex	r3, [r3]
 801a9a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a9aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a9ac:	4b6f      	ldr	r3, [pc, #444]	@ (801ab6c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a9ae:	4013      	ands	r3, r2
 801a9b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	3308      	adds	r3, #8
 801a9ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a9be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a9c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a9c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a9c6:	e841 2300 	strex	r3, r2, [r1]
 801a9ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a9cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d1e3      	bne.n	801a99a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	2220      	movs	r2, #32
 801a9d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	2200      	movs	r2, #0
 801a9de:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	2200      	movs	r2, #0
 801a9e4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	4a61      	ldr	r2, [pc, #388]	@ (801ab70 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a9ec:	4293      	cmp	r3, r2
 801a9ee:	d021      	beq.n	801aa34 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	685b      	ldr	r3, [r3, #4]
 801a9f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a9fa:	2b00      	cmp	r3, #0
 801a9fc:	d01a      	beq.n	801aa34 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aa06:	e853 3f00 	ldrex	r3, [r3]
 801aa0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801aa0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801aa12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	461a      	mov	r2, r3
 801aa1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801aa20:	65bb      	str	r3, [r7, #88]	@ 0x58
 801aa22:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801aa26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa28:	e841 2300 	strex	r3, r2, [r1]
 801aa2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801aa2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d1e4      	bne.n	801a9fe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa38:	2b01      	cmp	r3, #1
 801aa3a:	d130      	bne.n	801aa9e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	2200      	movs	r2, #0
 801aa40:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aa4a:	e853 3f00 	ldrex	r3, [r3]
 801aa4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801aa50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa52:	f023 0310 	bic.w	r3, r3, #16
 801aa56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	461a      	mov	r2, r3
 801aa60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801aa64:	647b      	str	r3, [r7, #68]	@ 0x44
 801aa66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801aa6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aa6c:	e841 2300 	strex	r3, r2, [r1]
 801aa70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801aa72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d1e4      	bne.n	801aa42 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	69db      	ldr	r3, [r3, #28]
 801aa7e:	f003 0310 	and.w	r3, r3, #16
 801aa82:	2b10      	cmp	r3, #16
 801aa84:	d103      	bne.n	801aa8e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	2210      	movs	r2, #16
 801aa8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801aa94:	4619      	mov	r1, r3
 801aa96:	6878      	ldr	r0, [r7, #4]
 801aa98:	f7fd ffb4 	bl	8018a04 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801aa9c:	e00e      	b.n	801aabc <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801aa9e:	6878      	ldr	r0, [r7, #4]
 801aaa0:	f7eb fdae 	bl	8006600 <HAL_UART_RxCpltCallback>
        break;
 801aaa4:	e00a      	b.n	801aabc <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801aaa6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d006      	beq.n	801aabc <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801aaae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801aab2:	f003 0320 	and.w	r3, r3, #32
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	f47f aecc 	bne.w	801a854 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801aac2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801aac6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d049      	beq.n	801ab62 <UART_RxISR_16BIT_FIFOEN+0x356>
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801aad4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801aad8:	429a      	cmp	r2, r3
 801aada:	d242      	bcs.n	801ab62 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	3308      	adds	r3, #8
 801aae2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aae6:	e853 3f00 	ldrex	r3, [r3]
 801aaea:	623b      	str	r3, [r7, #32]
   return(result);
 801aaec:	6a3b      	ldr	r3, [r7, #32]
 801aaee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801aaf2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	3308      	adds	r3, #8
 801aafc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801ab00:	633a      	str	r2, [r7, #48]	@ 0x30
 801ab02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ab06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ab08:	e841 2300 	strex	r3, r2, [r1]
 801ab0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801ab0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab10:	2b00      	cmp	r3, #0
 801ab12:	d1e3      	bne.n	801aadc <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	4a17      	ldr	r2, [pc, #92]	@ (801ab74 <UART_RxISR_16BIT_FIFOEN+0x368>)
 801ab18:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab20:	693b      	ldr	r3, [r7, #16]
 801ab22:	e853 3f00 	ldrex	r3, [r3]
 801ab26:	60fb      	str	r3, [r7, #12]
   return(result);
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	f043 0320 	orr.w	r3, r3, #32
 801ab2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	461a      	mov	r2, r3
 801ab38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801ab3c:	61fb      	str	r3, [r7, #28]
 801ab3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab40:	69b9      	ldr	r1, [r7, #24]
 801ab42:	69fa      	ldr	r2, [r7, #28]
 801ab44:	e841 2300 	strex	r3, r2, [r1]
 801ab48:	617b      	str	r3, [r7, #20]
   return(result);
 801ab4a:	697b      	ldr	r3, [r7, #20]
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d1e4      	bne.n	801ab1a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801ab50:	e007      	b.n	801ab62 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	699a      	ldr	r2, [r3, #24]
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	f042 0208 	orr.w	r2, r2, #8
 801ab60:	619a      	str	r2, [r3, #24]
}
 801ab62:	bf00      	nop
 801ab64:	37b8      	adds	r7, #184	@ 0xb8
 801ab66:	46bd      	mov	sp, r7
 801ab68:	bd80      	pop	{r7, pc}
 801ab6a:	bf00      	nop
 801ab6c:	effffffe 	.word	0xeffffffe
 801ab70:	58000c00 	.word	0x58000c00
 801ab74:	0801a2f1 	.word	0x0801a2f1

0801ab78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801ab78:	b480      	push	{r7}
 801ab7a:	b083      	sub	sp, #12
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801ab80:	bf00      	nop
 801ab82:	370c      	adds	r7, #12
 801ab84:	46bd      	mov	sp, r7
 801ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab8a:	4770      	bx	lr

0801ab8c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801ab8c:	b480      	push	{r7}
 801ab8e:	b083      	sub	sp, #12
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801ab94:	bf00      	nop
 801ab96:	370c      	adds	r7, #12
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab9e:	4770      	bx	lr

0801aba0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801aba0:	b480      	push	{r7}
 801aba2:	b083      	sub	sp, #12
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801aba8:	bf00      	nop
 801abaa:	370c      	adds	r7, #12
 801abac:	46bd      	mov	sp, r7
 801abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb2:	4770      	bx	lr

0801abb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801abb4:	b480      	push	{r7}
 801abb6:	b085      	sub	sp, #20
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801abc2:	2b01      	cmp	r3, #1
 801abc4:	d101      	bne.n	801abca <HAL_UARTEx_DisableFifoMode+0x16>
 801abc6:	2302      	movs	r3, #2
 801abc8:	e027      	b.n	801ac1a <HAL_UARTEx_DisableFifoMode+0x66>
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	2201      	movs	r2, #1
 801abce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	2224      	movs	r2, #36	@ 0x24
 801abd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	681a      	ldr	r2, [r3, #0]
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	f022 0201 	bic.w	r2, r2, #1
 801abf0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801abf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	2200      	movs	r2, #0
 801abfe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	68fa      	ldr	r2, [r7, #12]
 801ac06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	2220      	movs	r2, #32
 801ac0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	2200      	movs	r2, #0
 801ac14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac18:	2300      	movs	r3, #0
}
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	3714      	adds	r7, #20
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac24:	4770      	bx	lr

0801ac26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac26:	b580      	push	{r7, lr}
 801ac28:	b084      	sub	sp, #16
 801ac2a:	af00      	add	r7, sp, #0
 801ac2c:	6078      	str	r0, [r7, #4]
 801ac2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ac36:	2b01      	cmp	r3, #1
 801ac38:	d101      	bne.n	801ac3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ac3a:	2302      	movs	r3, #2
 801ac3c:	e02d      	b.n	801ac9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	2201      	movs	r2, #1
 801ac42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	2224      	movs	r2, #36	@ 0x24
 801ac4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	681a      	ldr	r2, [r3, #0]
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	f022 0201 	bic.w	r2, r2, #1
 801ac64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	689b      	ldr	r3, [r3, #8]
 801ac6c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	683a      	ldr	r2, [r7, #0]
 801ac76:	430a      	orrs	r2, r1
 801ac78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac7a:	6878      	ldr	r0, [r7, #4]
 801ac7c:	f000 f850 	bl	801ad20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	68fa      	ldr	r2, [r7, #12]
 801ac86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	2220      	movs	r2, #32
 801ac8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	2200      	movs	r2, #0
 801ac94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac98:	2300      	movs	r3, #0
}
 801ac9a:	4618      	mov	r0, r3
 801ac9c:	3710      	adds	r7, #16
 801ac9e:	46bd      	mov	sp, r7
 801aca0:	bd80      	pop	{r7, pc}

0801aca2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801aca2:	b580      	push	{r7, lr}
 801aca4:	b084      	sub	sp, #16
 801aca6:	af00      	add	r7, sp, #0
 801aca8:	6078      	str	r0, [r7, #4]
 801acaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801acb2:	2b01      	cmp	r3, #1
 801acb4:	d101      	bne.n	801acba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801acb6:	2302      	movs	r3, #2
 801acb8:	e02d      	b.n	801ad16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	2201      	movs	r2, #1
 801acbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	2224      	movs	r2, #36	@ 0x24
 801acc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	681b      	ldr	r3, [r3, #0]
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	681a      	ldr	r2, [r3, #0]
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	f022 0201 	bic.w	r2, r2, #1
 801ace0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	689b      	ldr	r3, [r3, #8]
 801ace8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	683a      	ldr	r2, [r7, #0]
 801acf2:	430a      	orrs	r2, r1
 801acf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801acf6:	6878      	ldr	r0, [r7, #4]
 801acf8:	f000 f812 	bl	801ad20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	68fa      	ldr	r2, [r7, #12]
 801ad02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	2220      	movs	r2, #32
 801ad08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	2200      	movs	r2, #0
 801ad10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ad14:	2300      	movs	r3, #0
}
 801ad16:	4618      	mov	r0, r3
 801ad18:	3710      	adds	r7, #16
 801ad1a:	46bd      	mov	sp, r7
 801ad1c:	bd80      	pop	{r7, pc}
	...

0801ad20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ad20:	b480      	push	{r7}
 801ad22:	b085      	sub	sp, #20
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d108      	bne.n	801ad42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	2201      	movs	r2, #1
 801ad34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	2201      	movs	r2, #1
 801ad3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ad40:	e031      	b.n	801ada6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ad42:	2310      	movs	r3, #16
 801ad44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ad46:	2310      	movs	r3, #16
 801ad48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	689b      	ldr	r3, [r3, #8]
 801ad50:	0e5b      	lsrs	r3, r3, #25
 801ad52:	b2db      	uxtb	r3, r3
 801ad54:	f003 0307 	and.w	r3, r3, #7
 801ad58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	689b      	ldr	r3, [r3, #8]
 801ad60:	0f5b      	lsrs	r3, r3, #29
 801ad62:	b2db      	uxtb	r3, r3
 801ad64:	f003 0307 	and.w	r3, r3, #7
 801ad68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad6a:	7bbb      	ldrb	r3, [r7, #14]
 801ad6c:	7b3a      	ldrb	r2, [r7, #12]
 801ad6e:	4911      	ldr	r1, [pc, #68]	@ (801adb4 <UARTEx_SetNbDataToProcess+0x94>)
 801ad70:	5c8a      	ldrb	r2, [r1, r2]
 801ad72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ad76:	7b3a      	ldrb	r2, [r7, #12]
 801ad78:	490f      	ldr	r1, [pc, #60]	@ (801adb8 <UARTEx_SetNbDataToProcess+0x98>)
 801ad7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad7c:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad80:	b29a      	uxth	r2, r3
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad88:	7bfb      	ldrb	r3, [r7, #15]
 801ad8a:	7b7a      	ldrb	r2, [r7, #13]
 801ad8c:	4909      	ldr	r1, [pc, #36]	@ (801adb4 <UARTEx_SetNbDataToProcess+0x94>)
 801ad8e:	5c8a      	ldrb	r2, [r1, r2]
 801ad90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801ad94:	7b7a      	ldrb	r2, [r7, #13]
 801ad96:	4908      	ldr	r1, [pc, #32]	@ (801adb8 <UARTEx_SetNbDataToProcess+0x98>)
 801ad98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad9a:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad9e:	b29a      	uxth	r2, r3
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801ada6:	bf00      	nop
 801ada8:	3714      	adds	r7, #20
 801adaa:	46bd      	mov	sp, r7
 801adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb0:	4770      	bx	lr
 801adb2:	bf00      	nop
 801adb4:	0801ec1c 	.word	0x0801ec1c
 801adb8:	0801ec24 	.word	0x0801ec24

0801adbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801adbc:	b580      	push	{r7, lr}
 801adbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801adc0:	4904      	ldr	r1, [pc, #16]	@ (801add4 <MX_FATFS_Init+0x18>)
 801adc2:	4805      	ldr	r0, [pc, #20]	@ (801add8 <MX_FATFS_Init+0x1c>)
 801adc4:	f003 f8d8 	bl	801df78 <FATFS_LinkDriver>
 801adc8:	4603      	mov	r3, r0
 801adca:	461a      	mov	r2, r3
 801adcc:	4b03      	ldr	r3, [pc, #12]	@ (801addc <MX_FATFS_Init+0x20>)
 801adce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801add0:	bf00      	nop
 801add2:	bd80      	pop	{r7, pc}
 801add4:	2400054c 	.word	0x2400054c
 801add8:	24000014 	.word	0x24000014
 801addc:	24000548 	.word	0x24000548

0801ade0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801ade0:	b480      	push	{r7}
 801ade2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801ade4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801ade6:	4618      	mov	r0, r3
 801ade8:	46bd      	mov	sp, r7
 801adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adee:	4770      	bx	lr

0801adf0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b082      	sub	sp, #8
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	4603      	mov	r3, r0
 801adf8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801adfa:	79fb      	ldrb	r3, [r7, #7]
 801adfc:	4618      	mov	r0, r3
 801adfe:	f7e9 fbd1 	bl	80045a4 <SD_disk_initialize>
 801ae02:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801ae04:	4618      	mov	r0, r3
 801ae06:	3708      	adds	r7, #8
 801ae08:	46bd      	mov	sp, r7
 801ae0a:	bd80      	pop	{r7, pc}

0801ae0c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801ae0c:	b580      	push	{r7, lr}
 801ae0e:	b082      	sub	sp, #8
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	4603      	mov	r3, r0
 801ae14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801ae16:	79fb      	ldrb	r3, [r7, #7]
 801ae18:	4618      	mov	r0, r3
 801ae1a:	f7e9 fcaf 	bl	800477c <SD_disk_status>
 801ae1e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801ae20:	4618      	mov	r0, r3
 801ae22:	3708      	adds	r7, #8
 801ae24:	46bd      	mov	sp, r7
 801ae26:	bd80      	pop	{r7, pc}

0801ae28 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b084      	sub	sp, #16
 801ae2c:	af00      	add	r7, sp, #0
 801ae2e:	60b9      	str	r1, [r7, #8]
 801ae30:	607a      	str	r2, [r7, #4]
 801ae32:	603b      	str	r3, [r7, #0]
 801ae34:	4603      	mov	r3, r0
 801ae36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801ae38:	7bf8      	ldrb	r0, [r7, #15]
 801ae3a:	683b      	ldr	r3, [r7, #0]
 801ae3c:	687a      	ldr	r2, [r7, #4]
 801ae3e:	68b9      	ldr	r1, [r7, #8]
 801ae40:	f7e9 fcb2 	bl	80047a8 <SD_disk_read>
 801ae44:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801ae46:	4618      	mov	r0, r3
 801ae48:	3710      	adds	r7, #16
 801ae4a:	46bd      	mov	sp, r7
 801ae4c:	bd80      	pop	{r7, pc}

0801ae4e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801ae4e:	b580      	push	{r7, lr}
 801ae50:	b084      	sub	sp, #16
 801ae52:	af00      	add	r7, sp, #0
 801ae54:	60b9      	str	r1, [r7, #8]
 801ae56:	607a      	str	r2, [r7, #4]
 801ae58:	603b      	str	r3, [r7, #0]
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801ae5e:	7bf8      	ldrb	r0, [r7, #15]
 801ae60:	683b      	ldr	r3, [r7, #0]
 801ae62:	687a      	ldr	r2, [r7, #4]
 801ae64:	68b9      	ldr	r1, [r7, #8]
 801ae66:	f7e9 fd09 	bl	800487c <SD_disk_write>
 801ae6a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	3710      	adds	r7, #16
 801ae70:	46bd      	mov	sp, r7
 801ae72:	bd80      	pop	{r7, pc}

0801ae74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801ae74:	b580      	push	{r7, lr}
 801ae76:	b082      	sub	sp, #8
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	603a      	str	r2, [r7, #0]
 801ae7e:	71fb      	strb	r3, [r7, #7]
 801ae80:	460b      	mov	r3, r1
 801ae82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801ae84:	79b9      	ldrb	r1, [r7, #6]
 801ae86:	79fb      	ldrb	r3, [r7, #7]
 801ae88:	683a      	ldr	r2, [r7, #0]
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	f7e9 fd7a 	bl	8004984 <SD_disk_ioctl>
 801ae90:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801ae92:	4618      	mov	r0, r3
 801ae94:	3708      	adds	r7, #8
 801ae96:	46bd      	mov	sp, r7
 801ae98:	bd80      	pop	{r7, pc}
	...

0801ae9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801ae9c:	b580      	push	{r7, lr}
 801ae9e:	b084      	sub	sp, #16
 801aea0:	af00      	add	r7, sp, #0
 801aea2:	4603      	mov	r3, r0
 801aea4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801aea6:	79fb      	ldrb	r3, [r7, #7]
 801aea8:	4a08      	ldr	r2, [pc, #32]	@ (801aecc <disk_status+0x30>)
 801aeaa:	009b      	lsls	r3, r3, #2
 801aeac:	4413      	add	r3, r2
 801aeae:	685b      	ldr	r3, [r3, #4]
 801aeb0:	685b      	ldr	r3, [r3, #4]
 801aeb2:	79fa      	ldrb	r2, [r7, #7]
 801aeb4:	4905      	ldr	r1, [pc, #20]	@ (801aecc <disk_status+0x30>)
 801aeb6:	440a      	add	r2, r1
 801aeb8:	7a12      	ldrb	r2, [r2, #8]
 801aeba:	4610      	mov	r0, r2
 801aebc:	4798      	blx	r3
 801aebe:	4603      	mov	r3, r0
 801aec0:	73fb      	strb	r3, [r7, #15]
  return stat;
 801aec2:	7bfb      	ldrb	r3, [r7, #15]
}
 801aec4:	4618      	mov	r0, r3
 801aec6:	3710      	adds	r7, #16
 801aec8:	46bd      	mov	sp, r7
 801aeca:	bd80      	pop	{r7, pc}
 801aecc:	24000768 	.word	0x24000768

0801aed0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801aed0:	b580      	push	{r7, lr}
 801aed2:	b084      	sub	sp, #16
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	4603      	mov	r3, r0
 801aed8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801aeda:	2300      	movs	r3, #0
 801aedc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801aede:	79fb      	ldrb	r3, [r7, #7]
 801aee0:	4a0e      	ldr	r2, [pc, #56]	@ (801af1c <disk_initialize+0x4c>)
 801aee2:	5cd3      	ldrb	r3, [r2, r3]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d114      	bne.n	801af12 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801aee8:	79fb      	ldrb	r3, [r7, #7]
 801aeea:	4a0c      	ldr	r2, [pc, #48]	@ (801af1c <disk_initialize+0x4c>)
 801aeec:	009b      	lsls	r3, r3, #2
 801aeee:	4413      	add	r3, r2
 801aef0:	685b      	ldr	r3, [r3, #4]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	79fa      	ldrb	r2, [r7, #7]
 801aef6:	4909      	ldr	r1, [pc, #36]	@ (801af1c <disk_initialize+0x4c>)
 801aef8:	440a      	add	r2, r1
 801aefa:	7a12      	ldrb	r2, [r2, #8]
 801aefc:	4610      	mov	r0, r2
 801aefe:	4798      	blx	r3
 801af00:	4603      	mov	r3, r0
 801af02:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801af04:	7bfb      	ldrb	r3, [r7, #15]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d103      	bne.n	801af12 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801af0a:	79fb      	ldrb	r3, [r7, #7]
 801af0c:	4a03      	ldr	r2, [pc, #12]	@ (801af1c <disk_initialize+0x4c>)
 801af0e:	2101      	movs	r1, #1
 801af10:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801af12:	7bfb      	ldrb	r3, [r7, #15]
}
 801af14:	4618      	mov	r0, r3
 801af16:	3710      	adds	r7, #16
 801af18:	46bd      	mov	sp, r7
 801af1a:	bd80      	pop	{r7, pc}
 801af1c:	24000768 	.word	0x24000768

0801af20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801af20:	b590      	push	{r4, r7, lr}
 801af22:	b087      	sub	sp, #28
 801af24:	af00      	add	r7, sp, #0
 801af26:	60b9      	str	r1, [r7, #8]
 801af28:	607a      	str	r2, [r7, #4]
 801af2a:	603b      	str	r3, [r7, #0]
 801af2c:	4603      	mov	r3, r0
 801af2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801af30:	7bfb      	ldrb	r3, [r7, #15]
 801af32:	4a0a      	ldr	r2, [pc, #40]	@ (801af5c <disk_read+0x3c>)
 801af34:	009b      	lsls	r3, r3, #2
 801af36:	4413      	add	r3, r2
 801af38:	685b      	ldr	r3, [r3, #4]
 801af3a:	689c      	ldr	r4, [r3, #8]
 801af3c:	7bfb      	ldrb	r3, [r7, #15]
 801af3e:	4a07      	ldr	r2, [pc, #28]	@ (801af5c <disk_read+0x3c>)
 801af40:	4413      	add	r3, r2
 801af42:	7a18      	ldrb	r0, [r3, #8]
 801af44:	683b      	ldr	r3, [r7, #0]
 801af46:	687a      	ldr	r2, [r7, #4]
 801af48:	68b9      	ldr	r1, [r7, #8]
 801af4a:	47a0      	blx	r4
 801af4c:	4603      	mov	r3, r0
 801af4e:	75fb      	strb	r3, [r7, #23]
  return res;
 801af50:	7dfb      	ldrb	r3, [r7, #23]
}
 801af52:	4618      	mov	r0, r3
 801af54:	371c      	adds	r7, #28
 801af56:	46bd      	mov	sp, r7
 801af58:	bd90      	pop	{r4, r7, pc}
 801af5a:	bf00      	nop
 801af5c:	24000768 	.word	0x24000768

0801af60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801af60:	b590      	push	{r4, r7, lr}
 801af62:	b087      	sub	sp, #28
 801af64:	af00      	add	r7, sp, #0
 801af66:	60b9      	str	r1, [r7, #8]
 801af68:	607a      	str	r2, [r7, #4]
 801af6a:	603b      	str	r3, [r7, #0]
 801af6c:	4603      	mov	r3, r0
 801af6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801af70:	7bfb      	ldrb	r3, [r7, #15]
 801af72:	4a0a      	ldr	r2, [pc, #40]	@ (801af9c <disk_write+0x3c>)
 801af74:	009b      	lsls	r3, r3, #2
 801af76:	4413      	add	r3, r2
 801af78:	685b      	ldr	r3, [r3, #4]
 801af7a:	68dc      	ldr	r4, [r3, #12]
 801af7c:	7bfb      	ldrb	r3, [r7, #15]
 801af7e:	4a07      	ldr	r2, [pc, #28]	@ (801af9c <disk_write+0x3c>)
 801af80:	4413      	add	r3, r2
 801af82:	7a18      	ldrb	r0, [r3, #8]
 801af84:	683b      	ldr	r3, [r7, #0]
 801af86:	687a      	ldr	r2, [r7, #4]
 801af88:	68b9      	ldr	r1, [r7, #8]
 801af8a:	47a0      	blx	r4
 801af8c:	4603      	mov	r3, r0
 801af8e:	75fb      	strb	r3, [r7, #23]
  return res;
 801af90:	7dfb      	ldrb	r3, [r7, #23]
}
 801af92:	4618      	mov	r0, r3
 801af94:	371c      	adds	r7, #28
 801af96:	46bd      	mov	sp, r7
 801af98:	bd90      	pop	{r4, r7, pc}
 801af9a:	bf00      	nop
 801af9c:	24000768 	.word	0x24000768

0801afa0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b084      	sub	sp, #16
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	4603      	mov	r3, r0
 801afa8:	603a      	str	r2, [r7, #0]
 801afaa:	71fb      	strb	r3, [r7, #7]
 801afac:	460b      	mov	r3, r1
 801afae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801afb0:	79fb      	ldrb	r3, [r7, #7]
 801afb2:	4a09      	ldr	r2, [pc, #36]	@ (801afd8 <disk_ioctl+0x38>)
 801afb4:	009b      	lsls	r3, r3, #2
 801afb6:	4413      	add	r3, r2
 801afb8:	685b      	ldr	r3, [r3, #4]
 801afba:	691b      	ldr	r3, [r3, #16]
 801afbc:	79fa      	ldrb	r2, [r7, #7]
 801afbe:	4906      	ldr	r1, [pc, #24]	@ (801afd8 <disk_ioctl+0x38>)
 801afc0:	440a      	add	r2, r1
 801afc2:	7a10      	ldrb	r0, [r2, #8]
 801afc4:	79b9      	ldrb	r1, [r7, #6]
 801afc6:	683a      	ldr	r2, [r7, #0]
 801afc8:	4798      	blx	r3
 801afca:	4603      	mov	r3, r0
 801afcc:	73fb      	strb	r3, [r7, #15]
  return res;
 801afce:	7bfb      	ldrb	r3, [r7, #15]
}
 801afd0:	4618      	mov	r0, r3
 801afd2:	3710      	adds	r7, #16
 801afd4:	46bd      	mov	sp, r7
 801afd6:	bd80      	pop	{r7, pc}
 801afd8:	24000768 	.word	0x24000768

0801afdc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801afdc:	b480      	push	{r7}
 801afde:	b085      	sub	sp, #20
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	3301      	adds	r3, #1
 801afe8:	781b      	ldrb	r3, [r3, #0]
 801afea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801afec:	89fb      	ldrh	r3, [r7, #14]
 801afee:	021b      	lsls	r3, r3, #8
 801aff0:	b21a      	sxth	r2, r3
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	781b      	ldrb	r3, [r3, #0]
 801aff6:	b21b      	sxth	r3, r3
 801aff8:	4313      	orrs	r3, r2
 801affa:	b21b      	sxth	r3, r3
 801affc:	81fb      	strh	r3, [r7, #14]
	return rv;
 801affe:	89fb      	ldrh	r3, [r7, #14]
}
 801b000:	4618      	mov	r0, r3
 801b002:	3714      	adds	r7, #20
 801b004:	46bd      	mov	sp, r7
 801b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b00a:	4770      	bx	lr

0801b00c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801b00c:	b480      	push	{r7}
 801b00e:	b085      	sub	sp, #20
 801b010:	af00      	add	r7, sp, #0
 801b012:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	3303      	adds	r3, #3
 801b018:	781b      	ldrb	r3, [r3, #0]
 801b01a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	021b      	lsls	r3, r3, #8
 801b020:	687a      	ldr	r2, [r7, #4]
 801b022:	3202      	adds	r2, #2
 801b024:	7812      	ldrb	r2, [r2, #0]
 801b026:	4313      	orrs	r3, r2
 801b028:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	021b      	lsls	r3, r3, #8
 801b02e:	687a      	ldr	r2, [r7, #4]
 801b030:	3201      	adds	r2, #1
 801b032:	7812      	ldrb	r2, [r2, #0]
 801b034:	4313      	orrs	r3, r2
 801b036:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	021b      	lsls	r3, r3, #8
 801b03c:	687a      	ldr	r2, [r7, #4]
 801b03e:	7812      	ldrb	r2, [r2, #0]
 801b040:	4313      	orrs	r3, r2
 801b042:	60fb      	str	r3, [r7, #12]
	return rv;
 801b044:	68fb      	ldr	r3, [r7, #12]
}
 801b046:	4618      	mov	r0, r3
 801b048:	3714      	adds	r7, #20
 801b04a:	46bd      	mov	sp, r7
 801b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b050:	4770      	bx	lr

0801b052 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801b052:	b480      	push	{r7}
 801b054:	b083      	sub	sp, #12
 801b056:	af00      	add	r7, sp, #0
 801b058:	6078      	str	r0, [r7, #4]
 801b05a:	460b      	mov	r3, r1
 801b05c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	1c5a      	adds	r2, r3, #1
 801b062:	607a      	str	r2, [r7, #4]
 801b064:	887a      	ldrh	r2, [r7, #2]
 801b066:	b2d2      	uxtb	r2, r2
 801b068:	701a      	strb	r2, [r3, #0]
 801b06a:	887b      	ldrh	r3, [r7, #2]
 801b06c:	0a1b      	lsrs	r3, r3, #8
 801b06e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	1c5a      	adds	r2, r3, #1
 801b074:	607a      	str	r2, [r7, #4]
 801b076:	887a      	ldrh	r2, [r7, #2]
 801b078:	b2d2      	uxtb	r2, r2
 801b07a:	701a      	strb	r2, [r3, #0]
}
 801b07c:	bf00      	nop
 801b07e:	370c      	adds	r7, #12
 801b080:	46bd      	mov	sp, r7
 801b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b086:	4770      	bx	lr

0801b088 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801b088:	b480      	push	{r7}
 801b08a:	b083      	sub	sp, #12
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	6078      	str	r0, [r7, #4]
 801b090:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	1c5a      	adds	r2, r3, #1
 801b096:	607a      	str	r2, [r7, #4]
 801b098:	683a      	ldr	r2, [r7, #0]
 801b09a:	b2d2      	uxtb	r2, r2
 801b09c:	701a      	strb	r2, [r3, #0]
 801b09e:	683b      	ldr	r3, [r7, #0]
 801b0a0:	0a1b      	lsrs	r3, r3, #8
 801b0a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	1c5a      	adds	r2, r3, #1
 801b0a8:	607a      	str	r2, [r7, #4]
 801b0aa:	683a      	ldr	r2, [r7, #0]
 801b0ac:	b2d2      	uxtb	r2, r2
 801b0ae:	701a      	strb	r2, [r3, #0]
 801b0b0:	683b      	ldr	r3, [r7, #0]
 801b0b2:	0a1b      	lsrs	r3, r3, #8
 801b0b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	1c5a      	adds	r2, r3, #1
 801b0ba:	607a      	str	r2, [r7, #4]
 801b0bc:	683a      	ldr	r2, [r7, #0]
 801b0be:	b2d2      	uxtb	r2, r2
 801b0c0:	701a      	strb	r2, [r3, #0]
 801b0c2:	683b      	ldr	r3, [r7, #0]
 801b0c4:	0a1b      	lsrs	r3, r3, #8
 801b0c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	1c5a      	adds	r2, r3, #1
 801b0cc:	607a      	str	r2, [r7, #4]
 801b0ce:	683a      	ldr	r2, [r7, #0]
 801b0d0:	b2d2      	uxtb	r2, r2
 801b0d2:	701a      	strb	r2, [r3, #0]
}
 801b0d4:	bf00      	nop
 801b0d6:	370c      	adds	r7, #12
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0de:	4770      	bx	lr

0801b0e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b0e0:	b480      	push	{r7}
 801b0e2:	b087      	sub	sp, #28
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	60f8      	str	r0, [r7, #12]
 801b0e8:	60b9      	str	r1, [r7, #8]
 801b0ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b0ec:	68fb      	ldr	r3, [r7, #12]
 801b0ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b0f0:	68bb      	ldr	r3, [r7, #8]
 801b0f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d00d      	beq.n	801b116 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b0fa:	693a      	ldr	r2, [r7, #16]
 801b0fc:	1c53      	adds	r3, r2, #1
 801b0fe:	613b      	str	r3, [r7, #16]
 801b100:	697b      	ldr	r3, [r7, #20]
 801b102:	1c59      	adds	r1, r3, #1
 801b104:	6179      	str	r1, [r7, #20]
 801b106:	7812      	ldrb	r2, [r2, #0]
 801b108:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	3b01      	subs	r3, #1
 801b10e:	607b      	str	r3, [r7, #4]
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	2b00      	cmp	r3, #0
 801b114:	d1f1      	bne.n	801b0fa <mem_cpy+0x1a>
	}
}
 801b116:	bf00      	nop
 801b118:	371c      	adds	r7, #28
 801b11a:	46bd      	mov	sp, r7
 801b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b120:	4770      	bx	lr

0801b122 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b122:	b480      	push	{r7}
 801b124:	b087      	sub	sp, #28
 801b126:	af00      	add	r7, sp, #0
 801b128:	60f8      	str	r0, [r7, #12]
 801b12a:	60b9      	str	r1, [r7, #8]
 801b12c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b132:	697b      	ldr	r3, [r7, #20]
 801b134:	1c5a      	adds	r2, r3, #1
 801b136:	617a      	str	r2, [r7, #20]
 801b138:	68ba      	ldr	r2, [r7, #8]
 801b13a:	b2d2      	uxtb	r2, r2
 801b13c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	3b01      	subs	r3, #1
 801b142:	607b      	str	r3, [r7, #4]
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d1f3      	bne.n	801b132 <mem_set+0x10>
}
 801b14a:	bf00      	nop
 801b14c:	bf00      	nop
 801b14e:	371c      	adds	r7, #28
 801b150:	46bd      	mov	sp, r7
 801b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b156:	4770      	bx	lr

0801b158 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b158:	b480      	push	{r7}
 801b15a:	b089      	sub	sp, #36	@ 0x24
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	60f8      	str	r0, [r7, #12]
 801b160:	60b9      	str	r1, [r7, #8]
 801b162:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	61fb      	str	r3, [r7, #28]
 801b168:	68bb      	ldr	r3, [r7, #8]
 801b16a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b16c:	2300      	movs	r3, #0
 801b16e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b170:	69fb      	ldr	r3, [r7, #28]
 801b172:	1c5a      	adds	r2, r3, #1
 801b174:	61fa      	str	r2, [r7, #28]
 801b176:	781b      	ldrb	r3, [r3, #0]
 801b178:	4619      	mov	r1, r3
 801b17a:	69bb      	ldr	r3, [r7, #24]
 801b17c:	1c5a      	adds	r2, r3, #1
 801b17e:	61ba      	str	r2, [r7, #24]
 801b180:	781b      	ldrb	r3, [r3, #0]
 801b182:	1acb      	subs	r3, r1, r3
 801b184:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	3b01      	subs	r3, #1
 801b18a:	607b      	str	r3, [r7, #4]
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d002      	beq.n	801b198 <mem_cmp+0x40>
 801b192:	697b      	ldr	r3, [r7, #20]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d0eb      	beq.n	801b170 <mem_cmp+0x18>

	return r;
 801b198:	697b      	ldr	r3, [r7, #20]
}
 801b19a:	4618      	mov	r0, r3
 801b19c:	3724      	adds	r7, #36	@ 0x24
 801b19e:	46bd      	mov	sp, r7
 801b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1a4:	4770      	bx	lr

0801b1a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b1a6:	b480      	push	{r7}
 801b1a8:	b083      	sub	sp, #12
 801b1aa:	af00      	add	r7, sp, #0
 801b1ac:	6078      	str	r0, [r7, #4]
 801b1ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b1b0:	e002      	b.n	801b1b8 <chk_chr+0x12>
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	3301      	adds	r3, #1
 801b1b6:	607b      	str	r3, [r7, #4]
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	781b      	ldrb	r3, [r3, #0]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d005      	beq.n	801b1cc <chk_chr+0x26>
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	781b      	ldrb	r3, [r3, #0]
 801b1c4:	461a      	mov	r2, r3
 801b1c6:	683b      	ldr	r3, [r7, #0]
 801b1c8:	4293      	cmp	r3, r2
 801b1ca:	d1f2      	bne.n	801b1b2 <chk_chr+0xc>
	return *str;
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	781b      	ldrb	r3, [r3, #0]
}
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	370c      	adds	r7, #12
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1da:	4770      	bx	lr

0801b1dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b1dc:	b480      	push	{r7}
 801b1de:	b085      	sub	sp, #20
 801b1e0:	af00      	add	r7, sp, #0
 801b1e2:	6078      	str	r0, [r7, #4]
 801b1e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b1e6:	2300      	movs	r3, #0
 801b1e8:	60bb      	str	r3, [r7, #8]
 801b1ea:	68bb      	ldr	r3, [r7, #8]
 801b1ec:	60fb      	str	r3, [r7, #12]
 801b1ee:	e029      	b.n	801b244 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b1f0:	4a27      	ldr	r2, [pc, #156]	@ (801b290 <chk_lock+0xb4>)
 801b1f2:	68fb      	ldr	r3, [r7, #12]
 801b1f4:	011b      	lsls	r3, r3, #4
 801b1f6:	4413      	add	r3, r2
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d01d      	beq.n	801b23a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b1fe:	4a24      	ldr	r2, [pc, #144]	@ (801b290 <chk_lock+0xb4>)
 801b200:	68fb      	ldr	r3, [r7, #12]
 801b202:	011b      	lsls	r3, r3, #4
 801b204:	4413      	add	r3, r2
 801b206:	681a      	ldr	r2, [r3, #0]
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	429a      	cmp	r2, r3
 801b20e:	d116      	bne.n	801b23e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b210:	4a1f      	ldr	r2, [pc, #124]	@ (801b290 <chk_lock+0xb4>)
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	011b      	lsls	r3, r3, #4
 801b216:	4413      	add	r3, r2
 801b218:	3304      	adds	r3, #4
 801b21a:	681a      	ldr	r2, [r3, #0]
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b220:	429a      	cmp	r2, r3
 801b222:	d10c      	bne.n	801b23e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b224:	4a1a      	ldr	r2, [pc, #104]	@ (801b290 <chk_lock+0xb4>)
 801b226:	68fb      	ldr	r3, [r7, #12]
 801b228:	011b      	lsls	r3, r3, #4
 801b22a:	4413      	add	r3, r2
 801b22c:	3308      	adds	r3, #8
 801b22e:	681a      	ldr	r2, [r3, #0]
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b234:	429a      	cmp	r2, r3
 801b236:	d102      	bne.n	801b23e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b238:	e007      	b.n	801b24a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b23a:	2301      	movs	r3, #1
 801b23c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	3301      	adds	r3, #1
 801b242:	60fb      	str	r3, [r7, #12]
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d0d2      	beq.n	801b1f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	2b01      	cmp	r3, #1
 801b24e:	d109      	bne.n	801b264 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b250:	68bb      	ldr	r3, [r7, #8]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d102      	bne.n	801b25c <chk_lock+0x80>
 801b256:	683b      	ldr	r3, [r7, #0]
 801b258:	2b02      	cmp	r3, #2
 801b25a:	d101      	bne.n	801b260 <chk_lock+0x84>
 801b25c:	2300      	movs	r3, #0
 801b25e:	e010      	b.n	801b282 <chk_lock+0xa6>
 801b260:	2312      	movs	r3, #18
 801b262:	e00e      	b.n	801b282 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b264:	683b      	ldr	r3, [r7, #0]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d108      	bne.n	801b27c <chk_lock+0xa0>
 801b26a:	4a09      	ldr	r2, [pc, #36]	@ (801b290 <chk_lock+0xb4>)
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	011b      	lsls	r3, r3, #4
 801b270:	4413      	add	r3, r2
 801b272:	330c      	adds	r3, #12
 801b274:	881b      	ldrh	r3, [r3, #0]
 801b276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b27a:	d101      	bne.n	801b280 <chk_lock+0xa4>
 801b27c:	2310      	movs	r3, #16
 801b27e:	e000      	b.n	801b282 <chk_lock+0xa6>
 801b280:	2300      	movs	r3, #0
}
 801b282:	4618      	mov	r0, r3
 801b284:	3714      	adds	r7, #20
 801b286:	46bd      	mov	sp, r7
 801b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b28c:	4770      	bx	lr
 801b28e:	bf00      	nop
 801b290:	24000558 	.word	0x24000558

0801b294 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b294:	b480      	push	{r7}
 801b296:	b083      	sub	sp, #12
 801b298:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b29a:	2300      	movs	r3, #0
 801b29c:	607b      	str	r3, [r7, #4]
 801b29e:	e002      	b.n	801b2a6 <enq_lock+0x12>
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	3301      	adds	r3, #1
 801b2a4:	607b      	str	r3, [r7, #4]
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d106      	bne.n	801b2ba <enq_lock+0x26>
 801b2ac:	4a09      	ldr	r2, [pc, #36]	@ (801b2d4 <enq_lock+0x40>)
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	011b      	lsls	r3, r3, #4
 801b2b2:	4413      	add	r3, r2
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d1f2      	bne.n	801b2a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	2b01      	cmp	r3, #1
 801b2be:	bf14      	ite	ne
 801b2c0:	2301      	movne	r3, #1
 801b2c2:	2300      	moveq	r3, #0
 801b2c4:	b2db      	uxtb	r3, r3
}
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	370c      	adds	r7, #12
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d0:	4770      	bx	lr
 801b2d2:	bf00      	nop
 801b2d4:	24000558 	.word	0x24000558

0801b2d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b2d8:	b480      	push	{r7}
 801b2da:	b085      	sub	sp, #20
 801b2dc:	af00      	add	r7, sp, #0
 801b2de:	6078      	str	r0, [r7, #4]
 801b2e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b2e2:	2300      	movs	r3, #0
 801b2e4:	60fb      	str	r3, [r7, #12]
 801b2e6:	e01f      	b.n	801b328 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b2e8:	4a41      	ldr	r2, [pc, #260]	@ (801b3f0 <inc_lock+0x118>)
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	011b      	lsls	r3, r3, #4
 801b2ee:	4413      	add	r3, r2
 801b2f0:	681a      	ldr	r2, [r3, #0]
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	429a      	cmp	r2, r3
 801b2f8:	d113      	bne.n	801b322 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b2fa:	4a3d      	ldr	r2, [pc, #244]	@ (801b3f0 <inc_lock+0x118>)
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	011b      	lsls	r3, r3, #4
 801b300:	4413      	add	r3, r2
 801b302:	3304      	adds	r3, #4
 801b304:	681a      	ldr	r2, [r3, #0]
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b30a:	429a      	cmp	r2, r3
 801b30c:	d109      	bne.n	801b322 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b30e:	4a38      	ldr	r2, [pc, #224]	@ (801b3f0 <inc_lock+0x118>)
 801b310:	68fb      	ldr	r3, [r7, #12]
 801b312:	011b      	lsls	r3, r3, #4
 801b314:	4413      	add	r3, r2
 801b316:	3308      	adds	r3, #8
 801b318:	681a      	ldr	r2, [r3, #0]
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b31e:	429a      	cmp	r2, r3
 801b320:	d006      	beq.n	801b330 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	3301      	adds	r3, #1
 801b326:	60fb      	str	r3, [r7, #12]
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d0dc      	beq.n	801b2e8 <inc_lock+0x10>
 801b32e:	e000      	b.n	801b332 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b330:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	2b01      	cmp	r3, #1
 801b336:	d132      	bne.n	801b39e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b338:	2300      	movs	r3, #0
 801b33a:	60fb      	str	r3, [r7, #12]
 801b33c:	e002      	b.n	801b344 <inc_lock+0x6c>
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	3301      	adds	r3, #1
 801b342:	60fb      	str	r3, [r7, #12]
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d106      	bne.n	801b358 <inc_lock+0x80>
 801b34a:	4a29      	ldr	r2, [pc, #164]	@ (801b3f0 <inc_lock+0x118>)
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	011b      	lsls	r3, r3, #4
 801b350:	4413      	add	r3, r2
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d1f2      	bne.n	801b33e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	2b01      	cmp	r3, #1
 801b35c:	d101      	bne.n	801b362 <inc_lock+0x8a>
 801b35e:	2300      	movs	r3, #0
 801b360:	e040      	b.n	801b3e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	681a      	ldr	r2, [r3, #0]
 801b366:	4922      	ldr	r1, [pc, #136]	@ (801b3f0 <inc_lock+0x118>)
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	011b      	lsls	r3, r3, #4
 801b36c:	440b      	add	r3, r1
 801b36e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	689a      	ldr	r2, [r3, #8]
 801b374:	491e      	ldr	r1, [pc, #120]	@ (801b3f0 <inc_lock+0x118>)
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	011b      	lsls	r3, r3, #4
 801b37a:	440b      	add	r3, r1
 801b37c:	3304      	adds	r3, #4
 801b37e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	695a      	ldr	r2, [r3, #20]
 801b384:	491a      	ldr	r1, [pc, #104]	@ (801b3f0 <inc_lock+0x118>)
 801b386:	68fb      	ldr	r3, [r7, #12]
 801b388:	011b      	lsls	r3, r3, #4
 801b38a:	440b      	add	r3, r1
 801b38c:	3308      	adds	r3, #8
 801b38e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b390:	4a17      	ldr	r2, [pc, #92]	@ (801b3f0 <inc_lock+0x118>)
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	011b      	lsls	r3, r3, #4
 801b396:	4413      	add	r3, r2
 801b398:	330c      	adds	r3, #12
 801b39a:	2200      	movs	r2, #0
 801b39c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b39e:	683b      	ldr	r3, [r7, #0]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d009      	beq.n	801b3b8 <inc_lock+0xe0>
 801b3a4:	4a12      	ldr	r2, [pc, #72]	@ (801b3f0 <inc_lock+0x118>)
 801b3a6:	68fb      	ldr	r3, [r7, #12]
 801b3a8:	011b      	lsls	r3, r3, #4
 801b3aa:	4413      	add	r3, r2
 801b3ac:	330c      	adds	r3, #12
 801b3ae:	881b      	ldrh	r3, [r3, #0]
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d001      	beq.n	801b3b8 <inc_lock+0xe0>
 801b3b4:	2300      	movs	r3, #0
 801b3b6:	e015      	b.n	801b3e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b3b8:	683b      	ldr	r3, [r7, #0]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d108      	bne.n	801b3d0 <inc_lock+0xf8>
 801b3be:	4a0c      	ldr	r2, [pc, #48]	@ (801b3f0 <inc_lock+0x118>)
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	011b      	lsls	r3, r3, #4
 801b3c4:	4413      	add	r3, r2
 801b3c6:	330c      	adds	r3, #12
 801b3c8:	881b      	ldrh	r3, [r3, #0]
 801b3ca:	3301      	adds	r3, #1
 801b3cc:	b29a      	uxth	r2, r3
 801b3ce:	e001      	b.n	801b3d4 <inc_lock+0xfc>
 801b3d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b3d4:	4906      	ldr	r1, [pc, #24]	@ (801b3f0 <inc_lock+0x118>)
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	011b      	lsls	r3, r3, #4
 801b3da:	440b      	add	r3, r1
 801b3dc:	330c      	adds	r3, #12
 801b3de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b3e0:	68fb      	ldr	r3, [r7, #12]
 801b3e2:	3301      	adds	r3, #1
}
 801b3e4:	4618      	mov	r0, r3
 801b3e6:	3714      	adds	r7, #20
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ee:	4770      	bx	lr
 801b3f0:	24000558 	.word	0x24000558

0801b3f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b3f4:	b480      	push	{r7}
 801b3f6:	b085      	sub	sp, #20
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	3b01      	subs	r3, #1
 801b400:	607b      	str	r3, [r7, #4]
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	2b00      	cmp	r3, #0
 801b406:	d125      	bne.n	801b454 <dec_lock+0x60>
		n = Files[i].ctr;
 801b408:	4a17      	ldr	r2, [pc, #92]	@ (801b468 <dec_lock+0x74>)
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	011b      	lsls	r3, r3, #4
 801b40e:	4413      	add	r3, r2
 801b410:	330c      	adds	r3, #12
 801b412:	881b      	ldrh	r3, [r3, #0]
 801b414:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b416:	89fb      	ldrh	r3, [r7, #14]
 801b418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b41c:	d101      	bne.n	801b422 <dec_lock+0x2e>
 801b41e:	2300      	movs	r3, #0
 801b420:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b422:	89fb      	ldrh	r3, [r7, #14]
 801b424:	2b00      	cmp	r3, #0
 801b426:	d002      	beq.n	801b42e <dec_lock+0x3a>
 801b428:	89fb      	ldrh	r3, [r7, #14]
 801b42a:	3b01      	subs	r3, #1
 801b42c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b42e:	4a0e      	ldr	r2, [pc, #56]	@ (801b468 <dec_lock+0x74>)
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	011b      	lsls	r3, r3, #4
 801b434:	4413      	add	r3, r2
 801b436:	330c      	adds	r3, #12
 801b438:	89fa      	ldrh	r2, [r7, #14]
 801b43a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b43c:	89fb      	ldrh	r3, [r7, #14]
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d105      	bne.n	801b44e <dec_lock+0x5a>
 801b442:	4a09      	ldr	r2, [pc, #36]	@ (801b468 <dec_lock+0x74>)
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	011b      	lsls	r3, r3, #4
 801b448:	4413      	add	r3, r2
 801b44a:	2200      	movs	r2, #0
 801b44c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b44e:	2300      	movs	r3, #0
 801b450:	737b      	strb	r3, [r7, #13]
 801b452:	e001      	b.n	801b458 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b454:	2302      	movs	r3, #2
 801b456:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b458:	7b7b      	ldrb	r3, [r7, #13]
}
 801b45a:	4618      	mov	r0, r3
 801b45c:	3714      	adds	r7, #20
 801b45e:	46bd      	mov	sp, r7
 801b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b464:	4770      	bx	lr
 801b466:	bf00      	nop
 801b468:	24000558 	.word	0x24000558

0801b46c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b46c:	b480      	push	{r7}
 801b46e:	b085      	sub	sp, #20
 801b470:	af00      	add	r7, sp, #0
 801b472:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b474:	2300      	movs	r3, #0
 801b476:	60fb      	str	r3, [r7, #12]
 801b478:	e010      	b.n	801b49c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b47a:	4a0d      	ldr	r2, [pc, #52]	@ (801b4b0 <clear_lock+0x44>)
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	011b      	lsls	r3, r3, #4
 801b480:	4413      	add	r3, r2
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	687a      	ldr	r2, [r7, #4]
 801b486:	429a      	cmp	r2, r3
 801b488:	d105      	bne.n	801b496 <clear_lock+0x2a>
 801b48a:	4a09      	ldr	r2, [pc, #36]	@ (801b4b0 <clear_lock+0x44>)
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	011b      	lsls	r3, r3, #4
 801b490:	4413      	add	r3, r2
 801b492:	2200      	movs	r2, #0
 801b494:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	3301      	adds	r3, #1
 801b49a:	60fb      	str	r3, [r7, #12]
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d0eb      	beq.n	801b47a <clear_lock+0xe>
	}
}
 801b4a2:	bf00      	nop
 801b4a4:	bf00      	nop
 801b4a6:	3714      	adds	r7, #20
 801b4a8:	46bd      	mov	sp, r7
 801b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ae:	4770      	bx	lr
 801b4b0:	24000558 	.word	0x24000558

0801b4b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b086      	sub	sp, #24
 801b4b8:	af00      	add	r7, sp, #0
 801b4ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b4bc:	2300      	movs	r3, #0
 801b4be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	78db      	ldrb	r3, [r3, #3]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d034      	beq.n	801b532 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b4cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	7858      	ldrb	r0, [r3, #1]
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4d8:	2301      	movs	r3, #1
 801b4da:	697a      	ldr	r2, [r7, #20]
 801b4dc:	f7ff fd40 	bl	801af60 <disk_write>
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d002      	beq.n	801b4ec <sync_window+0x38>
			res = FR_DISK_ERR;
 801b4e6:	2301      	movs	r3, #1
 801b4e8:	73fb      	strb	r3, [r7, #15]
 801b4ea:	e022      	b.n	801b532 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	2200      	movs	r2, #0
 801b4f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b4f6:	697a      	ldr	r2, [r7, #20]
 801b4f8:	1ad2      	subs	r2, r2, r3
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	6a1b      	ldr	r3, [r3, #32]
 801b4fe:	429a      	cmp	r2, r3
 801b500:	d217      	bcs.n	801b532 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	789b      	ldrb	r3, [r3, #2]
 801b506:	613b      	str	r3, [r7, #16]
 801b508:	e010      	b.n	801b52c <sync_window+0x78>
					wsect += fs->fsize;
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	6a1b      	ldr	r3, [r3, #32]
 801b50e:	697a      	ldr	r2, [r7, #20]
 801b510:	4413      	add	r3, r2
 801b512:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	7858      	ldrb	r0, [r3, #1]
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b51e:	2301      	movs	r3, #1
 801b520:	697a      	ldr	r2, [r7, #20]
 801b522:	f7ff fd1d 	bl	801af60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b526:	693b      	ldr	r3, [r7, #16]
 801b528:	3b01      	subs	r3, #1
 801b52a:	613b      	str	r3, [r7, #16]
 801b52c:	693b      	ldr	r3, [r7, #16]
 801b52e:	2b01      	cmp	r3, #1
 801b530:	d8eb      	bhi.n	801b50a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b532:	7bfb      	ldrb	r3, [r7, #15]
}
 801b534:	4618      	mov	r0, r3
 801b536:	3718      	adds	r7, #24
 801b538:	46bd      	mov	sp, r7
 801b53a:	bd80      	pop	{r7, pc}

0801b53c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b084      	sub	sp, #16
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
 801b544:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b546:	2300      	movs	r3, #0
 801b548:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b54e:	683a      	ldr	r2, [r7, #0]
 801b550:	429a      	cmp	r2, r3
 801b552:	d01b      	beq.n	801b58c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b554:	6878      	ldr	r0, [r7, #4]
 801b556:	f7ff ffad 	bl	801b4b4 <sync_window>
 801b55a:	4603      	mov	r3, r0
 801b55c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b55e:	7bfb      	ldrb	r3, [r7, #15]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d113      	bne.n	801b58c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	7858      	ldrb	r0, [r3, #1]
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b56e:	2301      	movs	r3, #1
 801b570:	683a      	ldr	r2, [r7, #0]
 801b572:	f7ff fcd5 	bl	801af20 <disk_read>
 801b576:	4603      	mov	r3, r0
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d004      	beq.n	801b586 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b57c:	f04f 33ff 	mov.w	r3, #4294967295
 801b580:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b582:	2301      	movs	r3, #1
 801b584:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	683a      	ldr	r2, [r7, #0]
 801b58a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b58c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b58e:	4618      	mov	r0, r3
 801b590:	3710      	adds	r7, #16
 801b592:	46bd      	mov	sp, r7
 801b594:	bd80      	pop	{r7, pc}
	...

0801b598 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b598:	b580      	push	{r7, lr}
 801b59a:	b084      	sub	sp, #16
 801b59c:	af00      	add	r7, sp, #0
 801b59e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b5a0:	6878      	ldr	r0, [r7, #4]
 801b5a2:	f7ff ff87 	bl	801b4b4 <sync_window>
 801b5a6:	4603      	mov	r3, r0
 801b5a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b5aa:	7bfb      	ldrb	r3, [r7, #15]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d159      	bne.n	801b664 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	781b      	ldrb	r3, [r3, #0]
 801b5b4:	2b03      	cmp	r3, #3
 801b5b6:	d149      	bne.n	801b64c <sync_fs+0xb4>
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	791b      	ldrb	r3, [r3, #4]
 801b5bc:	2b01      	cmp	r3, #1
 801b5be:	d145      	bne.n	801b64c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	899b      	ldrh	r3, [r3, #12]
 801b5ca:	461a      	mov	r2, r3
 801b5cc:	2100      	movs	r1, #0
 801b5ce:	f7ff fda8 	bl	801b122 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	3338      	adds	r3, #56	@ 0x38
 801b5d6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b5da:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b5de:	4618      	mov	r0, r3
 801b5e0:	f7ff fd37 	bl	801b052 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	3338      	adds	r3, #56	@ 0x38
 801b5e8:	4921      	ldr	r1, [pc, #132]	@ (801b670 <sync_fs+0xd8>)
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f7ff fd4c 	bl	801b088 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	3338      	adds	r3, #56	@ 0x38
 801b5f4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b5f8:	491e      	ldr	r1, [pc, #120]	@ (801b674 <sync_fs+0xdc>)
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	f7ff fd44 	bl	801b088 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	3338      	adds	r3, #56	@ 0x38
 801b604:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	699b      	ldr	r3, [r3, #24]
 801b60c:	4619      	mov	r1, r3
 801b60e:	4610      	mov	r0, r2
 801b610:	f7ff fd3a 	bl	801b088 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	3338      	adds	r3, #56	@ 0x38
 801b618:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	695b      	ldr	r3, [r3, #20]
 801b620:	4619      	mov	r1, r3
 801b622:	4610      	mov	r0, r2
 801b624:	f7ff fd30 	bl	801b088 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b62c:	1c5a      	adds	r2, r3, #1
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	7858      	ldrb	r0, [r3, #1]
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b640:	2301      	movs	r3, #1
 801b642:	f7ff fc8d 	bl	801af60 <disk_write>
			fs->fsi_flag = 0;
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	2200      	movs	r2, #0
 801b64a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	785b      	ldrb	r3, [r3, #1]
 801b650:	2200      	movs	r2, #0
 801b652:	2100      	movs	r1, #0
 801b654:	4618      	mov	r0, r3
 801b656:	f7ff fca3 	bl	801afa0 <disk_ioctl>
 801b65a:	4603      	mov	r3, r0
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d001      	beq.n	801b664 <sync_fs+0xcc>
 801b660:	2301      	movs	r3, #1
 801b662:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b664:	7bfb      	ldrb	r3, [r7, #15]
}
 801b666:	4618      	mov	r0, r3
 801b668:	3710      	adds	r7, #16
 801b66a:	46bd      	mov	sp, r7
 801b66c:	bd80      	pop	{r7, pc}
 801b66e:	bf00      	nop
 801b670:	41615252 	.word	0x41615252
 801b674:	61417272 	.word	0x61417272

0801b678 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b678:	b480      	push	{r7}
 801b67a:	b083      	sub	sp, #12
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
 801b680:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b682:	683b      	ldr	r3, [r7, #0]
 801b684:	3b02      	subs	r3, #2
 801b686:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	69db      	ldr	r3, [r3, #28]
 801b68c:	3b02      	subs	r3, #2
 801b68e:	683a      	ldr	r2, [r7, #0]
 801b690:	429a      	cmp	r2, r3
 801b692:	d301      	bcc.n	801b698 <clust2sect+0x20>
 801b694:	2300      	movs	r3, #0
 801b696:	e008      	b.n	801b6aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	895b      	ldrh	r3, [r3, #10]
 801b69c:	461a      	mov	r2, r3
 801b69e:	683b      	ldr	r3, [r7, #0]
 801b6a0:	fb03 f202 	mul.w	r2, r3, r2
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b6a8:	4413      	add	r3, r2
}
 801b6aa:	4618      	mov	r0, r3
 801b6ac:	370c      	adds	r7, #12
 801b6ae:	46bd      	mov	sp, r7
 801b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6b4:	4770      	bx	lr

0801b6b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b6b6:	b580      	push	{r7, lr}
 801b6b8:	b086      	sub	sp, #24
 801b6ba:	af00      	add	r7, sp, #0
 801b6bc:	6078      	str	r0, [r7, #4]
 801b6be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b6c6:	683b      	ldr	r3, [r7, #0]
 801b6c8:	2b01      	cmp	r3, #1
 801b6ca:	d904      	bls.n	801b6d6 <get_fat+0x20>
 801b6cc:	693b      	ldr	r3, [r7, #16]
 801b6ce:	69db      	ldr	r3, [r3, #28]
 801b6d0:	683a      	ldr	r2, [r7, #0]
 801b6d2:	429a      	cmp	r2, r3
 801b6d4:	d302      	bcc.n	801b6dc <get_fat+0x26>
		val = 1;	/* Internal error */
 801b6d6:	2301      	movs	r3, #1
 801b6d8:	617b      	str	r3, [r7, #20]
 801b6da:	e0ba      	b.n	801b852 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b6dc:	f04f 33ff 	mov.w	r3, #4294967295
 801b6e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b6e2:	693b      	ldr	r3, [r7, #16]
 801b6e4:	781b      	ldrb	r3, [r3, #0]
 801b6e6:	2b03      	cmp	r3, #3
 801b6e8:	f000 8082 	beq.w	801b7f0 <get_fat+0x13a>
 801b6ec:	2b03      	cmp	r3, #3
 801b6ee:	f300 80a6 	bgt.w	801b83e <get_fat+0x188>
 801b6f2:	2b01      	cmp	r3, #1
 801b6f4:	d002      	beq.n	801b6fc <get_fat+0x46>
 801b6f6:	2b02      	cmp	r3, #2
 801b6f8:	d055      	beq.n	801b7a6 <get_fat+0xf0>
 801b6fa:	e0a0      	b.n	801b83e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b6fc:	683b      	ldr	r3, [r7, #0]
 801b6fe:	60fb      	str	r3, [r7, #12]
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	085b      	lsrs	r3, r3, #1
 801b704:	68fa      	ldr	r2, [r7, #12]
 801b706:	4413      	add	r3, r2
 801b708:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b70a:	693b      	ldr	r3, [r7, #16]
 801b70c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b70e:	693b      	ldr	r3, [r7, #16]
 801b710:	899b      	ldrh	r3, [r3, #12]
 801b712:	4619      	mov	r1, r3
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	fbb3 f3f1 	udiv	r3, r3, r1
 801b71a:	4413      	add	r3, r2
 801b71c:	4619      	mov	r1, r3
 801b71e:	6938      	ldr	r0, [r7, #16]
 801b720:	f7ff ff0c 	bl	801b53c <move_window>
 801b724:	4603      	mov	r3, r0
 801b726:	2b00      	cmp	r3, #0
 801b728:	f040 808c 	bne.w	801b844 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b72c:	68fb      	ldr	r3, [r7, #12]
 801b72e:	1c5a      	adds	r2, r3, #1
 801b730:	60fa      	str	r2, [r7, #12]
 801b732:	693a      	ldr	r2, [r7, #16]
 801b734:	8992      	ldrh	r2, [r2, #12]
 801b736:	fbb3 f1f2 	udiv	r1, r3, r2
 801b73a:	fb01 f202 	mul.w	r2, r1, r2
 801b73e:	1a9b      	subs	r3, r3, r2
 801b740:	693a      	ldr	r2, [r7, #16]
 801b742:	4413      	add	r3, r2
 801b744:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b748:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b74a:	693b      	ldr	r3, [r7, #16]
 801b74c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b74e:	693b      	ldr	r3, [r7, #16]
 801b750:	899b      	ldrh	r3, [r3, #12]
 801b752:	4619      	mov	r1, r3
 801b754:	68fb      	ldr	r3, [r7, #12]
 801b756:	fbb3 f3f1 	udiv	r3, r3, r1
 801b75a:	4413      	add	r3, r2
 801b75c:	4619      	mov	r1, r3
 801b75e:	6938      	ldr	r0, [r7, #16]
 801b760:	f7ff feec 	bl	801b53c <move_window>
 801b764:	4603      	mov	r3, r0
 801b766:	2b00      	cmp	r3, #0
 801b768:	d16e      	bne.n	801b848 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b76a:	693b      	ldr	r3, [r7, #16]
 801b76c:	899b      	ldrh	r3, [r3, #12]
 801b76e:	461a      	mov	r2, r3
 801b770:	68fb      	ldr	r3, [r7, #12]
 801b772:	fbb3 f1f2 	udiv	r1, r3, r2
 801b776:	fb01 f202 	mul.w	r2, r1, r2
 801b77a:	1a9b      	subs	r3, r3, r2
 801b77c:	693a      	ldr	r2, [r7, #16]
 801b77e:	4413      	add	r3, r2
 801b780:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b784:	021b      	lsls	r3, r3, #8
 801b786:	68ba      	ldr	r2, [r7, #8]
 801b788:	4313      	orrs	r3, r2
 801b78a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b78c:	683b      	ldr	r3, [r7, #0]
 801b78e:	f003 0301 	and.w	r3, r3, #1
 801b792:	2b00      	cmp	r3, #0
 801b794:	d002      	beq.n	801b79c <get_fat+0xe6>
 801b796:	68bb      	ldr	r3, [r7, #8]
 801b798:	091b      	lsrs	r3, r3, #4
 801b79a:	e002      	b.n	801b7a2 <get_fat+0xec>
 801b79c:	68bb      	ldr	r3, [r7, #8]
 801b79e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b7a2:	617b      	str	r3, [r7, #20]
			break;
 801b7a4:	e055      	b.n	801b852 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b7a6:	693b      	ldr	r3, [r7, #16]
 801b7a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b7aa:	693b      	ldr	r3, [r7, #16]
 801b7ac:	899b      	ldrh	r3, [r3, #12]
 801b7ae:	085b      	lsrs	r3, r3, #1
 801b7b0:	b29b      	uxth	r3, r3
 801b7b2:	4619      	mov	r1, r3
 801b7b4:	683b      	ldr	r3, [r7, #0]
 801b7b6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7ba:	4413      	add	r3, r2
 801b7bc:	4619      	mov	r1, r3
 801b7be:	6938      	ldr	r0, [r7, #16]
 801b7c0:	f7ff febc 	bl	801b53c <move_window>
 801b7c4:	4603      	mov	r3, r0
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d140      	bne.n	801b84c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b7ca:	693b      	ldr	r3, [r7, #16]
 801b7cc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b7d0:	683b      	ldr	r3, [r7, #0]
 801b7d2:	005b      	lsls	r3, r3, #1
 801b7d4:	693a      	ldr	r2, [r7, #16]
 801b7d6:	8992      	ldrh	r2, [r2, #12]
 801b7d8:	fbb3 f0f2 	udiv	r0, r3, r2
 801b7dc:	fb00 f202 	mul.w	r2, r0, r2
 801b7e0:	1a9b      	subs	r3, r3, r2
 801b7e2:	440b      	add	r3, r1
 801b7e4:	4618      	mov	r0, r3
 801b7e6:	f7ff fbf9 	bl	801afdc <ld_word>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	617b      	str	r3, [r7, #20]
			break;
 801b7ee:	e030      	b.n	801b852 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b7f0:	693b      	ldr	r3, [r7, #16]
 801b7f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b7f4:	693b      	ldr	r3, [r7, #16]
 801b7f6:	899b      	ldrh	r3, [r3, #12]
 801b7f8:	089b      	lsrs	r3, r3, #2
 801b7fa:	b29b      	uxth	r3, r3
 801b7fc:	4619      	mov	r1, r3
 801b7fe:	683b      	ldr	r3, [r7, #0]
 801b800:	fbb3 f3f1 	udiv	r3, r3, r1
 801b804:	4413      	add	r3, r2
 801b806:	4619      	mov	r1, r3
 801b808:	6938      	ldr	r0, [r7, #16]
 801b80a:	f7ff fe97 	bl	801b53c <move_window>
 801b80e:	4603      	mov	r3, r0
 801b810:	2b00      	cmp	r3, #0
 801b812:	d11d      	bne.n	801b850 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b814:	693b      	ldr	r3, [r7, #16]
 801b816:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b81a:	683b      	ldr	r3, [r7, #0]
 801b81c:	009b      	lsls	r3, r3, #2
 801b81e:	693a      	ldr	r2, [r7, #16]
 801b820:	8992      	ldrh	r2, [r2, #12]
 801b822:	fbb3 f0f2 	udiv	r0, r3, r2
 801b826:	fb00 f202 	mul.w	r2, r0, r2
 801b82a:	1a9b      	subs	r3, r3, r2
 801b82c:	440b      	add	r3, r1
 801b82e:	4618      	mov	r0, r3
 801b830:	f7ff fbec 	bl	801b00c <ld_dword>
 801b834:	4603      	mov	r3, r0
 801b836:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b83a:	617b      	str	r3, [r7, #20]
			break;
 801b83c:	e009      	b.n	801b852 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b83e:	2301      	movs	r3, #1
 801b840:	617b      	str	r3, [r7, #20]
 801b842:	e006      	b.n	801b852 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b844:	bf00      	nop
 801b846:	e004      	b.n	801b852 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b848:	bf00      	nop
 801b84a:	e002      	b.n	801b852 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b84c:	bf00      	nop
 801b84e:	e000      	b.n	801b852 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b850:	bf00      	nop
		}
	}

	return val;
 801b852:	697b      	ldr	r3, [r7, #20]
}
 801b854:	4618      	mov	r0, r3
 801b856:	3718      	adds	r7, #24
 801b858:	46bd      	mov	sp, r7
 801b85a:	bd80      	pop	{r7, pc}

0801b85c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b85c:	b590      	push	{r4, r7, lr}
 801b85e:	b089      	sub	sp, #36	@ 0x24
 801b860:	af00      	add	r7, sp, #0
 801b862:	60f8      	str	r0, [r7, #12]
 801b864:	60b9      	str	r1, [r7, #8]
 801b866:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b868:	2302      	movs	r3, #2
 801b86a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b86c:	68bb      	ldr	r3, [r7, #8]
 801b86e:	2b01      	cmp	r3, #1
 801b870:	f240 8109 	bls.w	801ba86 <put_fat+0x22a>
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	69db      	ldr	r3, [r3, #28]
 801b878:	68ba      	ldr	r2, [r7, #8]
 801b87a:	429a      	cmp	r2, r3
 801b87c:	f080 8103 	bcs.w	801ba86 <put_fat+0x22a>
		switch (fs->fs_type) {
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	781b      	ldrb	r3, [r3, #0]
 801b884:	2b03      	cmp	r3, #3
 801b886:	f000 80b6 	beq.w	801b9f6 <put_fat+0x19a>
 801b88a:	2b03      	cmp	r3, #3
 801b88c:	f300 80fb 	bgt.w	801ba86 <put_fat+0x22a>
 801b890:	2b01      	cmp	r3, #1
 801b892:	d003      	beq.n	801b89c <put_fat+0x40>
 801b894:	2b02      	cmp	r3, #2
 801b896:	f000 8083 	beq.w	801b9a0 <put_fat+0x144>
 801b89a:	e0f4      	b.n	801ba86 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b89c:	68bb      	ldr	r3, [r7, #8]
 801b89e:	61bb      	str	r3, [r7, #24]
 801b8a0:	69bb      	ldr	r3, [r7, #24]
 801b8a2:	085b      	lsrs	r3, r3, #1
 801b8a4:	69ba      	ldr	r2, [r7, #24]
 801b8a6:	4413      	add	r3, r2
 801b8a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	899b      	ldrh	r3, [r3, #12]
 801b8b2:	4619      	mov	r1, r3
 801b8b4:	69bb      	ldr	r3, [r7, #24]
 801b8b6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8ba:	4413      	add	r3, r2
 801b8bc:	4619      	mov	r1, r3
 801b8be:	68f8      	ldr	r0, [r7, #12]
 801b8c0:	f7ff fe3c 	bl	801b53c <move_window>
 801b8c4:	4603      	mov	r3, r0
 801b8c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b8c8:	7ffb      	ldrb	r3, [r7, #31]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	f040 80d4 	bne.w	801ba78 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b8d6:	69bb      	ldr	r3, [r7, #24]
 801b8d8:	1c5a      	adds	r2, r3, #1
 801b8da:	61ba      	str	r2, [r7, #24]
 801b8dc:	68fa      	ldr	r2, [r7, #12]
 801b8de:	8992      	ldrh	r2, [r2, #12]
 801b8e0:	fbb3 f0f2 	udiv	r0, r3, r2
 801b8e4:	fb00 f202 	mul.w	r2, r0, r2
 801b8e8:	1a9b      	subs	r3, r3, r2
 801b8ea:	440b      	add	r3, r1
 801b8ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b8ee:	68bb      	ldr	r3, [r7, #8]
 801b8f0:	f003 0301 	and.w	r3, r3, #1
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d00d      	beq.n	801b914 <put_fat+0xb8>
 801b8f8:	697b      	ldr	r3, [r7, #20]
 801b8fa:	781b      	ldrb	r3, [r3, #0]
 801b8fc:	b25b      	sxtb	r3, r3
 801b8fe:	f003 030f 	and.w	r3, r3, #15
 801b902:	b25a      	sxtb	r2, r3
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	b2db      	uxtb	r3, r3
 801b908:	011b      	lsls	r3, r3, #4
 801b90a:	b25b      	sxtb	r3, r3
 801b90c:	4313      	orrs	r3, r2
 801b90e:	b25b      	sxtb	r3, r3
 801b910:	b2db      	uxtb	r3, r3
 801b912:	e001      	b.n	801b918 <put_fat+0xbc>
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	b2db      	uxtb	r3, r3
 801b918:	697a      	ldr	r2, [r7, #20]
 801b91a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	2201      	movs	r2, #1
 801b920:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b922:	68fb      	ldr	r3, [r7, #12]
 801b924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b926:	68fb      	ldr	r3, [r7, #12]
 801b928:	899b      	ldrh	r3, [r3, #12]
 801b92a:	4619      	mov	r1, r3
 801b92c:	69bb      	ldr	r3, [r7, #24]
 801b92e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b932:	4413      	add	r3, r2
 801b934:	4619      	mov	r1, r3
 801b936:	68f8      	ldr	r0, [r7, #12]
 801b938:	f7ff fe00 	bl	801b53c <move_window>
 801b93c:	4603      	mov	r3, r0
 801b93e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b940:	7ffb      	ldrb	r3, [r7, #31]
 801b942:	2b00      	cmp	r3, #0
 801b944:	f040 809a 	bne.w	801ba7c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b948:	68fb      	ldr	r3, [r7, #12]
 801b94a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	899b      	ldrh	r3, [r3, #12]
 801b952:	461a      	mov	r2, r3
 801b954:	69bb      	ldr	r3, [r7, #24]
 801b956:	fbb3 f0f2 	udiv	r0, r3, r2
 801b95a:	fb00 f202 	mul.w	r2, r0, r2
 801b95e:	1a9b      	subs	r3, r3, r2
 801b960:	440b      	add	r3, r1
 801b962:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b964:	68bb      	ldr	r3, [r7, #8]
 801b966:	f003 0301 	and.w	r3, r3, #1
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d003      	beq.n	801b976 <put_fat+0x11a>
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	091b      	lsrs	r3, r3, #4
 801b972:	b2db      	uxtb	r3, r3
 801b974:	e00e      	b.n	801b994 <put_fat+0x138>
 801b976:	697b      	ldr	r3, [r7, #20]
 801b978:	781b      	ldrb	r3, [r3, #0]
 801b97a:	b25b      	sxtb	r3, r3
 801b97c:	f023 030f 	bic.w	r3, r3, #15
 801b980:	b25a      	sxtb	r2, r3
 801b982:	687b      	ldr	r3, [r7, #4]
 801b984:	0a1b      	lsrs	r3, r3, #8
 801b986:	b25b      	sxtb	r3, r3
 801b988:	f003 030f 	and.w	r3, r3, #15
 801b98c:	b25b      	sxtb	r3, r3
 801b98e:	4313      	orrs	r3, r2
 801b990:	b25b      	sxtb	r3, r3
 801b992:	b2db      	uxtb	r3, r3
 801b994:	697a      	ldr	r2, [r7, #20]
 801b996:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b998:	68fb      	ldr	r3, [r7, #12]
 801b99a:	2201      	movs	r2, #1
 801b99c:	70da      	strb	r2, [r3, #3]
			break;
 801b99e:	e072      	b.n	801ba86 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	899b      	ldrh	r3, [r3, #12]
 801b9a8:	085b      	lsrs	r3, r3, #1
 801b9aa:	b29b      	uxth	r3, r3
 801b9ac:	4619      	mov	r1, r3
 801b9ae:	68bb      	ldr	r3, [r7, #8]
 801b9b0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b9b4:	4413      	add	r3, r2
 801b9b6:	4619      	mov	r1, r3
 801b9b8:	68f8      	ldr	r0, [r7, #12]
 801b9ba:	f7ff fdbf 	bl	801b53c <move_window>
 801b9be:	4603      	mov	r3, r0
 801b9c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b9c2:	7ffb      	ldrb	r3, [r7, #31]
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d15b      	bne.n	801ba80 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b9ce:	68bb      	ldr	r3, [r7, #8]
 801b9d0:	005b      	lsls	r3, r3, #1
 801b9d2:	68fa      	ldr	r2, [r7, #12]
 801b9d4:	8992      	ldrh	r2, [r2, #12]
 801b9d6:	fbb3 f0f2 	udiv	r0, r3, r2
 801b9da:	fb00 f202 	mul.w	r2, r0, r2
 801b9de:	1a9b      	subs	r3, r3, r2
 801b9e0:	440b      	add	r3, r1
 801b9e2:	687a      	ldr	r2, [r7, #4]
 801b9e4:	b292      	uxth	r2, r2
 801b9e6:	4611      	mov	r1, r2
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	f7ff fb32 	bl	801b052 <st_word>
			fs->wflag = 1;
 801b9ee:	68fb      	ldr	r3, [r7, #12]
 801b9f0:	2201      	movs	r2, #1
 801b9f2:	70da      	strb	r2, [r3, #3]
			break;
 801b9f4:	e047      	b.n	801ba86 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	899b      	ldrh	r3, [r3, #12]
 801b9fe:	089b      	lsrs	r3, r3, #2
 801ba00:	b29b      	uxth	r3, r3
 801ba02:	4619      	mov	r1, r3
 801ba04:	68bb      	ldr	r3, [r7, #8]
 801ba06:	fbb3 f3f1 	udiv	r3, r3, r1
 801ba0a:	4413      	add	r3, r2
 801ba0c:	4619      	mov	r1, r3
 801ba0e:	68f8      	ldr	r0, [r7, #12]
 801ba10:	f7ff fd94 	bl	801b53c <move_window>
 801ba14:	4603      	mov	r3, r0
 801ba16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801ba18:	7ffb      	ldrb	r3, [r7, #31]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d132      	bne.n	801ba84 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801ba24:	68fb      	ldr	r3, [r7, #12]
 801ba26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ba2a:	68bb      	ldr	r3, [r7, #8]
 801ba2c:	009b      	lsls	r3, r3, #2
 801ba2e:	68fa      	ldr	r2, [r7, #12]
 801ba30:	8992      	ldrh	r2, [r2, #12]
 801ba32:	fbb3 f0f2 	udiv	r0, r3, r2
 801ba36:	fb00 f202 	mul.w	r2, r0, r2
 801ba3a:	1a9b      	subs	r3, r3, r2
 801ba3c:	440b      	add	r3, r1
 801ba3e:	4618      	mov	r0, r3
 801ba40:	f7ff fae4 	bl	801b00c <ld_dword>
 801ba44:	4603      	mov	r3, r0
 801ba46:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801ba4a:	4323      	orrs	r3, r4
 801ba4c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ba54:	68bb      	ldr	r3, [r7, #8]
 801ba56:	009b      	lsls	r3, r3, #2
 801ba58:	68fa      	ldr	r2, [r7, #12]
 801ba5a:	8992      	ldrh	r2, [r2, #12]
 801ba5c:	fbb3 f0f2 	udiv	r0, r3, r2
 801ba60:	fb00 f202 	mul.w	r2, r0, r2
 801ba64:	1a9b      	subs	r3, r3, r2
 801ba66:	440b      	add	r3, r1
 801ba68:	6879      	ldr	r1, [r7, #4]
 801ba6a:	4618      	mov	r0, r3
 801ba6c:	f7ff fb0c 	bl	801b088 <st_dword>
			fs->wflag = 1;
 801ba70:	68fb      	ldr	r3, [r7, #12]
 801ba72:	2201      	movs	r2, #1
 801ba74:	70da      	strb	r2, [r3, #3]
			break;
 801ba76:	e006      	b.n	801ba86 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba78:	bf00      	nop
 801ba7a:	e004      	b.n	801ba86 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba7c:	bf00      	nop
 801ba7e:	e002      	b.n	801ba86 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba80:	bf00      	nop
 801ba82:	e000      	b.n	801ba86 <put_fat+0x22a>
			if (res != FR_OK) break;
 801ba84:	bf00      	nop
		}
	}
	return res;
 801ba86:	7ffb      	ldrb	r3, [r7, #31]
}
 801ba88:	4618      	mov	r0, r3
 801ba8a:	3724      	adds	r7, #36	@ 0x24
 801ba8c:	46bd      	mov	sp, r7
 801ba8e:	bd90      	pop	{r4, r7, pc}

0801ba90 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	b088      	sub	sp, #32
 801ba94:	af00      	add	r7, sp, #0
 801ba96:	60f8      	str	r0, [r7, #12]
 801ba98:	60b9      	str	r1, [r7, #8]
 801ba9a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801ba9c:	2300      	movs	r3, #0
 801ba9e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801baa6:	68bb      	ldr	r3, [r7, #8]
 801baa8:	2b01      	cmp	r3, #1
 801baaa:	d904      	bls.n	801bab6 <remove_chain+0x26>
 801baac:	69bb      	ldr	r3, [r7, #24]
 801baae:	69db      	ldr	r3, [r3, #28]
 801bab0:	68ba      	ldr	r2, [r7, #8]
 801bab2:	429a      	cmp	r2, r3
 801bab4:	d301      	bcc.n	801baba <remove_chain+0x2a>
 801bab6:	2302      	movs	r3, #2
 801bab8:	e04b      	b.n	801bb52 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	2b00      	cmp	r3, #0
 801babe:	d00c      	beq.n	801bada <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801bac0:	f04f 32ff 	mov.w	r2, #4294967295
 801bac4:	6879      	ldr	r1, [r7, #4]
 801bac6:	69b8      	ldr	r0, [r7, #24]
 801bac8:	f7ff fec8 	bl	801b85c <put_fat>
 801bacc:	4603      	mov	r3, r0
 801bace:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801bad0:	7ffb      	ldrb	r3, [r7, #31]
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d001      	beq.n	801bada <remove_chain+0x4a>
 801bad6:	7ffb      	ldrb	r3, [r7, #31]
 801bad8:	e03b      	b.n	801bb52 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801bada:	68b9      	ldr	r1, [r7, #8]
 801badc:	68f8      	ldr	r0, [r7, #12]
 801bade:	f7ff fdea 	bl	801b6b6 <get_fat>
 801bae2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801bae4:	697b      	ldr	r3, [r7, #20]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d031      	beq.n	801bb4e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801baea:	697b      	ldr	r3, [r7, #20]
 801baec:	2b01      	cmp	r3, #1
 801baee:	d101      	bne.n	801baf4 <remove_chain+0x64>
 801baf0:	2302      	movs	r3, #2
 801baf2:	e02e      	b.n	801bb52 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801baf4:	697b      	ldr	r3, [r7, #20]
 801baf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bafa:	d101      	bne.n	801bb00 <remove_chain+0x70>
 801bafc:	2301      	movs	r3, #1
 801bafe:	e028      	b.n	801bb52 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801bb00:	2200      	movs	r2, #0
 801bb02:	68b9      	ldr	r1, [r7, #8]
 801bb04:	69b8      	ldr	r0, [r7, #24]
 801bb06:	f7ff fea9 	bl	801b85c <put_fat>
 801bb0a:	4603      	mov	r3, r0
 801bb0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801bb0e:	7ffb      	ldrb	r3, [r7, #31]
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d001      	beq.n	801bb18 <remove_chain+0x88>
 801bb14:	7ffb      	ldrb	r3, [r7, #31]
 801bb16:	e01c      	b.n	801bb52 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801bb18:	69bb      	ldr	r3, [r7, #24]
 801bb1a:	699a      	ldr	r2, [r3, #24]
 801bb1c:	69bb      	ldr	r3, [r7, #24]
 801bb1e:	69db      	ldr	r3, [r3, #28]
 801bb20:	3b02      	subs	r3, #2
 801bb22:	429a      	cmp	r2, r3
 801bb24:	d20b      	bcs.n	801bb3e <remove_chain+0xae>
			fs->free_clst++;
 801bb26:	69bb      	ldr	r3, [r7, #24]
 801bb28:	699b      	ldr	r3, [r3, #24]
 801bb2a:	1c5a      	adds	r2, r3, #1
 801bb2c:	69bb      	ldr	r3, [r7, #24]
 801bb2e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801bb30:	69bb      	ldr	r3, [r7, #24]
 801bb32:	791b      	ldrb	r3, [r3, #4]
 801bb34:	f043 0301 	orr.w	r3, r3, #1
 801bb38:	b2da      	uxtb	r2, r3
 801bb3a:	69bb      	ldr	r3, [r7, #24]
 801bb3c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801bb3e:	697b      	ldr	r3, [r7, #20]
 801bb40:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801bb42:	69bb      	ldr	r3, [r7, #24]
 801bb44:	69db      	ldr	r3, [r3, #28]
 801bb46:	68ba      	ldr	r2, [r7, #8]
 801bb48:	429a      	cmp	r2, r3
 801bb4a:	d3c6      	bcc.n	801bada <remove_chain+0x4a>
 801bb4c:	e000      	b.n	801bb50 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801bb4e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801bb50:	2300      	movs	r3, #0
}
 801bb52:	4618      	mov	r0, r3
 801bb54:	3720      	adds	r7, #32
 801bb56:	46bd      	mov	sp, r7
 801bb58:	bd80      	pop	{r7, pc}

0801bb5a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801bb5a:	b580      	push	{r7, lr}
 801bb5c:	b088      	sub	sp, #32
 801bb5e:	af00      	add	r7, sp, #0
 801bb60:	6078      	str	r0, [r7, #4]
 801bb62:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801bb6a:	683b      	ldr	r3, [r7, #0]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d10d      	bne.n	801bb8c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801bb70:	693b      	ldr	r3, [r7, #16]
 801bb72:	695b      	ldr	r3, [r3, #20]
 801bb74:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801bb76:	69bb      	ldr	r3, [r7, #24]
 801bb78:	2b00      	cmp	r3, #0
 801bb7a:	d004      	beq.n	801bb86 <create_chain+0x2c>
 801bb7c:	693b      	ldr	r3, [r7, #16]
 801bb7e:	69db      	ldr	r3, [r3, #28]
 801bb80:	69ba      	ldr	r2, [r7, #24]
 801bb82:	429a      	cmp	r2, r3
 801bb84:	d31b      	bcc.n	801bbbe <create_chain+0x64>
 801bb86:	2301      	movs	r3, #1
 801bb88:	61bb      	str	r3, [r7, #24]
 801bb8a:	e018      	b.n	801bbbe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801bb8c:	6839      	ldr	r1, [r7, #0]
 801bb8e:	6878      	ldr	r0, [r7, #4]
 801bb90:	f7ff fd91 	bl	801b6b6 <get_fat>
 801bb94:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	2b01      	cmp	r3, #1
 801bb9a:	d801      	bhi.n	801bba0 <create_chain+0x46>
 801bb9c:	2301      	movs	r3, #1
 801bb9e:	e070      	b.n	801bc82 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801bba0:	68fb      	ldr	r3, [r7, #12]
 801bba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bba6:	d101      	bne.n	801bbac <create_chain+0x52>
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	e06a      	b.n	801bc82 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801bbac:	693b      	ldr	r3, [r7, #16]
 801bbae:	69db      	ldr	r3, [r3, #28]
 801bbb0:	68fa      	ldr	r2, [r7, #12]
 801bbb2:	429a      	cmp	r2, r3
 801bbb4:	d201      	bcs.n	801bbba <create_chain+0x60>
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	e063      	b.n	801bc82 <create_chain+0x128>
		scl = clst;
 801bbba:	683b      	ldr	r3, [r7, #0]
 801bbbc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801bbbe:	69bb      	ldr	r3, [r7, #24]
 801bbc0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801bbc2:	69fb      	ldr	r3, [r7, #28]
 801bbc4:	3301      	adds	r3, #1
 801bbc6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801bbc8:	693b      	ldr	r3, [r7, #16]
 801bbca:	69db      	ldr	r3, [r3, #28]
 801bbcc:	69fa      	ldr	r2, [r7, #28]
 801bbce:	429a      	cmp	r2, r3
 801bbd0:	d307      	bcc.n	801bbe2 <create_chain+0x88>
				ncl = 2;
 801bbd2:	2302      	movs	r3, #2
 801bbd4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801bbd6:	69fa      	ldr	r2, [r7, #28]
 801bbd8:	69bb      	ldr	r3, [r7, #24]
 801bbda:	429a      	cmp	r2, r3
 801bbdc:	d901      	bls.n	801bbe2 <create_chain+0x88>
 801bbde:	2300      	movs	r3, #0
 801bbe0:	e04f      	b.n	801bc82 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801bbe2:	69f9      	ldr	r1, [r7, #28]
 801bbe4:	6878      	ldr	r0, [r7, #4]
 801bbe6:	f7ff fd66 	bl	801b6b6 <get_fat>
 801bbea:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801bbec:	68fb      	ldr	r3, [r7, #12]
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d00e      	beq.n	801bc10 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	2b01      	cmp	r3, #1
 801bbf6:	d003      	beq.n	801bc00 <create_chain+0xa6>
 801bbf8:	68fb      	ldr	r3, [r7, #12]
 801bbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bbfe:	d101      	bne.n	801bc04 <create_chain+0xaa>
 801bc00:	68fb      	ldr	r3, [r7, #12]
 801bc02:	e03e      	b.n	801bc82 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801bc04:	69fa      	ldr	r2, [r7, #28]
 801bc06:	69bb      	ldr	r3, [r7, #24]
 801bc08:	429a      	cmp	r2, r3
 801bc0a:	d1da      	bne.n	801bbc2 <create_chain+0x68>
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	e038      	b.n	801bc82 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801bc10:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801bc12:	f04f 32ff 	mov.w	r2, #4294967295
 801bc16:	69f9      	ldr	r1, [r7, #28]
 801bc18:	6938      	ldr	r0, [r7, #16]
 801bc1a:	f7ff fe1f 	bl	801b85c <put_fat>
 801bc1e:	4603      	mov	r3, r0
 801bc20:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801bc22:	7dfb      	ldrb	r3, [r7, #23]
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	d109      	bne.n	801bc3c <create_chain+0xe2>
 801bc28:	683b      	ldr	r3, [r7, #0]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d006      	beq.n	801bc3c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801bc2e:	69fa      	ldr	r2, [r7, #28]
 801bc30:	6839      	ldr	r1, [r7, #0]
 801bc32:	6938      	ldr	r0, [r7, #16]
 801bc34:	f7ff fe12 	bl	801b85c <put_fat>
 801bc38:	4603      	mov	r3, r0
 801bc3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801bc3c:	7dfb      	ldrb	r3, [r7, #23]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d116      	bne.n	801bc70 <create_chain+0x116>
		fs->last_clst = ncl;
 801bc42:	693b      	ldr	r3, [r7, #16]
 801bc44:	69fa      	ldr	r2, [r7, #28]
 801bc46:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801bc48:	693b      	ldr	r3, [r7, #16]
 801bc4a:	699a      	ldr	r2, [r3, #24]
 801bc4c:	693b      	ldr	r3, [r7, #16]
 801bc4e:	69db      	ldr	r3, [r3, #28]
 801bc50:	3b02      	subs	r3, #2
 801bc52:	429a      	cmp	r2, r3
 801bc54:	d804      	bhi.n	801bc60 <create_chain+0x106>
 801bc56:	693b      	ldr	r3, [r7, #16]
 801bc58:	699b      	ldr	r3, [r3, #24]
 801bc5a:	1e5a      	subs	r2, r3, #1
 801bc5c:	693b      	ldr	r3, [r7, #16]
 801bc5e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801bc60:	693b      	ldr	r3, [r7, #16]
 801bc62:	791b      	ldrb	r3, [r3, #4]
 801bc64:	f043 0301 	orr.w	r3, r3, #1
 801bc68:	b2da      	uxtb	r2, r3
 801bc6a:	693b      	ldr	r3, [r7, #16]
 801bc6c:	711a      	strb	r2, [r3, #4]
 801bc6e:	e007      	b.n	801bc80 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801bc70:	7dfb      	ldrb	r3, [r7, #23]
 801bc72:	2b01      	cmp	r3, #1
 801bc74:	d102      	bne.n	801bc7c <create_chain+0x122>
 801bc76:	f04f 33ff 	mov.w	r3, #4294967295
 801bc7a:	e000      	b.n	801bc7e <create_chain+0x124>
 801bc7c:	2301      	movs	r3, #1
 801bc7e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801bc80:	69fb      	ldr	r3, [r7, #28]
}
 801bc82:	4618      	mov	r0, r3
 801bc84:	3720      	adds	r7, #32
 801bc86:	46bd      	mov	sp, r7
 801bc88:	bd80      	pop	{r7, pc}

0801bc8a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801bc8a:	b480      	push	{r7}
 801bc8c:	b087      	sub	sp, #28
 801bc8e:	af00      	add	r7, sp, #0
 801bc90:	6078      	str	r0, [r7, #4]
 801bc92:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc9e:	3304      	adds	r3, #4
 801bca0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801bca2:	68fb      	ldr	r3, [r7, #12]
 801bca4:	899b      	ldrh	r3, [r3, #12]
 801bca6:	461a      	mov	r2, r3
 801bca8:	683b      	ldr	r3, [r7, #0]
 801bcaa:	fbb3 f3f2 	udiv	r3, r3, r2
 801bcae:	68fa      	ldr	r2, [r7, #12]
 801bcb0:	8952      	ldrh	r2, [r2, #10]
 801bcb2:	fbb3 f3f2 	udiv	r3, r3, r2
 801bcb6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bcb8:	693b      	ldr	r3, [r7, #16]
 801bcba:	1d1a      	adds	r2, r3, #4
 801bcbc:	613a      	str	r2, [r7, #16]
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801bcc2:	68bb      	ldr	r3, [r7, #8]
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d101      	bne.n	801bccc <clmt_clust+0x42>
 801bcc8:	2300      	movs	r3, #0
 801bcca:	e010      	b.n	801bcee <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801bccc:	697a      	ldr	r2, [r7, #20]
 801bcce:	68bb      	ldr	r3, [r7, #8]
 801bcd0:	429a      	cmp	r2, r3
 801bcd2:	d307      	bcc.n	801bce4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801bcd4:	697a      	ldr	r2, [r7, #20]
 801bcd6:	68bb      	ldr	r3, [r7, #8]
 801bcd8:	1ad3      	subs	r3, r2, r3
 801bcda:	617b      	str	r3, [r7, #20]
 801bcdc:	693b      	ldr	r3, [r7, #16]
 801bcde:	3304      	adds	r3, #4
 801bce0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bce2:	e7e9      	b.n	801bcb8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801bce4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801bce6:	693b      	ldr	r3, [r7, #16]
 801bce8:	681a      	ldr	r2, [r3, #0]
 801bcea:	697b      	ldr	r3, [r7, #20]
 801bcec:	4413      	add	r3, r2
}
 801bcee:	4618      	mov	r0, r3
 801bcf0:	371c      	adds	r7, #28
 801bcf2:	46bd      	mov	sp, r7
 801bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcf8:	4770      	bx	lr

0801bcfa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801bcfa:	b580      	push	{r7, lr}
 801bcfc:	b086      	sub	sp, #24
 801bcfe:	af00      	add	r7, sp, #0
 801bd00:	6078      	str	r0, [r7, #4]
 801bd02:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801bd0a:	683b      	ldr	r3, [r7, #0]
 801bd0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bd10:	d204      	bcs.n	801bd1c <dir_sdi+0x22>
 801bd12:	683b      	ldr	r3, [r7, #0]
 801bd14:	f003 031f 	and.w	r3, r3, #31
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d001      	beq.n	801bd20 <dir_sdi+0x26>
		return FR_INT_ERR;
 801bd1c:	2302      	movs	r3, #2
 801bd1e:	e071      	b.n	801be04 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	683a      	ldr	r2, [r7, #0]
 801bd24:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	689b      	ldr	r3, [r3, #8]
 801bd2a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801bd2c:	697b      	ldr	r3, [r7, #20]
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d106      	bne.n	801bd40 <dir_sdi+0x46>
 801bd32:	693b      	ldr	r3, [r7, #16]
 801bd34:	781b      	ldrb	r3, [r3, #0]
 801bd36:	2b02      	cmp	r3, #2
 801bd38:	d902      	bls.n	801bd40 <dir_sdi+0x46>
		clst = fs->dirbase;
 801bd3a:	693b      	ldr	r3, [r7, #16]
 801bd3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd3e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801bd40:	697b      	ldr	r3, [r7, #20]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d10c      	bne.n	801bd60 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801bd46:	683b      	ldr	r3, [r7, #0]
 801bd48:	095b      	lsrs	r3, r3, #5
 801bd4a:	693a      	ldr	r2, [r7, #16]
 801bd4c:	8912      	ldrh	r2, [r2, #8]
 801bd4e:	4293      	cmp	r3, r2
 801bd50:	d301      	bcc.n	801bd56 <dir_sdi+0x5c>
 801bd52:	2302      	movs	r3, #2
 801bd54:	e056      	b.n	801be04 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801bd56:	693b      	ldr	r3, [r7, #16]
 801bd58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	61da      	str	r2, [r3, #28]
 801bd5e:	e02d      	b.n	801bdbc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801bd60:	693b      	ldr	r3, [r7, #16]
 801bd62:	895b      	ldrh	r3, [r3, #10]
 801bd64:	461a      	mov	r2, r3
 801bd66:	693b      	ldr	r3, [r7, #16]
 801bd68:	899b      	ldrh	r3, [r3, #12]
 801bd6a:	fb02 f303 	mul.w	r3, r2, r3
 801bd6e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bd70:	e019      	b.n	801bda6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	6979      	ldr	r1, [r7, #20]
 801bd76:	4618      	mov	r0, r3
 801bd78:	f7ff fc9d 	bl	801b6b6 <get_fat>
 801bd7c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bd7e:	697b      	ldr	r3, [r7, #20]
 801bd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd84:	d101      	bne.n	801bd8a <dir_sdi+0x90>
 801bd86:	2301      	movs	r3, #1
 801bd88:	e03c      	b.n	801be04 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801bd8a:	697b      	ldr	r3, [r7, #20]
 801bd8c:	2b01      	cmp	r3, #1
 801bd8e:	d904      	bls.n	801bd9a <dir_sdi+0xa0>
 801bd90:	693b      	ldr	r3, [r7, #16]
 801bd92:	69db      	ldr	r3, [r3, #28]
 801bd94:	697a      	ldr	r2, [r7, #20]
 801bd96:	429a      	cmp	r2, r3
 801bd98:	d301      	bcc.n	801bd9e <dir_sdi+0xa4>
 801bd9a:	2302      	movs	r3, #2
 801bd9c:	e032      	b.n	801be04 <dir_sdi+0x10a>
			ofs -= csz;
 801bd9e:	683a      	ldr	r2, [r7, #0]
 801bda0:	68fb      	ldr	r3, [r7, #12]
 801bda2:	1ad3      	subs	r3, r2, r3
 801bda4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bda6:	683a      	ldr	r2, [r7, #0]
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	429a      	cmp	r2, r3
 801bdac:	d2e1      	bcs.n	801bd72 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801bdae:	6979      	ldr	r1, [r7, #20]
 801bdb0:	6938      	ldr	r0, [r7, #16]
 801bdb2:	f7ff fc61 	bl	801b678 <clust2sect>
 801bdb6:	4602      	mov	r2, r0
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	697a      	ldr	r2, [r7, #20]
 801bdc0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	69db      	ldr	r3, [r3, #28]
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d101      	bne.n	801bdce <dir_sdi+0xd4>
 801bdca:	2302      	movs	r3, #2
 801bdcc:	e01a      	b.n	801be04 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	69da      	ldr	r2, [r3, #28]
 801bdd2:	693b      	ldr	r3, [r7, #16]
 801bdd4:	899b      	ldrh	r3, [r3, #12]
 801bdd6:	4619      	mov	r1, r3
 801bdd8:	683b      	ldr	r3, [r7, #0]
 801bdda:	fbb3 f3f1 	udiv	r3, r3, r1
 801bdde:	441a      	add	r2, r3
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801bde4:	693b      	ldr	r3, [r7, #16]
 801bde6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bdea:	693b      	ldr	r3, [r7, #16]
 801bdec:	899b      	ldrh	r3, [r3, #12]
 801bdee:	461a      	mov	r2, r3
 801bdf0:	683b      	ldr	r3, [r7, #0]
 801bdf2:	fbb3 f0f2 	udiv	r0, r3, r2
 801bdf6:	fb00 f202 	mul.w	r2, r0, r2
 801bdfa:	1a9b      	subs	r3, r3, r2
 801bdfc:	18ca      	adds	r2, r1, r3
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801be02:	2300      	movs	r3, #0
}
 801be04:	4618      	mov	r0, r3
 801be06:	3718      	adds	r7, #24
 801be08:	46bd      	mov	sp, r7
 801be0a:	bd80      	pop	{r7, pc}

0801be0c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801be0c:	b580      	push	{r7, lr}
 801be0e:	b086      	sub	sp, #24
 801be10:	af00      	add	r7, sp, #0
 801be12:	6078      	str	r0, [r7, #4]
 801be14:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	695b      	ldr	r3, [r3, #20]
 801be20:	3320      	adds	r3, #32
 801be22:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	69db      	ldr	r3, [r3, #28]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d003      	beq.n	801be34 <dir_next+0x28>
 801be2c:	68bb      	ldr	r3, [r7, #8]
 801be2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801be32:	d301      	bcc.n	801be38 <dir_next+0x2c>
 801be34:	2304      	movs	r3, #4
 801be36:	e0bb      	b.n	801bfb0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	899b      	ldrh	r3, [r3, #12]
 801be3c:	461a      	mov	r2, r3
 801be3e:	68bb      	ldr	r3, [r7, #8]
 801be40:	fbb3 f1f2 	udiv	r1, r3, r2
 801be44:	fb01 f202 	mul.w	r2, r1, r2
 801be48:	1a9b      	subs	r3, r3, r2
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	f040 809d 	bne.w	801bf8a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	69db      	ldr	r3, [r3, #28]
 801be54:	1c5a      	adds	r2, r3, #1
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	699b      	ldr	r3, [r3, #24]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d10b      	bne.n	801be7a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801be62:	68bb      	ldr	r3, [r7, #8]
 801be64:	095b      	lsrs	r3, r3, #5
 801be66:	68fa      	ldr	r2, [r7, #12]
 801be68:	8912      	ldrh	r2, [r2, #8]
 801be6a:	4293      	cmp	r3, r2
 801be6c:	f0c0 808d 	bcc.w	801bf8a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	2200      	movs	r2, #0
 801be74:	61da      	str	r2, [r3, #28]
 801be76:	2304      	movs	r3, #4
 801be78:	e09a      	b.n	801bfb0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801be7a:	68fb      	ldr	r3, [r7, #12]
 801be7c:	899b      	ldrh	r3, [r3, #12]
 801be7e:	461a      	mov	r2, r3
 801be80:	68bb      	ldr	r3, [r7, #8]
 801be82:	fbb3 f3f2 	udiv	r3, r3, r2
 801be86:	68fa      	ldr	r2, [r7, #12]
 801be88:	8952      	ldrh	r2, [r2, #10]
 801be8a:	3a01      	subs	r2, #1
 801be8c:	4013      	ands	r3, r2
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d17b      	bne.n	801bf8a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801be92:	687a      	ldr	r2, [r7, #4]
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	699b      	ldr	r3, [r3, #24]
 801be98:	4619      	mov	r1, r3
 801be9a:	4610      	mov	r0, r2
 801be9c:	f7ff fc0b 	bl	801b6b6 <get_fat>
 801bea0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801bea2:	697b      	ldr	r3, [r7, #20]
 801bea4:	2b01      	cmp	r3, #1
 801bea6:	d801      	bhi.n	801beac <dir_next+0xa0>
 801bea8:	2302      	movs	r3, #2
 801beaa:	e081      	b.n	801bfb0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801beac:	697b      	ldr	r3, [r7, #20]
 801beae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801beb2:	d101      	bne.n	801beb8 <dir_next+0xac>
 801beb4:	2301      	movs	r3, #1
 801beb6:	e07b      	b.n	801bfb0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801beb8:	68fb      	ldr	r3, [r7, #12]
 801beba:	69db      	ldr	r3, [r3, #28]
 801bebc:	697a      	ldr	r2, [r7, #20]
 801bebe:	429a      	cmp	r2, r3
 801bec0:	d359      	bcc.n	801bf76 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d104      	bne.n	801bed2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	2200      	movs	r2, #0
 801becc:	61da      	str	r2, [r3, #28]
 801bece:	2304      	movs	r3, #4
 801bed0:	e06e      	b.n	801bfb0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801bed2:	687a      	ldr	r2, [r7, #4]
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	699b      	ldr	r3, [r3, #24]
 801bed8:	4619      	mov	r1, r3
 801beda:	4610      	mov	r0, r2
 801bedc:	f7ff fe3d 	bl	801bb5a <create_chain>
 801bee0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801bee2:	697b      	ldr	r3, [r7, #20]
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	d101      	bne.n	801beec <dir_next+0xe0>
 801bee8:	2307      	movs	r3, #7
 801beea:	e061      	b.n	801bfb0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801beec:	697b      	ldr	r3, [r7, #20]
 801beee:	2b01      	cmp	r3, #1
 801bef0:	d101      	bne.n	801bef6 <dir_next+0xea>
 801bef2:	2302      	movs	r3, #2
 801bef4:	e05c      	b.n	801bfb0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bef6:	697b      	ldr	r3, [r7, #20]
 801bef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801befc:	d101      	bne.n	801bf02 <dir_next+0xf6>
 801befe:	2301      	movs	r3, #1
 801bf00:	e056      	b.n	801bfb0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801bf02:	68f8      	ldr	r0, [r7, #12]
 801bf04:	f7ff fad6 	bl	801b4b4 <sync_window>
 801bf08:	4603      	mov	r3, r0
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d001      	beq.n	801bf12 <dir_next+0x106>
 801bf0e:	2301      	movs	r3, #1
 801bf10:	e04e      	b.n	801bfb0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801bf12:	68fb      	ldr	r3, [r7, #12]
 801bf14:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801bf18:	68fb      	ldr	r3, [r7, #12]
 801bf1a:	899b      	ldrh	r3, [r3, #12]
 801bf1c:	461a      	mov	r2, r3
 801bf1e:	2100      	movs	r1, #0
 801bf20:	f7ff f8ff 	bl	801b122 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bf24:	2300      	movs	r3, #0
 801bf26:	613b      	str	r3, [r7, #16]
 801bf28:	6979      	ldr	r1, [r7, #20]
 801bf2a:	68f8      	ldr	r0, [r7, #12]
 801bf2c:	f7ff fba4 	bl	801b678 <clust2sect>
 801bf30:	4602      	mov	r2, r0
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	635a      	str	r2, [r3, #52]	@ 0x34
 801bf36:	e012      	b.n	801bf5e <dir_next+0x152>
						fs->wflag = 1;
 801bf38:	68fb      	ldr	r3, [r7, #12]
 801bf3a:	2201      	movs	r2, #1
 801bf3c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801bf3e:	68f8      	ldr	r0, [r7, #12]
 801bf40:	f7ff fab8 	bl	801b4b4 <sync_window>
 801bf44:	4603      	mov	r3, r0
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d001      	beq.n	801bf4e <dir_next+0x142>
 801bf4a:	2301      	movs	r3, #1
 801bf4c:	e030      	b.n	801bfb0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801bf4e:	693b      	ldr	r3, [r7, #16]
 801bf50:	3301      	adds	r3, #1
 801bf52:	613b      	str	r3, [r7, #16]
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bf58:	1c5a      	adds	r2, r3, #1
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	635a      	str	r2, [r3, #52]	@ 0x34
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	895b      	ldrh	r3, [r3, #10]
 801bf62:	461a      	mov	r2, r3
 801bf64:	693b      	ldr	r3, [r7, #16]
 801bf66:	4293      	cmp	r3, r2
 801bf68:	d3e6      	bcc.n	801bf38 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bf6e:	693b      	ldr	r3, [r7, #16]
 801bf70:	1ad2      	subs	r2, r2, r3
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	697a      	ldr	r2, [r7, #20]
 801bf7a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801bf7c:	6979      	ldr	r1, [r7, #20]
 801bf7e:	68f8      	ldr	r0, [r7, #12]
 801bf80:	f7ff fb7a 	bl	801b678 <clust2sect>
 801bf84:	4602      	mov	r2, r0
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	68ba      	ldr	r2, [r7, #8]
 801bf8e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bf90:	68fb      	ldr	r3, [r7, #12]
 801bf92:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bf96:	68fb      	ldr	r3, [r7, #12]
 801bf98:	899b      	ldrh	r3, [r3, #12]
 801bf9a:	461a      	mov	r2, r3
 801bf9c:	68bb      	ldr	r3, [r7, #8]
 801bf9e:	fbb3 f0f2 	udiv	r0, r3, r2
 801bfa2:	fb00 f202 	mul.w	r2, r0, r2
 801bfa6:	1a9b      	subs	r3, r3, r2
 801bfa8:	18ca      	adds	r2, r1, r3
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bfae:	2300      	movs	r3, #0
}
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	3718      	adds	r7, #24
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	bd80      	pop	{r7, pc}

0801bfb8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bfb8:	b580      	push	{r7, lr}
 801bfba:	b086      	sub	sp, #24
 801bfbc:	af00      	add	r7, sp, #0
 801bfbe:	6078      	str	r0, [r7, #4]
 801bfc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bfc8:	2100      	movs	r1, #0
 801bfca:	6878      	ldr	r0, [r7, #4]
 801bfcc:	f7ff fe95 	bl	801bcfa <dir_sdi>
 801bfd0:	4603      	mov	r3, r0
 801bfd2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bfd4:	7dfb      	ldrb	r3, [r7, #23]
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	d12b      	bne.n	801c032 <dir_alloc+0x7a>
		n = 0;
 801bfda:	2300      	movs	r3, #0
 801bfdc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	69db      	ldr	r3, [r3, #28]
 801bfe2:	4619      	mov	r1, r3
 801bfe4:	68f8      	ldr	r0, [r7, #12]
 801bfe6:	f7ff faa9 	bl	801b53c <move_window>
 801bfea:	4603      	mov	r3, r0
 801bfec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bfee:	7dfb      	ldrb	r3, [r7, #23]
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d11d      	bne.n	801c030 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	6a1b      	ldr	r3, [r3, #32]
 801bff8:	781b      	ldrb	r3, [r3, #0]
 801bffa:	2be5      	cmp	r3, #229	@ 0xe5
 801bffc:	d004      	beq.n	801c008 <dir_alloc+0x50>
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	6a1b      	ldr	r3, [r3, #32]
 801c002:	781b      	ldrb	r3, [r3, #0]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d107      	bne.n	801c018 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801c008:	693b      	ldr	r3, [r7, #16]
 801c00a:	3301      	adds	r3, #1
 801c00c:	613b      	str	r3, [r7, #16]
 801c00e:	693a      	ldr	r2, [r7, #16]
 801c010:	683b      	ldr	r3, [r7, #0]
 801c012:	429a      	cmp	r2, r3
 801c014:	d102      	bne.n	801c01c <dir_alloc+0x64>
 801c016:	e00c      	b.n	801c032 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801c018:	2300      	movs	r3, #0
 801c01a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801c01c:	2101      	movs	r1, #1
 801c01e:	6878      	ldr	r0, [r7, #4]
 801c020:	f7ff fef4 	bl	801be0c <dir_next>
 801c024:	4603      	mov	r3, r0
 801c026:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801c028:	7dfb      	ldrb	r3, [r7, #23]
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d0d7      	beq.n	801bfde <dir_alloc+0x26>
 801c02e:	e000      	b.n	801c032 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801c030:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801c032:	7dfb      	ldrb	r3, [r7, #23]
 801c034:	2b04      	cmp	r3, #4
 801c036:	d101      	bne.n	801c03c <dir_alloc+0x84>
 801c038:	2307      	movs	r3, #7
 801c03a:	75fb      	strb	r3, [r7, #23]
	return res;
 801c03c:	7dfb      	ldrb	r3, [r7, #23]
}
 801c03e:	4618      	mov	r0, r3
 801c040:	3718      	adds	r7, #24
 801c042:	46bd      	mov	sp, r7
 801c044:	bd80      	pop	{r7, pc}

0801c046 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801c046:	b580      	push	{r7, lr}
 801c048:	b084      	sub	sp, #16
 801c04a:	af00      	add	r7, sp, #0
 801c04c:	6078      	str	r0, [r7, #4]
 801c04e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801c050:	683b      	ldr	r3, [r7, #0]
 801c052:	331a      	adds	r3, #26
 801c054:	4618      	mov	r0, r3
 801c056:	f7fe ffc1 	bl	801afdc <ld_word>
 801c05a:	4603      	mov	r3, r0
 801c05c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	781b      	ldrb	r3, [r3, #0]
 801c062:	2b03      	cmp	r3, #3
 801c064:	d109      	bne.n	801c07a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801c066:	683b      	ldr	r3, [r7, #0]
 801c068:	3314      	adds	r3, #20
 801c06a:	4618      	mov	r0, r3
 801c06c:	f7fe ffb6 	bl	801afdc <ld_word>
 801c070:	4603      	mov	r3, r0
 801c072:	041b      	lsls	r3, r3, #16
 801c074:	68fa      	ldr	r2, [r7, #12]
 801c076:	4313      	orrs	r3, r2
 801c078:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801c07a:	68fb      	ldr	r3, [r7, #12]
}
 801c07c:	4618      	mov	r0, r3
 801c07e:	3710      	adds	r7, #16
 801c080:	46bd      	mov	sp, r7
 801c082:	bd80      	pop	{r7, pc}

0801c084 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801c084:	b580      	push	{r7, lr}
 801c086:	b084      	sub	sp, #16
 801c088:	af00      	add	r7, sp, #0
 801c08a:	60f8      	str	r0, [r7, #12]
 801c08c:	60b9      	str	r1, [r7, #8]
 801c08e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801c090:	68bb      	ldr	r3, [r7, #8]
 801c092:	331a      	adds	r3, #26
 801c094:	687a      	ldr	r2, [r7, #4]
 801c096:	b292      	uxth	r2, r2
 801c098:	4611      	mov	r1, r2
 801c09a:	4618      	mov	r0, r3
 801c09c:	f7fe ffd9 	bl	801b052 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801c0a0:	68fb      	ldr	r3, [r7, #12]
 801c0a2:	781b      	ldrb	r3, [r3, #0]
 801c0a4:	2b03      	cmp	r3, #3
 801c0a6:	d109      	bne.n	801c0bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801c0a8:	68bb      	ldr	r3, [r7, #8]
 801c0aa:	f103 0214 	add.w	r2, r3, #20
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	0c1b      	lsrs	r3, r3, #16
 801c0b2:	b29b      	uxth	r3, r3
 801c0b4:	4619      	mov	r1, r3
 801c0b6:	4610      	mov	r0, r2
 801c0b8:	f7fe ffcb 	bl	801b052 <st_word>
	}
}
 801c0bc:	bf00      	nop
 801c0be:	3710      	adds	r7, #16
 801c0c0:	46bd      	mov	sp, r7
 801c0c2:	bd80      	pop	{r7, pc}

0801c0c4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801c0c4:	b590      	push	{r4, r7, lr}
 801c0c6:	b087      	sub	sp, #28
 801c0c8:	af00      	add	r7, sp, #0
 801c0ca:	6078      	str	r0, [r7, #4]
 801c0cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801c0ce:	683b      	ldr	r3, [r7, #0]
 801c0d0:	331a      	adds	r3, #26
 801c0d2:	4618      	mov	r0, r3
 801c0d4:	f7fe ff82 	bl	801afdc <ld_word>
 801c0d8:	4603      	mov	r3, r0
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d001      	beq.n	801c0e2 <cmp_lfn+0x1e>
 801c0de:	2300      	movs	r3, #0
 801c0e0:	e059      	b.n	801c196 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801c0e2:	683b      	ldr	r3, [r7, #0]
 801c0e4:	781b      	ldrb	r3, [r3, #0]
 801c0e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c0ea:	1e5a      	subs	r2, r3, #1
 801c0ec:	4613      	mov	r3, r2
 801c0ee:	005b      	lsls	r3, r3, #1
 801c0f0:	4413      	add	r3, r2
 801c0f2:	009b      	lsls	r3, r3, #2
 801c0f4:	4413      	add	r3, r2
 801c0f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c0f8:	2301      	movs	r3, #1
 801c0fa:	81fb      	strh	r3, [r7, #14]
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	613b      	str	r3, [r7, #16]
 801c100:	e033      	b.n	801c16a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c102:	4a27      	ldr	r2, [pc, #156]	@ (801c1a0 <cmp_lfn+0xdc>)
 801c104:	693b      	ldr	r3, [r7, #16]
 801c106:	4413      	add	r3, r2
 801c108:	781b      	ldrb	r3, [r3, #0]
 801c10a:	461a      	mov	r2, r3
 801c10c:	683b      	ldr	r3, [r7, #0]
 801c10e:	4413      	add	r3, r2
 801c110:	4618      	mov	r0, r3
 801c112:	f7fe ff63 	bl	801afdc <ld_word>
 801c116:	4603      	mov	r3, r0
 801c118:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c11a:	89fb      	ldrh	r3, [r7, #14]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d01a      	beq.n	801c156 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801c120:	697b      	ldr	r3, [r7, #20]
 801c122:	2bfe      	cmp	r3, #254	@ 0xfe
 801c124:	d812      	bhi.n	801c14c <cmp_lfn+0x88>
 801c126:	89bb      	ldrh	r3, [r7, #12]
 801c128:	4618      	mov	r0, r3
 801c12a:	f001 ff71 	bl	801e010 <ff_wtoupper>
 801c12e:	4603      	mov	r3, r0
 801c130:	461c      	mov	r4, r3
 801c132:	697b      	ldr	r3, [r7, #20]
 801c134:	1c5a      	adds	r2, r3, #1
 801c136:	617a      	str	r2, [r7, #20]
 801c138:	005b      	lsls	r3, r3, #1
 801c13a:	687a      	ldr	r2, [r7, #4]
 801c13c:	4413      	add	r3, r2
 801c13e:	881b      	ldrh	r3, [r3, #0]
 801c140:	4618      	mov	r0, r3
 801c142:	f001 ff65 	bl	801e010 <ff_wtoupper>
 801c146:	4603      	mov	r3, r0
 801c148:	429c      	cmp	r4, r3
 801c14a:	d001      	beq.n	801c150 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801c14c:	2300      	movs	r3, #0
 801c14e:	e022      	b.n	801c196 <cmp_lfn+0xd2>
			}
			wc = uc;
 801c150:	89bb      	ldrh	r3, [r7, #12]
 801c152:	81fb      	strh	r3, [r7, #14]
 801c154:	e006      	b.n	801c164 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c156:	89bb      	ldrh	r3, [r7, #12]
 801c158:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c15c:	4293      	cmp	r3, r2
 801c15e:	d001      	beq.n	801c164 <cmp_lfn+0xa0>
 801c160:	2300      	movs	r3, #0
 801c162:	e018      	b.n	801c196 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c164:	693b      	ldr	r3, [r7, #16]
 801c166:	3301      	adds	r3, #1
 801c168:	613b      	str	r3, [r7, #16]
 801c16a:	693b      	ldr	r3, [r7, #16]
 801c16c:	2b0c      	cmp	r3, #12
 801c16e:	d9c8      	bls.n	801c102 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801c170:	683b      	ldr	r3, [r7, #0]
 801c172:	781b      	ldrb	r3, [r3, #0]
 801c174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d00b      	beq.n	801c194 <cmp_lfn+0xd0>
 801c17c:	89fb      	ldrh	r3, [r7, #14]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d008      	beq.n	801c194 <cmp_lfn+0xd0>
 801c182:	697b      	ldr	r3, [r7, #20]
 801c184:	005b      	lsls	r3, r3, #1
 801c186:	687a      	ldr	r2, [r7, #4]
 801c188:	4413      	add	r3, r2
 801c18a:	881b      	ldrh	r3, [r3, #0]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d001      	beq.n	801c194 <cmp_lfn+0xd0>
 801c190:	2300      	movs	r3, #0
 801c192:	e000      	b.n	801c196 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801c194:	2301      	movs	r3, #1
}
 801c196:	4618      	mov	r0, r3
 801c198:	371c      	adds	r7, #28
 801c19a:	46bd      	mov	sp, r7
 801c19c:	bd90      	pop	{r4, r7, pc}
 801c19e:	bf00      	nop
 801c1a0:	0801ecac 	.word	0x0801ecac

0801c1a4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801c1a4:	b580      	push	{r7, lr}
 801c1a6:	b086      	sub	sp, #24
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	6078      	str	r0, [r7, #4]
 801c1ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801c1ae:	683b      	ldr	r3, [r7, #0]
 801c1b0:	331a      	adds	r3, #26
 801c1b2:	4618      	mov	r0, r3
 801c1b4:	f7fe ff12 	bl	801afdc <ld_word>
 801c1b8:	4603      	mov	r3, r0
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d001      	beq.n	801c1c2 <pick_lfn+0x1e>
 801c1be:	2300      	movs	r3, #0
 801c1c0:	e04d      	b.n	801c25e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801c1c2:	683b      	ldr	r3, [r7, #0]
 801c1c4:	781b      	ldrb	r3, [r3, #0]
 801c1c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c1ca:	1e5a      	subs	r2, r3, #1
 801c1cc:	4613      	mov	r3, r2
 801c1ce:	005b      	lsls	r3, r3, #1
 801c1d0:	4413      	add	r3, r2
 801c1d2:	009b      	lsls	r3, r3, #2
 801c1d4:	4413      	add	r3, r2
 801c1d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c1d8:	2301      	movs	r3, #1
 801c1da:	81fb      	strh	r3, [r7, #14]
 801c1dc:	2300      	movs	r3, #0
 801c1de:	613b      	str	r3, [r7, #16]
 801c1e0:	e028      	b.n	801c234 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c1e2:	4a21      	ldr	r2, [pc, #132]	@ (801c268 <pick_lfn+0xc4>)
 801c1e4:	693b      	ldr	r3, [r7, #16]
 801c1e6:	4413      	add	r3, r2
 801c1e8:	781b      	ldrb	r3, [r3, #0]
 801c1ea:	461a      	mov	r2, r3
 801c1ec:	683b      	ldr	r3, [r7, #0]
 801c1ee:	4413      	add	r3, r2
 801c1f0:	4618      	mov	r0, r3
 801c1f2:	f7fe fef3 	bl	801afdc <ld_word>
 801c1f6:	4603      	mov	r3, r0
 801c1f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c1fa:	89fb      	ldrh	r3, [r7, #14]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d00f      	beq.n	801c220 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801c200:	697b      	ldr	r3, [r7, #20]
 801c202:	2bfe      	cmp	r3, #254	@ 0xfe
 801c204:	d901      	bls.n	801c20a <pick_lfn+0x66>
 801c206:	2300      	movs	r3, #0
 801c208:	e029      	b.n	801c25e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801c20a:	89bb      	ldrh	r3, [r7, #12]
 801c20c:	81fb      	strh	r3, [r7, #14]
 801c20e:	697b      	ldr	r3, [r7, #20]
 801c210:	1c5a      	adds	r2, r3, #1
 801c212:	617a      	str	r2, [r7, #20]
 801c214:	005b      	lsls	r3, r3, #1
 801c216:	687a      	ldr	r2, [r7, #4]
 801c218:	4413      	add	r3, r2
 801c21a:	89fa      	ldrh	r2, [r7, #14]
 801c21c:	801a      	strh	r2, [r3, #0]
 801c21e:	e006      	b.n	801c22e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c220:	89bb      	ldrh	r3, [r7, #12]
 801c222:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c226:	4293      	cmp	r3, r2
 801c228:	d001      	beq.n	801c22e <pick_lfn+0x8a>
 801c22a:	2300      	movs	r3, #0
 801c22c:	e017      	b.n	801c25e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c22e:	693b      	ldr	r3, [r7, #16]
 801c230:	3301      	adds	r3, #1
 801c232:	613b      	str	r3, [r7, #16]
 801c234:	693b      	ldr	r3, [r7, #16]
 801c236:	2b0c      	cmp	r3, #12
 801c238:	d9d3      	bls.n	801c1e2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801c23a:	683b      	ldr	r3, [r7, #0]
 801c23c:	781b      	ldrb	r3, [r3, #0]
 801c23e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c242:	2b00      	cmp	r3, #0
 801c244:	d00a      	beq.n	801c25c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801c246:	697b      	ldr	r3, [r7, #20]
 801c248:	2bfe      	cmp	r3, #254	@ 0xfe
 801c24a:	d901      	bls.n	801c250 <pick_lfn+0xac>
 801c24c:	2300      	movs	r3, #0
 801c24e:	e006      	b.n	801c25e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801c250:	697b      	ldr	r3, [r7, #20]
 801c252:	005b      	lsls	r3, r3, #1
 801c254:	687a      	ldr	r2, [r7, #4]
 801c256:	4413      	add	r3, r2
 801c258:	2200      	movs	r2, #0
 801c25a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801c25c:	2301      	movs	r3, #1
}
 801c25e:	4618      	mov	r0, r3
 801c260:	3718      	adds	r7, #24
 801c262:	46bd      	mov	sp, r7
 801c264:	bd80      	pop	{r7, pc}
 801c266:	bf00      	nop
 801c268:	0801ecac 	.word	0x0801ecac

0801c26c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801c26c:	b580      	push	{r7, lr}
 801c26e:	b088      	sub	sp, #32
 801c270:	af00      	add	r7, sp, #0
 801c272:	60f8      	str	r0, [r7, #12]
 801c274:	60b9      	str	r1, [r7, #8]
 801c276:	4611      	mov	r1, r2
 801c278:	461a      	mov	r2, r3
 801c27a:	460b      	mov	r3, r1
 801c27c:	71fb      	strb	r3, [r7, #7]
 801c27e:	4613      	mov	r3, r2
 801c280:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801c282:	68bb      	ldr	r3, [r7, #8]
 801c284:	330d      	adds	r3, #13
 801c286:	79ba      	ldrb	r2, [r7, #6]
 801c288:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801c28a:	68bb      	ldr	r3, [r7, #8]
 801c28c:	330b      	adds	r3, #11
 801c28e:	220f      	movs	r2, #15
 801c290:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801c292:	68bb      	ldr	r3, [r7, #8]
 801c294:	330c      	adds	r3, #12
 801c296:	2200      	movs	r2, #0
 801c298:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801c29a:	68bb      	ldr	r3, [r7, #8]
 801c29c:	331a      	adds	r3, #26
 801c29e:	2100      	movs	r1, #0
 801c2a0:	4618      	mov	r0, r3
 801c2a2:	f7fe fed6 	bl	801b052 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801c2a6:	79fb      	ldrb	r3, [r7, #7]
 801c2a8:	1e5a      	subs	r2, r3, #1
 801c2aa:	4613      	mov	r3, r2
 801c2ac:	005b      	lsls	r3, r3, #1
 801c2ae:	4413      	add	r3, r2
 801c2b0:	009b      	lsls	r3, r3, #2
 801c2b2:	4413      	add	r3, r2
 801c2b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801c2b6:	2300      	movs	r3, #0
 801c2b8:	82fb      	strh	r3, [r7, #22]
 801c2ba:	2300      	movs	r3, #0
 801c2bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801c2be:	8afb      	ldrh	r3, [r7, #22]
 801c2c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c2c4:	4293      	cmp	r3, r2
 801c2c6:	d007      	beq.n	801c2d8 <put_lfn+0x6c>
 801c2c8:	69fb      	ldr	r3, [r7, #28]
 801c2ca:	1c5a      	adds	r2, r3, #1
 801c2cc:	61fa      	str	r2, [r7, #28]
 801c2ce:	005b      	lsls	r3, r3, #1
 801c2d0:	68fa      	ldr	r2, [r7, #12]
 801c2d2:	4413      	add	r3, r2
 801c2d4:	881b      	ldrh	r3, [r3, #0]
 801c2d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801c2d8:	4a17      	ldr	r2, [pc, #92]	@ (801c338 <put_lfn+0xcc>)
 801c2da:	69bb      	ldr	r3, [r7, #24]
 801c2dc:	4413      	add	r3, r2
 801c2de:	781b      	ldrb	r3, [r3, #0]
 801c2e0:	461a      	mov	r2, r3
 801c2e2:	68bb      	ldr	r3, [r7, #8]
 801c2e4:	4413      	add	r3, r2
 801c2e6:	8afa      	ldrh	r2, [r7, #22]
 801c2e8:	4611      	mov	r1, r2
 801c2ea:	4618      	mov	r0, r3
 801c2ec:	f7fe feb1 	bl	801b052 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801c2f0:	8afb      	ldrh	r3, [r7, #22]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d102      	bne.n	801c2fc <put_lfn+0x90>
 801c2f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c2fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801c2fc:	69bb      	ldr	r3, [r7, #24]
 801c2fe:	3301      	adds	r3, #1
 801c300:	61bb      	str	r3, [r7, #24]
 801c302:	69bb      	ldr	r3, [r7, #24]
 801c304:	2b0c      	cmp	r3, #12
 801c306:	d9da      	bls.n	801c2be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801c308:	8afb      	ldrh	r3, [r7, #22]
 801c30a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c30e:	4293      	cmp	r3, r2
 801c310:	d006      	beq.n	801c320 <put_lfn+0xb4>
 801c312:	69fb      	ldr	r3, [r7, #28]
 801c314:	005b      	lsls	r3, r3, #1
 801c316:	68fa      	ldr	r2, [r7, #12]
 801c318:	4413      	add	r3, r2
 801c31a:	881b      	ldrh	r3, [r3, #0]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d103      	bne.n	801c328 <put_lfn+0xbc>
 801c320:	79fb      	ldrb	r3, [r7, #7]
 801c322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c326:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801c328:	68bb      	ldr	r3, [r7, #8]
 801c32a:	79fa      	ldrb	r2, [r7, #7]
 801c32c:	701a      	strb	r2, [r3, #0]
}
 801c32e:	bf00      	nop
 801c330:	3720      	adds	r7, #32
 801c332:	46bd      	mov	sp, r7
 801c334:	bd80      	pop	{r7, pc}
 801c336:	bf00      	nop
 801c338:	0801ecac 	.word	0x0801ecac

0801c33c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801c33c:	b580      	push	{r7, lr}
 801c33e:	b08c      	sub	sp, #48	@ 0x30
 801c340:	af00      	add	r7, sp, #0
 801c342:	60f8      	str	r0, [r7, #12]
 801c344:	60b9      	str	r1, [r7, #8]
 801c346:	607a      	str	r2, [r7, #4]
 801c348:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801c34a:	220b      	movs	r2, #11
 801c34c:	68b9      	ldr	r1, [r7, #8]
 801c34e:	68f8      	ldr	r0, [r7, #12]
 801c350:	f7fe fec6 	bl	801b0e0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801c354:	683b      	ldr	r3, [r7, #0]
 801c356:	2b05      	cmp	r3, #5
 801c358:	d929      	bls.n	801c3ae <gen_numname+0x72>
		sr = seq;
 801c35a:	683b      	ldr	r3, [r7, #0]
 801c35c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801c35e:	e020      	b.n	801c3a2 <gen_numname+0x66>
			wc = *lfn++;
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	1c9a      	adds	r2, r3, #2
 801c364:	607a      	str	r2, [r7, #4]
 801c366:	881b      	ldrh	r3, [r3, #0]
 801c368:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801c36a:	2300      	movs	r3, #0
 801c36c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c36e:	e015      	b.n	801c39c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801c370:	69fb      	ldr	r3, [r7, #28]
 801c372:	005a      	lsls	r2, r3, #1
 801c374:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c376:	f003 0301 	and.w	r3, r3, #1
 801c37a:	4413      	add	r3, r2
 801c37c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801c37e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c380:	085b      	lsrs	r3, r3, #1
 801c382:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801c384:	69fb      	ldr	r3, [r7, #28]
 801c386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d003      	beq.n	801c396 <gen_numname+0x5a>
 801c38e:	69fa      	ldr	r2, [r7, #28]
 801c390:	4b30      	ldr	r3, [pc, #192]	@ (801c454 <gen_numname+0x118>)
 801c392:	4053      	eors	r3, r2
 801c394:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801c396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c398:	3301      	adds	r3, #1
 801c39a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c39e:	2b0f      	cmp	r3, #15
 801c3a0:	d9e6      	bls.n	801c370 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	881b      	ldrh	r3, [r3, #0]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d1da      	bne.n	801c360 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801c3aa:	69fb      	ldr	r3, [r7, #28]
 801c3ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801c3ae:	2307      	movs	r3, #7
 801c3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801c3b2:	683b      	ldr	r3, [r7, #0]
 801c3b4:	b2db      	uxtb	r3, r3
 801c3b6:	f003 030f 	and.w	r3, r3, #15
 801c3ba:	b2db      	uxtb	r3, r3
 801c3bc:	3330      	adds	r3, #48	@ 0x30
 801c3be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801c3c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3c6:	2b39      	cmp	r3, #57	@ 0x39
 801c3c8:	d904      	bls.n	801c3d4 <gen_numname+0x98>
 801c3ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c3ce:	3307      	adds	r3, #7
 801c3d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801c3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3d6:	1e5a      	subs	r2, r3, #1
 801c3d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c3da:	3330      	adds	r3, #48	@ 0x30
 801c3dc:	443b      	add	r3, r7
 801c3de:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801c3e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801c3e6:	683b      	ldr	r3, [r7, #0]
 801c3e8:	091b      	lsrs	r3, r3, #4
 801c3ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 801c3ec:	683b      	ldr	r3, [r7, #0]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d1df      	bne.n	801c3b2 <gen_numname+0x76>
	ns[i] = '~';
 801c3f2:	f107 0214 	add.w	r2, r7, #20
 801c3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3f8:	4413      	add	r3, r2
 801c3fa:	227e      	movs	r2, #126	@ 0x7e
 801c3fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c3fe:	2300      	movs	r3, #0
 801c400:	627b      	str	r3, [r7, #36]	@ 0x24
 801c402:	e002      	b.n	801c40a <gen_numname+0xce>
 801c404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c406:	3301      	adds	r3, #1
 801c408:	627b      	str	r3, [r7, #36]	@ 0x24
 801c40a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c40e:	429a      	cmp	r2, r3
 801c410:	d205      	bcs.n	801c41e <gen_numname+0xe2>
 801c412:	68fa      	ldr	r2, [r7, #12]
 801c414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c416:	4413      	add	r3, r2
 801c418:	781b      	ldrb	r3, [r3, #0]
 801c41a:	2b20      	cmp	r3, #32
 801c41c:	d1f2      	bne.n	801c404 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c420:	2b07      	cmp	r3, #7
 801c422:	d807      	bhi.n	801c434 <gen_numname+0xf8>
 801c424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c426:	1c5a      	adds	r2, r3, #1
 801c428:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c42a:	3330      	adds	r3, #48	@ 0x30
 801c42c:	443b      	add	r3, r7
 801c42e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801c432:	e000      	b.n	801c436 <gen_numname+0xfa>
 801c434:	2120      	movs	r1, #32
 801c436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c438:	1c5a      	adds	r2, r3, #1
 801c43a:	627a      	str	r2, [r7, #36]	@ 0x24
 801c43c:	68fa      	ldr	r2, [r7, #12]
 801c43e:	4413      	add	r3, r2
 801c440:	460a      	mov	r2, r1
 801c442:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801c444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c446:	2b07      	cmp	r3, #7
 801c448:	d9e9      	bls.n	801c41e <gen_numname+0xe2>
}
 801c44a:	bf00      	nop
 801c44c:	bf00      	nop
 801c44e:	3730      	adds	r7, #48	@ 0x30
 801c450:	46bd      	mov	sp, r7
 801c452:	bd80      	pop	{r7, pc}
 801c454:	00011021 	.word	0x00011021

0801c458 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801c458:	b480      	push	{r7}
 801c45a:	b085      	sub	sp, #20
 801c45c:	af00      	add	r7, sp, #0
 801c45e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801c460:	2300      	movs	r3, #0
 801c462:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801c464:	230b      	movs	r3, #11
 801c466:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c468:	7bfb      	ldrb	r3, [r7, #15]
 801c46a:	b2da      	uxtb	r2, r3
 801c46c:	0852      	lsrs	r2, r2, #1
 801c46e:	01db      	lsls	r3, r3, #7
 801c470:	4313      	orrs	r3, r2
 801c472:	b2da      	uxtb	r2, r3
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	1c59      	adds	r1, r3, #1
 801c478:	6079      	str	r1, [r7, #4]
 801c47a:	781b      	ldrb	r3, [r3, #0]
 801c47c:	4413      	add	r3, r2
 801c47e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c480:	68bb      	ldr	r3, [r7, #8]
 801c482:	3b01      	subs	r3, #1
 801c484:	60bb      	str	r3, [r7, #8]
 801c486:	68bb      	ldr	r3, [r7, #8]
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d1ed      	bne.n	801c468 <sum_sfn+0x10>
	return sum;
 801c48c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c48e:	4618      	mov	r0, r3
 801c490:	3714      	adds	r7, #20
 801c492:	46bd      	mov	sp, r7
 801c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c498:	4770      	bx	lr

0801c49a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c49a:	b580      	push	{r7, lr}
 801c49c:	b086      	sub	sp, #24
 801c49e:	af00      	add	r7, sp, #0
 801c4a0:	6078      	str	r0, [r7, #4]
 801c4a2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c4a4:	2304      	movs	r3, #4
 801c4a6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c4ae:	23ff      	movs	r3, #255	@ 0xff
 801c4b0:	757b      	strb	r3, [r7, #21]
 801c4b2:	23ff      	movs	r3, #255	@ 0xff
 801c4b4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c4b6:	e081      	b.n	801c5bc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	69db      	ldr	r3, [r3, #28]
 801c4bc:	4619      	mov	r1, r3
 801c4be:	6938      	ldr	r0, [r7, #16]
 801c4c0:	f7ff f83c 	bl	801b53c <move_window>
 801c4c4:	4603      	mov	r3, r0
 801c4c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c4c8:	7dfb      	ldrb	r3, [r7, #23]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d17c      	bne.n	801c5c8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	6a1b      	ldr	r3, [r3, #32]
 801c4d2:	781b      	ldrb	r3, [r3, #0]
 801c4d4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c4d6:	7dbb      	ldrb	r3, [r7, #22]
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d102      	bne.n	801c4e2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c4dc:	2304      	movs	r3, #4
 801c4de:	75fb      	strb	r3, [r7, #23]
 801c4e0:	e077      	b.n	801c5d2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	6a1b      	ldr	r3, [r3, #32]
 801c4e6:	330b      	adds	r3, #11
 801c4e8:	781b      	ldrb	r3, [r3, #0]
 801c4ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c4ee:	73fb      	strb	r3, [r7, #15]
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	7bfa      	ldrb	r2, [r7, #15]
 801c4f4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c4f6:	7dbb      	ldrb	r3, [r7, #22]
 801c4f8:	2be5      	cmp	r3, #229	@ 0xe5
 801c4fa:	d00e      	beq.n	801c51a <dir_read+0x80>
 801c4fc:	7dbb      	ldrb	r3, [r7, #22]
 801c4fe:	2b2e      	cmp	r3, #46	@ 0x2e
 801c500:	d00b      	beq.n	801c51a <dir_read+0x80>
 801c502:	7bfb      	ldrb	r3, [r7, #15]
 801c504:	f023 0320 	bic.w	r3, r3, #32
 801c508:	2b08      	cmp	r3, #8
 801c50a:	bf0c      	ite	eq
 801c50c:	2301      	moveq	r3, #1
 801c50e:	2300      	movne	r3, #0
 801c510:	b2db      	uxtb	r3, r3
 801c512:	461a      	mov	r2, r3
 801c514:	683b      	ldr	r3, [r7, #0]
 801c516:	4293      	cmp	r3, r2
 801c518:	d002      	beq.n	801c520 <dir_read+0x86>
				ord = 0xFF;
 801c51a:	23ff      	movs	r3, #255	@ 0xff
 801c51c:	757b      	strb	r3, [r7, #21]
 801c51e:	e044      	b.n	801c5aa <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c520:	7bfb      	ldrb	r3, [r7, #15]
 801c522:	2b0f      	cmp	r3, #15
 801c524:	d12f      	bne.n	801c586 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c526:	7dbb      	ldrb	r3, [r7, #22]
 801c528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d00d      	beq.n	801c54c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	6a1b      	ldr	r3, [r3, #32]
 801c534:	7b5b      	ldrb	r3, [r3, #13]
 801c536:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c538:	7dbb      	ldrb	r3, [r7, #22]
 801c53a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c53e:	75bb      	strb	r3, [r7, #22]
 801c540:	7dbb      	ldrb	r3, [r7, #22]
 801c542:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	695a      	ldr	r2, [r3, #20]
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c54c:	7dba      	ldrb	r2, [r7, #22]
 801c54e:	7d7b      	ldrb	r3, [r7, #21]
 801c550:	429a      	cmp	r2, r3
 801c552:	d115      	bne.n	801c580 <dir_read+0xe6>
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	6a1b      	ldr	r3, [r3, #32]
 801c558:	330d      	adds	r3, #13
 801c55a:	781b      	ldrb	r3, [r3, #0]
 801c55c:	7d3a      	ldrb	r2, [r7, #20]
 801c55e:	429a      	cmp	r2, r3
 801c560:	d10e      	bne.n	801c580 <dir_read+0xe6>
 801c562:	693b      	ldr	r3, [r7, #16]
 801c564:	691a      	ldr	r2, [r3, #16]
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	6a1b      	ldr	r3, [r3, #32]
 801c56a:	4619      	mov	r1, r3
 801c56c:	4610      	mov	r0, r2
 801c56e:	f7ff fe19 	bl	801c1a4 <pick_lfn>
 801c572:	4603      	mov	r3, r0
 801c574:	2b00      	cmp	r3, #0
 801c576:	d003      	beq.n	801c580 <dir_read+0xe6>
 801c578:	7d7b      	ldrb	r3, [r7, #21]
 801c57a:	3b01      	subs	r3, #1
 801c57c:	b2db      	uxtb	r3, r3
 801c57e:	e000      	b.n	801c582 <dir_read+0xe8>
 801c580:	23ff      	movs	r3, #255	@ 0xff
 801c582:	757b      	strb	r3, [r7, #21]
 801c584:	e011      	b.n	801c5aa <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c586:	7d7b      	ldrb	r3, [r7, #21]
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d109      	bne.n	801c5a0 <dir_read+0x106>
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	6a1b      	ldr	r3, [r3, #32]
 801c590:	4618      	mov	r0, r3
 801c592:	f7ff ff61 	bl	801c458 <sum_sfn>
 801c596:	4603      	mov	r3, r0
 801c598:	461a      	mov	r2, r3
 801c59a:	7d3b      	ldrb	r3, [r7, #20]
 801c59c:	4293      	cmp	r3, r2
 801c59e:	d015      	beq.n	801c5cc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	f04f 32ff 	mov.w	r2, #4294967295
 801c5a6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c5a8:	e010      	b.n	801c5cc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c5aa:	2100      	movs	r1, #0
 801c5ac:	6878      	ldr	r0, [r7, #4]
 801c5ae:	f7ff fc2d 	bl	801be0c <dir_next>
 801c5b2:	4603      	mov	r3, r0
 801c5b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c5b6:	7dfb      	ldrb	r3, [r7, #23]
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d109      	bne.n	801c5d0 <dir_read+0x136>
	while (dp->sect) {
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	69db      	ldr	r3, [r3, #28]
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	f47f af79 	bne.w	801c4b8 <dir_read+0x1e>
 801c5c6:	e004      	b.n	801c5d2 <dir_read+0x138>
		if (res != FR_OK) break;
 801c5c8:	bf00      	nop
 801c5ca:	e002      	b.n	801c5d2 <dir_read+0x138>
					break;
 801c5cc:	bf00      	nop
 801c5ce:	e000      	b.n	801c5d2 <dir_read+0x138>
		if (res != FR_OK) break;
 801c5d0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c5d2:	7dfb      	ldrb	r3, [r7, #23]
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d002      	beq.n	801c5de <dir_read+0x144>
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	2200      	movs	r2, #0
 801c5dc:	61da      	str	r2, [r3, #28]
	return res;
 801c5de:	7dfb      	ldrb	r3, [r7, #23]
}
 801c5e0:	4618      	mov	r0, r3
 801c5e2:	3718      	adds	r7, #24
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	bd80      	pop	{r7, pc}

0801c5e8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c5e8:	b580      	push	{r7, lr}
 801c5ea:	b086      	sub	sp, #24
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c5f6:	2100      	movs	r1, #0
 801c5f8:	6878      	ldr	r0, [r7, #4]
 801c5fa:	f7ff fb7e 	bl	801bcfa <dir_sdi>
 801c5fe:	4603      	mov	r3, r0
 801c600:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c602:	7dfb      	ldrb	r3, [r7, #23]
 801c604:	2b00      	cmp	r3, #0
 801c606:	d001      	beq.n	801c60c <dir_find+0x24>
 801c608:	7dfb      	ldrb	r3, [r7, #23]
 801c60a:	e0a9      	b.n	801c760 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c60c:	23ff      	movs	r3, #255	@ 0xff
 801c60e:	753b      	strb	r3, [r7, #20]
 801c610:	7d3b      	ldrb	r3, [r7, #20]
 801c612:	757b      	strb	r3, [r7, #21]
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	f04f 32ff 	mov.w	r2, #4294967295
 801c61a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	69db      	ldr	r3, [r3, #28]
 801c620:	4619      	mov	r1, r3
 801c622:	6938      	ldr	r0, [r7, #16]
 801c624:	f7fe ff8a 	bl	801b53c <move_window>
 801c628:	4603      	mov	r3, r0
 801c62a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c62c:	7dfb      	ldrb	r3, [r7, #23]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	f040 8090 	bne.w	801c754 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	6a1b      	ldr	r3, [r3, #32]
 801c638:	781b      	ldrb	r3, [r3, #0]
 801c63a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c63c:	7dbb      	ldrb	r3, [r7, #22]
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d102      	bne.n	801c648 <dir_find+0x60>
 801c642:	2304      	movs	r3, #4
 801c644:	75fb      	strb	r3, [r7, #23]
 801c646:	e08a      	b.n	801c75e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	6a1b      	ldr	r3, [r3, #32]
 801c64c:	330b      	adds	r3, #11
 801c64e:	781b      	ldrb	r3, [r3, #0]
 801c650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c654:	73fb      	strb	r3, [r7, #15]
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	7bfa      	ldrb	r2, [r7, #15]
 801c65a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c65c:	7dbb      	ldrb	r3, [r7, #22]
 801c65e:	2be5      	cmp	r3, #229	@ 0xe5
 801c660:	d007      	beq.n	801c672 <dir_find+0x8a>
 801c662:	7bfb      	ldrb	r3, [r7, #15]
 801c664:	f003 0308 	and.w	r3, r3, #8
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d009      	beq.n	801c680 <dir_find+0x98>
 801c66c:	7bfb      	ldrb	r3, [r7, #15]
 801c66e:	2b0f      	cmp	r3, #15
 801c670:	d006      	beq.n	801c680 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c672:	23ff      	movs	r3, #255	@ 0xff
 801c674:	757b      	strb	r3, [r7, #21]
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	f04f 32ff 	mov.w	r2, #4294967295
 801c67c:	631a      	str	r2, [r3, #48]	@ 0x30
 801c67e:	e05e      	b.n	801c73e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c680:	7bfb      	ldrb	r3, [r7, #15]
 801c682:	2b0f      	cmp	r3, #15
 801c684:	d136      	bne.n	801c6f4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c68c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c690:	2b00      	cmp	r3, #0
 801c692:	d154      	bne.n	801c73e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c694:	7dbb      	ldrb	r3, [r7, #22]
 801c696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c69a:	2b00      	cmp	r3, #0
 801c69c:	d00d      	beq.n	801c6ba <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	6a1b      	ldr	r3, [r3, #32]
 801c6a2:	7b5b      	ldrb	r3, [r3, #13]
 801c6a4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c6a6:	7dbb      	ldrb	r3, [r7, #22]
 801c6a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c6ac:	75bb      	strb	r3, [r7, #22]
 801c6ae:	7dbb      	ldrb	r3, [r7, #22]
 801c6b0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	695a      	ldr	r2, [r3, #20]
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c6ba:	7dba      	ldrb	r2, [r7, #22]
 801c6bc:	7d7b      	ldrb	r3, [r7, #21]
 801c6be:	429a      	cmp	r2, r3
 801c6c0:	d115      	bne.n	801c6ee <dir_find+0x106>
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	6a1b      	ldr	r3, [r3, #32]
 801c6c6:	330d      	adds	r3, #13
 801c6c8:	781b      	ldrb	r3, [r3, #0]
 801c6ca:	7d3a      	ldrb	r2, [r7, #20]
 801c6cc:	429a      	cmp	r2, r3
 801c6ce:	d10e      	bne.n	801c6ee <dir_find+0x106>
 801c6d0:	693b      	ldr	r3, [r7, #16]
 801c6d2:	691a      	ldr	r2, [r3, #16]
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	6a1b      	ldr	r3, [r3, #32]
 801c6d8:	4619      	mov	r1, r3
 801c6da:	4610      	mov	r0, r2
 801c6dc:	f7ff fcf2 	bl	801c0c4 <cmp_lfn>
 801c6e0:	4603      	mov	r3, r0
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d003      	beq.n	801c6ee <dir_find+0x106>
 801c6e6:	7d7b      	ldrb	r3, [r7, #21]
 801c6e8:	3b01      	subs	r3, #1
 801c6ea:	b2db      	uxtb	r3, r3
 801c6ec:	e000      	b.n	801c6f0 <dir_find+0x108>
 801c6ee:	23ff      	movs	r3, #255	@ 0xff
 801c6f0:	757b      	strb	r3, [r7, #21]
 801c6f2:	e024      	b.n	801c73e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c6f4:	7d7b      	ldrb	r3, [r7, #21]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d109      	bne.n	801c70e <dir_find+0x126>
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	6a1b      	ldr	r3, [r3, #32]
 801c6fe:	4618      	mov	r0, r3
 801c700:	f7ff feaa 	bl	801c458 <sum_sfn>
 801c704:	4603      	mov	r3, r0
 801c706:	461a      	mov	r2, r3
 801c708:	7d3b      	ldrb	r3, [r7, #20]
 801c70a:	4293      	cmp	r3, r2
 801c70c:	d024      	beq.n	801c758 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c714:	f003 0301 	and.w	r3, r3, #1
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d10a      	bne.n	801c732 <dir_find+0x14a>
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	6a18      	ldr	r0, [r3, #32]
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	3324      	adds	r3, #36	@ 0x24
 801c724:	220b      	movs	r2, #11
 801c726:	4619      	mov	r1, r3
 801c728:	f7fe fd16 	bl	801b158 <mem_cmp>
 801c72c:	4603      	mov	r3, r0
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d014      	beq.n	801c75c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c732:	23ff      	movs	r3, #255	@ 0xff
 801c734:	757b      	strb	r3, [r7, #21]
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	f04f 32ff 	mov.w	r2, #4294967295
 801c73c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c73e:	2100      	movs	r1, #0
 801c740:	6878      	ldr	r0, [r7, #4]
 801c742:	f7ff fb63 	bl	801be0c <dir_next>
 801c746:	4603      	mov	r3, r0
 801c748:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c74a:	7dfb      	ldrb	r3, [r7, #23]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	f43f af65 	beq.w	801c61c <dir_find+0x34>
 801c752:	e004      	b.n	801c75e <dir_find+0x176>
		if (res != FR_OK) break;
 801c754:	bf00      	nop
 801c756:	e002      	b.n	801c75e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c758:	bf00      	nop
 801c75a:	e000      	b.n	801c75e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c75c:	bf00      	nop

	return res;
 801c75e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c760:	4618      	mov	r0, r3
 801c762:	3718      	adds	r7, #24
 801c764:	46bd      	mov	sp, r7
 801c766:	bd80      	pop	{r7, pc}

0801c768 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c768:	b580      	push	{r7, lr}
 801c76a:	b08c      	sub	sp, #48	@ 0x30
 801c76c:	af00      	add	r7, sp, #0
 801c76e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c77c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c780:	2b00      	cmp	r3, #0
 801c782:	d001      	beq.n	801c788 <dir_register+0x20>
 801c784:	2306      	movs	r3, #6
 801c786:	e0e0      	b.n	801c94a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c788:	2300      	movs	r3, #0
 801c78a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c78c:	e002      	b.n	801c794 <dir_register+0x2c>
 801c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c790:	3301      	adds	r3, #1
 801c792:	627b      	str	r3, [r7, #36]	@ 0x24
 801c794:	69fb      	ldr	r3, [r7, #28]
 801c796:	691a      	ldr	r2, [r3, #16]
 801c798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c79a:	005b      	lsls	r3, r3, #1
 801c79c:	4413      	add	r3, r2
 801c79e:	881b      	ldrh	r3, [r3, #0]
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d1f4      	bne.n	801c78e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c7aa:	f107 030c 	add.w	r3, r7, #12
 801c7ae:	220c      	movs	r2, #12
 801c7b0:	4618      	mov	r0, r3
 801c7b2:	f7fe fc95 	bl	801b0e0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c7b6:	7dfb      	ldrb	r3, [r7, #23]
 801c7b8:	f003 0301 	and.w	r3, r3, #1
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d032      	beq.n	801c826 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	2240      	movs	r2, #64	@ 0x40
 801c7c4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c7c8:	2301      	movs	r3, #1
 801c7ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c7cc:	e016      	b.n	801c7fc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c7d4:	69fb      	ldr	r3, [r7, #28]
 801c7d6:	691a      	ldr	r2, [r3, #16]
 801c7d8:	f107 010c 	add.w	r1, r7, #12
 801c7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7de:	f7ff fdad 	bl	801c33c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c7e2:	6878      	ldr	r0, [r7, #4]
 801c7e4:	f7ff ff00 	bl	801c5e8 <dir_find>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c7ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d106      	bne.n	801c804 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7f8:	3301      	adds	r3, #1
 801c7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7fe:	2b63      	cmp	r3, #99	@ 0x63
 801c800:	d9e5      	bls.n	801c7ce <dir_register+0x66>
 801c802:	e000      	b.n	801c806 <dir_register+0x9e>
			if (res != FR_OK) break;
 801c804:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c808:	2b64      	cmp	r3, #100	@ 0x64
 801c80a:	d101      	bne.n	801c810 <dir_register+0xa8>
 801c80c:	2307      	movs	r3, #7
 801c80e:	e09c      	b.n	801c94a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c810:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c814:	2b04      	cmp	r3, #4
 801c816:	d002      	beq.n	801c81e <dir_register+0xb6>
 801c818:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c81c:	e095      	b.n	801c94a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c81e:	7dfa      	ldrb	r2, [r7, #23]
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c826:	7dfb      	ldrb	r3, [r7, #23]
 801c828:	f003 0302 	and.w	r3, r3, #2
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d007      	beq.n	801c840 <dir_register+0xd8>
 801c830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c832:	330c      	adds	r3, #12
 801c834:	4a47      	ldr	r2, [pc, #284]	@ (801c954 <dir_register+0x1ec>)
 801c836:	fba2 2303 	umull	r2, r3, r2, r3
 801c83a:	089b      	lsrs	r3, r3, #2
 801c83c:	3301      	adds	r3, #1
 801c83e:	e000      	b.n	801c842 <dir_register+0xda>
 801c840:	2301      	movs	r3, #1
 801c842:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c844:	6a39      	ldr	r1, [r7, #32]
 801c846:	6878      	ldr	r0, [r7, #4]
 801c848:	f7ff fbb6 	bl	801bfb8 <dir_alloc>
 801c84c:	4603      	mov	r3, r0
 801c84e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c852:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c856:	2b00      	cmp	r3, #0
 801c858:	d148      	bne.n	801c8ec <dir_register+0x184>
 801c85a:	6a3b      	ldr	r3, [r7, #32]
 801c85c:	3b01      	subs	r3, #1
 801c85e:	623b      	str	r3, [r7, #32]
 801c860:	6a3b      	ldr	r3, [r7, #32]
 801c862:	2b00      	cmp	r3, #0
 801c864:	d042      	beq.n	801c8ec <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	695a      	ldr	r2, [r3, #20]
 801c86a:	6a3b      	ldr	r3, [r7, #32]
 801c86c:	015b      	lsls	r3, r3, #5
 801c86e:	1ad3      	subs	r3, r2, r3
 801c870:	4619      	mov	r1, r3
 801c872:	6878      	ldr	r0, [r7, #4]
 801c874:	f7ff fa41 	bl	801bcfa <dir_sdi>
 801c878:	4603      	mov	r3, r0
 801c87a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c87e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c882:	2b00      	cmp	r3, #0
 801c884:	d132      	bne.n	801c8ec <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	3324      	adds	r3, #36	@ 0x24
 801c88a:	4618      	mov	r0, r3
 801c88c:	f7ff fde4 	bl	801c458 <sum_sfn>
 801c890:	4603      	mov	r3, r0
 801c892:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	69db      	ldr	r3, [r3, #28]
 801c898:	4619      	mov	r1, r3
 801c89a:	69f8      	ldr	r0, [r7, #28]
 801c89c:	f7fe fe4e 	bl	801b53c <move_window>
 801c8a0:	4603      	mov	r3, r0
 801c8a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c8a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d11d      	bne.n	801c8ea <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c8ae:	69fb      	ldr	r3, [r7, #28]
 801c8b0:	6918      	ldr	r0, [r3, #16]
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	6a19      	ldr	r1, [r3, #32]
 801c8b6:	6a3b      	ldr	r3, [r7, #32]
 801c8b8:	b2da      	uxtb	r2, r3
 801c8ba:	7efb      	ldrb	r3, [r7, #27]
 801c8bc:	f7ff fcd6 	bl	801c26c <put_lfn>
				fs->wflag = 1;
 801c8c0:	69fb      	ldr	r3, [r7, #28]
 801c8c2:	2201      	movs	r2, #1
 801c8c4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c8c6:	2100      	movs	r1, #0
 801c8c8:	6878      	ldr	r0, [r7, #4]
 801c8ca:	f7ff fa9f 	bl	801be0c <dir_next>
 801c8ce:	4603      	mov	r3, r0
 801c8d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c8d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d107      	bne.n	801c8ec <dir_register+0x184>
 801c8dc:	6a3b      	ldr	r3, [r7, #32]
 801c8de:	3b01      	subs	r3, #1
 801c8e0:	623b      	str	r3, [r7, #32]
 801c8e2:	6a3b      	ldr	r3, [r7, #32]
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d1d5      	bne.n	801c894 <dir_register+0x12c>
 801c8e8:	e000      	b.n	801c8ec <dir_register+0x184>
				if (res != FR_OK) break;
 801c8ea:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c8ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d128      	bne.n	801c946 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	69db      	ldr	r3, [r3, #28]
 801c8f8:	4619      	mov	r1, r3
 801c8fa:	69f8      	ldr	r0, [r7, #28]
 801c8fc:	f7fe fe1e 	bl	801b53c <move_window>
 801c900:	4603      	mov	r3, r0
 801c902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d11b      	bne.n	801c946 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	6a1b      	ldr	r3, [r3, #32]
 801c912:	2220      	movs	r2, #32
 801c914:	2100      	movs	r1, #0
 801c916:	4618      	mov	r0, r3
 801c918:	f7fe fc03 	bl	801b122 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	6a18      	ldr	r0, [r3, #32]
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	3324      	adds	r3, #36	@ 0x24
 801c924:	220b      	movs	r2, #11
 801c926:	4619      	mov	r1, r3
 801c928:	f7fe fbda 	bl	801b0e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	6a1b      	ldr	r3, [r3, #32]
 801c936:	330c      	adds	r3, #12
 801c938:	f002 0218 	and.w	r2, r2, #24
 801c93c:	b2d2      	uxtb	r2, r2
 801c93e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c940:	69fb      	ldr	r3, [r7, #28]
 801c942:	2201      	movs	r2, #1
 801c944:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c946:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c94a:	4618      	mov	r0, r3
 801c94c:	3730      	adds	r7, #48	@ 0x30
 801c94e:	46bd      	mov	sp, r7
 801c950:	bd80      	pop	{r7, pc}
 801c952:	bf00      	nop
 801c954:	4ec4ec4f 	.word	0x4ec4ec4f

0801c958 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c958:	b580      	push	{r7, lr}
 801c95a:	b086      	sub	sp, #24
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	695b      	ldr	r3, [r3, #20]
 801c96a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c970:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c974:	d007      	beq.n	801c986 <dir_remove+0x2e>
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c97a:	4619      	mov	r1, r3
 801c97c:	6878      	ldr	r0, [r7, #4]
 801c97e:	f7ff f9bc 	bl	801bcfa <dir_sdi>
 801c982:	4603      	mov	r3, r0
 801c984:	e000      	b.n	801c988 <dir_remove+0x30>
 801c986:	2300      	movs	r3, #0
 801c988:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c98a:	7dfb      	ldrb	r3, [r7, #23]
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d128      	bne.n	801c9e2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	69db      	ldr	r3, [r3, #28]
 801c994:	4619      	mov	r1, r3
 801c996:	6938      	ldr	r0, [r7, #16]
 801c998:	f7fe fdd0 	bl	801b53c <move_window>
 801c99c:	4603      	mov	r3, r0
 801c99e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c9a0:	7dfb      	ldrb	r3, [r7, #23]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d115      	bne.n	801c9d2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	6a1b      	ldr	r3, [r3, #32]
 801c9aa:	22e5      	movs	r2, #229	@ 0xe5
 801c9ac:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c9ae:	693b      	ldr	r3, [r7, #16]
 801c9b0:	2201      	movs	r2, #1
 801c9b2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	695b      	ldr	r3, [r3, #20]
 801c9b8:	68fa      	ldr	r2, [r7, #12]
 801c9ba:	429a      	cmp	r2, r3
 801c9bc:	d90b      	bls.n	801c9d6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c9be:	2100      	movs	r1, #0
 801c9c0:	6878      	ldr	r0, [r7, #4]
 801c9c2:	f7ff fa23 	bl	801be0c <dir_next>
 801c9c6:	4603      	mov	r3, r0
 801c9c8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c9ca:	7dfb      	ldrb	r3, [r7, #23]
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d0df      	beq.n	801c990 <dir_remove+0x38>
 801c9d0:	e002      	b.n	801c9d8 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c9d2:	bf00      	nop
 801c9d4:	e000      	b.n	801c9d8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c9d6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c9d8:	7dfb      	ldrb	r3, [r7, #23]
 801c9da:	2b04      	cmp	r3, #4
 801c9dc:	d101      	bne.n	801c9e2 <dir_remove+0x8a>
 801c9de:	2302      	movs	r3, #2
 801c9e0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c9e2:	7dfb      	ldrb	r3, [r7, #23]
}
 801c9e4:	4618      	mov	r0, r3
 801c9e6:	3718      	adds	r7, #24
 801c9e8:	46bd      	mov	sp, r7
 801c9ea:	bd80      	pop	{r7, pc}

0801c9ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c9ec:	b580      	push	{r7, lr}
 801c9ee:	b08a      	sub	sp, #40	@ 0x28
 801c9f0:	af00      	add	r7, sp, #0
 801c9f2:	6078      	str	r0, [r7, #4]
 801c9f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c9f6:	683b      	ldr	r3, [r7, #0]
 801c9f8:	681b      	ldr	r3, [r3, #0]
 801c9fa:	613b      	str	r3, [r7, #16]
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	691b      	ldr	r3, [r3, #16]
 801ca02:	60fb      	str	r3, [r7, #12]
 801ca04:	2300      	movs	r3, #0
 801ca06:	617b      	str	r3, [r7, #20]
 801ca08:	697b      	ldr	r3, [r7, #20]
 801ca0a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801ca0c:	69bb      	ldr	r3, [r7, #24]
 801ca0e:	1c5a      	adds	r2, r3, #1
 801ca10:	61ba      	str	r2, [r7, #24]
 801ca12:	693a      	ldr	r2, [r7, #16]
 801ca14:	4413      	add	r3, r2
 801ca16:	781b      	ldrb	r3, [r3, #0]
 801ca18:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801ca1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca1c:	2b1f      	cmp	r3, #31
 801ca1e:	d940      	bls.n	801caa2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801ca20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca22:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca24:	d006      	beq.n	801ca34 <create_name+0x48>
 801ca26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca28:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca2a:	d110      	bne.n	801ca4e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801ca2c:	e002      	b.n	801ca34 <create_name+0x48>
 801ca2e:	69bb      	ldr	r3, [r7, #24]
 801ca30:	3301      	adds	r3, #1
 801ca32:	61bb      	str	r3, [r7, #24]
 801ca34:	693a      	ldr	r2, [r7, #16]
 801ca36:	69bb      	ldr	r3, [r7, #24]
 801ca38:	4413      	add	r3, r2
 801ca3a:	781b      	ldrb	r3, [r3, #0]
 801ca3c:	2b2f      	cmp	r3, #47	@ 0x2f
 801ca3e:	d0f6      	beq.n	801ca2e <create_name+0x42>
 801ca40:	693a      	ldr	r2, [r7, #16]
 801ca42:	69bb      	ldr	r3, [r7, #24]
 801ca44:	4413      	add	r3, r2
 801ca46:	781b      	ldrb	r3, [r3, #0]
 801ca48:	2b5c      	cmp	r3, #92	@ 0x5c
 801ca4a:	d0f0      	beq.n	801ca2e <create_name+0x42>
			break;
 801ca4c:	e02a      	b.n	801caa4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801ca4e:	697b      	ldr	r3, [r7, #20]
 801ca50:	2bfe      	cmp	r3, #254	@ 0xfe
 801ca52:	d901      	bls.n	801ca58 <create_name+0x6c>
 801ca54:	2306      	movs	r3, #6
 801ca56:	e17d      	b.n	801cd54 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801ca58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca5a:	b2db      	uxtb	r3, r3
 801ca5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801ca5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca60:	2101      	movs	r1, #1
 801ca62:	4618      	mov	r0, r3
 801ca64:	f001 fa98 	bl	801df98 <ff_convert>
 801ca68:	4603      	mov	r3, r0
 801ca6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801ca6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d101      	bne.n	801ca76 <create_name+0x8a>
 801ca72:	2306      	movs	r3, #6
 801ca74:	e16e      	b.n	801cd54 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801ca76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca78:	2b7f      	cmp	r3, #127	@ 0x7f
 801ca7a:	d809      	bhi.n	801ca90 <create_name+0xa4>
 801ca7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca7e:	4619      	mov	r1, r3
 801ca80:	488d      	ldr	r0, [pc, #564]	@ (801ccb8 <create_name+0x2cc>)
 801ca82:	f7fe fb90 	bl	801b1a6 <chk_chr>
 801ca86:	4603      	mov	r3, r0
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d001      	beq.n	801ca90 <create_name+0xa4>
 801ca8c:	2306      	movs	r3, #6
 801ca8e:	e161      	b.n	801cd54 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801ca90:	697b      	ldr	r3, [r7, #20]
 801ca92:	1c5a      	adds	r2, r3, #1
 801ca94:	617a      	str	r2, [r7, #20]
 801ca96:	005b      	lsls	r3, r3, #1
 801ca98:	68fa      	ldr	r2, [r7, #12]
 801ca9a:	4413      	add	r3, r2
 801ca9c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ca9e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801caa0:	e7b4      	b.n	801ca0c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801caa2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801caa4:	693a      	ldr	r2, [r7, #16]
 801caa6:	69bb      	ldr	r3, [r7, #24]
 801caa8:	441a      	add	r2, r3
 801caaa:	683b      	ldr	r3, [r7, #0]
 801caac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801caae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cab0:	2b1f      	cmp	r3, #31
 801cab2:	d801      	bhi.n	801cab8 <create_name+0xcc>
 801cab4:	2304      	movs	r3, #4
 801cab6:	e000      	b.n	801caba <create_name+0xce>
 801cab8:	2300      	movs	r3, #0
 801caba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801cabe:	e011      	b.n	801cae4 <create_name+0xf8>
		w = lfn[di - 1];
 801cac0:	697a      	ldr	r2, [r7, #20]
 801cac2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cac6:	4413      	add	r3, r2
 801cac8:	005b      	lsls	r3, r3, #1
 801caca:	68fa      	ldr	r2, [r7, #12]
 801cacc:	4413      	add	r3, r2
 801cace:	881b      	ldrh	r3, [r3, #0]
 801cad0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801cad2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cad4:	2b20      	cmp	r3, #32
 801cad6:	d002      	beq.n	801cade <create_name+0xf2>
 801cad8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cada:	2b2e      	cmp	r3, #46	@ 0x2e
 801cadc:	d106      	bne.n	801caec <create_name+0x100>
		di--;
 801cade:	697b      	ldr	r3, [r7, #20]
 801cae0:	3b01      	subs	r3, #1
 801cae2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801cae4:	697b      	ldr	r3, [r7, #20]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d1ea      	bne.n	801cac0 <create_name+0xd4>
 801caea:	e000      	b.n	801caee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801caec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801caee:	697b      	ldr	r3, [r7, #20]
 801caf0:	005b      	lsls	r3, r3, #1
 801caf2:	68fa      	ldr	r2, [r7, #12]
 801caf4:	4413      	add	r3, r2
 801caf6:	2200      	movs	r2, #0
 801caf8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801cafa:	697b      	ldr	r3, [r7, #20]
 801cafc:	2b00      	cmp	r3, #0
 801cafe:	d101      	bne.n	801cb04 <create_name+0x118>
 801cb00:	2306      	movs	r3, #6
 801cb02:	e127      	b.n	801cd54 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	3324      	adds	r3, #36	@ 0x24
 801cb08:	220b      	movs	r2, #11
 801cb0a:	2120      	movs	r1, #32
 801cb0c:	4618      	mov	r0, r3
 801cb0e:	f7fe fb08 	bl	801b122 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801cb12:	2300      	movs	r3, #0
 801cb14:	61bb      	str	r3, [r7, #24]
 801cb16:	e002      	b.n	801cb1e <create_name+0x132>
 801cb18:	69bb      	ldr	r3, [r7, #24]
 801cb1a:	3301      	adds	r3, #1
 801cb1c:	61bb      	str	r3, [r7, #24]
 801cb1e:	69bb      	ldr	r3, [r7, #24]
 801cb20:	005b      	lsls	r3, r3, #1
 801cb22:	68fa      	ldr	r2, [r7, #12]
 801cb24:	4413      	add	r3, r2
 801cb26:	881b      	ldrh	r3, [r3, #0]
 801cb28:	2b20      	cmp	r3, #32
 801cb2a:	d0f5      	beq.n	801cb18 <create_name+0x12c>
 801cb2c:	69bb      	ldr	r3, [r7, #24]
 801cb2e:	005b      	lsls	r3, r3, #1
 801cb30:	68fa      	ldr	r2, [r7, #12]
 801cb32:	4413      	add	r3, r2
 801cb34:	881b      	ldrh	r3, [r3, #0]
 801cb36:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb38:	d0ee      	beq.n	801cb18 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801cb3a:	69bb      	ldr	r3, [r7, #24]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d009      	beq.n	801cb54 <create_name+0x168>
 801cb40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb44:	f043 0303 	orr.w	r3, r3, #3
 801cb48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801cb4c:	e002      	b.n	801cb54 <create_name+0x168>
 801cb4e:	697b      	ldr	r3, [r7, #20]
 801cb50:	3b01      	subs	r3, #1
 801cb52:	617b      	str	r3, [r7, #20]
 801cb54:	697b      	ldr	r3, [r7, #20]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d009      	beq.n	801cb6e <create_name+0x182>
 801cb5a:	697a      	ldr	r2, [r7, #20]
 801cb5c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801cb60:	4413      	add	r3, r2
 801cb62:	005b      	lsls	r3, r3, #1
 801cb64:	68fa      	ldr	r2, [r7, #12]
 801cb66:	4413      	add	r3, r2
 801cb68:	881b      	ldrh	r3, [r3, #0]
 801cb6a:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb6c:	d1ef      	bne.n	801cb4e <create_name+0x162>

	i = b = 0; ni = 8;
 801cb6e:	2300      	movs	r3, #0
 801cb70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cb74:	2300      	movs	r3, #0
 801cb76:	623b      	str	r3, [r7, #32]
 801cb78:	2308      	movs	r3, #8
 801cb7a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801cb7c:	69bb      	ldr	r3, [r7, #24]
 801cb7e:	1c5a      	adds	r2, r3, #1
 801cb80:	61ba      	str	r2, [r7, #24]
 801cb82:	005b      	lsls	r3, r3, #1
 801cb84:	68fa      	ldr	r2, [r7, #12]
 801cb86:	4413      	add	r3, r2
 801cb88:	881b      	ldrh	r3, [r3, #0]
 801cb8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801cb8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	f000 8090 	beq.w	801ccb4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801cb94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb96:	2b20      	cmp	r3, #32
 801cb98:	d006      	beq.n	801cba8 <create_name+0x1bc>
 801cb9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb9c:	2b2e      	cmp	r3, #46	@ 0x2e
 801cb9e:	d10a      	bne.n	801cbb6 <create_name+0x1ca>
 801cba0:	69ba      	ldr	r2, [r7, #24]
 801cba2:	697b      	ldr	r3, [r7, #20]
 801cba4:	429a      	cmp	r2, r3
 801cba6:	d006      	beq.n	801cbb6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801cba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbac:	f043 0303 	orr.w	r3, r3, #3
 801cbb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbb4:	e07d      	b.n	801ccb2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801cbb6:	6a3a      	ldr	r2, [r7, #32]
 801cbb8:	69fb      	ldr	r3, [r7, #28]
 801cbba:	429a      	cmp	r2, r3
 801cbbc:	d203      	bcs.n	801cbc6 <create_name+0x1da>
 801cbbe:	69ba      	ldr	r2, [r7, #24]
 801cbc0:	697b      	ldr	r3, [r7, #20]
 801cbc2:	429a      	cmp	r2, r3
 801cbc4:	d123      	bne.n	801cc0e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801cbc6:	69fb      	ldr	r3, [r7, #28]
 801cbc8:	2b0b      	cmp	r3, #11
 801cbca:	d106      	bne.n	801cbda <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801cbcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbd0:	f043 0303 	orr.w	r3, r3, #3
 801cbd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cbd8:	e075      	b.n	801ccc6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801cbda:	69ba      	ldr	r2, [r7, #24]
 801cbdc:	697b      	ldr	r3, [r7, #20]
 801cbde:	429a      	cmp	r2, r3
 801cbe0:	d005      	beq.n	801cbee <create_name+0x202>
 801cbe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cbe6:	f043 0303 	orr.w	r3, r3, #3
 801cbea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801cbee:	69ba      	ldr	r2, [r7, #24]
 801cbf0:	697b      	ldr	r3, [r7, #20]
 801cbf2:	429a      	cmp	r2, r3
 801cbf4:	d866      	bhi.n	801ccc4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801cbf6:	697b      	ldr	r3, [r7, #20]
 801cbf8:	61bb      	str	r3, [r7, #24]
 801cbfa:	2308      	movs	r3, #8
 801cbfc:	623b      	str	r3, [r7, #32]
 801cbfe:	230b      	movs	r3, #11
 801cc00:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801cc02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc06:	009b      	lsls	r3, r3, #2
 801cc08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc0c:	e051      	b.n	801ccb2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801cc0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc10:	2b7f      	cmp	r3, #127	@ 0x7f
 801cc12:	d914      	bls.n	801cc3e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801cc14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc16:	2100      	movs	r1, #0
 801cc18:	4618      	mov	r0, r3
 801cc1a:	f001 f9bd 	bl	801df98 <ff_convert>
 801cc1e:	4603      	mov	r3, r0
 801cc20:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801cc22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d004      	beq.n	801cc32 <create_name+0x246>
 801cc28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc2a:	3b80      	subs	r3, #128	@ 0x80
 801cc2c:	4a23      	ldr	r2, [pc, #140]	@ (801ccbc <create_name+0x2d0>)
 801cc2e:	5cd3      	ldrb	r3, [r2, r3]
 801cc30:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801cc32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc36:	f043 0302 	orr.w	r3, r3, #2
 801cc3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801cc3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d007      	beq.n	801cc54 <create_name+0x268>
 801cc44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc46:	4619      	mov	r1, r3
 801cc48:	481d      	ldr	r0, [pc, #116]	@ (801ccc0 <create_name+0x2d4>)
 801cc4a:	f7fe faac 	bl	801b1a6 <chk_chr>
 801cc4e:	4603      	mov	r3, r0
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d008      	beq.n	801cc66 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801cc54:	235f      	movs	r3, #95	@ 0x5f
 801cc56:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801cc58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc5c:	f043 0303 	orr.w	r3, r3, #3
 801cc60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cc64:	e01b      	b.n	801cc9e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801cc66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc68:	2b40      	cmp	r3, #64	@ 0x40
 801cc6a:	d909      	bls.n	801cc80 <create_name+0x294>
 801cc6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc6e:	2b5a      	cmp	r3, #90	@ 0x5a
 801cc70:	d806      	bhi.n	801cc80 <create_name+0x294>
					b |= 2;
 801cc72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc76:	f043 0302 	orr.w	r3, r3, #2
 801cc7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc7e:	e00e      	b.n	801cc9e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801cc80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc82:	2b60      	cmp	r3, #96	@ 0x60
 801cc84:	d90b      	bls.n	801cc9e <create_name+0x2b2>
 801cc86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc88:	2b7a      	cmp	r3, #122	@ 0x7a
 801cc8a:	d808      	bhi.n	801cc9e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801cc8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc90:	f043 0301 	orr.w	r3, r3, #1
 801cc94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cc98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cc9a:	3b20      	subs	r3, #32
 801cc9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801cc9e:	6a3b      	ldr	r3, [r7, #32]
 801cca0:	1c5a      	adds	r2, r3, #1
 801cca2:	623a      	str	r2, [r7, #32]
 801cca4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cca6:	b2d1      	uxtb	r1, r2
 801cca8:	687a      	ldr	r2, [r7, #4]
 801ccaa:	4413      	add	r3, r2
 801ccac:	460a      	mov	r2, r1
 801ccae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801ccb2:	e763      	b.n	801cb7c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801ccb4:	bf00      	nop
 801ccb6:	e006      	b.n	801ccc6 <create_name+0x2da>
 801ccb8:	0801eb94 	.word	0x0801eb94
 801ccbc:	0801ec2c 	.word	0x0801ec2c
 801ccc0:	0801eba0 	.word	0x0801eba0
			if (si > di) break;			/* No extension */
 801ccc4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801cccc:	2be5      	cmp	r3, #229	@ 0xe5
 801ccce:	d103      	bne.n	801ccd8 <create_name+0x2ec>
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	2205      	movs	r2, #5
 801ccd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801ccd8:	69fb      	ldr	r3, [r7, #28]
 801ccda:	2b08      	cmp	r3, #8
 801ccdc:	d104      	bne.n	801cce8 <create_name+0x2fc>
 801ccde:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cce2:	009b      	lsls	r3, r3, #2
 801cce4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801cce8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ccec:	f003 030c 	and.w	r3, r3, #12
 801ccf0:	2b0c      	cmp	r3, #12
 801ccf2:	d005      	beq.n	801cd00 <create_name+0x314>
 801ccf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801ccf8:	f003 0303 	and.w	r3, r3, #3
 801ccfc:	2b03      	cmp	r3, #3
 801ccfe:	d105      	bne.n	801cd0c <create_name+0x320>
 801cd00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd04:	f043 0302 	orr.w	r3, r3, #2
 801cd08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801cd0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd10:	f003 0302 	and.w	r3, r3, #2
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d117      	bne.n	801cd48 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801cd18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd1c:	f003 0303 	and.w	r3, r3, #3
 801cd20:	2b01      	cmp	r3, #1
 801cd22:	d105      	bne.n	801cd30 <create_name+0x344>
 801cd24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd28:	f043 0310 	orr.w	r3, r3, #16
 801cd2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801cd30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cd34:	f003 030c 	and.w	r3, r3, #12
 801cd38:	2b04      	cmp	r3, #4
 801cd3a:	d105      	bne.n	801cd48 <create_name+0x35c>
 801cd3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cd40:	f043 0308 	orr.w	r3, r3, #8
 801cd44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801cd4e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801cd52:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801cd54:	4618      	mov	r0, r3
 801cd56:	3728      	adds	r7, #40	@ 0x28
 801cd58:	46bd      	mov	sp, r7
 801cd5a:	bd80      	pop	{r7, pc}

0801cd5c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801cd5c:	b580      	push	{r7, lr}
 801cd5e:	b086      	sub	sp, #24
 801cd60:	af00      	add	r7, sp, #0
 801cd62:	6078      	str	r0, [r7, #4]
 801cd64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801cd6a:	693b      	ldr	r3, [r7, #16]
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801cd70:	e002      	b.n	801cd78 <follow_path+0x1c>
 801cd72:	683b      	ldr	r3, [r7, #0]
 801cd74:	3301      	adds	r3, #1
 801cd76:	603b      	str	r3, [r7, #0]
 801cd78:	683b      	ldr	r3, [r7, #0]
 801cd7a:	781b      	ldrb	r3, [r3, #0]
 801cd7c:	2b2f      	cmp	r3, #47	@ 0x2f
 801cd7e:	d0f8      	beq.n	801cd72 <follow_path+0x16>
 801cd80:	683b      	ldr	r3, [r7, #0]
 801cd82:	781b      	ldrb	r3, [r3, #0]
 801cd84:	2b5c      	cmp	r3, #92	@ 0x5c
 801cd86:	d0f4      	beq.n	801cd72 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801cd88:	693b      	ldr	r3, [r7, #16]
 801cd8a:	2200      	movs	r2, #0
 801cd8c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801cd8e:	683b      	ldr	r3, [r7, #0]
 801cd90:	781b      	ldrb	r3, [r3, #0]
 801cd92:	2b1f      	cmp	r3, #31
 801cd94:	d80a      	bhi.n	801cdac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	2280      	movs	r2, #128	@ 0x80
 801cd9a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801cd9e:	2100      	movs	r1, #0
 801cda0:	6878      	ldr	r0, [r7, #4]
 801cda2:	f7fe ffaa 	bl	801bcfa <dir_sdi>
 801cda6:	4603      	mov	r3, r0
 801cda8:	75fb      	strb	r3, [r7, #23]
 801cdaa:	e048      	b.n	801ce3e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cdac:	463b      	mov	r3, r7
 801cdae:	4619      	mov	r1, r3
 801cdb0:	6878      	ldr	r0, [r7, #4]
 801cdb2:	f7ff fe1b 	bl	801c9ec <create_name>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801cdba:	7dfb      	ldrb	r3, [r7, #23]
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d139      	bne.n	801ce34 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801cdc0:	6878      	ldr	r0, [r7, #4]
 801cdc2:	f7ff fc11 	bl	801c5e8 <dir_find>
 801cdc6:	4603      	mov	r3, r0
 801cdc8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801cdd0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801cdd2:	7dfb      	ldrb	r3, [r7, #23]
 801cdd4:	2b00      	cmp	r3, #0
 801cdd6:	d00a      	beq.n	801cdee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801cdd8:	7dfb      	ldrb	r3, [r7, #23]
 801cdda:	2b04      	cmp	r3, #4
 801cddc:	d12c      	bne.n	801ce38 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801cdde:	7afb      	ldrb	r3, [r7, #11]
 801cde0:	f003 0304 	and.w	r3, r3, #4
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d127      	bne.n	801ce38 <follow_path+0xdc>
 801cde8:	2305      	movs	r3, #5
 801cdea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801cdec:	e024      	b.n	801ce38 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cdee:	7afb      	ldrb	r3, [r7, #11]
 801cdf0:	f003 0304 	and.w	r3, r3, #4
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d121      	bne.n	801ce3c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801cdf8:	693b      	ldr	r3, [r7, #16]
 801cdfa:	799b      	ldrb	r3, [r3, #6]
 801cdfc:	f003 0310 	and.w	r3, r3, #16
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d102      	bne.n	801ce0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801ce04:	2305      	movs	r3, #5
 801ce06:	75fb      	strb	r3, [r7, #23]
 801ce08:	e019      	b.n	801ce3e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	695b      	ldr	r3, [r3, #20]
 801ce14:	68fa      	ldr	r2, [r7, #12]
 801ce16:	8992      	ldrh	r2, [r2, #12]
 801ce18:	fbb3 f0f2 	udiv	r0, r3, r2
 801ce1c:	fb00 f202 	mul.w	r2, r0, r2
 801ce20:	1a9b      	subs	r3, r3, r2
 801ce22:	440b      	add	r3, r1
 801ce24:	4619      	mov	r1, r3
 801ce26:	68f8      	ldr	r0, [r7, #12]
 801ce28:	f7ff f90d 	bl	801c046 <ld_clust>
 801ce2c:	4602      	mov	r2, r0
 801ce2e:	693b      	ldr	r3, [r7, #16]
 801ce30:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ce32:	e7bb      	b.n	801cdac <follow_path+0x50>
			if (res != FR_OK) break;
 801ce34:	bf00      	nop
 801ce36:	e002      	b.n	801ce3e <follow_path+0xe2>
				break;
 801ce38:	bf00      	nop
 801ce3a:	e000      	b.n	801ce3e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801ce3c:	bf00      	nop
			}
		}
	}

	return res;
 801ce3e:	7dfb      	ldrb	r3, [r7, #23]
}
 801ce40:	4618      	mov	r0, r3
 801ce42:	3718      	adds	r7, #24
 801ce44:	46bd      	mov	sp, r7
 801ce46:	bd80      	pop	{r7, pc}

0801ce48 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801ce48:	b480      	push	{r7}
 801ce4a:	b087      	sub	sp, #28
 801ce4c:	af00      	add	r7, sp, #0
 801ce4e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801ce50:	f04f 33ff 	mov.w	r3, #4294967295
 801ce54:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d031      	beq.n	801cec2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	617b      	str	r3, [r7, #20]
 801ce64:	e002      	b.n	801ce6c <get_ldnumber+0x24>
 801ce66:	697b      	ldr	r3, [r7, #20]
 801ce68:	3301      	adds	r3, #1
 801ce6a:	617b      	str	r3, [r7, #20]
 801ce6c:	697b      	ldr	r3, [r7, #20]
 801ce6e:	781b      	ldrb	r3, [r3, #0]
 801ce70:	2b1f      	cmp	r3, #31
 801ce72:	d903      	bls.n	801ce7c <get_ldnumber+0x34>
 801ce74:	697b      	ldr	r3, [r7, #20]
 801ce76:	781b      	ldrb	r3, [r3, #0]
 801ce78:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce7a:	d1f4      	bne.n	801ce66 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801ce7c:	697b      	ldr	r3, [r7, #20]
 801ce7e:	781b      	ldrb	r3, [r3, #0]
 801ce80:	2b3a      	cmp	r3, #58	@ 0x3a
 801ce82:	d11c      	bne.n	801cebe <get_ldnumber+0x76>
			tp = *path;
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801ce8a:	68fb      	ldr	r3, [r7, #12]
 801ce8c:	1c5a      	adds	r2, r3, #1
 801ce8e:	60fa      	str	r2, [r7, #12]
 801ce90:	781b      	ldrb	r3, [r3, #0]
 801ce92:	3b30      	subs	r3, #48	@ 0x30
 801ce94:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801ce96:	68bb      	ldr	r3, [r7, #8]
 801ce98:	2b09      	cmp	r3, #9
 801ce9a:	d80e      	bhi.n	801ceba <get_ldnumber+0x72>
 801ce9c:	68fa      	ldr	r2, [r7, #12]
 801ce9e:	697b      	ldr	r3, [r7, #20]
 801cea0:	429a      	cmp	r2, r3
 801cea2:	d10a      	bne.n	801ceba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801cea4:	68bb      	ldr	r3, [r7, #8]
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d107      	bne.n	801ceba <get_ldnumber+0x72>
					vol = (int)i;
 801ceaa:	68bb      	ldr	r3, [r7, #8]
 801ceac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801ceae:	697b      	ldr	r3, [r7, #20]
 801ceb0:	3301      	adds	r3, #1
 801ceb2:	617b      	str	r3, [r7, #20]
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	697a      	ldr	r2, [r7, #20]
 801ceb8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801ceba:	693b      	ldr	r3, [r7, #16]
 801cebc:	e002      	b.n	801cec4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801cebe:	2300      	movs	r3, #0
 801cec0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801cec2:	693b      	ldr	r3, [r7, #16]
}
 801cec4:	4618      	mov	r0, r3
 801cec6:	371c      	adds	r7, #28
 801cec8:	46bd      	mov	sp, r7
 801ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cece:	4770      	bx	lr

0801ced0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801ced0:	b580      	push	{r7, lr}
 801ced2:	b082      	sub	sp, #8
 801ced4:	af00      	add	r7, sp, #0
 801ced6:	6078      	str	r0, [r7, #4]
 801ced8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	2200      	movs	r2, #0
 801cede:	70da      	strb	r2, [r3, #3]
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	f04f 32ff 	mov.w	r2, #4294967295
 801cee6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801cee8:	6839      	ldr	r1, [r7, #0]
 801ceea:	6878      	ldr	r0, [r7, #4]
 801ceec:	f7fe fb26 	bl	801b53c <move_window>
 801cef0:	4603      	mov	r3, r0
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d001      	beq.n	801cefa <check_fs+0x2a>
 801cef6:	2304      	movs	r3, #4
 801cef8:	e038      	b.n	801cf6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	3338      	adds	r3, #56	@ 0x38
 801cefe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cf02:	4618      	mov	r0, r3
 801cf04:	f7fe f86a 	bl	801afdc <ld_word>
 801cf08:	4603      	mov	r3, r0
 801cf0a:	461a      	mov	r2, r3
 801cf0c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cf10:	429a      	cmp	r2, r3
 801cf12:	d001      	beq.n	801cf18 <check_fs+0x48>
 801cf14:	2303      	movs	r3, #3
 801cf16:	e029      	b.n	801cf6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cf1e:	2be9      	cmp	r3, #233	@ 0xe9
 801cf20:	d009      	beq.n	801cf36 <check_fs+0x66>
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801cf28:	2beb      	cmp	r3, #235	@ 0xeb
 801cf2a:	d11e      	bne.n	801cf6a <check_fs+0x9a>
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801cf32:	2b90      	cmp	r3, #144	@ 0x90
 801cf34:	d119      	bne.n	801cf6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	3338      	adds	r3, #56	@ 0x38
 801cf3a:	3336      	adds	r3, #54	@ 0x36
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	f7fe f865 	bl	801b00c <ld_dword>
 801cf42:	4603      	mov	r3, r0
 801cf44:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801cf48:	4a0a      	ldr	r2, [pc, #40]	@ (801cf74 <check_fs+0xa4>)
 801cf4a:	4293      	cmp	r3, r2
 801cf4c:	d101      	bne.n	801cf52 <check_fs+0x82>
 801cf4e:	2300      	movs	r3, #0
 801cf50:	e00c      	b.n	801cf6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	3338      	adds	r3, #56	@ 0x38
 801cf56:	3352      	adds	r3, #82	@ 0x52
 801cf58:	4618      	mov	r0, r3
 801cf5a:	f7fe f857 	bl	801b00c <ld_dword>
 801cf5e:	4603      	mov	r3, r0
 801cf60:	4a05      	ldr	r2, [pc, #20]	@ (801cf78 <check_fs+0xa8>)
 801cf62:	4293      	cmp	r3, r2
 801cf64:	d101      	bne.n	801cf6a <check_fs+0x9a>
 801cf66:	2300      	movs	r3, #0
 801cf68:	e000      	b.n	801cf6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801cf6a:	2302      	movs	r3, #2
}
 801cf6c:	4618      	mov	r0, r3
 801cf6e:	3708      	adds	r7, #8
 801cf70:	46bd      	mov	sp, r7
 801cf72:	bd80      	pop	{r7, pc}
 801cf74:	00544146 	.word	0x00544146
 801cf78:	33544146 	.word	0x33544146

0801cf7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cf7c:	b580      	push	{r7, lr}
 801cf7e:	b096      	sub	sp, #88	@ 0x58
 801cf80:	af00      	add	r7, sp, #0
 801cf82:	60f8      	str	r0, [r7, #12]
 801cf84:	60b9      	str	r1, [r7, #8]
 801cf86:	4613      	mov	r3, r2
 801cf88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801cf8a:	68bb      	ldr	r3, [r7, #8]
 801cf8c:	2200      	movs	r2, #0
 801cf8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801cf90:	68f8      	ldr	r0, [r7, #12]
 801cf92:	f7ff ff59 	bl	801ce48 <get_ldnumber>
 801cf96:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801cf98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	da01      	bge.n	801cfa2 <find_volume+0x26>
 801cf9e:	230b      	movs	r3, #11
 801cfa0:	e265      	b.n	801d46e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cfa2:	4a9f      	ldr	r2, [pc, #636]	@ (801d220 <find_volume+0x2a4>)
 801cfa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cfa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cfaa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801cfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d101      	bne.n	801cfb6 <find_volume+0x3a>
 801cfb2:	230c      	movs	r3, #12
 801cfb4:	e25b      	b.n	801d46e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cfb6:	68bb      	ldr	r3, [r7, #8]
 801cfb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cfba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cfbc:	79fb      	ldrb	r3, [r7, #7]
 801cfbe:	f023 0301 	bic.w	r3, r3, #1
 801cfc2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfc6:	781b      	ldrb	r3, [r3, #0]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d01a      	beq.n	801d002 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfce:	785b      	ldrb	r3, [r3, #1]
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	f7fd ff63 	bl	801ae9c <disk_status>
 801cfd6:	4603      	mov	r3, r0
 801cfd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cfdc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cfe0:	f003 0301 	and.w	r3, r3, #1
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d10c      	bne.n	801d002 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cfe8:	79fb      	ldrb	r3, [r7, #7]
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d007      	beq.n	801cffe <find_volume+0x82>
 801cfee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cff2:	f003 0304 	and.w	r3, r3, #4
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d001      	beq.n	801cffe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801cffa:	230a      	movs	r3, #10
 801cffc:	e237      	b.n	801d46e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801cffe:	2300      	movs	r3, #0
 801d000:	e235      	b.n	801d46e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801d002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d004:	2200      	movs	r2, #0
 801d006:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801d008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d00a:	b2da      	uxtb	r2, r3
 801d00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d00e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801d010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d012:	785b      	ldrb	r3, [r3, #1]
 801d014:	4618      	mov	r0, r3
 801d016:	f7fd ff5b 	bl	801aed0 <disk_initialize>
 801d01a:	4603      	mov	r3, r0
 801d01c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801d020:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d024:	f003 0301 	and.w	r3, r3, #1
 801d028:	2b00      	cmp	r3, #0
 801d02a:	d001      	beq.n	801d030 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801d02c:	2303      	movs	r3, #3
 801d02e:	e21e      	b.n	801d46e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801d030:	79fb      	ldrb	r3, [r7, #7]
 801d032:	2b00      	cmp	r3, #0
 801d034:	d007      	beq.n	801d046 <find_volume+0xca>
 801d036:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d03a:	f003 0304 	and.w	r3, r3, #4
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d001      	beq.n	801d046 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801d042:	230a      	movs	r3, #10
 801d044:	e213      	b.n	801d46e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801d046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d048:	7858      	ldrb	r0, [r3, #1]
 801d04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d04c:	330c      	adds	r3, #12
 801d04e:	461a      	mov	r2, r3
 801d050:	2102      	movs	r1, #2
 801d052:	f7fd ffa5 	bl	801afa0 <disk_ioctl>
 801d056:	4603      	mov	r3, r0
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d001      	beq.n	801d060 <find_volume+0xe4>
 801d05c:	2301      	movs	r3, #1
 801d05e:	e206      	b.n	801d46e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801d060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d062:	899b      	ldrh	r3, [r3, #12]
 801d064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d068:	d80d      	bhi.n	801d086 <find_volume+0x10a>
 801d06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d06c:	899b      	ldrh	r3, [r3, #12]
 801d06e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d072:	d308      	bcc.n	801d086 <find_volume+0x10a>
 801d074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d076:	899b      	ldrh	r3, [r3, #12]
 801d078:	461a      	mov	r2, r3
 801d07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d07c:	899b      	ldrh	r3, [r3, #12]
 801d07e:	3b01      	subs	r3, #1
 801d080:	4013      	ands	r3, r2
 801d082:	2b00      	cmp	r3, #0
 801d084:	d001      	beq.n	801d08a <find_volume+0x10e>
 801d086:	2301      	movs	r3, #1
 801d088:	e1f1      	b.n	801d46e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801d08a:	2300      	movs	r3, #0
 801d08c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801d08e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d090:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d092:	f7ff ff1d 	bl	801ced0 <check_fs>
 801d096:	4603      	mov	r3, r0
 801d098:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801d09c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d0a0:	2b02      	cmp	r3, #2
 801d0a2:	d149      	bne.n	801d138 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d0a4:	2300      	movs	r3, #0
 801d0a6:	643b      	str	r3, [r7, #64]	@ 0x40
 801d0a8:	e01e      	b.n	801d0e8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801d0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0ac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801d0b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0b2:	011b      	lsls	r3, r3, #4
 801d0b4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801d0b8:	4413      	add	r3, r2
 801d0ba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801d0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0be:	3304      	adds	r3, #4
 801d0c0:	781b      	ldrb	r3, [r3, #0]
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d006      	beq.n	801d0d4 <find_volume+0x158>
 801d0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0c8:	3308      	adds	r3, #8
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	f7fd ff9e 	bl	801b00c <ld_dword>
 801d0d0:	4602      	mov	r2, r0
 801d0d2:	e000      	b.n	801d0d6 <find_volume+0x15a>
 801d0d4:	2200      	movs	r2, #0
 801d0d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0d8:	009b      	lsls	r3, r3, #2
 801d0da:	3358      	adds	r3, #88	@ 0x58
 801d0dc:	443b      	add	r3, r7
 801d0de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d0e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0e4:	3301      	adds	r3, #1
 801d0e6:	643b      	str	r3, [r7, #64]	@ 0x40
 801d0e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0ea:	2b03      	cmp	r3, #3
 801d0ec:	d9dd      	bls.n	801d0aa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801d0ee:	2300      	movs	r3, #0
 801d0f0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801d0f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d002      	beq.n	801d0fe <find_volume+0x182>
 801d0f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d0fa:	3b01      	subs	r3, #1
 801d0fc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801d0fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d100:	009b      	lsls	r3, r3, #2
 801d102:	3358      	adds	r3, #88	@ 0x58
 801d104:	443b      	add	r3, r7
 801d106:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801d10a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801d10c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d10e:	2b00      	cmp	r3, #0
 801d110:	d005      	beq.n	801d11e <find_volume+0x1a2>
 801d112:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d114:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d116:	f7ff fedb 	bl	801ced0 <check_fs>
 801d11a:	4603      	mov	r3, r0
 801d11c:	e000      	b.n	801d120 <find_volume+0x1a4>
 801d11e:	2303      	movs	r3, #3
 801d120:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801d124:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d128:	2b01      	cmp	r3, #1
 801d12a:	d905      	bls.n	801d138 <find_volume+0x1bc>
 801d12c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d12e:	3301      	adds	r3, #1
 801d130:	643b      	str	r3, [r7, #64]	@ 0x40
 801d132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d134:	2b03      	cmp	r3, #3
 801d136:	d9e2      	bls.n	801d0fe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801d138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d13c:	2b04      	cmp	r3, #4
 801d13e:	d101      	bne.n	801d144 <find_volume+0x1c8>
 801d140:	2301      	movs	r3, #1
 801d142:	e194      	b.n	801d46e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801d144:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d148:	2b01      	cmp	r3, #1
 801d14a:	d901      	bls.n	801d150 <find_volume+0x1d4>
 801d14c:	230d      	movs	r3, #13
 801d14e:	e18e      	b.n	801d46e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801d150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d152:	3338      	adds	r3, #56	@ 0x38
 801d154:	330b      	adds	r3, #11
 801d156:	4618      	mov	r0, r3
 801d158:	f7fd ff40 	bl	801afdc <ld_word>
 801d15c:	4603      	mov	r3, r0
 801d15e:	461a      	mov	r2, r3
 801d160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d162:	899b      	ldrh	r3, [r3, #12]
 801d164:	429a      	cmp	r2, r3
 801d166:	d001      	beq.n	801d16c <find_volume+0x1f0>
 801d168:	230d      	movs	r3, #13
 801d16a:	e180      	b.n	801d46e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801d16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d16e:	3338      	adds	r3, #56	@ 0x38
 801d170:	3316      	adds	r3, #22
 801d172:	4618      	mov	r0, r3
 801d174:	f7fd ff32 	bl	801afdc <ld_word>
 801d178:	4603      	mov	r3, r0
 801d17a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801d17c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d106      	bne.n	801d190 <find_volume+0x214>
 801d182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d184:	3338      	adds	r3, #56	@ 0x38
 801d186:	3324      	adds	r3, #36	@ 0x24
 801d188:	4618      	mov	r0, r3
 801d18a:	f7fd ff3f 	bl	801b00c <ld_dword>
 801d18e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801d190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d192:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d194:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801d196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d198:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801d19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d19e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801d1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1a2:	789b      	ldrb	r3, [r3, #2]
 801d1a4:	2b01      	cmp	r3, #1
 801d1a6:	d005      	beq.n	801d1b4 <find_volume+0x238>
 801d1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1aa:	789b      	ldrb	r3, [r3, #2]
 801d1ac:	2b02      	cmp	r3, #2
 801d1ae:	d001      	beq.n	801d1b4 <find_volume+0x238>
 801d1b0:	230d      	movs	r3, #13
 801d1b2:	e15c      	b.n	801d46e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801d1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1b6:	789b      	ldrb	r3, [r3, #2]
 801d1b8:	461a      	mov	r2, r3
 801d1ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1bc:	fb02 f303 	mul.w	r3, r2, r3
 801d1c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801d1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801d1c8:	461a      	mov	r2, r3
 801d1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801d1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1d0:	895b      	ldrh	r3, [r3, #10]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d008      	beq.n	801d1e8 <find_volume+0x26c>
 801d1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1d8:	895b      	ldrh	r3, [r3, #10]
 801d1da:	461a      	mov	r2, r3
 801d1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1de:	895b      	ldrh	r3, [r3, #10]
 801d1e0:	3b01      	subs	r3, #1
 801d1e2:	4013      	ands	r3, r2
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d001      	beq.n	801d1ec <find_volume+0x270>
 801d1e8:	230d      	movs	r3, #13
 801d1ea:	e140      	b.n	801d46e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801d1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ee:	3338      	adds	r3, #56	@ 0x38
 801d1f0:	3311      	adds	r3, #17
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	f7fd fef2 	bl	801afdc <ld_word>
 801d1f8:	4603      	mov	r3, r0
 801d1fa:	461a      	mov	r2, r3
 801d1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801d200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d202:	891b      	ldrh	r3, [r3, #8]
 801d204:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d206:	8992      	ldrh	r2, [r2, #12]
 801d208:	0952      	lsrs	r2, r2, #5
 801d20a:	b292      	uxth	r2, r2
 801d20c:	fbb3 f1f2 	udiv	r1, r3, r2
 801d210:	fb01 f202 	mul.w	r2, r1, r2
 801d214:	1a9b      	subs	r3, r3, r2
 801d216:	b29b      	uxth	r3, r3
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d003      	beq.n	801d224 <find_volume+0x2a8>
 801d21c:	230d      	movs	r3, #13
 801d21e:	e126      	b.n	801d46e <find_volume+0x4f2>
 801d220:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801d224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d226:	3338      	adds	r3, #56	@ 0x38
 801d228:	3313      	adds	r3, #19
 801d22a:	4618      	mov	r0, r3
 801d22c:	f7fd fed6 	bl	801afdc <ld_word>
 801d230:	4603      	mov	r3, r0
 801d232:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801d234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d236:	2b00      	cmp	r3, #0
 801d238:	d106      	bne.n	801d248 <find_volume+0x2cc>
 801d23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d23c:	3338      	adds	r3, #56	@ 0x38
 801d23e:	3320      	adds	r3, #32
 801d240:	4618      	mov	r0, r3
 801d242:	f7fd fee3 	bl	801b00c <ld_dword>
 801d246:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801d248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d24a:	3338      	adds	r3, #56	@ 0x38
 801d24c:	330e      	adds	r3, #14
 801d24e:	4618      	mov	r0, r3
 801d250:	f7fd fec4 	bl	801afdc <ld_word>
 801d254:	4603      	mov	r3, r0
 801d256:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801d258:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d101      	bne.n	801d262 <find_volume+0x2e6>
 801d25e:	230d      	movs	r3, #13
 801d260:	e105      	b.n	801d46e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801d262:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d266:	4413      	add	r3, r2
 801d268:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d26a:	8911      	ldrh	r1, [r2, #8]
 801d26c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d26e:	8992      	ldrh	r2, [r2, #12]
 801d270:	0952      	lsrs	r2, r2, #5
 801d272:	b292      	uxth	r2, r2
 801d274:	fbb1 f2f2 	udiv	r2, r1, r2
 801d278:	b292      	uxth	r2, r2
 801d27a:	4413      	add	r3, r2
 801d27c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801d27e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d282:	429a      	cmp	r2, r3
 801d284:	d201      	bcs.n	801d28a <find_volume+0x30e>
 801d286:	230d      	movs	r3, #13
 801d288:	e0f1      	b.n	801d46e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801d28a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d28e:	1ad3      	subs	r3, r2, r3
 801d290:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d292:	8952      	ldrh	r2, [r2, #10]
 801d294:	fbb3 f3f2 	udiv	r3, r3, r2
 801d298:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	d101      	bne.n	801d2a4 <find_volume+0x328>
 801d2a0:	230d      	movs	r3, #13
 801d2a2:	e0e4      	b.n	801d46e <find_volume+0x4f2>
		fmt = FS_FAT32;
 801d2a4:	2303      	movs	r3, #3
 801d2a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801d2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2ac:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801d2b0:	4293      	cmp	r3, r2
 801d2b2:	d802      	bhi.n	801d2ba <find_volume+0x33e>
 801d2b4:	2302      	movs	r3, #2
 801d2b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801d2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2bc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801d2c0:	4293      	cmp	r3, r2
 801d2c2:	d802      	bhi.n	801d2ca <find_volume+0x34e>
 801d2c4:	2301      	movs	r3, #1
 801d2c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801d2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2cc:	1c9a      	adds	r2, r3, #2
 801d2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2d0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801d2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d2d6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801d2d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d2da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d2dc:	441a      	add	r2, r3
 801d2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2e0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801d2e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2e6:	441a      	add	r2, r3
 801d2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2ea:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801d2ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d2f0:	2b03      	cmp	r3, #3
 801d2f2:	d11e      	bne.n	801d332 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801d2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2f6:	3338      	adds	r3, #56	@ 0x38
 801d2f8:	332a      	adds	r3, #42	@ 0x2a
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f7fd fe6e 	bl	801afdc <ld_word>
 801d300:	4603      	mov	r3, r0
 801d302:	2b00      	cmp	r3, #0
 801d304:	d001      	beq.n	801d30a <find_volume+0x38e>
 801d306:	230d      	movs	r3, #13
 801d308:	e0b1      	b.n	801d46e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801d30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d30c:	891b      	ldrh	r3, [r3, #8]
 801d30e:	2b00      	cmp	r3, #0
 801d310:	d001      	beq.n	801d316 <find_volume+0x39a>
 801d312:	230d      	movs	r3, #13
 801d314:	e0ab      	b.n	801d46e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801d316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d318:	3338      	adds	r3, #56	@ 0x38
 801d31a:	332c      	adds	r3, #44	@ 0x2c
 801d31c:	4618      	mov	r0, r3
 801d31e:	f7fd fe75 	bl	801b00c <ld_dword>
 801d322:	4602      	mov	r2, r0
 801d324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d326:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d32a:	69db      	ldr	r3, [r3, #28]
 801d32c:	009b      	lsls	r3, r3, #2
 801d32e:	647b      	str	r3, [r7, #68]	@ 0x44
 801d330:	e01f      	b.n	801d372 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d334:	891b      	ldrh	r3, [r3, #8]
 801d336:	2b00      	cmp	r3, #0
 801d338:	d101      	bne.n	801d33e <find_volume+0x3c2>
 801d33a:	230d      	movs	r3, #13
 801d33c:	e097      	b.n	801d46e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d344:	441a      	add	r2, r3
 801d346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d348:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d34a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d34e:	2b02      	cmp	r3, #2
 801d350:	d103      	bne.n	801d35a <find_volume+0x3de>
 801d352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d354:	69db      	ldr	r3, [r3, #28]
 801d356:	005b      	lsls	r3, r3, #1
 801d358:	e00a      	b.n	801d370 <find_volume+0x3f4>
 801d35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d35c:	69da      	ldr	r2, [r3, #28]
 801d35e:	4613      	mov	r3, r2
 801d360:	005b      	lsls	r3, r3, #1
 801d362:	4413      	add	r3, r2
 801d364:	085a      	lsrs	r2, r3, #1
 801d366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d368:	69db      	ldr	r3, [r3, #28]
 801d36a:	f003 0301 	and.w	r3, r3, #1
 801d36e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d370:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d374:	6a1a      	ldr	r2, [r3, #32]
 801d376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d378:	899b      	ldrh	r3, [r3, #12]
 801d37a:	4619      	mov	r1, r3
 801d37c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d37e:	440b      	add	r3, r1
 801d380:	3b01      	subs	r3, #1
 801d382:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d384:	8989      	ldrh	r1, [r1, #12]
 801d386:	fbb3 f3f1 	udiv	r3, r3, r1
 801d38a:	429a      	cmp	r2, r3
 801d38c:	d201      	bcs.n	801d392 <find_volume+0x416>
 801d38e:	230d      	movs	r3, #13
 801d390:	e06d      	b.n	801d46e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d394:	f04f 32ff 	mov.w	r2, #4294967295
 801d398:	619a      	str	r2, [r3, #24]
 801d39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d39c:	699a      	ldr	r2, [r3, #24]
 801d39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3a0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801d3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3a4:	2280      	movs	r2, #128	@ 0x80
 801d3a6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d3a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d3ac:	2b03      	cmp	r3, #3
 801d3ae:	d149      	bne.n	801d444 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3b2:	3338      	adds	r3, #56	@ 0x38
 801d3b4:	3330      	adds	r3, #48	@ 0x30
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	f7fd fe10 	bl	801afdc <ld_word>
 801d3bc:	4603      	mov	r3, r0
 801d3be:	2b01      	cmp	r3, #1
 801d3c0:	d140      	bne.n	801d444 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d3c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d3c4:	3301      	adds	r3, #1
 801d3c6:	4619      	mov	r1, r3
 801d3c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d3ca:	f7fe f8b7 	bl	801b53c <move_window>
 801d3ce:	4603      	mov	r3, r0
 801d3d0:	2b00      	cmp	r3, #0
 801d3d2:	d137      	bne.n	801d444 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801d3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3d6:	2200      	movs	r2, #0
 801d3d8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3dc:	3338      	adds	r3, #56	@ 0x38
 801d3de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	f7fd fdfa 	bl	801afdc <ld_word>
 801d3e8:	4603      	mov	r3, r0
 801d3ea:	461a      	mov	r2, r3
 801d3ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d3f0:	429a      	cmp	r2, r3
 801d3f2:	d127      	bne.n	801d444 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3f6:	3338      	adds	r3, #56	@ 0x38
 801d3f8:	4618      	mov	r0, r3
 801d3fa:	f7fd fe07 	bl	801b00c <ld_dword>
 801d3fe:	4603      	mov	r3, r0
 801d400:	4a1d      	ldr	r2, [pc, #116]	@ (801d478 <find_volume+0x4fc>)
 801d402:	4293      	cmp	r3, r2
 801d404:	d11e      	bne.n	801d444 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d408:	3338      	adds	r3, #56	@ 0x38
 801d40a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d40e:	4618      	mov	r0, r3
 801d410:	f7fd fdfc 	bl	801b00c <ld_dword>
 801d414:	4603      	mov	r3, r0
 801d416:	4a19      	ldr	r2, [pc, #100]	@ (801d47c <find_volume+0x500>)
 801d418:	4293      	cmp	r3, r2
 801d41a:	d113      	bne.n	801d444 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d41e:	3338      	adds	r3, #56	@ 0x38
 801d420:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d424:	4618      	mov	r0, r3
 801d426:	f7fd fdf1 	bl	801b00c <ld_dword>
 801d42a:	4602      	mov	r2, r0
 801d42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d42e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d432:	3338      	adds	r3, #56	@ 0x38
 801d434:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d438:	4618      	mov	r0, r3
 801d43a:	f7fd fde7 	bl	801b00c <ld_dword>
 801d43e:	4602      	mov	r2, r0
 801d440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d442:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d446:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d44a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d44c:	4b0c      	ldr	r3, [pc, #48]	@ (801d480 <find_volume+0x504>)
 801d44e:	881b      	ldrh	r3, [r3, #0]
 801d450:	3301      	adds	r3, #1
 801d452:	b29a      	uxth	r2, r3
 801d454:	4b0a      	ldr	r3, [pc, #40]	@ (801d480 <find_volume+0x504>)
 801d456:	801a      	strh	r2, [r3, #0]
 801d458:	4b09      	ldr	r3, [pc, #36]	@ (801d480 <find_volume+0x504>)
 801d45a:	881a      	ldrh	r2, [r3, #0]
 801d45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d45e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801d460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d462:	4a08      	ldr	r2, [pc, #32]	@ (801d484 <find_volume+0x508>)
 801d464:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d466:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d468:	f7fe f800 	bl	801b46c <clear_lock>
#endif
	return FR_OK;
 801d46c:	2300      	movs	r3, #0
}
 801d46e:	4618      	mov	r0, r3
 801d470:	3758      	adds	r7, #88	@ 0x58
 801d472:	46bd      	mov	sp, r7
 801d474:	bd80      	pop	{r7, pc}
 801d476:	bf00      	nop
 801d478:	41615252 	.word	0x41615252
 801d47c:	61417272 	.word	0x61417272
 801d480:	24000554 	.word	0x24000554
 801d484:	24000568 	.word	0x24000568

0801d488 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d488:	b580      	push	{r7, lr}
 801d48a:	b084      	sub	sp, #16
 801d48c:	af00      	add	r7, sp, #0
 801d48e:	6078      	str	r0, [r7, #4]
 801d490:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d492:	2309      	movs	r3, #9
 801d494:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d01c      	beq.n	801d4d6 <validate+0x4e>
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d018      	beq.n	801d4d6 <validate+0x4e>
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	781b      	ldrb	r3, [r3, #0]
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d013      	beq.n	801d4d6 <validate+0x4e>
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	889a      	ldrh	r2, [r3, #4]
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	88db      	ldrh	r3, [r3, #6]
 801d4b8:	429a      	cmp	r2, r3
 801d4ba:	d10c      	bne.n	801d4d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	785b      	ldrb	r3, [r3, #1]
 801d4c2:	4618      	mov	r0, r3
 801d4c4:	f7fd fcea 	bl	801ae9c <disk_status>
 801d4c8:	4603      	mov	r3, r0
 801d4ca:	f003 0301 	and.w	r3, r3, #1
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	d101      	bne.n	801d4d6 <validate+0x4e>
			res = FR_OK;
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d4d6:	7bfb      	ldrb	r3, [r7, #15]
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d102      	bne.n	801d4e2 <validate+0x5a>
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	e000      	b.n	801d4e4 <validate+0x5c>
 801d4e2:	2300      	movs	r3, #0
 801d4e4:	683a      	ldr	r2, [r7, #0]
 801d4e6:	6013      	str	r3, [r2, #0]
	return res;
 801d4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d4ea:	4618      	mov	r0, r3
 801d4ec:	3710      	adds	r7, #16
 801d4ee:	46bd      	mov	sp, r7
 801d4f0:	bd80      	pop	{r7, pc}
	...

0801d4f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d4f4:	b580      	push	{r7, lr}
 801d4f6:	b088      	sub	sp, #32
 801d4f8:	af00      	add	r7, sp, #0
 801d4fa:	60f8      	str	r0, [r7, #12]
 801d4fc:	60b9      	str	r1, [r7, #8]
 801d4fe:	4613      	mov	r3, r2
 801d500:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d502:	68bb      	ldr	r3, [r7, #8]
 801d504:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d506:	f107 0310 	add.w	r3, r7, #16
 801d50a:	4618      	mov	r0, r3
 801d50c:	f7ff fc9c 	bl	801ce48 <get_ldnumber>
 801d510:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d512:	69fb      	ldr	r3, [r7, #28]
 801d514:	2b00      	cmp	r3, #0
 801d516:	da01      	bge.n	801d51c <f_mount+0x28>
 801d518:	230b      	movs	r3, #11
 801d51a:	e02b      	b.n	801d574 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d51c:	4a17      	ldr	r2, [pc, #92]	@ (801d57c <f_mount+0x88>)
 801d51e:	69fb      	ldr	r3, [r7, #28]
 801d520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d524:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d526:	69bb      	ldr	r3, [r7, #24]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d005      	beq.n	801d538 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d52c:	69b8      	ldr	r0, [r7, #24]
 801d52e:	f7fd ff9d 	bl	801b46c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d532:	69bb      	ldr	r3, [r7, #24]
 801d534:	2200      	movs	r2, #0
 801d536:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d538:	68fb      	ldr	r3, [r7, #12]
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d002      	beq.n	801d544 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	2200      	movs	r2, #0
 801d542:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d544:	68fa      	ldr	r2, [r7, #12]
 801d546:	490d      	ldr	r1, [pc, #52]	@ (801d57c <f_mount+0x88>)
 801d548:	69fb      	ldr	r3, [r7, #28]
 801d54a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	2b00      	cmp	r3, #0
 801d552:	d002      	beq.n	801d55a <f_mount+0x66>
 801d554:	79fb      	ldrb	r3, [r7, #7]
 801d556:	2b01      	cmp	r3, #1
 801d558:	d001      	beq.n	801d55e <f_mount+0x6a>
 801d55a:	2300      	movs	r3, #0
 801d55c:	e00a      	b.n	801d574 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d55e:	f107 010c 	add.w	r1, r7, #12
 801d562:	f107 0308 	add.w	r3, r7, #8
 801d566:	2200      	movs	r2, #0
 801d568:	4618      	mov	r0, r3
 801d56a:	f7ff fd07 	bl	801cf7c <find_volume>
 801d56e:	4603      	mov	r3, r0
 801d570:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d572:	7dfb      	ldrb	r3, [r7, #23]
}
 801d574:	4618      	mov	r0, r3
 801d576:	3720      	adds	r7, #32
 801d578:	46bd      	mov	sp, r7
 801d57a:	bd80      	pop	{r7, pc}
 801d57c:	24000550 	.word	0x24000550

0801d580 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d580:	b580      	push	{r7, lr}
 801d582:	b09a      	sub	sp, #104	@ 0x68
 801d584:	af00      	add	r7, sp, #0
 801d586:	60f8      	str	r0, [r7, #12]
 801d588:	60b9      	str	r1, [r7, #8]
 801d58a:	4613      	mov	r3, r2
 801d58c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	2b00      	cmp	r3, #0
 801d592:	d101      	bne.n	801d598 <f_open+0x18>
 801d594:	2309      	movs	r3, #9
 801d596:	e1b7      	b.n	801d908 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d598:	79fb      	ldrb	r3, [r7, #7]
 801d59a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d59e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d5a0:	79fa      	ldrb	r2, [r7, #7]
 801d5a2:	f107 0114 	add.w	r1, r7, #20
 801d5a6:	f107 0308 	add.w	r3, r7, #8
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	f7ff fce6 	bl	801cf7c <find_volume>
 801d5b0:	4603      	mov	r3, r0
 801d5b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d5b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	f040 819b 	bne.w	801d8f6 <f_open+0x376>
		dj.obj.fs = fs;
 801d5c0:	697b      	ldr	r3, [r7, #20]
 801d5c2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d5c4:	68ba      	ldr	r2, [r7, #8]
 801d5c6:	f107 0318 	add.w	r3, r7, #24
 801d5ca:	4611      	mov	r1, r2
 801d5cc:	4618      	mov	r0, r3
 801d5ce:	f7ff fbc5 	bl	801cd5c <follow_path>
 801d5d2:	4603      	mov	r3, r0
 801d5d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d5d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	d118      	bne.n	801d612 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d5e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d5e4:	b25b      	sxtb	r3, r3
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	da03      	bge.n	801d5f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801d5ea:	2306      	movs	r3, #6
 801d5ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d5f0:	e00f      	b.n	801d612 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d5f2:	79fb      	ldrb	r3, [r7, #7]
 801d5f4:	2b01      	cmp	r3, #1
 801d5f6:	bf8c      	ite	hi
 801d5f8:	2301      	movhi	r3, #1
 801d5fa:	2300      	movls	r3, #0
 801d5fc:	b2db      	uxtb	r3, r3
 801d5fe:	461a      	mov	r2, r3
 801d600:	f107 0318 	add.w	r3, r7, #24
 801d604:	4611      	mov	r1, r2
 801d606:	4618      	mov	r0, r3
 801d608:	f7fd fde8 	bl	801b1dc <chk_lock>
 801d60c:	4603      	mov	r3, r0
 801d60e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d612:	79fb      	ldrb	r3, [r7, #7]
 801d614:	f003 031c 	and.w	r3, r3, #28
 801d618:	2b00      	cmp	r3, #0
 801d61a:	d07f      	beq.n	801d71c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d61c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d620:	2b00      	cmp	r3, #0
 801d622:	d017      	beq.n	801d654 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d624:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d628:	2b04      	cmp	r3, #4
 801d62a:	d10e      	bne.n	801d64a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d62c:	f7fd fe32 	bl	801b294 <enq_lock>
 801d630:	4603      	mov	r3, r0
 801d632:	2b00      	cmp	r3, #0
 801d634:	d006      	beq.n	801d644 <f_open+0xc4>
 801d636:	f107 0318 	add.w	r3, r7, #24
 801d63a:	4618      	mov	r0, r3
 801d63c:	f7ff f894 	bl	801c768 <dir_register>
 801d640:	4603      	mov	r3, r0
 801d642:	e000      	b.n	801d646 <f_open+0xc6>
 801d644:	2312      	movs	r3, #18
 801d646:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d64a:	79fb      	ldrb	r3, [r7, #7]
 801d64c:	f043 0308 	orr.w	r3, r3, #8
 801d650:	71fb      	strb	r3, [r7, #7]
 801d652:	e010      	b.n	801d676 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d654:	7fbb      	ldrb	r3, [r7, #30]
 801d656:	f003 0311 	and.w	r3, r3, #17
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	d003      	beq.n	801d666 <f_open+0xe6>
					res = FR_DENIED;
 801d65e:	2307      	movs	r3, #7
 801d660:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d664:	e007      	b.n	801d676 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d666:	79fb      	ldrb	r3, [r7, #7]
 801d668:	f003 0304 	and.w	r3, r3, #4
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	d002      	beq.n	801d676 <f_open+0xf6>
 801d670:	2308      	movs	r3, #8
 801d672:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d676:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d168      	bne.n	801d750 <f_open+0x1d0>
 801d67e:	79fb      	ldrb	r3, [r7, #7]
 801d680:	f003 0308 	and.w	r3, r3, #8
 801d684:	2b00      	cmp	r3, #0
 801d686:	d063      	beq.n	801d750 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d688:	f7fd fbaa 	bl	801ade0 <get_fattime>
 801d68c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d690:	330e      	adds	r3, #14
 801d692:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d694:	4618      	mov	r0, r3
 801d696:	f7fd fcf7 	bl	801b088 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d69c:	3316      	adds	r3, #22
 801d69e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d6a0:	4618      	mov	r0, r3
 801d6a2:	f7fd fcf1 	bl	801b088 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6a8:	330b      	adds	r3, #11
 801d6aa:	2220      	movs	r2, #32
 801d6ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d6ae:	697b      	ldr	r3, [r7, #20]
 801d6b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d6b2:	4611      	mov	r1, r2
 801d6b4:	4618      	mov	r0, r3
 801d6b6:	f7fe fcc6 	bl	801c046 <ld_clust>
 801d6ba:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d6bc:	697b      	ldr	r3, [r7, #20]
 801d6be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d6c0:	2200      	movs	r2, #0
 801d6c2:	4618      	mov	r0, r3
 801d6c4:	f7fe fcde 	bl	801c084 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6ca:	331c      	adds	r3, #28
 801d6cc:	2100      	movs	r1, #0
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	f7fd fcda 	bl	801b088 <st_dword>
					fs->wflag = 1;
 801d6d4:	697b      	ldr	r3, [r7, #20]
 801d6d6:	2201      	movs	r2, #1
 801d6d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d6da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	d037      	beq.n	801d750 <f_open+0x1d0>
						dw = fs->winsect;
 801d6e0:	697b      	ldr	r3, [r7, #20]
 801d6e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d6e4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d6e6:	f107 0318 	add.w	r3, r7, #24
 801d6ea:	2200      	movs	r2, #0
 801d6ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	f7fe f9ce 	bl	801ba90 <remove_chain>
 801d6f4:	4603      	mov	r3, r0
 801d6f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d6fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d6fe:	2b00      	cmp	r3, #0
 801d700:	d126      	bne.n	801d750 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d702:	697b      	ldr	r3, [r7, #20]
 801d704:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d706:	4618      	mov	r0, r3
 801d708:	f7fd ff18 	bl	801b53c <move_window>
 801d70c:	4603      	mov	r3, r0
 801d70e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d712:	697b      	ldr	r3, [r7, #20]
 801d714:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d716:	3a01      	subs	r2, #1
 801d718:	615a      	str	r2, [r3, #20]
 801d71a:	e019      	b.n	801d750 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d71c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d720:	2b00      	cmp	r3, #0
 801d722:	d115      	bne.n	801d750 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d724:	7fbb      	ldrb	r3, [r7, #30]
 801d726:	f003 0310 	and.w	r3, r3, #16
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d003      	beq.n	801d736 <f_open+0x1b6>
					res = FR_NO_FILE;
 801d72e:	2304      	movs	r3, #4
 801d730:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d734:	e00c      	b.n	801d750 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d736:	79fb      	ldrb	r3, [r7, #7]
 801d738:	f003 0302 	and.w	r3, r3, #2
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d007      	beq.n	801d750 <f_open+0x1d0>
 801d740:	7fbb      	ldrb	r3, [r7, #30]
 801d742:	f003 0301 	and.w	r3, r3, #1
 801d746:	2b00      	cmp	r3, #0
 801d748:	d002      	beq.n	801d750 <f_open+0x1d0>
						res = FR_DENIED;
 801d74a:	2307      	movs	r3, #7
 801d74c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d750:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d754:	2b00      	cmp	r3, #0
 801d756:	d126      	bne.n	801d7a6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d758:	79fb      	ldrb	r3, [r7, #7]
 801d75a:	f003 0308 	and.w	r3, r3, #8
 801d75e:	2b00      	cmp	r3, #0
 801d760:	d003      	beq.n	801d76a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d762:	79fb      	ldrb	r3, [r7, #7]
 801d764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d768:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d76a:	697b      	ldr	r3, [r7, #20]
 801d76c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d772:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d778:	79fb      	ldrb	r3, [r7, #7]
 801d77a:	2b01      	cmp	r3, #1
 801d77c:	bf8c      	ite	hi
 801d77e:	2301      	movhi	r3, #1
 801d780:	2300      	movls	r3, #0
 801d782:	b2db      	uxtb	r3, r3
 801d784:	461a      	mov	r2, r3
 801d786:	f107 0318 	add.w	r3, r7, #24
 801d78a:	4611      	mov	r1, r2
 801d78c:	4618      	mov	r0, r3
 801d78e:	f7fd fda3 	bl	801b2d8 <inc_lock>
 801d792:	4602      	mov	r2, r0
 801d794:	68fb      	ldr	r3, [r7, #12]
 801d796:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d798:	68fb      	ldr	r3, [r7, #12]
 801d79a:	691b      	ldr	r3, [r3, #16]
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	d102      	bne.n	801d7a6 <f_open+0x226>
 801d7a0:	2302      	movs	r3, #2
 801d7a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d7a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	f040 80a3 	bne.w	801d8f6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d7b0:	697b      	ldr	r3, [r7, #20]
 801d7b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d7b4:	4611      	mov	r1, r2
 801d7b6:	4618      	mov	r0, r3
 801d7b8:	f7fe fc45 	bl	801c046 <ld_clust>
 801d7bc:	4602      	mov	r2, r0
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7c4:	331c      	adds	r3, #28
 801d7c6:	4618      	mov	r0, r3
 801d7c8:	f7fd fc20 	bl	801b00c <ld_dword>
 801d7cc:	4602      	mov	r2, r0
 801d7ce:	68fb      	ldr	r3, [r7, #12]
 801d7d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d7d2:	68fb      	ldr	r3, [r7, #12]
 801d7d4:	2200      	movs	r2, #0
 801d7d6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d7d8:	697a      	ldr	r2, [r7, #20]
 801d7da:	68fb      	ldr	r3, [r7, #12]
 801d7dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d7de:	697b      	ldr	r3, [r7, #20]
 801d7e0:	88da      	ldrh	r2, [r3, #6]
 801d7e2:	68fb      	ldr	r3, [r7, #12]
 801d7e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d7e6:	68fb      	ldr	r3, [r7, #12]
 801d7e8:	79fa      	ldrb	r2, [r7, #7]
 801d7ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	2200      	movs	r2, #0
 801d7f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d7f2:	68fb      	ldr	r3, [r7, #12]
 801d7f4:	2200      	movs	r2, #0
 801d7f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	2200      	movs	r2, #0
 801d7fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d7fe:	68fb      	ldr	r3, [r7, #12]
 801d800:	3330      	adds	r3, #48	@ 0x30
 801d802:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d806:	2100      	movs	r1, #0
 801d808:	4618      	mov	r0, r3
 801d80a:	f7fd fc8a 	bl	801b122 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d80e:	79fb      	ldrb	r3, [r7, #7]
 801d810:	f003 0320 	and.w	r3, r3, #32
 801d814:	2b00      	cmp	r3, #0
 801d816:	d06e      	beq.n	801d8f6 <f_open+0x376>
 801d818:	68fb      	ldr	r3, [r7, #12]
 801d81a:	68db      	ldr	r3, [r3, #12]
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d06a      	beq.n	801d8f6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d820:	68fb      	ldr	r3, [r7, #12]
 801d822:	68da      	ldr	r2, [r3, #12]
 801d824:	68fb      	ldr	r3, [r7, #12]
 801d826:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d828:	697b      	ldr	r3, [r7, #20]
 801d82a:	895b      	ldrh	r3, [r3, #10]
 801d82c:	461a      	mov	r2, r3
 801d82e:	697b      	ldr	r3, [r7, #20]
 801d830:	899b      	ldrh	r3, [r3, #12]
 801d832:	fb02 f303 	mul.w	r3, r2, r3
 801d836:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	689b      	ldr	r3, [r3, #8]
 801d83c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	68db      	ldr	r3, [r3, #12]
 801d842:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d844:	e016      	b.n	801d874 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d846:	68fb      	ldr	r3, [r7, #12]
 801d848:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d84a:	4618      	mov	r0, r3
 801d84c:	f7fd ff33 	bl	801b6b6 <get_fat>
 801d850:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d854:	2b01      	cmp	r3, #1
 801d856:	d802      	bhi.n	801d85e <f_open+0x2de>
 801d858:	2302      	movs	r3, #2
 801d85a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d85e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d860:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d864:	d102      	bne.n	801d86c <f_open+0x2ec>
 801d866:	2301      	movs	r3, #1
 801d868:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d86c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d86e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d870:	1ad3      	subs	r3, r2, r3
 801d872:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d874:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d103      	bne.n	801d884 <f_open+0x304>
 801d87c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d87e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d880:	429a      	cmp	r2, r3
 801d882:	d8e0      	bhi.n	801d846 <f_open+0x2c6>
				}
				fp->clust = clst;
 801d884:	68fb      	ldr	r3, [r7, #12]
 801d886:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d888:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d88a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d88e:	2b00      	cmp	r3, #0
 801d890:	d131      	bne.n	801d8f6 <f_open+0x376>
 801d892:	697b      	ldr	r3, [r7, #20]
 801d894:	899b      	ldrh	r3, [r3, #12]
 801d896:	461a      	mov	r2, r3
 801d898:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d89a:	fbb3 f1f2 	udiv	r1, r3, r2
 801d89e:	fb01 f202 	mul.w	r2, r1, r2
 801d8a2:	1a9b      	subs	r3, r3, r2
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d026      	beq.n	801d8f6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d8a8:	697b      	ldr	r3, [r7, #20]
 801d8aa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d8ac:	4618      	mov	r0, r3
 801d8ae:	f7fd fee3 	bl	801b678 <clust2sect>
 801d8b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d8b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d103      	bne.n	801d8c2 <f_open+0x342>
						res = FR_INT_ERR;
 801d8ba:	2302      	movs	r3, #2
 801d8bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d8c0:	e019      	b.n	801d8f6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d8c2:	697b      	ldr	r3, [r7, #20]
 801d8c4:	899b      	ldrh	r3, [r3, #12]
 801d8c6:	461a      	mov	r2, r3
 801d8c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d8ca:	fbb3 f2f2 	udiv	r2, r3, r2
 801d8ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d8d0:	441a      	add	r2, r3
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d8d6:	697b      	ldr	r3, [r7, #20]
 801d8d8:	7858      	ldrb	r0, [r3, #1]
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d8e0:	68fb      	ldr	r3, [r7, #12]
 801d8e2:	6a1a      	ldr	r2, [r3, #32]
 801d8e4:	2301      	movs	r3, #1
 801d8e6:	f7fd fb1b 	bl	801af20 <disk_read>
 801d8ea:	4603      	mov	r3, r0
 801d8ec:	2b00      	cmp	r3, #0
 801d8ee:	d002      	beq.n	801d8f6 <f_open+0x376>
 801d8f0:	2301      	movs	r3, #1
 801d8f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d8f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d002      	beq.n	801d904 <f_open+0x384>
 801d8fe:	68fb      	ldr	r3, [r7, #12]
 801d900:	2200      	movs	r2, #0
 801d902:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d904:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d908:	4618      	mov	r0, r3
 801d90a:	3768      	adds	r7, #104	@ 0x68
 801d90c:	46bd      	mov	sp, r7
 801d90e:	bd80      	pop	{r7, pc}

0801d910 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d910:	b580      	push	{r7, lr}
 801d912:	b08c      	sub	sp, #48	@ 0x30
 801d914:	af00      	add	r7, sp, #0
 801d916:	60f8      	str	r0, [r7, #12]
 801d918:	60b9      	str	r1, [r7, #8]
 801d91a:	607a      	str	r2, [r7, #4]
 801d91c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d91e:	68bb      	ldr	r3, [r7, #8]
 801d920:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d922:	683b      	ldr	r3, [r7, #0]
 801d924:	2200      	movs	r2, #0
 801d926:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d928:	68fb      	ldr	r3, [r7, #12]
 801d92a:	f107 0210 	add.w	r2, r7, #16
 801d92e:	4611      	mov	r1, r2
 801d930:	4618      	mov	r0, r3
 801d932:	f7ff fda9 	bl	801d488 <validate>
 801d936:	4603      	mov	r3, r0
 801d938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d93c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d940:	2b00      	cmp	r3, #0
 801d942:	d107      	bne.n	801d954 <f_write+0x44>
 801d944:	68fb      	ldr	r3, [r7, #12]
 801d946:	7d5b      	ldrb	r3, [r3, #21]
 801d948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d94c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d950:	2b00      	cmp	r3, #0
 801d952:	d002      	beq.n	801d95a <f_write+0x4a>
 801d954:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d958:	e16a      	b.n	801dc30 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	7d1b      	ldrb	r3, [r3, #20]
 801d95e:	f003 0302 	and.w	r3, r3, #2
 801d962:	2b00      	cmp	r3, #0
 801d964:	d101      	bne.n	801d96a <f_write+0x5a>
 801d966:	2307      	movs	r3, #7
 801d968:	e162      	b.n	801dc30 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	699a      	ldr	r2, [r3, #24]
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	441a      	add	r2, r3
 801d972:	68fb      	ldr	r3, [r7, #12]
 801d974:	699b      	ldr	r3, [r3, #24]
 801d976:	429a      	cmp	r2, r3
 801d978:	f080 814c 	bcs.w	801dc14 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d97c:	68fb      	ldr	r3, [r7, #12]
 801d97e:	699b      	ldr	r3, [r3, #24]
 801d980:	43db      	mvns	r3, r3
 801d982:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d984:	e146      	b.n	801dc14 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	699b      	ldr	r3, [r3, #24]
 801d98a:	693a      	ldr	r2, [r7, #16]
 801d98c:	8992      	ldrh	r2, [r2, #12]
 801d98e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d992:	fb01 f202 	mul.w	r2, r1, r2
 801d996:	1a9b      	subs	r3, r3, r2
 801d998:	2b00      	cmp	r3, #0
 801d99a:	f040 80f1 	bne.w	801db80 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	699b      	ldr	r3, [r3, #24]
 801d9a2:	693a      	ldr	r2, [r7, #16]
 801d9a4:	8992      	ldrh	r2, [r2, #12]
 801d9a6:	fbb3 f3f2 	udiv	r3, r3, r2
 801d9aa:	693a      	ldr	r2, [r7, #16]
 801d9ac:	8952      	ldrh	r2, [r2, #10]
 801d9ae:	3a01      	subs	r2, #1
 801d9b0:	4013      	ands	r3, r2
 801d9b2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d9b4:	69bb      	ldr	r3, [r7, #24]
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d143      	bne.n	801da42 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d9ba:	68fb      	ldr	r3, [r7, #12]
 801d9bc:	699b      	ldr	r3, [r3, #24]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d10c      	bne.n	801d9dc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	689b      	ldr	r3, [r3, #8]
 801d9c6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d11a      	bne.n	801da04 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d9ce:	68fb      	ldr	r3, [r7, #12]
 801d9d0:	2100      	movs	r1, #0
 801d9d2:	4618      	mov	r0, r3
 801d9d4:	f7fe f8c1 	bl	801bb5a <create_chain>
 801d9d8:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d9da:	e013      	b.n	801da04 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d9dc:	68fb      	ldr	r3, [r7, #12]
 801d9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d007      	beq.n	801d9f4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	699b      	ldr	r3, [r3, #24]
 801d9e8:	4619      	mov	r1, r3
 801d9ea:	68f8      	ldr	r0, [r7, #12]
 801d9ec:	f7fe f94d 	bl	801bc8a <clmt_clust>
 801d9f0:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d9f2:	e007      	b.n	801da04 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d9f4:	68fa      	ldr	r2, [r7, #12]
 801d9f6:	68fb      	ldr	r3, [r7, #12]
 801d9f8:	69db      	ldr	r3, [r3, #28]
 801d9fa:	4619      	mov	r1, r3
 801d9fc:	4610      	mov	r0, r2
 801d9fe:	f7fe f8ac 	bl	801bb5a <create_chain>
 801da02:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801da04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da06:	2b00      	cmp	r3, #0
 801da08:	f000 8109 	beq.w	801dc1e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801da0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da0e:	2b01      	cmp	r3, #1
 801da10:	d104      	bne.n	801da1c <f_write+0x10c>
 801da12:	68fb      	ldr	r3, [r7, #12]
 801da14:	2202      	movs	r2, #2
 801da16:	755a      	strb	r2, [r3, #21]
 801da18:	2302      	movs	r3, #2
 801da1a:	e109      	b.n	801dc30 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801da1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da22:	d104      	bne.n	801da2e <f_write+0x11e>
 801da24:	68fb      	ldr	r3, [r7, #12]
 801da26:	2201      	movs	r2, #1
 801da28:	755a      	strb	r2, [r3, #21]
 801da2a:	2301      	movs	r3, #1
 801da2c:	e100      	b.n	801dc30 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da32:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	689b      	ldr	r3, [r3, #8]
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d102      	bne.n	801da42 <f_write+0x132>
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801da40:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801da42:	68fb      	ldr	r3, [r7, #12]
 801da44:	7d1b      	ldrb	r3, [r3, #20]
 801da46:	b25b      	sxtb	r3, r3
 801da48:	2b00      	cmp	r3, #0
 801da4a:	da18      	bge.n	801da7e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801da4c:	693b      	ldr	r3, [r7, #16]
 801da4e:	7858      	ldrb	r0, [r3, #1]
 801da50:	68fb      	ldr	r3, [r7, #12]
 801da52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801da56:	68fb      	ldr	r3, [r7, #12]
 801da58:	6a1a      	ldr	r2, [r3, #32]
 801da5a:	2301      	movs	r3, #1
 801da5c:	f7fd fa80 	bl	801af60 <disk_write>
 801da60:	4603      	mov	r3, r0
 801da62:	2b00      	cmp	r3, #0
 801da64:	d004      	beq.n	801da70 <f_write+0x160>
 801da66:	68fb      	ldr	r3, [r7, #12]
 801da68:	2201      	movs	r2, #1
 801da6a:	755a      	strb	r2, [r3, #21]
 801da6c:	2301      	movs	r3, #1
 801da6e:	e0df      	b.n	801dc30 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	7d1b      	ldrb	r3, [r3, #20]
 801da74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801da78:	b2da      	uxtb	r2, r3
 801da7a:	68fb      	ldr	r3, [r7, #12]
 801da7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801da7e:	693a      	ldr	r2, [r7, #16]
 801da80:	68fb      	ldr	r3, [r7, #12]
 801da82:	69db      	ldr	r3, [r3, #28]
 801da84:	4619      	mov	r1, r3
 801da86:	4610      	mov	r0, r2
 801da88:	f7fd fdf6 	bl	801b678 <clust2sect>
 801da8c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801da8e:	697b      	ldr	r3, [r7, #20]
 801da90:	2b00      	cmp	r3, #0
 801da92:	d104      	bne.n	801da9e <f_write+0x18e>
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	2202      	movs	r2, #2
 801da98:	755a      	strb	r2, [r3, #21]
 801da9a:	2302      	movs	r3, #2
 801da9c:	e0c8      	b.n	801dc30 <f_write+0x320>
			sect += csect;
 801da9e:	697a      	ldr	r2, [r7, #20]
 801daa0:	69bb      	ldr	r3, [r7, #24]
 801daa2:	4413      	add	r3, r2
 801daa4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801daa6:	693b      	ldr	r3, [r7, #16]
 801daa8:	899b      	ldrh	r3, [r3, #12]
 801daaa:	461a      	mov	r2, r3
 801daac:	687b      	ldr	r3, [r7, #4]
 801daae:	fbb3 f3f2 	udiv	r3, r3, r2
 801dab2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801dab4:	6a3b      	ldr	r3, [r7, #32]
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d043      	beq.n	801db42 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801daba:	69ba      	ldr	r2, [r7, #24]
 801dabc:	6a3b      	ldr	r3, [r7, #32]
 801dabe:	4413      	add	r3, r2
 801dac0:	693a      	ldr	r2, [r7, #16]
 801dac2:	8952      	ldrh	r2, [r2, #10]
 801dac4:	4293      	cmp	r3, r2
 801dac6:	d905      	bls.n	801dad4 <f_write+0x1c4>
					cc = fs->csize - csect;
 801dac8:	693b      	ldr	r3, [r7, #16]
 801daca:	895b      	ldrh	r3, [r3, #10]
 801dacc:	461a      	mov	r2, r3
 801dace:	69bb      	ldr	r3, [r7, #24]
 801dad0:	1ad3      	subs	r3, r2, r3
 801dad2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801dad4:	693b      	ldr	r3, [r7, #16]
 801dad6:	7858      	ldrb	r0, [r3, #1]
 801dad8:	6a3b      	ldr	r3, [r7, #32]
 801dada:	697a      	ldr	r2, [r7, #20]
 801dadc:	69f9      	ldr	r1, [r7, #28]
 801dade:	f7fd fa3f 	bl	801af60 <disk_write>
 801dae2:	4603      	mov	r3, r0
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d004      	beq.n	801daf2 <f_write+0x1e2>
 801dae8:	68fb      	ldr	r3, [r7, #12]
 801daea:	2201      	movs	r2, #1
 801daec:	755a      	strb	r2, [r3, #21]
 801daee:	2301      	movs	r3, #1
 801daf0:	e09e      	b.n	801dc30 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801daf2:	68fb      	ldr	r3, [r7, #12]
 801daf4:	6a1a      	ldr	r2, [r3, #32]
 801daf6:	697b      	ldr	r3, [r7, #20]
 801daf8:	1ad3      	subs	r3, r2, r3
 801dafa:	6a3a      	ldr	r2, [r7, #32]
 801dafc:	429a      	cmp	r2, r3
 801dafe:	d918      	bls.n	801db32 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801db00:	68fb      	ldr	r3, [r7, #12]
 801db02:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	6a1a      	ldr	r2, [r3, #32]
 801db0a:	697b      	ldr	r3, [r7, #20]
 801db0c:	1ad3      	subs	r3, r2, r3
 801db0e:	693a      	ldr	r2, [r7, #16]
 801db10:	8992      	ldrh	r2, [r2, #12]
 801db12:	fb02 f303 	mul.w	r3, r2, r3
 801db16:	69fa      	ldr	r2, [r7, #28]
 801db18:	18d1      	adds	r1, r2, r3
 801db1a:	693b      	ldr	r3, [r7, #16]
 801db1c:	899b      	ldrh	r3, [r3, #12]
 801db1e:	461a      	mov	r2, r3
 801db20:	f7fd fade 	bl	801b0e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	7d1b      	ldrb	r3, [r3, #20]
 801db28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801db2c:	b2da      	uxtb	r2, r3
 801db2e:	68fb      	ldr	r3, [r7, #12]
 801db30:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801db32:	693b      	ldr	r3, [r7, #16]
 801db34:	899b      	ldrh	r3, [r3, #12]
 801db36:	461a      	mov	r2, r3
 801db38:	6a3b      	ldr	r3, [r7, #32]
 801db3a:	fb02 f303 	mul.w	r3, r2, r3
 801db3e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801db40:	e04b      	b.n	801dbda <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801db42:	68fb      	ldr	r3, [r7, #12]
 801db44:	6a1b      	ldr	r3, [r3, #32]
 801db46:	697a      	ldr	r2, [r7, #20]
 801db48:	429a      	cmp	r2, r3
 801db4a:	d016      	beq.n	801db7a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801db4c:	68fb      	ldr	r3, [r7, #12]
 801db4e:	699a      	ldr	r2, [r3, #24]
 801db50:	68fb      	ldr	r3, [r7, #12]
 801db52:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801db54:	429a      	cmp	r2, r3
 801db56:	d210      	bcs.n	801db7a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801db58:	693b      	ldr	r3, [r7, #16]
 801db5a:	7858      	ldrb	r0, [r3, #1]
 801db5c:	68fb      	ldr	r3, [r7, #12]
 801db5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801db62:	2301      	movs	r3, #1
 801db64:	697a      	ldr	r2, [r7, #20]
 801db66:	f7fd f9db 	bl	801af20 <disk_read>
 801db6a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d004      	beq.n	801db7a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801db70:	68fb      	ldr	r3, [r7, #12]
 801db72:	2201      	movs	r2, #1
 801db74:	755a      	strb	r2, [r3, #21]
 801db76:	2301      	movs	r3, #1
 801db78:	e05a      	b.n	801dc30 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801db7a:	68fb      	ldr	r3, [r7, #12]
 801db7c:	697a      	ldr	r2, [r7, #20]
 801db7e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801db80:	693b      	ldr	r3, [r7, #16]
 801db82:	899b      	ldrh	r3, [r3, #12]
 801db84:	4618      	mov	r0, r3
 801db86:	68fb      	ldr	r3, [r7, #12]
 801db88:	699b      	ldr	r3, [r3, #24]
 801db8a:	693a      	ldr	r2, [r7, #16]
 801db8c:	8992      	ldrh	r2, [r2, #12]
 801db8e:	fbb3 f1f2 	udiv	r1, r3, r2
 801db92:	fb01 f202 	mul.w	r2, r1, r2
 801db96:	1a9b      	subs	r3, r3, r2
 801db98:	1ac3      	subs	r3, r0, r3
 801db9a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801db9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	429a      	cmp	r2, r3
 801dba2:	d901      	bls.n	801dba8 <f_write+0x298>
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801dba8:	68fb      	ldr	r3, [r7, #12]
 801dbaa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dbae:	68fb      	ldr	r3, [r7, #12]
 801dbb0:	699b      	ldr	r3, [r3, #24]
 801dbb2:	693a      	ldr	r2, [r7, #16]
 801dbb4:	8992      	ldrh	r2, [r2, #12]
 801dbb6:	fbb3 f0f2 	udiv	r0, r3, r2
 801dbba:	fb00 f202 	mul.w	r2, r0, r2
 801dbbe:	1a9b      	subs	r3, r3, r2
 801dbc0:	440b      	add	r3, r1
 801dbc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dbc4:	69f9      	ldr	r1, [r7, #28]
 801dbc6:	4618      	mov	r0, r3
 801dbc8:	f7fd fa8a 	bl	801b0e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801dbcc:	68fb      	ldr	r3, [r7, #12]
 801dbce:	7d1b      	ldrb	r3, [r3, #20]
 801dbd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801dbd4:	b2da      	uxtb	r2, r3
 801dbd6:	68fb      	ldr	r3, [r7, #12]
 801dbd8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801dbda:	69fa      	ldr	r2, [r7, #28]
 801dbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbde:	4413      	add	r3, r2
 801dbe0:	61fb      	str	r3, [r7, #28]
 801dbe2:	68fb      	ldr	r3, [r7, #12]
 801dbe4:	699a      	ldr	r2, [r3, #24]
 801dbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbe8:	441a      	add	r2, r3
 801dbea:	68fb      	ldr	r3, [r7, #12]
 801dbec:	619a      	str	r2, [r3, #24]
 801dbee:	68fb      	ldr	r3, [r7, #12]
 801dbf0:	68da      	ldr	r2, [r3, #12]
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	699b      	ldr	r3, [r3, #24]
 801dbf6:	429a      	cmp	r2, r3
 801dbf8:	bf38      	it	cc
 801dbfa:	461a      	movcc	r2, r3
 801dbfc:	68fb      	ldr	r3, [r7, #12]
 801dbfe:	60da      	str	r2, [r3, #12]
 801dc00:	683b      	ldr	r3, [r7, #0]
 801dc02:	681a      	ldr	r2, [r3, #0]
 801dc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc06:	441a      	add	r2, r3
 801dc08:	683b      	ldr	r3, [r7, #0]
 801dc0a:	601a      	str	r2, [r3, #0]
 801dc0c:	687a      	ldr	r2, [r7, #4]
 801dc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc10:	1ad3      	subs	r3, r2, r3
 801dc12:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	f47f aeb5 	bne.w	801d986 <f_write+0x76>
 801dc1c:	e000      	b.n	801dc20 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801dc1e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801dc20:	68fb      	ldr	r3, [r7, #12]
 801dc22:	7d1b      	ldrb	r3, [r3, #20]
 801dc24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc28:	b2da      	uxtb	r2, r3
 801dc2a:	68fb      	ldr	r3, [r7, #12]
 801dc2c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801dc2e:	2300      	movs	r3, #0
}
 801dc30:	4618      	mov	r0, r3
 801dc32:	3730      	adds	r7, #48	@ 0x30
 801dc34:	46bd      	mov	sp, r7
 801dc36:	bd80      	pop	{r7, pc}

0801dc38 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801dc38:	b580      	push	{r7, lr}
 801dc3a:	b086      	sub	sp, #24
 801dc3c:	af00      	add	r7, sp, #0
 801dc3e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801dc40:	687b      	ldr	r3, [r7, #4]
 801dc42:	f107 0208 	add.w	r2, r7, #8
 801dc46:	4611      	mov	r1, r2
 801dc48:	4618      	mov	r0, r3
 801dc4a:	f7ff fc1d 	bl	801d488 <validate>
 801dc4e:	4603      	mov	r3, r0
 801dc50:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801dc52:	7dfb      	ldrb	r3, [r7, #23]
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d168      	bne.n	801dd2a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	7d1b      	ldrb	r3, [r3, #20]
 801dc5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	d062      	beq.n	801dd2a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	7d1b      	ldrb	r3, [r3, #20]
 801dc68:	b25b      	sxtb	r3, r3
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	da15      	bge.n	801dc9a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801dc6e:	68bb      	ldr	r3, [r7, #8]
 801dc70:	7858      	ldrb	r0, [r3, #1]
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	6a1a      	ldr	r2, [r3, #32]
 801dc7c:	2301      	movs	r3, #1
 801dc7e:	f7fd f96f 	bl	801af60 <disk_write>
 801dc82:	4603      	mov	r3, r0
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	d001      	beq.n	801dc8c <f_sync+0x54>
 801dc88:	2301      	movs	r3, #1
 801dc8a:	e04f      	b.n	801dd2c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	7d1b      	ldrb	r3, [r3, #20]
 801dc90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dc94:	b2da      	uxtb	r2, r3
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801dc9a:	f7fd f8a1 	bl	801ade0 <get_fattime>
 801dc9e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801dca0:	68ba      	ldr	r2, [r7, #8]
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dca6:	4619      	mov	r1, r3
 801dca8:	4610      	mov	r0, r2
 801dcaa:	f7fd fc47 	bl	801b53c <move_window>
 801dcae:	4603      	mov	r3, r0
 801dcb0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801dcb2:	7dfb      	ldrb	r3, [r7, #23]
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d138      	bne.n	801dd2a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dcbc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801dcbe:	68fb      	ldr	r3, [r7, #12]
 801dcc0:	330b      	adds	r3, #11
 801dcc2:	781a      	ldrb	r2, [r3, #0]
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	330b      	adds	r3, #11
 801dcc8:	f042 0220 	orr.w	r2, r2, #32
 801dccc:	b2d2      	uxtb	r2, r2
 801dcce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	6818      	ldr	r0, [r3, #0]
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	689b      	ldr	r3, [r3, #8]
 801dcd8:	461a      	mov	r2, r3
 801dcda:	68f9      	ldr	r1, [r7, #12]
 801dcdc:	f7fe f9d2 	bl	801c084 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801dce0:	68fb      	ldr	r3, [r7, #12]
 801dce2:	f103 021c 	add.w	r2, r3, #28
 801dce6:	687b      	ldr	r3, [r7, #4]
 801dce8:	68db      	ldr	r3, [r3, #12]
 801dcea:	4619      	mov	r1, r3
 801dcec:	4610      	mov	r0, r2
 801dcee:	f7fd f9cb 	bl	801b088 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801dcf2:	68fb      	ldr	r3, [r7, #12]
 801dcf4:	3316      	adds	r3, #22
 801dcf6:	6939      	ldr	r1, [r7, #16]
 801dcf8:	4618      	mov	r0, r3
 801dcfa:	f7fd f9c5 	bl	801b088 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801dcfe:	68fb      	ldr	r3, [r7, #12]
 801dd00:	3312      	adds	r3, #18
 801dd02:	2100      	movs	r1, #0
 801dd04:	4618      	mov	r0, r3
 801dd06:	f7fd f9a4 	bl	801b052 <st_word>
					fs->wflag = 1;
 801dd0a:	68bb      	ldr	r3, [r7, #8]
 801dd0c:	2201      	movs	r2, #1
 801dd0e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801dd10:	68bb      	ldr	r3, [r7, #8]
 801dd12:	4618      	mov	r0, r3
 801dd14:	f7fd fc40 	bl	801b598 <sync_fs>
 801dd18:	4603      	mov	r3, r0
 801dd1a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	7d1b      	ldrb	r3, [r3, #20]
 801dd20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dd24:	b2da      	uxtb	r2, r3
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801dd2a:	7dfb      	ldrb	r3, [r7, #23]
}
 801dd2c:	4618      	mov	r0, r3
 801dd2e:	3718      	adds	r7, #24
 801dd30:	46bd      	mov	sp, r7
 801dd32:	bd80      	pop	{r7, pc}

0801dd34 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801dd34:	b580      	push	{r7, lr}
 801dd36:	b084      	sub	sp, #16
 801dd38:	af00      	add	r7, sp, #0
 801dd3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801dd3c:	6878      	ldr	r0, [r7, #4]
 801dd3e:	f7ff ff7b 	bl	801dc38 <f_sync>
 801dd42:	4603      	mov	r3, r0
 801dd44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801dd46:	7bfb      	ldrb	r3, [r7, #15]
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d118      	bne.n	801dd7e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	f107 0208 	add.w	r2, r7, #8
 801dd52:	4611      	mov	r1, r2
 801dd54:	4618      	mov	r0, r3
 801dd56:	f7ff fb97 	bl	801d488 <validate>
 801dd5a:	4603      	mov	r3, r0
 801dd5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801dd5e:	7bfb      	ldrb	r3, [r7, #15]
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d10c      	bne.n	801dd7e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	691b      	ldr	r3, [r3, #16]
 801dd68:	4618      	mov	r0, r3
 801dd6a:	f7fd fb43 	bl	801b3f4 <dec_lock>
 801dd6e:	4603      	mov	r3, r0
 801dd70:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801dd72:	7bfb      	ldrb	r3, [r7, #15]
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d102      	bne.n	801dd7e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	2200      	movs	r2, #0
 801dd7c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801dd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd80:	4618      	mov	r0, r3
 801dd82:	3710      	adds	r7, #16
 801dd84:	46bd      	mov	sp, r7
 801dd86:	bd80      	pop	{r7, pc}

0801dd88 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801dd88:	b580      	push	{r7, lr}
 801dd8a:	b0a0      	sub	sp, #128	@ 0x80
 801dd8c:	af00      	add	r7, sp, #0
 801dd8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801dd90:	2300      	movs	r3, #0
 801dd92:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801dd94:	f107 010c 	add.w	r1, r7, #12
 801dd98:	1d3b      	adds	r3, r7, #4
 801dd9a:	2202      	movs	r2, #2
 801dd9c:	4618      	mov	r0, r3
 801dd9e:	f7ff f8ed 	bl	801cf7c <find_volume>
 801dda2:	4603      	mov	r3, r0
 801dda4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801dda8:	68fb      	ldr	r3, [r7, #12]
 801ddaa:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801ddac:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	f040 808e 	bne.w	801ded2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801ddb6:	687a      	ldr	r2, [r7, #4]
 801ddb8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddbc:	4611      	mov	r1, r2
 801ddbe:	4618      	mov	r0, r3
 801ddc0:	f7fe ffcc 	bl	801cd5c <follow_path>
 801ddc4:	4603      	mov	r3, r0
 801ddc6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801ddca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d108      	bne.n	801dde4 <f_unlink+0x5c>
 801ddd2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddd6:	2102      	movs	r1, #2
 801ddd8:	4618      	mov	r0, r3
 801ddda:	f7fd f9ff 	bl	801b1dc <chk_lock>
 801ddde:	4603      	mov	r3, r0
 801dde0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801dde4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d172      	bne.n	801ded2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801ddec:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801ddf0:	b25b      	sxtb	r3, r3
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	da03      	bge.n	801ddfe <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801ddf6:	2306      	movs	r3, #6
 801ddf8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801ddfc:	e008      	b.n	801de10 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801ddfe:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801de02:	f003 0301 	and.w	r3, r3, #1
 801de06:	2b00      	cmp	r3, #0
 801de08:	d002      	beq.n	801de10 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801de0a:	2307      	movs	r3, #7
 801de0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801de10:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de14:	2b00      	cmp	r3, #0
 801de16:	d134      	bne.n	801de82 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801de18:	68fb      	ldr	r3, [r7, #12]
 801de1a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801de1c:	4611      	mov	r1, r2
 801de1e:	4618      	mov	r0, r3
 801de20:	f7fe f911 	bl	801c046 <ld_clust>
 801de24:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801de26:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801de2a:	f003 0310 	and.w	r3, r3, #16
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d027      	beq.n	801de82 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801de36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801de38:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801de3a:	f107 0310 	add.w	r3, r7, #16
 801de3e:	2100      	movs	r1, #0
 801de40:	4618      	mov	r0, r3
 801de42:	f7fd ff5a 	bl	801bcfa <dir_sdi>
 801de46:	4603      	mov	r3, r0
 801de48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801de4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de50:	2b00      	cmp	r3, #0
 801de52:	d116      	bne.n	801de82 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801de54:	f107 0310 	add.w	r3, r7, #16
 801de58:	2100      	movs	r1, #0
 801de5a:	4618      	mov	r0, r3
 801de5c:	f7fe fb1d 	bl	801c49a <dir_read>
 801de60:	4603      	mov	r3, r0
 801de62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801de66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d102      	bne.n	801de74 <f_unlink+0xec>
 801de6e:	2307      	movs	r3, #7
 801de70:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801de74:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de78:	2b04      	cmp	r3, #4
 801de7a:	d102      	bne.n	801de82 <f_unlink+0xfa>
 801de7c:	2300      	movs	r3, #0
 801de7e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801de82:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de86:	2b00      	cmp	r3, #0
 801de88:	d123      	bne.n	801ded2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801de8a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801de8e:	4618      	mov	r0, r3
 801de90:	f7fe fd62 	bl	801c958 <dir_remove>
 801de94:	4603      	mov	r3, r0
 801de96:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801de9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d10c      	bne.n	801debc <f_unlink+0x134>
 801dea2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d009      	beq.n	801debc <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801dea8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801deac:	2200      	movs	r2, #0
 801deae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801deb0:	4618      	mov	r0, r3
 801deb2:	f7fd fded 	bl	801ba90 <remove_chain>
 801deb6:	4603      	mov	r3, r0
 801deb8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801debc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dec0:	2b00      	cmp	r3, #0
 801dec2:	d106      	bne.n	801ded2 <f_unlink+0x14a>
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	4618      	mov	r0, r3
 801dec8:	f7fd fb66 	bl	801b598 <sync_fs>
 801decc:	4603      	mov	r3, r0
 801dece:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801ded2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801ded6:	4618      	mov	r0, r3
 801ded8:	3780      	adds	r7, #128	@ 0x80
 801deda:	46bd      	mov	sp, r7
 801dedc:	bd80      	pop	{r7, pc}
	...

0801dee0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801dee0:	b480      	push	{r7}
 801dee2:	b087      	sub	sp, #28
 801dee4:	af00      	add	r7, sp, #0
 801dee6:	60f8      	str	r0, [r7, #12]
 801dee8:	60b9      	str	r1, [r7, #8]
 801deea:	4613      	mov	r3, r2
 801deec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801deee:	2301      	movs	r3, #1
 801def0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801def2:	2300      	movs	r3, #0
 801def4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801def6:	4b1f      	ldr	r3, [pc, #124]	@ (801df74 <FATFS_LinkDriverEx+0x94>)
 801def8:	7a5b      	ldrb	r3, [r3, #9]
 801defa:	b2db      	uxtb	r3, r3
 801defc:	2b00      	cmp	r3, #0
 801defe:	d131      	bne.n	801df64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801df00:	4b1c      	ldr	r3, [pc, #112]	@ (801df74 <FATFS_LinkDriverEx+0x94>)
 801df02:	7a5b      	ldrb	r3, [r3, #9]
 801df04:	b2db      	uxtb	r3, r3
 801df06:	461a      	mov	r2, r3
 801df08:	4b1a      	ldr	r3, [pc, #104]	@ (801df74 <FATFS_LinkDriverEx+0x94>)
 801df0a:	2100      	movs	r1, #0
 801df0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801df0e:	4b19      	ldr	r3, [pc, #100]	@ (801df74 <FATFS_LinkDriverEx+0x94>)
 801df10:	7a5b      	ldrb	r3, [r3, #9]
 801df12:	b2db      	uxtb	r3, r3
 801df14:	4a17      	ldr	r2, [pc, #92]	@ (801df74 <FATFS_LinkDriverEx+0x94>)
 801df16:	009b      	lsls	r3, r3, #2
 801df18:	4413      	add	r3, r2
 801df1a:	68fa      	ldr	r2, [r7, #12]
 801df1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801df1e:	4b15      	ldr	r3, [pc, #84]	@ (801df74 <FATFS_LinkDriverEx+0x94>)
 801df20:	7a5b      	ldrb	r3, [r3, #9]
 801df22:	b2db      	uxtb	r3, r3
 801df24:	461a      	mov	r2, r3
 801df26:	4b13      	ldr	r3, [pc, #76]	@ (801df74 <FATFS_LinkDriverEx+0x94>)
 801df28:	4413      	add	r3, r2
 801df2a:	79fa      	ldrb	r2, [r7, #7]
 801df2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801df2e:	4b11      	ldr	r3, [pc, #68]	@ (801df74 <FATFS_LinkDriverEx+0x94>)
 801df30:	7a5b      	ldrb	r3, [r3, #9]
 801df32:	b2db      	uxtb	r3, r3
 801df34:	1c5a      	adds	r2, r3, #1
 801df36:	b2d1      	uxtb	r1, r2
 801df38:	4a0e      	ldr	r2, [pc, #56]	@ (801df74 <FATFS_LinkDriverEx+0x94>)
 801df3a:	7251      	strb	r1, [r2, #9]
 801df3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801df3e:	7dbb      	ldrb	r3, [r7, #22]
 801df40:	3330      	adds	r3, #48	@ 0x30
 801df42:	b2da      	uxtb	r2, r3
 801df44:	68bb      	ldr	r3, [r7, #8]
 801df46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801df48:	68bb      	ldr	r3, [r7, #8]
 801df4a:	3301      	adds	r3, #1
 801df4c:	223a      	movs	r2, #58	@ 0x3a
 801df4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801df50:	68bb      	ldr	r3, [r7, #8]
 801df52:	3302      	adds	r3, #2
 801df54:	222f      	movs	r2, #47	@ 0x2f
 801df56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801df58:	68bb      	ldr	r3, [r7, #8]
 801df5a:	3303      	adds	r3, #3
 801df5c:	2200      	movs	r2, #0
 801df5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801df60:	2300      	movs	r3, #0
 801df62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801df64:	7dfb      	ldrb	r3, [r7, #23]
}
 801df66:	4618      	mov	r0, r3
 801df68:	371c      	adds	r7, #28
 801df6a:	46bd      	mov	sp, r7
 801df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df70:	4770      	bx	lr
 801df72:	bf00      	nop
 801df74:	24000768 	.word	0x24000768

0801df78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801df78:	b580      	push	{r7, lr}
 801df7a:	b082      	sub	sp, #8
 801df7c:	af00      	add	r7, sp, #0
 801df7e:	6078      	str	r0, [r7, #4]
 801df80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801df82:	2200      	movs	r2, #0
 801df84:	6839      	ldr	r1, [r7, #0]
 801df86:	6878      	ldr	r0, [r7, #4]
 801df88:	f7ff ffaa 	bl	801dee0 <FATFS_LinkDriverEx>
 801df8c:	4603      	mov	r3, r0
}
 801df8e:	4618      	mov	r0, r3
 801df90:	3708      	adds	r7, #8
 801df92:	46bd      	mov	sp, r7
 801df94:	bd80      	pop	{r7, pc}
	...

0801df98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801df98:	b480      	push	{r7}
 801df9a:	b085      	sub	sp, #20
 801df9c:	af00      	add	r7, sp, #0
 801df9e:	4603      	mov	r3, r0
 801dfa0:	6039      	str	r1, [r7, #0]
 801dfa2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801dfa4:	88fb      	ldrh	r3, [r7, #6]
 801dfa6:	2b7f      	cmp	r3, #127	@ 0x7f
 801dfa8:	d802      	bhi.n	801dfb0 <ff_convert+0x18>
		c = chr;
 801dfaa:	88fb      	ldrh	r3, [r7, #6]
 801dfac:	81fb      	strh	r3, [r7, #14]
 801dfae:	e025      	b.n	801dffc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801dfb0:	683b      	ldr	r3, [r7, #0]
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d00b      	beq.n	801dfce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801dfb6:	88fb      	ldrh	r3, [r7, #6]
 801dfb8:	2bff      	cmp	r3, #255	@ 0xff
 801dfba:	d805      	bhi.n	801dfc8 <ff_convert+0x30>
 801dfbc:	88fb      	ldrh	r3, [r7, #6]
 801dfbe:	3b80      	subs	r3, #128	@ 0x80
 801dfc0:	4a12      	ldr	r2, [pc, #72]	@ (801e00c <ff_convert+0x74>)
 801dfc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dfc6:	e000      	b.n	801dfca <ff_convert+0x32>
 801dfc8:	2300      	movs	r3, #0
 801dfca:	81fb      	strh	r3, [r7, #14]
 801dfcc:	e016      	b.n	801dffc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801dfce:	2300      	movs	r3, #0
 801dfd0:	81fb      	strh	r3, [r7, #14]
 801dfd2:	e009      	b.n	801dfe8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801dfd4:	89fb      	ldrh	r3, [r7, #14]
 801dfd6:	4a0d      	ldr	r2, [pc, #52]	@ (801e00c <ff_convert+0x74>)
 801dfd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801dfdc:	88fa      	ldrh	r2, [r7, #6]
 801dfde:	429a      	cmp	r2, r3
 801dfe0:	d006      	beq.n	801dff0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801dfe2:	89fb      	ldrh	r3, [r7, #14]
 801dfe4:	3301      	adds	r3, #1
 801dfe6:	81fb      	strh	r3, [r7, #14]
 801dfe8:	89fb      	ldrh	r3, [r7, #14]
 801dfea:	2b7f      	cmp	r3, #127	@ 0x7f
 801dfec:	d9f2      	bls.n	801dfd4 <ff_convert+0x3c>
 801dfee:	e000      	b.n	801dff2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801dff0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801dff2:	89fb      	ldrh	r3, [r7, #14]
 801dff4:	3380      	adds	r3, #128	@ 0x80
 801dff6:	b29b      	uxth	r3, r3
 801dff8:	b2db      	uxtb	r3, r3
 801dffa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801dffc:	89fb      	ldrh	r3, [r7, #14]
}
 801dffe:	4618      	mov	r0, r3
 801e000:	3714      	adds	r7, #20
 801e002:	46bd      	mov	sp, r7
 801e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e008:	4770      	bx	lr
 801e00a:	bf00      	nop
 801e00c:	0801ecbc 	.word	0x0801ecbc

0801e010 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801e010:	b480      	push	{r7}
 801e012:	b087      	sub	sp, #28
 801e014:	af00      	add	r7, sp, #0
 801e016:	4603      	mov	r3, r0
 801e018:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801e01a:	88fb      	ldrh	r3, [r7, #6]
 801e01c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e020:	d201      	bcs.n	801e026 <ff_wtoupper+0x16>
 801e022:	4b3e      	ldr	r3, [pc, #248]	@ (801e11c <ff_wtoupper+0x10c>)
 801e024:	e000      	b.n	801e028 <ff_wtoupper+0x18>
 801e026:	4b3e      	ldr	r3, [pc, #248]	@ (801e120 <ff_wtoupper+0x110>)
 801e028:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801e02a:	697b      	ldr	r3, [r7, #20]
 801e02c:	1c9a      	adds	r2, r3, #2
 801e02e:	617a      	str	r2, [r7, #20]
 801e030:	881b      	ldrh	r3, [r3, #0]
 801e032:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801e034:	8a7b      	ldrh	r3, [r7, #18]
 801e036:	2b00      	cmp	r3, #0
 801e038:	d068      	beq.n	801e10c <ff_wtoupper+0xfc>
 801e03a:	88fa      	ldrh	r2, [r7, #6]
 801e03c:	8a7b      	ldrh	r3, [r7, #18]
 801e03e:	429a      	cmp	r2, r3
 801e040:	d364      	bcc.n	801e10c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801e042:	697b      	ldr	r3, [r7, #20]
 801e044:	1c9a      	adds	r2, r3, #2
 801e046:	617a      	str	r2, [r7, #20]
 801e048:	881b      	ldrh	r3, [r3, #0]
 801e04a:	823b      	strh	r3, [r7, #16]
 801e04c:	8a3b      	ldrh	r3, [r7, #16]
 801e04e:	0a1b      	lsrs	r3, r3, #8
 801e050:	81fb      	strh	r3, [r7, #14]
 801e052:	8a3b      	ldrh	r3, [r7, #16]
 801e054:	b2db      	uxtb	r3, r3
 801e056:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801e058:	88fa      	ldrh	r2, [r7, #6]
 801e05a:	8a79      	ldrh	r1, [r7, #18]
 801e05c:	8a3b      	ldrh	r3, [r7, #16]
 801e05e:	440b      	add	r3, r1
 801e060:	429a      	cmp	r2, r3
 801e062:	da49      	bge.n	801e0f8 <ff_wtoupper+0xe8>
			switch (cmd) {
 801e064:	89fb      	ldrh	r3, [r7, #14]
 801e066:	2b08      	cmp	r3, #8
 801e068:	d84f      	bhi.n	801e10a <ff_wtoupper+0xfa>
 801e06a:	a201      	add	r2, pc, #4	@ (adr r2, 801e070 <ff_wtoupper+0x60>)
 801e06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e070:	0801e095 	.word	0x0801e095
 801e074:	0801e0a7 	.word	0x0801e0a7
 801e078:	0801e0bd 	.word	0x0801e0bd
 801e07c:	0801e0c5 	.word	0x0801e0c5
 801e080:	0801e0cd 	.word	0x0801e0cd
 801e084:	0801e0d5 	.word	0x0801e0d5
 801e088:	0801e0dd 	.word	0x0801e0dd
 801e08c:	0801e0e5 	.word	0x0801e0e5
 801e090:	0801e0ed 	.word	0x0801e0ed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801e094:	88fa      	ldrh	r2, [r7, #6]
 801e096:	8a7b      	ldrh	r3, [r7, #18]
 801e098:	1ad3      	subs	r3, r2, r3
 801e09a:	005b      	lsls	r3, r3, #1
 801e09c:	697a      	ldr	r2, [r7, #20]
 801e09e:	4413      	add	r3, r2
 801e0a0:	881b      	ldrh	r3, [r3, #0]
 801e0a2:	80fb      	strh	r3, [r7, #6]
 801e0a4:	e027      	b.n	801e0f6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801e0a6:	88fa      	ldrh	r2, [r7, #6]
 801e0a8:	8a7b      	ldrh	r3, [r7, #18]
 801e0aa:	1ad3      	subs	r3, r2, r3
 801e0ac:	b29b      	uxth	r3, r3
 801e0ae:	f003 0301 	and.w	r3, r3, #1
 801e0b2:	b29b      	uxth	r3, r3
 801e0b4:	88fa      	ldrh	r2, [r7, #6]
 801e0b6:	1ad3      	subs	r3, r2, r3
 801e0b8:	80fb      	strh	r3, [r7, #6]
 801e0ba:	e01c      	b.n	801e0f6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801e0bc:	88fb      	ldrh	r3, [r7, #6]
 801e0be:	3b10      	subs	r3, #16
 801e0c0:	80fb      	strh	r3, [r7, #6]
 801e0c2:	e018      	b.n	801e0f6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801e0c4:	88fb      	ldrh	r3, [r7, #6]
 801e0c6:	3b20      	subs	r3, #32
 801e0c8:	80fb      	strh	r3, [r7, #6]
 801e0ca:	e014      	b.n	801e0f6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801e0cc:	88fb      	ldrh	r3, [r7, #6]
 801e0ce:	3b30      	subs	r3, #48	@ 0x30
 801e0d0:	80fb      	strh	r3, [r7, #6]
 801e0d2:	e010      	b.n	801e0f6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801e0d4:	88fb      	ldrh	r3, [r7, #6]
 801e0d6:	3b1a      	subs	r3, #26
 801e0d8:	80fb      	strh	r3, [r7, #6]
 801e0da:	e00c      	b.n	801e0f6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801e0dc:	88fb      	ldrh	r3, [r7, #6]
 801e0de:	3308      	adds	r3, #8
 801e0e0:	80fb      	strh	r3, [r7, #6]
 801e0e2:	e008      	b.n	801e0f6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801e0e4:	88fb      	ldrh	r3, [r7, #6]
 801e0e6:	3b50      	subs	r3, #80	@ 0x50
 801e0e8:	80fb      	strh	r3, [r7, #6]
 801e0ea:	e004      	b.n	801e0f6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801e0ec:	88fb      	ldrh	r3, [r7, #6]
 801e0ee:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801e0f2:	80fb      	strh	r3, [r7, #6]
 801e0f4:	bf00      	nop
			}
			break;
 801e0f6:	e008      	b.n	801e10a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801e0f8:	89fb      	ldrh	r3, [r7, #14]
 801e0fa:	2b00      	cmp	r3, #0
 801e0fc:	d195      	bne.n	801e02a <ff_wtoupper+0x1a>
 801e0fe:	8a3b      	ldrh	r3, [r7, #16]
 801e100:	005b      	lsls	r3, r3, #1
 801e102:	697a      	ldr	r2, [r7, #20]
 801e104:	4413      	add	r3, r2
 801e106:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801e108:	e78f      	b.n	801e02a <ff_wtoupper+0x1a>
			break;
 801e10a:	bf00      	nop
	}

	return chr;
 801e10c:	88fb      	ldrh	r3, [r7, #6]
}
 801e10e:	4618      	mov	r0, r3
 801e110:	371c      	adds	r7, #28
 801e112:	46bd      	mov	sp, r7
 801e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e118:	4770      	bx	lr
 801e11a:	bf00      	nop
 801e11c:	0801edbc 	.word	0x0801edbc
 801e120:	0801efb0 	.word	0x0801efb0

0801e124 <memset>:
 801e124:	4402      	add	r2, r0
 801e126:	4603      	mov	r3, r0
 801e128:	4293      	cmp	r3, r2
 801e12a:	d100      	bne.n	801e12e <memset+0xa>
 801e12c:	4770      	bx	lr
 801e12e:	f803 1b01 	strb.w	r1, [r3], #1
 801e132:	e7f9      	b.n	801e128 <memset+0x4>

0801e134 <__errno>:
 801e134:	4b01      	ldr	r3, [pc, #4]	@ (801e13c <__errno+0x8>)
 801e136:	6818      	ldr	r0, [r3, #0]
 801e138:	4770      	bx	lr
 801e13a:	bf00      	nop
 801e13c:	24000028 	.word	0x24000028

0801e140 <__libc_init_array>:
 801e140:	b570      	push	{r4, r5, r6, lr}
 801e142:	4d0d      	ldr	r5, [pc, #52]	@ (801e178 <__libc_init_array+0x38>)
 801e144:	4c0d      	ldr	r4, [pc, #52]	@ (801e17c <__libc_init_array+0x3c>)
 801e146:	1b64      	subs	r4, r4, r5
 801e148:	10a4      	asrs	r4, r4, #2
 801e14a:	2600      	movs	r6, #0
 801e14c:	42a6      	cmp	r6, r4
 801e14e:	d109      	bne.n	801e164 <__libc_init_array+0x24>
 801e150:	4d0b      	ldr	r5, [pc, #44]	@ (801e180 <__libc_init_array+0x40>)
 801e152:	4c0c      	ldr	r4, [pc, #48]	@ (801e184 <__libc_init_array+0x44>)
 801e154:	f000 fd00 	bl	801eb58 <_init>
 801e158:	1b64      	subs	r4, r4, r5
 801e15a:	10a4      	asrs	r4, r4, #2
 801e15c:	2600      	movs	r6, #0
 801e15e:	42a6      	cmp	r6, r4
 801e160:	d105      	bne.n	801e16e <__libc_init_array+0x2e>
 801e162:	bd70      	pop	{r4, r5, r6, pc}
 801e164:	f855 3b04 	ldr.w	r3, [r5], #4
 801e168:	4798      	blx	r3
 801e16a:	3601      	adds	r6, #1
 801e16c:	e7ee      	b.n	801e14c <__libc_init_array+0xc>
 801e16e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e172:	4798      	blx	r3
 801e174:	3601      	adds	r6, #1
 801e176:	e7f2      	b.n	801e15e <__libc_init_array+0x1e>
 801e178:	080209a0 	.word	0x080209a0
 801e17c:	080209a0 	.word	0x080209a0
 801e180:	080209a0 	.word	0x080209a0
 801e184:	080209a4 	.word	0x080209a4

0801e188 <atan2>:
 801e188:	f000 bbae 	b.w	801e8e8 <__ieee754_atan2>
 801e18c:	0000      	movs	r0, r0
	...

0801e190 <sqrt>:
 801e190:	b508      	push	{r3, lr}
 801e192:	ed2d 8b04 	vpush	{d8-d9}
 801e196:	eeb0 8b40 	vmov.f64	d8, d0
 801e19a:	f000 fba1 	bl	801e8e0 <__ieee754_sqrt>
 801e19e:	eeb4 8b48 	vcmp.f64	d8, d8
 801e1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1a6:	d60c      	bvs.n	801e1c2 <sqrt+0x32>
 801e1a8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801e1c8 <sqrt+0x38>
 801e1ac:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801e1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1b4:	d505      	bpl.n	801e1c2 <sqrt+0x32>
 801e1b6:	f7ff ffbd 	bl	801e134 <__errno>
 801e1ba:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801e1be:	2321      	movs	r3, #33	@ 0x21
 801e1c0:	6003      	str	r3, [r0, #0]
 801e1c2:	ecbd 8b04 	vpop	{d8-d9}
 801e1c6:	bd08      	pop	{r3, pc}
	...

0801e1d0 <atan>:
 801e1d0:	b538      	push	{r3, r4, r5, lr}
 801e1d2:	eeb0 7b40 	vmov.f64	d7, d0
 801e1d6:	ee17 5a90 	vmov	r5, s15
 801e1da:	4b73      	ldr	r3, [pc, #460]	@ (801e3a8 <atan+0x1d8>)
 801e1dc:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e1e0:	429c      	cmp	r4, r3
 801e1e2:	d913      	bls.n	801e20c <atan+0x3c>
 801e1e4:	4b71      	ldr	r3, [pc, #452]	@ (801e3ac <atan+0x1dc>)
 801e1e6:	429c      	cmp	r4, r3
 801e1e8:	d803      	bhi.n	801e1f2 <atan+0x22>
 801e1ea:	d107      	bne.n	801e1fc <atan+0x2c>
 801e1ec:	ee10 3a10 	vmov	r3, s0
 801e1f0:	b123      	cbz	r3, 801e1fc <atan+0x2c>
 801e1f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e1f6:	eeb0 0b47 	vmov.f64	d0, d7
 801e1fa:	bd38      	pop	{r3, r4, r5, pc}
 801e1fc:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e338 <atan+0x168>
 801e200:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e340 <atan+0x170>
 801e204:	2d00      	cmp	r5, #0
 801e206:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e20a:	e7f4      	b.n	801e1f6 <atan+0x26>
 801e20c:	4b68      	ldr	r3, [pc, #416]	@ (801e3b0 <atan+0x1e0>)
 801e20e:	429c      	cmp	r4, r3
 801e210:	d811      	bhi.n	801e236 <atan+0x66>
 801e212:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e216:	429c      	cmp	r4, r3
 801e218:	d80a      	bhi.n	801e230 <atan+0x60>
 801e21a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e21e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e348 <atan+0x178>
 801e222:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e226:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e22e:	dce2      	bgt.n	801e1f6 <atan+0x26>
 801e230:	f04f 33ff 	mov.w	r3, #4294967295
 801e234:	e013      	b.n	801e25e <atan+0x8e>
 801e236:	f000 f8c5 	bl	801e3c4 <fabs>
 801e23a:	4b5e      	ldr	r3, [pc, #376]	@ (801e3b4 <atan+0x1e4>)
 801e23c:	429c      	cmp	r4, r3
 801e23e:	d84f      	bhi.n	801e2e0 <atan+0x110>
 801e240:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e244:	429c      	cmp	r4, r3
 801e246:	d841      	bhi.n	801e2cc <atan+0xfc>
 801e248:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e24c:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e250:	2300      	movs	r3, #0
 801e252:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e256:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e25a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e25e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e350 <atan+0x180>
 801e262:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e266:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e26a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e358 <atan+0x188>
 801e26e:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e272:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e360 <atan+0x190>
 801e276:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e27a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e368 <atan+0x198>
 801e27e:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e282:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e370 <atan+0x1a0>
 801e286:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e28a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e378 <atan+0x1a8>
 801e28e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e380 <atan+0x1b0>
 801e292:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e296:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e388 <atan+0x1b8>
 801e29a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e29e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e390 <atan+0x1c0>
 801e2a2:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e2a6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e398 <atan+0x1c8>
 801e2aa:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e2ae:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e3a0 <atan+0x1d0>
 801e2b2:	1c5a      	adds	r2, r3, #1
 801e2b4:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e2b8:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e2bc:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e2c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e2c4:	d121      	bne.n	801e30a <atan+0x13a>
 801e2c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e2ca:	e794      	b.n	801e1f6 <atan+0x26>
 801e2cc:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e2d0:	2301      	movs	r3, #1
 801e2d2:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e2d6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e2da:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e2de:	e7be      	b.n	801e25e <atan+0x8e>
 801e2e0:	4b35      	ldr	r3, [pc, #212]	@ (801e3b8 <atan+0x1e8>)
 801e2e2:	429c      	cmp	r4, r3
 801e2e4:	d20b      	bcs.n	801e2fe <atan+0x12e>
 801e2e6:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e2ea:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e2ee:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e2f2:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e2f6:	2302      	movs	r3, #2
 801e2f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e2fc:	e7af      	b.n	801e25e <atan+0x8e>
 801e2fe:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e302:	2303      	movs	r3, #3
 801e304:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e308:	e7a9      	b.n	801e25e <atan+0x8e>
 801e30a:	4a2c      	ldr	r2, [pc, #176]	@ (801e3bc <atan+0x1ec>)
 801e30c:	492c      	ldr	r1, [pc, #176]	@ (801e3c0 <atan+0x1f0>)
 801e30e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e312:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e316:	ed93 5b00 	vldr	d5, [r3]
 801e31a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e31e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e322:	ed92 7b00 	vldr	d7, [r2]
 801e326:	2d00      	cmp	r5, #0
 801e328:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e32c:	bfb8      	it	lt
 801e32e:	eeb1 7b47 	vneglt.f64	d7, d7
 801e332:	e760      	b.n	801e1f6 <atan+0x26>
 801e334:	f3af 8000 	nop.w
 801e338:	54442d18 	.word	0x54442d18
 801e33c:	bff921fb 	.word	0xbff921fb
 801e340:	54442d18 	.word	0x54442d18
 801e344:	3ff921fb 	.word	0x3ff921fb
 801e348:	8800759c 	.word	0x8800759c
 801e34c:	7e37e43c 	.word	0x7e37e43c
 801e350:	e322da11 	.word	0xe322da11
 801e354:	3f90ad3a 	.word	0x3f90ad3a
 801e358:	24760deb 	.word	0x24760deb
 801e35c:	3fa97b4b 	.word	0x3fa97b4b
 801e360:	a0d03d51 	.word	0xa0d03d51
 801e364:	3fb10d66 	.word	0x3fb10d66
 801e368:	c54c206e 	.word	0xc54c206e
 801e36c:	3fb745cd 	.word	0x3fb745cd
 801e370:	920083ff 	.word	0x920083ff
 801e374:	3fc24924 	.word	0x3fc24924
 801e378:	5555550d 	.word	0x5555550d
 801e37c:	3fd55555 	.word	0x3fd55555
 801e380:	52defd9a 	.word	0x52defd9a
 801e384:	bfadde2d 	.word	0xbfadde2d
 801e388:	2c6a6c2f 	.word	0x2c6a6c2f
 801e38c:	bfa2b444 	.word	0xbfa2b444
 801e390:	af749a6d 	.word	0xaf749a6d
 801e394:	bfb3b0f2 	.word	0xbfb3b0f2
 801e398:	fe231671 	.word	0xfe231671
 801e39c:	bfbc71c6 	.word	0xbfbc71c6
 801e3a0:	9998ebc4 	.word	0x9998ebc4
 801e3a4:	bfc99999 	.word	0xbfc99999
 801e3a8:	440fffff 	.word	0x440fffff
 801e3ac:	7ff00000 	.word	0x7ff00000
 801e3b0:	3fdbffff 	.word	0x3fdbffff
 801e3b4:	3ff2ffff 	.word	0x3ff2ffff
 801e3b8:	40038000 	.word	0x40038000
 801e3bc:	0801f090 	.word	0x0801f090
 801e3c0:	0801f070 	.word	0x0801f070

0801e3c4 <fabs>:
 801e3c4:	ec51 0b10 	vmov	r0, r1, d0
 801e3c8:	4602      	mov	r2, r0
 801e3ca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e3ce:	ec43 2b10 	vmov	d0, r2, r3
 801e3d2:	4770      	bx	lr

0801e3d4 <checkint>:
 801e3d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e3d8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e3dc:	429a      	cmp	r2, r3
 801e3de:	b570      	push	{r4, r5, r6, lr}
 801e3e0:	dd2a      	ble.n	801e438 <checkint+0x64>
 801e3e2:	f240 4333 	movw	r3, #1075	@ 0x433
 801e3e6:	429a      	cmp	r2, r3
 801e3e8:	dc24      	bgt.n	801e434 <checkint+0x60>
 801e3ea:	1a9b      	subs	r3, r3, r2
 801e3ec:	f1a3 0620 	sub.w	r6, r3, #32
 801e3f0:	f04f 32ff 	mov.w	r2, #4294967295
 801e3f4:	fa02 f403 	lsl.w	r4, r2, r3
 801e3f8:	fa02 f606 	lsl.w	r6, r2, r6
 801e3fc:	f1c3 0520 	rsb	r5, r3, #32
 801e400:	fa22 f505 	lsr.w	r5, r2, r5
 801e404:	4334      	orrs	r4, r6
 801e406:	432c      	orrs	r4, r5
 801e408:	409a      	lsls	r2, r3
 801e40a:	ea20 0202 	bic.w	r2, r0, r2
 801e40e:	ea21 0404 	bic.w	r4, r1, r4
 801e412:	4322      	orrs	r2, r4
 801e414:	f1a3 0420 	sub.w	r4, r3, #32
 801e418:	f1c3 0220 	rsb	r2, r3, #32
 801e41c:	d10c      	bne.n	801e438 <checkint+0x64>
 801e41e:	40d8      	lsrs	r0, r3
 801e420:	fa01 f302 	lsl.w	r3, r1, r2
 801e424:	4318      	orrs	r0, r3
 801e426:	40e1      	lsrs	r1, r4
 801e428:	4308      	orrs	r0, r1
 801e42a:	f000 0001 	and.w	r0, r0, #1
 801e42e:	f1d0 0002 	rsbs	r0, r0, #2
 801e432:	bd70      	pop	{r4, r5, r6, pc}
 801e434:	2002      	movs	r0, #2
 801e436:	e7fc      	b.n	801e432 <checkint+0x5e>
 801e438:	2000      	movs	r0, #0
 801e43a:	e7fa      	b.n	801e432 <checkint+0x5e>
 801e43c:	0000      	movs	r0, r0
	...

0801e440 <pow>:
 801e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e444:	ee10 4a90 	vmov	r4, s1
 801e448:	ed2d 8b0a 	vpush	{d8-d12}
 801e44c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801e450:	ee11 aa90 	vmov	sl, s3
 801e454:	f108 32ff 	add.w	r2, r8, #4294967295
 801e458:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801e45c:	429a      	cmp	r2, r3
 801e45e:	ee10 5a10 	vmov	r5, s0
 801e462:	ee11 0a10 	vmov	r0, s2
 801e466:	b087      	sub	sp, #28
 801e468:	46c4      	mov	ip, r8
 801e46a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801e46e:	d806      	bhi.n	801e47e <pow+0x3e>
 801e470:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801e474:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801e478:	2b7f      	cmp	r3, #127	@ 0x7f
 801e47a:	f240 8157 	bls.w	801e72c <pow+0x2ec>
 801e47e:	1802      	adds	r2, r0, r0
 801e480:	eb4a 010a 	adc.w	r1, sl, sl
 801e484:	f06f 0b01 	mvn.w	fp, #1
 801e488:	1e57      	subs	r7, r2, #1
 801e48a:	f141 33ff 	adc.w	r3, r1, #4294967295
 801e48e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801e492:	45bb      	cmp	fp, r7
 801e494:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e498:	d242      	bcs.n	801e520 <pow+0xe0>
 801e49a:	ea52 0301 	orrs.w	r3, r2, r1
 801e49e:	f04f 0300 	mov.w	r3, #0
 801e4a2:	d10c      	bne.n	801e4be <pow+0x7e>
 801e4a4:	196d      	adds	r5, r5, r5
 801e4a6:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801e4aa:	4164      	adcs	r4, r4
 801e4ac:	42ab      	cmp	r3, r5
 801e4ae:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e4b2:	41a3      	sbcs	r3, r4
 801e4b4:	f0c0 808f 	bcc.w	801e5d6 <pow+0x196>
 801e4b8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e4bc:	e02b      	b.n	801e516 <pow+0xd6>
 801e4be:	4ed4      	ldr	r6, [pc, #848]	@ (801e810 <pow+0x3d0>)
 801e4c0:	42b4      	cmp	r4, r6
 801e4c2:	bf08      	it	eq
 801e4c4:	429d      	cmpeq	r5, r3
 801e4c6:	d109      	bne.n	801e4dc <pow+0x9c>
 801e4c8:	1800      	adds	r0, r0, r0
 801e4ca:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801e4ce:	eb4a 0a0a 	adc.w	sl, sl, sl
 801e4d2:	4283      	cmp	r3, r0
 801e4d4:	4bcf      	ldr	r3, [pc, #828]	@ (801e814 <pow+0x3d4>)
 801e4d6:	eb73 030a 	sbcs.w	r3, r3, sl
 801e4da:	e7eb      	b.n	801e4b4 <pow+0x74>
 801e4dc:	196d      	adds	r5, r5, r5
 801e4de:	48ce      	ldr	r0, [pc, #824]	@ (801e818 <pow+0x3d8>)
 801e4e0:	4164      	adcs	r4, r4
 801e4e2:	42ab      	cmp	r3, r5
 801e4e4:	eb70 0604 	sbcs.w	r6, r0, r4
 801e4e8:	d375      	bcc.n	801e5d6 <pow+0x196>
 801e4ea:	4281      	cmp	r1, r0
 801e4ec:	bf08      	it	eq
 801e4ee:	429a      	cmpeq	r2, r3
 801e4f0:	d171      	bne.n	801e5d6 <pow+0x196>
 801e4f2:	4aca      	ldr	r2, [pc, #808]	@ (801e81c <pow+0x3dc>)
 801e4f4:	4294      	cmp	r4, r2
 801e4f6:	bf08      	it	eq
 801e4f8:	429d      	cmpeq	r5, r3
 801e4fa:	d0dd      	beq.n	801e4b8 <pow+0x78>
 801e4fc:	4294      	cmp	r4, r2
 801e4fe:	ea6f 0a0a 	mvn.w	sl, sl
 801e502:	bf34      	ite	cc
 801e504:	2400      	movcc	r4, #0
 801e506:	2401      	movcs	r4, #1
 801e508:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801e50c:	4554      	cmp	r4, sl
 801e50e:	f040 81dc 	bne.w	801e8ca <pow+0x48a>
 801e512:	ee21 0b01 	vmul.f64	d0, d1, d1
 801e516:	b007      	add	sp, #28
 801e518:	ecbd 8b0a 	vpop	{d8-d12}
 801e51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e520:	196f      	adds	r7, r5, r5
 801e522:	eb44 0904 	adc.w	r9, r4, r4
 801e526:	1e7a      	subs	r2, r7, #1
 801e528:	f169 0300 	sbc.w	r3, r9, #0
 801e52c:	4593      	cmp	fp, r2
 801e52e:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e532:	d225      	bcs.n	801e580 <pow+0x140>
 801e534:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e538:	2c00      	cmp	r4, #0
 801e53a:	da13      	bge.n	801e564 <pow+0x124>
 801e53c:	4651      	mov	r1, sl
 801e53e:	f7ff ff49 	bl	801e3d4 <checkint>
 801e542:	2801      	cmp	r0, #1
 801e544:	d10e      	bne.n	801e564 <pow+0x124>
 801e546:	eeb1 0b40 	vneg.f64	d0, d0
 801e54a:	ea57 0909 	orrs.w	r9, r7, r9
 801e54e:	d10b      	bne.n	801e568 <pow+0x128>
 801e550:	f1ba 0f00 	cmp.w	sl, #0
 801e554:	dadf      	bge.n	801e516 <pow+0xd6>
 801e556:	b007      	add	sp, #28
 801e558:	ecbd 8b0a 	vpop	{d8-d12}
 801e55c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e560:	f000 bab6 	b.w	801ead0 <__math_divzero>
 801e564:	2000      	movs	r0, #0
 801e566:	e7f0      	b.n	801e54a <pow+0x10a>
 801e568:	f1ba 0f00 	cmp.w	sl, #0
 801e56c:	dad3      	bge.n	801e516 <pow+0xd6>
 801e56e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e572:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e576:	ed8d 7b00 	vstr	d7, [sp]
 801e57a:	ed9d 0b00 	vldr	d0, [sp]
 801e57e:	e7ca      	b.n	801e516 <pow+0xd6>
 801e580:	2c00      	cmp	r4, #0
 801e582:	da2b      	bge.n	801e5dc <pow+0x19c>
 801e584:	4651      	mov	r1, sl
 801e586:	f7ff ff25 	bl	801e3d4 <checkint>
 801e58a:	b930      	cbnz	r0, 801e59a <pow+0x15a>
 801e58c:	b007      	add	sp, #28
 801e58e:	ecbd 8b0a 	vpop	{d8-d12}
 801e592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e596:	f000 bab3 	b.w	801eb00 <__math_invalid>
 801e59a:	1e41      	subs	r1, r0, #1
 801e59c:	4248      	negs	r0, r1
 801e59e:	4148      	adcs	r0, r1
 801e5a0:	0480      	lsls	r0, r0, #18
 801e5a2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e5a6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e5aa:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e5ae:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e5b2:	2b7f      	cmp	r3, #127	@ 0x7f
 801e5b4:	d92d      	bls.n	801e612 <pow+0x1d2>
 801e5b6:	4b96      	ldr	r3, [pc, #600]	@ (801e810 <pow+0x3d0>)
 801e5b8:	2000      	movs	r0, #0
 801e5ba:	429c      	cmp	r4, r3
 801e5bc:	bf08      	it	eq
 801e5be:	4285      	cmpeq	r5, r0
 801e5c0:	f43f af7a 	beq.w	801e4b8 <pow+0x78>
 801e5c4:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e5c8:	428a      	cmp	r2, r1
 801e5ca:	d80c      	bhi.n	801e5e6 <pow+0x1a6>
 801e5cc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e5d0:	42a8      	cmp	r0, r5
 801e5d2:	41a3      	sbcs	r3, r4
 801e5d4:	d204      	bcs.n	801e5e0 <pow+0x1a0>
 801e5d6:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e5da:	e79c      	b.n	801e516 <pow+0xd6>
 801e5dc:	2000      	movs	r0, #0
 801e5de:	e7e4      	b.n	801e5aa <pow+0x16a>
 801e5e0:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e5e4:	e797      	b.n	801e516 <pow+0xd6>
 801e5e6:	2d01      	cmp	r5, #1
 801e5e8:	eb74 0303 	sbcs.w	r3, r4, r3
 801e5ec:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e5f0:	bf34      	ite	cc
 801e5f2:	2301      	movcc	r3, #1
 801e5f4:	2300      	movcs	r3, #0
 801e5f6:	4296      	cmp	r6, r2
 801e5f8:	bf8c      	ite	hi
 801e5fa:	2600      	movhi	r6, #0
 801e5fc:	2601      	movls	r6, #1
 801e5fe:	42b3      	cmp	r3, r6
 801e600:	f000 809c 	beq.w	801e73c <pow+0x2fc>
 801e604:	b007      	add	sp, #28
 801e606:	ecbd 8b0a 	vpop	{d8-d12}
 801e60a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e60e:	f000 ba57 	b.w	801eac0 <__math_oflow>
 801e612:	f1bc 0f00 	cmp.w	ip, #0
 801e616:	d10a      	bne.n	801e62e <pow+0x1ee>
 801e618:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e800 <pow+0x3c0>
 801e61c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e620:	ec53 2b17 	vmov	r2, r3, d7
 801e624:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e628:	4615      	mov	r5, r2
 801e62a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e62e:	4a7c      	ldr	r2, [pc, #496]	@ (801e820 <pow+0x3e0>)
 801e630:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e634:	4422      	add	r2, r4
 801e636:	1513      	asrs	r3, r2, #20
 801e638:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e63c:	ee03 3a10 	vmov	s6, r3
 801e640:	0d12      	lsrs	r2, r2, #20
 801e642:	4b78      	ldr	r3, [pc, #480]	@ (801e824 <pow+0x3e4>)
 801e644:	0512      	lsls	r2, r2, #20
 801e646:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e64a:	1aa7      	subs	r7, r4, r2
 801e64c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e650:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e654:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e658:	1e2e      	subs	r6, r5, #0
 801e65a:	ec47 6b14 	vmov	d4, r6, r7
 801e65e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e662:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e666:	ed93 5b00 	vldr	d5, [r3]
 801e66a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e66e:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e672:	ed93 5b02 	vldr	d5, [r3, #8]
 801e676:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e67a:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e67e:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e682:	ed93 5b04 	vldr	d5, [r3, #16]
 801e686:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e68a:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e68e:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e692:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e696:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e69a:	eeb0 9b40 	vmov.f64	d9, d0
 801e69e:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e6a2:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e6a6:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e6aa:	ed93 5b06 	vldr	d5, [r3, #24]
 801e6ae:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e6b2:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e6b6:	ed93 4b08 	vldr	d4, [r3, #32]
 801e6ba:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e6be:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e6c2:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e6c6:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e6ca:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e6ce:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e6d2:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e6d6:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e6da:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e6de:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e6e2:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e6e6:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e6ea:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e6ee:	ee16 3a90 	vmov	r3, s13
 801e6f2:	eeb0 5b46 	vmov.f64	d5, d6
 801e6f6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e6fa:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e6fe:	18b2      	adds	r2, r6, r2
 801e700:	2a3e      	cmp	r2, #62	@ 0x3e
 801e702:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e706:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e70a:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e70e:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e712:	d91b      	bls.n	801e74c <pow+0x30c>
 801e714:	2a00      	cmp	r2, #0
 801e716:	da0b      	bge.n	801e730 <pow+0x2f0>
 801e718:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e71c:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e720:	2800      	cmp	r0, #0
 801e722:	f43f aef8 	beq.w	801e516 <pow+0xd6>
 801e726:	eeb1 0b40 	vneg.f64	d0, d0
 801e72a:	e6f4      	b.n	801e516 <pow+0xd6>
 801e72c:	2000      	movs	r0, #0
 801e72e:	e77e      	b.n	801e62e <pow+0x1ee>
 801e730:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e734:	d909      	bls.n	801e74a <pow+0x30a>
 801e736:	2b00      	cmp	r3, #0
 801e738:	f6bf af64 	bge.w	801e604 <pow+0x1c4>
 801e73c:	b007      	add	sp, #28
 801e73e:	ecbd 8b0a 	vpop	{d8-d12}
 801e742:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e746:	f000 b9b3 	b.w	801eab0 <__math_uflow>
 801e74a:	2600      	movs	r6, #0
 801e74c:	4936      	ldr	r1, [pc, #216]	@ (801e828 <pow+0x3e8>)
 801e74e:	ed91 4b02 	vldr	d4, [r1, #8]
 801e752:	ed91 3b00 	vldr	d3, [r1]
 801e756:	eeb0 7b44 	vmov.f64	d7, d4
 801e75a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e75e:	ee17 5a10 	vmov	r5, s14
 801e762:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e766:	ed91 4b04 	vldr	d4, [r1, #16]
 801e76a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e76e:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e772:	ed91 4b06 	vldr	d4, [r1, #24]
 801e776:	18dc      	adds	r4, r3, r3
 801e778:	f104 030f 	add.w	r3, r4, #15
 801e77c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e780:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e784:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e788:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e78c:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e790:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e794:	ed91 4b08 	vldr	d4, [r1, #32]
 801e798:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e79c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e7a0:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e7a4:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e7a8:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e7ac:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e7b0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e7b4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e7b8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e7bc:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e7c0:	1940      	adds	r0, r0, r5
 801e7c2:	2700      	movs	r7, #0
 801e7c4:	eb17 020c 	adds.w	r2, r7, ip
 801e7c8:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e7cc:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e7d0:	2e00      	cmp	r6, #0
 801e7d2:	d175      	bne.n	801e8c0 <pow+0x480>
 801e7d4:	42bd      	cmp	r5, r7
 801e7d6:	db29      	blt.n	801e82c <pow+0x3ec>
 801e7d8:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e7dc:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e7e0:	4610      	mov	r0, r2
 801e7e2:	ec41 0b10 	vmov	d0, r0, r1
 801e7e6:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e7ea:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e808 <pow+0x3c8>
 801e7ee:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e7f2:	b007      	add	sp, #28
 801e7f4:	ecbd 8b0a 	vpop	{d8-d12}
 801e7f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7fc:	f000 b998 	b.w	801eb30 <__math_check_oflow>
 801e800:	00000000 	.word	0x00000000
 801e804:	43300000 	.word	0x43300000
 801e808:	00000000 	.word	0x00000000
 801e80c:	7f000000 	.word	0x7f000000
 801e810:	3ff00000 	.word	0x3ff00000
 801e814:	fff00000 	.word	0xfff00000
 801e818:	ffe00000 	.word	0xffe00000
 801e81c:	7fe00000 	.word	0x7fe00000
 801e820:	c0196aab 	.word	0xc0196aab
 801e824:	0801f0b0 	.word	0x0801f0b0
 801e828:	08020128 	.word	0x08020128
 801e82c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e830:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e834:	4610      	mov	r0, r2
 801e836:	ec41 0b15 	vmov	d5, r0, r1
 801e83a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e83e:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e842:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e846:	eeb0 4bc7 	vabs.f64	d4, d7
 801e84a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e852:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e8d0 <pow+0x490>
 801e856:	d52a      	bpl.n	801e8ae <pow+0x46e>
 801e858:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e85c:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e864:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e868:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e86c:	bf58      	it	pl
 801e86e:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e872:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e876:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e87a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e87e:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e882:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e886:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e88a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e892:	d104      	bne.n	801e89e <pow+0x45e>
 801e894:	4632      	mov	r2, r6
 801e896:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e89a:	ec43 2b17 	vmov	d7, r2, r3
 801e89e:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e8a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e8a6:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e8aa:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e8ae:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e8b2:	b007      	add	sp, #28
 801e8b4:	ecbd 8b0a 	vpop	{d8-d12}
 801e8b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8bc:	f000 b92f 	b.w	801eb1e <__math_check_uflow>
 801e8c0:	ec43 2b10 	vmov	d0, r2, r3
 801e8c4:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e8c8:	e625      	b.n	801e516 <pow+0xd6>
 801e8ca:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e8d8 <pow+0x498>
 801e8ce:	e622      	b.n	801e516 <pow+0xd6>
 801e8d0:	00000000 	.word	0x00000000
 801e8d4:	00100000 	.word	0x00100000
	...

0801e8e0 <__ieee754_sqrt>:
 801e8e0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e8e4:	4770      	bx	lr
	...

0801e8e8 <__ieee754_atan2>:
 801e8e8:	ee11 1a10 	vmov	r1, s2
 801e8ec:	eeb0 7b40 	vmov.f64	d7, d0
 801e8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8f2:	ee11 5a90 	vmov	r5, s3
 801e8f6:	424b      	negs	r3, r1
 801e8f8:	4f59      	ldr	r7, [pc, #356]	@ (801ea60 <__ieee754_atan2+0x178>)
 801e8fa:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e8fe:	430b      	orrs	r3, r1
 801e900:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e904:	42bb      	cmp	r3, r7
 801e906:	d80d      	bhi.n	801e924 <__ieee754_atan2+0x3c>
 801e908:	ee10 ca10 	vmov	ip, s0
 801e90c:	ee17 6a90 	vmov	r6, s15
 801e910:	f1cc 0000 	rsb	r0, ip, #0
 801e914:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e918:	ea40 000c 	orr.w	r0, r0, ip
 801e91c:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e920:	42b8      	cmp	r0, r7
 801e922:	d904      	bls.n	801e92e <__ieee754_atan2+0x46>
 801e924:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e928:	eeb0 0b47 	vmov.f64	d0, d7
 801e92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e92e:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e932:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e936:	4308      	orrs	r0, r1
 801e938:	d103      	bne.n	801e942 <__ieee754_atan2+0x5a>
 801e93a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e93e:	f7ff bc47 	b.w	801e1d0 <atan>
 801e942:	17ac      	asrs	r4, r5, #30
 801e944:	f004 0402 	and.w	r4, r4, #2
 801e948:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e94c:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e950:	d107      	bne.n	801e962 <__ieee754_atan2+0x7a>
 801e952:	2c02      	cmp	r4, #2
 801e954:	d05c      	beq.n	801ea10 <__ieee754_atan2+0x128>
 801e956:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801ea28 <__ieee754_atan2+0x140>
 801e95a:	2c03      	cmp	r4, #3
 801e95c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e960:	e7e2      	b.n	801e928 <__ieee754_atan2+0x40>
 801e962:	4311      	orrs	r1, r2
 801e964:	d107      	bne.n	801e976 <__ieee754_atan2+0x8e>
 801e966:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801ea30 <__ieee754_atan2+0x148>
 801e96a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801ea38 <__ieee754_atan2+0x150>
 801e96e:	2e00      	cmp	r6, #0
 801e970:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e974:	e7d8      	b.n	801e928 <__ieee754_atan2+0x40>
 801e976:	42ba      	cmp	r2, r7
 801e978:	d10f      	bne.n	801e99a <__ieee754_atan2+0xb2>
 801e97a:	4293      	cmp	r3, r2
 801e97c:	f104 34ff 	add.w	r4, r4, #4294967295
 801e980:	d107      	bne.n	801e992 <__ieee754_atan2+0xaa>
 801e982:	2c02      	cmp	r4, #2
 801e984:	d847      	bhi.n	801ea16 <__ieee754_atan2+0x12e>
 801e986:	4b37      	ldr	r3, [pc, #220]	@ (801ea64 <__ieee754_atan2+0x17c>)
 801e988:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e98c:	ed93 7b00 	vldr	d7, [r3]
 801e990:	e7ca      	b.n	801e928 <__ieee754_atan2+0x40>
 801e992:	2c02      	cmp	r4, #2
 801e994:	d842      	bhi.n	801ea1c <__ieee754_atan2+0x134>
 801e996:	4b34      	ldr	r3, [pc, #208]	@ (801ea68 <__ieee754_atan2+0x180>)
 801e998:	e7f6      	b.n	801e988 <__ieee754_atan2+0xa0>
 801e99a:	42bb      	cmp	r3, r7
 801e99c:	d0e3      	beq.n	801e966 <__ieee754_atan2+0x7e>
 801e99e:	1a9b      	subs	r3, r3, r2
 801e9a0:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e9a4:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e9a8:	da1a      	bge.n	801e9e0 <__ieee754_atan2+0xf8>
 801e9aa:	2d00      	cmp	r5, #0
 801e9ac:	da01      	bge.n	801e9b2 <__ieee754_atan2+0xca>
 801e9ae:	323c      	adds	r2, #60	@ 0x3c
 801e9b0:	db19      	blt.n	801e9e6 <__ieee754_atan2+0xfe>
 801e9b2:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e9b6:	f7ff fd05 	bl	801e3c4 <fabs>
 801e9ba:	f7ff fc09 	bl	801e1d0 <atan>
 801e9be:	eeb0 7b40 	vmov.f64	d7, d0
 801e9c2:	2c01      	cmp	r4, #1
 801e9c4:	d012      	beq.n	801e9ec <__ieee754_atan2+0x104>
 801e9c6:	2c02      	cmp	r4, #2
 801e9c8:	d019      	beq.n	801e9fe <__ieee754_atan2+0x116>
 801e9ca:	2c00      	cmp	r4, #0
 801e9cc:	d0ac      	beq.n	801e928 <__ieee754_atan2+0x40>
 801e9ce:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801ea40 <__ieee754_atan2+0x158>
 801e9d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e9d6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801ea48 <__ieee754_atan2+0x160>
 801e9da:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e9de:	e7a3      	b.n	801e928 <__ieee754_atan2+0x40>
 801e9e0:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801ea30 <__ieee754_atan2+0x148>
 801e9e4:	e7ed      	b.n	801e9c2 <__ieee754_atan2+0xda>
 801e9e6:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801ea50 <__ieee754_atan2+0x168>
 801e9ea:	e7ea      	b.n	801e9c2 <__ieee754_atan2+0xda>
 801e9ec:	ee17 1a90 	vmov	r1, s15
 801e9f0:	ec53 2b17 	vmov	r2, r3, d7
 801e9f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e9f8:	ec43 2b17 	vmov	d7, r2, r3
 801e9fc:	e794      	b.n	801e928 <__ieee754_atan2+0x40>
 801e9fe:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801ea40 <__ieee754_atan2+0x158>
 801ea02:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ea06:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801ea48 <__ieee754_atan2+0x160>
 801ea0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ea0e:	e78b      	b.n	801e928 <__ieee754_atan2+0x40>
 801ea10:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801ea48 <__ieee754_atan2+0x160>
 801ea14:	e788      	b.n	801e928 <__ieee754_atan2+0x40>
 801ea16:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801ea58 <__ieee754_atan2+0x170>
 801ea1a:	e785      	b.n	801e928 <__ieee754_atan2+0x40>
 801ea1c:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801ea50 <__ieee754_atan2+0x168>
 801ea20:	e782      	b.n	801e928 <__ieee754_atan2+0x40>
 801ea22:	bf00      	nop
 801ea24:	f3af 8000 	nop.w
 801ea28:	54442d18 	.word	0x54442d18
 801ea2c:	c00921fb 	.word	0xc00921fb
 801ea30:	54442d18 	.word	0x54442d18
 801ea34:	3ff921fb 	.word	0x3ff921fb
 801ea38:	54442d18 	.word	0x54442d18
 801ea3c:	bff921fb 	.word	0xbff921fb
 801ea40:	33145c07 	.word	0x33145c07
 801ea44:	3ca1a626 	.word	0x3ca1a626
 801ea48:	54442d18 	.word	0x54442d18
 801ea4c:	400921fb 	.word	0x400921fb
	...
 801ea58:	54442d18 	.word	0x54442d18
 801ea5c:	3fe921fb 	.word	0x3fe921fb
 801ea60:	7ff00000 	.word	0x7ff00000
 801ea64:	08020110 	.word	0x08020110
 801ea68:	080200f8 	.word	0x080200f8

0801ea6c <with_errno>:
 801ea6c:	b510      	push	{r4, lr}
 801ea6e:	ed2d 8b02 	vpush	{d8}
 801ea72:	eeb0 8b40 	vmov.f64	d8, d0
 801ea76:	4604      	mov	r4, r0
 801ea78:	f7ff fb5c 	bl	801e134 <__errno>
 801ea7c:	eeb0 0b48 	vmov.f64	d0, d8
 801ea80:	ecbd 8b02 	vpop	{d8}
 801ea84:	6004      	str	r4, [r0, #0]
 801ea86:	bd10      	pop	{r4, pc}

0801ea88 <xflow>:
 801ea88:	b082      	sub	sp, #8
 801ea8a:	b158      	cbz	r0, 801eaa4 <xflow+0x1c>
 801ea8c:	eeb1 7b40 	vneg.f64	d7, d0
 801ea90:	ed8d 7b00 	vstr	d7, [sp]
 801ea94:	ed9d 7b00 	vldr	d7, [sp]
 801ea98:	2022      	movs	r0, #34	@ 0x22
 801ea9a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ea9e:	b002      	add	sp, #8
 801eaa0:	f7ff bfe4 	b.w	801ea6c <with_errno>
 801eaa4:	eeb0 7b40 	vmov.f64	d7, d0
 801eaa8:	e7f2      	b.n	801ea90 <xflow+0x8>
 801eaaa:	0000      	movs	r0, r0
 801eaac:	0000      	movs	r0, r0
	...

0801eab0 <__math_uflow>:
 801eab0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801eab8 <__math_uflow+0x8>
 801eab4:	f7ff bfe8 	b.w	801ea88 <xflow>
 801eab8:	00000000 	.word	0x00000000
 801eabc:	10000000 	.word	0x10000000

0801eac0 <__math_oflow>:
 801eac0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801eac8 <__math_oflow+0x8>
 801eac4:	f7ff bfe0 	b.w	801ea88 <xflow>
 801eac8:	00000000 	.word	0x00000000
 801eacc:	70000000 	.word	0x70000000

0801ead0 <__math_divzero>:
 801ead0:	b082      	sub	sp, #8
 801ead2:	2800      	cmp	r0, #0
 801ead4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801ead8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801eadc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801eae0:	ed8d 7b00 	vstr	d7, [sp]
 801eae4:	ed9d 0b00 	vldr	d0, [sp]
 801eae8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801eaf8 <__math_divzero+0x28>
 801eaec:	2022      	movs	r0, #34	@ 0x22
 801eaee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801eaf2:	b002      	add	sp, #8
 801eaf4:	f7ff bfba 	b.w	801ea6c <with_errno>
	...

0801eb00 <__math_invalid>:
 801eb00:	eeb0 7b40 	vmov.f64	d7, d0
 801eb04:	eeb4 7b47 	vcmp.f64	d7, d7
 801eb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb0c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801eb10:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801eb14:	d602      	bvs.n	801eb1c <__math_invalid+0x1c>
 801eb16:	2021      	movs	r0, #33	@ 0x21
 801eb18:	f7ff bfa8 	b.w	801ea6c <with_errno>
 801eb1c:	4770      	bx	lr

0801eb1e <__math_check_uflow>:
 801eb1e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801eb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb26:	d102      	bne.n	801eb2e <__math_check_uflow+0x10>
 801eb28:	2022      	movs	r0, #34	@ 0x22
 801eb2a:	f7ff bf9f 	b.w	801ea6c <with_errno>
 801eb2e:	4770      	bx	lr

0801eb30 <__math_check_oflow>:
 801eb30:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801eb50 <__math_check_oflow+0x20>
 801eb34:	eeb0 7bc0 	vabs.f64	d7, d0
 801eb38:	eeb4 7b46 	vcmp.f64	d7, d6
 801eb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb40:	dd02      	ble.n	801eb48 <__math_check_oflow+0x18>
 801eb42:	2022      	movs	r0, #34	@ 0x22
 801eb44:	f7ff bf92 	b.w	801ea6c <with_errno>
 801eb48:	4770      	bx	lr
 801eb4a:	bf00      	nop
 801eb4c:	f3af 8000 	nop.w
 801eb50:	ffffffff 	.word	0xffffffff
 801eb54:	7fefffff 	.word	0x7fefffff

0801eb58 <_init>:
 801eb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb5a:	bf00      	nop
 801eb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb5e:	bc08      	pop	{r3}
 801eb60:	469e      	mov	lr, r3
 801eb62:	4770      	bx	lr

0801eb64 <_fini>:
 801eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb66:	bf00      	nop
 801eb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb6a:	bc08      	pop	{r3}
 801eb6c:	469e      	mov	lr, r3
 801eb6e:	4770      	bx	lr
