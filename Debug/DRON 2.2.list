
DRON 2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e7e0  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801eab0  0801eab0  00024ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080208d8  080208d8  000268d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080208e0  080208e0  000268e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080208e4  080208e4  000268e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  080208e8  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  08020960  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  08020960  000278ac  2**0
                  ALLOC
  9 .IRAM         000041e6  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049710  2**0
                  CONTENTS
 11 .RAM1         00021860  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049710  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031b03  00000000  00000000  0004973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ecc  00000000  00000000  0007b241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002458  00000000  00000000  00081110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c27  00000000  00000000  00083568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c9b4  00000000  00000000  0008518f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000387c7  00000000  00000000  000c1b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016e16b  00000000  00000000  000fa30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00268475  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f88  00000000  00000000  002684b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00272440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801ea98 	.word	0x0801ea98

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801ea98 	.word	0x0801ea98

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00e fa26 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00e f9f0 	bl	800eb0c <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000c0 	.word	0x000000c0

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00e f9cd 	bl	800eb0c <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	000000f0 	.word	0x000000f0
 80007b8:	000000c0 	.word	0x000000c0

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	000000ec 	.word	0x000000ec

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00e f86e 	bl	800e8e4 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00e f856 	bl	800e8e4 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00e fa6e 	bl	800ed40 <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00e fa58 	bl	800ed40 <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00e f91d 	bl	800eb0c <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	0000009a 	.word	0x0000009a
 80009b0:	0000009c 	.word	0x0000009c
 80009b4:	0000009e 	.word	0x0000009e
 80009b8:	00000094 	.word	0x00000094
 80009bc:	00000096 	.word	0x00000096
 80009c0:	00000098 	.word	0x00000098
 80009c4:	000000a0 	.word	0x000000a0
 80009c8:	000000a2 	.word	0x000000a2
 80009cc:	000000a4 	.word	0x000000a4
 80009d0:	000000a6 	.word	0x000000a6
 80009d4:	000000a8 	.word	0x000000a8

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	00000098 	.word	0x00000098
 8000a74:	00000096 	.word	0x00000096
 8000a78:	000000c4 	.word	0x000000c4
 8000a7c:	000000a6 	.word	0x000000a6
 8000a80:	000000a8 	.word	0x000000a8
 8000a84:	000000c8 	.word	0x000000c8
 8000a88:	000000cc 	.word	0x000000cc
 8000a8c:	000000dc 	.word	0x000000dc

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	000000b4 	.word	0x000000b4
 8000d18:	000000c0 	.word	0x000000c0
 8000d1c:	00000098 	.word	0x00000098
 8000d20:	00000096 	.word	0x00000096
 8000d24:	000000c4 	.word	0x000000c4
 8000d28:	000000a6 	.word	0x000000a6
 8000d2c:	000000a8 	.word	0x000000a8
 8000d30:	000000c8 	.word	0x000000c8
 8000d34:	000000cc 	.word	0x000000cc
 8000d38:	000000d0 	.word	0x000000d0
 8000d3c:	000000a2 	.word	0x000000a2
 8000d40:	0000009c 	.word	0x0000009c
 8000d44:	000000d8 	.word	0x000000d8
 8000d48:	0000009a 	.word	0x0000009a
 8000d4c:	000000d4 	.word	0x000000d4
 8000d50:	0000009e 	.word	0x0000009e
 8000d54:	000000a0 	.word	0x000000a0
 8000d58:	00000094 	.word	0x00000094
 8000d5c:	000000ac 	.word	0x000000ac
 8000d60:	000000b0 	.word	0x000000b0
 8000d64:	000000e0 	.word	0x000000e0
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f008 fba3 	bl	80094cc <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f008 fb8d 	bl	80094cc <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000b8 	.word	0x000000b8
 8000de8:	000000dc 	.word	0x000000dc
 8000dec:	000000bc 	.word	0x000000bc
 8000df0:	000000e0 	.word	0x000000e0

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000e8 	.word	0x000000e8

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
//	  if(a >  max_speed)
//	  {
//		  a =  max_speed;
//	  }

	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d907      	bls.n	8000e58 <ESC_1_SPEED+0x24>
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	bf28      	it	cs
 8000e52:	4613      	movcs	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	e001      	b.n	8000e5c <ESC_1_SPEED+0x28>
 8000e58:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e5c:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d907      	bls.n	8000e9c <ESC_2_SPEED+0x24>
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e92:	4293      	cmp	r3, r2
 8000e94:	bf28      	it	cs
 8000e96:	4613      	movcs	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	e001      	b.n	8000ea0 <ESC_2_SPEED+0x28>
 8000e9c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ea0:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d907      	bls.n	8000ee0 <ESC_3_SPEED+0x24>
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	bf28      	it	cs
 8000eda:	4613      	movcs	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	e001      	b.n	8000ee4 <ESC_3_SPEED+0x28>
 8000ee0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ee4:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	a = (a < min_speed) ? min_speed : (a > max_speed) ? max_speed : a;
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d907      	bls.n	8000f24 <ESC_4_SPEED+0x24>
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	bf28      	it	cs
 8000f1e:	4613      	movcs	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	e001      	b.n	8000f28 <ESC_4_SPEED+0x28>
 8000f24:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f28:	80fb      	strh	r3, [r7, #6]

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);//450Hz
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f015 fb3f 	bl	80165dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f015 fb39 	bl	80165dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 fb33 	bl	80165dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f015 fb2d 	bl	80165dc <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d fbc3 	bl	800e744 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f008 fa83 	bl	80094cc <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
static I2C_HandleTypeDef *hi2c_HMC5883L;

extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HMC5883L_Init+0xb4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			30 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xF0;
 8000fea:	23f0      	movs	r3, #240	@ 0xf0
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HMC5883L_Init+0xb4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d fc6d 	bl	800e8e4 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x32;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HMC5883L_Init+0xb4>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d fc5d 	bl	800e8e4 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x80;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HMC5883L_Init+0xb4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d fc4d 	bl	800e8e4 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HMC5883L_Init+0xb4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220a      	movs	r2, #10
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	f00d fd51 	bl	800eb0c <HAL_I2C_Mem_Read>

	if(status != 0x48){
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b48      	cmp	r3, #72	@ 0x48
 800106e:	d002      	beq.n	8001076 <HMC5883L_Init+0x9e>
		status = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e001      	b.n	800107a <HMC5883L_Init+0xa2>
	}
	else{
		status = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f008 fa26 	bl	80094cc <HAL_Delay>

	return status;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400009c 	.word	0x2400009c

08001090 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001096:	23b6      	movs	r3, #182	@ 0xb6
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, data, 6, 1);
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HMC5883L_Get_Z_Start+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2306      	movs	r3, #6
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2205      	movs	r2, #5
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	f00d fd2c 	bl	800eb0c <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[4]<<8) | data[5];
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400009c 	.word	0x2400009c

080010d4 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HMC5883L_Get_Z_Start_IT+0x28>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2205      	movs	r2, #5
 80010ea:	213c      	movs	r1, #60	@ 0x3c
 80010ec:	f00d feb2 	bl	800ee54 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400009c 	.word	0x2400009c
 8001100:	00000064 	.word	0x00000064
 8001104:	000041d5 	.word	0x000041d5

08001108 <HMC5883L_Get_Z_End_IT>:

int16_t HMC5883L_Get_Z_End_IT(void){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int16_t fulldata = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]

	fulldata = ((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5];
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	00000064 	.word	0x00000064

08001138 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e014      	b.n	800117c <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 8001152:	f7ff ff9d 	bl	8001090 <HMC5883L_Get_Z_Start>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
 800115a:	17da      	asrs	r2, r3, #31
 800115c:	461c      	mov	r4, r3
 800115e:	4615      	mov	r5, r2
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	eb12 0804 	adds.w	r8, r2, r4
 8001168:	eb43 0905 	adc.w	r9, r3, r5
 800116c:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 8001170:	2064      	movs	r0, #100	@ 0x64
 8001172:	f008 f9ab 	bl	80094cc <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b09      	cmp	r3, #9
 8001180:	dde7      	ble.n	8001152 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 8001182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001186:	f04f 020a 	mov.w	r2, #10
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	f7ff f8bf 	bl	8000310 <__aeabi_ldivmod>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	b213      	sxth	r3, r2
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011a4 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <MPU6050_INIT+0x58>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 80011b2:	f000 f825 	bl	8001200 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80011b6:	f000 f88f 	bl	80012d8 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80011ba:	2005      	movs	r0, #5
 80011bc:	f000 f838 	bl	8001230 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80011c0:	2008      	movs	r0, #8
 80011c2:	f000 f851 	bl	8001268 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80011c6:	2008      	movs	r0, #8
 80011c8:	f000 f86a 	bl	80012a0 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80011cc:	f000 fd34 	bl	8001c38 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80011d0:	f000 f89a 	bl	8001308 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f008 f979 	bl	80094cc <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80011da:	f000 fd15 	bl	8001c08 <MPU6050_READ_ID>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b68      	cmp	r3, #104	@ 0x68
 80011e6:	d002      	beq.n	80011ee <MPU6050_INIT+0x4a>
		status = 0;//error
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	240000a0 	.word	0x240000a0

08001200 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MPU6050_RESET+0x2c>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	226b      	movs	r2, #107	@ 0x6b
 800121e:	21d0      	movs	r1, #208	@ 0xd0
 8001220:	f00d fb60 	bl	800e8e4 <HAL_I2C_Mem_Write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	240000a0 	.word	0x240000a0

08001230 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MPU6050_CONFIG_DLPF+0x34>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	221a      	movs	r2, #26
 8001254:	21d0      	movs	r1, #208	@ 0xd0
 8001256:	f00d fb45 	bl	800e8e4 <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240000a0 	.word	0x240000a0

08001268 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MPU6050_CONFIG_GYRO+0x34>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	221b      	movs	r2, #27
 800128c:	21d0      	movs	r1, #208	@ 0xd0
 800128e:	f00d fb29 	bl	800e8e4 <HAL_I2C_Mem_Write>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240000a0 	.word	0x240000a0

080012a0 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MPU6050_CONFIG_ACCEL+0x34>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 030f 	add.w	r3, r7, #15
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	221c      	movs	r2, #28
 80012c4:	21d0      	movs	r1, #208	@ 0xd0
 80012c6:	f00d fb0d 	bl	800e8e4 <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240000a0 	.word	0x240000a0

080012d8 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2219      	movs	r2, #25
 80012f6:	21d0      	movs	r1, #208	@ 0xd0
 80012f8:	f00d faf4 	bl	800e8e4 <HAL_I2C_Mem_Write>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240000a0 	.word	0x240000a0

08001308 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	226a      	movs	r2, #106	@ 0x6a
 8001326:	21d0      	movs	r1, #208	@ 0xd0
 8001328:	f00d fadc 	bl	800e8e4 <HAL_I2C_Mem_Write>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240000a0 	.word	0x240000a0

08001338 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
 8001340:	6139      	str	r1, [r7, #16]
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e06b      	b.n	8001450 <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001378:	f000 fbc2 	bl	8001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>
 800137c:	4603      	mov	r3, r0
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a00 	vldr	s14, [r7]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 800139a:	f000 fbd1 	bl	8001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800139e:	4603      	mov	r3, r0
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a8:	ed97 7a00 	vldr	s14, [r7]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 80013bc:	f000 fbd4 	bl	8001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80013c0:	4603      	mov	r3, r0
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ca:	ed97 7a00 	vldr	s14, [r7]
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 80013de:	f000 fbd7 	bl	8001b90 <MPU6050_GET_GYRO_FULLVALUE_X>
 80013e2:	4603      	mov	r3, r0
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 8001400:	f000 fbda 	bl	8001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001404:	4603      	mov	r3, r0
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 8001422:	f000 fbdd 	bl	8001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001426:	4603      	mov	r3, r0
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001430:	ed97 7a01 	vldr	s14, [r7, #4]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	ed97 7a08 	vldr	s14, [r7, #32]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f008 f841 	bl	80094cc <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001456:	db8f      	blt.n	8001378 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001458:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800145c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 800146a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800146e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 800147c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001480:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 80014a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 80014b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014b8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	edc3 7a00 	vstr	s15, [r3]
}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	@ 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	00000000 	.word	0x00000000

080014e8 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b090      	sub	sp, #64	@ 0x40
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	60b8      	str	r0, [r7, #8]
 80014fc:	6079      	str	r1, [r7, #4]
	double i = 0-1,axan,ayan;
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MPU6050_GET_ACCEL_TO_ANGLE+0xf8>)
 8001504:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double ang1 = sqrt((ax*ax)+(az*az));
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001510:	edd7 7a03 	vldr	s15, [r7, #12]
 8001514:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	eeb0 0b47 	vmov.f64	d0, d7
 8001524:	f01c fdd4 	bl	801e0d0 <sqrt>
 8001528:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double ang2 = sqrt((ay*ay)+(az*az));
 800152c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001530:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001544:	eeb0 0b47 	vmov.f64	d0, d7
 8001548:	f01c fdc2 	bl	801e0d0 <sqrt>
 800154c:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	axan = atan2((ay*i), ang1);
 8001550:	edd7 7a04 	vldr	s15, [r7, #16]
 8001554:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001558:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800155c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001560:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001564:	eeb0 0b47 	vmov.f64	d0, d7
 8001568:	f01c fdae 	bl	801e0c8 <atan2>
 800156c:	ed87 0b08 	vstr	d0, [r7, #32]
	ayan= atan2(ax, ang2);
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800157c:	eeb0 0b47 	vmov.f64	d0, d7
 8001580:	f01c fda2 	bl	801e0c8 <atan2>
 8001584:	ed87 0b06 	vstr	d0, [r7, #24]

	*ax_ang = (axan*180)/M_PI;
 8001588:	ed97 7b08 	vldr	d7, [r7, #32]
 800158c:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001590:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001594:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 8001598:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800159c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	edc3 7a00 	vstr	s15, [r3]
	*ay_ang = (ayan*180)/M_PI;
 80015a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80015aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 80015ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 80015b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
}
 80015c4:	bf00      	nop
 80015c6:	3740      	adds	r7, #64	@ 0x40
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40668000 	.word	0x40668000
 80015d8:	54442d18 	.word	0x54442d18
 80015dc:	400921fb 	.word	0x400921fb
 80015e0:	bff00000 	.word	0xbff00000

080015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	ed87 0a07 	vstr	s0, [r7, #28]
 80015f6:	edc7 0a06 	vstr	s1, [r7, #24]
 80015fa:	ed87 1a05 	vstr	s2, [r7, #20]
 80015fe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001602:	ed87 2a03 	vstr	s4, [r7, #12]
 8001606:	edc7 2a02 	vstr	s5, [r7, #8]
 800160a:	ed87 3a01 	vstr	s6, [r7, #4]
 800160e:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	230e      	movs	r3, #14
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	223b      	movs	r2, #59	@ 0x3b
 8001628:	21d0      	movs	r1, #208	@ 0xd0
 800162a:	f00d fa6f 	bl	800eb0c <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 800162e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800163c:	4313      	orrs	r3, r2
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001646:	edd7 7a00 	vldr	s15, [r7]
 800164a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800164e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001658:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 800165c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21b      	sxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800166a:	4313      	orrs	r3, r2
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001686:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800168a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21b      	sxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001698:	4313      	orrs	r3, r2
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a2:	edd7 7a00 	vldr	s15, [r7]
 80016a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 80016b8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21b      	sxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80016c6:	4313      	orrs	r3, r2
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 80016e6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80016f4:	4313      	orrs	r3, r2
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001706:	edd7 7a03 	vldr	s15, [r7, #12]
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001710:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 8001714:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21b      	sxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001722:	4313      	orrs	r3, r2
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001734:	edd7 7a02 	vldr	s15, [r7, #8]
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173e:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 8001742:	bf00      	nop
 8001744:	3740      	adds	r7, #64	@ 0x40
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240000a0 	.word	0x240000a0

08001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	230e      	movs	r3, #14
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	223b      	movs	r2, #59	@ 0x3b
 8001766:	21d0      	movs	r1, #208	@ 0xd0
 8001768:	f00d fb74 	bl	800ee54 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]


}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	240000a0 	.word	0x240000a0
 800177c:	00000048 	.word	0x00000048
 8001780:	000041d4 	.word	0x000041d4

08001784 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001784:	b480      	push	{r7}
 8001786:	b08d      	sub	sp, #52	@ 0x34
 8001788:	af00      	add	r7, sp, #0
 800178a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800178c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800178e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	ed87 0a07 	vstr	s0, [r7, #28]
 8001796:	edc7 0a06 	vstr	s1, [r7, #24]
 800179a:	ed87 1a05 	vstr	s2, [r7, #20]
 800179e:	edc7 1a04 	vstr	s3, [r7, #16]
 80017a2:	ed87 2a03 	vstr	s4, [r7, #12]
 80017a6:	edc7 2a02 	vstr	s5, [r7, #8]
 80017aa:	ed87 3a01 	vstr	s6, [r7, #4]
 80017ae:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 80017b2:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ca:	edd7 7a00 	vldr	s15, [r7]
 80017ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 80017e0:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f8:	edd7 7a00 	vldr	s15, [r7]
 80017fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001800:	edd7 7a06 	vldr	s15, [r7, #24]
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21b      	sxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800181a:	795b      	ldrb	r3, [r3, #5]
 800181c:	4313      	orrs	r3, r2
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001826:	edd7 7a00 	vldr	s15, [r7]
 800182a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800182e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800183e:	7a1b      	ldrb	r3, [r3, #8]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21b      	sxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001848:	7a5b      	ldrb	r3, [r3, #9]
 800184a:	4313      	orrs	r3, r2
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001854:	edd7 7a01 	vldr	s15, [r7, #4]
 8001858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800186c:	7a9b      	ldrb	r3, [r3, #10]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21b      	sxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001876:	7adb      	ldrb	r3, [r3, #11]
 8001878:	4313      	orrs	r3, r2
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001882:	edd7 7a01 	vldr	s15, [r7, #4]
 8001886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001894:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21b      	sxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018a4:	7b5b      	ldrb	r3, [r3, #13]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018c2:	edc3 7a00 	vstr	s15, [r3]
}
 80018c6:	bf00      	nop
 80018c8:	3734      	adds	r7, #52	@ 0x34
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	00000048 	.word	0x00000048

080018d8 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	61f8      	str	r0, [r7, #28]
 80018e0:	ed87 0a06 	vstr	s0, [r7, #24]
 80018e4:	edc7 0a05 	vstr	s1, [r7, #20]
 80018e8:	ed87 1a04 	vstr	s2, [r7, #16]
 80018ec:	edc7 1a03 	vstr	s3, [r7, #12]
 80018f0:	ed87 2a02 	vstr	s4, [r7, #8]
 80018f4:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 80018f8:	edd7 2a01 	vldr	s5, [r7, #4]
 80018fc:	ed97 2a02 	vldr	s4, [r7, #8]
 8001900:	edd7 1a03 	vldr	s3, [r7, #12]
 8001904:	ed97 1a04 	vldr	s2, [r7, #16]
 8001908:	edd7 0a05 	vldr	s1, [r7, #20]
 800190c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001910:	69f8      	ldr	r0, [r7, #28]
 8001912:	f000 f9a9 	bl	8001c68 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MPU6050_GET_ACCEL_YH+0x2c>)
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	223d      	movs	r2, #61	@ 0x3d
 800193a:	21d0      	movs	r1, #208	@ 0xd0
 800193c:	f00d f8e6 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 8001940:	79fb      	ldrb	r3, [r7, #7]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240000a0 	.word	0x240000a0

08001950 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MPU6050_GET_ACCEL_YL+0x2c>)
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2301      	movs	r3, #1
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	223e      	movs	r2, #62	@ 0x3e
 800196a:	21d0      	movs	r1, #208	@ 0xd0
 800196c:	f00d f8ce 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 8001970:	79fb      	ldrb	r3, [r7, #7]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	240000a0 	.word	0x240000a0

08001980 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	223f      	movs	r2, #63	@ 0x3f
 800199a:	21d0      	movs	r1, #208	@ 0xd0
 800199c:	f00d f8b6 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	240000a0 	.word	0x240000a0

080019b0 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MPU6050_GET_ACCEL_ZL+0x2c>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	2301      	movs	r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	21d0      	movs	r1, #208	@ 0xd0
 80019cc:	f00d f89e 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	240000a0 	.word	0x240000a0

080019e0 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MPU6050_GET_GYRO_XH+0x2c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2243      	movs	r2, #67	@ 0x43
 80019fa:	21d0      	movs	r1, #208	@ 0xd0
 80019fc:	f00d f886 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240000a0 	.word	0x240000a0

08001a10 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MPU6050_GET_GYRO_XL+0x2c>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2244      	movs	r2, #68	@ 0x44
 8001a2a:	21d0      	movs	r1, #208	@ 0xd0
 8001a2c:	f00d f86e 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240000a0 	.word	0x240000a0

08001a40 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MPU6050_GET_GYRO_YH+0x2c>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	2245      	movs	r2, #69	@ 0x45
 8001a5a:	21d0      	movs	r1, #208	@ 0xd0
 8001a5c:	f00d f856 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	240000a0 	.word	0x240000a0

08001a70 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <MPU6050_GET_GYRO_YL+0x2c>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2246      	movs	r2, #70	@ 0x46
 8001a8a:	21d0      	movs	r1, #208	@ 0xd0
 8001a8c:	f00d f83e 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 8001a90:	79fb      	ldrb	r3, [r7, #7]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	240000a0 	.word	0x240000a0

08001aa0 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MPU6050_GET_GYRO_ZH+0x2c>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2247      	movs	r2, #71	@ 0x47
 8001aba:	21d0      	movs	r1, #208	@ 0xd0
 8001abc:	f00d f826 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	240000a0 	.word	0x240000a0

08001ad0 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MPU6050_GET_GYRO_ZL+0x2c>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2248      	movs	r2, #72	@ 0x48
 8001aea:	21d0      	movs	r1, #208	@ 0xd0
 8001aec:	f00d f80e 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	240000a0 	.word	0x240000a0

08001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9302      	str	r3, [sp, #8]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2301      	movs	r3, #1
 8001b18:	223b      	movs	r2, #59	@ 0x3b
 8001b1a:	21d0      	movs	r1, #208	@ 0xd0
 8001b1c:	f00c fff6 	bl	800eb0c <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001b20:	793b      	ldrb	r3, [r7, #4]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	240000a0 	.word	0x240000a0

08001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001b46:	f7ff feeb 	bl	8001920 <MPU6050_GET_ACCEL_YH>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21c      	sxth	r4, r3
 8001b50:	f7ff fefe 	bl	8001950 <MPU6050_GET_ACCEL_YL>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4323      	orrs	r3, r4
 8001b5a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b6e:	f7ff ff07 	bl	8001980 <MPU6050_GET_ACCEL_ZH>
 8001b72:	4603      	mov	r3, r0
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21c      	sxth	r4, r3
 8001b78:	f7ff ff1a 	bl	80019b0 <MPU6050_GET_ACCEL_ZL>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4323      	orrs	r3, r4
 8001b82:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001b96:	f7ff ff23 	bl	80019e0 <MPU6050_GET_GYRO_XH>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21c      	sxth	r4, r3
 8001ba0:	f7ff ff36 	bl	8001a10 <MPU6050_GET_GYRO_XL>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4323      	orrs	r3, r4
 8001baa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001bbe:	f7ff ff3f 	bl	8001a40 <MPU6050_GET_GYRO_YH>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	b21c      	sxth	r4, r3
 8001bc8:	f7ff ff52 	bl	8001a70 <MPU6050_GET_GYRO_YL>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001be6:	f7ff ff5b 	bl	8001aa0 <MPU6050_GET_GYRO_ZH>
 8001bea:	4603      	mov	r3, r0
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21c      	sxth	r4, r3
 8001bf0:	f7ff ff6e 	bl	8001ad0 <MPU6050_GET_GYRO_ZL>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MPU6050_READ_ID+0x2c>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	2275      	movs	r2, #117	@ 0x75
 8001c22:	21d0      	movs	r1, #208	@ 0xd0
 8001c24:	f00c ff72 	bl	800eb0c <HAL_I2C_Mem_Read>
	return data;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	b25b      	sxtb	r3, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	240000a0 	.word	0x240000a0

08001c38 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	2237      	movs	r2, #55	@ 0x37
 8001c56:	21d0      	movs	r1, #208	@ 0xd0
 8001c58:	f00c fe44 	bl	800e8e4 <HAL_I2C_Mem_Write>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	240000a0 	.word	0x240000a0

08001c68 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	61f8      	str	r0, [r7, #28]
 8001c70:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c74:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c78:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c80:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c84:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang*(-1))+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));// mnozenie X-1 poniewaz akcelerometr miezy w drugą strone niz zyroskop
 8001c88:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001ca8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb4:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang*(-1))+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001cea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cfa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (1*((gz_ang*looptime)+Complementary_Filter_st->oz));
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	f5c28f5c 	.word	0xf5c28f5c
 8001d54:	3fef5c28 	.word	0x3fef5c28
 8001d58:	47ae147b 	.word	0x47ae147b
 8001d5c:	3f947ae1 	.word	0x3f947ae1
 8001d60:	0801eb24 	.word	0x0801eb24

08001d64 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f007 fbac 	bl	80094cc <HAL_Delay>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <nRF24_SendSpi+0x28>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f012 fe31 	bl	80149fc <HAL_SPI_Transmit>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	240000a4 	.word	0x240000a4

08001da8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <nRF24_ReadSpi+0x28>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	f013 f809 	bl	8014dd8 <HAL_SPI_Receive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	240000a4 	.word	0x240000a4

08001dd4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001de2:	2200      	movs	r2, #0
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001de8:	f00c fcac 	bl	800e744 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ffc3 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001df6:	f107 030f 	add.w	r3, r7, #15
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ffd3 	bl	8001da8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e02:	2201      	movs	r2, #1
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001e08:	f00c fc9c 	bl	800e744 <HAL_GPIO_WritePin>

	return result;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	58020400 	.word	0x58020400

08001e1c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e30:	2200      	movs	r2, #0
 8001e32:	2180      	movs	r1, #128	@ 0x80
 8001e34:	480a      	ldr	r0, [pc, #40]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e36:	f00c fc85 	bl	800e744 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff9c 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	4619      	mov	r1, r3
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7ff ffad 	bl	8001da8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e54:	f00c fc76 	bl	800e744 <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58020400 	.word	0x58020400

08001e64 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e82:	2200      	movs	r2, #0
 8001e84:	2180      	movs	r1, #128	@ 0x80
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e88:	f00c fc5c 	bl	800e744 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff72 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	4803      	ldr	r0, [pc, #12]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e9e:	f00c fc51 	bl	800e744 <HAL_GPIO_WritePin>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58020400 	.word	0x58020400

08001eb0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	480b      	ldr	r0, [pc, #44]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001ed0:	f00c fc38 	bl	800e744 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff4f 	bl	8001d7c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f7ff ff4a 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	4803      	ldr	r0, [pc, #12]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001eee:	f00c fc29 	bl	800e744 <HAL_GPIO_WritePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	58020400 	.word	0x58020400

08001f00 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f06:	f000 f84d 	bl	8001fa4 <nRF24_ReadConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f0e:	4910      	ldr	r1, [pc, #64]	@ (8001f50 <nRF24_RX_Mode+0x50>)
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 f9f6 	bl	8002302 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f843 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f2e:	2070      	movs	r0, #112	@ 0x70
 8001f30:	f000 f89b 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f34:	f000 f8a8 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f38:	f000 f8c0 	bl	80020bc <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2140      	movs	r1, #64	@ 0x40
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <nRF24_RX_Mode+0x54>)
 8001f42:	f00c fbff 	bl	800e744 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	240000a8 	.word	0x240000a8
 8001f54:	58020400 	.word	0x58020400

08001f58 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2140      	movs	r1, #64	@ 0x40
 8001f62:	480f      	ldr	r0, [pc, #60]	@ (8001fa0 <nRF24_TX_Mode+0x48>)
 8001f64:	f00c fbee 	bl	800e744 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001f68:	f000 f81c 	bl	8001fa4 <nRF24_ReadConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f816 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f88:	2070      	movs	r0, #112	@ 0x70
 8001f8a:	f000 f86e 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f8e:	f000 f87b 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f92:	f000 f893 	bl	80020bc <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	58020400 	.word	0x58020400

08001fa4 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ff13 	bl	8001dd4 <nRF24_ReadRegister>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ff4e 	bl	8001e64 <nRF24_WriteRegister>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001fda:	2006      	movs	r0, #6
 8001fdc:	f7ff fefa 	bl	8001dd4 <nRF24_ReadRegister>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2006      	movs	r0, #6
 8002002:	f7ff ff2f 	bl	8001e64 <nRF24_WriteRegister>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002018:	2006      	movs	r0, #6
 800201a:	f7ff fedb 	bl	8001dd4 <nRF24_ReadRegister>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002028:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d104      	bne.n	800203a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e006      	b.n	8002048 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d103      	bne.n	8002048 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	4619      	mov	r1, r3
 800204c:	2006      	movs	r0, #6
 800204e:	f7ff ff09 	bl	8001e64 <nRF24_WriteRegister>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800205e:	2007      	movs	r0, #7
 8002060:	f7ff feb8 	bl	8001dd4 <nRF24_ReadRegister>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}

0800206a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4619      	mov	r1, r3
 8002078:	2007      	movs	r0, #7
 800207a:	f7ff fef3 	bl	8001e64 <nRF24_WriteRegister>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800208e:	23e2      	movs	r3, #226	@ 0xe2
 8002090:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <nRF24_FlushRX+0x30>)
 8002098:	f00c fb54 	bl	800e744 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe6b 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020a6:	2201      	movs	r2, #1
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	4803      	ldr	r0, [pc, #12]	@ (80020b8 <nRF24_FlushRX+0x30>)
 80020ac:	f00c fb4a 	bl	800e744 <HAL_GPIO_WritePin>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	58020400 	.word	0x58020400

080020bc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020c2:	23e1      	movs	r3, #225	@ 0xe1
 80020c4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020c6:	2200      	movs	r2, #0
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	4808      	ldr	r0, [pc, #32]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020cc:	f00c fb3a 	bl	800e744 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	2101      	movs	r1, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe51 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020da:	2201      	movs	r2, #1
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020e0:	f00c fb30 	bl	800e744 <HAL_GPIO_WritePin>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	58020400 	.word	0x58020400

080020f0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80020fa:	f7ff ff53 	bl	8001fa4 <nRF24_ReadConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e003      	b.n	800211a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f023 0308 	bic.w	r3, r3, #8
 8002118:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff49 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002134:	f7ff ff36 	bl	8001fa4 <nRF24_ReadConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d104      	bne.n	800214c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e003      	b.n	8002154 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff2c 	bl	8001fb4 <nRF24_WriteConfig>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	b25a      	sxtb	r2, r3
 800217a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b25b      	sxtb	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	2004      	movs	r0, #4
 800218e:	f7ff fe69 	bl	8001e64 <nRF24_WriteRegister>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	2005      	movs	r0, #5
 80021b0:	f7ff fe58 	bl	8001e64 <nRF24_WriteRegister>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d901      	bls.n	80021d6 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80021d2:	2305      	movs	r3, #5
 80021d4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	3311      	adds	r3, #17
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7ff fe3c 	bl	8001e64 <nRF24_WriteRegister>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d901      	bls.n	800220e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800220a:	2305      	movs	r3, #5
 800220c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff fde0 	bl	8001dd4 <nRF24_ReadRegister>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10a      	bne.n	8002234 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2201      	movs	r2, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	b25a      	sxtb	r2, r3
 8002228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222c:	4313      	orrs	r3, r2
 800222e:	b25b      	sxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e00b      	b.n	800224c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	b25b      	sxtb	r3, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	b25a      	sxtb	r2, r3
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4013      	ands	r3, r2
 8002248:	b25b      	sxtb	r3, r3
 800224a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	4619      	mov	r1, r3
 8002250:	2002      	movs	r0, #2
 8002252:	f7ff fe07 	bl	8001e64 <nRF24_WriteRegister>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	460a      	mov	r2, r1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	4613      	mov	r3, r2
 800226c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d901      	bls.n	8002278 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002274:	2305      	movs	r3, #5
 8002276:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fdab 	bl	8001dd4 <nRF24_ReadRegister>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10a      	bne.n	800229e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	b25a      	sxtb	r2, r3
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	b25b      	sxtb	r3, r3
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e00b      	b.n	80022b6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2201      	movs	r2, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	b25a      	sxtb	r2, r3
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4619      	mov	r1, r3
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7ff fdd2 	bl	8001e64 <nRF24_WriteRegister>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d901      	bls.n	80022dc <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022d8:	2305      	movs	r3, #5
 80022da:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d801      	bhi.n	80022e6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022e2:	2303      	movs	r3, #3
 80022e4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	3b02      	subs	r3, #2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	2003      	movs	r0, #3
 80022f6:	f7ff fdb5 	bl	8001e64 <nRF24_WriteRegister>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	6039      	str	r1, [r7, #0]
 800230c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <nRF24_SetRXAddress+0x18>
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d11d      	bne.n	8002356 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e00d      	b.n	800233c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	441a      	add	r2, r3
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	f1c3 0302 	rsb	r3, r3, #2
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	3310      	adds	r3, #16
 8002330:	443b      	add	r3, r7
 8002332:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d9ee      	bls.n	8002320 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	330a      	adds	r3, #10
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	2203      	movs	r2, #3
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fdae 	bl	8001eb0 <nRF24_WriteRegisters>
	{
 8002354:	e00a      	b.n	800236c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	330a      	adds	r3, #10
 800235a:	b2da      	uxtb	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3302      	adds	r3, #2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7ff fd7d 	bl	8001e64 <nRF24_WriteRegister>
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2203      	movs	r2, #3
 8002382:	4619      	mov	r1, r3
 8002384:	200a      	movs	r0, #10
 8002386:	f7ff fd49 	bl	8001e1c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e00c      	b.n	80023aa <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f1c3 0302 	rsb	r3, r3, #2
 8002398:	3210      	adds	r2, #16
 800239a:	443a      	add	r2, r7
 800239c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <nRF24_SetTXAddress+0x88>)
 80023a2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d9ef      	bls.n	8002390 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00d      	b.n	80023d2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	441a      	add	r2, r3
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	f1c3 0302 	rsb	r3, r3, #2
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	3310      	adds	r3, #16
 80023c6:	443b      	add	r3, r7
 80023c8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d9ee      	bls.n	80023b6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2203      	movs	r2, #3
 80023de:	4619      	mov	r1, r3
 80023e0:	200a      	movs	r0, #10
 80023e2:	f7ff fd65 	bl	8001eb0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2203      	movs	r2, #3
 80023ec:	4619      	mov	r1, r3
 80023ee:	2010      	movs	r0, #16
 80023f0:	f7ff fd5e 	bl	8001eb0 <nRF24_WriteRegisters>

}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	240000a8 	.word	0x240000a8

08002400 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002406:	f7ff fe28 	bl	800205a <nRF24_ReadStatus>
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002414:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe26 	bl	800206a <nRF24_WriteStatus>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002430:	f7ff fdb8 	bl	8001fa4 <nRF24_ReadConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e003      	b.n	8002450 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800244e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fdae 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800246a:	f7ff fd9b 	bl	8001fa4 <nRF24_ReadConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e003      	b.n	800248a <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f023 0320 	bic.w	r3, r3, #32
 8002488:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fd91 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024a4:	f7ff fd7e 	bl	8001fa4 <nRF24_ReadConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e003      	b.n	80024c4 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	f023 0310 	bic.w	r3, r3, #16
 80024c2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd74 	bl	8001fb4 <nRF24_WriteConfig>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80024dc:	2220      	movs	r2, #32
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	20a0      	movs	r0, #160	@ 0xa0
 80024e2:	f7ff fce5 	bl	8001eb0 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80024f6:	2201      	movs	r2, #1
 80024f8:	2140      	movs	r1, #64	@ 0x40
 80024fa:	4810      	ldr	r0, [pc, #64]	@ (800253c <nRF24_WaitTX+0x4c>)
 80024fc:	f00c f922 	bl	800e744 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff fc2f 	bl	8001d64 <nRF24_Delay>
	NRF24_CE_LOW;
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	480c      	ldr	r0, [pc, #48]	@ (800253c <nRF24_WaitTX+0x4c>)
 800250c:	f00c f91a 	bl	800e744 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff fc27 	bl	8001d64 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8002516:	f7ff fda0 	bl	800205a <nRF24_ReadStatus>
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <nRF24_WaitTX+0x42>
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <nRF24_WaitTX+0x20>

}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	58020400 	.word	0x58020400

08002540 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002548:	2220      	movs	r2, #32
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	2061      	movs	r0, #97	@ 0x61
 800254e:	f7ff fc65 	bl	8001e1c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002552:	2140      	movs	r1, #64	@ 0x40
 8002554:	2007      	movs	r0, #7
 8002556:	f7ff fc85 	bl	8001e64 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800255a:	f7ff fd7e 	bl	800205a <nRF24_ReadStatus>
 800255e:	4603      	mov	r3, r0
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002568:	2120      	movs	r1, #32
 800256a:	2007      	movs	r0, #7
 800256c:	f7ff fc7a 	bl	8001e64 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002582:	f000 f811 	bl	80025a8 <nRF24_ReadFifoStatus>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	fa42 f303 	asr.w	r3, r2, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80025ac:	2017      	movs	r0, #23
 80025ae:	f7ff fc11 	bl	8001dd4 <nRF24_ReadRegister>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80025c0:	4a25      	ldr	r2, [pc, #148]	@ (8002658 <nRF24_Init+0xa0>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80025c6:	2200      	movs	r2, #0
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	4824      	ldr	r0, [pc, #144]	@ (800265c <nRF24_Init+0xa4>)
 80025cc:	f00c f8ba 	bl	800e744 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80025d0:	2201      	movs	r2, #1
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	4821      	ldr	r0, [pc, #132]	@ (800265c <nRF24_Init+0xa4>)
 80025d6:	f00c f8b5 	bl	800e744 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80025da:	200a      	movs	r0, #10
 80025dc:	f006 ff76 	bl	80094cc <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80025e0:	2003      	movs	r0, #3
 80025e2:	f7ff fcf5 	bl	8001fd0 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7ff fd11 	bl	800200e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff fd7f 	bl	80020f0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7ff fd99 	bl	800212a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fdb2 	bl	8002164 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002600:	2100      	movs	r1, #0
 8002602:	201c      	movs	r0, #28
 8002604:	f7ff fc2e 	bl	8001e64 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002608:	2120      	movs	r1, #32
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fdd6 	bl	80021bc <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 8002610:	200f      	movs	r0, #15
 8002612:	f7ff fdc2 	bl	800219a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002616:	2101      	movs	r1, #1
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fdeb 	bl	80021f4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800261e:	2101      	movs	r1, #1
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fe1c 	bl	800225e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002626:	2003      	movs	r0, #3
 8002628:	f7ff fe4e 	bl	80022c8 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 800262c:	2001      	movs	r0, #1
 800262e:	f006 ff4d 	bl	80094cc <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fef7 	bl	8002426 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ff11 	bl	8002460 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff ff2b 	bl	800249a <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f006 ff41 	bl	80094cc <HAL_Delay>

	nRF24_ClearInterrupts();
 800264a:	f7ff fed9 	bl	8002400 <nRF24_ClearInterrupts>


}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240000a4 	.word	0x240000a4
 800265c:	58020400 	.word	0x58020400

08002660 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
//	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
//	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
//	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
//	xz[8] = nRF24_ReadConfig();

}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002674:	f3bf 8f4f 	dsb	sy
}
 8002678:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <__NVIC_SystemReset+0x24>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002682:	4904      	ldr	r1, [pc, #16]	@ (8002694 <__NVIC_SystemReset+0x24>)
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <__NVIC_SystemReset+0x28>)
 8002686:	4313      	orrs	r3, r2
 8002688:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800268a:	f3bf 8f4f 	dsb	sy
}
 800268e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <__NVIC_SystemReset+0x20>
 8002694:	e000ed00 	.word	0xe000ed00
 8002698:	05fa0004 	.word	0x05fa0004

0800269c <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
 80026a6:	2300      	movs	r3, #0
 80026a8:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 80026aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002728 <interpretcommand+0x8c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e02e      	b.n	8002714 <interpretcommand+0x78>

		if(words[j] == ' '){
 80026b6:	4a1d      	ldr	r2, [pc, #116]	@ (800272c <interpretcommand+0x90>)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d102      	bne.n	80026c8 <interpretcommand+0x2c>
			vcount++;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	3301      	adds	r3, #1
 80026c6:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 80026c8:	7dfb      	ldrb	r3, [r7, #23]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d108      	bne.n	80026e0 <interpretcommand+0x44>
			command[j] = words[j];
 80026ce:	4a17      	ldr	r2, [pc, #92]	@ (800272c <interpretcommand+0x90>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	7819      	ldrb	r1, [r3, #0]
 80026d6:	4a16      	ldr	r2, [pc, #88]	@ (8002730 <interpretcommand+0x94>)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	460a      	mov	r2, r1
 80026de:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d113      	bne.n	800270e <interpretcommand+0x72>
			value1[J1] = words[j];
 80026e6:	7dbb      	ldrb	r3, [r7, #22]
 80026e8:	4910      	ldr	r1, [pc, #64]	@ (800272c <interpretcommand+0x90>)
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	440a      	add	r2, r1
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	3318      	adds	r3, #24
 80026f2:	443b      	add	r3, r7
 80026f4:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 80026f8:	7dba      	ldrb	r2, [r7, #22]
 80026fa:	7dbb      	ldrb	r3, [r7, #22]
 80026fc:	3218      	adds	r2, #24
 80026fe:	443a      	add	r2, r7
 8002700:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <interpretcommand+0x98>)
 8002706:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002708:	7dbb      	ldrb	r3, [r7, #22]
 800270a:	3301      	adds	r3, #1
 800270c:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	3301      	adds	r3, #1
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b4f      	cmp	r3, #79	@ 0x4f
 8002718:	ddcd      	ble.n	80026b6 <interpretcommand+0x1a>
		}
	}
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	000041be 	.word	0x000041be
 800272c:	000041b4 	.word	0x000041b4
 8002730:	000041b0 	.word	0x000041b0
 8002734:	000041a0 	.word	0x000041a0

08002738 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b50      	cmp	r3, #80	@ 0x50
 8002748:	d14c      	bne.n	80027e4 <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800274a:	4bd5      	ldr	r3, [pc, #852]	@ (8002aa0 <executecommand+0x368>)
 800274c:	785b      	ldrb	r3, [r3, #1]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002756:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002aa4 <executecommand+0x36c>
 800275a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800275e:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002aa8 <executecommand+0x370>
 8002762:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002766:	4bce      	ldr	r3, [pc, #824]	@ (8002aa0 <executecommand+0x368>)
 8002768:	789b      	ldrb	r3, [r3, #2]
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002772:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002aa4 <executecommand+0x36c>
 8002776:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800277a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800277e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002782:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002786:	4bc6      	ldr	r3, [pc, #792]	@ (8002aa0 <executecommand+0x368>)
 8002788:	78db      	ldrb	r3, [r3, #3]
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002792:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002aa4 <executecommand+0x36c>
 8002796:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800279a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800279e:	4bc0      	ldr	r3, [pc, #768]	@ (8002aa0 <executecommand+0x368>)
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027aa:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002aa4 <executecommand+0x36c>
 80027ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027b2:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80027b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027be:	4bb8      	ldr	r3, [pc, #736]	@ (8002aa0 <executecommand+0x368>)
 80027c0:	795b      	ldrb	r3, [r3, #5]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ca:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002aa4 <executecommand+0x36c>
 80027ce:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80027d2:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002aa8 <executecommand+0x370>
 80027d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027de:	4bb3      	ldr	r3, [pc, #716]	@ (8002aac <executecommand+0x374>)
 80027e0:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b49      	cmp	r3, #73	@ 0x49
 80027ea:	d14f      	bne.n	800288c <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80027ec:	4bac      	ldr	r3, [pc, #688]	@ (8002aa0 <executecommand+0x368>)
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f8:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002aa4 <executecommand+0x36c>
 80027fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002800:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002aa8 <executecommand+0x370>
 8002804:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002808:	4ba5      	ldr	r3, [pc, #660]	@ (8002aa0 <executecommand+0x368>)
 800280a:	789b      	ldrb	r3, [r3, #2]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002814:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002aa4 <executecommand+0x36c>
 8002818:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800281c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002820:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002828:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa0 <executecommand+0x368>)
 800282a:	78db      	ldrb	r3, [r3, #3]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002834:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002aa4 <executecommand+0x36c>
 8002838:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	4b97      	ldr	r3, [pc, #604]	@ (8002aa0 <executecommand+0x368>)
 8002842:	791b      	ldrb	r3, [r3, #4]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002aa4 <executecommand+0x36c>
 8002850:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002854:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002858:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800285c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002860:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa0 <executecommand+0x368>)
 8002862:	795b      	ldrb	r3, [r3, #5]
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002aa4 <executecommand+0x36c>
 8002870:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002874:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002aa8 <executecommand+0x370>
 8002878:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800287c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002880:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab0 <executecommand+0x378>)
 8002882:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 8002886:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab4 <executecommand+0x37c>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b44      	cmp	r3, #68	@ 0x44
 8002892:	d14c      	bne.n	800292e <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002894:	4b82      	ldr	r3, [pc, #520]	@ (8002aa0 <executecommand+0x368>)
 8002896:	785b      	ldrb	r3, [r3, #1]
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002aa4 <executecommand+0x36c>
 80028a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028a8:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002ab8 <executecommand+0x380>
 80028ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028b0:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa0 <executecommand+0x368>)
 80028b2:	789b      	ldrb	r3, [r3, #2]
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028bc:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002aa4 <executecommand+0x36c>
 80028c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028c4:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002aa8 <executecommand+0x370>
 80028c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d0:	4b73      	ldr	r3, [pc, #460]	@ (8002aa0 <executecommand+0x368>)
 80028d2:	78db      	ldrb	r3, [r3, #3]
 80028d4:	ee07 3a90 	vmov	s15, r3
 80028d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028dc:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002aa4 <executecommand+0x36c>
 80028e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028e4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80028e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f0:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa0 <executecommand+0x368>)
 80028f2:	791b      	ldrb	r3, [r3, #4]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fc:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002aa4 <executecommand+0x36c>
 8002900:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002908:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <executecommand+0x368>)
 800290a:	795b      	ldrb	r3, [r3, #5]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002914:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002aa4 <executecommand+0x36c>
 8002918:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800291c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002920:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	4b64      	ldr	r3, [pc, #400]	@ (8002abc <executecommand+0x384>)
 800292a:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b70      	cmp	r3, #112	@ 0x70
 8002934:	d14c      	bne.n	80029d0 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002936:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa0 <executecommand+0x368>)
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002942:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002aa4 <executecommand+0x36c>
 8002946:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800294a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002aa8 <executecommand+0x370>
 800294e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002952:	4b53      	ldr	r3, [pc, #332]	@ (8002aa0 <executecommand+0x368>)
 8002954:	789b      	ldrb	r3, [r3, #2]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002aa4 <executecommand+0x36c>
 8002962:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002966:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800296a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800296e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002972:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa0 <executecommand+0x368>)
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297e:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002aa4 <executecommand+0x36c>
 8002982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298a:	4b45      	ldr	r3, [pc, #276]	@ (8002aa0 <executecommand+0x368>)
 800298c:	791b      	ldrb	r3, [r3, #4]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002996:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002aa4 <executecommand+0x36c>
 800299a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800299e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80029a2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029aa:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa0 <executecommand+0x368>)
 80029ac:	795b      	ldrb	r3, [r3, #5]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002aa4 <executecommand+0x36c>
 80029ba:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80029be:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002aa8 <executecommand+0x370>
 80029c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac0 <executecommand+0x388>)
 80029cc:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b69      	cmp	r3, #105	@ 0x69
 80029d6:	d14f      	bne.n	8002a78 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029d8:	4b31      	ldr	r3, [pc, #196]	@ (8002aa0 <executecommand+0x368>)
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002aa4 <executecommand+0x36c>
 80029e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ec:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002aa8 <executecommand+0x370>
 80029f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029f4:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa0 <executecommand+0x368>)
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a00:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002aa4 <executecommand+0x36c>
 8002a04:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a08:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a14:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <executecommand+0x368>)
 8002a16:	78db      	ldrb	r3, [r3, #3]
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a20:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002aa4 <executecommand+0x36c>
 8002a24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa0 <executecommand+0x368>)
 8002a2e:	791b      	ldrb	r3, [r3, #4]
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a38:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002aa4 <executecommand+0x36c>
 8002a3c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a40:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a44:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <executecommand+0x368>)
 8002a4e:	795b      	ldrb	r3, [r3, #5]
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a58:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002aa4 <executecommand+0x36c>
 8002a5c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a60:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002aa8 <executecommand+0x370>
 8002a64:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <executecommand+0x38c>)
 8002a6e:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <executecommand+0x390>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b64      	cmp	r3, #100	@ 0x64
 8002a7e:	d164      	bne.n	8002b4a <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <executecommand+0x368>)
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8c:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002aa4 <executecommand+0x36c>
 8002a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a94:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ab8 <executecommand+0x380>
 8002a98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a9c:	e016      	b.n	8002acc <executecommand+0x394>
 8002a9e:	bf00      	nop
 8002aa0:	000041a0 	.word	0x000041a0
 8002aa4:	42400000 	.word	0x42400000
 8002aa8:	42c80000 	.word	0x42c80000
 8002aac:	000040cc 	.word	0x000040cc
 8002ab0:	000040d8 	.word	0x000040d8
 8002ab4:	0000409c 	.word	0x0000409c
 8002ab8:	447a0000 	.word	0x447a0000
 8002abc:	000040e4 	.word	0x000040e4
 8002ac0:	0000412c 	.word	0x0000412c
 8002ac4:	00004138 	.word	0x00004138
 8002ac8:	000040a8 	.word	0x000040a8
 8002acc:	4bd3      	ldr	r3, [pc, #844]	@ (8002e1c <executecommand+0x6e4>)
 8002ace:	789b      	ldrb	r3, [r3, #2]
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad8:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002e20 <executecommand+0x6e8>
 8002adc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ae0:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002e24 <executecommand+0x6ec>
 8002ae4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aec:	4bcb      	ldr	r3, [pc, #812]	@ (8002e1c <executecommand+0x6e4>)
 8002aee:	78db      	ldrb	r3, [r3, #3]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af8:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002e20 <executecommand+0x6e8>
 8002afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b00:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0c:	4bc3      	ldr	r3, [pc, #780]	@ (8002e1c <executecommand+0x6e4>)
 8002b0e:	791b      	ldrb	r3, [r3, #4]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b18:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002e20 <executecommand+0x6e8>
 8002b1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	4bbd      	ldr	r3, [pc, #756]	@ (8002e1c <executecommand+0x6e4>)
 8002b26:	795b      	ldrb	r3, [r3, #5]
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b30:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002e20 <executecommand+0x6e8>
 8002b34:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002b38:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002b3c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b44:	4bb8      	ldr	r3, [pc, #736]	@ (8002e28 <executecommand+0x6f0>)
 8002b46:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b46      	cmp	r3, #70	@ 0x46
 8002b50:	d150      	bne.n	8002bf4 <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002b52:	4bb2      	ldr	r3, [pc, #712]	@ (8002e1c <executecommand+0x6e4>)
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002e20 <executecommand+0x6e8>
 8002b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b66:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002e2c <executecommand+0x6f4>
 8002b6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b6e:	4bab      	ldr	r3, [pc, #684]	@ (8002e1c <executecommand+0x6e4>)
 8002b70:	789b      	ldrb	r3, [r3, #2]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002e20 <executecommand+0x6e8>
 8002b7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b82:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002e24 <executecommand+0x6ec>
 8002b86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8e:	4ba3      	ldr	r3, [pc, #652]	@ (8002e1c <executecommand+0x6e4>)
 8002b90:	78db      	ldrb	r3, [r3, #3]
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b9a:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002e20 <executecommand+0x6e8>
 8002b9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ba2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ba6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bae:	4b9b      	ldr	r3, [pc, #620]	@ (8002e1c <executecommand+0x6e4>)
 8002bb0:	791b      	ldrb	r3, [r3, #4]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002e20 <executecommand+0x6e8>
 8002bbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc6:	4b95      	ldr	r3, [pc, #596]	@ (8002e1c <executecommand+0x6e4>)
 8002bc8:	795b      	ldrb	r3, [r3, #5]
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd2:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002e20 <executecommand+0x6e8>
 8002bd6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bda:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bea:	ee17 3a90 	vmov	r3, s15
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e30 <executecommand+0x6f8>)
 8002bf2:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b66      	cmp	r3, #102	@ 0x66
 8002bfa:	d150      	bne.n	8002c9e <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bfc:	4b87      	ldr	r3, [pc, #540]	@ (8002e1c <executecommand+0x6e4>)
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c08:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002e20 <executecommand+0x6e8>
 8002c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c10:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002e2c <executecommand+0x6f4>
 8002c14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c18:	4b80      	ldr	r3, [pc, #512]	@ (8002e1c <executecommand+0x6e4>)
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c24:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002e20 <executecommand+0x6e8>
 8002c28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c2c:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002e24 <executecommand+0x6ec>
 8002c30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c38:	4b78      	ldr	r3, [pc, #480]	@ (8002e1c <executecommand+0x6e4>)
 8002c3a:	78db      	ldrb	r3, [r3, #3]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c44:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002e20 <executecommand+0x6e8>
 8002c48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c4c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c58:	4b70      	ldr	r3, [pc, #448]	@ (8002e1c <executecommand+0x6e4>)
 8002c5a:	791b      	ldrb	r3, [r3, #4]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c64:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002e20 <executecommand+0x6e8>
 8002c68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c70:	4b6a      	ldr	r3, [pc, #424]	@ (8002e1c <executecommand+0x6e4>)
 8002c72:	795b      	ldrb	r3, [r3, #5]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7c:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002e20 <executecommand+0x6e8>
 8002c80:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c84:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c94:	ee17 3a90 	vmov	r3, s15
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	4b66      	ldr	r3, [pc, #408]	@ (8002e34 <executecommand+0x6fc>)
 8002c9c:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b61      	cmp	r3, #97	@ 0x61
 8002ca4:	d14c      	bne.n	8002d40 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e1c <executecommand+0x6e4>)
 8002ca8:	785b      	ldrb	r3, [r3, #1]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002e20 <executecommand+0x6e8>
 8002cb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cba:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002e24 <executecommand+0x6ec>
 8002cbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cc2:	4b56      	ldr	r3, [pc, #344]	@ (8002e1c <executecommand+0x6e4>)
 8002cc4:	789b      	ldrb	r3, [r3, #2]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e20 <executecommand+0x6e8>
 8002cd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cd6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8002e1c <executecommand+0x6e4>)
 8002ce4:	78db      	ldrb	r3, [r3, #3]
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cee:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002e20 <executecommand+0x6e8>
 8002cf2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cfa:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <executecommand+0x6e4>)
 8002cfc:	791b      	ldrb	r3, [r3, #4]
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d06:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e20 <executecommand+0x6e8>
 8002d0a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d0e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d1a:	4b40      	ldr	r3, [pc, #256]	@ (8002e1c <executecommand+0x6e4>)
 8002d1c:	795b      	ldrb	r3, [r3, #5]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e20 <executecommand+0x6e8>
 8002d2a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d2e:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002e24 <executecommand+0x6ec>
 8002d32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e38 <executecommand+0x700>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b62      	cmp	r3, #98	@ 0x62
 8002d46:	d14f      	bne.n	8002de8 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d48:	4b34      	ldr	r3, [pc, #208]	@ (8002e1c <executecommand+0x6e4>)
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d54:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e20 <executecommand+0x6e8>
 8002d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d5c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e24 <executecommand+0x6ec>
 8002d60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d64:	4b2d      	ldr	r3, [pc, #180]	@ (8002e1c <executecommand+0x6e4>)
 8002d66:	789b      	ldrb	r3, [r3, #2]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d70:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002e20 <executecommand+0x6e8>
 8002d74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d78:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d84:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <executecommand+0x6e4>)
 8002d86:	78db      	ldrb	r3, [r3, #3]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d90:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002e20 <executecommand+0x6e8>
 8002d94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e1c <executecommand+0x6e4>)
 8002d9e:	791b      	ldrb	r3, [r3, #4]
 8002da0:	ee07 3a90 	vmov	s15, r3
 8002da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da8:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e20 <executecommand+0x6e8>
 8002dac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002db0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002db4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dbc:	4b17      	ldr	r3, [pc, #92]	@ (8002e1c <executecommand+0x6e4>)
 8002dbe:	795b      	ldrb	r3, [r3, #5]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc8:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002e20 <executecommand+0x6e8>
 8002dcc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002dd0:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002e24 <executecommand+0x6ec>
 8002dd4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ddc:	4b17      	ldr	r3, [pc, #92]	@ (8002e3c <executecommand+0x704>)
 8002dde:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002de2:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <executecommand+0x708>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b63      	cmp	r3, #99	@ 0x63
 8002dee:	d166      	bne.n	8002ebe <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002df0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e1c <executecommand+0x6e4>)
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002e20 <executecommand+0x6e8>
 8002e00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e04:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002e2c <executecommand+0x6f4>
 8002e08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <executecommand+0x6e4>)
 8002e0e:	789b      	ldrb	r3, [r3, #2]
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e18:	e018      	b.n	8002e4c <executecommand+0x714>
 8002e1a:	bf00      	nop
 8002e1c:	000041a0 	.word	0x000041a0
 8002e20:	42400000 	.word	0x42400000
 8002e24:	42c80000 	.word	0x42c80000
 8002e28:	00004144 	.word	0x00004144
 8002e2c:	447a0000 	.word	0x447a0000
 8002e30:	00004074 	.word	0x00004074
 8002e34:	00004076 	.word	0x00004076
 8002e38:	000040d0 	.word	0x000040d0
 8002e3c:	000040dc 	.word	0x000040dc
 8002e40:	000040a0 	.word	0x000040a0
 8002e44:	42400000 	.word	0x42400000
 8002e48:	42c80000 	.word	0x42c80000
 8002e4c:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002e44 <executecommand+0x70c>
 8002e50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e54:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002e48 <executecommand+0x710>
 8002e58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e60:	4bd5      	ldr	r3, [pc, #852]	@ (80031b8 <executecommand+0xa80>)
 8002e62:	78db      	ldrb	r3, [r3, #3]
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6c:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 80031bc <executecommand+0xa84>
 8002e70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e74:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e80:	4bcd      	ldr	r3, [pc, #820]	@ (80031b8 <executecommand+0xa80>)
 8002e82:	791b      	ldrb	r3, [r3, #4]
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8c:	eddf 6acb 	vldr	s13, [pc, #812]	@ 80031bc <executecommand+0xa84>
 8002e90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e98:	4bc7      	ldr	r3, [pc, #796]	@ (80031b8 <executecommand+0xa80>)
 8002e9a:	795b      	ldrb	r3, [r3, #5]
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea4:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 80031bc <executecommand+0xa84>
 8002ea8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002eac:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002eb0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb8:	4bc1      	ldr	r3, [pc, #772]	@ (80031c0 <executecommand+0xa88>)
 8002eba:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b65      	cmp	r3, #101	@ 0x65
 8002ec4:	d14c      	bne.n	8002f60 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002ec6:	4bbc      	ldr	r3, [pc, #752]	@ (80031b8 <executecommand+0xa80>)
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031bc <executecommand+0xa84>
 8002ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002eda:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80031c4 <executecommand+0xa8c>
 8002ede:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ee2:	4bb5      	ldr	r3, [pc, #724]	@ (80031b8 <executecommand+0xa80>)
 8002ee4:	789b      	ldrb	r3, [r3, #2]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80031bc <executecommand+0xa84>
 8002ef2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ef6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002efa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f02:	4bad      	ldr	r3, [pc, #692]	@ (80031b8 <executecommand+0xa80>)
 8002f04:	78db      	ldrb	r3, [r3, #3]
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0e:	eddf 6aab 	vldr	s13, [pc, #684]	@ 80031bc <executecommand+0xa84>
 8002f12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1a:	4ba7      	ldr	r3, [pc, #668]	@ (80031b8 <executecommand+0xa80>)
 8002f1c:	791b      	ldrb	r3, [r3, #4]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 80031bc <executecommand+0xa84>
 8002f2a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f2e:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3a:	4b9f      	ldr	r3, [pc, #636]	@ (80031b8 <executecommand+0xa80>)
 8002f3c:	795b      	ldrb	r3, [r3, #5]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 80031bc <executecommand+0xa84>
 8002f4a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f4e:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80031c4 <executecommand+0xa8c>
 8002f52:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80031c8 <executecommand+0xa90>)
 8002f5c:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b67      	cmp	r3, #103	@ 0x67
 8002f66:	d14f      	bne.n	8003008 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f68:	4b93      	ldr	r3, [pc, #588]	@ (80031b8 <executecommand+0xa80>)
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f74:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031bc <executecommand+0xa84>
 8002f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f7c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80031c4 <executecommand+0xa8c>
 8002f80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f84:	4b8c      	ldr	r3, [pc, #560]	@ (80031b8 <executecommand+0xa80>)
 8002f86:	789b      	ldrb	r3, [r3, #2]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f90:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 80031bc <executecommand+0xa84>
 8002f94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f98:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa4:	4b84      	ldr	r3, [pc, #528]	@ (80031b8 <executecommand+0xa80>)
 8002fa6:	78db      	ldrb	r3, [r3, #3]
 8002fa8:	ee07 3a90 	vmov	s15, r3
 8002fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb0:	eddf 6a82 	vldr	s13, [pc, #520]	@ 80031bc <executecommand+0xa84>
 8002fb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80031b8 <executecommand+0xa80>)
 8002fbe:	791b      	ldrb	r3, [r3, #4]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc8:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80031bc <executecommand+0xa84>
 8002fcc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fd0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002fd4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fdc:	4b76      	ldr	r3, [pc, #472]	@ (80031b8 <executecommand+0xa80>)
 8002fde:	795b      	ldrb	r3, [r3, #5]
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe8:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80031bc <executecommand+0xa84>
 8002fec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ff0:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 80031c4 <executecommand+0xa8c>
 8002ff4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffc:	4b73      	ldr	r3, [pc, #460]	@ (80031cc <executecommand+0xa94>)
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 8003002:	4b73      	ldr	r3, [pc, #460]	@ (80031d0 <executecommand+0xa98>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b68      	cmp	r3, #104	@ 0x68
 800300e:	d14c      	bne.n	80030aa <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003010:	4b69      	ldr	r3, [pc, #420]	@ (80031b8 <executecommand+0xa80>)
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301c:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80031bc <executecommand+0xa84>
 8003020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003024:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80031d4 <executecommand+0xa9c>
 8003028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800302c:	4b62      	ldr	r3, [pc, #392]	@ (80031b8 <executecommand+0xa80>)
 800302e:	789b      	ldrb	r3, [r3, #2]
 8003030:	ee07 3a90 	vmov	s15, r3
 8003034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003038:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031bc <executecommand+0xa84>
 800303c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003040:	eddf 6a60 	vldr	s13, [pc, #384]	@ 80031c4 <executecommand+0xa8c>
 8003044:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800304c:	4b5a      	ldr	r3, [pc, #360]	@ (80031b8 <executecommand+0xa80>)
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003058:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031bc <executecommand+0xa84>
 800305c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003060:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003064:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800306c:	4b52      	ldr	r3, [pc, #328]	@ (80031b8 <executecommand+0xa80>)
 800306e:	791b      	ldrb	r3, [r3, #4]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	eddf 6a50 	vldr	s13, [pc, #320]	@ 80031bc <executecommand+0xa84>
 800307c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003084:	4b4c      	ldr	r3, [pc, #304]	@ (80031b8 <executecommand+0xa80>)
 8003086:	795b      	ldrb	r3, [r3, #5]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003090:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80031bc <executecommand+0xa84>
 8003094:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003098:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800309c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a4:	4b4c      	ldr	r3, [pc, #304]	@ (80031d8 <executecommand+0xaa0>)
 80030a6:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b6a      	cmp	r3, #106	@ 0x6a
 80030b0:	d14c      	bne.n	800314c <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80030b2:	4b41      	ldr	r3, [pc, #260]	@ (80031b8 <executecommand+0xa80>)
 80030b4:	785b      	ldrb	r3, [r3, #1]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030be:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031bc <executecommand+0xa84>
 80030c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030c6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80031c4 <executecommand+0xa8c>
 80030ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ce:	4b3a      	ldr	r3, [pc, #232]	@ (80031b8 <executecommand+0xa80>)
 80030d0:	789b      	ldrb	r3, [r3, #2]
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031bc <executecommand+0xa84>
 80030de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030e2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ee:	4b32      	ldr	r3, [pc, #200]	@ (80031b8 <executecommand+0xa80>)
 80030f0:	78db      	ldrb	r3, [r3, #3]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80031bc <executecommand+0xa84>
 80030fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003106:	4b2c      	ldr	r3, [pc, #176]	@ (80031b8 <executecommand+0xa80>)
 8003108:	791b      	ldrb	r3, [r3, #4]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003112:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80031bc <executecommand+0xa84>
 8003116:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800311a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800311e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003122:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003126:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <executecommand+0xa80>)
 8003128:	795b      	ldrb	r3, [r3, #5]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80031bc <executecommand+0xa84>
 8003136:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800313a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80031c4 <executecommand+0xa8c>
 800313e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <executecommand+0xaa4>)
 8003148:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b6b      	cmp	r3, #107	@ 0x6b
 8003152:	d167      	bne.n	8003224 <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <executecommand+0xa80>)
 8003156:	785b      	ldrb	r3, [r3, #1]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003160:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031bc <executecommand+0xa84>
 8003164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003168:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031c4 <executecommand+0xa8c>
 800316c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <executecommand+0xa80>)
 8003172:	789b      	ldrb	r3, [r3, #2]
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80031bc <executecommand+0xa84>
 8003180:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003184:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003188:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800318c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <executecommand+0xa80>)
 8003192:	78db      	ldrb	r3, [r3, #3]
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80031bc <executecommand+0xa84>
 80031a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a8:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <executecommand+0xa80>)
 80031aa:	791b      	ldrb	r3, [r3, #4]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	e016      	b.n	80031e4 <executecommand+0xaac>
 80031b6:	bf00      	nop
 80031b8:	000041a0 	.word	0x000041a0
 80031bc:	42400000 	.word	0x42400000
 80031c0:	000040e8 	.word	0x000040e8
 80031c4:	42c80000 	.word	0x42c80000
 80031c8:	00004130 	.word	0x00004130
 80031cc:	0000413c 	.word	0x0000413c
 80031d0:	000040ac 	.word	0x000040ac
 80031d4:	447a0000 	.word	0x447a0000
 80031d8:	00004148 	.word	0x00004148
 80031dc:	000040d4 	.word	0x000040d4
 80031e0:	42400000 	.word	0x42400000
 80031e4:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80031e0 <executecommand+0xaa8>
 80031e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031ec:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80031f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031f8:	4bba      	ldr	r3, [pc, #744]	@ (80034e4 <executecommand+0xdac>)
 80031fa:	795b      	ldrb	r3, [r3, #5]
 80031fc:	ee07 3a90 	vmov	s15, r3
 8003200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003204:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80034e8 <executecommand+0xdb0>
 8003208:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800320c:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 80034ec <executecommand+0xdb4>
 8003210:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	4bb5      	ldr	r3, [pc, #724]	@ (80034f0 <executecommand+0xdb8>)
 800321a:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 800321e:	4bb5      	ldr	r3, [pc, #724]	@ (80034f4 <executecommand+0xdbc>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b6c      	cmp	r3, #108	@ 0x6c
 800322a:	d14c      	bne.n	80032c6 <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 800322c:	4bad      	ldr	r3, [pc, #692]	@ (80034e4 <executecommand+0xdac>)
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003238:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80034e8 <executecommand+0xdb0>
 800323c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003240:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80034f8 <executecommand+0xdc0>
 8003244:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003248:	4ba6      	ldr	r3, [pc, #664]	@ (80034e4 <executecommand+0xdac>)
 800324a:	789b      	ldrb	r3, [r3, #2]
 800324c:	ee07 3a90 	vmov	s15, r3
 8003250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003254:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 80034e8 <executecommand+0xdb0>
 8003258:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800325c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 80034ec <executecommand+0xdb4>
 8003260:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003268:	4b9e      	ldr	r3, [pc, #632]	@ (80034e4 <executecommand+0xdac>)
 800326a:	78db      	ldrb	r3, [r3, #3]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003274:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 80034e8 <executecommand+0xdb0>
 8003278:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800327c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003280:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003288:	4b96      	ldr	r3, [pc, #600]	@ (80034e4 <executecommand+0xdac>)
 800328a:	791b      	ldrb	r3, [r3, #4]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003294:	eddf 6a94 	vldr	s13, [pc, #592]	@ 80034e8 <executecommand+0xdb0>
 8003298:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800329c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a0:	4b90      	ldr	r3, [pc, #576]	@ (80034e4 <executecommand+0xdac>)
 80032a2:	795b      	ldrb	r3, [r3, #5]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ac:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 80034e8 <executecommand+0xdb0>
 80032b0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80032b4:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80032b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c0:	4b8e      	ldr	r3, [pc, #568]	@ (80034fc <executecommand+0xdc4>)
 80032c2:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b6d      	cmp	r3, #109	@ 0x6d
 80032cc:	d14c      	bne.n	8003368 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80032ce:	4b85      	ldr	r3, [pc, #532]	@ (80034e4 <executecommand+0xdac>)
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80034e8 <executecommand+0xdb0>
 80032de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032e2:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80034ec <executecommand+0xdb4>
 80032e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ea:	4b7e      	ldr	r3, [pc, #504]	@ (80034e4 <executecommand+0xdac>)
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80034e8 <executecommand+0xdb0>
 80032fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032fe:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003302:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330a:	4b76      	ldr	r3, [pc, #472]	@ (80034e4 <executecommand+0xdac>)
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	eddf 6a74 	vldr	s13, [pc, #464]	@ 80034e8 <executecommand+0xdb0>
 800331a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800331e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003322:	4b70      	ldr	r3, [pc, #448]	@ (80034e4 <executecommand+0xdac>)
 8003324:	791b      	ldrb	r3, [r3, #4]
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800332e:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80034e8 <executecommand+0xdb0>
 8003332:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003336:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800333a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800333e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003342:	4b68      	ldr	r3, [pc, #416]	@ (80034e4 <executecommand+0xdac>)
 8003344:	795b      	ldrb	r3, [r3, #5]
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334e:	eddf 6a66 	vldr	s13, [pc, #408]	@ 80034e8 <executecommand+0xdb0>
 8003352:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003356:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 80034ec <executecommand+0xdb4>
 800335a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800335e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003362:	4b67      	ldr	r3, [pc, #412]	@ (8003500 <executecommand+0xdc8>)
 8003364:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b6e      	cmp	r3, #110	@ 0x6e
 800336e:	d14f      	bne.n	8003410 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003370:	4b5c      	ldr	r3, [pc, #368]	@ (80034e4 <executecommand+0xdac>)
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80034e8 <executecommand+0xdb0>
 8003380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003384:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80034ec <executecommand+0xdb4>
 8003388:	ee27 7a87 	vmul.f32	s14, s15, s14
 800338c:	4b55      	ldr	r3, [pc, #340]	@ (80034e4 <executecommand+0xdac>)
 800338e:	789b      	ldrb	r3, [r3, #2]
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003398:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80034e8 <executecommand+0xdb0>
 800339c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033a0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80033a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ac:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <executecommand+0xdac>)
 80033ae:	78db      	ldrb	r3, [r3, #3]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b8:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 80034e8 <executecommand+0xdb0>
 80033bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033c4:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <executecommand+0xdac>)
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d0:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80034e8 <executecommand+0xdb0>
 80033d4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033d8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033dc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033e4:	4b3f      	ldr	r3, [pc, #252]	@ (80034e4 <executecommand+0xdac>)
 80033e6:	795b      	ldrb	r3, [r3, #5]
 80033e8:	ee07 3a90 	vmov	s15, r3
 80033ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80034e8 <executecommand+0xdb0>
 80033f4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033f8:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 80034ec <executecommand+0xdb4>
 80033fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003404:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <executecommand+0xdcc>)
 8003406:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 800340a:	4b3f      	ldr	r3, [pc, #252]	@ (8003508 <executecommand+0xdd0>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b6f      	cmp	r3, #111	@ 0x6f
 8003416:	d14c      	bne.n	80034b2 <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003418:	4b32      	ldr	r3, [pc, #200]	@ (80034e4 <executecommand+0xdac>)
 800341a:	785b      	ldrb	r3, [r3, #1]
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003424:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80034e8 <executecommand+0xdb0>
 8003428:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800342c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80034f8 <executecommand+0xdc0>
 8003430:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003434:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <executecommand+0xdac>)
 8003436:	789b      	ldrb	r3, [r3, #2]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003440:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80034e8 <executecommand+0xdb0>
 8003444:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003448:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80034ec <executecommand+0xdb4>
 800344c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003450:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003454:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <executecommand+0xdac>)
 8003456:	78db      	ldrb	r3, [r3, #3]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003460:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80034e8 <executecommand+0xdb0>
 8003464:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003468:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800346c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003474:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <executecommand+0xdac>)
 8003476:	791b      	ldrb	r3, [r3, #4]
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003480:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80034e8 <executecommand+0xdb0>
 8003484:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800348c:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <executecommand+0xdac>)
 800348e:	795b      	ldrb	r3, [r3, #5]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003498:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80034e8 <executecommand+0xdb0>
 800349c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80034a0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80034a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ac:	4b17      	ldr	r3, [pc, #92]	@ (800350c <executecommand+0xdd4>)
 80034ae:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b72      	cmp	r3, #114	@ 0x72
 80034b8:	d101      	bne.n	80034be <executecommand+0xd86>
		NVIC_SystemReset();
 80034ba:	f7ff f8d9 	bl	8002670 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e007      	b.n	80034d4 <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 80034c4:	4a07      	ldr	r2, [pc, #28]	@ (80034e4 <executecommand+0xdac>)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4413      	add	r3, r2
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3301      	adds	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b0e      	cmp	r3, #14
 80034d8:	ddf4      	ble.n	80034c4 <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	000041a0 	.word	0x000041a0
 80034e8:	42400000 	.word	0x42400000
 80034ec:	42c80000 	.word	0x42c80000
 80034f0:	000040e0 	.word	0x000040e0
 80034f4:	000040a4 	.word	0x000040a4
 80034f8:	447a0000 	.word	0x447a0000
 80034fc:	000040ec 	.word	0x000040ec
 8003500:	00004134 	.word	0x00004134
 8003504:	00004140 	.word	0x00004140
 8003508:	000040b0 	.word	0x000040b0
 800350c:	0000414c 	.word	0x0000414c

08003510 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	@ 0x28
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	2224      	movs	r2, #36	@ 0x24
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f01a fda1 	bl	801e064 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003522:	4b2e      	ldr	r3, [pc, #184]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003524:	4a2e      	ldr	r2, [pc, #184]	@ (80035e0 <MX_ADC2_Init+0xd0>)
 8003526:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8003528:	4b2c      	ldr	r3, [pc, #176]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800352a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800352e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003530:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003532:	2208      	movs	r2, #8
 8003534:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003536:	4b29      	ldr	r3, [pc, #164]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800353c:	4b27      	ldr	r3, [pc, #156]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800353e:	2204      	movs	r2, #4
 8003540:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003542:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003544:	2200      	movs	r2, #0
 8003546:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003548:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800354a:	2200      	movs	r2, #0
 800354c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800354e:	4b23      	ldr	r3, [pc, #140]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003550:	2201      	movs	r2, #1
 8003552:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003554:	4b21      	ldr	r3, [pc, #132]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 800355c:	4b1f      	ldr	r3, [pc, #124]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800355e:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003564:	4b1d      	ldr	r3, [pc, #116]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800356a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800356c:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800356e:	2203      	movs	r2, #3
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003572:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003578:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800357c:	2200      	movs	r2, #0
 800357e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003580:	4b16      	ldr	r3, [pc, #88]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003588:	4b14      	ldr	r3, [pc, #80]	@ (80035dc <MX_ADC2_Init+0xcc>)
 800358a:	2201      	movs	r2, #1
 800358c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800358e:	4813      	ldr	r0, [pc, #76]	@ (80035dc <MX_ADC2_Init+0xcc>)
 8003590:	f006 fae6 	bl	8009b60 <HAL_ADC_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800359a:	f004 fc2d 	bl	8007df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800359e:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <MX_ADC2_Init+0xd4>)
 80035a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035a2:	2306      	movs	r3, #6
 80035a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80035a6:	2307      	movs	r3, #7
 80035a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035aa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80035ae:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035b0:	2304      	movs	r3, #4
 80035b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	4619      	mov	r1, r3
 80035c2:	4806      	ldr	r0, [pc, #24]	@ (80035dc <MX_ADC2_Init+0xcc>)
 80035c4:	f007 f812 	bl	800a5ec <HAL_ADC_ConfigChannel>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 80035ce:	f004 fc13 	bl	8007df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80035d2:	bf00      	nop
 80035d4:	3728      	adds	r7, #40	@ 0x28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	240000ac 	.word	0x240000ac
 80035e0:	40022100 	.word	0x40022100
 80035e4:	19200040 	.word	0x19200040

080035e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a34      	ldr	r2, [pc, #208]	@ (80036d8 <HAL_ADC_MspInit+0xf0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d162      	bne.n	80036d0 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800360a:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800360c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003610:	4a32      	ldr	r2, [pc, #200]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 8003612:	f043 0320 	orr.w	r3, r3, #32
 8003616:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800361a:	4b30      	ldr	r3, [pc, #192]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800361c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	613b      	str	r3, [r7, #16]
 8003626:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003628:	4b2c      	ldr	r3, [pc, #176]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800362a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362e:	4a2b      	ldr	r2, [pc, #172]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 8003630:	f043 0320 	orr.w	r3, r3, #32
 8003634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003638:	4b28      	ldr	r3, [pc, #160]	@ (80036dc <HAL_ADC_MspInit+0xf4>)
 800363a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003646:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800364a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800364c:	2303      	movs	r3, #3
 800364e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4619      	mov	r1, r3
 800365a:	4821      	ldr	r0, [pc, #132]	@ (80036e0 <HAL_ADC_MspInit+0xf8>)
 800365c:	f00a feb2 	bl	800e3c4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 8003660:	4b20      	ldr	r3, [pc, #128]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003662:	4a21      	ldr	r2, [pc, #132]	@ (80036e8 <HAL_ADC_MspInit+0x100>)
 8003664:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003666:	4b1f      	ldr	r3, [pc, #124]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003668:	220a      	movs	r2, #10
 800366a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800366c:	4b1d      	ldr	r3, [pc, #116]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003672:	4b1c      	ldr	r3, [pc, #112]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003678:	4b1a      	ldr	r3, [pc, #104]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800367a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800367e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003680:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003686:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003688:	4b16      	ldr	r3, [pc, #88]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800368a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800368e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003690:	4b14      	ldr	r3, [pc, #80]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 8003692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003696:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003698:	4b12      	ldr	r3, [pc, #72]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 800369a:	2200      	movs	r2, #0
 800369c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369e:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80036a4:	480f      	ldr	r0, [pc, #60]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036a6:	f008 f83b 	bl	800b720 <HAL_DMA_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 80036b0:	f004 fba2 	bl	8007df8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0b      	ldr	r2, [pc, #44]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80036ba:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <HAL_ADC_MspInit+0xfc>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2100      	movs	r1, #0
 80036c4:	2012      	movs	r0, #18
 80036c6:	f007 ff7e 	bl	800b5c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036ca:	2012      	movs	r0, #18
 80036cc:	f007 ff95 	bl	800b5fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80036d0:	bf00      	nop
 80036d2:	3728      	adds	r7, #40	@ 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40022100 	.word	0x40022100
 80036dc:	58024400 	.word	0x58024400
 80036e0:	58021400 	.word	0x58021400
 80036e4:	2400011c 	.word	0x2400011c
 80036e8:	40020410 	.word	0x40020410

080036ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80036f2:	4b19      	ldr	r3, [pc, #100]	@ (8003758 <MX_DMA_Init+0x6c>)
 80036f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036f8:	4a17      	ldr	r2, [pc, #92]	@ (8003758 <MX_DMA_Init+0x6c>)
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003712:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003716:	4a10      	ldr	r2, [pc, #64]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003720:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <MX_DMA_Init+0x6c>)
 8003722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800372e:	2200      	movs	r2, #0
 8003730:	2100      	movs	r1, #0
 8003732:	200b      	movs	r0, #11
 8003734:	f007 ff47 	bl	800b5c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003738:	200b      	movs	r0, #11
 800373a:	f007 ff5e 	bl	800b5fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800373e:	2200      	movs	r2, #0
 8003740:	2100      	movs	r1, #0
 8003742:	2038      	movs	r0, #56	@ 0x38
 8003744:	f007 ff3f 	bl	800b5c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003748:	2038      	movs	r0, #56	@ 0x38
 800374a:	f007 ff56 	bl	800b5fa <HAL_NVIC_EnableIRQ>

}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	58024400 	.word	0x58024400
 800375c:	00000000 	.word	0x00000000

08003760 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 8003760:	b580      	push	{r7, lr}
 8003762:	b08e      	sub	sp, #56	@ 0x38
 8003764:	af00      	add	r7, sp, #0
 8003766:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(wanted_pitch - now_pitch);
 800377c:	4b8c      	ldr	r3, [pc, #560]	@ (80039b0 <Thrust_filter+0x250>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	4b8c      	ldr	r3, [pc, #560]	@ (80039b4 <Thrust_filter+0x254>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003790:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(wanted_rool - now_rool);
 8003794:	4b88      	ldr	r3, [pc, #544]	@ (80039b8 <Thrust_filter+0x258>)
 8003796:	ed93 7a00 	vldr	s14, [r3]
 800379a:	4b88      	ldr	r3, [pc, #544]	@ (80039bc <Thrust_filter+0x25c>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037a8:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 80037ac:	ed97 7b08 	vldr	d7, [r7, #32]
 80037b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037b4:	eeb0 0a67 	vmov.f32	s0, s15
 80037b8:	f003 fe54 	bl	8007464 <WartoscBezwgledna>
 80037bc:	eef0 7a40 	vmov.f32	s15, s0
 80037c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037c4:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 80037c8:	ed97 7b06 	vldr	d7, [r7, #24]
 80037cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037d0:	eeb0 0a67 	vmov.f32	s0, s15
 80037d4:	f003 fe46 	bl	8007464 <WartoscBezwgledna>
 80037d8:	eef0 7a40 	vmov.f32	s15, s0
 80037dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80037e0:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 80037e4:	ed97 6b08 	vldr	d6, [r7, #32]
 80037e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80037ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037f0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80037f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037f8:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 80037fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003800:	f01a fcba 	bl	801e178 <pow>
 8003804:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 8003808:	4b6d      	ldr	r3, [pc, #436]	@ (80039c0 <Thrust_filter+0x260>)
 800380a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800380e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003812:	4293      	cmp	r3, r2
 8003814:	dd03      	ble.n	800381e <Thrust_filter+0xbe>
		wanted_thrust = 10500;
 8003816:	4b6a      	ldr	r3, [pc, #424]	@ (80039c0 <Thrust_filter+0x260>)
 8003818:	f642 1204 	movw	r2, #10500	@ 0x2904
 800381c:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 800381e:	4b68      	ldr	r3, [pc, #416]	@ (80039c0 <Thrust_filter+0x260>)
 8003820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003824:	b29a      	uxth	r2, r3
 8003826:	4b67      	ldr	r3, [pc, #412]	@ (80039c4 <Thrust_filter+0x264>)
 8003828:	885b      	ldrh	r3, [r3, #2]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 8003830:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003834:	2b00      	cmp	r3, #0
 8003836:	da13      	bge.n	8003860 <Thrust_filter+0x100>
		thrust_error = WartoscBezwgledna(thrust_error);
 8003838:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003844:	eeb0 0a67 	vmov.f32	s0, s15
 8003848:	f003 fe0c 	bl	8007464 <WartoscBezwgledna>
 800384c:	eef0 7a40 	vmov.f32	s15, s0
 8003850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003854:	ee17 3a90 	vmov	r3, s15
 8003858:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 8003860:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8097 	beq.w	8003998 <Thrust_filter+0x238>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 800386a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003876:	eeb0 0b47 	vmov.f64	d0, d7
 800387a:	f01a fc29 	bl	801e0d0 <sqrt>
 800387e:	eeb0 7b40 	vmov.f64	d7, d0
 8003882:	eeb0 0b47 	vmov.f64	d0, d7
 8003886:	f01a fc23 	bl	801e0d0 <sqrt>
 800388a:	eeb0 7b40 	vmov.f64	d7, d0
 800388e:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 80039a0 <Thrust_filter+0x240>
 8003892:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003896:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 800389a:	ed97 7b00 	vldr	d7, [r7]
 800389e:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 80039a8 <Thrust_filter+0x248>
 80038a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80038a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80038aa:	ee26 5b07 	vmul.f64	d5, d6, d7
 80038ae:	ed97 6b04 	vldr	d6, [r7, #16]
 80038b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80038b6:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 80038ba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <Thrust_filter+0x16e>
			thrust_add = thrust_add*(-1);
 80038c2:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038c6:	eeb1 7b47 	vneg.f64	d7, d7
 80038ca:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 80038ce:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038d2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80038d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038de:	d513      	bpl.n	8003908 <Thrust_filter+0x1a8>
 80038e0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038e4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80038e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	dd0a      	ble.n	8003908 <Thrust_filter+0x1a8>
			thrust_values = thrust_values + thrust_add;
 80038f2:	4b35      	ldr	r3, [pc, #212]	@ (80039c8 <Thrust_filter+0x268>)
 80038f4:	ed93 6b00 	vldr	d6, [r3]
 80038f8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80038fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003900:	4b31      	ldr	r3, [pc, #196]	@ (80039c8 <Thrust_filter+0x268>)
 8003902:	ed83 7b00 	vstr	d7, [r3]
 8003906:	e010      	b.n	800392a <Thrust_filter+0x1ca>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 8003908:	4b2e      	ldr	r3, [pc, #184]	@ (80039c4 <Thrust_filter+0x264>)
 800390a:	885b      	ldrh	r3, [r3, #2]
 800390c:	ee07 3a90 	vmov	s15, r3
 8003910:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003914:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003918:	ee36 7b07 	vadd.f64	d7, d6, d7
 800391c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003920:	ee17 3a90 	vmov	r3, s15
 8003924:	b29a      	uxth	r2, r3
 8003926:	4b27      	ldr	r3, [pc, #156]	@ (80039c4 <Thrust_filter+0x264>)
 8003928:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 800392a:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <Thrust_filter+0x268>)
 800392c:	ed93 7b00 	vldr	d7, [r3]
 8003930:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8003934:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393c:	da09      	bge.n	8003952 <Thrust_filter+0x1f2>
 800393e:	4b22      	ldr	r3, [pc, #136]	@ (80039c8 <Thrust_filter+0x268>)
 8003940:	ed93 7b00 	vldr	d7, [r3]
 8003944:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800394c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003950:	d818      	bhi.n	8003984 <Thrust_filter+0x224>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 8003952:	4b1c      	ldr	r3, [pc, #112]	@ (80039c4 <Thrust_filter+0x264>)
 8003954:	885b      	ldrh	r3, [r3, #2]
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800395e:	4b1a      	ldr	r3, [pc, #104]	@ (80039c8 <Thrust_filter+0x268>)
 8003960:	ed93 7b00 	vldr	d7, [r3]
 8003964:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003968:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800396c:	ee17 3a90 	vmov	r3, s15
 8003970:	b29a      	uxth	r2, r3
 8003972:	4b14      	ldr	r3, [pc, #80]	@ (80039c4 <Thrust_filter+0x264>)
 8003974:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 8003976:	4914      	ldr	r1, [pc, #80]	@ (80039c8 <Thrust_filter+0x268>)
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 8003984:	4b0f      	ldr	r3, [pc, #60]	@ (80039c4 <Thrust_filter+0x264>)
 8003986:	885b      	ldrh	r3, [r3, #2]
 8003988:	f242 7210 	movw	r2, #10000	@ 0x2710
 800398c:	4293      	cmp	r3, r2
 800398e:	d903      	bls.n	8003998 <Thrust_filter+0x238>
			MYDRON.THRUST = 10000;
 8003990:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <Thrust_filter+0x264>)
 8003992:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003996:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003998:	bf00      	nop
 800399a:	3738      	adds	r7, #56	@ 0x38
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	00000000 	.word	0x00000000
 80039a4:	409f4000 	.word	0x409f4000
 80039a8:	30553261 	.word	0x30553261
 80039ac:	3f33a92a 	.word	0x3f33a92a
 80039b0:	00004068 	.word	0x00004068
 80039b4:	00004078 	.word	0x00004078
 80039b8:	0000406c 	.word	0x0000406c
 80039bc:	0000407c 	.word	0x0000407c
 80039c0:	0000405c 	.word	0x0000405c
 80039c4:	00000178 	.word	0x00000178
 80039c8:	00004060 	.word	0x00004060

080039cc <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	3b01      	subs	r3, #1
 80039de:	2b05      	cmp	r3, #5
 80039e0:	f200 83ac 	bhi.w	800413c <PID_cal+0x770>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <PID_cal+0x20>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a05 	.word	0x08003a05
 80039f0:	08003b2b 	.word	0x08003b2b
 80039f4:	08003c79 	.word	0x08003c79
 80039f8:	08003d9f 	.word	0x08003d9f
 80039fc:	08003ef1 	.word	0x08003ef1
 8003a00:	08004017 	.word	0x08004017
		case 1://pitch

			*PID_var = PID_FAC[0]*(wanted_pitch - now_pitch);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	ed93 7a00 	vldr	s14, [r3]
 8003a0a:	4b91      	ldr	r3, [pc, #580]	@ (8003c50 <PID_cal+0x284>)
 8003a0c:	edd3 6a00 	vldr	s13, [r3]
 8003a10:	4b90      	ldr	r3, [pc, #576]	@ (8003c54 <PID_cal+0x288>)
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	ed93 7a00 	vldr	s14, [r3]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	edd3 6a00 	vldr	s13, [r3]
 8003a32:	4b89      	ldr	r3, [pc, #548]	@ (8003c58 <PID_cal+0x28c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a42:	4b86      	ldr	r3, [pc, #536]	@ (8003c5c <PID_cal+0x290>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_pitch - now_pitch) - old_error_pitch);//policzenie częsci D
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	ed93 7a00 	vldr	s14, [r3]
 8003a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c50 <PID_cal+0x284>)
 8003a60:	edd3 6a00 	vldr	s13, [r3]
 8003a64:	4b7b      	ldr	r3, [pc, #492]	@ (8003c54 <PID_cal+0x288>)
 8003a66:	edd3 7a00 	vldr	s15, [r3]
 8003a6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a6e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c60 <PID_cal+0x294>)
 8003a70:	edd3 7a00 	vldr	s15, [r3]
 8003a74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a80:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3310      	adds	r3, #16
 8003a88:	ed93 7a00 	vldr	s14, [r3]
 8003a8c:	4b75      	ldr	r3, [pc, #468]	@ (8003c64 <PID_cal+0x298>)
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	ee07 3a90 	vmov	s15, r3
 8003a94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a98:	4b70      	ldr	r3, [pc, #448]	@ (8003c5c <PID_cal+0x290>)
 8003a9a:	edd3 7a00 	vldr	s15, [r3]
 8003a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aa2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003aa6:	4b6f      	ldr	r3, [pc, #444]	@ (8003c64 <PID_cal+0x298>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8003c5c <PID_cal+0x290>)
 8003ab4:	edd3 7a00 	vldr	s15, [r3]
 8003ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ac0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3314      	adds	r3, #20
 8003acc:	edd3 6a00 	vldr	s13, [r3]
 8003ad0:	4b64      	ldr	r3, [pc, #400]	@ (8003c64 <PID_cal+0x298>)
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003adc:	4b5f      	ldr	r3, [pc, #380]	@ (8003c5c <PID_cal+0x290>)
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ae6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003aea:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003aee:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003af2:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	3310      	adds	r3, #16
 8003afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b02:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3310      	adds	r3, #16
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	68d2      	ldr	r2, [r2, #12]
 8003b0e:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	ed93 7a00 	vldr	s14, [r3]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	edc3 7a00 	vstr	s15, [r3]
//					*PID_var = 400;
//				}
//				if(*PID_var < -400){
//					*PID_var = -400;
//				}
			break;
 8003b28:	e309      	b.n	800413e <PID_cal+0x772>

		case 2://rool

			*PID_var = PID_FAC[0]*(wanted_rool - now_rool);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	ed93 7a00 	vldr	s14, [r3]
 8003b30:	4b4d      	ldr	r3, [pc, #308]	@ (8003c68 <PID_cal+0x29c>)
 8003b32:	edd3 6a00 	vldr	s13, [r3]
 8003b36:	4b4d      	ldr	r3, [pc, #308]	@ (8003c6c <PID_cal+0x2a0>)
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	ed93 7a00 	vldr	s14, [r3]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	3304      	adds	r3, #4
 8003b54:	edd3 6a00 	vldr	s13, [r3]
 8003b58:	4b45      	ldr	r3, [pc, #276]	@ (8003c70 <PID_cal+0x2a4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b68:	4b3c      	ldr	r3, [pc, #240]	@ (8003c5c <PID_cal+0x290>)
 8003b6a:	edd3 7a00 	vldr	s15, [r3]
 8003b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((wanted_rool - now_rool) - old_error_rool);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	ed93 7a00 	vldr	s14, [r3]
 8003b84:	4b38      	ldr	r3, [pc, #224]	@ (8003c68 <PID_cal+0x29c>)
 8003b86:	edd3 6a00 	vldr	s13, [r3]
 8003b8a:	4b38      	ldr	r3, [pc, #224]	@ (8003c6c <PID_cal+0x2a0>)
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b94:	4b37      	ldr	r3, [pc, #220]	@ (8003c74 <PID_cal+0x2a8>)
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	3310      	adds	r3, #16
 8003bae:	ed93 7a00 	vldr	s14, [r3]
 8003bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003c64 <PID_cal+0x298>)
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003bbe:	4b27      	ldr	r3, [pc, #156]	@ (8003c5c <PID_cal+0x290>)
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bc8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003bcc:	4b25      	ldr	r3, [pc, #148]	@ (8003c64 <PID_cal+0x298>)
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	ee07 3a90 	vmov	s15, r3
 8003bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bd8:	4b20      	ldr	r3, [pc, #128]	@ (8003c5c <PID_cal+0x290>)
 8003bda:	edd3 7a00 	vldr	s15, [r3]
 8003bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3314      	adds	r3, #20
 8003bf2:	edd3 6a00 	vldr	s13, [r3]
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c64 <PID_cal+0x298>)
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003c02:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <PID_cal+0x290>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c0c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003c10:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003c14:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003c18:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	3310      	adds	r3, #16
 8003c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c28:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	3310      	adds	r3, #16
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	68d2      	ldr	r2, [r2, #12]
 8003c34:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	ed93 7a00 	vldr	s14, [r3]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	edd3 7a00 	vldr	s15, [r3]
 8003c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003c4e:	e276      	b.n	800413e <PID_cal+0x772>
 8003c50:	00004068 	.word	0x00004068
 8003c54:	00004078 	.word	0x00004078
 8003c58:	0000409c 	.word	0x0000409c
 8003c5c:	0801eb24 	.word	0x0801eb24
 8003c60:	00004084 	.word	0x00004084
 8003c64:	00004076 	.word	0x00004076
 8003c68:	0000406c 	.word	0x0000406c
 8003c6c:	0000407c 	.word	0x0000407c
 8003c70:	000040a0 	.word	0x000040a0
 8003c74:	00004088 	.word	0x00004088

		case 3:

			*PID_var = PID_FAC[0]*(wanted_yaw - now_yaw);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	ed93 7a00 	vldr	s14, [r3]
 8003c7e:	4b91      	ldr	r3, [pc, #580]	@ (8003ec4 <PID_cal+0x4f8>)
 8003c80:	edd3 6a00 	vldr	s13, [r3]
 8003c84:	4b90      	ldr	r3, [pc, #576]	@ (8003ec8 <PID_cal+0x4fc>)
 8003c86:	edd3 7a00 	vldr	s15, [r3]
 8003c8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	ed93 7a00 	vldr	s14, [r3]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	edd3 6a00 	vldr	s13, [r3]
 8003ca6:	4b89      	ldr	r3, [pc, #548]	@ (8003ecc <PID_cal+0x500>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003cb6:	4b86      	ldr	r3, [pc, #536]	@ (8003ed0 <PID_cal+0x504>)
 8003cb8:	edd3 7a00 	vldr	s15, [r3]
 8003cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_yaw - now_yaw) - old_error_yaw);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	ed93 7a00 	vldr	s14, [r3]
 8003cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ec4 <PID_cal+0x4f8>)
 8003cd4:	edd3 6a00 	vldr	s13, [r3]
 8003cd8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ec8 <PID_cal+0x4fc>)
 8003cda:	edd3 7a00 	vldr	s15, [r3]
 8003cde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ed4 <PID_cal+0x508>)
 8003ce4:	edd3 7a00 	vldr	s15, [r3]
 8003ce8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf4:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3310      	adds	r3, #16
 8003cfc:	ed93 7a00 	vldr	s14, [r3]
 8003d00:	4b75      	ldr	r3, [pc, #468]	@ (8003ed8 <PID_cal+0x50c>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	ee07 3a90 	vmov	s15, r3
 8003d08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d0c:	4b70      	ldr	r3, [pc, #448]	@ (8003ed0 <PID_cal+0x504>)
 8003d0e:	edd3 7a00 	vldr	s15, [r3]
 8003d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed8 <PID_cal+0x50c>)
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d26:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed0 <PID_cal+0x504>)
 8003d28:	edd3 7a00 	vldr	s15, [r3]
 8003d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3314      	adds	r3, #20
 8003d40:	edd3 6a00 	vldr	s13, [r3]
 8003d44:	4b64      	ldr	r3, [pc, #400]	@ (8003ed8 <PID_cal+0x50c>)
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003d50:	4b5f      	ldr	r3, [pc, #380]	@ (8003ed0 <PID_cal+0x504>)
 8003d52:	edd3 7a00 	vldr	s15, [r3]
 8003d56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d5a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003d5e:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003d62:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003d66:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	3310      	adds	r3, #16
 8003d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d76:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	3310      	adds	r3, #16
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	68d2      	ldr	r2, [r2, #12]
 8003d82:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	ed93 7a00 	vldr	s14, [r3]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	edd3 7a00 	vldr	s15, [r3]
 8003d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	edc3 7a00 	vstr	s15, [r3]
//				*PID_var = 400;
//			}
//			if(*PID_var < -400){
//				*PID_var = -400;
//			}
			break;
 8003d9c:	e1cf      	b.n	800413e <PID_cal+0x772>

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pid_pitch - gx);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	ed93 7a00 	vldr	s14, [r3]
 8003da4:	4b4d      	ldr	r3, [pc, #308]	@ (8003edc <PID_cal+0x510>)
 8003da6:	edd3 6a00 	vldr	s13, [r3]
 8003daa:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee0 <PID_cal+0x514>)
 8003dac:	edd3 7a00 	vldr	s15, [r3]
 8003db0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	ed93 7a00 	vldr	s14, [r3]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	edd3 6a00 	vldr	s13, [r3]
 8003dcc:	4b45      	ldr	r3, [pc, #276]	@ (8003ee4 <PID_cal+0x518>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	ee07 3a90 	vmov	s15, r3
 8003dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ed0 <PID_cal+0x504>)
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pid_pitch - gx) - old_error_angular_rate_pitch);//policzenie częsci D
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	3308      	adds	r3, #8
 8003df4:	ed93 7a00 	vldr	s14, [r3]
 8003df8:	4b38      	ldr	r3, [pc, #224]	@ (8003edc <PID_cal+0x510>)
 8003dfa:	edd3 6a00 	vldr	s13, [r3]
 8003dfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ee0 <PID_cal+0x514>)
 8003e00:	edd3 7a00 	vldr	s15, [r3]
 8003e04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e08:	4b37      	ldr	r3, [pc, #220]	@ (8003ee8 <PID_cal+0x51c>)
 8003e0a:	edd3 7a00 	vldr	s15, [r3]
 8003e0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	330c      	adds	r3, #12
 8003e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1a:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	3310      	adds	r3, #16
 8003e22:	ed93 7a00 	vldr	s14, [r3]
 8003e26:	4b31      	ldr	r3, [pc, #196]	@ (8003eec <PID_cal+0x520>)
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e32:	4b27      	ldr	r3, [pc, #156]	@ (8003ed0 <PID_cal+0x504>)
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e40:	4b2a      	ldr	r3, [pc, #168]	@ (8003eec <PID_cal+0x520>)
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e4c:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <PID_cal+0x504>)
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	3314      	adds	r3, #20
 8003e66:	edd3 6a00 	vldr	s13, [r3]
 8003e6a:	4b20      	ldr	r3, [pc, #128]	@ (8003eec <PID_cal+0x520>)
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003e76:	4b16      	ldr	r3, [pc, #88]	@ (8003ed0 <PID_cal+0x504>)
 8003e78:	edd3 7a00 	vldr	s15, [r3]
 8003e7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003e80:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003e84:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003e88:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003e8c:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	3310      	adds	r3, #16
 8003e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e9c:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	3310      	adds	r3, #16
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	68d2      	ldr	r2, [r2, #12]
 8003ea8:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	ed93 7a00 	vldr	s14, [r3]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	edd3 7a00 	vldr	s15, [r3]
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003ec2:	e13c      	b.n	800413e <PID_cal+0x772>
 8003ec4:	00004070 	.word	0x00004070
 8003ec8:	00004080 	.word	0x00004080
 8003ecc:	000040a4 	.word	0x000040a4
 8003ed0:	0801eb24 	.word	0x0801eb24
 8003ed4:	0000408c 	.word	0x0000408c
 8003ed8:	00004076 	.word	0x00004076
 8003edc:	000040b4 	.word	0x000040b4
 8003ee0:	0000000c 	.word	0x0000000c
 8003ee4:	000040a8 	.word	0x000040a8
 8003ee8:	00004090 	.word	0x00004090
 8003eec:	00004074 	.word	0x00004074

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(pid_rool - gy);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	ed93 7a00 	vldr	s14, [r3]
 8003ef6:	4b95      	ldr	r3, [pc, #596]	@ (800414c <PID_cal+0x780>)
 8003ef8:	edd3 6a00 	vldr	s13, [r3]
 8003efc:	4b94      	ldr	r3, [pc, #592]	@ (8004150 <PID_cal+0x784>)
 8003efe:	edd3 7a00 	vldr	s15, [r3]
 8003f02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	ed93 7a00 	vldr	s14, [r3]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	edd3 6a00 	vldr	s13, [r3]
 8003f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8004154 <PID_cal+0x788>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f2e:	4b8a      	ldr	r3, [pc, #552]	@ (8004158 <PID_cal+0x78c>)
 8003f30:	edd3 7a00 	vldr	s15, [r3]
 8003f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((pid_rool - gy) - old_error_angular_rate_rool);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	3308      	adds	r3, #8
 8003f46:	ed93 7a00 	vldr	s14, [r3]
 8003f4a:	4b80      	ldr	r3, [pc, #512]	@ (800414c <PID_cal+0x780>)
 8003f4c:	edd3 6a00 	vldr	s13, [r3]
 8003f50:	4b7f      	ldr	r3, [pc, #508]	@ (8004150 <PID_cal+0x784>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f5a:	4b80      	ldr	r3, [pc, #512]	@ (800415c <PID_cal+0x790>)
 8003f5c:	edd3 7a00 	vldr	s15, [r3]
 8003f60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	330c      	adds	r3, #12
 8003f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6c:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3310      	adds	r3, #16
 8003f74:	ed93 7a00 	vldr	s14, [r3]
 8003f78:	4b79      	ldr	r3, [pc, #484]	@ (8004160 <PID_cal+0x794>)
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f84:	4b74      	ldr	r3, [pc, #464]	@ (8004158 <PID_cal+0x78c>)
 8003f86:	edd3 7a00 	vldr	s15, [r3]
 8003f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f8e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003f92:	4b73      	ldr	r3, [pc, #460]	@ (8004160 <PID_cal+0x794>)
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f9e:	4b6e      	ldr	r3, [pc, #440]	@ (8004158 <PID_cal+0x78c>)
 8003fa0:	edd3 7a00 	vldr	s15, [r3]
 8003fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	3314      	adds	r3, #20
 8003fb8:	edd3 6a00 	vldr	s13, [r3]
 8003fbc:	4b68      	ldr	r3, [pc, #416]	@ (8004160 <PID_cal+0x794>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003fc8:	4b63      	ldr	r3, [pc, #396]	@ (8004158 <PID_cal+0x78c>)
 8003fca:	edd3 7a00 	vldr	s15, [r3]
 8003fce:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003fd2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003fd6:	ee37 6a86 	vadd.f32	s12, s15, s12
 8003fda:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003fde:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8003fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	3310      	adds	r3, #16
 8003fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fee:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	3310      	adds	r3, #16
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	68d2      	ldr	r2, [r2, #12]
 8003ffa:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	ed93 7a00 	vldr	s14, [r3]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	330c      	adds	r3, #12
 8004006:	edd3 7a00 	vldr	s15, [r3]
 800400a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004014:	e093      	b.n	800413e <PID_cal+0x772>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(pid_yaw - gz);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	ed93 7a00 	vldr	s14, [r3]
 800401c:	4b51      	ldr	r3, [pc, #324]	@ (8004164 <PID_cal+0x798>)
 800401e:	edd3 6a00 	vldr	s13, [r3]
 8004022:	4b51      	ldr	r3, [pc, #324]	@ (8004168 <PID_cal+0x79c>)
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800402c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	ed93 7a00 	vldr	s14, [r3]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	3304      	adds	r3, #4
 8004040:	edd3 6a00 	vldr	s13, [r3]
 8004044:	4b49      	ldr	r3, [pc, #292]	@ (800416c <PID_cal+0x7a0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	ee07 3a90 	vmov	s15, r3
 800404c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004050:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004054:	4b40      	ldr	r3, [pc, #256]	@ (8004158 <PID_cal+0x78c>)
 8004056:	edd3 7a00 	vldr	s15, [r3]
 800405a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800405e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pid_yaw - gz) - old_error_angular_rate_yaw);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	3308      	adds	r3, #8
 800406c:	ed93 7a00 	vldr	s14, [r3]
 8004070:	4b3c      	ldr	r3, [pc, #240]	@ (8004164 <PID_cal+0x798>)
 8004072:	edd3 6a00 	vldr	s13, [r3]
 8004076:	4b3c      	ldr	r3, [pc, #240]	@ (8004168 <PID_cal+0x79c>)
 8004078:	edd3 7a00 	vldr	s15, [r3]
 800407c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004080:	4b3b      	ldr	r3, [pc, #236]	@ (8004170 <PID_cal+0x7a4>)
 8004082:	edd3 7a00 	vldr	s15, [r3]
 8004086:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	330c      	adds	r3, #12
 800408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004092:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));//todo
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	3310      	adds	r3, #16
 800409a:	ed93 7a00 	vldr	s14, [r3]
 800409e:	4b30      	ldr	r3, [pc, #192]	@ (8004160 <PID_cal+0x794>)
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80040aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004158 <PID_cal+0x78c>)
 80040ac:	edd3 7a00 	vldr	s15, [r3]
 80040b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040b4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80040b8:	4b29      	ldr	r3, [pc, #164]	@ (8004160 <PID_cal+0x794>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c4:	4b24      	ldr	r3, [pc, #144]	@ (8004158 <PID_cal+0x78c>)
 80040c6:	edd3 7a00 	vldr	s15, [r3]
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80040d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3314      	adds	r3, #20
 80040de:	edd3 6a00 	vldr	s13, [r3]
 80040e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004160 <PID_cal+0x794>)
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80040ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004158 <PID_cal+0x78c>)
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80040f8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80040fc:	ee37 6a86 	vadd.f32	s12, s15, s12
 8004100:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004104:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8004108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3310      	adds	r3, #16
 8004110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004114:	edc3 7a00 	vstr	s15, [r3]
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	3310      	adds	r3, #16
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	68d2      	ldr	r2, [r2, #12]
 8004120:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	ed93 7a00 	vldr	s14, [r3]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	330c      	adds	r3, #12
 800412c:	edd3 7a00 	vldr	s15, [r3]
 8004130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	edc3 7a00 	vstr	s15, [r3]
			break;
 800413a:	e000      	b.n	800413e <PID_cal+0x772>
		default:
			break;
 800413c:	bf00      	nop
	}
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	000040bc 	.word	0x000040bc
 8004150:	00000010 	.word	0x00000010
 8004154:	000040ac 	.word	0x000040ac
 8004158:	0801eb24 	.word	0x0801eb24
 800415c:	00004094 	.word	0x00004094
 8004160:	00004074 	.word	0x00004074
 8004164:	000040b8 	.word	0x000040b8
 8004168:	00000014 	.word	0x00000014
 800416c:	000040b0 	.word	0x000040b0
 8004170:	00004098 	.word	0x00004098
 8004174:	00000000 	.word	0x00000000

08004178 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 800417c:	4b1c      	ldr	r3, [pc, #112]	@ (80041f0 <Get_batteryvalue+0x78>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8004184:	ee07 3a90 	vmov	s15, r3
 8004188:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800418c:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 80041e8 <Get_batteryvalue+0x70>
 8004190:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004194:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004198:	ee17 3a90 	vmov	r3, s15
 800419c:	b29a      	uxth	r2, r3
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041a0:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 80041a2:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	2b63      	cmp	r3, #99	@ 0x63
 80041a8:	d902      	bls.n	80041b0 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 80041aa:	4b12      	ldr	r3, [pc, #72]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041ac:	2264      	movs	r2, #100	@ 0x64
 80041ae:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 80041b0:	4b10      	ldr	r3, [pc, #64]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	2b18      	cmp	r3, #24
 80041b6:	d802      	bhi.n	80041be <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 80041b8:	4b0e      	ldr	r3, [pc, #56]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041ba:	2207      	movs	r2, #7
 80041bc:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 80041be:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	2b0a      	cmp	r3, #10
 80041c4:	d802      	bhi.n	80041cc <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 80041c6:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041c8:	2209      	movs	r2, #9
 80041ca:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 80041cc:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	2b18      	cmp	r3, #24
 80041d2:	d902      	bls.n	80041da <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 80041d4:	4b07      	ldr	r3, [pc, #28]	@ (80041f4 <Get_batteryvalue+0x7c>)
 80041d6:	2208      	movs	r2, #8
 80041d8:	829a      	strh	r2, [r3, #20]
	}
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	f3af 8000 	nop.w
 80041e8:	7ae147ae 	.word	0x7ae147ae
 80041ec:	401dae14 	.word	0x401dae14
 80041f0:	24000eb0 	.word	0x24000eb0
 80041f4:	00000178 	.word	0x00000178

080041f8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80041fc:	2200      	movs	r2, #0
 80041fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004202:	4802      	ldr	r0, [pc, #8]	@ (800420c <SELECT+0x14>)
 8004204:	f00a fa9e 	bl	800e744 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	58020c00 	.word	0x58020c00

08004210 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004214:	2201      	movs	r2, #1
 8004216:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800421a:	4802      	ldr	r0, [pc, #8]	@ (8004224 <DESELECT+0x14>)
 800421c:	f00a fa92 	bl	800e744 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004220:	bf00      	nop
 8004222:	bd80      	pop	{r7, pc}
 8004224:	58020c00 	.word	0x58020c00

08004228 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004232:	bf00      	nop
 8004234:	4b07      	ldr	r3, [pc, #28]	@ (8004254 <SPI_TxByte+0x2c>)
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800423c:	2b20      	cmp	r3, #32
 800423e:	d1f9      	bne.n	8004234 <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8004240:	1df9      	adds	r1, r7, #7
 8004242:	2364      	movs	r3, #100	@ 0x64
 8004244:	2201      	movs	r2, #1
 8004246:	4804      	ldr	r0, [pc, #16]	@ (8004258 <SPI_TxByte+0x30>)
 8004248:	f010 fbd8 	bl	80149fc <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40020010 	.word	0x40020010
 8004258:	240001ec 	.word	0x240001ec

0800425c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004268:	bf00      	nop
 800426a:	4b08      	ldr	r3, [pc, #32]	@ (800428c <SPI_TxBuffer+0x30>)
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004272:	2b20      	cmp	r3, #32
 8004274:	d1f9      	bne.n	800426a <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 8004276:	887b      	ldrh	r3, [r7, #2]
 8004278:	461a      	mov	r2, r3
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4804      	ldr	r0, [pc, #16]	@ (8004290 <SPI_TxBuffer+0x34>)
 800427e:	f011 fb57 	bl	8015930 <HAL_SPI_Transmit_DMA>
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40020010 	.word	0x40020010
 8004290:	240001ec 	.word	0x240001ec

08004294 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800429a:	23ff      	movs	r3, #255	@ 0xff
 800429c:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 800429e:	bf00      	nop
 80042a0:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <SPI_RxByte+0x34>)
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d1f9      	bne.n	80042a0 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80042ac:	1dba      	adds	r2, r7, #6
 80042ae:	1df9      	adds	r1, r7, #7
 80042b0:	2364      	movs	r3, #100	@ 0x64
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	2301      	movs	r3, #1
 80042b6:	4805      	ldr	r0, [pc, #20]	@ (80042cc <SPI_RxByte+0x38>)
 80042b8:	f011 f800 	bl	80152bc <HAL_SPI_TransmitReceive>

	return data;
 80042bc:	79bb      	ldrb	r3, [r7, #6]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40020010 	.word	0x40020010
 80042cc:	240001ec 	.word	0x240001ec

080042d0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80042d8:	f7ff ffdc 	bl	8004294 <SPI_RxByte>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	701a      	strb	r2, [r3, #0]
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80042f2:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <SD_ReadyWait+0x30>)
 80042f4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80042f8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80042fa:	f7ff ffcb 	bl	8004294 <SPI_RxByte>
 80042fe:	4603      	mov	r3, r0
 8004300:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	2bff      	cmp	r3, #255	@ 0xff
 8004306:	d004      	beq.n	8004312 <SD_ReadyWait+0x26>
 8004308:	4b04      	ldr	r3, [pc, #16]	@ (800431c <SD_ReadyWait+0x30>)
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f3      	bne.n	80042fa <SD_ReadyWait+0xe>

	return res;
 8004312:	79fb      	ldrb	r3, [r7, #7]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	2400037c 	.word	0x2400037c

08004320 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8004326:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800432a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800432c:	f7ff ff70 	bl	8004210 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	e005      	b.n	8004342 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8004336:	20ff      	movs	r0, #255	@ 0xff
 8004338:	f7ff ff76 	bl	8004228 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	3301      	adds	r3, #1
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b09      	cmp	r3, #9
 8004346:	ddf6      	ble.n	8004336 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8004348:	f7ff ff56 	bl	80041f8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800434c:	2340      	movs	r3, #64	@ 0x40
 800434e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004360:	2395      	movs	r3, #149	@ 0x95
 8004362:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8004364:	463b      	mov	r3, r7
 8004366:	2106      	movs	r1, #6
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ff77 	bl	800425c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800436e:	e002      	b.n	8004376 <SD_PowerOn+0x56>
	{
		cnt--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b01      	subs	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8004376:	f7ff ff8d 	bl	8004294 <SPI_RxByte>
 800437a:	4603      	mov	r3, r0
 800437c:	2b01      	cmp	r3, #1
 800437e:	d002      	beq.n	8004386 <SD_PowerOn+0x66>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f4      	bne.n	8004370 <SD_PowerOn+0x50>
	}

	DESELECT();
 8004386:	f7ff ff43 	bl	8004210 <DESELECT>
	SPI_TxByte(0XFF);
 800438a:	20ff      	movs	r0, #255	@ 0xff
 800438c:	f7ff ff4c 	bl	8004228 <SPI_TxByte>

	PowerFlag = 1;
 8004390:	4b03      	ldr	r3, [pc, #12]	@ (80043a0 <SD_PowerOn+0x80>)
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	24000195 	.word	0x24000195

080043a4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80043a8:	4b03      	ldr	r3, [pc, #12]	@ (80043b8 <SD_PowerOff+0x14>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
}
 80043ae:	bf00      	nop
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	24000195 	.word	0x24000195

080043bc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
	return PowerFlag;
 80043c0:	4b03      	ldr	r3, [pc, #12]	@ (80043d0 <SD_CheckPower+0x14>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	24000195 	.word	0x24000195

080043d4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 80043de:	4b14      	ldr	r3, [pc, #80]	@ (8004430 <SD_RxDataBlock+0x5c>)
 80043e0:	220a      	movs	r2, #10
 80043e2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80043e4:	f7ff ff56 	bl	8004294 <SPI_RxByte>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2bff      	cmp	r3, #255	@ 0xff
 80043f0:	d104      	bne.n	80043fc <SD_RxDataBlock+0x28>
 80043f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004430 <SD_RxDataBlock+0x5c>)
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f3      	bne.n	80043e4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8004400:	d001      	beq.n	8004406 <SD_RxDataBlock+0x32>
 8004402:	2300      	movs	r3, #0
 8004404:	e00f      	b.n	8004426 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff5f 	bl	80042d0 <SPI_RxBytePtr>
	} while(len--);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	1e5a      	subs	r2, r3, #1
 8004416:	603a      	str	r2, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f4      	bne.n	8004406 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800441c:	f7ff ff3a 	bl	8004294 <SPI_RxByte>
	SPI_RxByte();
 8004420:	f7ff ff38 	bl	8004294 <SPI_RxByte>

	return TRUE;
 8004424:	2301      	movs	r3, #1
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	24000378 	.word	0x24000378

08004434 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004444:	f7ff ff52 	bl	80042ec <SD_ReadyWait>
 8004448:	4603      	mov	r3, r0
 800444a:	2bff      	cmp	r3, #255	@ 0xff
 800444c:	d001      	beq.n	8004452 <SD_TxDataBlock+0x1e>
 800444e:	2300      	movs	r3, #0
 8004450:	e02f      	b.n	80044b2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fee7 	bl	8004228 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	2bfd      	cmp	r3, #253	@ 0xfd
 800445e:	d020      	beq.n	80044a2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004460:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff fef9 	bl	800425c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800446a:	f7ff ff13 	bl	8004294 <SPI_RxByte>
		SPI_RxByte();
 800446e:	f7ff ff11 	bl	8004294 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8004472:	e00b      	b.n	800448c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004474:	f7ff ff0e 	bl	8004294 <SPI_RxByte>
 8004478:	4603      	mov	r3, r0
 800447a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2b05      	cmp	r3, #5
 8004484:	d006      	beq.n	8004494 <SD_TxDataBlock+0x60>
			i++;
 8004486:	7bbb      	ldrb	r3, [r7, #14]
 8004488:	3301      	adds	r3, #1
 800448a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800448c:	7bbb      	ldrb	r3, [r7, #14]
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d9f0      	bls.n	8004474 <SD_TxDataBlock+0x40>
 8004492:	e000      	b.n	8004496 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004494:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004496:	bf00      	nop
 8004498:	f7ff fefc 	bl	8004294 <SPI_RxByte>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0fa      	beq.n	8004498 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	2b05      	cmp	r3, #5
 80044aa:	d101      	bne.n	80044b0 <SD_TxDataBlock+0x7c>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	4603      	mov	r3, r0
 80044c2:	6039      	str	r1, [r7, #0]
 80044c4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80044c6:	f7ff ff11 	bl	80042ec <SD_ReadyWait>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2bff      	cmp	r3, #255	@ 0xff
 80044ce:	d001      	beq.n	80044d4 <SD_SendCmd+0x1a>
 80044d0:	23ff      	movs	r3, #255	@ 0xff
 80044d2:	e042      	b.n	800455a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff fea6 	bl	8004228 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	0e1b      	lsrs	r3, r3, #24
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fea0 	bl	8004228 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fe9a 	bl	8004228 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fe94 	bl	8004228 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fe8f 	bl	8004228 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	2b40      	cmp	r3, #64	@ 0x40
 800450e:	d102      	bne.n	8004516 <SD_SendCmd+0x5c>
 8004510:	2395      	movs	r3, #149	@ 0x95
 8004512:	73fb      	strb	r3, [r7, #15]
 8004514:	e007      	b.n	8004526 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	2b48      	cmp	r3, #72	@ 0x48
 800451a:	d102      	bne.n	8004522 <SD_SendCmd+0x68>
 800451c:	2387      	movs	r3, #135	@ 0x87
 800451e:	73fb      	strb	r3, [r7, #15]
 8004520:	e001      	b.n	8004526 <SD_SendCmd+0x6c>
	else crc = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fe7d 	bl	8004228 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	2b4c      	cmp	r3, #76	@ 0x4c
 8004532:	d101      	bne.n	8004538 <SD_SendCmd+0x7e>
 8004534:	f7ff feae 	bl	8004294 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004538:	230a      	movs	r3, #10
 800453a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800453c:	f7ff feaa 	bl	8004294 <SPI_RxByte>
 8004540:	4603      	mov	r3, r0
 8004542:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004544:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004548:	2b00      	cmp	r3, #0
 800454a:	da05      	bge.n	8004558 <SD_SendCmd+0x9e>
 800454c:	7bbb      	ldrb	r3, [r7, #14]
 800454e:	3b01      	subs	r3, #1
 8004550:	73bb      	strb	r3, [r7, #14]
 8004552:	7bbb      	ldrb	r3, [r7, #14]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f1      	bne.n	800453c <SD_SendCmd+0x82>

	return res;
 8004558:	7b7b      	ldrb	r3, [r7, #13]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <SD_disk_initialize+0x14>
 8004574:	2301      	movs	r3, #1
 8004576:	e0d6      	b.n	8004726 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004578:	4b6d      	ldr	r3, [pc, #436]	@ (8004730 <SD_disk_initialize+0x1cc>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <SD_disk_initialize+0x2a>
 8004586:	4b6a      	ldr	r3, [pc, #424]	@ (8004730 <SD_disk_initialize+0x1cc>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	e0cb      	b.n	8004726 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800458e:	f7ff fec7 	bl	8004320 <SD_PowerOn>

	/* slave select */
	SELECT();
 8004592:	f7ff fe31 	bl	80041f8 <SELECT>

	/* check disk type */
	type = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800459a:	2100      	movs	r1, #0
 800459c:	2040      	movs	r0, #64	@ 0x40
 800459e:	f7ff ff8c 	bl	80044ba <SD_SendCmd>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	f040 80a6 	bne.w	80046f6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80045aa:	4b62      	ldr	r3, [pc, #392]	@ (8004734 <SD_disk_initialize+0x1d0>)
 80045ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045b0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80045b2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80045b6:	2048      	movs	r0, #72	@ 0x48
 80045b8:	f7ff ff7f 	bl	80044ba <SD_SendCmd>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d158      	bne.n	8004674 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	e00c      	b.n	80045e2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80045c8:	7bfc      	ldrb	r4, [r7, #15]
 80045ca:	f7ff fe63 	bl	8004294 <SPI_RxByte>
 80045ce:	4603      	mov	r3, r0
 80045d0:	461a      	mov	r2, r3
 80045d2:	f104 0310 	add.w	r3, r4, #16
 80045d6:	443b      	add	r3, r7
 80045d8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	3301      	adds	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d9ef      	bls.n	80045c8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80045e8:	7abb      	ldrb	r3, [r7, #10]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	f040 8083 	bne.w	80046f6 <SD_disk_initialize+0x192>
 80045f0:	7afb      	ldrb	r3, [r7, #11]
 80045f2:	2baa      	cmp	r3, #170	@ 0xaa
 80045f4:	d17f      	bne.n	80046f6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80045f6:	2100      	movs	r1, #0
 80045f8:	2077      	movs	r0, #119	@ 0x77
 80045fa:	f7ff ff5e 	bl	80044ba <SD_SendCmd>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b01      	cmp	r3, #1
 8004602:	d807      	bhi.n	8004614 <SD_disk_initialize+0xb0>
 8004604:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004608:	2069      	movs	r0, #105	@ 0x69
 800460a:	f7ff ff56 	bl	80044ba <SD_SendCmd>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8004614:	4b47      	ldr	r3, [pc, #284]	@ (8004734 <SD_disk_initialize+0x1d0>)
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1eb      	bne.n	80045f6 <SD_disk_initialize+0x92>
 800461e:	e000      	b.n	8004622 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004620:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004622:	4b44      	ldr	r3, [pc, #272]	@ (8004734 <SD_disk_initialize+0x1d0>)
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d064      	beq.n	80046f6 <SD_disk_initialize+0x192>
 800462c:	2100      	movs	r1, #0
 800462e:	207a      	movs	r0, #122	@ 0x7a
 8004630:	f7ff ff43 	bl	80044ba <SD_SendCmd>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d15d      	bne.n	80046f6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e00c      	b.n	800465a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004640:	7bfc      	ldrb	r4, [r7, #15]
 8004642:	f7ff fe27 	bl	8004294 <SPI_RxByte>
 8004646:	4603      	mov	r3, r0
 8004648:	461a      	mov	r2, r3
 800464a:	f104 0310 	add.w	r3, r4, #16
 800464e:	443b      	add	r3, r7
 8004650:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	3301      	adds	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d9ef      	bls.n	8004640 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004660:	7a3b      	ldrb	r3, [r7, #8]
 8004662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <SD_disk_initialize+0x10a>
 800466a:	230c      	movs	r3, #12
 800466c:	e000      	b.n	8004670 <SD_disk_initialize+0x10c>
 800466e:	2304      	movs	r3, #4
 8004670:	73bb      	strb	r3, [r7, #14]
 8004672:	e040      	b.n	80046f6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004674:	2100      	movs	r1, #0
 8004676:	2077      	movs	r0, #119	@ 0x77
 8004678:	f7ff ff1f 	bl	80044ba <SD_SendCmd>
 800467c:	4603      	mov	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d808      	bhi.n	8004694 <SD_disk_initialize+0x130>
 8004682:	2100      	movs	r1, #0
 8004684:	2069      	movs	r0, #105	@ 0x69
 8004686:	f7ff ff18 	bl	80044ba <SD_SendCmd>
 800468a:	4603      	mov	r3, r0
 800468c:	2b01      	cmp	r3, #1
 800468e:	d801      	bhi.n	8004694 <SD_disk_initialize+0x130>
 8004690:	2302      	movs	r3, #2
 8004692:	e000      	b.n	8004696 <SD_disk_initialize+0x132>
 8004694:	2301      	movs	r3, #1
 8004696:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004698:	7bbb      	ldrb	r3, [r7, #14]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d10e      	bne.n	80046bc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800469e:	2100      	movs	r1, #0
 80046a0:	2077      	movs	r0, #119	@ 0x77
 80046a2:	f7ff ff0a 	bl	80044ba <SD_SendCmd>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d80e      	bhi.n	80046ca <SD_disk_initialize+0x166>
 80046ac:	2100      	movs	r1, #0
 80046ae:	2069      	movs	r0, #105	@ 0x69
 80046b0:	f7ff ff03 	bl	80044ba <SD_SendCmd>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <SD_disk_initialize+0x166>
 80046ba:	e00d      	b.n	80046d8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80046bc:	2100      	movs	r1, #0
 80046be:	2041      	movs	r0, #65	@ 0x41
 80046c0:	f7ff fefb 	bl	80044ba <SD_SendCmd>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80046ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004734 <SD_disk_initialize+0x1d0>)
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e1      	bne.n	8004698 <SD_disk_initialize+0x134>
 80046d4:	e000      	b.n	80046d8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80046d6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80046d8:	4b16      	ldr	r3, [pc, #88]	@ (8004734 <SD_disk_initialize+0x1d0>)
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <SD_disk_initialize+0x18e>
 80046e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80046e6:	2050      	movs	r0, #80	@ 0x50
 80046e8:	f7ff fee7 	bl	80044ba <SD_SendCmd>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <SD_disk_initialize+0x192>
 80046f2:	2300      	movs	r3, #0
 80046f4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80046f6:	4a10      	ldr	r2, [pc, #64]	@ (8004738 <SD_disk_initialize+0x1d4>)
 80046f8:	7bbb      	ldrb	r3, [r7, #14]
 80046fa:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80046fc:	f7ff fd88 	bl	8004210 <DESELECT>
	SPI_RxByte();
 8004700:	f7ff fdc8 	bl	8004294 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800470a:	4b09      	ldr	r3, [pc, #36]	@ (8004730 <SD_disk_initialize+0x1cc>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	b2da      	uxtb	r2, r3
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <SD_disk_initialize+0x1cc>)
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e001      	b.n	8004720 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800471c:	f7ff fe42 	bl	80043a4 <SD_PowerOff>
	}

	return Stat;
 8004720:	4b03      	ldr	r3, [pc, #12]	@ (8004730 <SD_disk_initialize+0x1cc>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bd90      	pop	{r4, r7, pc}
 800472e:	bf00      	nop
 8004730:	24000000 	.word	0x24000000
 8004734:	24000378 	.word	0x24000378
 8004738:	24000194 	.word	0x24000194

0800473c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <SD_disk_status+0x14>
 800474c:	2301      	movs	r3, #1
 800474e:	e002      	b.n	8004756 <SD_disk_status+0x1a>
	return Stat;
 8004750:	4b04      	ldr	r3, [pc, #16]	@ (8004764 <SD_disk_status+0x28>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	24000000 	.word	0x24000000

08004768 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <SD_disk_read+0x1c>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <SD_disk_read+0x20>
 8004784:	2304      	movs	r3, #4
 8004786:	e051      	b.n	800482c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004788:	4b2a      	ldr	r3, [pc, #168]	@ (8004834 <SD_disk_read+0xcc>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <SD_disk_read+0x32>
 8004796:	2303      	movs	r3, #3
 8004798:	e048      	b.n	800482c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800479a:	4b27      	ldr	r3, [pc, #156]	@ (8004838 <SD_disk_read+0xd0>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <SD_disk_read+0x44>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	025b      	lsls	r3, r3, #9
 80047aa:	607b      	str	r3, [r7, #4]

	SELECT();
 80047ac:	f7ff fd24 	bl	80041f8 <SELECT>

	if (count == 1)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d111      	bne.n	80047da <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	2051      	movs	r0, #81	@ 0x51
 80047ba:	f7ff fe7e 	bl	80044ba <SD_SendCmd>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d129      	bne.n	8004818 <SD_disk_read+0xb0>
 80047c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047c8:	68b8      	ldr	r0, [r7, #8]
 80047ca:	f7ff fe03 	bl	80043d4 <SD_RxDataBlock>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d021      	beq.n	8004818 <SD_disk_read+0xb0>
 80047d4:	2300      	movs	r3, #0
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	e01e      	b.n	8004818 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	2052      	movs	r0, #82	@ 0x52
 80047de:	f7ff fe6c 	bl	80044ba <SD_SendCmd>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d117      	bne.n	8004818 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80047e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047ec:	68b8      	ldr	r0, [r7, #8]
 80047ee:	f7ff fdf1 	bl	80043d4 <SD_RxDataBlock>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <SD_disk_read+0xa6>
				buff += 512;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80047fe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	3b01      	subs	r3, #1
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ed      	bne.n	80047e8 <SD_disk_read+0x80>
 800480c:	e000      	b.n	8004810 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800480e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004810:	2100      	movs	r1, #0
 8004812:	204c      	movs	r0, #76	@ 0x4c
 8004814:	f7ff fe51 	bl	80044ba <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004818:	f7ff fcfa 	bl	8004210 <DESELECT>
	SPI_RxByte();
 800481c:	f7ff fd3a 	bl	8004294 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	bf14      	ite	ne
 8004826:	2301      	movne	r3, #1
 8004828:	2300      	moveq	r3, #0
 800482a:	b2db      	uxtb	r3, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	24000000 	.word	0x24000000
 8004838:	24000194 	.word	0x24000194

0800483c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	4603      	mov	r3, r0
 800484a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d102      	bne.n	8004858 <SD_disk_write+0x1c>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <SD_disk_write+0x20>
 8004858:	2304      	movs	r3, #4
 800485a:	e06b      	b.n	8004934 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800485c:	4b37      	ldr	r3, [pc, #220]	@ (800493c <SD_disk_write+0x100>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <SD_disk_write+0x32>
 800486a:	2303      	movs	r3, #3
 800486c:	e062      	b.n	8004934 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800486e:	4b33      	ldr	r3, [pc, #204]	@ (800493c <SD_disk_write+0x100>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <SD_disk_write+0x44>
 800487c:	2302      	movs	r3, #2
 800487e:	e059      	b.n	8004934 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004880:	4b2f      	ldr	r3, [pc, #188]	@ (8004940 <SD_disk_write+0x104>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <SD_disk_write+0x56>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	025b      	lsls	r3, r3, #9
 8004890:	607b      	str	r3, [r7, #4]

	SELECT();
 8004892:	f7ff fcb1 	bl	80041f8 <SELECT>

	if (count == 1)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d110      	bne.n	80048be <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	2058      	movs	r0, #88	@ 0x58
 80048a0:	f7ff fe0b 	bl	80044ba <SD_SendCmd>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d13a      	bne.n	8004920 <SD_disk_write+0xe4>
 80048aa:	21fe      	movs	r1, #254	@ 0xfe
 80048ac:	68b8      	ldr	r0, [r7, #8]
 80048ae:	f7ff fdc1 	bl	8004434 <SD_TxDataBlock>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d033      	beq.n	8004920 <SD_disk_write+0xe4>
			count = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	e030      	b.n	8004920 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80048be:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <SD_disk_write+0x104>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80048ca:	2100      	movs	r1, #0
 80048cc:	2077      	movs	r0, #119	@ 0x77
 80048ce:	f7ff fdf4 	bl	80044ba <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	2057      	movs	r0, #87	@ 0x57
 80048d6:	f7ff fdf0 	bl	80044ba <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	2059      	movs	r0, #89	@ 0x59
 80048de:	f7ff fdec 	bl	80044ba <SD_SendCmd>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11b      	bne.n	8004920 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80048e8:	21fc      	movs	r1, #252	@ 0xfc
 80048ea:	68b8      	ldr	r0, [r7, #8]
 80048ec:	f7ff fda2 	bl	8004434 <SD_TxDataBlock>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <SD_disk_write+0xd0>
				buff += 512;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80048fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3b01      	subs	r3, #1
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ee      	bne.n	80048e8 <SD_disk_write+0xac>
 800490a:	e000      	b.n	800490e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800490c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800490e:	21fd      	movs	r1, #253	@ 0xfd
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff fd8f 	bl	8004434 <SD_TxDataBlock>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <SD_disk_write+0xe4>
			{
				count = 1;
 800491c:	2301      	movs	r3, #1
 800491e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004920:	f7ff fc76 	bl	8004210 <DESELECT>
	SPI_RxByte();
 8004924:	f7ff fcb6 	bl	8004294 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf14      	ite	ne
 800492e:	2301      	movne	r3, #1
 8004930:	2300      	moveq	r3, #0
 8004932:	b2db      	uxtb	r3, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	24000000 	.word	0x24000000
 8004940:	24000194 	.word	0x24000194

08004944 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b08b      	sub	sp, #44	@ 0x2c
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	603a      	str	r2, [r7, #0]
 800494e:	71fb      	strb	r3, [r7, #7]
 8004950:	460b      	mov	r3, r1
 8004952:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004958:	79fb      	ldrb	r3, [r7, #7]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <SD_disk_ioctl+0x1e>
 800495e:	2304      	movs	r3, #4
 8004960:	e113      	b.n	8004b8a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004968:	79bb      	ldrb	r3, [r7, #6]
 800496a:	2b05      	cmp	r3, #5
 800496c:	d124      	bne.n	80049b8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d012      	beq.n	800499c <SD_disk_ioctl+0x58>
 8004976:	2b02      	cmp	r3, #2
 8004978:	dc1a      	bgt.n	80049b0 <SD_disk_ioctl+0x6c>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <SD_disk_ioctl+0x40>
 800497e:	2b01      	cmp	r3, #1
 8004980:	d006      	beq.n	8004990 <SD_disk_ioctl+0x4c>
 8004982:	e015      	b.n	80049b0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004984:	f7ff fd0e 	bl	80043a4 <SD_PowerOff>
			res = RES_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800498e:	e0fa      	b.n	8004b86 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004990:	f7ff fcc6 	bl	8004320 <SD_PowerOn>
			res = RES_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800499a:	e0f4      	b.n	8004b86 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	1c5c      	adds	r4, r3, #1
 80049a0:	f7ff fd0c 	bl	80043bc <SD_CheckPower>
 80049a4:	4603      	mov	r3, r0
 80049a6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80049a8:	2300      	movs	r3, #0
 80049aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80049ae:	e0ea      	b.n	8004b86 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80049b0:	2304      	movs	r3, #4
 80049b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80049b6:	e0e6      	b.n	8004b86 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049b8:	4b76      	ldr	r3, [pc, #472]	@ (8004b94 <SD_disk_ioctl+0x250>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <SD_disk_ioctl+0x86>
 80049c6:	2303      	movs	r3, #3
 80049c8:	e0df      	b.n	8004b8a <SD_disk_ioctl+0x246>

		SELECT();
 80049ca:	f7ff fc15 	bl	80041f8 <SELECT>

		switch (ctrl)
 80049ce:	79bb      	ldrb	r3, [r7, #6]
 80049d0:	2b0d      	cmp	r3, #13
 80049d2:	f200 80c9 	bhi.w	8004b68 <SD_disk_ioctl+0x224>
 80049d6:	a201      	add	r2, pc, #4	@ (adr r2, 80049dc <SD_disk_ioctl+0x98>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004ad3 	.word	0x08004ad3
 80049e0:	08004a15 	.word	0x08004a15
 80049e4:	08004ac3 	.word	0x08004ac3
 80049e8:	08004b69 	.word	0x08004b69
 80049ec:	08004b69 	.word	0x08004b69
 80049f0:	08004b69 	.word	0x08004b69
 80049f4:	08004b69 	.word	0x08004b69
 80049f8:	08004b69 	.word	0x08004b69
 80049fc:	08004b69 	.word	0x08004b69
 8004a00:	08004b69 	.word	0x08004b69
 8004a04:	08004b69 	.word	0x08004b69
 8004a08:	08004ae5 	.word	0x08004ae5
 8004a0c:	08004b09 	.word	0x08004b09
 8004a10:	08004b2d 	.word	0x08004b2d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004a14:	2100      	movs	r1, #0
 8004a16:	2049      	movs	r0, #73	@ 0x49
 8004a18:	f7ff fd4f 	bl	80044ba <SD_SendCmd>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f040 80a6 	bne.w	8004b70 <SD_disk_ioctl+0x22c>
 8004a24:	f107 030c 	add.w	r3, r7, #12
 8004a28:	2110      	movs	r1, #16
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fcd2 	bl	80043d4 <SD_RxDataBlock>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 809c 	beq.w	8004b70 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004a38:	7b3b      	ldrb	r3, [r7, #12]
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d10d      	bne.n	8004a5e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004a42:	7d7b      	ldrb	r3, [r7, #21]
 8004a44:	461a      	mov	r2, r3
 8004a46:	7d3b      	ldrb	r3, [r7, #20]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004a54:	8bfb      	ldrh	r3, [r7, #30]
 8004a56:	029a      	lsls	r2, r3, #10
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	e02d      	b.n	8004aba <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004a5e:	7c7b      	ldrb	r3, [r7, #17]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	7dbb      	ldrb	r3, [r7, #22]
 8004a68:	09db      	lsrs	r3, r3, #7
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	7d7b      	ldrb	r3, [r7, #21]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f003 0306 	and.w	r3, r3, #6
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	3302      	adds	r3, #2
 8004a82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004a86:	7d3b      	ldrb	r3, [r7, #20]
 8004a88:	099b      	lsrs	r3, r3, #6
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	7cfb      	ldrb	r3, [r7, #19]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	7cbb      	ldrb	r3, [r7, #18]
 8004a9a:	029b      	lsls	r3, r3, #10
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004aac:	8bfa      	ldrh	r2, [r7, #30]
 8004aae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004ab2:	3b09      	subs	r3, #9
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8004ac0:	e056      	b.n	8004b70 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ac8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004ad0:	e055      	b.n	8004b7e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004ad2:	f7ff fc0b 	bl	80042ec <SD_ReadyWait>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2bff      	cmp	r3, #255	@ 0xff
 8004ada:	d14b      	bne.n	8004b74 <SD_disk_ioctl+0x230>
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004ae2:	e047      	b.n	8004b74 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	2049      	movs	r0, #73	@ 0x49
 8004ae8:	f7ff fce7 	bl	80044ba <SD_SendCmd>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d142      	bne.n	8004b78 <SD_disk_ioctl+0x234>
 8004af2:	2110      	movs	r1, #16
 8004af4:	6a38      	ldr	r0, [r7, #32]
 8004af6:	f7ff fc6d 	bl	80043d4 <SD_RxDataBlock>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d03b      	beq.n	8004b78 <SD_disk_ioctl+0x234>
 8004b00:	2300      	movs	r3, #0
 8004b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b06:	e037      	b.n	8004b78 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004b08:	2100      	movs	r1, #0
 8004b0a:	204a      	movs	r0, #74	@ 0x4a
 8004b0c:	f7ff fcd5 	bl	80044ba <SD_SendCmd>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d132      	bne.n	8004b7c <SD_disk_ioctl+0x238>
 8004b16:	2110      	movs	r1, #16
 8004b18:	6a38      	ldr	r0, [r7, #32]
 8004b1a:	f7ff fc5b 	bl	80043d4 <SD_RxDataBlock>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02b      	beq.n	8004b7c <SD_disk_ioctl+0x238>
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004b2a:	e027      	b.n	8004b7c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	207a      	movs	r0, #122	@ 0x7a
 8004b30:	f7ff fcc3 	bl	80044ba <SD_SendCmd>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d116      	bne.n	8004b68 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b40:	e00b      	b.n	8004b5a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8004b42:	6a3c      	ldr	r4, [r7, #32]
 8004b44:	1c63      	adds	r3, r4, #1
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	f7ff fba4 	bl	8004294 <SPI_RxByte>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004b50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b54:	3301      	adds	r3, #1
 8004b56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004b5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d9ef      	bls.n	8004b42 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004b68:	2304      	movs	r3, #4
 8004b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004b6e:	e006      	b.n	8004b7e <SD_disk_ioctl+0x23a>
			break;
 8004b70:	bf00      	nop
 8004b72:	e004      	b.n	8004b7e <SD_disk_ioctl+0x23a>
			break;
 8004b74:	bf00      	nop
 8004b76:	e002      	b.n	8004b7e <SD_disk_ioctl+0x23a>
			break;
 8004b78:	bf00      	nop
 8004b7a:	e000      	b.n	8004b7e <SD_disk_ioctl+0x23a>
			break;
 8004b7c:	bf00      	nop
		}

		DESELECT();
 8004b7e:	f7ff fb47 	bl	8004210 <DESELECT>
		SPI_RxByte();
 8004b82:	f7ff fb87 	bl	8004294 <SPI_RxByte>
	}

	return res;
 8004b86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	372c      	adds	r7, #44	@ 0x2c
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd90      	pop	{r4, r7, pc}
 8004b92:	bf00      	nop
 8004b94:	24000000 	.word	0x24000000

08004b98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08e      	sub	sp, #56	@ 0x38
 8004b9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	60da      	str	r2, [r3, #12]
 8004bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bae:	4b8b      	ldr	r3, [pc, #556]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bb4:	4a89      	ldr	r2, [pc, #548]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bb6:	f043 0310 	orr.w	r3, r3, #16
 8004bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bbe:	4b87      	ldr	r3, [pc, #540]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bc4:	f003 0310 	and.w	r3, r3, #16
 8004bc8:	623b      	str	r3, [r7, #32]
 8004bca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004bcc:	4b83      	ldr	r3, [pc, #524]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bd2:	4a82      	ldr	r2, [pc, #520]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bdc:	4b7f      	ldr	r3, [pc, #508]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bea:	4b7c      	ldr	r3, [pc, #496]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf0:	4a7a      	ldr	r2, [pc, #488]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bfa:	4b78      	ldr	r3, [pc, #480]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c08:	4b74      	ldr	r3, [pc, #464]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c0e:	4a73      	ldr	r2, [pc, #460]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c10:	f043 0320 	orr.w	r3, r3, #32
 8004c14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c18:	4b70      	ldr	r3, [pc, #448]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c26:	4b6d      	ldr	r3, [pc, #436]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c2e:	f043 0302 	orr.w	r3, r3, #2
 8004c32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c36:	4b69      	ldr	r3, [pc, #420]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c44:	4b65      	ldr	r3, [pc, #404]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c4a:	4a64      	ldr	r2, [pc, #400]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c4c:	f043 0308 	orr.w	r3, r3, #8
 8004c50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c54:	4b61      	ldr	r3, [pc, #388]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c62:	4b5e      	ldr	r3, [pc, #376]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c68:	4a5c      	ldr	r2, [pc, #368]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c72:	4b5a      	ldr	r3, [pc, #360]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c80:	4b56      	ldr	r3, [pc, #344]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c86:	4a55      	ldr	r2, [pc, #340]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c88:	f043 0304 	orr.w	r3, r3, #4
 8004c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c90:	4b52      	ldr	r3, [pc, #328]	@ (8004ddc <MX_GPIO_Init+0x244>)
 8004c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004ca4:	484e      	ldr	r0, [pc, #312]	@ (8004de0 <MX_GPIO_Init+0x248>)
 8004ca6:	f009 fd4d 	bl	800e744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004caa:	2200      	movs	r2, #0
 8004cac:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004cb0:	484c      	ldr	r0, [pc, #304]	@ (8004de4 <MX_GPIO_Init+0x24c>)
 8004cb2:	f009 fd47 	bl	800e744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004cbc:	484a      	ldr	r0, [pc, #296]	@ (8004de8 <MX_GPIO_Init+0x250>)
 8004cbe:	f009 fd41 	bl	800e744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004cc8:	4848      	ldr	r0, [pc, #288]	@ (8004dec <MX_GPIO_Init+0x254>)
 8004cca:	f009 fd3b 	bl	800e744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004cd4:	4846      	ldr	r0, [pc, #280]	@ (8004df0 <MX_GPIO_Init+0x258>)
 8004cd6:	f009 fd35 	bl	800e744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_6_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004cda:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	483b      	ldr	r0, [pc, #236]	@ (8004de0 <MX_GPIO_Init+0x248>)
 8004cf4:	f009 fb66 	bl	800e3c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Y_Pin LED_R_Pin NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004cf8:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d06:	2300      	movs	r3, #0
 8004d08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4834      	ldr	r0, [pc, #208]	@ (8004de4 <MX_GPIO_Init+0x24c>)
 8004d12:	f009 fb57 	bl	800e3c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detection_Pin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d28:	4619      	mov	r1, r3
 8004d2a:	482e      	ldr	r0, [pc, #184]	@ (8004de4 <MX_GPIO_Init+0x24c>)
 8004d2c:	f009 fb4a 	bl	800e3c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_LED_Pin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004d30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d36:	2301      	movs	r3, #1
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d46:	4619      	mov	r1, r3
 8004d48:	4827      	ldr	r0, [pc, #156]	@ (8004de8 <MX_GPIO_Init+0x250>)
 8004d4a:	f009 fb3b 	bl	800e3c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_SC_Pin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d54:	2301      	movs	r3, #1
 8004d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d64:	4619      	mov	r1, r3
 8004d66:	4820      	ldr	r0, [pc, #128]	@ (8004de8 <MX_GPIO_Init+0x250>)
 8004d68:	f009 fb2c 	bl	800e3c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_Power_Pin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004d6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d72:	2301      	movs	r3, #1
 8004d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d82:	4619      	mov	r1, r3
 8004d84:	4819      	ldr	r0, [pc, #100]	@ (8004dec <MX_GPIO_Init+0x254>)
 8004d86:	f009 fb1d 	bl	800e3c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_7_Pin LED_5_Pin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004d8a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d90:	2301      	movs	r3, #1
 8004d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004da0:	4619      	mov	r1, r3
 8004da2:	4813      	ldr	r0, [pc, #76]	@ (8004df0 <MX_GPIO_Init+0x258>)
 8004da4:	f009 fb0e 	bl	800e3c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004da8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004dae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	480b      	ldr	r0, [pc, #44]	@ (8004dec <MX_GPIO_Init+0x254>)
 8004dc0:	f009 fb00 	bl	800e3c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	2028      	movs	r0, #40	@ 0x28
 8004dca:	f006 fbfc 	bl	800b5c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004dce:	2028      	movs	r0, #40	@ 0x28
 8004dd0:	f006 fc13 	bl	800b5fa <HAL_NVIC_EnableIRQ>

}
 8004dd4:	bf00      	nop
 8004dd6:	3738      	adds	r7, #56	@ 0x38
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	58024400 	.word	0x58024400
 8004de0:	58021000 	.word	0x58021000
 8004de4:	58020400 	.word	0x58020400
 8004de8:	58020c00 	.word	0x58020c00
 8004dec:	58021800 	.word	0x58021800
 8004df0:	58020000 	.word	0x58020000

08004df4 <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004df8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e74 <MX_I2C5_Init+0x80>)
 8004dfc:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004e04:	4b1a      	ldr	r3, [pc, #104]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e0a:	4b19      	ldr	r3, [pc, #100]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e10:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004e16:	4b16      	ldr	r3, [pc, #88]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e1c:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e22:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e28:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004e2e:	4810      	ldr	r0, [pc, #64]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e30:	f009 fcbc 	bl	800e7ac <HAL_I2C_Init>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004e3a:	f002 ffdd 	bl	8007df8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e3e:	2100      	movs	r1, #0
 8004e40:	480b      	ldr	r0, [pc, #44]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e42:	f00c f875 	bl	8010f30 <HAL_I2CEx_ConfigAnalogFilter>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004e4c:	f002 ffd4 	bl	8007df8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004e50:	2100      	movs	r1, #0
 8004e52:	4807      	ldr	r0, [pc, #28]	@ (8004e70 <MX_I2C5_Init+0x7c>)
 8004e54:	f00c f8b7 	bl	8010fc6 <HAL_I2CEx_ConfigDigitalFilter>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004e5e:	f002 ffcb 	bl	8007df8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004e62:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004e66:	f00c f8fb 	bl	8011060 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	24000198 	.word	0x24000198
 8004e74:	40006400 	.word	0x40006400

08004e78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b0b8      	sub	sp, #224	@ 0xe0
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e80:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e90:	f107 0310 	add.w	r3, r7, #16
 8004e94:	22b8      	movs	r2, #184	@ 0xb8
 8004e96:	2100      	movs	r1, #0
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f019 f8e3 	bl	801e064 <memset>
  if(i2cHandle->Instance==I2C5)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f50 <HAL_I2C_MspInit+0xd8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d14f      	bne.n	8004f48 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004ea8:	f04f 0208 	mov.w	r2, #8
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004eb4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004eb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ebc:	f107 0310 	add.w	r3, r7, #16
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f00d f891 	bl	8011fe8 <HAL_RCCEx_PeriphCLKConfig>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004ecc:	f002 ff94 	bl	8007df8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ed0:	4b20      	ldr	r3, [pc, #128]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004ed8:	f043 0304 	orr.w	r3, r3, #4
 8004edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004eee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004ef2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ef6:	2312      	movs	r3, #18
 8004ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f0e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004f12:	4619      	mov	r1, r3
 8004f14:	4810      	ldr	r0, [pc, #64]	@ (8004f58 <HAL_I2C_MspInit+0xe0>)
 8004f16:	f009 fa55 	bl	800e3c4 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f20:	4a0c      	ldr	r2, [pc, #48]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004f22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <HAL_I2C_MspInit+0xdc>)
 8004f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	209d      	movs	r0, #157	@ 0x9d
 8004f3e:	f006 fb42 	bl	800b5c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004f42:	209d      	movs	r0, #157	@ 0x9d
 8004f44:	f006 fb59 	bl	800b5fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004f48:	bf00      	nop
 8004f4a:	37e0      	adds	r7, #224	@ 0xe0
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40006400 	.word	0x40006400
 8004f54:	58024400 	.word	0x58024400
 8004f58:	58020800 	.word	0x58020800

08004f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	@ 0x28
 8004f60:	af02      	add	r7, sp, #8
//		//oczekiwanie az napiecia na zasilaczu narosnie
//	}
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004f62:	f002 ff1d 	bl	8007da0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f66:	f004 fa1f 	bl	80093a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f6a:	f000 ff99 	bl	8005ea0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004f6e:	f001 f809 	bl	8005f84 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f72:	f7ff fe11 	bl	8004b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f76:	f7fe fbb9 	bl	80036ec <MX_DMA_Init>
  MX_I2C5_Init();
 8004f7a:	f7ff ff3b 	bl	8004df4 <MX_I2C5_Init>
  MX_SPI6_Init();
 8004f7e:	f002 ff97 	bl	8007eb0 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004f82:	f7fe fac5 	bl	8003510 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004f86:	f002 ff3d 	bl	8007e04 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004f8a:	f004 f925 	bl	80091d8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004f8e:	f003 fe43 	bl	8008c18 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004f92:	f003 ffb9 	bl	8008f08 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004f96:	f003 ff3b 	bl	8008e10 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004f9a:	f015 feaf 	bl	801acfc <MX_FATFS_Init>
  MX_TIM2_Init();
 8004f9e:	f003 fee3 	bl	8008d68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	  ESC_POWER_1;
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004fa8:	489a      	ldr	r0, [pc, #616]	@ (8005214 <main+0x2b8>)
 8004faa:	f009 fbcb 	bl	800e744 <HAL_GPIO_WritePin>

  	  STARTUP = 1;
 8004fae:	4b9a      	ldr	r3, [pc, #616]	@ (8005218 <main+0x2bc>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	701a      	strb	r2, [r3, #0]

  	DRON_ON_GRUND = 1;
 8004fb4:	4b99      	ldr	r3, [pc, #612]	@ (800521c <main+0x2c0>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8004fba:	4b99      	ldr	r3, [pc, #612]	@ (8005220 <main+0x2c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a99      	ldr	r2, [pc, #612]	@ (8005224 <main+0x2c8>)
 8004fc0:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8004fc2:	4b99      	ldr	r3, [pc, #612]	@ (8005228 <main+0x2cc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a97      	ldr	r2, [pc, #604]	@ (8005224 <main+0x2c8>)
 8004fc8:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8004fca:	4b98      	ldr	r3, [pc, #608]	@ (800522c <main+0x2d0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a95      	ldr	r2, [pc, #596]	@ (8005224 <main+0x2c8>)
 8004fd0:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8004fd2:	4b94      	ldr	r3, [pc, #592]	@ (8005224 <main+0x2c8>)
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8004fda:	4b95      	ldr	r3, [pc, #596]	@ (8005230 <main+0x2d4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a95      	ldr	r2, [pc, #596]	@ (8005234 <main+0x2d8>)
 8004fe0:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8004fe2:	4b95      	ldr	r3, [pc, #596]	@ (8005238 <main+0x2dc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a93      	ldr	r2, [pc, #588]	@ (8005234 <main+0x2d8>)
 8004fe8:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8004fea:	4b94      	ldr	r3, [pc, #592]	@ (800523c <main+0x2e0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a91      	ldr	r2, [pc, #580]	@ (8005234 <main+0x2d8>)
 8004ff0:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8004ff2:	4b90      	ldr	r3, [pc, #576]	@ (8005234 <main+0x2d8>)
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8004ffa:	4b91      	ldr	r3, [pc, #580]	@ (8005240 <main+0x2e4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a91      	ldr	r2, [pc, #580]	@ (8005244 <main+0x2e8>)
 8005000:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8005002:	4b91      	ldr	r3, [pc, #580]	@ (8005248 <main+0x2ec>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a8f      	ldr	r2, [pc, #572]	@ (8005244 <main+0x2e8>)
 8005008:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 800500a:	4b90      	ldr	r3, [pc, #576]	@ (800524c <main+0x2f0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a8d      	ldr	r2, [pc, #564]	@ (8005244 <main+0x2e8>)
 8005010:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 8005012:	4b8c      	ldr	r3, [pc, #560]	@ (8005244 <main+0x2e8>)
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 800501a:	4b8d      	ldr	r3, [pc, #564]	@ (8005250 <main+0x2f4>)
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	4b8c      	ldr	r3, [pc, #560]	@ (8005254 <main+0x2f8>)
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	4b8b      	ldr	r3, [pc, #556]	@ (8005258 <main+0x2fc>)
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	4b8a      	ldr	r3, [pc, #552]	@ (800525c <main+0x300>)
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	4b89      	ldr	r3, [pc, #548]	@ (8005260 <main+0x304>)
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	4b88      	ldr	r3, [pc, #544]	@ (8005264 <main+0x308>)
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 800504a:	4b87      	ldr	r3, [pc, #540]	@ (8005268 <main+0x30c>)
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 8005052:	4b86      	ldr	r3, [pc, #536]	@ (800526c <main+0x310>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	4b85      	ldr	r3, [pc, #532]	@ (8005270 <main+0x314>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 800505e:	4b85      	ldr	r3, [pc, #532]	@ (8005274 <main+0x318>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 8005064:	4b84      	ldr	r3, [pc, #528]	@ (8005278 <main+0x31c>)
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	4b83      	ldr	r3, [pc, #524]	@ (800527c <main+0x320>)
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	4b82      	ldr	r3, [pc, #520]	@ (8005280 <main+0x324>)
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	4b81      	ldr	r3, [pc, #516]	@ (8005284 <main+0x328>)
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 8005084:	4b80      	ldr	r3, [pc, #512]	@ (8005288 <main+0x32c>)
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 800508c:	4b7f      	ldr	r3, [pc, #508]	@ (800528c <main+0x330>)
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8005094:	4b7e      	ldr	r3, [pc, #504]	@ (8005290 <main+0x334>)
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 800509c:	4b7d      	ldr	r3, [pc, #500]	@ (8005294 <main+0x338>)
 800509e:	2200      	movs	r2, #0
 80050a0:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 80050a2:	4b7d      	ldr	r3, [pc, #500]	@ (8005298 <main+0x33c>)
 80050a4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80050a8:	801a      	strh	r2, [r3, #0]


  	FDP_D_Gain_AR = 10000;
 80050aa:	4b7c      	ldr	r3, [pc, #496]	@ (800529c <main+0x340>)
 80050ac:	f242 7210 	movw	r2, #10000	@ 0x2710
 80050b0:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 10000;
 80050b2:	4b7b      	ldr	r3, [pc, #492]	@ (80052a0 <main+0x344>)
 80050b4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80050b8:	801a      	strh	r2, [r3, #0]


  	old_error_pitch = 0;// ruznica
 80050ba:	4b7a      	ldr	r3, [pc, #488]	@ (80052a4 <main+0x348>)
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 80050c2:	4b79      	ldr	r3, [pc, #484]	@ (80052a8 <main+0x34c>)
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 80050ca:	4b78      	ldr	r3, [pc, #480]	@ (80052ac <main+0x350>)
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 80050d2:	4b77      	ldr	r3, [pc, #476]	@ (80052b0 <main+0x354>)
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 80050da:	4b76      	ldr	r3, [pc, #472]	@ (80052b4 <main+0x358>)
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 80050e2:	4b75      	ldr	r3, [pc, #468]	@ (80052b8 <main+0x35c>)
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;
 80050ea:	4b74      	ldr	r3, [pc, #464]	@ (80052bc <main+0x360>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 80050f0:	4b73      	ldr	r3, [pc, #460]	@ (80052c0 <main+0x364>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 80050f6:	4b73      	ldr	r3, [pc, #460]	@ (80052c4 <main+0x368>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 80050fc:	4b72      	ldr	r3, [pc, #456]	@ (80052c8 <main+0x36c>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 8005102:	4b72      	ldr	r3, [pc, #456]	@ (80052cc <main+0x370>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8005108:	4b71      	ldr	r3, [pc, #452]	@ (80052d0 <main+0x374>)
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 800510e:	4b71      	ldr	r3, [pc, #452]	@ (80052d4 <main+0x378>)
 8005110:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005114:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 8005116:	4b70      	ldr	r3, [pc, #448]	@ (80052d8 <main+0x37c>)
 8005118:	f642 1204 	movw	r2, #10500	@ 0x2904
 800511c:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 800511e:	4b6f      	ldr	r3, [pc, #444]	@ (80052dc <main+0x380>)
 8005120:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005124:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 8005126:	4b6e      	ldr	r3, [pc, #440]	@ (80052e0 <main+0x384>)
 8005128:	f642 1204 	movw	r2, #10500	@ 0x2904
 800512c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 800512e:	4b6d      	ldr	r3, [pc, #436]	@ (80052e4 <main+0x388>)
 8005130:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005134:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 8005136:	4b6c      	ldr	r3, [pc, #432]	@ (80052e8 <main+0x38c>)
 8005138:	f642 1204 	movw	r2, #10500	@ 0x2904
 800513c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 800513e:	4b6b      	ldr	r3, [pc, #428]	@ (80052ec <main+0x390>)
 8005140:	f642 1204 	movw	r2, #10500	@ 0x2904
 8005144:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 8005146:	4b6a      	ldr	r3, [pc, #424]	@ (80052f0 <main+0x394>)
 8005148:	f642 1204 	movw	r2, #10500	@ 0x2904
 800514c:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 800514e:	4b69      	ldr	r3, [pc, #420]	@ (80052f4 <main+0x398>)
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8005154:	4b68      	ldr	r3, [pc, #416]	@ (80052f8 <main+0x39c>)
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 800515a:	4b68      	ldr	r3, [pc, #416]	@ (80052fc <main+0x3a0>)
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8005160:	4b67      	ldr	r3, [pc, #412]	@ (8005300 <main+0x3a4>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8005166:	4b67      	ldr	r3, [pc, #412]	@ (8005304 <main+0x3a8>)
 8005168:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800516c:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 800516e:	4b66      	ldr	r3, [pc, #408]	@ (8005308 <main+0x3ac>)
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	4b65      	ldr	r3, [pc, #404]	@ (800530c <main+0x3b0>)
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	4b65      	ldr	r3, [pc, #404]	@ (8005310 <main+0x3b4>)
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8005180:	4b64      	ldr	r3, [pc, #400]	@ (8005314 <main+0x3b8>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	4b64      	ldr	r3, [pc, #400]	@ (8005318 <main+0x3bc>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

  	thrust_values = 0;
 800518c:	4963      	ldr	r1, [pc, #396]	@ (800531c <main+0x3c0>)
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	e9c1 2300 	strd	r2, r3, [r1]

	  	p_angular_rate_pitchfactor = 14;
 800519a:	4b61      	ldr	r3, [pc, #388]	@ (8005320 <main+0x3c4>)
 800519c:	4a61      	ldr	r2, [pc, #388]	@ (8005324 <main+0x3c8>)
 800519e:	601a      	str	r2, [r3, #0]
		p_angular_rate_roolfactor = 12;
 80051a0:	4b61      	ldr	r3, [pc, #388]	@ (8005328 <main+0x3cc>)
 80051a2:	4a62      	ldr	r2, [pc, #392]	@ (800532c <main+0x3d0>)
 80051a4:	601a      	str	r2, [r3, #0]
		p_angular_rate_yawfactor = 5;// -> 10
 80051a6:	4b62      	ldr	r3, [pc, #392]	@ (8005330 <main+0x3d4>)
 80051a8:	4a62      	ldr	r2, [pc, #392]	@ (8005334 <main+0x3d8>)
 80051aa:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		i_angular_rate_pitchfactor = 10;
 80051ac:	4b62      	ldr	r3, [pc, #392]	@ (8005338 <main+0x3dc>)
 80051ae:	4a63      	ldr	r2, [pc, #396]	@ (800533c <main+0x3e0>)
 80051b0:	601a      	str	r2, [r3, #0]
		i_angular_rate_roolfactor = 10;
 80051b2:	4b63      	ldr	r3, [pc, #396]	@ (8005340 <main+0x3e4>)
 80051b4:	4a61      	ldr	r2, [pc, #388]	@ (800533c <main+0x3e0>)
 80051b6:	601a      	str	r2, [r3, #0]
		i_angular_rate_yawfactor = 0;
 80051b8:	4b62      	ldr	r3, [pc, #392]	@ (8005344 <main+0x3e8>)
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		d_angular_rate_pitchfactor = 30;
 80051c0:	4b61      	ldr	r3, [pc, #388]	@ (8005348 <main+0x3ec>)
 80051c2:	4a62      	ldr	r2, [pc, #392]	@ (800534c <main+0x3f0>)
 80051c4:	601a      	str	r2, [r3, #0]
		d_angular_rate_roolfactor = 20;
 80051c6:	4b62      	ldr	r3, [pc, #392]	@ (8005350 <main+0x3f4>)
 80051c8:	4a62      	ldr	r2, [pc, #392]	@ (8005354 <main+0x3f8>)
 80051ca:	601a      	str	r2, [r3, #0]
		d_angular_rate_yawfactor = 5;
 80051cc:	4b62      	ldr	r3, [pc, #392]	@ (8005358 <main+0x3fc>)
 80051ce:	4a59      	ldr	r2, [pc, #356]	@ (8005334 <main+0x3d8>)
 80051d0:	601a      	str	r2, [r3, #0]

		p_pitchfactor = 5.5;
 80051d2:	4b13      	ldr	r3, [pc, #76]	@ (8005220 <main+0x2c4>)
 80051d4:	4a61      	ldr	r2, [pc, #388]	@ (800535c <main+0x400>)
 80051d6:	601a      	str	r2, [r3, #0]
		p_roolfactor = 6;//5
 80051d8:	4b15      	ldr	r3, [pc, #84]	@ (8005230 <main+0x2d4>)
 80051da:	4a61      	ldr	r2, [pc, #388]	@ (8005360 <main+0x404>)
 80051dc:	601a      	str	r2, [r3, #0]
		p_yawfactor = 5;
 80051de:	4b18      	ldr	r3, [pc, #96]	@ (8005240 <main+0x2e4>)
 80051e0:	4a54      	ldr	r2, [pc, #336]	@ (8005334 <main+0x3d8>)
 80051e2:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		i_pitchfactor = 9;//8
 80051e4:	4b10      	ldr	r3, [pc, #64]	@ (8005228 <main+0x2cc>)
 80051e6:	4a5f      	ldr	r2, [pc, #380]	@ (8005364 <main+0x408>)
 80051e8:	601a      	str	r2, [r3, #0]
		i_roolfactor = 8;//10
 80051ea:	4b13      	ldr	r3, [pc, #76]	@ (8005238 <main+0x2dc>)
 80051ec:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80051f0:	601a      	str	r2, [r3, #0]
		i_yawfactor = 0;
 80051f2:	4b15      	ldr	r3, [pc, #84]	@ (8005248 <main+0x2ec>)
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
		///////////////////////////////////////////////////////////////////////////
		d_pitchfactor = 30;//25
 80051fa:	4b0c      	ldr	r3, [pc, #48]	@ (800522c <main+0x2d0>)
 80051fc:	4a53      	ldr	r2, [pc, #332]	@ (800534c <main+0x3f0>)
 80051fe:	601a      	str	r2, [r3, #0]
		d_roolfactor = 20;
 8005200:	4b0e      	ldr	r3, [pc, #56]	@ (800523c <main+0x2e0>)
 8005202:	4a54      	ldr	r2, [pc, #336]	@ (8005354 <main+0x3f8>)
 8005204:	601a      	str	r2, [r3, #0]
		d_yawfactor = 0;
 8005206:	4b11      	ldr	r3, [pc, #68]	@ (800524c <main+0x2f0>)
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	601a      	str	r2, [r3, #0]

  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 800520e:	4b44      	ldr	r3, [pc, #272]	@ (8005320 <main+0x3c4>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	e0a9      	b.n	8005368 <main+0x40c>
 8005214:	58021800 	.word	0x58021800
 8005218:	00000074 	.word	0x00000074
 800521c:	0000419c 	.word	0x0000419c
 8005220:	000040cc 	.word	0x000040cc
 8005224:	000040f0 	.word	0x000040f0
 8005228:	000040d8 	.word	0x000040d8
 800522c:	000040e4 	.word	0x000040e4
 8005230:	000040d0 	.word	0x000040d0
 8005234:	00004104 	.word	0x00004104
 8005238:	000040dc 	.word	0x000040dc
 800523c:	000040e8 	.word	0x000040e8
 8005240:	000040d4 	.word	0x000040d4
 8005244:	00004118 	.word	0x00004118
 8005248:	000040e0 	.word	0x000040e0
 800524c:	000040ec 	.word	0x000040ec
 8005250:	00000018 	.word	0x00000018
 8005254:	0000001c 	.word	0x0000001c
 8005258:	00000020 	.word	0x00000020
 800525c:	00000024 	.word	0x00000024
 8005260:	00000028 	.word	0x00000028
 8005264:	0000002c 	.word	0x0000002c
 8005268:	00000058 	.word	0x00000058
 800526c:	0000006c 	.word	0x0000006c
 8005270:	00000070 	.word	0x00000070
 8005274:	00000078 	.word	0x00000078
 8005278:	000000dc 	.word	0x000000dc
 800527c:	000000e0 	.word	0x000000e0
 8005280:	000000e4 	.word	0x000000e4
 8005284:	000000e8 	.word	0x000000e8
 8005288:	00004050 	.word	0x00004050
 800528c:	00004054 	.word	0x00004054
 8005290:	00004058 	.word	0x00004058
 8005294:	0000405c 	.word	0x0000405c
 8005298:	0000405e 	.word	0x0000405e
 800529c:	00004074 	.word	0x00004074
 80052a0:	00004076 	.word	0x00004076
 80052a4:	00004084 	.word	0x00004084
 80052a8:	00004088 	.word	0x00004088
 80052ac:	0000408c 	.word	0x0000408c
 80052b0:	00004090 	.word	0x00004090
 80052b4:	00004094 	.word	0x00004094
 80052b8:	00004098 	.word	0x00004098
 80052bc:	0000409c 	.word	0x0000409c
 80052c0:	000040a0 	.word	0x000040a0
 80052c4:	000040a4 	.word	0x000040a4
 80052c8:	000040a8 	.word	0x000040a8
 80052cc:	000040ac 	.word	0x000040ac
 80052d0:	000040b0 	.word	0x000040b0
 80052d4:	0000418c 	.word	0x0000418c
 80052d8:	0000418e 	.word	0x0000418e
 80052dc:	00004190 	.word	0x00004190
 80052e0:	00004192 	.word	0x00004192
 80052e4:	00004194 	.word	0x00004194
 80052e8:	00004196 	.word	0x00004196
 80052ec:	00004198 	.word	0x00004198
 80052f0:	0000419a 	.word	0x0000419a
 80052f4:	000041be 	.word	0x000041be
 80052f8:	000041bf 	.word	0x000041bf
 80052fc:	000041c4 	.word	0x000041c4
 8005300:	000041c8 	.word	0x000041c8
 8005304:	000041d0 	.word	0x000041d0
 8005308:	000041d4 	.word	0x000041d4
 800530c:	000041d5 	.word	0x000041d5
 8005310:	000041d6 	.word	0x000041d6
 8005314:	000041d8 	.word	0x000041d8
 8005318:	000041dc 	.word	0x000041dc
 800531c:	00004060 	.word	0x00004060
 8005320:	0000412c 	.word	0x0000412c
 8005324:	41600000 	.word	0x41600000
 8005328:	00004130 	.word	0x00004130
 800532c:	41400000 	.word	0x41400000
 8005330:	00004134 	.word	0x00004134
 8005334:	40a00000 	.word	0x40a00000
 8005338:	00004138 	.word	0x00004138
 800533c:	41200000 	.word	0x41200000
 8005340:	0000413c 	.word	0x0000413c
 8005344:	00004140 	.word	0x00004140
 8005348:	00004144 	.word	0x00004144
 800534c:	41f00000 	.word	0x41f00000
 8005350:	00004148 	.word	0x00004148
 8005354:	41a00000 	.word	0x41a00000
 8005358:	0000414c 	.word	0x0000414c
 800535c:	40b00000 	.word	0x40b00000
 8005360:	40c00000 	.word	0x40c00000
 8005364:	41100000 	.word	0x41100000
 8005368:	4aa8      	ldr	r2, [pc, #672]	@ (800560c <main+0x6b0>)
 800536a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 800536c:	4ba8      	ldr	r3, [pc, #672]	@ (8005610 <main+0x6b4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4aa6      	ldr	r2, [pc, #664]	@ (800560c <main+0x6b0>)
 8005372:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005374:	4ba7      	ldr	r3, [pc, #668]	@ (8005614 <main+0x6b8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4aa4      	ldr	r2, [pc, #656]	@ (800560c <main+0x6b0>)
 800537a:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 800537c:	4ba6      	ldr	r3, [pc, #664]	@ (8005618 <main+0x6bc>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4aa6      	ldr	r2, [pc, #664]	@ (800561c <main+0x6c0>)
 8005382:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005384:	4ba6      	ldr	r3, [pc, #664]	@ (8005620 <main+0x6c4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4aa4      	ldr	r2, [pc, #656]	@ (800561c <main+0x6c0>)
 800538a:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 800538c:	4ba5      	ldr	r3, [pc, #660]	@ (8005624 <main+0x6c8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4aa2      	ldr	r2, [pc, #648]	@ (800561c <main+0x6c0>)
 8005392:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 8005394:	4ba4      	ldr	r3, [pc, #656]	@ (8005628 <main+0x6cc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4aa4      	ldr	r2, [pc, #656]	@ (800562c <main+0x6d0>)
 800539a:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 800539c:	4ba4      	ldr	r3, [pc, #656]	@ (8005630 <main+0x6d4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4aa2      	ldr	r2, [pc, #648]	@ (800562c <main+0x6d0>)
 80053a2:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 80053a4:	4ba3      	ldr	r3, [pc, #652]	@ (8005634 <main+0x6d8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4aa0      	ldr	r2, [pc, #640]	@ (800562c <main+0x6d0>)
 80053aa:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 80053ac:	4ba2      	ldr	r3, [pc, #648]	@ (8005638 <main+0x6dc>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4aa2      	ldr	r2, [pc, #648]	@ (800563c <main+0x6e0>)
 80053b2:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 80053b4:	4ba2      	ldr	r3, [pc, #648]	@ (8005640 <main+0x6e4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4aa0      	ldr	r2, [pc, #640]	@ (800563c <main+0x6e0>)
 80053ba:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 80053bc:	4ba1      	ldr	r3, [pc, #644]	@ (8005644 <main+0x6e8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a9e      	ldr	r2, [pc, #632]	@ (800563c <main+0x6e0>)
 80053c2:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 80053c4:	4ba0      	ldr	r3, [pc, #640]	@ (8005648 <main+0x6ec>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4aa0      	ldr	r2, [pc, #640]	@ (800564c <main+0x6f0>)
 80053ca:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 80053cc:	4ba0      	ldr	r3, [pc, #640]	@ (8005650 <main+0x6f4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a9e      	ldr	r2, [pc, #632]	@ (800564c <main+0x6f0>)
 80053d2:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 80053d4:	4b9f      	ldr	r3, [pc, #636]	@ (8005654 <main+0x6f8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a9c      	ldr	r2, [pc, #624]	@ (800564c <main+0x6f0>)
 80053da:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 80053dc:	4b9e      	ldr	r3, [pc, #632]	@ (8005658 <main+0x6fc>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a9e      	ldr	r2, [pc, #632]	@ (800565c <main+0x700>)
 80053e2:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 80053e4:	4b9e      	ldr	r3, [pc, #632]	@ (8005660 <main+0x704>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a9c      	ldr	r2, [pc, #624]	@ (800565c <main+0x700>)
 80053ea:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 80053ec:	4b9d      	ldr	r3, [pc, #628]	@ (8005664 <main+0x708>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a9a      	ldr	r2, [pc, #616]	@ (800565c <main+0x700>)
 80053f2:	6093      	str	r3, [r2, #8]

  	wanted_pitch_rx = 0;// chcainy stan
 80053f4:	4b9c      	ldr	r3, [pc, #624]	@ (8005668 <main+0x70c>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	801a      	strh	r2, [r3, #0]
  	wanted_rool_rx = 0;
 80053fa:	4b9c      	ldr	r3, [pc, #624]	@ (800566c <main+0x710>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	801a      	strh	r2, [r3, #0]
  	wanted_yaw_rx = 0;
 8005400:	4b9b      	ldr	r3, [pc, #620]	@ (8005670 <main+0x714>)
 8005402:	2200      	movs	r2, #0
 8005404:	801a      	strh	r2, [r3, #0]
  	wanted_gz = 0 ;
 8005406:	4b9b      	ldr	r3, [pc, #620]	@ (8005674 <main+0x718>)
 8005408:	2200      	movs	r2, #0
 800540a:	801a      	strh	r2, [r3, #0]


  	data.ox = 0;
 800540c:	4b9a      	ldr	r3, [pc, #616]	@ (8005678 <main+0x71c>)
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 8005414:	4b98      	ldr	r3, [pc, #608]	@ (8005678 <main+0x71c>)
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 800541c:	4b96      	ldr	r3, [pc, #600]	@ (8005678 <main+0x71c>)
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8005424:	4b94      	ldr	r3, [pc, #592]	@ (8005678 <main+0x71c>)
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 800542c:	4b92      	ldr	r3, [pc, #584]	@ (8005678 <main+0x71c>)
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8005434:	4b90      	ldr	r3, [pc, #576]	@ (8005678 <main+0x71c>)
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 800543c:	4b8f      	ldr	r3, [pc, #572]	@ (800567c <main+0x720>)
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 8005444:	4b8e      	ldr	r3, [pc, #568]	@ (8005680 <main+0x724>)
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 800544c:	4b8d      	ldr	r3, [pc, #564]	@ (8005684 <main+0x728>)
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 8005454:	4b8c      	ldr	r3, [pc, #560]	@ (8005688 <main+0x72c>)
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 800545c:	4b8b      	ldr	r3, [pc, #556]	@ (800568c <main+0x730>)
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 8005464:	4b8a      	ldr	r3, [pc, #552]	@ (8005690 <main+0x734>)
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

  	MYDRON.PITCH_STA = 0;
 800546c:	4b89      	ldr	r3, [pc, #548]	@ (8005694 <main+0x738>)
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  	MYDRON.ROOL_STA = 0;
 8005474:	4b87      	ldr	r3, [pc, #540]	@ (8005694 <main+0x738>)
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  	MYDRON.YAW_STA = 0;
 800547c:	4b85      	ldr	r3, [pc, #532]	@ (8005694 <main+0x738>)
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  	ax = 0,ay = 0,az = 0, gx = 0, gy = 0, gz = 0;
 8005484:	4b84      	ldr	r3, [pc, #528]	@ (8005698 <main+0x73c>)
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	4b83      	ldr	r3, [pc, #524]	@ (800569c <main+0x740>)
 800548e:	f04f 0200 	mov.w	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	4b82      	ldr	r3, [pc, #520]	@ (80056a0 <main+0x744>)
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	4b81      	ldr	r3, [pc, #516]	@ (80056a4 <main+0x748>)
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	4b80      	ldr	r3, [pc, #512]	@ (80056a8 <main+0x74c>)
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	4b7f      	ldr	r3, [pc, #508]	@ (80056ac <main+0x750>)
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
  	ax_ang = 0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 80054b4:	4b7e      	ldr	r3, [pc, #504]	@ (80056b0 <main+0x754>)
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	4b7d      	ldr	r3, [pc, #500]	@ (80056b4 <main+0x758>)
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	4b7c      	ldr	r3, [pc, #496]	@ (80056b8 <main+0x75c>)
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	4b7b      	ldr	r3, [pc, #492]	@ (80056bc <main+0x760>)
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	4b7a      	ldr	r3, [pc, #488]	@ (80056c0 <main+0x764>)
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	4b79      	ldr	r3, [pc, #484]	@ (80056c4 <main+0x768>)
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
  	accelx_cal = 0, accely_cal = 0, accelz_cal = 0, gyrox_cal = 0, gyroy_cal = 0, gyroz_cal = 0;
 80054e4:	4b78      	ldr	r3, [pc, #480]	@ (80056c8 <main+0x76c>)
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	4b77      	ldr	r3, [pc, #476]	@ (80056cc <main+0x770>)
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	4b76      	ldr	r3, [pc, #472]	@ (80056d0 <main+0x774>)
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	4b75      	ldr	r3, [pc, #468]	@ (80056d4 <main+0x778>)
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	4b74      	ldr	r3, [pc, #464]	@ (80056d8 <main+0x77c>)
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	4b73      	ldr	r3, [pc, #460]	@ (80056dc <main+0x780>)
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

  	nRF24_Rx_Mode = 0;
 8005514:	4b72      	ldr	r3, [pc, #456]	@ (80056e0 <main+0x784>)
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]

  	now_pitch = 0;
 800551a:	4b72      	ldr	r3, [pc, #456]	@ (80056e4 <main+0x788>)
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
  	now_rool = 0;
 8005522:	4b71      	ldr	r3, [pc, #452]	@ (80056e8 <main+0x78c>)
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
  	now_yaw = 0;
 800552a:	4b70      	ldr	r3, [pc, #448]	@ (80056ec <main+0x790>)
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
  	wanted_pitch = 0;
 8005532:	4b6f      	ldr	r3, [pc, #444]	@ (80056f0 <main+0x794>)
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	601a      	str	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 800553a:	4a6e      	ldr	r2, [pc, #440]	@ (80056f4 <main+0x798>)
 800553c:	f107 0308 	add.w	r3, r7, #8
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	4611      	mov	r1, r2
 8005544:	8019      	strh	r1, [r3, #0]
 8005546:	3302      	adds	r3, #2
 8005548:	0c12      	lsrs	r2, r2, #16
 800554a:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 800554c:	4a6a      	ldr	r2, [pc, #424]	@ (80056f8 <main+0x79c>)
 800554e:	1d3b      	adds	r3, r7, #4
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	4611      	mov	r1, r2
 8005554:	8019      	strh	r1, [r3, #0]
 8005556:	3302      	adds	r3, #2
 8005558:	0c12      	lsrs	r2, r2, #16
 800555a:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 800555c:	2201      	movs	r2, #1
 800555e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005562:	4866      	ldr	r0, [pc, #408]	@ (80056fc <main+0x7a0>)
 8005564:	f009 f8ee 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_6_1;
 8005568:	2201      	movs	r2, #1
 800556a:	2108      	movs	r1, #8
 800556c:	4864      	ldr	r0, [pc, #400]	@ (8005700 <main+0x7a4>)
 800556e:	f009 f8e9 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_7_1;
 8005572:	2201      	movs	r2, #1
 8005574:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005578:	4860      	ldr	r0, [pc, #384]	@ (80056fc <main+0x7a0>)
 800557a:	f009 f8e3 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 800557e:	2201      	movs	r2, #1
 8005580:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005584:	485f      	ldr	r0, [pc, #380]	@ (8005704 <main+0x7a8>)
 8005586:	f009 f8dd 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_G_1;
 800558a:	2201      	movs	r2, #1
 800558c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005590:	485b      	ldr	r0, [pc, #364]	@ (8005700 <main+0x7a4>)
 8005592:	f009 f8d7 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_Y_1;
 8005596:	2201      	movs	r2, #1
 8005598:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800559c:	485a      	ldr	r0, [pc, #360]	@ (8005708 <main+0x7ac>)
 800559e:	f009 f8d1 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_R_1;
 80055a2:	2201      	movs	r2, #1
 80055a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055a8:	4857      	ldr	r0, [pc, #348]	@ (8005708 <main+0x7ac>)
 80055aa:	f009 f8cb 	bl	800e744 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 80055ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80055b2:	f003 ff8b 	bl	80094cc <HAL_Delay>
  	LED_G_0;
 80055b6:	2200      	movs	r2, #0
 80055b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055bc:	4850      	ldr	r0, [pc, #320]	@ (8005700 <main+0x7a4>)
 80055be:	f009 f8c1 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_Y_0;
 80055c2:	2200      	movs	r2, #0
 80055c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80055c8:	484f      	ldr	r0, [pc, #316]	@ (8005708 <main+0x7ac>)
 80055ca:	f009 f8bb 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_R_0;
 80055ce:	2200      	movs	r2, #0
 80055d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055d4:	484c      	ldr	r0, [pc, #304]	@ (8005708 <main+0x7ac>)
 80055d6:	f009 f8b5 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_5_0;
 80055da:	2200      	movs	r2, #0
 80055dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055e0:	4846      	ldr	r0, [pc, #280]	@ (80056fc <main+0x7a0>)
 80055e2:	f009 f8af 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_6_0;
 80055e6:	2200      	movs	r2, #0
 80055e8:	2108      	movs	r1, #8
 80055ea:	4845      	ldr	r0, [pc, #276]	@ (8005700 <main+0x7a4>)
 80055ec:	f009 f8aa 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_7_0;
 80055f0:	2200      	movs	r2, #0
 80055f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055f6:	4841      	ldr	r0, [pc, #260]	@ (80056fc <main+0x7a0>)
 80055f8:	f009 f8a4 	bl	800e744 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 80055fc:	2200      	movs	r2, #0
 80055fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005602:	4840      	ldr	r0, [pc, #256]	@ (8005704 <main+0x7a8>)
 8005604:	f009 f89e 	bl	800e744 <HAL_GPIO_WritePin>


  	for(int i = 0; i < 4000; i++){
 8005608:	2300      	movs	r3, #0
 800560a:	e07f      	b.n	800570c <main+0x7b0>
 800560c:	00004150 	.word	0x00004150
 8005610:	00004138 	.word	0x00004138
 8005614:	00004144 	.word	0x00004144
 8005618:	00004130 	.word	0x00004130
 800561c:	00004164 	.word	0x00004164
 8005620:	0000413c 	.word	0x0000413c
 8005624:	00004148 	.word	0x00004148
 8005628:	00004134 	.word	0x00004134
 800562c:	00004178 	.word	0x00004178
 8005630:	00004140 	.word	0x00004140
 8005634:	0000414c 	.word	0x0000414c
 8005638:	000040cc 	.word	0x000040cc
 800563c:	000040f0 	.word	0x000040f0
 8005640:	000040d8 	.word	0x000040d8
 8005644:	000040e4 	.word	0x000040e4
 8005648:	000040d0 	.word	0x000040d0
 800564c:	00004104 	.word	0x00004104
 8005650:	000040dc 	.word	0x000040dc
 8005654:	000040e8 	.word	0x000040e8
 8005658:	000040d4 	.word	0x000040d4
 800565c:	00004118 	.word	0x00004118
 8005660:	000040e0 	.word	0x000040e0
 8005664:	000040ec 	.word	0x000040ec
 8005668:	00004048 	.word	0x00004048
 800566c:	0000404a 	.word	0x0000404a
 8005670:	0000404c 	.word	0x0000404c
 8005674:	0000404e 	.word	0x0000404e
 8005678:	0000007c 	.word	0x0000007c
 800567c:	000040b4 	.word	0x000040b4
 8005680:	000040b8 	.word	0x000040b8
 8005684:	000040bc 	.word	0x000040bc
 8005688:	000040c0 	.word	0x000040c0
 800568c:	000040c4 	.word	0x000040c4
 8005690:	000040c8 	.word	0x000040c8
 8005694:	00000178 	.word	0x00000178
 8005698:	00000000 	.word	0x00000000
 800569c:	00000004 	.word	0x00000004
 80056a0:	00000008 	.word	0x00000008
 80056a4:	0000000c 	.word	0x0000000c
 80056a8:	00000010 	.word	0x00000010
 80056ac:	00000014 	.word	0x00000014
 80056b0:	00000018 	.word	0x00000018
 80056b4:	0000001c 	.word	0x0000001c
 80056b8:	00000020 	.word	0x00000020
 80056bc:	00000024 	.word	0x00000024
 80056c0:	00000028 	.word	0x00000028
 80056c4:	0000002c 	.word	0x0000002c
 80056c8:	00000030 	.word	0x00000030
 80056cc:	00000034 	.word	0x00000034
 80056d0:	00000038 	.word	0x00000038
 80056d4:	0000003c 	.word	0x0000003c
 80056d8:	00000040 	.word	0x00000040
 80056dc:	00000044 	.word	0x00000044
 80056e0:	00000174 	.word	0x00000174
 80056e4:	00004078 	.word	0x00004078
 80056e8:	0000407c 	.word	0x0000407c
 80056ec:	00004080 	.word	0x00004080
 80056f0:	00004068 	.word	0x00004068
 80056f4:	0801eacc 	.word	0x0801eacc
 80056f8:	0801ead0 	.word	0x0801ead0
 80056fc:	58020000 	.word	0x58020000
 8005700:	58021000 	.word	0x58021000
 8005704:	58020c00 	.word	0x58020c00
 8005708:	58020400 	.word	0x58020400
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	e009      	b.n	8005724 <main+0x7c8>
  		Old_Data_stack.olddata[i] = 0;
 8005710:	4a9b      	ldr	r2, [pc, #620]	@ (8005980 <main+0xa24>)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3301      	adds	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800572a:	dbf1      	blt.n	8005710 <main+0x7b4>
  	}
  	Old_Data_stack.start_pointer = 0;
 800572c:	4b94      	ldr	r3, [pc, #592]	@ (8005980 <main+0xa24>)
 800572e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8005732:	2200      	movs	r2, #0
 8005734:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 8005738:	4b91      	ldr	r3, [pc, #580]	@ (8005980 <main+0xa24>)
 800573a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800573e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8005742:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 8005746:	4b8f      	ldr	r3, [pc, #572]	@ (8005984 <main+0xa28>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 800574c:	488e      	ldr	r0, [pc, #568]	@ (8005988 <main+0xa2c>)
 800574e:	f010 fde9 	bl	8016324 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);
 8005752:	2201      	movs	r2, #1
 8005754:	498b      	ldr	r1, [pc, #556]	@ (8005984 <main+0xa28>)
 8005756:	488d      	ldr	r0, [pc, #564]	@ (800598c <main+0xa30>)
 8005758:	f004 fc0a 	bl	8009f70 <HAL_ADC_Start_DMA>
  	LED_R_1;
 800575c:	2201      	movs	r2, #1
 800575e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005762:	488b      	ldr	r0, [pc, #556]	@ (8005990 <main+0xa34>)
 8005764:	f008 ffee 	bl	800e744 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 8005768:	bf00      	nop
 800576a:	4b86      	ldr	r3, [pc, #536]	@ (8005984 <main+0xa28>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0fb      	beq.n	800576a <main+0x80e>

  	}
  	LED_R_0;
 8005772:	2200      	movs	r2, #0
 8005774:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005778:	4885      	ldr	r0, [pc, #532]	@ (8005990 <main+0xa34>)
 800577a:	f008 ffe3 	bl	800e744 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 800577e:	f7fe fcfb 	bl	8004178 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 8005782:	2104      	movs	r1, #4
 8005784:	4883      	ldr	r0, [pc, #524]	@ (8005994 <main+0xa38>)
 8005786:	f010 ff29 	bl	80165dc <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800578a:	2108      	movs	r1, #8
 800578c:	4881      	ldr	r0, [pc, #516]	@ (8005994 <main+0xa38>)
 800578e:	f010 ff25 	bl	80165dc <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005792:	210c      	movs	r1, #12
 8005794:	487f      	ldr	r0, [pc, #508]	@ (8005994 <main+0xa38>)
 8005796:	f010 ff21 	bl	80165dc <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 800579a:	4b7f      	ldr	r3, [pc, #508]	@ (8005998 <main+0xa3c>)
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fe9d 	bl	80074e0 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 80057a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005998 <main+0xa3c>)
 80057a8:	8a9b      	ldrh	r3, [r3, #20]
 80057aa:	2b07      	cmp	r3, #7
 80057ac:	d107      	bne.n	80057be <main+0x862>
  	{
  		LED_R_1;
 80057ae:	2201      	movs	r2, #1
 80057b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057b4:	4876      	ldr	r0, [pc, #472]	@ (8005990 <main+0xa34>)
 80057b6:	f008 ffc5 	bl	800e744 <HAL_GPIO_WritePin>
  		while(1){
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <main+0x85e>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80057be:	4b76      	ldr	r3, [pc, #472]	@ (8005998 <main+0xa3c>)
 80057c0:	8a9b      	ldrh	r3, [r3, #20]
 80057c2:	2b09      	cmp	r3, #9
 80057c4:	d107      	bne.n	80057d6 <main+0x87a>
  		LED_R_1;
 80057c6:	2201      	movs	r2, #1
 80057c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057cc:	4870      	ldr	r0, [pc, #448]	@ (8005990 <main+0xa34>)
 80057ce:	f008 ffb9 	bl	800e744 <HAL_GPIO_WritePin>
  		while(1){
 80057d2:	bf00      	nop
 80057d4:	e7fd      	b.n	80057d2 <main+0x876>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 80057d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80057da:	486d      	ldr	r0, [pc, #436]	@ (8005990 <main+0xa34>)
 80057dc:	f008 ff9a 	bl	800e714 <HAL_GPIO_ReadPin>
 80057e0:	4603      	mov	r3, r0
 80057e2:	461a      	mov	r2, r3
 80057e4:	4b6d      	ldr	r3, [pc, #436]	@ (800599c <main+0xa40>)
 80057e6:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 80057e8:	4b6c      	ldr	r3, [pc, #432]	@ (800599c <main+0xa40>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d103      	bne.n	80057f8 <main+0x89c>
		SD_enable_Flag = 0;
 80057f0:	4b6a      	ldr	r3, [pc, #424]	@ (800599c <main+0xa40>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	e002      	b.n	80057fe <main+0x8a2>
	}
	else{
		SD_enable_Flag = 1;
 80057f8:	4b68      	ldr	r3, [pc, #416]	@ (800599c <main+0xa40>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 80057fe:	4b67      	ldr	r3, [pc, #412]	@ (800599c <main+0xa40>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d15f      	bne.n	80058c6 <main+0x96a>
		LED_uSD_1;
 8005806:	2201      	movs	r2, #1
 8005808:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800580c:	4864      	ldr	r0, [pc, #400]	@ (80059a0 <main+0xa44>)
 800580e:	f008 ff99 	bl	800e744 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 8005812:	2201      	movs	r2, #1
 8005814:	4963      	ldr	r1, [pc, #396]	@ (80059a4 <main+0xa48>)
 8005816:	4864      	ldr	r0, [pc, #400]	@ (80059a8 <main+0xa4c>)
 8005818:	f017 fe0c 	bl	801d434 <f_mount>
 800581c:	4603      	mov	r3, r0
 800581e:	461a      	mov	r2, r3
 8005820:	4b62      	ldr	r3, [pc, #392]	@ (80059ac <main+0xa50>)
 8005822:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 8005824:	4862      	ldr	r0, [pc, #392]	@ (80059b0 <main+0xa54>)
 8005826:	f018 fa4f 	bl	801dcc8 <f_unlink>
 800582a:	4603      	mov	r3, r0
 800582c:	461a      	mov	r2, r3
 800582e:	4b5f      	ldr	r3, [pc, #380]	@ (80059ac <main+0xa50>)
 8005830:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 8005832:	2201      	movs	r2, #1
 8005834:	495b      	ldr	r1, [pc, #364]	@ (80059a4 <main+0xa48>)
 8005836:	485c      	ldr	r0, [pc, #368]	@ (80059a8 <main+0xa4c>)
 8005838:	f017 fdfc 	bl	801d434 <f_mount>
 800583c:	4603      	mov	r3, r0
 800583e:	461a      	mov	r2, r3
 8005840:	4b5a      	ldr	r3, [pc, #360]	@ (80059ac <main+0xa50>)
 8005842:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 8005844:	220a      	movs	r2, #10
 8005846:	495b      	ldr	r1, [pc, #364]	@ (80059b4 <main+0xa58>)
 8005848:	485b      	ldr	r0, [pc, #364]	@ (80059b8 <main+0xa5c>)
 800584a:	f017 fe39 	bl	801d4c0 <f_open>
 800584e:	4603      	mov	r3, r0
 8005850:	461a      	mov	r2, r3
 8005852:	4b56      	ldr	r3, [pc, #344]	@ (80059ac <main+0xa50>)
 8005854:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 8005856:	2200      	movs	r2, #0
 8005858:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800585c:	4850      	ldr	r0, [pc, #320]	@ (80059a0 <main+0xa44>)
 800585e:	f008 ff71 	bl	800e744 <HAL_GPIO_WritePin>

		LED_uSD_1;
 8005862:	2201      	movs	r2, #1
 8005864:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005868:	484d      	ldr	r0, [pc, #308]	@ (80059a0 <main+0xa44>)
 800586a:	f008 ff6b 	bl	800e744 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e007      	b.n	8005884 <main+0x928>
			DataToSendBuffer[i] = 49;
 8005874:	4a51      	ldr	r2, [pc, #324]	@ (80059bc <main+0xa60>)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	4413      	add	r3, r2
 800587a:	2231      	movs	r2, #49	@ 0x31
 800587c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	3301      	adds	r3, #1
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	4a4e      	ldr	r2, [pc, #312]	@ (80059c0 <main+0xa64>)
 8005888:	4293      	cmp	r3, r2
 800588a:	ddf3      	ble.n	8005874 <main+0x918>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 800588c:	4b4d      	ldr	r3, [pc, #308]	@ (80059c4 <main+0xa68>)
 800588e:	2281      	movs	r2, #129	@ 0x81
 8005890:	494a      	ldr	r1, [pc, #296]	@ (80059bc <main+0xa60>)
 8005892:	4849      	ldr	r0, [pc, #292]	@ (80059b8 <main+0xa5c>)
 8005894:	f017 ffdc 	bl	801d850 <f_write>
 8005898:	4603      	mov	r3, r0
 800589a:	461a      	mov	r2, r3
 800589c:	4b43      	ldr	r3, [pc, #268]	@ (80059ac <main+0xa50>)
 800589e:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 80058a0:	4845      	ldr	r0, [pc, #276]	@ (80059b8 <main+0xa5c>)
 80058a2:	f018 f9e7 	bl	801dc74 <f_close>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	4b40      	ldr	r3, [pc, #256]	@ (80059ac <main+0xa50>)
 80058ac:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 80058ae:	4b3f      	ldr	r3, [pc, #252]	@ (80059ac <main+0xa50>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <main+0x95e>
			while(1){
 80058b6:	bf00      	nop
 80058b8:	e7fd      	b.n	80058b6 <main+0x95a>

			}
		}
		LED_uSD_0;
 80058ba:	2200      	movs	r2, #0
 80058bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058c0:	4837      	ldr	r0, [pc, #220]	@ (80059a0 <main+0xa44>)
 80058c2:	f008 ff3f 	bl	800e744 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 80058c6:	2201      	movs	r2, #1
 80058c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80058cc:	483e      	ldr	r0, [pc, #248]	@ (80059c8 <main+0xa6c>)
 80058ce:	f008 ff39 	bl	800e744 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 80058d2:	483e      	ldr	r0, [pc, #248]	@ (80059cc <main+0xa70>)
 80058d4:	f7fb fc66 	bl	80011a4 <MPU6050_INIT>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d107      	bne.n	80058ee <main+0x992>
			LED_R_1;
 80058de:	2201      	movs	r2, #1
 80058e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058e4:	482a      	ldr	r0, [pc, #168]	@ (8005990 <main+0xa34>)
 80058e6:	f008 ff2d 	bl	800e744 <HAL_GPIO_WritePin>
			while(1){
 80058ea:	bf00      	nop
 80058ec:	e7fd      	b.n	80058ea <main+0x98e>
			}
		}
		LED_Y_1;
 80058ee:	2201      	movs	r2, #1
 80058f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058f4:	4826      	ldr	r0, [pc, #152]	@ (8005990 <main+0xa34>)
 80058f6:	f008 ff25 	bl	800e744 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 80058fa:	eddf 7a35 	vldr	s15, [pc, #212]	@ 80059d0 <main+0xa74>
 80058fe:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80059d4 <main+0xa78>
 8005902:	4b35      	ldr	r3, [pc, #212]	@ (80059d8 <main+0xa7c>)
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	4b35      	ldr	r3, [pc, #212]	@ (80059dc <main+0xa80>)
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	eef0 0a47 	vmov.f32	s1, s14
 800590e:	eeb0 0a67 	vmov.f32	s0, s15
 8005912:	4b33      	ldr	r3, [pc, #204]	@ (80059e0 <main+0xa84>)
 8005914:	4a33      	ldr	r2, [pc, #204]	@ (80059e4 <main+0xa88>)
 8005916:	4934      	ldr	r1, [pc, #208]	@ (80059e8 <main+0xa8c>)
 8005918:	4834      	ldr	r0, [pc, #208]	@ (80059ec <main+0xa90>)
 800591a:	f7fb fd0d 	bl	8001338 <MPU6050_CALIBRATION>
		LED_Y_0;
 800591e:	2200      	movs	r2, #0
 8005920:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005924:	481a      	ldr	r0, [pc, #104]	@ (8005990 <main+0xa34>)
 8005926:	f008 ff0d 	bl	800e744 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 800592a:	4828      	ldr	r0, [pc, #160]	@ (80059cc <main+0xa70>)
 800592c:	f7fa fed0 	bl	80006d0 <BMP180_init>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d107      	bne.n	8005946 <main+0x9ea>
			LED_R_1;
 8005936:	2201      	movs	r2, #1
 8005938:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800593c:	4814      	ldr	r0, [pc, #80]	@ (8005990 <main+0xa34>)
 800593e:	f008 ff01 	bl	800e744 <HAL_GPIO_WritePin>
			while(1){
 8005942:	bf00      	nop
 8005944:	e7fd      	b.n	8005942 <main+0x9e6>
			}
		}
		LED_Y_1;
 8005946:	2201      	movs	r2, #1
 8005948:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800594c:	4810      	ldr	r0, [pc, #64]	@ (8005990 <main+0xa34>)
 800594e:	f008 fef9 	bl	800e744 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 8005952:	4827      	ldr	r0, [pc, #156]	@ (80059f0 <main+0xa94>)
 8005954:	f7fb fa0e 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 8005958:	2200      	movs	r2, #0
 800595a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800595e:	480c      	ldr	r0, [pc, #48]	@ (8005990 <main+0xa34>)
 8005960:	f008 fef0 	bl	800e744 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 8005964:	4819      	ldr	r0, [pc, #100]	@ (80059cc <main+0xa70>)
 8005966:	f7fb fb37 	bl	8000fd8 <HMC5883L_Init>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d141      	bne.n	80059f4 <main+0xa98>
			LED_R_1;
 8005970:	2201      	movs	r2, #1
 8005972:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005976:	4806      	ldr	r0, [pc, #24]	@ (8005990 <main+0xa34>)
 8005978:	f008 fee4 	bl	800e744 <HAL_GPIO_WritePin>
			while(1){
 800597c:	bf00      	nop
 800597e:	e7fd      	b.n	800597c <main+0xa20>
 8005980:	0000019c 	.word	0x0000019c
 8005984:	24000eb0 	.word	0x24000eb0
 8005988:	24000464 	.word	0x24000464
 800598c:	240000ac 	.word	0x240000ac
 8005990:	58020400 	.word	0x58020400
 8005994:	24000380 	.word	0x24000380
 8005998:	00000178 	.word	0x00000178
 800599c:	000041cc 	.word	0x000041cc
 80059a0:	58020c00 	.word	0x58020c00
 80059a4:	0801eab0 	.word	0x0801eab0
 80059a8:	24000eb4 	.word	0x24000eb4
 80059ac:	24001eec 	.word	0x24001eec
 80059b0:	0801eab4 	.word	0x0801eab4
 80059b4:	0801eac0 	.word	0x0801eac0
 80059b8:	24001ef0 	.word	0x24001ef0
 80059bc:	24002f28 	.word	0x24002f28
 80059c0:	0001f7e7 	.word	0x0001f7e7
 80059c4:	24002f24 	.word	0x24002f24
 80059c8:	58020000 	.word	0x58020000
 80059cc:	24000198 	.word	0x24000198
 80059d0:	42830000 	.word	0x42830000
 80059d4:	46000000 	.word	0x46000000
 80059d8:	00000044 	.word	0x00000044
 80059dc:	00000040 	.word	0x00000040
 80059e0:	0000003c 	.word	0x0000003c
 80059e4:	00000038 	.word	0x00000038
 80059e8:	00000034 	.word	0x00000034
 80059ec:	00000030 	.word	0x00000030
 80059f0:	000000e4 	.word	0x000000e4
			}
		}
		LED_Y_1;
 80059f4:	2201      	movs	r2, #1
 80059f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059fa:	488a      	ldr	r0, [pc, #552]	@ (8005c24 <main+0xcc8>)
 80059fc:	f008 fea2 	bl	800e744 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005a00:	f7fb fb9a 	bl	8001138 <HMC5883L_Calibration>
 8005a04:	4603      	mov	r3, r0
 8005a06:	461a      	mov	r2, r3
 8005a08:	4b87      	ldr	r3, [pc, #540]	@ (8005c28 <main+0xccc>)
 8005a0a:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a12:	4884      	ldr	r0, [pc, #528]	@ (8005c24 <main+0xcc8>)
 8005a14:	f008 fe96 	bl	800e744 <HAL_GPIO_WritePin>

		LED_5_0;
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a1e:	4883      	ldr	r0, [pc, #524]	@ (8005c2c <main+0xcd0>)
 8005a20:	f008 fe90 	bl	800e744 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005a24:	4b82      	ldr	r3, [pc, #520]	@ (8005c30 <main+0xcd4>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 8005a2a:	4b81      	ldr	r3, [pc, #516]	@ (8005c30 <main+0xcd4>)
 8005a2c:	220c      	movs	r2, #12
 8005a2e:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 8005a30:	4b7f      	ldr	r3, [pc, #508]	@ (8005c30 <main+0xcd4>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	805a      	strh	r2, [r3, #2]
		MYDRON.PITCH = 0;
 8005a36:	4b7e      	ldr	r3, [pc, #504]	@ (8005c30 <main+0xcd4>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	809a      	strh	r2, [r3, #4]
		MYDRON.ROOL = 0;
 8005a3c:	4b7c      	ldr	r3, [pc, #496]	@ (8005c30 <main+0xcd4>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	80da      	strh	r2, [r3, #6]
		MYDRON.YAW = 0;
 8005a42:	4b7b      	ldr	r3, [pc, #492]	@ (8005c30 <main+0xcd4>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	811a      	strh	r2, [r3, #8]



	/////////////////////////////// nRF24
		LED_6_1;
 8005a48:	2201      	movs	r2, #1
 8005a4a:	2108      	movs	r1, #8
 8005a4c:	4879      	ldr	r0, [pc, #484]	@ (8005c34 <main+0xcd8>)
 8005a4e:	f008 fe79 	bl	800e744 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 8005a52:	4879      	ldr	r0, [pc, #484]	@ (8005c38 <main+0xcdc>)
 8005a54:	f7fc fdb0 	bl	80025b8 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 8005a58:	f107 0308 	add.w	r3, r7, #8
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f7fc fc4f 	bl	8002302 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fc fc84 	bl	8002374 <nRF24_SetTXAddress>
		nRF24_Inittest();
 8005a6c:	f7fc fdf8 	bl	8002660 <nRF24_Inittest>
		nRF24_TX_Mode();
 8005a70:	f7fc fa72 	bl	8001f58 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	e007      	b.n	8005a8a <main+0xb2e>
			Txcode[i] = 0;
 8005a7a:	4a70      	ldr	r2, [pc, #448]	@ (8005c3c <main+0xce0>)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	4413      	add	r3, r2
 8005a80:	2200      	movs	r2, #0
 8005a82:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	3301      	adds	r3, #1
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b1f      	cmp	r3, #31
 8005a8e:	ddf4      	ble.n	8005a7a <main+0xb1e>
		}
		Txcode[22] = 'd';
 8005a90:	4b6a      	ldr	r3, [pc, #424]	@ (8005c3c <main+0xce0>)
 8005a92:	2264      	movs	r2, #100	@ 0x64
 8005a94:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 8005a96:	4b69      	ldr	r3, [pc, #420]	@ (8005c3c <main+0xce0>)
 8005a98:	2272      	movs	r2, #114	@ 0x72
 8005a9a:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 8005a9c:	4b67      	ldr	r3, [pc, #412]	@ (8005c3c <main+0xce0>)
 8005a9e:	226f      	movs	r2, #111	@ 0x6f
 8005aa0:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 8005aa2:	4b66      	ldr	r3, [pc, #408]	@ (8005c3c <main+0xce0>)
 8005aa4:	226e      	movs	r2, #110	@ 0x6e
 8005aa6:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 8005aa8:	4b64      	ldr	r3, [pc, #400]	@ (8005c3c <main+0xce0>)
 8005aaa:	2232      	movs	r2, #50	@ 0x32
 8005aac:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 8005aae:	4b63      	ldr	r3, [pc, #396]	@ (8005c3c <main+0xce0>)
 8005ab0:	2263      	movs	r2, #99	@ 0x63
 8005ab2:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 8005ab4:	4b61      	ldr	r3, [pc, #388]	@ (8005c3c <main+0xce0>)
 8005ab6:	2231      	movs	r2, #49	@ 0x31
 8005ab8:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 8005aba:	4b60      	ldr	r3, [pc, #384]	@ (8005c3c <main+0xce0>)
 8005abc:	227a      	movs	r2, #122	@ 0x7a
 8005abe:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 8005ac0:	4b5e      	ldr	r3, [pc, #376]	@ (8005c3c <main+0xce0>)
 8005ac2:	2261      	movs	r2, #97	@ 0x61
 8005ac4:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8005c3c <main+0xce0>)
 8005ac8:	2237      	movs	r2, #55	@ 0x37
 8005aca:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 8005acc:	485b      	ldr	r0, [pc, #364]	@ (8005c3c <main+0xce0>)
 8005ace:	f7fc fd01 	bl	80024d4 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005ad2:	f7fc fd0d 	bl	80024f0 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005ad6:	f7fc fa13 	bl	8001f00 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005ade:	e01d      	b.n	8005b1c <main+0xbc0>
			LED_G_1;
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ae6:	4853      	ldr	r0, [pc, #332]	@ (8005c34 <main+0xcd8>)
 8005ae8:	f008 fe2c 	bl	800e744 <HAL_GPIO_WritePin>
			LED_Y_1;
 8005aec:	2201      	movs	r2, #1
 8005aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005af2:	484c      	ldr	r0, [pc, #304]	@ (8005c24 <main+0xcc8>)
 8005af4:	f008 fe26 	bl	800e744 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005af8:	2001      	movs	r0, #1
 8005afa:	f003 fce7 	bl	80094cc <HAL_Delay>
			LED_G_0;
 8005afe:	2200      	movs	r2, #0
 8005b00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b04:	484b      	ldr	r0, [pc, #300]	@ (8005c34 <main+0xcd8>)
 8005b06:	f008 fe1d 	bl	800e744 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b10:	4844      	ldr	r0, [pc, #272]	@ (8005c24 <main+0xcc8>)
 8005b12:	f008 fe17 	bl	800e744 <HAL_GPIO_WritePin>

			cunter++;
 8005b16:	7cfb      	ldrb	r3, [r7, #19]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	74fb      	strb	r3, [r7, #19]
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f7fc fd2b 	bl	8002578 <nRF24_IsBitSetInFifoStatus>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d0db      	beq.n	8005ae0 <main+0xb84>
			if(cunter == 1000){
				NVIC_SystemReset();
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 8005b28:	4845      	ldr	r0, [pc, #276]	@ (8005c40 <main+0xce4>)
 8005b2a:	f7fc fd09 	bl	8002540 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2108      	movs	r1, #8
 8005b32:	4840      	ldr	r0, [pc, #256]	@ (8005c34 <main+0xcd8>)
 8005b34:	f008 fe06 	bl	800e744 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 8005b38:	230c      	movs	r3, #12
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	e00b      	b.n	8005b56 <main+0xbfa>
			Rxcode[i] = RxData[i];
 8005b3e:	4a40      	ldr	r2, [pc, #256]	@ (8005c40 <main+0xce4>)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	7819      	ldrb	r1, [r3, #0]
 8005b46:	4a3f      	ldr	r2, [pc, #252]	@ (8005c44 <main+0xce8>)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b15      	cmp	r3, #21
 8005b5a:	ddf0      	ble.n	8005b3e <main+0xbe2>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 8005b5c:	483a      	ldr	r0, [pc, #232]	@ (8005c48 <main+0xcec>)
 8005b5e:	f7fb f9f1 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005b62:	2201      	movs	r2, #1
 8005b64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b68:	4830      	ldr	r0, [pc, #192]	@ (8005c2c <main+0xcd0>)
 8005b6a:	f008 fdeb 	bl	800e744 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4936      	ldr	r1, [pc, #216]	@ (8005c4c <main+0xcf0>)
 8005b72:	4837      	ldr	r0, [pc, #220]	@ (8005c50 <main+0xcf4>)
 8005b74:	f012 fab0 	bl	80180d8 <HAL_UART_Receive_IT>
		LED_7_0;
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005b7e:	482b      	ldr	r0, [pc, #172]	@ (8005c2c <main+0xcd0>)
 8005b80:	f008 fde0 	bl	800e744 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005b84:	4833      	ldr	r0, [pc, #204]	@ (8005c54 <main+0xcf8>)
 8005b86:	f010 fc4b 	bl	8016420 <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005b8a:	4b29      	ldr	r3, [pc, #164]	@ (8005c30 <main+0xcd4>)
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 fca5 	bl	80074e0 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005b96:	4b26      	ldr	r3, [pc, #152]	@ (8005c30 <main+0xcd4>)
 8005b98:	8a9b      	ldrh	r3, [r3, #20]
 8005b9a:	2b07      	cmp	r3, #7
 8005b9c:	d107      	bne.n	8005bae <main+0xc52>
	  	{
	  		LED_R_1;
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ba4:	481f      	ldr	r0, [pc, #124]	@ (8005c24 <main+0xcc8>)
 8005ba6:	f008 fdcd 	bl	800e744 <HAL_GPIO_WritePin>
	  		while(1){
 8005baa:	bf00      	nop
 8005bac:	e7fd      	b.n	8005baa <main+0xc4e>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005bae:	4b20      	ldr	r3, [pc, #128]	@ (8005c30 <main+0xcd4>)
 8005bb0:	8a9b      	ldrh	r3, [r3, #20]
 8005bb2:	2b09      	cmp	r3, #9
 8005bb4:	d107      	bne.n	8005bc6 <main+0xc6a>
	  		LED_R_1;
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bbc:	4819      	ldr	r0, [pc, #100]	@ (8005c24 <main+0xcc8>)
 8005bbe:	f008 fdc1 	bl	800e744 <HAL_GPIO_WritePin>
	  		while(1){
 8005bc2:	bf00      	nop
 8005bc4:	e7fd      	b.n	8005bc2 <main+0xc66>
	  		}
	  	}



		STARTUP = 0;
 8005bc6:	4b24      	ldr	r3, [pc, #144]	@ (8005c58 <main+0xcfc>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005bcc:	4b18      	ldr	r3, [pc, #96]	@ (8005c30 <main+0xcd4>)
 8005bce:	8a9b      	ldrh	r3, [r3, #20]
 8005bd0:	2b07      	cmp	r3, #7
 8005bd2:	d10a      	bne.n	8005bea <main+0xc8e>
	  			LED_R_1;
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bda:	4812      	ldr	r0, [pc, #72]	@ (8005c24 <main+0xcc8>)
 8005bdc:	f008 fdb2 	bl	800e744 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 8005be0:	4b13      	ldr	r3, [pc, #76]	@ (8005c30 <main+0xcd4>)
 8005be2:	885b      	ldrh	r3, [r3, #2]
 8005be4:	b21a      	sxth	r2, r3
 8005be6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c5c <main+0xd00>)
 8005be8:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 8005bea:	4b11      	ldr	r3, [pc, #68]	@ (8005c30 <main+0xcd4>)
 8005bec:	8a9b      	ldrh	r3, [r3, #20]
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d103      	bne.n	8005bfa <main+0xc9e>
	  			thrust_limit = 10000;
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8005c5c <main+0xd00>)
 8005bf4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005bf8:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <main+0xcd4>)
 8005bfc:	8a9b      	ldrh	r3, [r3, #20]
 8005bfe:	2b09      	cmp	r3, #9
 8005c00:	d13b      	bne.n	8005c7a <main+0xd1e>
	  			ESC_POWER_1;
 8005c02:	2201      	movs	r2, #1
 8005c04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c08:	4815      	ldr	r0, [pc, #84]	@ (8005c60 <main+0xd04>)
 8005c0a:	f008 fd9b 	bl	800e744 <HAL_GPIO_WritePin>
	  			LED_R_1;
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c14:	4803      	ldr	r0, [pc, #12]	@ (8005c24 <main+0xcc8>)
 8005c16:	f008 fd95 	bl	800e744 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 8005c1a:	4812      	ldr	r0, [pc, #72]	@ (8005c64 <main+0xd08>)
 8005c1c:	f018 f82a 	bl	801dc74 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c20:	e027      	b.n	8005c72 <main+0xd16>
 8005c22:	bf00      	nop
 8005c24:	58020400 	.word	0x58020400
 8005c28:	00000060 	.word	0x00000060
 8005c2c:	58020000 	.word	0x58020000
 8005c30:	00000178 	.word	0x00000178
 8005c34:	58021000 	.word	0x58021000
 8005c38:	24000274 	.word	0x24000274
 8005c3c:	00000114 	.word	0x00000114
 8005c40:	000000f4 	.word	0x000000f4
 8005c44:	00000154 	.word	0x00000154
 8005c48:	24000418 	.word	0x24000418
 8005c4c:	000041c0 	.word	0x000041c0
 8005c50:	240004b0 	.word	0x240004b0
 8005c54:	240003cc 	.word	0x240003cc
 8005c58:	00000074 	.word	0x00000074
 8005c5c:	0000405e 	.word	0x0000405e
 8005c60:	58021800 	.word	0x58021800
 8005c64:	24001ef0 	.word	0x24001ef0
	  				HAL_Delay(10);
 8005c68:	200a      	movs	r0, #10
 8005c6a:	f003 fc2f 	bl	80094cc <HAL_Delay>
	  				Get_batteryvalue();
 8005c6e:	f7fe fa83 	bl	8004178 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 8005c72:	4b61      	ldr	r3, [pc, #388]	@ (8005df8 <main+0xe9c>)
 8005c74:	8a9b      	ldrh	r3, [r3, #20]
 8005c76:	2b09      	cmp	r3, #9
 8005c78:	d0f6      	beq.n	8005c68 <main+0xd0c>
	  			}
	  		}

	  		if(commandready == 1){
 8005c7a:	4b60      	ldr	r3, [pc, #384]	@ (8005dfc <main+0xea0>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d159      	bne.n	8005d36 <main+0xdda>
	  			LED_7_1;
 8005c82:	2201      	movs	r2, #1
 8005c84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c88:	485d      	ldr	r0, [pc, #372]	@ (8005e00 <main+0xea4>)
 8005c8a:	f008 fd5b 	bl	800e744 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005c8e:	f7fc fd05 	bl	800269c <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 8005c92:	495c      	ldr	r1, [pc, #368]	@ (8005e04 <main+0xea8>)
 8005c94:	485c      	ldr	r0, [pc, #368]	@ (8005e08 <main+0xeac>)
 8005c96:	f7fc fd4f 	bl	8002738 <executecommand>
	  			LED_7_0;
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ca0:	4857      	ldr	r0, [pc, #348]	@ (8005e00 <main+0xea4>)
 8005ca2:	f008 fd4f 	bl	800e744 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 8005ca6:	4b59      	ldr	r3, [pc, #356]	@ (8005e0c <main+0xeb0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a59      	ldr	r2, [pc, #356]	@ (8005e10 <main+0xeb4>)
 8005cac:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005cae:	4b59      	ldr	r3, [pc, #356]	@ (8005e14 <main+0xeb8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a57      	ldr	r2, [pc, #348]	@ (8005e10 <main+0xeb4>)
 8005cb4:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 8005cb6:	4b58      	ldr	r3, [pc, #352]	@ (8005e18 <main+0xebc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a55      	ldr	r2, [pc, #340]	@ (8005e10 <main+0xeb4>)
 8005cbc:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005cbe:	4b57      	ldr	r3, [pc, #348]	@ (8005e1c <main+0xec0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a57      	ldr	r2, [pc, #348]	@ (8005e20 <main+0xec4>)
 8005cc4:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005cc6:	4b57      	ldr	r3, [pc, #348]	@ (8005e24 <main+0xec8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a55      	ldr	r2, [pc, #340]	@ (8005e20 <main+0xec4>)
 8005ccc:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005cce:	4b56      	ldr	r3, [pc, #344]	@ (8005e28 <main+0xecc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a53      	ldr	r2, [pc, #332]	@ (8005e20 <main+0xec4>)
 8005cd4:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 8005cd6:	4b55      	ldr	r3, [pc, #340]	@ (8005e2c <main+0xed0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a55      	ldr	r2, [pc, #340]	@ (8005e30 <main+0xed4>)
 8005cdc:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005cde:	4b55      	ldr	r3, [pc, #340]	@ (8005e34 <main+0xed8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a53      	ldr	r2, [pc, #332]	@ (8005e30 <main+0xed4>)
 8005ce4:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 8005ce6:	4b54      	ldr	r3, [pc, #336]	@ (8005e38 <main+0xedc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a51      	ldr	r2, [pc, #324]	@ (8005e30 <main+0xed4>)
 8005cec:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005cee:	4b53      	ldr	r3, [pc, #332]	@ (8005e3c <main+0xee0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a53      	ldr	r2, [pc, #332]	@ (8005e40 <main+0xee4>)
 8005cf4:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 8005cf6:	4b53      	ldr	r3, [pc, #332]	@ (8005e44 <main+0xee8>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a51      	ldr	r2, [pc, #324]	@ (8005e40 <main+0xee4>)
 8005cfc:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005cfe:	4b52      	ldr	r3, [pc, #328]	@ (8005e48 <main+0xeec>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a4f      	ldr	r2, [pc, #316]	@ (8005e40 <main+0xee4>)
 8005d04:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 8005d06:	4b51      	ldr	r3, [pc, #324]	@ (8005e4c <main+0xef0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a51      	ldr	r2, [pc, #324]	@ (8005e50 <main+0xef4>)
 8005d0c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 8005d0e:	4b51      	ldr	r3, [pc, #324]	@ (8005e54 <main+0xef8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a4f      	ldr	r2, [pc, #316]	@ (8005e50 <main+0xef4>)
 8005d14:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 8005d16:	4b50      	ldr	r3, [pc, #320]	@ (8005e58 <main+0xefc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a4d      	ldr	r2, [pc, #308]	@ (8005e50 <main+0xef4>)
 8005d1c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 8005d1e:	4b4f      	ldr	r3, [pc, #316]	@ (8005e5c <main+0xf00>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a4f      	ldr	r2, [pc, #316]	@ (8005e60 <main+0xf04>)
 8005d24:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 8005d26:	4b4f      	ldr	r3, [pc, #316]	@ (8005e64 <main+0xf08>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a4d      	ldr	r2, [pc, #308]	@ (8005e60 <main+0xf04>)
 8005d2c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 8005d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8005e68 <main+0xf0c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a4b      	ldr	r2, [pc, #300]	@ (8005e60 <main+0xf04>)
 8005d34:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 8005d36:	4b4d      	ldr	r3, [pc, #308]	@ (8005e6c <main+0xf10>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d14d      	bne.n	8005dda <main+0xe7e>
 8005d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8005e70 <main+0xf14>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d149      	bne.n	8005dda <main+0xe7e>
 8005d46:	4b4b      	ldr	r3, [pc, #300]	@ (8005e74 <main+0xf18>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d145      	bne.n	8005dda <main+0xe7e>
	  			TIM_inte_SD = 0;
 8005d4e:	4b47      	ldr	r3, [pc, #284]	@ (8005e6c <main+0xf10>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);
 8005d54:	4b48      	ldr	r3, [pc, #288]	@ (8005e78 <main+0xf1c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fd57 	bl	800780c <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 8005d5e:	4b46      	ldr	r3, [pc, #280]	@ (8005e78 <main+0xf1c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d12b      	bne.n	8005dc2 <main+0xe66>
	  				SD_In_Use = 1;
 8005d6a:	4b44      	ldr	r3, [pc, #272]	@ (8005e7c <main+0xf20>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005d70:	2201      	movs	r2, #1
 8005d72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d76:	4842      	ldr	r0, [pc, #264]	@ (8005e80 <main+0xf24>)
 8005d78:	f008 fce4 	bl	800e744 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005d7c:	2232      	movs	r2, #50	@ 0x32
 8005d7e:	4941      	ldr	r1, [pc, #260]	@ (8005e84 <main+0xf28>)
 8005d80:	4841      	ldr	r0, [pc, #260]	@ (8005e88 <main+0xf2c>)
 8005d82:	f017 fb9d 	bl	801d4c0 <f_open>
 8005d86:	4603      	mov	r3, r0
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4b39      	ldr	r3, [pc, #228]	@ (8005e70 <main+0xf14>)
 8005d8c:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e8c <main+0xf30>)
 8005d90:	4a3f      	ldr	r2, [pc, #252]	@ (8005e90 <main+0xf34>)
 8005d92:	4940      	ldr	r1, [pc, #256]	@ (8005e94 <main+0xf38>)
 8005d94:	483c      	ldr	r0, [pc, #240]	@ (8005e88 <main+0xf2c>)
 8005d96:	f017 fd5b 	bl	801d850 <f_write>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4b34      	ldr	r3, [pc, #208]	@ (8005e70 <main+0xf14>)
 8005da0:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005da2:	4839      	ldr	r0, [pc, #228]	@ (8005e88 <main+0xf2c>)
 8005da4:	f017 ff66 	bl	801dc74 <f_close>
 8005da8:	4603      	mov	r3, r0
 8005daa:	461a      	mov	r2, r3
 8005dac:	4b30      	ldr	r3, [pc, #192]	@ (8005e70 <main+0xf14>)
 8005dae:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005db0:	2200      	movs	r2, #0
 8005db2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005db6:	4832      	ldr	r0, [pc, #200]	@ (8005e80 <main+0xf24>)
 8005db8:	f008 fcc4 	bl	800e744 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8005e7c <main+0xf20>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
	  				}

	  			Mainloop_Number = Mainloop_Number < 1000 ? Mainloop_Number+1 : 0;
 8005dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e78 <main+0xf1c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dca:	d203      	bcs.n	8005dd4 <main+0xe78>
 8005dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8005e78 <main+0xf1c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <main+0xe7a>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	4a28      	ldr	r2, [pc, #160]	@ (8005e78 <main+0xf1c>)
 8005dd8:	6013      	str	r3, [r2, #0]
//	  			else{
//	  				Mainloop_Number = 0;
//	  			}
	  		}

	  		if(TIM_inte == 1){
 8005dda:	4b2f      	ldr	r3, [pc, #188]	@ (8005e98 <main+0xf3c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	f47f aef4 	bne.w	8005bcc <main+0xc70>
	  			LED_R_0;
 8005de4:	2200      	movs	r2, #0
 8005de6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005dea:	482c      	ldr	r0, [pc, #176]	@ (8005e9c <main+0xf40>)
 8005dec:	f008 fcaa 	bl	800e744 <HAL_GPIO_WritePin>
	  			TIM_inte = 0;
 8005df0:	4b29      	ldr	r3, [pc, #164]	@ (8005e98 <main+0xf3c>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005df6:	e6e9      	b.n	8005bcc <main+0xc70>
 8005df8:	00000178 	.word	0x00000178
 8005dfc:	000041be 	.word	0x000041be
 8005e00:	58020000 	.word	0x58020000
 8005e04:	000041a0 	.word	0x000041a0
 8005e08:	000041b0 	.word	0x000041b0
 8005e0c:	000040cc 	.word	0x000040cc
 8005e10:	000040f0 	.word	0x000040f0
 8005e14:	000040d8 	.word	0x000040d8
 8005e18:	000040e4 	.word	0x000040e4
 8005e1c:	0000412c 	.word	0x0000412c
 8005e20:	00004150 	.word	0x00004150
 8005e24:	00004138 	.word	0x00004138
 8005e28:	00004144 	.word	0x00004144
 8005e2c:	000040d0 	.word	0x000040d0
 8005e30:	00004104 	.word	0x00004104
 8005e34:	000040dc 	.word	0x000040dc
 8005e38:	000040e8 	.word	0x000040e8
 8005e3c:	00004130 	.word	0x00004130
 8005e40:	00004164 	.word	0x00004164
 8005e44:	0000413c 	.word	0x0000413c
 8005e48:	00004148 	.word	0x00004148
 8005e4c:	000040d4 	.word	0x000040d4
 8005e50:	00004118 	.word	0x00004118
 8005e54:	000040e0 	.word	0x000040e0
 8005e58:	000040ec 	.word	0x000040ec
 8005e5c:	00004134 	.word	0x00004134
 8005e60:	00004178 	.word	0x00004178
 8005e64:	00004140 	.word	0x00004140
 8005e68:	0000414c 	.word	0x0000414c
 8005e6c:	0000006c 	.word	0x0000006c
 8005e70:	24001eec 	.word	0x24001eec
 8005e74:	000041cc 	.word	0x000041cc
 8005e78:	000041c4 	.word	0x000041c4
 8005e7c:	000041c8 	.word	0x000041c8
 8005e80:	58020c00 	.word	0x58020c00
 8005e84:	0801eac0 	.word	0x0801eac0
 8005e88:	24001ef0 	.word	0x24001ef0
 8005e8c:	24002f24 	.word	0x24002f24
 8005e90:	0001f7e8 	.word	0x0001f7e8
 8005e94:	24002f28 	.word	0x24002f28
 8005e98:	00000070 	.word	0x00000070
 8005e9c:	58020400 	.word	0x58020400

08005ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b09c      	sub	sp, #112	@ 0x70
 8005ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005eaa:	224c      	movs	r2, #76	@ 0x4c
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f018 f8d8 	bl	801e064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005eb4:	1d3b      	adds	r3, r7, #4
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f018 f8d2 	bl	801e064 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005ec0:	2002      	movs	r0, #2
 8005ec2:	f00b f8f1 	bl	80110a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	603b      	str	r3, [r7, #0]
 8005eca:	4b2d      	ldr	r3, [pc, #180]	@ (8005f80 <SystemClock_Config+0xe0>)
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	4a2c      	ldr	r2, [pc, #176]	@ (8005f80 <SystemClock_Config+0xe0>)
 8005ed0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005ed4:	6193      	str	r3, [r2, #24]
 8005ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f80 <SystemClock_Config+0xe0>)
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005ee2:	bf00      	nop
 8005ee4:	4b26      	ldr	r3, [pc, #152]	@ (8005f80 <SystemClock_Config+0xe0>)
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ef0:	d1f8      	bne.n	8005ee4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005ef2:	2311      	movs	r3, #17
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005ef6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005efc:	2380      	movs	r3, #128	@ 0x80
 8005efe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005f00:	2310      	movs	r3, #16
 8005f02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f04:	2302      	movs	r3, #2
 8005f06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005f10:	2344      	movs	r3, #68	@ 0x44
 8005f12:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005f14:	2301      	movs	r3, #1
 8005f16:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005f18:	2302      	movs	r3, #2
 8005f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005f20:	230c      	movs	r3, #12
 8005f22:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005f28:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005f2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f00b f8f2 	bl	801111c <HAL_RCC_OscConfig>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005f3e:	f001 ff5b 	bl	8007df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f42:	233f      	movs	r3, #63	@ 0x3f
 8005f44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f46:	2303      	movs	r3, #3
 8005f48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005f4e:	2308      	movs	r3, #8
 8005f50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005f52:	2340      	movs	r3, #64	@ 0x40
 8005f54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005f56:	2340      	movs	r3, #64	@ 0x40
 8005f58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005f60:	2340      	movs	r3, #64	@ 0x40
 8005f62:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005f64:	1d3b      	adds	r3, r7, #4
 8005f66:	2103      	movs	r1, #3
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f00b fcb1 	bl	80118d0 <HAL_RCC_ClockConfig>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005f74:	f001 ff40 	bl	8007df8 <Error_Handler>
  }
}
 8005f78:	bf00      	nop
 8005f7a:	3770      	adds	r7, #112	@ 0x70
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	58024800 	.word	0x58024800

08005f84 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b0ae      	sub	sp, #184	@ 0xb8
 8005f88:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	22b8      	movs	r2, #184	@ 0xb8
 8005f8e:	2100      	movs	r1, #0
 8005f90:	4618      	mov	r0, r3
 8005f92:	f018 f867 	bl	801e064 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 8005f96:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8005fa2:	2316      	movs	r3, #22
 8005fa4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8005fa6:	23c0      	movs	r3, #192	@ 0xc0
 8005fa8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8005faa:	2303      	movs	r3, #3
 8005fac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8005fba:	2320      	movs	r3, #32
 8005fbc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005fc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fce:	463b      	mov	r3, r7
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f00c f809 	bl	8011fe8 <HAL_RCCEx_PeriphCLKConfig>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8005fdc:	f001 ff0c 	bl	8007df8 <Error_Handler>
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	37b8      	adds	r7, #184	@ 0xb8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a89      	ldr	r2, [pc, #548]	@ (8006218 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	f040 810b 	bne.w	8006210 <HAL_TIM_PeriodElapsedCallback+0x228>
	{
		TIM_inte_SD = 1;
 8005ffa:	4b88      	ldr	r3, [pc, #544]	@ (800621c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8006000:	4b87      	ldr	r3, [pc, #540]	@ (8006220 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8006002:	2201      	movs	r2, #1
 8006004:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 8006006:	4b87      	ldr	r3, [pc, #540]	@ (8006224 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3301      	adds	r3, #1
 800600c:	4a85      	ldr	r2, [pc, #532]	@ (8006224 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800600e:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 100ms
 8006010:	4b85      	ldr	r3, [pc, #532]	@ (8006228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d113      	bne.n	8006040 <HAL_TIM_PeriodElapsedCallback+0x58>
			LED_5_1;
 8006018:	2201      	movs	r2, #1
 800601a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800601e:	4883      	ldr	r0, [pc, #524]	@ (800622c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006020:	f008 fb90 	bl	800e744 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 8006024:	f7fa fc24 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 8006028:	2200      	movs	r2, #0
 800602a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800602e:	487f      	ldr	r0, [pc, #508]	@ (800622c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006030:	f008 fb88 	bl	800e744 <HAL_GPIO_WritePin>


			RGB_LED_For_BAT(MYDRON.batterysize);
 8006034:	4b7e      	ldr	r3, [pc, #504]	@ (8006230 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	4618      	mov	r0, r3
 800603c:	f001 fa50 	bl	80074e0 <RGB_LED_For_BAT>
		}

		if(i == 10){//2
 8006040:	4b79      	ldr	r3, [pc, #484]	@ (8006228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b0a      	cmp	r3, #10
 8006046:	d10d      	bne.n	8006064 <HAL_TIM_PeriodElapsedCallback+0x7c>
			LED_5_1;
 8006048:	2201      	movs	r2, #1
 800604a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800604e:	4877      	ldr	r0, [pc, #476]	@ (800622c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006050:	f008 fb78 	bl	800e744 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 8006054:	f7fa fbf6 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8006058:	2200      	movs	r2, #0
 800605a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800605e:	4873      	ldr	r0, [pc, #460]	@ (800622c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006060:	f008 fb70 	bl	800e744 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 8006064:	4b70      	ldr	r3, [pc, #448]	@ (8006228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b24      	cmp	r3, #36	@ 0x24
 800606a:	d10d      	bne.n	8006088 <HAL_TIM_PeriodElapsedCallback+0xa0>
			LED_5_1;
 800606c:	2201      	movs	r2, #1
 800606e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006072:	486e      	ldr	r0, [pc, #440]	@ (800622c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006074:	f008 fb66 	bl	800e744 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8006078:	f7fb f82c 	bl	80010d4 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 800607c:	2200      	movs	r2, #0
 800607e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006082:	486a      	ldr	r0, [pc, #424]	@ (800622c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8006084:	f008 fb5e 	bl	800e744 <HAL_GPIO_WritePin>
		}

		if(i == 38){
 8006088:	4b67      	ldr	r3, [pc, #412]	@ (8006228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b26      	cmp	r3, #38	@ 0x26
 800608e:	d10e      	bne.n	80060ae <HAL_TIM_PeriodElapsedCallback+0xc6>
			LED_6_1;
 8006090:	2201      	movs	r2, #1
 8006092:	2108      	movs	r1, #8
 8006094:	4867      	ldr	r0, [pc, #412]	@ (8006234 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006096:	f008 fb55 	bl	800e744 <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 800609a:	f7fb ff5d 	bl	8001f58 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 800609e:	4b66      	ldr	r3, [pc, #408]	@ (8006238 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 80060a4:	2200      	movs	r2, #0
 80060a6:	2108      	movs	r1, #8
 80060a8:	4862      	ldr	r0, [pc, #392]	@ (8006234 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80060aa:	f008 fb4b 	bl	800e744 <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 80060ae:	4b5e      	ldr	r3, [pc, #376]	@ (8006228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b28      	cmp	r3, #40	@ 0x28
 80060b4:	d14c      	bne.n	8006150 <HAL_TIM_PeriodElapsedCallback+0x168>
			ampritude = startpres - pres;
 80060b6:	4b61      	ldr	r3, [pc, #388]	@ (800623c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80060b8:	ed93 7a00 	vldr	s14, [r3]
 80060bc:	4b60      	ldr	r3, [pc, #384]	@ (8006240 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80060be:	edd3 7a00 	vldr	s15, [r3]
 80060c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060c6:	4b5f      	ldr	r3, [pc, #380]	@ (8006244 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80060c8:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 80060cc:	f7fa fe92 	bl	8000df4 <BMP180_GET_height>
 80060d0:	eef0 7a40 	vmov.f32	s15, s0
 80060d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d8:	ee17 3a90 	vmov	r3, s15
 80060dc:	b29b      	uxth	r3, r3
 80060de:	b21a      	sxth	r2, r3
 80060e0:	4b53      	ldr	r3, [pc, #332]	@ (8006230 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80060e2:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 80060e4:	4b52      	ldr	r3, [pc, #328]	@ (8006230 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80060e6:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 80060ea:	2303      	movs	r3, #3
 80060ec:	2200      	movs	r2, #0
 80060ee:	4956      	ldr	r1, [pc, #344]	@ (8006248 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80060f0:	f001 f919 	bl	8007326 <convert_value_to_array>

			Get_batteryvalue();
 80060f4:	f7fe f840 	bl	8004178 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 80060f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006230 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b218      	sxth	r0, r3
 80060fe:	2306      	movs	r3, #6
 8006100:	2203      	movs	r2, #3
 8006102:	4951      	ldr	r1, [pc, #324]	@ (8006248 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006104:	f001 f90f 	bl	8007326 <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8006108:	2300      	movs	r3, #0
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	e00b      	b.n	8006126 <HAL_TIM_PeriodElapsedCallback+0x13e>
				TxData[22+i] = Txcode[22+i];
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f103 0216 	add.w	r2, r3, #22
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3316      	adds	r3, #22
 8006118:	494c      	ldr	r1, [pc, #304]	@ (800624c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800611a:	5c89      	ldrb	r1, [r1, r2]
 800611c:	4a4a      	ldr	r2, [pc, #296]	@ (8006248 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800611e:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3301      	adds	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b09      	cmp	r3, #9
 800612a:	ddf0      	ble.n	800610e <HAL_TIM_PeriodElapsedCallback+0x126>
			}
			LED_6_1;
 800612c:	2201      	movs	r2, #1
 800612e:	2108      	movs	r1, #8
 8006130:	4840      	ldr	r0, [pc, #256]	@ (8006234 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8006132:	f008 fb07 	bl	800e744 <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 8006136:	4844      	ldr	r0, [pc, #272]	@ (8006248 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8006138:	f7fc f9cc 	bl	80024d4 <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 800613c:	2201      	movs	r2, #1
 800613e:	2140      	movs	r1, #64	@ 0x40
 8006140:	4843      	ldr	r0, [pc, #268]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8006142:	f008 faff 	bl	800e744 <HAL_GPIO_WritePin>
			LED_6_0;
 8006146:	2200      	movs	r2, #0
 8006148:	2108      	movs	r1, #8
 800614a:	483a      	ldr	r0, [pc, #232]	@ (8006234 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800614c:	f008 fafa 	bl	800e744 <HAL_GPIO_WritePin>
		}
		if(i == 41){
 8006150:	4b35      	ldr	r3, [pc, #212]	@ (8006228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b29      	cmp	r3, #41	@ 0x29
 8006156:	d104      	bne.n	8006162 <HAL_TIM_PeriodElapsedCallback+0x17a>
			NRF24_CE_LOW;
 8006158:	2200      	movs	r2, #0
 800615a:	2140      	movs	r1, #64	@ 0x40
 800615c:	483c      	ldr	r0, [pc, #240]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800615e:	f008 faf1 	bl	800e744 <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 8006162:	4b31      	ldr	r3, [pc, #196]	@ (8006228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b29      	cmp	r3, #41	@ 0x29
 8006168:	dd16      	ble.n	8006198 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			if(nRF24_Rx_Mode != 1){
 800616a:	4b33      	ldr	r3, [pc, #204]	@ (8006238 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d012      	beq.n	8006198 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 8006172:	f7fb ff72 	bl	800205a <nRF24_ReadStatus>
 8006176:	4603      	mov	r3, r0
 8006178:	f003 0310 	and.w	r3, r3, #16
 800617c:	2b00      	cmp	r3, #0
 800617e:	d106      	bne.n	800618e <HAL_TIM_PeriodElapsedCallback+0x1a6>
 8006180:	f7fb ff6b 	bl	800205a <nRF24_ReadStatus>
 8006184:	4603      	mov	r3, r0
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d004      	beq.n	8006198 <HAL_TIM_PeriodElapsedCallback+0x1b0>
					nRF24_RX_Mode();
 800618e:	f7fb feb7 	bl	8001f00 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 8006192:	4b29      	ldr	r3, [pc, #164]	@ (8006238 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 8006198:	2201      	movs	r2, #1
 800619a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800619e:	4823      	ldr	r0, [pc, #140]	@ (800622c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80061a0:	f008 fad0 	bl	800e744 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 80061a4:	f7fb fad4 	bl	8001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 80061a8:	2200      	movs	r2, #0
 80061aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061ae:	481f      	ldr	r0, [pc, #124]	@ (800622c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80061b0:	f008 fac8 	bl	800e744 <HAL_GPIO_WritePin>

		i = (i == 100) ? 0 : i+1;
 80061b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b64      	cmp	r3, #100	@ 0x64
 80061ba:	d003      	beq.n	80061c4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 80061bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3301      	adds	r3, #1
 80061c2:	e000      	b.n	80061c6 <HAL_TIM_PeriodElapsedCallback+0x1de>
 80061c4:	2300      	movs	r3, #0
 80061c6:	4a18      	ldr	r2, [pc, #96]	@ (8006228 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80061c8:	6013      	str	r3, [r2, #0]
//			i = 0;
//		}
//		else{
//			i++;
//		}
		if(NRF_TIM_Inte >= 1000){
 80061ca:	4b16      	ldr	r3, [pc, #88]	@ (8006224 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061d2:	d308      	bcc.n	80061e6 <HAL_TIM_PeriodElapsedCallback+0x1fe>
			LED_R_1;
 80061d4:	2201      	movs	r2, #1
 80061d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80061da:	481d      	ldr	r0, [pc, #116]	@ (8006250 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80061dc:	f008 fab2 	bl	800e744 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 80061e0:	4b13      	ldr	r3, [pc, #76]	@ (8006230 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80061e2:	2202      	movs	r2, #2
 80061e4:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 80061e6:	4b12      	ldr	r3, [pc, #72]	@ (8006230 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80061e8:	8a5b      	ldrh	r3, [r3, #18]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d110      	bne.n	8006210 <HAL_TIM_PeriodElapsedCallback+0x228>
			wanted_rool = 0;
 80061ee:	4b19      	ldr	r3, [pc, #100]	@ (8006254 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80061f0:	f04f 0200 	mov.w	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 80061f6:	4b18      	ldr	r3, [pc, #96]	@ (8006258 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 80061fe:	4b17      	ldr	r3, [pc, #92]	@ (800625c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 8006206:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800620a:	b21a      	sxth	r2, r3
 800620c:	4b14      	ldr	r3, [pc, #80]	@ (8006260 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800620e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	240003cc 	.word	0x240003cc
 800621c:	0000006c 	.word	0x0000006c
 8006220:	00000070 	.word	0x00000070
 8006224:	00000078 	.word	0x00000078
 8006228:	000041d8 	.word	0x000041d8
 800622c:	58020000 	.word	0x58020000
 8006230:	00000178 	.word	0x00000178
 8006234:	58021000 	.word	0x58021000
 8006238:	00000174 	.word	0x00000174
 800623c:	000000e4 	.word	0x000000e4
 8006240:	000000e0 	.word	0x000000e0
 8006244:	000000e8 	.word	0x000000e8
 8006248:	00000134 	.word	0x00000134
 800624c:	00000114 	.word	0x00000114
 8006250:	58020400 	.word	0x58020400
 8006254:	0000406c 	.word	0x0000406c
 8006258:	00004068 	.word	0x00004068
 800625c:	00004070 	.word	0x00004070
 8006260:	0000405c 	.word	0x0000405c

08006264 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006274:	f040 812c 	bne.w	80064d0 <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 8006278:	4b97      	ldr	r3, [pc, #604]	@ (80064d8 <HAL_GPIO_EXTI_Callback+0x274>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f040 8127 	bne.w	80064d0 <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 8006282:	2201      	movs	r2, #1
 8006284:	2108      	movs	r1, #8
 8006286:	4895      	ldr	r0, [pc, #596]	@ (80064dc <HAL_GPIO_EXTI_Callback+0x278>)
 8006288:	f008 fa5c 	bl	800e744 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 800628c:	4894      	ldr	r0, [pc, #592]	@ (80064e0 <HAL_GPIO_EXTI_Callback+0x27c>)
 800628e:	f7fc f957 	bl	8002540 <nRF24_ReadRXPaylaod>
			LED_6_0;
 8006292:	2200      	movs	r2, #0
 8006294:	2108      	movs	r1, #8
 8006296:	4891      	ldr	r0, [pc, #580]	@ (80064dc <HAL_GPIO_EXTI_Callback+0x278>)
 8006298:	f008 fa54 	bl	800e744 <HAL_GPIO_WritePin>


			LED_Y_1;
 800629c:	2201      	movs	r2, #1
 800629e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80062a2:	4890      	ldr	r0, [pc, #576]	@ (80064e4 <HAL_GPIO_EXTI_Callback+0x280>)
 80062a4:	f008 fa4e 	bl	800e744 <HAL_GPIO_WritePin>

			loopnum = 0;
 80062a8:	4b8f      	ldr	r3, [pc, #572]	@ (80064e8 <HAL_GPIO_EXTI_Callback+0x284>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	e011      	b.n	80062d8 <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	330c      	adds	r3, #12
 80062b8:	4a89      	ldr	r2, [pc, #548]	@ (80064e0 <HAL_GPIO_EXTI_Callback+0x27c>)
 80062ba:	5cd2      	ldrb	r2, [r2, r3]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	330c      	adds	r3, #12
 80062c0:	498a      	ldr	r1, [pc, #552]	@ (80064ec <HAL_GPIO_EXTI_Callback+0x288>)
 80062c2:	5ccb      	ldrb	r3, [r1, r3]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d104      	bne.n	80062d2 <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 80062c8:	4b87      	ldr	r3, [pc, #540]	@ (80064e8 <HAL_GPIO_EXTI_Callback+0x284>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3301      	adds	r3, #1
 80062ce:	4a86      	ldr	r2, [pc, #536]	@ (80064e8 <HAL_GPIO_EXTI_Callback+0x284>)
 80062d0:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3301      	adds	r3, #1
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b09      	cmp	r3, #9
 80062dc:	ddea      	ble.n	80062b4 <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 80062de:	4b82      	ldr	r3, [pc, #520]	@ (80064e8 <HAL_GPIO_EXTI_Callback+0x284>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b0a      	cmp	r3, #10
 80062e4:	f040 80e3 	bne.w	80064ae <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 80062e8:	2302      	movs	r3, #2
 80062ea:	2200      	movs	r2, #0
 80062ec:	4980      	ldr	r1, [pc, #512]	@ (80064f0 <HAL_GPIO_EXTI_Callback+0x28c>)
 80062ee:	487c      	ldr	r0, [pc, #496]	@ (80064e0 <HAL_GPIO_EXTI_Callback+0x27c>)
 80062f0:	f000 ffc8 	bl	8007284 <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 80062f4:	2305      	movs	r3, #5
 80062f6:	2203      	movs	r2, #3
 80062f8:	497e      	ldr	r1, [pc, #504]	@ (80064f4 <HAL_GPIO_EXTI_Callback+0x290>)
 80062fa:	4879      	ldr	r0, [pc, #484]	@ (80064e0 <HAL_GPIO_EXTI_Callback+0x27c>)
 80062fc:	f000 ffc2 	bl	8007284 <convert_array_to_value>
				if(wobble_strenght == 1){
 8006300:	4b7d      	ldr	r3, [pc, #500]	@ (80064f8 <HAL_GPIO_EXTI_Callback+0x294>)
 8006302:	edd3 7a00 	vldr	s15, [r3]
 8006306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800630a:	eef4 7a47 	vcmp.f32	s15, s14
 800630e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006312:	d105      	bne.n	8006320 <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 8006314:	2308      	movs	r3, #8
 8006316:	2206      	movs	r2, #6
 8006318:	4978      	ldr	r1, [pc, #480]	@ (80064fc <HAL_GPIO_EXTI_Callback+0x298>)
 800631a:	4871      	ldr	r0, [pc, #452]	@ (80064e0 <HAL_GPIO_EXTI_Callback+0x27c>)
 800631c:	f000 ffb2 	bl	8007284 <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 8006320:	230b      	movs	r3, #11
 8006322:	2209      	movs	r2, #9
 8006324:	4976      	ldr	r1, [pc, #472]	@ (8006500 <HAL_GPIO_EXTI_Callback+0x29c>)
 8006326:	486e      	ldr	r0, [pc, #440]	@ (80064e0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006328:	f000 ffac 	bl	8007284 <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 800632c:	4b75      	ldr	r3, [pc, #468]	@ (8006504 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800632e:	2201      	movs	r2, #1
 8006330:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 8006332:	4b6b      	ldr	r3, [pc, #428]	@ (80064e0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006334:	7ddb      	ldrb	r3, [r3, #23]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d11b      	bne.n	8006372 <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 800633a:	2201      	movs	r2, #1
 800633c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006340:	4871      	ldr	r0, [pc, #452]	@ (8006508 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8006342:	f008 f9ff 	bl	800e744 <HAL_GPIO_WritePin>
					LED_R_1;
 8006346:	2201      	movs	r2, #1
 8006348:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800634c:	4865      	ldr	r0, [pc, #404]	@ (80064e4 <HAL_GPIO_EXTI_Callback+0x280>)
 800634e:	f008 f9f9 	bl	800e744 <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 8006352:	4b6e      	ldr	r3, [pc, #440]	@ (800650c <HAL_GPIO_EXTI_Callback+0x2a8>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d10b      	bne.n	8006372 <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 800635a:	486d      	ldr	r0, [pc, #436]	@ (8006510 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800635c:	f017 fc8a 	bl	801dc74 <f_close>
						fresult = f_mount(NULL, "/", 1);
 8006360:	2201      	movs	r2, #1
 8006362:	496c      	ldr	r1, [pc, #432]	@ (8006514 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8006364:	2000      	movs	r0, #0
 8006366:	f017 f865 	bl	801d434 <f_mount>
 800636a:	4603      	mov	r3, r0
 800636c:	461a      	mov	r2, r3
 800636e:	4b6a      	ldr	r3, [pc, #424]	@ (8006518 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8006370:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 8006372:	4b62      	ldr	r3, [pc, #392]	@ (80064fc <HAL_GPIO_EXTI_Callback+0x298>)
 8006374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006378:	f242 720f 	movw	r2, #9999	@ 0x270f
 800637c:	4293      	cmp	r3, r2
 800637e:	d103      	bne.n	8006388 <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 8006380:	4b60      	ldr	r3, [pc, #384]	@ (8006504 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006382:	2210      	movs	r2, #16
 8006384:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 8006388:	4b5c      	ldr	r3, [pc, #368]	@ (80064fc <HAL_GPIO_EXTI_Callback+0x298>)
 800638a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800638e:	b29b      	uxth	r3, r3
 8006390:	461a      	mov	r2, r3
 8006392:	0092      	lsls	r2, r2, #2
 8006394:	4413      	add	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	b29b      	uxth	r3, r3
 800639a:	b21a      	sxth	r2, r3
 800639c:	4b57      	ldr	r3, [pc, #348]	@ (80064fc <HAL_GPIO_EXTI_Callback+0x298>)
 800639e:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 80063a0:	4b56      	ldr	r3, [pc, #344]	@ (80064fc <HAL_GPIO_EXTI_Callback+0x298>)
 80063a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	4b5c      	ldr	r3, [pc, #368]	@ (800651c <HAL_GPIO_EXTI_Callback+0x2b8>)
 80063aa:	4413      	add	r3, r2
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	b21a      	sxth	r2, r3
 80063b0:	4b52      	ldr	r3, [pc, #328]	@ (80064fc <HAL_GPIO_EXTI_Callback+0x298>)
 80063b2:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 80063b4:	4b51      	ldr	r3, [pc, #324]	@ (80064fc <HAL_GPIO_EXTI_Callback+0x298>)
 80063b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	da02      	bge.n	80063c4 <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 80063be:	4b4f      	ldr	r3, [pc, #316]	@ (80064fc <HAL_GPIO_EXTI_Callback+0x298>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 80063c4:	4b4b      	ldr	r3, [pc, #300]	@ (80064f4 <HAL_GPIO_EXTI_Callback+0x290>)
 80063c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063ca:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063d6:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8006520 <HAL_GPIO_EXTI_Callback+0x2bc>
 80063da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063e2:	ee17 3a90 	vmov	r3, s15
 80063e6:	b21a      	sxth	r2, r3
 80063e8:	4b4e      	ldr	r3, [pc, #312]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80063ea:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 80063ec:	4b40      	ldr	r3, [pc, #256]	@ (80064f0 <HAL_GPIO_EXTI_Callback+0x28c>)
 80063ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063f2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063fe:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006528 <HAL_GPIO_EXTI_Callback+0x2c4>
 8006402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800640a:	ee17 3a90 	vmov	r3, s15
 800640e:	b21a      	sxth	r2, r3
 8006410:	4b46      	ldr	r3, [pc, #280]	@ (800652c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006412:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;
 8006414:	4b3a      	ldr	r3, [pc, #232]	@ (8006500 <HAL_GPIO_EXTI_Callback+0x29c>)
 8006416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800641a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006426:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006530 <HAL_GPIO_EXTI_Callback+0x2cc>
 800642a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800642e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006432:	ee17 3a90 	vmov	r3, s15
 8006436:	b21a      	sxth	r2, r3
 8006438:	4b3e      	ldr	r3, [pc, #248]	@ (8006534 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800643a:	801a      	strh	r2, [r3, #0]


				wanted_rool_rx = (wanted_rool_rx >= 30) ? 30 : (wanted_rool_rx <= -30) ? -30 : wanted_rool_rx;
 800643c:	4b39      	ldr	r3, [pc, #228]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800643e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006442:	2b1d      	cmp	r3, #29
 8006444:	dc09      	bgt.n	800645a <HAL_GPIO_EXTI_Callback+0x1f6>
 8006446:	4b37      	ldr	r3, [pc, #220]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800644c:	f06f 021d 	mvn.w	r2, #29
 8006450:	4293      	cmp	r3, r2
 8006452:	bfb8      	it	lt
 8006454:	4613      	movlt	r3, r2
 8006456:	b21b      	sxth	r3, r3
 8006458:	e000      	b.n	800645c <HAL_GPIO_EXTI_Callback+0x1f8>
 800645a:	231e      	movs	r3, #30
 800645c:	4a31      	ldr	r2, [pc, #196]	@ (8006524 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800645e:	8013      	strh	r3, [r2, #0]
				wanted_pitch_rx = (wanted_pitch_rx >= 30) ? 30 : (wanted_pitch_rx <= -30) ? -30 : wanted_pitch_rx;
 8006460:	4b32      	ldr	r3, [pc, #200]	@ (800652c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006466:	2b1d      	cmp	r3, #29
 8006468:	dc09      	bgt.n	800647e <HAL_GPIO_EXTI_Callback+0x21a>
 800646a:	4b30      	ldr	r3, [pc, #192]	@ (800652c <HAL_GPIO_EXTI_Callback+0x2c8>)
 800646c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006470:	f06f 021d 	mvn.w	r2, #29
 8006474:	4293      	cmp	r3, r2
 8006476:	bfb8      	it	lt
 8006478:	4613      	movlt	r3, r2
 800647a:	b21b      	sxth	r3, r3
 800647c:	e000      	b.n	8006480 <HAL_GPIO_EXTI_Callback+0x21c>
 800647e:	231e      	movs	r3, #30
 8006480:	4a2a      	ldr	r2, [pc, #168]	@ (800652c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006482:	8013      	strh	r3, [r2, #0]
				wanted_yaw_rx = (wanted_yaw_rx >= 30) ? 30 : (wanted_yaw_rx <= -30) ? -30 : wanted_yaw_rx;
 8006484:	4b2b      	ldr	r3, [pc, #172]	@ (8006534 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800648a:	2b1d      	cmp	r3, #29
 800648c:	dc09      	bgt.n	80064a2 <HAL_GPIO_EXTI_Callback+0x23e>
 800648e:	4b29      	ldr	r3, [pc, #164]	@ (8006534 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006494:	f06f 021d 	mvn.w	r2, #29
 8006498:	4293      	cmp	r3, r2
 800649a:	bfb8      	it	lt
 800649c:	4613      	movlt	r3, r2
 800649e:	b21b      	sxth	r3, r3
 80064a0:	e000      	b.n	80064a4 <HAL_GPIO_EXTI_Callback+0x240>
 80064a2:	231e      	movs	r3, #30
 80064a4:	4a23      	ldr	r2, [pc, #140]	@ (8006534 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80064a6:	8013      	strh	r3, [r2, #0]
//				if(wanted_yaw_rx <= -30){
//					wanted_yaw_rx = -30;
//				}


				NRF_TIM_Inte = 0;
 80064a8:	4b23      	ldr	r3, [pc, #140]	@ (8006538 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 80064ae:	4b0e      	ldr	r3, [pc, #56]	@ (80064e8 <HAL_GPIO_EXTI_Callback+0x284>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	dd06      	ble.n	80064c4 <HAL_GPIO_EXTI_Callback+0x260>
 80064b6:	4b0c      	ldr	r3, [pc, #48]	@ (80064e8 <HAL_GPIO_EXTI_Callback+0x284>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b09      	cmp	r3, #9
 80064bc:	dc02      	bgt.n	80064c4 <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 80064be:	4b11      	ldr	r3, [pc, #68]	@ (8006504 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80064c0:	2203      	movs	r2, #3
 80064c2:	825a      	strh	r2, [r3, #18]
	  			}
	  			LED_Y_0;
 80064c4:	2200      	movs	r2, #0
 80064c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80064ca:	4806      	ldr	r0, [pc, #24]	@ (80064e4 <HAL_GPIO_EXTI_Callback+0x280>)
 80064cc:	f008 f93a 	bl	800e744 <HAL_GPIO_WritePin>
		}
	}
}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	00000074 	.word	0x00000074
 80064dc:	58021000 	.word	0x58021000
 80064e0:	000000f4 	.word	0x000000f4
 80064e4:	58020400 	.word	0x58020400
 80064e8:	000041dc 	.word	0x000041dc
 80064ec:	00000154 	.word	0x00000154
 80064f0:	000041e2 	.word	0x000041e2
 80064f4:	000041e0 	.word	0x000041e0
 80064f8:	000041d0 	.word	0x000041d0
 80064fc:	0000405c 	.word	0x0000405c
 8006500:	000041e4 	.word	0x000041e4
 8006504:	00000178 	.word	0x00000178
 8006508:	58021800 	.word	0x58021800
 800650c:	000041cc 	.word	0x000041cc
 8006510:	24001ef0 	.word	0x24001ef0
 8006514:	0801eab0 	.word	0x0801eab0
 8006518:	24001eec 	.word	0x24001eec
 800651c:	ffffd8f0 	.word	0xffffd8f0
 8006520:	3f266666 	.word	0x3f266666
 8006524:	0000404a 	.word	0x0000404a
 8006528:	3f28f5c3 	.word	0x3f28f5c3
 800652c:	00004048 	.word	0x00004048
 8006530:	3f19999a 	.word	0x3f19999a
 8006534:	0000404c 	.word	0x0000404c
 8006538:	00000078 	.word	0x00000078

0800653c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 8006544:	4b24      	ldr	r3, [pc, #144]	@ (80065d8 <HAL_UART_RxCpltCallback+0x9c>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	4b24      	ldr	r3, [pc, #144]	@ (80065dc <HAL_UART_RxCpltCallback+0xa0>)
 800654c:	7819      	ldrb	r1, [r3, #0]
 800654e:	4b24      	ldr	r3, [pc, #144]	@ (80065e0 <HAL_UART_RxCpltCallback+0xa4>)
 8006550:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 8006552:	4b21      	ldr	r3, [pc, #132]	@ (80065d8 <HAL_UART_RxCpltCallback+0x9c>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	4b21      	ldr	r3, [pc, #132]	@ (80065e0 <HAL_UART_RxCpltCallback+0xa4>)
 800655a:	5c9b      	ldrb	r3, [r3, r2]
 800655c:	2b0d      	cmp	r3, #13
 800655e:	d11a      	bne.n	8006596 <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 8006560:	230a      	movs	r3, #10
 8006562:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8006564:	f107 010f 	add.w	r1, r7, #15
 8006568:	2364      	movs	r3, #100	@ 0x64
 800656a:	2201      	movs	r2, #1
 800656c:	481d      	ldr	r0, [pc, #116]	@ (80065e4 <HAL_UART_RxCpltCallback+0xa8>)
 800656e:	f011 fc91 	bl	8017e94 <HAL_UART_Transmit>
		Y = '\r';
 8006572:	230d      	movs	r3, #13
 8006574:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 8006576:	f107 010f 	add.w	r1, r7, #15
 800657a:	2364      	movs	r3, #100	@ 0x64
 800657c:	2201      	movs	r2, #1
 800657e:	4819      	ldr	r0, [pc, #100]	@ (80065e4 <HAL_UART_RxCpltCallback+0xa8>)
 8006580:	f011 fc88 	bl	8017e94 <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 8006584:	4b14      	ldr	r3, [pc, #80]	@ (80065d8 <HAL_UART_RxCpltCallback+0x9c>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	461a      	mov	r2, r3
 800658a:	4b15      	ldr	r3, [pc, #84]	@ (80065e0 <HAL_UART_RxCpltCallback+0xa4>)
 800658c:	2100      	movs	r1, #0
 800658e:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8006590:	4b15      	ldr	r3, [pc, #84]	@ (80065e8 <HAL_UART_RxCpltCallback+0xac>)
 8006592:	2201      	movs	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 8006596:	4b10      	ldr	r3, [pc, #64]	@ (80065d8 <HAL_UART_RxCpltCallback+0x9c>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	461a      	mov	r2, r3
 800659c:	4b10      	ldr	r3, [pc, #64]	@ (80065e0 <HAL_UART_RxCpltCallback+0xa4>)
 800659e:	4413      	add	r3, r2
 80065a0:	2201      	movs	r2, #1
 80065a2:	4619      	mov	r1, r3
 80065a4:	480f      	ldr	r0, [pc, #60]	@ (80065e4 <HAL_UART_RxCpltCallback+0xa8>)
 80065a6:	f011 fd03 	bl	8017fb0 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 80065aa:	2201      	movs	r2, #1
 80065ac:	490b      	ldr	r1, [pc, #44]	@ (80065dc <HAL_UART_RxCpltCallback+0xa0>)
 80065ae:	480d      	ldr	r0, [pc, #52]	@ (80065e4 <HAL_UART_RxCpltCallback+0xa8>)
 80065b0:	f011 fd92 	bl	80180d8 <HAL_UART_Receive_IT>
	command_ch_num++;
 80065b4:	4b08      	ldr	r3, [pc, #32]	@ (80065d8 <HAL_UART_RxCpltCallback+0x9c>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	4b06      	ldr	r3, [pc, #24]	@ (80065d8 <HAL_UART_RxCpltCallback+0x9c>)
 80065be:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 80065c0:	4b09      	ldr	r3, [pc, #36]	@ (80065e8 <HAL_UART_RxCpltCallback+0xac>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d102      	bne.n	80065ce <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 80065c8:	4b03      	ldr	r3, [pc, #12]	@ (80065d8 <HAL_UART_RxCpltCallback+0x9c>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]
	}
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	000041bf 	.word	0x000041bf
 80065dc:	000041c0 	.word	0x000041c0
 80065e0:	000041b4 	.word	0x000041b4
 80065e4:	240004b0 	.word	0x240004b0
 80065e8:	000041be 	.word	0x000041be
 80065ec:	00000000 	.word	0x00000000

080065f0 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 80065f8:	4bbc      	ldr	r3, [pc, #752]	@ (80068ec <HAL_I2C_MemRxCpltCallback+0x2fc>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	f040 8595 	bne.w	800712c <HAL_I2C_MemRxCpltCallback+0xb3c>
			MPU6050_IRQ = 0;
 8006602:	4bba      	ldr	r3, [pc, #744]	@ (80068ec <HAL_I2C_MemRxCpltCallback+0x2fc>)
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 8006608:	2201      	movs	r2, #1
 800660a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800660e:	48b8      	ldr	r0, [pc, #736]	@ (80068f0 <HAL_I2C_MemRxCpltCallback+0x300>)
 8006610:	f008 f898 	bl	800e744 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8006614:	4bb7      	ldr	r3, [pc, #732]	@ (80068f4 <HAL_I2C_MemRxCpltCallback+0x304>)
 8006616:	edd3 7a00 	vldr	s15, [r3]
 800661a:	4bb7      	ldr	r3, [pc, #732]	@ (80068f8 <HAL_I2C_MemRxCpltCallback+0x308>)
 800661c:	ed93 7a00 	vldr	s14, [r3]
 8006620:	4bb6      	ldr	r3, [pc, #728]	@ (80068fc <HAL_I2C_MemRxCpltCallback+0x30c>)
 8006622:	edd3 6a00 	vldr	s13, [r3]
 8006626:	4bb6      	ldr	r3, [pc, #728]	@ (8006900 <HAL_I2C_MemRxCpltCallback+0x310>)
 8006628:	ed93 6a00 	vldr	s12, [r3]
 800662c:	4bb5      	ldr	r3, [pc, #724]	@ (8006904 <HAL_I2C_MemRxCpltCallback+0x314>)
 800662e:	edd3 5a00 	vldr	s11, [r3]
 8006632:	4bb5      	ldr	r3, [pc, #724]	@ (8006908 <HAL_I2C_MemRxCpltCallback+0x318>)
 8006634:	ed93 5a00 	vldr	s10, [r3]
 8006638:	eddf 4ab4 	vldr	s9, [pc, #720]	@ 800690c <HAL_I2C_MemRxCpltCallback+0x31c>
 800663c:	ed9f 4ab4 	vldr	s8, [pc, #720]	@ 8006910 <HAL_I2C_MemRxCpltCallback+0x320>
 8006640:	4bb4      	ldr	r3, [pc, #720]	@ (8006914 <HAL_I2C_MemRxCpltCallback+0x324>)
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	4bb4      	ldr	r3, [pc, #720]	@ (8006918 <HAL_I2C_MemRxCpltCallback+0x328>)
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	eef0 3a44 	vmov.f32	s7, s8
 800664c:	eeb0 3a64 	vmov.f32	s6, s9
 8006650:	eef0 2a45 	vmov.f32	s5, s10
 8006654:	eeb0 2a65 	vmov.f32	s4, s11
 8006658:	eef0 1a46 	vmov.f32	s3, s12
 800665c:	eeb0 1a66 	vmov.f32	s2, s13
 8006660:	eef0 0a47 	vmov.f32	s1, s14
 8006664:	eeb0 0a67 	vmov.f32	s0, s15
 8006668:	4bac      	ldr	r3, [pc, #688]	@ (800691c <HAL_I2C_MemRxCpltCallback+0x32c>)
 800666a:	4aad      	ldr	r2, [pc, #692]	@ (8006920 <HAL_I2C_MemRxCpltCallback+0x330>)
 800666c:	49ad      	ldr	r1, [pc, #692]	@ (8006924 <HAL_I2C_MemRxCpltCallback+0x334>)
 800666e:	48ae      	ldr	r0, [pc, #696]	@ (8006928 <HAL_I2C_MemRxCpltCallback+0x338>)
 8006670:	f7fb f888 	bl	8001784 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8006674:	4bac      	ldr	r3, [pc, #688]	@ (8006928 <HAL_I2C_MemRxCpltCallback+0x338>)
 8006676:	edd3 7a00 	vldr	s15, [r3]
 800667a:	4baa      	ldr	r3, [pc, #680]	@ (8006924 <HAL_I2C_MemRxCpltCallback+0x334>)
 800667c:	ed93 7a00 	vldr	s14, [r3]
 8006680:	4ba7      	ldr	r3, [pc, #668]	@ (8006920 <HAL_I2C_MemRxCpltCallback+0x330>)
 8006682:	edd3 6a00 	vldr	s13, [r3]
 8006686:	49a9      	ldr	r1, [pc, #676]	@ (800692c <HAL_I2C_MemRxCpltCallback+0x33c>)
 8006688:	48a9      	ldr	r0, [pc, #676]	@ (8006930 <HAL_I2C_MemRxCpltCallback+0x340>)
 800668a:	eeb0 1a66 	vmov.f32	s2, s13
 800668e:	eef0 0a47 	vmov.f32	s1, s14
 8006692:	eeb0 0a67 	vmov.f32	s0, s15
 8006696:	f7fa ff27 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 800669a:	4ba5      	ldr	r3, [pc, #660]	@ (8006930 <HAL_I2C_MemRxCpltCallback+0x340>)
 800669c:	edd3 7a00 	vldr	s15, [r3]
 80066a0:	4ba2      	ldr	r3, [pc, #648]	@ (800692c <HAL_I2C_MemRxCpltCallback+0x33c>)
 80066a2:	ed93 7a00 	vldr	s14, [r3]
 80066a6:	4ba3      	ldr	r3, [pc, #652]	@ (8006934 <HAL_I2C_MemRxCpltCallback+0x344>)
 80066a8:	edd3 6a00 	vldr	s13, [r3]
 80066ac:	4b9b      	ldr	r3, [pc, #620]	@ (800691c <HAL_I2C_MemRxCpltCallback+0x32c>)
 80066ae:	ed93 6a00 	vldr	s12, [r3]
 80066b2:	4b99      	ldr	r3, [pc, #612]	@ (8006918 <HAL_I2C_MemRxCpltCallback+0x328>)
 80066b4:	edd3 5a00 	vldr	s11, [r3]
 80066b8:	4b96      	ldr	r3, [pc, #600]	@ (8006914 <HAL_I2C_MemRxCpltCallback+0x324>)
 80066ba:	ed93 5a00 	vldr	s10, [r3]
 80066be:	eef0 2a45 	vmov.f32	s5, s10
 80066c2:	eeb0 2a65 	vmov.f32	s4, s11
 80066c6:	eef0 1a46 	vmov.f32	s3, s12
 80066ca:	eeb0 1a66 	vmov.f32	s2, s13
 80066ce:	eef0 0a47 	vmov.f32	s1, s14
 80066d2:	eeb0 0a67 	vmov.f32	s0, s15
 80066d6:	4898      	ldr	r0, [pc, #608]	@ (8006938 <HAL_I2C_MemRxCpltCallback+0x348>)
 80066d8:	f7fb f8fe 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 80066dc:	4b96      	ldr	r3, [pc, #600]	@ (8006938 <HAL_I2C_MemRxCpltCallback+0x348>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a96      	ldr	r2, [pc, #600]	@ (800693c <HAL_I2C_MemRxCpltCallback+0x34c>)
 80066e2:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 80066e4:	4b94      	ldr	r3, [pc, #592]	@ (8006938 <HAL_I2C_MemRxCpltCallback+0x348>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	4a95      	ldr	r2, [pc, #596]	@ (8006940 <HAL_I2C_MemRxCpltCallback+0x350>)
 80066ea:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 80066ec:	4b92      	ldr	r3, [pc, #584]	@ (8006938 <HAL_I2C_MemRxCpltCallback+0x348>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	4a94      	ldr	r2, [pc, #592]	@ (8006944 <HAL_I2C_MemRxCpltCallback+0x354>)
 80066f2:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 80066f4:	4b94      	ldr	r3, [pc, #592]	@ (8006948 <HAL_I2C_MemRxCpltCallback+0x358>)
 80066f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006702:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8006706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800670a:	4b90      	ldr	r3, [pc, #576]	@ (800694c <HAL_I2C_MemRxCpltCallback+0x35c>)
 800670c:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 8006710:	4b8f      	ldr	r3, [pc, #572]	@ (8006950 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800671e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8006722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006726:	4b8b      	ldr	r3, [pc, #556]	@ (8006954 <HAL_I2C_MemRxCpltCallback+0x364>)
 8006728:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 800672c:	4b8a      	ldr	r3, [pc, #552]	@ (8006958 <HAL_I2C_MemRxCpltCallback+0x368>)
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006734:	eddf 7a89 	vldr	s15, [pc, #548]	@ 800695c <HAL_I2C_MemRxCpltCallback+0x36c>
 8006738:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800673c:	4b83      	ldr	r3, [pc, #524]	@ (800694c <HAL_I2C_MemRxCpltCallback+0x35c>)
 800673e:	edd3 7a00 	vldr	s15, [r3]
 8006742:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006746:	eddf 7a85 	vldr	s15, [pc, #532]	@ 800695c <HAL_I2C_MemRxCpltCallback+0x36c>
 800674a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800674e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006752:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675a:	eddf 7a80 	vldr	s15, [pc, #512]	@ 800695c <HAL_I2C_MemRxCpltCallback+0x36c>
 800675e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800676e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006772:	4b7b      	ldr	r3, [pc, #492]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006774:	edd3 7a00 	vldr	s15, [r3]
 8006778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800677c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006780:	4b72      	ldr	r3, [pc, #456]	@ (800694c <HAL_I2C_MemRxCpltCallback+0x35c>)
 8006782:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 8006786:	eddf 7a75 	vldr	s15, [pc, #468]	@ 800695c <HAL_I2C_MemRxCpltCallback+0x36c>
 800678a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800678e:	4b71      	ldr	r3, [pc, #452]	@ (8006954 <HAL_I2C_MemRxCpltCallback+0x364>)
 8006790:	edd3 7a00 	vldr	s15, [r3]
 8006794:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006798:	eddf 7a70 	vldr	s15, [pc, #448]	@ 800695c <HAL_I2C_MemRxCpltCallback+0x36c>
 800679c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ac:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 800695c <HAL_I2C_MemRxCpltCallback+0x36c>
 80067b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067bc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80067c0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80067c4:	4b67      	ldr	r3, [pc, #412]	@ (8006964 <HAL_I2C_MemRxCpltCallback+0x374>)
 80067c6:	edd3 7a00 	vldr	s15, [r3]
 80067ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067d2:	4b60      	ldr	r3, [pc, #384]	@ (8006954 <HAL_I2C_MemRxCpltCallback+0x364>)
 80067d4:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 80067d8:	eddf 7a60 	vldr	s15, [pc, #384]	@ 800695c <HAL_I2C_MemRxCpltCallback+0x36c>
 80067dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067e0:	4b5d      	ldr	r3, [pc, #372]	@ (8006958 <HAL_I2C_MemRxCpltCallback+0x368>)
 80067e2:	edd3 7a00 	vldr	s15, [r3]
 80067e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80067ea:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800695c <HAL_I2C_MemRxCpltCallback+0x36c>
 80067ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fe:	eddf 7a57 	vldr	s15, [pc, #348]	@ 800695c <HAL_I2C_MemRxCpltCallback+0x36c>
 8006802:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800680a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800680e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006812:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006816:	4b54      	ldr	r3, [pc, #336]	@ (8006968 <HAL_I2C_MemRxCpltCallback+0x378>)
 8006818:	edd3 7a00 	vldr	s15, [r3]
 800681c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006824:	4b4c      	ldr	r3, [pc, #304]	@ (8006958 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006826:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 800682a:	4b48      	ldr	r3, [pc, #288]	@ (800694c <HAL_I2C_MemRxCpltCallback+0x35c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a4c      	ldr	r2, [pc, #304]	@ (8006960 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006830:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 8006832:	4b48      	ldr	r3, [pc, #288]	@ (8006954 <HAL_I2C_MemRxCpltCallback+0x364>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a4b      	ldr	r2, [pc, #300]	@ (8006964 <HAL_I2C_MemRxCpltCallback+0x374>)
 8006838:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 800683a:	4b47      	ldr	r3, [pc, #284]	@ (8006958 <HAL_I2C_MemRxCpltCallback+0x368>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a4a      	ldr	r2, [pc, #296]	@ (8006968 <HAL_I2C_MemRxCpltCallback+0x378>)
 8006840:	6013      	str	r3, [r2, #0]


			error_sum_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_pitch : error_sum_pitch + (wanted_pitch - now_pitch);
 8006842:	4b4a      	ldr	r3, [pc, #296]	@ (800696c <HAL_I2C_MemRxCpltCallback+0x37c>)
 8006844:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_I2C_MemRxCpltCallback+0x26e>
 800684c:	4b48      	ldr	r3, [pc, #288]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0x380>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	ee07 3a90 	vmov	s15, r3
 8006854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800685c:	e011      	b.n	8006882 <HAL_I2C_MemRxCpltCallback+0x292>
 800685e:	4b44      	ldr	r3, [pc, #272]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0x380>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800686a:	4b3a      	ldr	r3, [pc, #232]	@ (8006954 <HAL_I2C_MemRxCpltCallback+0x364>)
 800686c:	edd3 6a00 	vldr	s13, [r3]
 8006870:	4b32      	ldr	r3, [pc, #200]	@ (800693c <HAL_I2C_MemRxCpltCallback+0x34c>)
 8006872:	edd3 7a00 	vldr	s15, [r3]
 8006876:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800687a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800687e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006882:	4b3b      	ldr	r3, [pc, #236]	@ (8006970 <HAL_I2C_MemRxCpltCallback+0x380>)
 8006884:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = (MYDRON.ROOL_STA != 0) ? error_sum_rool : error_sum_rool + (wanted_rool - now_rool);
 8006888:	4b38      	ldr	r3, [pc, #224]	@ (800696c <HAL_I2C_MemRxCpltCallback+0x37c>)
 800688a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <HAL_I2C_MemRxCpltCallback+0x2b4>
 8006892:	4b38      	ldr	r3, [pc, #224]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x384>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800689e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068a2:	e011      	b.n	80068c8 <HAL_I2C_MemRxCpltCallback+0x2d8>
 80068a4:	4b33      	ldr	r3, [pc, #204]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x384>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	ee07 3a90 	vmov	s15, r3
 80068ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068b0:	4b26      	ldr	r3, [pc, #152]	@ (800694c <HAL_I2C_MemRxCpltCallback+0x35c>)
 80068b2:	edd3 6a00 	vldr	s13, [r3]
 80068b6:	4b22      	ldr	r3, [pc, #136]	@ (8006940 <HAL_I2C_MemRxCpltCallback+0x350>)
 80068b8:	edd3 7a00 	vldr	s15, [r3]
 80068bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068c8:	4b2a      	ldr	r3, [pc, #168]	@ (8006974 <HAL_I2C_MemRxCpltCallback+0x384>)
 80068ca:	edc3 7a00 	vstr	s15, [r3]
			error_sum_yaw = (MYDRON.YAW_STA != 0) ? error_sum_yaw : error_sum_yaw + (wanted_yaw - now_yaw);
 80068ce:	4b27      	ldr	r3, [pc, #156]	@ (800696c <HAL_I2C_MemRxCpltCallback+0x37c>)
 80068d0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d051      	beq.n	800697c <HAL_I2C_MemRxCpltCallback+0x38c>
 80068d8:	4b27      	ldr	r3, [pc, #156]	@ (8006978 <HAL_I2C_MemRxCpltCallback+0x388>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	ee07 3a90 	vmov	s15, r3
 80068e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068e8:	e05a      	b.n	80069a0 <HAL_I2C_MemRxCpltCallback+0x3b0>
 80068ea:	bf00      	nop
 80068ec:	000041d4 	.word	0x000041d4
 80068f0:	58021000 	.word	0x58021000
 80068f4:	00000030 	.word	0x00000030
 80068f8:	00000034 	.word	0x00000034
 80068fc:	00000038 	.word	0x00000038
 8006900:	0000003c 	.word	0x0000003c
 8006904:	00000040 	.word	0x00000040
 8006908:	00000044 	.word	0x00000044
 800690c:	42830000 	.word	0x42830000
 8006910:	46000000 	.word	0x46000000
 8006914:	00000014 	.word	0x00000014
 8006918:	00000010 	.word	0x00000010
 800691c:	0000000c 	.word	0x0000000c
 8006920:	00000008 	.word	0x00000008
 8006924:	00000004 	.word	0x00000004
 8006928:	00000000 	.word	0x00000000
 800692c:	0000001c 	.word	0x0000001c
 8006930:	00000018 	.word	0x00000018
 8006934:	00000058 	.word	0x00000058
 8006938:	0000007c 	.word	0x0000007c
 800693c:	00004078 	.word	0x00004078
 8006940:	0000407c 	.word	0x0000407c
 8006944:	00004080 	.word	0x00004080
 8006948:	0000404a 	.word	0x0000404a
 800694c:	0000406c 	.word	0x0000406c
 8006950:	00004048 	.word	0x00004048
 8006954:	00004068 	.word	0x00004068
 8006958:	00004070 	.word	0x00004070
 800695c:	3a83126f 	.word	0x3a83126f
 8006960:	00004054 	.word	0x00004054
 8006964:	00004050 	.word	0x00004050
 8006968:	00004058 	.word	0x00004058
 800696c:	00000178 	.word	0x00000178
 8006970:	0000409c 	.word	0x0000409c
 8006974:	000040a0 	.word	0x000040a0
 8006978:	000040a4 	.word	0x000040a4
 800697c:	4ba1      	ldr	r3, [pc, #644]	@ (8006c04 <HAL_I2C_MemRxCpltCallback+0x614>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	ee07 3a90 	vmov	s15, r3
 8006984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006988:	4b9f      	ldr	r3, [pc, #636]	@ (8006c08 <HAL_I2C_MemRxCpltCallback+0x618>)
 800698a:	edd3 6a00 	vldr	s13, [r3]
 800698e:	4b9f      	ldr	r3, [pc, #636]	@ (8006c0c <HAL_I2C_MemRxCpltCallback+0x61c>)
 8006990:	edd3 7a00 	vldr	s15, [r3]
 8006994:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800699c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069a0:	4b98      	ldr	r3, [pc, #608]	@ (8006c04 <HAL_I2C_MemRxCpltCallback+0x614>)
 80069a2:	edc3 7a00 	vstr	s15, [r3]

			error_sum_angular_rate_pitch = (MYDRON.PITCH_STA != 0) ? error_sum_angular_rate_pitch : error_sum_angular_rate_pitch + (pid_pitch - gx);
 80069a6:	4b9a      	ldr	r3, [pc, #616]	@ (8006c10 <HAL_I2C_MemRxCpltCallback+0x620>)
 80069a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <HAL_I2C_MemRxCpltCallback+0x3d2>
 80069b0:	4b98      	ldr	r3, [pc, #608]	@ (8006c14 <HAL_I2C_MemRxCpltCallback+0x624>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	ee07 3a90 	vmov	s15, r3
 80069b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069c0:	e011      	b.n	80069e6 <HAL_I2C_MemRxCpltCallback+0x3f6>
 80069c2:	4b94      	ldr	r3, [pc, #592]	@ (8006c14 <HAL_I2C_MemRxCpltCallback+0x624>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069ce:	4b92      	ldr	r3, [pc, #584]	@ (8006c18 <HAL_I2C_MemRxCpltCallback+0x628>)
 80069d0:	edd3 6a00 	vldr	s13, [r3]
 80069d4:	4b91      	ldr	r3, [pc, #580]	@ (8006c1c <HAL_I2C_MemRxCpltCallback+0x62c>)
 80069d6:	edd3 7a00 	vldr	s15, [r3]
 80069da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80069de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069e6:	4b8b      	ldr	r3, [pc, #556]	@ (8006c14 <HAL_I2C_MemRxCpltCallback+0x624>)
 80069e8:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = (MYDRON.ROOL_STA != 0) ? error_sum_angular_rate_rool : error_sum_angular_rate_rool + (pid_rool - gy);
 80069ec:	4b88      	ldr	r3, [pc, #544]	@ (8006c10 <HAL_I2C_MemRxCpltCallback+0x620>)
 80069ee:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d008      	beq.n	8006a08 <HAL_I2C_MemRxCpltCallback+0x418>
 80069f6:	4b8a      	ldr	r3, [pc, #552]	@ (8006c20 <HAL_I2C_MemRxCpltCallback+0x630>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a06:	e011      	b.n	8006a2c <HAL_I2C_MemRxCpltCallback+0x43c>
 8006a08:	4b85      	ldr	r3, [pc, #532]	@ (8006c20 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	ee07 3a90 	vmov	s15, r3
 8006a10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a14:	4b83      	ldr	r3, [pc, #524]	@ (8006c24 <HAL_I2C_MemRxCpltCallback+0x634>)
 8006a16:	edd3 6a00 	vldr	s13, [r3]
 8006a1a:	4b83      	ldr	r3, [pc, #524]	@ (8006c28 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006a1c:	edd3 7a00 	vldr	s15, [r3]
 8006a20:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a2c:	4b7c      	ldr	r3, [pc, #496]	@ (8006c20 <HAL_I2C_MemRxCpltCallback+0x630>)
 8006a2e:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_yaw = (MYDRON.YAW_STA != 0) ? error_sum_angular_rate_yaw : error_sum_angular_rate_yaw + (pid_yaw - gz);
 8006a32:	4b77      	ldr	r3, [pc, #476]	@ (8006c10 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006a34:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d008      	beq.n	8006a4e <HAL_I2C_MemRxCpltCallback+0x45e>
 8006a3c:	4b7b      	ldr	r3, [pc, #492]	@ (8006c2c <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a4c:	e011      	b.n	8006a72 <HAL_I2C_MemRxCpltCallback+0x482>
 8006a4e:	4b77      	ldr	r3, [pc, #476]	@ (8006c2c <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a5a:	4b75      	ldr	r3, [pc, #468]	@ (8006c30 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a5c:	edd3 6a00 	vldr	s13, [r3]
 8006a60:	4b74      	ldr	r3, [pc, #464]	@ (8006c34 <HAL_I2C_MemRxCpltCallback+0x644>)
 8006a62:	edd3 7a00 	vldr	s15, [r3]
 8006a66:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a72:	4b6e      	ldr	r3, [pc, #440]	@ (8006c2c <HAL_I2C_MemRxCpltCallback+0x63c>)
 8006a74:	edc3 7a00 	vstr	s15, [r3]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8006a78:	2201      	movs	r2, #1
 8006a7a:	496f      	ldr	r1, [pc, #444]	@ (8006c38 <HAL_I2C_MemRxCpltCallback+0x648>)
 8006a7c:	4866      	ldr	r0, [pc, #408]	@ (8006c18 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006a7e:	f7fc ffa5 	bl	80039cc <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8006a82:	2202      	movs	r2, #2
 8006a84:	496d      	ldr	r1, [pc, #436]	@ (8006c3c <HAL_I2C_MemRxCpltCallback+0x64c>)
 8006a86:	4867      	ldr	r0, [pc, #412]	@ (8006c24 <HAL_I2C_MemRxCpltCallback+0x634>)
 8006a88:	f7fc ffa0 	bl	80039cc <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	496c      	ldr	r1, [pc, #432]	@ (8006c40 <HAL_I2C_MemRxCpltCallback+0x650>)
 8006a90:	4867      	ldr	r0, [pc, #412]	@ (8006c30 <HAL_I2C_MemRxCpltCallback+0x640>)
 8006a92:	f7fc ff9b 	bl	80039cc <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8006a96:	2204      	movs	r2, #4
 8006a98:	496a      	ldr	r1, [pc, #424]	@ (8006c44 <HAL_I2C_MemRxCpltCallback+0x654>)
 8006a9a:	486b      	ldr	r0, [pc, #428]	@ (8006c48 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006a9c:	f7fc ff96 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8006aa0:	2205      	movs	r2, #5
 8006aa2:	496a      	ldr	r1, [pc, #424]	@ (8006c4c <HAL_I2C_MemRxCpltCallback+0x65c>)
 8006aa4:	486a      	ldr	r0, [pc, #424]	@ (8006c50 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006aa6:	f7fc ff91 	bl	80039cc <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8006aaa:	2206      	movs	r2, #6
 8006aac:	4969      	ldr	r1, [pc, #420]	@ (8006c54 <HAL_I2C_MemRxCpltCallback+0x664>)
 8006aae:	486a      	ldr	r0, [pc, #424]	@ (8006c58 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006ab0:	f7fc ff8c 	bl	80039cc <PID_cal>


			old_error_pitch = wanted_pitch - now_pitch;
 8006ab4:	4b69      	ldr	r3, [pc, #420]	@ (8006c5c <HAL_I2C_MemRxCpltCallback+0x66c>)
 8006ab6:	ed93 7a00 	vldr	s14, [r3]
 8006aba:	4b69      	ldr	r3, [pc, #420]	@ (8006c60 <HAL_I2C_MemRxCpltCallback+0x670>)
 8006abc:	edd3 7a00 	vldr	s15, [r3]
 8006ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ac4:	4b67      	ldr	r3, [pc, #412]	@ (8006c64 <HAL_I2C_MemRxCpltCallback+0x674>)
 8006ac6:	edc3 7a00 	vstr	s15, [r3]
			old_error_rool = wanted_rool - now_rool;
 8006aca:	4b67      	ldr	r3, [pc, #412]	@ (8006c68 <HAL_I2C_MemRxCpltCallback+0x678>)
 8006acc:	ed93 7a00 	vldr	s14, [r3]
 8006ad0:	4b66      	ldr	r3, [pc, #408]	@ (8006c6c <HAL_I2C_MemRxCpltCallback+0x67c>)
 8006ad2:	edd3 7a00 	vldr	s15, [r3]
 8006ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ada:	4b65      	ldr	r3, [pc, #404]	@ (8006c70 <HAL_I2C_MemRxCpltCallback+0x680>)
 8006adc:	edc3 7a00 	vstr	s15, [r3]
			old_error_yaw = wanted_yaw - now_yaw;
 8006ae0:	4b49      	ldr	r3, [pc, #292]	@ (8006c08 <HAL_I2C_MemRxCpltCallback+0x618>)
 8006ae2:	ed93 7a00 	vldr	s14, [r3]
 8006ae6:	4b49      	ldr	r3, [pc, #292]	@ (8006c0c <HAL_I2C_MemRxCpltCallback+0x61c>)
 8006ae8:	edd3 7a00 	vldr	s15, [r3]
 8006aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006af0:	4b60      	ldr	r3, [pc, #384]	@ (8006c74 <HAL_I2C_MemRxCpltCallback+0x684>)
 8006af2:	edc3 7a00 	vstr	s15, [r3]

			old_error_angular_rate_pitch = pid_pitch - gx;
 8006af6:	4b48      	ldr	r3, [pc, #288]	@ (8006c18 <HAL_I2C_MemRxCpltCallback+0x628>)
 8006af8:	ed93 7a00 	vldr	s14, [r3]
 8006afc:	4b47      	ldr	r3, [pc, #284]	@ (8006c1c <HAL_I2C_MemRxCpltCallback+0x62c>)
 8006afe:	edd3 7a00 	vldr	s15, [r3]
 8006b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b06:	4b5c      	ldr	r3, [pc, #368]	@ (8006c78 <HAL_I2C_MemRxCpltCallback+0x688>)
 8006b08:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_rool = pid_rool - gy;
 8006b0c:	4b45      	ldr	r3, [pc, #276]	@ (8006c24 <HAL_I2C_MemRxCpltCallback+0x634>)
 8006b0e:	ed93 7a00 	vldr	s14, [r3]
 8006b12:	4b45      	ldr	r3, [pc, #276]	@ (8006c28 <HAL_I2C_MemRxCpltCallback+0x638>)
 8006b14:	edd3 7a00 	vldr	s15, [r3]
 8006b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b1c:	4b57      	ldr	r3, [pc, #348]	@ (8006c7c <HAL_I2C_MemRxCpltCallback+0x68c>)
 8006b1e:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 8006b22:	4b39      	ldr	r3, [pc, #228]	@ (8006c08 <HAL_I2C_MemRxCpltCallback+0x618>)
 8006b24:	ed93 7a00 	vldr	s14, [r3]
 8006b28:	4b42      	ldr	r3, [pc, #264]	@ (8006c34 <HAL_I2C_MemRxCpltCallback+0x644>)
 8006b2a:	edd3 7a00 	vldr	s15, [r3]
 8006b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b32:	4b53      	ldr	r3, [pc, #332]	@ (8006c80 <HAL_I2C_MemRxCpltCallback+0x690>)
 8006b34:	edc3 7a00 	vstr	s15, [r3]


			//MYDRON.ROOL 	= ((pid_angular_rate_rool > -5000) && (pid_angular_rate_rool < 5000)) ? pid_angular_rate_rool: (pid_angular_rate_rool > 0) ? 5000: -5000;
			MYDRON.ROOL 	= (pid_angular_rate_rool > 5000) ? ROOL_MAX_VAL(): (pid_angular_rate_rool < -5000) ? ROOL_MIN_VAL(): ROOL_GOOD_VAL();
 8006b38:	4b45      	ldr	r3, [pc, #276]	@ (8006c50 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b3a:	edd3 7a00 	vldr	s15, [r3]
 8006b3e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8006c84 <HAL_I2C_MemRxCpltCallback+0x694>
 8006b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4a:	dd04      	ble.n	8006b56 <HAL_I2C_MemRxCpltCallback+0x566>
 8006b4c:	f001 f880 	bl	8007c50 <ROOL_MAX_VAL>
 8006b50:	4603      	mov	r3, r0
 8006b52:	461a      	mov	r2, r3
 8006b54:	e012      	b.n	8006b7c <HAL_I2C_MemRxCpltCallback+0x58c>
 8006b56:	4b3e      	ldr	r3, [pc, #248]	@ (8006c50 <HAL_I2C_MemRxCpltCallback+0x660>)
 8006b58:	edd3 7a00 	vldr	s15, [r3]
 8006b5c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006c88 <HAL_I2C_MemRxCpltCallback+0x698>
 8006b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b68:	d504      	bpl.n	8006b74 <HAL_I2C_MemRxCpltCallback+0x584>
 8006b6a:	f001 f881 	bl	8007c70 <ROOL_MIN_VAL>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	461a      	mov	r2, r3
 8006b72:	e003      	b.n	8006b7c <HAL_I2C_MemRxCpltCallback+0x58c>
 8006b74:	f001 f8cc 	bl	8007d10 <ROOL_GOOD_VAL>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4b24      	ldr	r3, [pc, #144]	@ (8006c10 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006b7e:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH 	= (pid_angular_rate_pitch > 5000) ? PITCH_MAX_VAL(): (pid_angular_rate_pitch < -5000) ? PITCH_MIN_VAL(): PITCH_GOOD_VAL();
 8006b80:	4b31      	ldr	r3, [pc, #196]	@ (8006c48 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006b82:	edd3 7a00 	vldr	s15, [r3]
 8006b86:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006c84 <HAL_I2C_MemRxCpltCallback+0x694>
 8006b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b92:	dd04      	ble.n	8006b9e <HAL_I2C_MemRxCpltCallback+0x5ae>
 8006b94:	f001 f87c 	bl	8007c90 <PITCH_MAX_VAL>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	e012      	b.n	8006bc4 <HAL_I2C_MemRxCpltCallback+0x5d4>
 8006b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8006c48 <HAL_I2C_MemRxCpltCallback+0x658>)
 8006ba0:	edd3 7a00 	vldr	s15, [r3]
 8006ba4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006c88 <HAL_I2C_MemRxCpltCallback+0x698>
 8006ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb0:	d504      	bpl.n	8006bbc <HAL_I2C_MemRxCpltCallback+0x5cc>
 8006bb2:	f001 f87d 	bl	8007cb0 <PITCH_MIN_VAL>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461a      	mov	r2, r3
 8006bba:	e003      	b.n	8006bc4 <HAL_I2C_MemRxCpltCallback+0x5d4>
 8006bbc:	f001 f8c0 	bl	8007d40 <PITCH_GOOD_VAL>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	4b12      	ldr	r3, [pc, #72]	@ (8006c10 <HAL_I2C_MemRxCpltCallback+0x620>)
 8006bc6:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW 		= (pid_angular_rate_yaw > 5000) ? YAW_MAX_VAL(): (pid_angular_rate_yaw < -5000) ? YAW_MIN_VAL(): YAW_GOOD_VAL();
 8006bc8:	4b23      	ldr	r3, [pc, #140]	@ (8006c58 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006bca:	edd3 7a00 	vldr	s15, [r3]
 8006bce:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006c84 <HAL_I2C_MemRxCpltCallback+0x694>
 8006bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bda:	dd04      	ble.n	8006be6 <HAL_I2C_MemRxCpltCallback+0x5f6>
 8006bdc:	f001 f878 	bl	8007cd0 <YAW_MAX_VAL>
 8006be0:	4603      	mov	r3, r0
 8006be2:	461a      	mov	r2, r3
 8006be4:	e056      	b.n	8006c94 <HAL_I2C_MemRxCpltCallback+0x6a4>
 8006be6:	4b1c      	ldr	r3, [pc, #112]	@ (8006c58 <HAL_I2C_MemRxCpltCallback+0x668>)
 8006be8:	edd3 7a00 	vldr	s15, [r3]
 8006bec:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006c88 <HAL_I2C_MemRxCpltCallback+0x698>
 8006bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf8:	d548      	bpl.n	8006c8c <HAL_I2C_MemRxCpltCallback+0x69c>
 8006bfa:	f001 f879 	bl	8007cf0 <YAW_MIN_VAL>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	461a      	mov	r2, r3
 8006c02:	e047      	b.n	8006c94 <HAL_I2C_MemRxCpltCallback+0x6a4>
 8006c04:	000040a4 	.word	0x000040a4
 8006c08:	00004070 	.word	0x00004070
 8006c0c:	00004080 	.word	0x00004080
 8006c10:	00000178 	.word	0x00000178
 8006c14:	000040a8 	.word	0x000040a8
 8006c18:	000040b4 	.word	0x000040b4
 8006c1c:	0000000c 	.word	0x0000000c
 8006c20:	000040ac 	.word	0x000040ac
 8006c24:	000040bc 	.word	0x000040bc
 8006c28:	00000010 	.word	0x00000010
 8006c2c:	000040b0 	.word	0x000040b0
 8006c30:	000040b8 	.word	0x000040b8
 8006c34:	00000014 	.word	0x00000014
 8006c38:	000040f0 	.word	0x000040f0
 8006c3c:	00004104 	.word	0x00004104
 8006c40:	00004118 	.word	0x00004118
 8006c44:	00004150 	.word	0x00004150
 8006c48:	000040c0 	.word	0x000040c0
 8006c4c:	00004164 	.word	0x00004164
 8006c50:	000040c8 	.word	0x000040c8
 8006c54:	00004178 	.word	0x00004178
 8006c58:	000040c4 	.word	0x000040c4
 8006c5c:	00004068 	.word	0x00004068
 8006c60:	00004078 	.word	0x00004078
 8006c64:	00004084 	.word	0x00004084
 8006c68:	0000406c 	.word	0x0000406c
 8006c6c:	0000407c 	.word	0x0000407c
 8006c70:	00004088 	.word	0x00004088
 8006c74:	0000408c 	.word	0x0000408c
 8006c78:	00004090 	.word	0x00004090
 8006c7c:	00004094 	.word	0x00004094
 8006c80:	00004098 	.word	0x00004098
 8006c84:	459c4000 	.word	0x459c4000
 8006c88:	c59c4000 	.word	0xc59c4000
 8006c8c:	f001 f870 	bl	8007d70 <YAW_GOOD_VAL>
 8006c90:	4603      	mov	r3, r0
 8006c92:	461a      	mov	r2, r3
 8006c94:	4bc4      	ldr	r3, [pc, #784]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006c96:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 8006c98:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8006c9c:	f7fc fd60 	bl	8003760 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 8006ca0:	4bc1      	ldr	r3, [pc, #772]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ca2:	885b      	ldrh	r3, [r3, #2]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4bc1      	ldr	r3, [pc, #772]	@ (8006fac <HAL_I2C_MemRxCpltCallback+0x9bc>)
 8006ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	dd05      	ble.n	8006cbc <HAL_I2C_MemRxCpltCallback+0x6cc>
				MYDRON.THRUST = thrust_limit;
 8006cb0:	4bbe      	ldr	r3, [pc, #760]	@ (8006fac <HAL_I2C_MemRxCpltCallback+0x9bc>)
 8006cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	4bbb      	ldr	r3, [pc, #748]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006cba:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 8006cbc:	4bbc      	ldr	r3, [pc, #752]	@ (8006fb0 <HAL_I2C_MemRxCpltCallback+0x9c0>)
 8006cbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8006cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8006cc6:	f000 fbcd 	bl	8007464 <WartoscBezwgledna>
 8006cca:	eef0 7a40 	vmov.f32	s15, s0
 8006cce:	eeb0 0a67 	vmov.f32	s0, s15
 8006cd2:	f000 ff71 	bl	8007bb8 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 8006cd6:	4bb7      	ldr	r3, [pc, #732]	@ (8006fb4 <HAL_I2C_MemRxCpltCallback+0x9c4>)
 8006cd8:	edd3 7a04 	vldr	s15, [r3, #16]
 8006cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8006ce0:	f000 fbc0 	bl	8007464 <WartoscBezwgledna>
 8006ce4:	eef0 7a40 	vmov.f32	s15, s0
 8006ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8006cec:	f000 ff64 	bl	8007bb8 <Stack_Push>
			Stack_Push(now_pitch);
 8006cf0:	4bb1      	ldr	r3, [pc, #708]	@ (8006fb8 <HAL_I2C_MemRxCpltCallback+0x9c8>)
 8006cf2:	edd3 7a00 	vldr	s15, [r3]
 8006cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8006cfa:	f000 ff5d 	bl	8007bb8 <Stack_Push>
			Stack_Push(now_rool);
 8006cfe:	4baf      	ldr	r3, [pc, #700]	@ (8006fbc <HAL_I2C_MemRxCpltCallback+0x9cc>)
 8006d00:	edd3 7a00 	vldr	s15, [r3]
 8006d04:	eeb0 0a67 	vmov.f32	s0, s15
 8006d08:	f000 ff56 	bl	8007bb8 <Stack_Push>


			SPEED1 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//trust 7000 max
 8006d0c:	4ba6      	ldr	r3, [pc, #664]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006d0e:	885b      	ldrh	r3, [r3, #2]
 8006d10:	ee07 3a90 	vmov	s15, r3
 8006d14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d18:	ed9f 6b9d 	vldr	d6, [pc, #628]	@ 8006f90 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006d1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d20:	4ba1      	ldr	r3, [pc, #644]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006d22:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d32:	4b9d      	ldr	r3, [pc, #628]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006d34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d38:	ee07 3a90 	vmov	s15, r3
 8006d3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d40:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d44:	4b98      	ldr	r3, [pc, #608]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006d46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d52:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d56:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006f98 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006d5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d5e:	ed9f 6b90 	vldr	d6, [pc, #576]	@ 8006fa0 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006d62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006d66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d6a:	ee17 2a90 	vmov	r2, s15
 8006d6e:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d832      	bhi.n	8006ddc <HAL_I2C_MemRxCpltCallback+0x7ec>
 8006d76:	4b8c      	ldr	r3, [pc, #560]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006d78:	885b      	ldrh	r3, [r3, #2]
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d82:	ed9f 6b83 	vldr	d6, [pc, #524]	@ 8006f90 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006d86:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d8a:	4b87      	ldr	r3, [pc, #540]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006d8c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d90:	ee07 3a90 	vmov	s15, r3
 8006d94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d98:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006d9c:	4b82      	ldr	r3, [pc, #520]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006d9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006daa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006dae:	4b7e      	ldr	r3, [pc, #504]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006db0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006db4:	ee07 3a90 	vmov	s15, r3
 8006db8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006dbc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006dc0:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006f98 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006dc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006dc8:	ed9f 6b75 	vldr	d6, [pc, #468]	@ 8006fa0 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006dcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006dd0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006dd4:	ee17 3a90 	vmov	r3, s15
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	e001      	b.n	8006de0 <HAL_I2C_MemRxCpltCallback+0x7f0>
 8006ddc:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006de0:	4a77      	ldr	r2, [pc, #476]	@ (8006fc0 <HAL_I2C_MemRxCpltCallback+0x9d0>)
 8006de2:	8013      	strh	r3, [r2, #0]
			SPEED2 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006de4:	4b70      	ldr	r3, [pc, #448]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006de6:	885b      	ldrh	r3, [r3, #2]
 8006de8:	ee07 3a90 	vmov	s15, r3
 8006dec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006df0:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8006f90 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006df4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006df8:	4b6b      	ldr	r3, [pc, #428]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006dfa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e06:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e0a:	4b67      	ldr	r3, [pc, #412]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e10:	ee07 3a90 	vmov	s15, r3
 8006e14:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e18:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e1c:	4b62      	ldr	r3, [pc, #392]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e2e:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006f98 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006e32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e36:	ed9f 6b5a 	vldr	d6, [pc, #360]	@ 8006fa0 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006e3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006e3e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e42:	ee17 2a90 	vmov	r2, s15
 8006e46:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d832      	bhi.n	8006eb4 <HAL_I2C_MemRxCpltCallback+0x8c4>
 8006e4e:	4b56      	ldr	r3, [pc, #344]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e50:	885b      	ldrh	r3, [r3, #2]
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e5a:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8006f90 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006e5e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e62:	4b51      	ldr	r3, [pc, #324]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006e68:	ee07 3a90 	vmov	s15, r3
 8006e6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e70:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e74:	4b4c      	ldr	r3, [pc, #304]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e82:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e86:	4b48      	ldr	r3, [pc, #288]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006e88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e8c:	ee07 3a90 	vmov	s15, r3
 8006e90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006e94:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e98:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006f98 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006e9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ea0:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8006fa0 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006ea4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006ea8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006eac:	ee17 3a90 	vmov	r3, s15
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	e001      	b.n	8006eb8 <HAL_I2C_MemRxCpltCallback+0x8c8>
 8006eb4:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006eb8:	4a42      	ldr	r2, [pc, #264]	@ (8006fc4 <HAL_I2C_MemRxCpltCallback+0x9d4>)
 8006eba:	8013      	strh	r3, [r2, #0]
			SPEED3 = (((uint32_t)((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500) : max_speed;//
 8006ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ebe:	885b      	ldrh	r3, [r3, #2]
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ec8:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8006f90 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006ecc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006ed0:	4b35      	ldr	r3, [pc, #212]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ed2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ede:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ee2:	4b31      	ldr	r3, [pc, #196]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ee4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ef0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006ef6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f06:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006f98 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006f0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f0e:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8006fa0 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006f12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f1a:	ee17 2a90 	vmov	r2, s15
 8006f1e:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d850      	bhi.n	8006fc8 <HAL_I2C_MemRxCpltCallback+0x9d8>
 8006f26:	4b20      	ldr	r3, [pc, #128]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006f28:	885b      	ldrh	r3, [r3, #2]
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f32:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8006f90 <HAL_I2C_MemRxCpltCallback+0x9a0>
 8006f36:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006f3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f48:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f4c:	4b16      	ldr	r3, [pc, #88]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006f4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f5a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006f5e:	4b12      	ldr	r3, [pc, #72]	@ (8006fa8 <HAL_I2C_MemRxCpltCallback+0x9b8>)
 8006f60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f64:	ee07 3a90 	vmov	s15, r3
 8006f68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f6c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f70:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006f98 <HAL_I2C_MemRxCpltCallback+0x9a8>
 8006f74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f78:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006fa0 <HAL_I2C_MemRxCpltCallback+0x9b0>
 8006f7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006f84:	ee17 3a90 	vmov	r3, s15
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	e01f      	b.n	8006fcc <HAL_I2C_MemRxCpltCallback+0x9dc>
 8006f8c:	f3af 8000 	nop.w
 8006f90:	66666666 	.word	0x66666666
 8006f94:	3fe66666 	.word	0x3fe66666
 8006f98:	00000000 	.word	0x00000000
 8006f9c:	40c48200 	.word	0x40c48200
 8006fa0:	00000000 	.word	0x00000000
 8006fa4:	407f4000 	.word	0x407f4000
 8006fa8:	00000178 	.word	0x00000178
 8006fac:	0000405e 	.word	0x0000405e
 8006fb0:	000040f0 	.word	0x000040f0
 8006fb4:	00004104 	.word	0x00004104
 8006fb8:	00004078 	.word	0x00004078
 8006fbc:	0000407c 	.word	0x0000407c
 8006fc0:	0000418c 	.word	0x0000418c
 8006fc4:	0000418e 	.word	0x0000418e
 8006fc8:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8006fcc:	4a9a      	ldr	r2, [pc, #616]	@ (8007238 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8006fce:	8013      	strh	r3, [r2, #0]
			SPEED4 = (((uint32_t)((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500)) < max_speed) ? ((MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500) : max_speed;//
 8006fd0:	4b9a      	ldr	r3, [pc, #616]	@ (800723c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006fd2:	885b      	ldrh	r3, [r3, #2]
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fdc:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8007208 <HAL_I2C_MemRxCpltCallback+0xc18>
 8006fe0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006fe4:	4b95      	ldr	r3, [pc, #596]	@ (800723c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006fe6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ff2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ff6:	4b91      	ldr	r3, [pc, #580]	@ (800723c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8006ff8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ffc:	ee07 3a90 	vmov	s15, r3
 8007000:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007004:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007008:	4b8c      	ldr	r3, [pc, #560]	@ (800723c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 800700a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800700e:	ee07 3a90 	vmov	s15, r3
 8007012:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007016:	ee36 7b07 	vadd.f64	d7, d6, d7
 800701a:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8007210 <HAL_I2C_MemRxCpltCallback+0xc20>
 800701e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007022:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8007218 <HAL_I2C_MemRxCpltCallback+0xc28>
 8007026:	ee37 7b06 	vadd.f64	d7, d7, d6
 800702a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800702e:	ee17 2a90 	vmov	r2, s15
 8007032:	f644 432b 	movw	r3, #19499	@ 0x4c2b
 8007036:	429a      	cmp	r2, r3
 8007038:	d832      	bhi.n	80070a0 <HAL_I2C_MemRxCpltCallback+0xab0>
 800703a:	4b80      	ldr	r3, [pc, #512]	@ (800723c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 800703c:	885b      	ldrh	r3, [r3, #2]
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007046:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 8007208 <HAL_I2C_MemRxCpltCallback+0xc18>
 800704a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800704e:	4b7b      	ldr	r3, [pc, #492]	@ (800723c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007050:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007054:	ee07 3a90 	vmov	s15, r3
 8007058:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800705c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007060:	4b76      	ldr	r3, [pc, #472]	@ (800723c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007062:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800706e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007072:	4b72      	ldr	r3, [pc, #456]	@ (800723c <HAL_I2C_MemRxCpltCallback+0xc4c>)
 8007074:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007078:	ee07 3a90 	vmov	s15, r3
 800707c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007080:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007084:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8007210 <HAL_I2C_MemRxCpltCallback+0xc20>
 8007088:	ee37 7b06 	vadd.f64	d7, d7, d6
 800708c:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8007218 <HAL_I2C_MemRxCpltCallback+0xc28>
 8007090:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007094:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007098:	ee17 3a90 	vmov	r3, s15
 800709c:	b29b      	uxth	r3, r3
 800709e:	e001      	b.n	80070a4 <HAL_I2C_MemRxCpltCallback+0xab4>
 80070a0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 80070a4:	4a66      	ldr	r2, [pc, #408]	@ (8007240 <HAL_I2C_MemRxCpltCallback+0xc50>)
 80070a6:	8013      	strh	r3, [r2, #0]

			if(SPEED1 != OLD_SPEED1){
 80070a8:	4b66      	ldr	r3, [pc, #408]	@ (8007244 <HAL_I2C_MemRxCpltCallback+0xc54>)
 80070aa:	881a      	ldrh	r2, [r3, #0]
 80070ac:	4b66      	ldr	r3, [pc, #408]	@ (8007248 <HAL_I2C_MemRxCpltCallback+0xc58>)
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d004      	beq.n	80070be <HAL_I2C_MemRxCpltCallback+0xace>
				ESC_1_SPEED(SPEED1);
 80070b4:	4b63      	ldr	r3, [pc, #396]	@ (8007244 <HAL_I2C_MemRxCpltCallback+0xc54>)
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7f9 febb 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 80070be:	4b63      	ldr	r3, [pc, #396]	@ (800724c <HAL_I2C_MemRxCpltCallback+0xc5c>)
 80070c0:	881a      	ldrh	r2, [r3, #0]
 80070c2:	4b63      	ldr	r3, [pc, #396]	@ (8007250 <HAL_I2C_MemRxCpltCallback+0xc60>)
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d004      	beq.n	80070d4 <HAL_I2C_MemRxCpltCallback+0xae4>
				ESC_2_SPEED(SPEED2);
 80070ca:	4b60      	ldr	r3, [pc, #384]	@ (800724c <HAL_I2C_MemRxCpltCallback+0xc5c>)
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7f9 fed2 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 80070d4:	4b58      	ldr	r3, [pc, #352]	@ (8007238 <HAL_I2C_MemRxCpltCallback+0xc48>)
 80070d6:	881a      	ldrh	r2, [r3, #0]
 80070d8:	4b5e      	ldr	r3, [pc, #376]	@ (8007254 <HAL_I2C_MemRxCpltCallback+0xc64>)
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d004      	beq.n	80070ea <HAL_I2C_MemRxCpltCallback+0xafa>
				ESC_3_SPEED(SPEED3);
 80070e0:	4b55      	ldr	r3, [pc, #340]	@ (8007238 <HAL_I2C_MemRxCpltCallback+0xc48>)
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7f9 fee9 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 80070ea:	4b55      	ldr	r3, [pc, #340]	@ (8007240 <HAL_I2C_MemRxCpltCallback+0xc50>)
 80070ec:	881a      	ldrh	r2, [r3, #0]
 80070ee:	4b5a      	ldr	r3, [pc, #360]	@ (8007258 <HAL_I2C_MemRxCpltCallback+0xc68>)
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d004      	beq.n	8007100 <HAL_I2C_MemRxCpltCallback+0xb10>
				ESC_4_SPEED(SPEED4);
 80070f6:	4b52      	ldr	r3, [pc, #328]	@ (8007240 <HAL_I2C_MemRxCpltCallback+0xc50>)
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7f9 ff00 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 8007100:	4b50      	ldr	r3, [pc, #320]	@ (8007244 <HAL_I2C_MemRxCpltCallback+0xc54>)
 8007102:	881a      	ldrh	r2, [r3, #0]
 8007104:	4b50      	ldr	r3, [pc, #320]	@ (8007248 <HAL_I2C_MemRxCpltCallback+0xc58>)
 8007106:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 8007108:	4b50      	ldr	r3, [pc, #320]	@ (800724c <HAL_I2C_MemRxCpltCallback+0xc5c>)
 800710a:	881a      	ldrh	r2, [r3, #0]
 800710c:	4b50      	ldr	r3, [pc, #320]	@ (8007250 <HAL_I2C_MemRxCpltCallback+0xc60>)
 800710e:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 8007110:	4b49      	ldr	r3, [pc, #292]	@ (8007238 <HAL_I2C_MemRxCpltCallback+0xc48>)
 8007112:	881a      	ldrh	r2, [r3, #0]
 8007114:	4b4f      	ldr	r3, [pc, #316]	@ (8007254 <HAL_I2C_MemRxCpltCallback+0xc64>)
 8007116:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 8007118:	4b49      	ldr	r3, [pc, #292]	@ (8007240 <HAL_I2C_MemRxCpltCallback+0xc50>)
 800711a:	881a      	ldrh	r2, [r3, #0]
 800711c:	4b4e      	ldr	r3, [pc, #312]	@ (8007258 <HAL_I2C_MemRxCpltCallback+0xc68>)
 800711e:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8007120:	2200      	movs	r2, #0
 8007122:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007126:	484d      	ldr	r0, [pc, #308]	@ (800725c <HAL_I2C_MemRxCpltCallback+0xc6c>)
 8007128:	f007 fb0c 	bl	800e744 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 800712c:	4b4c      	ldr	r3, [pc, #304]	@ (8007260 <HAL_I2C_MemRxCpltCallback+0xc70>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d132      	bne.n	800719a <HAL_I2C_MemRxCpltCallback+0xbaa>
		HMC583L_IRQ = 0;
 8007134:	4b4a      	ldr	r3, [pc, #296]	@ (8007260 <HAL_I2C_MemRxCpltCallback+0xc70>)
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
		Mag_Z = (float)(HMC5883L_Get_Z_End_IT() - Mag_Offset_val);
 800713a:	f7f9 ffe5 	bl	8001108 <HMC5883L_Get_Z_End_IT>
 800713e:	4603      	mov	r3, r0
 8007140:	461a      	mov	r2, r3
 8007142:	4b48      	ldr	r3, [pc, #288]	@ (8007264 <HAL_I2C_MemRxCpltCallback+0xc74>)
 8007144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007152:	4b45      	ldr	r3, [pc, #276]	@ (8007268 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8007154:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8007158:	4b43      	ldr	r3, [pc, #268]	@ (8007268 <HAL_I2C_MemRxCpltCallback+0xc78>)
 800715a:	edd3 7a00 	vldr	s15, [r3]
 800715e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007162:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8007220 <HAL_I2C_MemRxCpltCallback+0xc30>
 8007166:	ee27 7b06 	vmul.f64	d7, d7, d6
 800716a:	ed9f 5b2f 	vldr	d5, [pc, #188]	@ 8007228 <HAL_I2C_MemRxCpltCallback+0xc38>
 800716e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8007172:	4b3e      	ldr	r3, [pc, #248]	@ (800726c <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007174:	edd3 7a00 	vldr	s15, [r3]
 8007178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800717c:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8007230 <HAL_I2C_MemRxCpltCallback+0xc40>
 8007180:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007184:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007188:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800718c:	4b36      	ldr	r3, [pc, #216]	@ (8007268 <HAL_I2C_MemRxCpltCallback+0xc78>)
 800718e:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8007192:	4b35      	ldr	r3, [pc, #212]	@ (8007268 <HAL_I2C_MemRxCpltCallback+0xc78>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a35      	ldr	r2, [pc, #212]	@ (800726c <HAL_I2C_MemRxCpltCallback+0xc7c>)
 8007198:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 800719a:	4b35      	ldr	r3, [pc, #212]	@ (8007270 <HAL_I2C_MemRxCpltCallback+0xc80>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d113      	bne.n	80071ca <HAL_I2C_MemRxCpltCallback+0xbda>
		temperature = BMP180_GET_temp_IT();
 80071a2:	f7f9 faf5 	bl	8000790 <BMP180_GET_temp_IT>
 80071a6:	4603      	mov	r3, r0
 80071a8:	461a      	mov	r2, r3
 80071aa:	4b32      	ldr	r3, [pc, #200]	@ (8007274 <HAL_I2C_MemRxCpltCallback+0xc84>)
 80071ac:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 80071ae:	4b31      	ldr	r3, [pc, #196]	@ (8007274 <HAL_I2C_MemRxCpltCallback+0xc84>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7f9 fc0f 	bl	80009d8 <BMP180_GET_temp>
 80071ba:	eef0 7a40 	vmov.f32	s15, s0
 80071be:	4b2e      	ldr	r3, [pc, #184]	@ (8007278 <HAL_I2C_MemRxCpltCallback+0xc88>)
 80071c0:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 80071c4:	4b2a      	ldr	r3, [pc, #168]	@ (8007270 <HAL_I2C_MemRxCpltCallback+0xc80>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 80071ca:	4b29      	ldr	r3, [pc, #164]	@ (8007270 <HAL_I2C_MemRxCpltCallback+0xc80>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d113      	bne.n	80071fa <HAL_I2C_MemRxCpltCallback+0xc0a>
		pressure = BMP180_GET_pres_IT();
 80071d2:	f7f9 faf3 	bl	80007bc <BMP180_GET_pres_IT>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461a      	mov	r2, r3
 80071da:	4b28      	ldr	r3, [pc, #160]	@ (800727c <HAL_I2C_MemRxCpltCallback+0xc8c>)
 80071dc:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 80071de:	4b27      	ldr	r3, [pc, #156]	@ (800727c <HAL_I2C_MemRxCpltCallback+0xc8c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7f9 fc53 	bl	8000a90 <BMP180_GET_pres>
 80071ea:	eef0 7a40 	vmov.f32	s15, s0
 80071ee:	4b24      	ldr	r3, [pc, #144]	@ (8007280 <HAL_I2C_MemRxCpltCallback+0xc90>)
 80071f0:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 80071f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007270 <HAL_I2C_MemRxCpltCallback+0xc80>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	701a      	strb	r2, [r3, #0]
	}
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	f3af 8000 	nop.w
 8007208:	66666666 	.word	0x66666666
 800720c:	3fe66666 	.word	0x3fe66666
 8007210:	00000000 	.word	0x00000000
 8007214:	40c48200 	.word	0x40c48200
 8007218:	00000000 	.word	0x00000000
 800721c:	407f4000 	.word	0x407f4000
 8007220:	9999999a 	.word	0x9999999a
 8007224:	3fc99999 	.word	0x3fc99999
 8007228:	33333333 	.word	0x33333333
 800722c:	3ff33333 	.word	0x3ff33333
 8007230:	aaaaaaab 	.word	0xaaaaaaab
 8007234:	3feaaaaa 	.word	0x3feaaaaa
 8007238:	00004190 	.word	0x00004190
 800723c:	00000178 	.word	0x00000178
 8007240:	00004192 	.word	0x00004192
 8007244:	0000418c 	.word	0x0000418c
 8007248:	00004194 	.word	0x00004194
 800724c:	0000418e 	.word	0x0000418e
 8007250:	00004196 	.word	0x00004196
 8007254:	00004198 	.word	0x00004198
 8007258:	0000419a 	.word	0x0000419a
 800725c:	58021000 	.word	0x58021000
 8007260:	000041d5 	.word	0x000041d5
 8007264:	00000060 	.word	0x00000060
 8007268:	00000058 	.word	0x00000058
 800726c:	0000005c 	.word	0x0000005c
 8007270:	000041d6 	.word	0x000041d6
 8007274:	000000b8 	.word	0x000000b8
 8007278:	000000dc 	.word	0x000000dc
 800727c:	000000bc 	.word	0x000000bc
 8007280:	000000e0 	.word	0x000000e0

08007284 <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8007284:	b580      	push	{r7, lr}
 8007286:	ed2d 8b04 	vpush	{d8-d9}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4611      	mov	r1, r2
 8007294:	461a      	mov	r2, r3
 8007296:	460b      	mov	r3, r1
 8007298:	71fb      	strb	r3, [r7, #7]
 800729a:	4613      	mov	r3, r2
 800729c:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2200      	movs	r2, #0
 80072a2:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 80072a4:	79ba      	ldrb	r2, [r7, #6]
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	e02e      	b.n	8007310 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072b8:	ee07 3a90 	vmov	s15, r3
 80072bc:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80072c0:	79fa      	ldrb	r2, [r7, #7]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	4413      	add	r3, r2
 80072c6:	461a      	mov	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	ee07 3a90 	vmov	s15, r3
 80072e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80072e4:	eeb0 1b47 	vmov.f64	d1, d7
 80072e8:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80072ec:	f016 ff44 	bl	801e178 <pow>
 80072f0:	eeb0 7b40 	vmov.f64	d7, d0
 80072f4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80072f8:	ee38 7b07 	vadd.f64	d7, d8, d7
 80072fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007300:	ee17 3a90 	vmov	r3, s15
 8007304:	b21a      	sxth	r2, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	3301      	adds	r3, #1
 800730e:	617b      	str	r3, [r7, #20]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	429a      	cmp	r2, r3
 8007316:	dacc      	bge.n	80072b2 <convert_array_to_value+0x2e>
	}

}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	ecbd 8b04 	vpop	{d8-d9}
 8007324:	bd80      	pop	{r7, pc}

08007326 <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007326:	b590      	push	{r4, r7, lr}
 8007328:	b087      	sub	sp, #28
 800732a:	af00      	add	r7, sp, #0
 800732c:	6039      	str	r1, [r7, #0]
 800732e:	4611      	mov	r1, r2
 8007330:	461a      	mov	r2, r3
 8007332:	4603      	mov	r3, r0
 8007334:	80fb      	strh	r3, [r7, #6]
 8007336:	460b      	mov	r3, r1
 8007338:	717b      	strb	r3, [r7, #5]
 800733a:	4613      	mov	r3, r2
 800733c:	713b      	strb	r3, [r7, #4]
	int x = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007346:	793a      	ldrb	r2, [r7, #4]
 8007348:	797b      	ldrb	r3, [r7, #5]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	e03e      	b.n	80073d2 <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 8007354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d028      	beq.n	80073ae <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	4619      	mov	r1, r3
 8007364:	200a      	movs	r0, #10
 8007366:	f000 f83d 	bl	80073e4 <potenga>
 800736a:	4603      	mov	r3, r0
 800736c:	b29b      	uxth	r3, r3
 800736e:	88fa      	ldrh	r2, [r7, #6]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	b29b      	uxth	r3, r3
 8007374:	80fb      	strh	r3, [r7, #6]
			x++;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	3301      	adds	r3, #1
 800737a:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 800737c:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800738e:	eeb0 1b47 	vmov.f64	d1, d7
 8007392:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007396:	f016 feef 	bl	801e178 <pow>
 800739a:	eeb0 7b40 	vmov.f64	d7, d0
 800739e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80073a2:	ee17 3a90 	vmov	r3, s15
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	429c      	cmp	r4, r3
 80073aa:	dad3      	bge.n	8007354 <convert_value_to_array+0x2e>
 80073ac:	e000      	b.n	80073b0 <convert_value_to_array+0x8a>
				break;
 80073ae:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 80073b0:	797a      	ldrb	r2, [r7, #5]
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4413      	add	r3, r2
 80073b6:	461a      	mov	r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	4413      	add	r3, r2
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	3301      	adds	r3, #1
 80073c6:	613b      	str	r3, [r7, #16]
		x = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	dad0      	bge.n	800737c <convert_value_to_array+0x56>
	}
}
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd90      	pop	{r4, r7, pc}

080073e4 <potenga>:
uint32_t potenga(int a, int b){
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <potenga+0x18>
		return 1;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e02d      	b.n	8007458 <potenga+0x74>
	}
	if(b == 1){
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d101      	bne.n	8007406 <potenga+0x22>
		return a;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	e028      	b.n	8007458 <potenga+0x74>
	}
	if(b > 1){
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b01      	cmp	r3, #1
 800740a:	dd10      	ble.n	800742e <potenga+0x4a>
			for(int i = 1; i < b; i++){
 800740c:	2301      	movs	r3, #1
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	e007      	b.n	8007422 <potenga+0x3e>
			a = a*c;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	fb02 f303 	mul.w	r3, r2, r3
 800741a:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	3301      	adds	r3, #1
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	dbf3      	blt.n	8007412 <potenga+0x2e>
		}
		return a;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	e014      	b.n	8007458 <potenga+0x74>
	}
	if(b < 0){
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	da10      	bge.n	8007456 <potenga+0x72>
		for(int i = 0; i < b; i++){
 8007434:	2300      	movs	r3, #0
 8007436:	613b      	str	r3, [r7, #16]
 8007438:	e007      	b.n	800744a <potenga+0x66>
			a = a/c;
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007442:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	3301      	adds	r3, #1
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	429a      	cmp	r2, r3
 8007450:	dbf3      	blt.n	800743a <potenga+0x56>
		}
		return a;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	e000      	b.n	8007458 <potenga+0x74>
	}
	return a;
 8007456:	687b      	ldr	r3, [r7, #4]
}
 8007458:	4618      	mov	r0, r3
 800745a:	371c      	adds	r7, #28
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <WartoscBezwgledna>:
float WartoscBezwgledna(float a){
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	ed87 0a01 	vstr	s0, [r7, #4]
	a = (a < 0) ? a*(-1) : a;
 800746e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007472:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747a:	d504      	bpl.n	8007486 <WartoscBezwgledna+0x22>
 800747c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007480:	eef1 7a67 	vneg.f32	s15, s15
 8007484:	e001      	b.n	800748a <WartoscBezwgledna+0x26>
 8007486:	edd7 7a01 	vldr	s15, [r7, #4]
 800748a:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	ee07 3a90 	vmov	s15, r3
//		return a*(-1);
//	}
//	else{
//		return a;
//	}
}
 8007494:	eeb0 0a67 	vmov.f32	s0, s15
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
	...

080074a4 <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	71fb      	strb	r3, [r7, #7]
 80074ae:	460b      	mov	r3, r1
 80074b0:	71bb      	strb	r3, [r7, #6]
 80074b2:	4613      	mov	r3, r2
 80074b4:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 80074b6:	4b09      	ldr	r3, [pc, #36]	@ (80074dc <RGB_LED_Set_color+0x38>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	797a      	ldrb	r2, [r7, #5]
 80074bc:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 80074be:	4b07      	ldr	r3, [pc, #28]	@ (80074dc <RGB_LED_Set_color+0x38>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	79fa      	ldrb	r2, [r7, #7]
 80074c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 80074c6:	4b05      	ldr	r3, [pc, #20]	@ (80074dc <RGB_LED_Set_color+0x38>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	79ba      	ldrb	r2, [r7, #6]
 80074cc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	24000380 	.word	0x24000380

080074e0 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80074f8:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007548 <RGB_LED_For_BAT+0x68>
 80074fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007500:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8007550 <RGB_LED_For_BAT+0x70>
 8007504:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007508:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800750c:	edc7 7a00 	vstr	s15, [r7]
 8007510:	783b      	ldrb	r3, [r7, #0]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	79fa      	ldrb	r2, [r7, #7]
 8007516:	ee07 2a90 	vmov	s15, r2
 800751a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007522:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8007548 <RGB_LED_For_BAT+0x68>
 8007526:	ee27 7b06 	vmul.f64	d7, d7, d6
 800752a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800752e:	edc7 7a00 	vstr	s15, [r7]
 8007532:	783a      	ldrb	r2, [r7, #0]
 8007534:	b2d1      	uxtb	r1, r2
 8007536:	2200      	movs	r2, #0
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff ffb3 	bl	80074a4 <RGB_LED_Set_color>
}
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	66666666 	.word	0x66666666
 800754c:	40046666 	.word	0x40046666
 8007550:	00000000 	.word	0x00000000
 8007554:	406fe000 	.word	0x406fe000

08007558 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007558:	b590      	push	{r4, r7, lr}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6039      	str	r1, [r7, #0]
 8007560:	4611      	mov	r1, r2
 8007562:	461a      	mov	r2, r3
 8007564:	4603      	mov	r3, r0
 8007566:	80fb      	strh	r3, [r7, #6]
 8007568:	460b      	mov	r3, r1
 800756a:	717b      	strb	r3, [r7, #5]
 800756c:	4613      	mov	r3, r2
 800756e:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8007578:	793a      	ldrb	r2, [r7, #4]
 800757a:	797b      	ldrb	r3, [r7, #5]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8007580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007584:	2b00      	cmp	r3, #0
 8007586:	da04      	bge.n	8007592 <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8007588:	797b      	ldrb	r3, [r7, #5]
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	4413      	add	r3, r2
 800758e:	222d      	movs	r2, #45	@ 0x2d
 8007590:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 8007592:	2301      	movs	r3, #1
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	e035      	b.n	8007604 <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8007598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01d      	beq.n	80075dc <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	4619      	mov	r1, r3
 80075a8:	200a      	movs	r0, #10
 80075aa:	f7ff ff1b 	bl	80073e4 <potenga>
 80075ae:	4603      	mov	r3, r0
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	88fa      	ldrh	r2, [r7, #6]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	80fb      	strh	r3, [r7, #6]
			x++;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	3301      	adds	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 80075c0:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	4619      	mov	r1, r3
 80075cc:	200a      	movs	r0, #10
 80075ce:	f7ff ff09 	bl	80073e4 <potenga>
 80075d2:	4603      	mov	r3, r0
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	429c      	cmp	r4, r3
 80075d8:	dade      	bge.n	8007598 <convert_value_to_array2+0x40>
 80075da:	e000      	b.n	80075de <convert_value_to_array2+0x86>
				break;
 80075dc:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	7979      	ldrb	r1, [r7, #5]
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	440b      	add	r3, r1
 80075e8:	4619      	mov	r1, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	440b      	add	r3, r1
 80075ee:	3230      	adds	r2, #48	@ 0x30
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	3301      	adds	r3, #1
 80075f8:	613b      	str	r3, [r7, #16]
		x = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	429a      	cmp	r2, r3
 800760a:	dad9      	bge.n	80075c0 <convert_value_to_array2+0x68>
	}
}
 800760c:	bf00      	nop
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	bd90      	pop	{r4, r7, pc}

08007616 <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8007616:	b580      	push	{r7, lr}
 8007618:	ed2d 8b02 	vpush	{d8}
 800761c:	b08c      	sub	sp, #48	@ 0x30
 800761e:	af00      	add	r7, sp, #0
 8007620:	ed87 0a03 	vstr	s0, [r7, #12]
 8007624:	60b8      	str	r0, [r7, #8]
 8007626:	460b      	mov	r3, r1
 8007628:	71fb      	strb	r3, [r7, #7]
 800762a:	4613      	mov	r3, r2
 800762c:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 8007636:	79ba      	ldrb	r2, [r7, #6]
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 8007642:	edd7 7a03 	vldr	s15, [r7, #12]
 8007646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800764a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764e:	d50a      	bpl.n	8007666 <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 8007650:	79fb      	ldrb	r3, [r7, #7]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	4413      	add	r3, r2
 8007656:	222d      	movs	r2, #45	@ 0x2d
 8007658:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 800765a:	edd7 7a03 	vldr	s15, [r7, #12]
 800765e:	eef1 7a67 	vneg.f32	s15, s15
 8007662:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 8007666:	2301      	movs	r3, #1
 8007668:	61fb      	str	r3, [r7, #28]
 800766a:	e021      	b.n	80076b0 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800767a:	eeb0 1b47 	vmov.f64	d1, d7
 800767e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007682:	f016 fd79 	bl	801e178 <pow>
 8007686:	eeb0 7b40 	vmov.f64	d7, d0
 800768a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800768e:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 8007692:	ed97 7a03 	vldr	s14, [r7, #12]
 8007696:	edd7 7a04 	vldr	s15, [r7, #16]
 800769a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800769e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a2:	da0b      	bge.n	80076bc <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	3301      	adds	r3, #1
 80076a8:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	3301      	adds	r3, #1
 80076ae:	61fb      	str	r3, [r7, #28]
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	69fa      	ldr	r2, [r7, #28]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	dbd8      	blt.n	800766c <convert_value_to_array3+0x56>
 80076ba:	e000      	b.n	80076be <convert_value_to_array3+0xa8>
			break;
 80076bc:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	dc07      	bgt.n	80076de <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	3301      	adds	r3, #1
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	4413      	add	r3, r2
 80076d6:	222e      	movs	r2, #46	@ 0x2e
 80076d8:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 80076da:	2301      	movs	r3, #1
 80076dc:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 80076de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	dd0a      	ble.n	80076fa <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 80076e4:	79fa      	ldrb	r2, [r7, #7]
 80076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e8:	4413      	add	r3, r2
 80076ea:	3301      	adds	r3, #1
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	4413      	add	r3, r2
 80076f0:	222e      	movs	r2, #46	@ 0x2e
 80076f2:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	3301      	adds	r3, #1
 80076f8:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 80076fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80076fe:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	1e5a      	subs	r2, r3, #1
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	ee07 3a90 	vmov	s15, r3
 800770e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007712:	eeb0 1b47 	vmov.f64	d1, d7
 8007716:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800771a:	f016 fd2d 	bl	801e178 <pow>
 800771e:	eeb0 7b40 	vmov.f64	d7, d0
 8007722:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007726:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800772a:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 800772e:	2300      	movs	r3, #0
 8007730:	61bb      	str	r3, [r7, #24]
 8007732:	e05f      	b.n	80077f4 <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 8007734:	edd7 7a03 	vldr	s15, [r7, #12]
 8007738:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800773c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007740:	d93d      	bls.n	80077be <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 8007742:	edd7 7a03 	vldr	s15, [r7, #12]
 8007746:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	1e5a      	subs	r2, r3, #1
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800775a:	eeb0 1b47 	vmov.f64	d1, d7
 800775e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007762:	f016 fd09 	bl	801e178 <pow>
 8007766:	eeb0 7b40 	vmov.f64	d7, d0
 800776a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800776e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007772:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 8007776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007778:	3301      	adds	r3, #1
 800777a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	1e5a      	subs	r2, r3, #1
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800778c:	eeb0 1b47 	vmov.f64	d1, d7
 8007790:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8007794:	f016 fcf0 	bl	801e178 <pow>
 8007798:	eeb0 7b40 	vmov.f64	d7, d0
 800779c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80077a0:	ee17 3a90 	vmov	r3, s15
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80077b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ba:	dabb      	bge.n	8007734 <convert_value_to_array3+0x11e>
 80077bc:	e000      	b.n	80077c0 <convert_value_to_array3+0x1aa>
				break;
 80077be:	bf00      	nop
		}

        if(loopnum == kropka){
 80077c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d102      	bne.n	80077ce <convert_value_to_array3+0x1b8>
            loopnum++;
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	3301      	adds	r3, #1
 80077cc:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 80077ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	79f9      	ldrb	r1, [r7, #7]
 80077d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d6:	440b      	add	r3, r1
 80077d8:	4619      	mov	r1, r3
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	440b      	add	r3, r1
 80077de:	3230      	adds	r2, #48	@ 0x30
 80077e0:	b2d2      	uxtb	r2, r2
 80077e2:	701a      	strb	r2, [r3, #0]
		loopnum++;
 80077e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e6:	3301      	adds	r3, #1
 80077e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	3301      	adds	r3, #1
 80077f2:	61bb      	str	r3, [r7, #24]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	3b02      	subs	r3, #2
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	dbbe      	blt.n	800777c <convert_value_to_array3+0x166>
	}
}
 80077fe:	bf00      	nop
 8007800:	bf00      	nop
 8007802:	3730      	adds	r7, #48	@ 0x30
 8007804:	46bd      	mov	sp, r7
 8007806:	ecbd 8b02 	vpop	{d8}
 800780a:	bd80      	pop	{r7, pc}

0800780c <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 8007814:	4ba6      	ldr	r3, [pc, #664]	@ (8007ab0 <uSD_Card_SendData_To_Buffer+0x2a4>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	b218      	sxth	r0, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	01db      	lsls	r3, r3, #7
 8007820:	b2da      	uxtb	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	01db      	lsls	r3, r3, #7
 8007828:	b2db      	uxtb	r3, r3
 800782a:	3308      	adds	r3, #8
 800782c:	b2db      	uxtb	r3, r3
 800782e:	49a1      	ldr	r1, [pc, #644]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007830:	f7ff fe92 	bl	8007558 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	01db      	lsls	r3, r3, #7
 8007838:	3308      	adds	r3, #8
 800783a:	4a9e      	ldr	r2, [pc, #632]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800783c:	2120      	movs	r1, #32
 800783e:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 8007840:	4b9d      	ldr	r3, [pc, #628]	@ (8007ab8 <uSD_Card_SendData_To_Buffer+0x2ac>)
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b218      	sxth	r0, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	01db      	lsls	r3, r3, #7
 800784c:	b2db      	uxtb	r3, r3
 800784e:	3309      	adds	r3, #9
 8007850:	b2da      	uxtb	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	b2db      	uxtb	r3, r3
 8007856:	01db      	lsls	r3, r3, #7
 8007858:	b2db      	uxtb	r3, r3
 800785a:	330f      	adds	r3, #15
 800785c:	b2db      	uxtb	r3, r3
 800785e:	4995      	ldr	r1, [pc, #596]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007860:	f7ff fe7a 	bl	8007558 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	01db      	lsls	r3, r3, #7
 8007868:	330f      	adds	r3, #15
 800786a:	4a92      	ldr	r2, [pc, #584]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800786c:	2120      	movs	r1, #32
 800786e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 8007870:	4b92      	ldr	r3, [pc, #584]	@ (8007abc <uSD_Card_SendData_To_Buffer+0x2b0>)
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	b218      	sxth	r0, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	01db      	lsls	r3, r3, #7
 800787c:	b2db      	uxtb	r3, r3
 800787e:	3310      	adds	r3, #16
 8007880:	b2da      	uxtb	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	01db      	lsls	r3, r3, #7
 8007888:	b2db      	uxtb	r3, r3
 800788a:	3316      	adds	r3, #22
 800788c:	b2db      	uxtb	r3, r3
 800788e:	4989      	ldr	r1, [pc, #548]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007890:	f7ff fe62 	bl	8007558 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	01db      	lsls	r3, r3, #7
 8007898:	3316      	adds	r3, #22
 800789a:	4a86      	ldr	r2, [pc, #536]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800789c:	2120      	movs	r1, #32
 800789e:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 80078a0:	4b87      	ldr	r3, [pc, #540]	@ (8007ac0 <uSD_Card_SendData_To_Buffer+0x2b4>)
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	b218      	sxth	r0, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	01db      	lsls	r3, r3, #7
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	3317      	adds	r3, #23
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	01db      	lsls	r3, r3, #7
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	331d      	adds	r3, #29
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	497d      	ldr	r1, [pc, #500]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078c0:	f7ff fe4a 	bl	8007558 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	01db      	lsls	r3, r3, #7
 80078c8:	331d      	adds	r3, #29
 80078ca:	4a7a      	ldr	r2, [pc, #488]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078cc:	2120      	movs	r1, #32
 80078ce:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 80078d0:	4b7c      	ldr	r3, [pc, #496]	@ (8007ac4 <uSD_Card_SendData_To_Buffer+0x2b8>)
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	b218      	sxth	r0, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	01db      	lsls	r3, r3, #7
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	331e      	adds	r3, #30
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	01db      	lsls	r3, r3, #7
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	3324      	adds	r3, #36	@ 0x24
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	4971      	ldr	r1, [pc, #452]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078f0:	f7ff fe32 	bl	8007558 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	01db      	lsls	r3, r3, #7
 80078f8:	3324      	adds	r3, #36	@ 0x24
 80078fa:	4a6e      	ldr	r2, [pc, #440]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80078fc:	2120      	movs	r1, #32
 80078fe:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007900:	4b71      	ldr	r3, [pc, #452]	@ (8007ac8 <uSD_Card_SendData_To_Buffer+0x2bc>)
 8007902:	edd3 7a00 	vldr	s15, [r3]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	01db      	lsls	r3, r3, #7
 800790c:	b2db      	uxtb	r3, r3
 800790e:	3325      	adds	r3, #37	@ 0x25
 8007910:	b2d9      	uxtb	r1, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	01db      	lsls	r3, r3, #7
 8007918:	b2db      	uxtb	r3, r3
 800791a:	332d      	adds	r3, #45	@ 0x2d
 800791c:	b2db      	uxtb	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	4864      	ldr	r0, [pc, #400]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007922:	eeb0 0a67 	vmov.f32	s0, s15
 8007926:	f7ff fe76 	bl	8007616 <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	01db      	lsls	r3, r3, #7
 800792e:	332d      	adds	r3, #45	@ 0x2d
 8007930:	4a60      	ldr	r2, [pc, #384]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007932:	2120      	movs	r1, #32
 8007934:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 8007936:	4b65      	ldr	r3, [pc, #404]	@ (8007acc <uSD_Card_SendData_To_Buffer+0x2c0>)
 8007938:	edd3 7a00 	vldr	s15, [r3]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	01db      	lsls	r3, r3, #7
 8007942:	b2db      	uxtb	r3, r3
 8007944:	332e      	adds	r3, #46	@ 0x2e
 8007946:	b2d9      	uxtb	r1, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	01db      	lsls	r3, r3, #7
 800794e:	b2db      	uxtb	r3, r3
 8007950:	3336      	adds	r3, #54	@ 0x36
 8007952:	b2db      	uxtb	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	4857      	ldr	r0, [pc, #348]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007958:	eeb0 0a67 	vmov.f32	s0, s15
 800795c:	f7ff fe5b 	bl	8007616 <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	01db      	lsls	r3, r3, #7
 8007964:	3336      	adds	r3, #54	@ 0x36
 8007966:	4a53      	ldr	r2, [pc, #332]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007968:	2120      	movs	r1, #32
 800796a:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 800796c:	4b58      	ldr	r3, [pc, #352]	@ (8007ad0 <uSD_Card_SendData_To_Buffer+0x2c4>)
 800796e:	edd3 7a00 	vldr	s15, [r3]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	01db      	lsls	r3, r3, #7
 8007978:	b2db      	uxtb	r3, r3
 800797a:	3337      	adds	r3, #55	@ 0x37
 800797c:	b2d9      	uxtb	r1, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	01db      	lsls	r3, r3, #7
 8007984:	b2db      	uxtb	r3, r3
 8007986:	333f      	adds	r3, #63	@ 0x3f
 8007988:	b2db      	uxtb	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	4849      	ldr	r0, [pc, #292]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800798e:	eeb0 0a67 	vmov.f32	s0, s15
 8007992:	f7ff fe40 	bl	8007616 <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	01db      	lsls	r3, r3, #7
 800799a:	333f      	adds	r3, #63	@ 0x3f
 800799c:	4a45      	ldr	r2, [pc, #276]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 800799e:	2120      	movs	r1, #32
 80079a0:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 80079a2:	4b4c      	ldr	r3, [pc, #304]	@ (8007ad4 <uSD_Card_SendData_To_Buffer+0x2c8>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	b218      	sxth	r0, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	01db      	lsls	r3, r3, #7
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	3340      	adds	r3, #64	@ 0x40
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	01db      	lsls	r3, r3, #7
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	3348      	adds	r3, #72	@ 0x48
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	493c      	ldr	r1, [pc, #240]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079c2:	f7ff fdc9 	bl	8007558 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	01db      	lsls	r3, r3, #7
 80079ca:	3348      	adds	r3, #72	@ 0x48
 80079cc:	4a39      	ldr	r2, [pc, #228]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079ce:	2120      	movs	r1, #32
 80079d0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 80079d2:	4b41      	ldr	r3, [pc, #260]	@ (8007ad8 <uSD_Card_SendData_To_Buffer+0x2cc>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	b218      	sxth	r0, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	01db      	lsls	r3, r3, #7
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	3349      	adds	r3, #73	@ 0x49
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	01db      	lsls	r3, r3, #7
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	3351      	adds	r3, #81	@ 0x51
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	4930      	ldr	r1, [pc, #192]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079f2:	f7ff fdb1 	bl	8007558 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	01db      	lsls	r3, r3, #7
 80079fa:	3351      	adds	r3, #81	@ 0x51
 80079fc:	4a2d      	ldr	r2, [pc, #180]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 80079fe:	2120      	movs	r1, #32
 8007a00:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 8007a02:	4b36      	ldr	r3, [pc, #216]	@ (8007adc <uSD_Card_SendData_To_Buffer+0x2d0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	b218      	sxth	r0, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	01db      	lsls	r3, r3, #7
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	3352      	adds	r3, #82	@ 0x52
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	01db      	lsls	r3, r3, #7
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	335a      	adds	r3, #90	@ 0x5a
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	4924      	ldr	r1, [pc, #144]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a22:	f7ff fd99 	bl	8007558 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	01db      	lsls	r3, r3, #7
 8007a2a:	335a      	adds	r3, #90	@ 0x5a
 8007a2c:	4a21      	ldr	r2, [pc, #132]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a2e:	2120      	movs	r1, #32
 8007a30:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 8007a32:	4b2b      	ldr	r3, [pc, #172]	@ (8007ae0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007a34:	edd3 7a00 	vldr	s15, [r3]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	01db      	lsls	r3, r3, #7
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	335b      	adds	r3, #91	@ 0x5b
 8007a42:	b2d9      	uxtb	r1, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	01db      	lsls	r3, r3, #7
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	3362      	adds	r3, #98	@ 0x62
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	461a      	mov	r2, r3
 8007a52:	4818      	ldr	r0, [pc, #96]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a54:	eeb0 0a67 	vmov.f32	s0, s15
 8007a58:	f7ff fddd 	bl	8007616 <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	01db      	lsls	r3, r3, #7
 8007a60:	3362      	adds	r3, #98	@ 0x62
 8007a62:	4a14      	ldr	r2, [pc, #80]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a64:	2120      	movs	r1, #32
 8007a66:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 8007a68:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007a6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	01db      	lsls	r3, r3, #7
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	3363      	adds	r3, #99	@ 0x63
 8007a78:	b2d9      	uxtb	r1, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	01db      	lsls	r3, r3, #7
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	336a      	adds	r3, #106	@ 0x6a
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	461a      	mov	r2, r3
 8007a88:	480a      	ldr	r0, [pc, #40]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a8e:	f7ff fdc2 	bl	8007616 <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	01db      	lsls	r3, r3, #7
 8007a96:	336a      	adds	r3, #106	@ 0x6a
 8007a98:	4a06      	ldr	r2, [pc, #24]	@ (8007ab4 <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007a9a:	2120      	movs	r1, #32
 8007a9c:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007a9e:	4b10      	ldr	r3, [pc, #64]	@ (8007ae0 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007aa0:	edd3 7a02 	vldr	s15, [r3, #8]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	01db      	lsls	r3, r3, #7
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	336b      	adds	r3, #107	@ 0x6b
 8007aae:	e019      	b.n	8007ae4 <uSD_Card_SendData_To_Buffer+0x2d8>
 8007ab0:	000041c4 	.word	0x000041c4
 8007ab4:	24002f28 	.word	0x24002f28
 8007ab8:	0000418c 	.word	0x0000418c
 8007abc:	0000418e 	.word	0x0000418e
 8007ac0:	00004190 	.word	0x00004190
 8007ac4:	00004192 	.word	0x00004192
 8007ac8:	0000406c 	.word	0x0000406c
 8007acc:	00004068 	.word	0x00004068
 8007ad0:	00004070 	.word	0x00004070
 8007ad4:	0000409c 	.word	0x0000409c
 8007ad8:	000040a0 	.word	0x000040a0
 8007adc:	000040a4 	.word	0x000040a4
 8007ae0:	0000007c 	.word	0x0000007c
 8007ae4:	b2d9      	uxtb	r1, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	01db      	lsls	r3, r3, #7
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	3372      	adds	r3, #114	@ 0x72
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	461a      	mov	r2, r3
 8007af4:	482d      	ldr	r0, [pc, #180]	@ (8007bac <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007af6:	eeb0 0a67 	vmov.f32	s0, s15
 8007afa:	f7ff fd8c 	bl	8007616 <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	01db      	lsls	r3, r3, #7
 8007b02:	3372      	adds	r3, #114	@ 0x72
 8007b04:	4a29      	ldr	r2, [pc, #164]	@ (8007bac <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b06:	2120      	movs	r1, #32
 8007b08:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007b0a:	4b29      	ldr	r3, [pc, #164]	@ (8007bb0 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b218      	sxth	r0, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	01db      	lsls	r3, r3, #7
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	3373      	adds	r3, #115	@ 0x73
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	01db      	lsls	r3, r3, #7
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	3377      	adds	r3, #119	@ 0x77
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	4920      	ldr	r1, [pc, #128]	@ (8007bac <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b2a:	f7ff fd15 	bl	8007558 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	01db      	lsls	r3, r3, #7
 8007b32:	3377      	adds	r3, #119	@ 0x77
 8007b34:	4a1d      	ldr	r2, [pc, #116]	@ (8007bac <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b36:	2120      	movs	r1, #32
 8007b38:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 8007b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb0 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007b3c:	8a5b      	ldrh	r3, [r3, #18]
 8007b3e:	b218      	sxth	r0, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	01db      	lsls	r3, r3, #7
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	3378      	adds	r3, #120	@ 0x78
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	01db      	lsls	r3, r3, #7
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	337a      	adds	r3, #122	@ 0x7a
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	4914      	ldr	r1, [pc, #80]	@ (8007bac <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b5a:	f7ff fcfd 	bl	8007558 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	01db      	lsls	r3, r3, #7
 8007b62:	337a      	adds	r3, #122	@ 0x7a
 8007b64:	4a11      	ldr	r2, [pc, #68]	@ (8007bac <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b66:	2120      	movs	r1, #32
 8007b68:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 8007b6a:	4b12      	ldr	r3, [pc, #72]	@ (8007bb4 <uSD_Card_SendData_To_Buffer+0x3a8>)
 8007b6c:	edd3 7a00 	vldr	s15, [r3]
 8007b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b74:	ee17 3a90 	vmov	r3, s15
 8007b78:	b218      	sxth	r0, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	01db      	lsls	r3, r3, #7
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	337b      	adds	r3, #123	@ 0x7b
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	01db      	lsls	r3, r3, #7
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	337f      	adds	r3, #127	@ 0x7f
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	4906      	ldr	r1, [pc, #24]	@ (8007bac <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007b94:	f7ff fce0 	bl	8007558 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	01db      	lsls	r3, r3, #7
 8007b9e:	4a03      	ldr	r2, [pc, #12]	@ (8007bac <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007ba0:	210a      	movs	r1, #10
 8007ba2:	54d1      	strb	r1, [r2, r3]
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	24002f28 	.word	0x24002f28
 8007bb0:	00000178 	.word	0x00000178
 8007bb4:	00000058 	.word	0x00000058

08007bb8 <Stack_Push>:

void Stack_Push(float data){
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 8007bc2:	4b22      	ldr	r3, [pc, #136]	@ (8007c4c <Stack_Push+0x94>)
 8007bc4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007bc8:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007bcc:	3301      	adds	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8007c4c <Stack_Push+0x94>)
 8007bd2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007bd6:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007bda:	4b1c      	ldr	r3, [pc, #112]	@ (8007c4c <Stack_Push+0x94>)
 8007bdc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007be0:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007be4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007be8:	d105      	bne.n	8007bf6 <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007bea:	4b18      	ldr	r3, [pc, #96]	@ (8007c4c <Stack_Push+0x94>)
 8007bec:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 8007bf6:	4b15      	ldr	r3, [pc, #84]	@ (8007c4c <Stack_Push+0x94>)
 8007bf8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007bfc:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c00:	4a12      	ldr	r2, [pc, #72]	@ (8007c4c <Stack_Push+0x94>)
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007c0a:	4b10      	ldr	r3, [pc, #64]	@ (8007c4c <Stack_Push+0x94>)
 8007c0c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c10:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 8007c14:	3301      	adds	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	4b0c      	ldr	r3, [pc, #48]	@ (8007c4c <Stack_Push+0x94>)
 8007c1a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c1e:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 8007c22:	4b0a      	ldr	r3, [pc, #40]	@ (8007c4c <Stack_Push+0x94>)
 8007c24:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c28:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007c2c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007c30:	d105      	bne.n	8007c3e <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 8007c32:	4b06      	ldr	r3, [pc, #24]	@ (8007c4c <Stack_Push+0x94>)
 8007c34:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	0000019c 	.word	0x0000019c

08007c50 <ROOL_MAX_VAL>:

int16_t ROOL_MAX_VAL(void){
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 2;
 8007c54:	4b05      	ldr	r3, [pc, #20]	@ (8007c6c <ROOL_MAX_VAL+0x1c>)
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return 5000;
 8007c5c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	00000178 	.word	0x00000178

08007c70 <ROOL_MIN_VAL>:
int16_t ROOL_MIN_VAL(void){
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 1;
 8007c74:	4b04      	ldr	r3, [pc, #16]	@ (8007c88 <ROOL_MIN_VAL+0x18>)
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return -5000;
 8007c7c:	4b03      	ldr	r3, [pc, #12]	@ (8007c8c <ROOL_MIN_VAL+0x1c>)
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	00000178 	.word	0x00000178
 8007c8c:	ffffec78 	.word	0xffffec78

08007c90 <PITCH_MAX_VAL>:
int16_t PITCH_MAX_VAL(void){
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 2;
 8007c94:	4b05      	ldr	r3, [pc, #20]	@ (8007cac <PITCH_MAX_VAL+0x1c>)
 8007c96:	2202      	movs	r2, #2
 8007c98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return 5000;
 8007c9c:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	00000178 	.word	0x00000178

08007cb0 <PITCH_MIN_VAL>:
int16_t PITCH_MIN_VAL(void){
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 1;
 8007cb4:	4b04      	ldr	r3, [pc, #16]	@ (8007cc8 <PITCH_MIN_VAL+0x18>)
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return -5000;
 8007cbc:	4b03      	ldr	r3, [pc, #12]	@ (8007ccc <PITCH_MIN_VAL+0x1c>)
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	00000178 	.word	0x00000178
 8007ccc:	ffffec78 	.word	0xffffec78

08007cd0 <YAW_MAX_VAL>:
int16_t YAW_MAX_VAL(void){
 8007cd0:	b480      	push	{r7}
 8007cd2:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 2;
 8007cd4:	4b05      	ldr	r3, [pc, #20]	@ (8007cec <YAW_MAX_VAL+0x1c>)
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return 5000;
 8007cdc:	f241 3388 	movw	r3, #5000	@ 0x1388
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	00000178 	.word	0x00000178

08007cf0 <YAW_MIN_VAL>:
int16_t YAW_MIN_VAL(void){
 8007cf0:	b480      	push	{r7}
 8007cf2:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 1;
 8007cf4:	4b04      	ldr	r3, [pc, #16]	@ (8007d08 <YAW_MIN_VAL+0x18>)
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return -5000;
 8007cfc:	4b03      	ldr	r3, [pc, #12]	@ (8007d0c <YAW_MIN_VAL+0x1c>)
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	00000178 	.word	0x00000178
 8007d0c:	ffffec78 	.word	0xffffec78

08007d10 <ROOL_GOOD_VAL>:
int16_t ROOL_GOOD_VAL(void){
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
	MYDRON.ROOL_STA = 0;
 8007d14:	4b08      	ldr	r3, [pc, #32]	@ (8007d38 <ROOL_GOOD_VAL+0x28>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return pid_angular_rate_rool;
 8007d1c:	4b07      	ldr	r3, [pc, #28]	@ (8007d3c <ROOL_GOOD_VAL+0x2c>)
 8007d1e:	edd3 7a00 	vldr	s15, [r3]
 8007d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d26:	ee17 3a90 	vmov	r3, s15
 8007d2a:	b21b      	sxth	r3, r3
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	00000178 	.word	0x00000178
 8007d3c:	000040c8 	.word	0x000040c8

08007d40 <PITCH_GOOD_VAL>:
int16_t PITCH_GOOD_VAL(void){
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
	MYDRON.PITCH_STA = 0;
 8007d44:	4b08      	ldr	r3, [pc, #32]	@ (8007d68 <PITCH_GOOD_VAL+0x28>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return pid_angular_rate_pitch;
 8007d4c:	4b07      	ldr	r3, [pc, #28]	@ (8007d6c <PITCH_GOOD_VAL+0x2c>)
 8007d4e:	edd3 7a00 	vldr	s15, [r3]
 8007d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d56:	ee17 3a90 	vmov	r3, s15
 8007d5a:	b21b      	sxth	r3, r3
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	00000178 	.word	0x00000178
 8007d6c:	000040c0 	.word	0x000040c0

08007d70 <YAW_GOOD_VAL>:
int16_t YAW_GOOD_VAL(void){
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
	MYDRON.YAW_STA = 0;
 8007d74:	4b08      	ldr	r3, [pc, #32]	@ (8007d98 <YAW_GOOD_VAL+0x28>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	return pid_angular_rate_yaw;
 8007d7c:	4b07      	ldr	r3, [pc, #28]	@ (8007d9c <YAW_GOOD_VAL+0x2c>)
 8007d7e:	edd3 7a00 	vldr	s15, [r3]
 8007d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d86:	ee17 3a90 	vmov	r3, s15
 8007d8a:	b21b      	sxth	r3, r3
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	00000178 	.word	0x00000178
 8007d9c:	000040c4 	.word	0x000040c4

08007da0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007da6:	463b      	mov	r3, r7
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	605a      	str	r2, [r3, #4]
 8007dae:	609a      	str	r2, [r3, #8]
 8007db0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8007db2:	f003 fc3d 	bl	800b630 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007db6:	2301      	movs	r3, #1
 8007db8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007dc2:	231f      	movs	r3, #31
 8007dc4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007dc6:	2387      	movs	r3, #135	@ 0x87
 8007dc8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007de2:	463b      	mov	r3, r7
 8007de4:	4618      	mov	r0, r3
 8007de6:	f003 fc5b 	bl	800b6a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007dea:	2004      	movs	r0, #4
 8007dec:	f003 fc38 	bl	800b660 <HAL_MPU_Enable>

}
 8007df0:	bf00      	nop
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007dfc:	b672      	cpsid	i
}
 8007dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007e00:	bf00      	nop
 8007e02:	e7fd      	b.n	8007e00 <Error_Handler+0x8>

08007e04 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007e08:	4b27      	ldr	r3, [pc, #156]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e0a:	4a28      	ldr	r2, [pc, #160]	@ (8007eac <MX_SPI2_Init+0xa8>)
 8007e0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007e0e:	4b26      	ldr	r3, [pc, #152]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e10:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007e14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007e16:	4b24      	ldr	r3, [pc, #144]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007e1c:	4b22      	ldr	r3, [pc, #136]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e1e:	2207      	movs	r2, #7
 8007e20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e22:	4b21      	ldr	r3, [pc, #132]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007e28:	4b1f      	ldr	r3, [pc, #124]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e30:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007e34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e36:	4b1c      	ldr	r3, [pc, #112]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007e42:	4b19      	ldr	r3, [pc, #100]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e48:	4b17      	ldr	r3, [pc, #92]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007e4e:	4b16      	ldr	r3, [pc, #88]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007e54:	4b14      	ldr	r3, [pc, #80]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007e5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007e5c:	4b12      	ldr	r3, [pc, #72]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007e62:	4b11      	ldr	r3, [pc, #68]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007e68:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007e74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007e80:	4b09      	ldr	r3, [pc, #36]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007e86:	4b08      	ldr	r3, [pc, #32]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007e8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007e92:	4805      	ldr	r0, [pc, #20]	@ (8007ea8 <MX_SPI2_Init+0xa4>)
 8007e94:	f00c fc8e 	bl	80147b4 <HAL_SPI_Init>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8007e9e:	f7ff ffab 	bl	8007df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007ea2:	bf00      	nop
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	240001ec 	.word	0x240001ec
 8007eac:	40003800 	.word	0x40003800

08007eb0 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8007eb4:	4b27      	ldr	r3, [pc, #156]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007eb6:	4a28      	ldr	r2, [pc, #160]	@ (8007f58 <MX_SPI6_Init+0xa8>)
 8007eb8:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8007eba:	4b26      	ldr	r3, [pc, #152]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007ebc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007ec0:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8007ec2:	4b24      	ldr	r3, [pc, #144]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007ec8:	4b22      	ldr	r3, [pc, #136]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007eca:	2207      	movs	r2, #7
 8007ecc:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ece:	4b21      	ldr	r3, [pc, #132]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007eda:	4b1e      	ldr	r3, [pc, #120]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007edc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007ee0:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007eee:	4b19      	ldr	r3, [pc, #100]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ef4:	4b17      	ldr	r3, [pc, #92]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007efa:	4b16      	ldr	r3, [pc, #88]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007f00:	4b14      	ldr	r3, [pc, #80]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007f02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007f06:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007f08:	4b12      	ldr	r3, [pc, #72]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007f0e:	4b11      	ldr	r3, [pc, #68]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f14:	4b0f      	ldr	r3, [pc, #60]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007f20:	4b0c      	ldr	r3, [pc, #48]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007f26:	4b0b      	ldr	r3, [pc, #44]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007f2c:	4b09      	ldr	r3, [pc, #36]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007f32:	4b08      	ldr	r3, [pc, #32]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007f38:	4b06      	ldr	r3, [pc, #24]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8007f3e:	4805      	ldr	r0, [pc, #20]	@ (8007f54 <MX_SPI6_Init+0xa4>)
 8007f40:	f00c fc38 	bl	80147b4 <HAL_SPI_Init>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8007f4a:	f7ff ff55 	bl	8007df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8007f4e:	bf00      	nop
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	24000274 	.word	0x24000274
 8007f58:	58001400 	.word	0x58001400

08007f5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b0ba      	sub	sp, #232	@ 0xe8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	605a      	str	r2, [r3, #4]
 8007f6e:	609a      	str	r2, [r3, #8]
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007f74:	f107 0318 	add.w	r3, r7, #24
 8007f78:	22b8      	movs	r2, #184	@ 0xb8
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f016 f871 	bl	801e064 <memset>
  if(spiHandle->Instance==SPI2)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a77      	ldr	r2, [pc, #476]	@ (8008164 <HAL_SPI_MspInit+0x208>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	f040 8089 	bne.w	80080a0 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007f8e:	4b76      	ldr	r3, [pc, #472]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 8007f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f94:	4a74      	ldr	r2, [pc, #464]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 8007f96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007f9e:	4b72      	ldr	r3, [pc, #456]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 8007fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fac:	4b6e      	ldr	r3, [pc, #440]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 8007fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fb2:	4a6d      	ldr	r2, [pc, #436]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 8007fb4:	f043 0302 	orr.w	r3, r3, #2
 8007fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 8007fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	613b      	str	r3, [r7, #16]
 8007fc8:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007fca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007fce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007fe4:	2305      	movs	r3, #5
 8007fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007fee:	4619      	mov	r1, r3
 8007ff0:	485e      	ldr	r0, [pc, #376]	@ (800816c <HAL_SPI_MspInit+0x210>)
 8007ff2:	f006 f9e7 	bl	800e3c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007ff6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ffe:	2302      	movs	r3, #2
 8008000:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008004:	2301      	movs	r3, #1
 8008006:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800800a:	2301      	movs	r3, #1
 800800c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008010:	2305      	movs	r3, #5
 8008012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008016:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800801a:	4619      	mov	r1, r3
 800801c:	4853      	ldr	r0, [pc, #332]	@ (800816c <HAL_SPI_MspInit+0x210>)
 800801e:	f006 f9d1 	bl	800e3c4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 8008022:	4b53      	ldr	r3, [pc, #332]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 8008024:	4a53      	ldr	r2, [pc, #332]	@ (8008174 <HAL_SPI_MspInit+0x218>)
 8008026:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8008028:	4b51      	ldr	r3, [pc, #324]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 800802a:	2228      	movs	r2, #40	@ 0x28
 800802c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800802e:	4b50      	ldr	r3, [pc, #320]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 8008030:	2240      	movs	r2, #64	@ 0x40
 8008032:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008034:	4b4e      	ldr	r3, [pc, #312]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 8008036:	2200      	movs	r2, #0
 8008038:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800803a:	4b4d      	ldr	r3, [pc, #308]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 800803c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008040:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008042:	4b4b      	ldr	r3, [pc, #300]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 8008044:	2200      	movs	r2, #0
 8008046:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008048:	4b49      	ldr	r3, [pc, #292]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 800804a:	2200      	movs	r2, #0
 800804c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800804e:	4b48      	ldr	r3, [pc, #288]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 8008050:	2200      	movs	r2, #0
 8008052:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008054:	4b46      	ldr	r3, [pc, #280]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 8008056:	2200      	movs	r2, #0
 8008058:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800805a:	4b45      	ldr	r3, [pc, #276]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 800805c:	2204      	movs	r2, #4
 800805e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8008060:	4b43      	ldr	r3, [pc, #268]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 8008062:	2203      	movs	r2, #3
 8008064:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8008066:	4b42      	ldr	r3, [pc, #264]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 8008068:	2200      	movs	r2, #0
 800806a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800806c:	4b40      	ldr	r3, [pc, #256]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 800806e:	2200      	movs	r2, #0
 8008070:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8008072:	483f      	ldr	r0, [pc, #252]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 8008074:	f003 fb54 	bl	800b720 <HAL_DMA_Init>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 800807e:	f7ff febb 	bl	8007df8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a3a      	ldr	r2, [pc, #232]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 8008086:	679a      	str	r2, [r3, #120]	@ 0x78
 8008088:	4a39      	ldr	r2, [pc, #228]	@ (8008170 <HAL_SPI_MspInit+0x214>)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800808e:	2200      	movs	r2, #0
 8008090:	2100      	movs	r1, #0
 8008092:	2024      	movs	r0, #36	@ 0x24
 8008094:	f003 fa97 	bl	800b5c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008098:	2024      	movs	r0, #36	@ 0x24
 800809a:	f003 faae 	bl	800b5fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 800809e:	e05c      	b.n	800815a <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a34      	ldr	r2, [pc, #208]	@ (8008178 <HAL_SPI_MspInit+0x21c>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d157      	bne.n	800815a <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80080aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80080ae:	f04f 0300 	mov.w	r3, #0
 80080b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 80080b6:	2318      	movs	r3, #24
 80080b8:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 80080ba:	23c8      	movs	r3, #200	@ 0xc8
 80080bc:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 80080be:	2301      	movs	r3, #1
 80080c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 80080c2:	230a      	movs	r3, #10
 80080c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80080c6:	2302      	movs	r3, #2
 80080c8:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80080ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 80080d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80080dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80080e0:	f107 0318 	add.w	r3, r7, #24
 80080e4:	4618      	mov	r0, r3
 80080e6:	f009 ff7f 	bl	8011fe8 <HAL_RCCEx_PeriphCLKConfig>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <HAL_SPI_MspInit+0x198>
      Error_Handler();
 80080f0:	f7ff fe82 	bl	8007df8 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80080f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 80080f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 80080fc:	f043 0320 	orr.w	r3, r3, #32
 8008100:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008104:	4b18      	ldr	r3, [pc, #96]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 8008106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008112:	4b15      	ldr	r3, [pc, #84]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 8008114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008118:	4a13      	ldr	r2, [pc, #76]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 800811a:	f043 0302 	orr.w	r3, r3, #2
 800811e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008122:	4b11      	ldr	r3, [pc, #68]	@ (8008168 <HAL_SPI_MspInit+0x20c>)
 8008124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	60bb      	str	r3, [r7, #8]
 800812e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8008130:	2338      	movs	r3, #56	@ 0x38
 8008132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008136:	2302      	movs	r3, #2
 8008138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800813c:	2300      	movs	r3, #0
 800813e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008142:	2300      	movs	r3, #0
 8008144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8008148:	2308      	movs	r3, #8
 800814a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800814e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8008152:	4619      	mov	r1, r3
 8008154:	4805      	ldr	r0, [pc, #20]	@ (800816c <HAL_SPI_MspInit+0x210>)
 8008156:	f006 f935 	bl	800e3c4 <HAL_GPIO_Init>
}
 800815a:	bf00      	nop
 800815c:	37e8      	adds	r7, #232	@ 0xe8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	40003800 	.word	0x40003800
 8008168:	58024400 	.word	0x58024400
 800816c:	58020400 	.word	0x58020400
 8008170:	240002fc 	.word	0x240002fc
 8008174:	40020010 	.word	0x40020010
 8008178:	58001400 	.word	0x58001400

0800817c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008182:	4b0a      	ldr	r3, [pc, #40]	@ (80081ac <HAL_MspInit+0x30>)
 8008184:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008188:	4a08      	ldr	r2, [pc, #32]	@ (80081ac <HAL_MspInit+0x30>)
 800818a:	f043 0302 	orr.w	r3, r3, #2
 800818e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008192:	4b06      	ldr	r3, [pc, #24]	@ (80081ac <HAL_MspInit+0x30>)
 8008194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	607b      	str	r3, [r7, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	58024400 	.word	0x58024400

080081b0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 80081b0:	b480      	push	{r7}
 80081b2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80081b4:	4b0b      	ldr	r3, [pc, #44]	@ (80081e4 <SDTimer_Handler+0x34>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <SDTimer_Handler+0x16>
    Timer1--;
 80081bc:	4b09      	ldr	r3, [pc, #36]	@ (80081e4 <SDTimer_Handler+0x34>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	4a08      	ldr	r2, [pc, #32]	@ (80081e4 <SDTimer_Handler+0x34>)
 80081c4:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 80081c6:	4b08      	ldr	r3, [pc, #32]	@ (80081e8 <SDTimer_Handler+0x38>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d004      	beq.n	80081d8 <SDTimer_Handler+0x28>
    Timer2--;
 80081ce:	4b06      	ldr	r3, [pc, #24]	@ (80081e8 <SDTimer_Handler+0x38>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	4a04      	ldr	r2, [pc, #16]	@ (80081e8 <SDTimer_Handler+0x38>)
 80081d6:	6013      	str	r3, [r2, #0]
}
 80081d8:	bf00      	nop
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	24000378 	.word	0x24000378
 80081e8:	2400037c 	.word	0x2400037c
 80081ec:	00000000 	.word	0x00000000

080081f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 80081f6:	2200      	movs	r2, #0
 80081f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80081fc:	48bc      	ldr	r0, [pc, #752]	@ (80084f0 <NMI_Handler+0x300>)
 80081fe:	f006 faa1 	bl	800e744 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008202:	2200      	movs	r2, #0
 8008204:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008208:	48ba      	ldr	r0, [pc, #744]	@ (80084f4 <NMI_Handler+0x304>)
 800820a:	f006 fa9b 	bl	800e744 <HAL_GPIO_WritePin>
	LED_R_1;
 800820e:	2201      	movs	r2, #1
 8008210:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008214:	48b7      	ldr	r0, [pc, #732]	@ (80084f4 <NMI_Handler+0x304>)
 8008216:	f006 fa95 	bl	800e744 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 800821a:	48b7      	ldr	r0, [pc, #732]	@ (80084f8 <NMI_Handler+0x308>)
 800821c:	f015 fd2a 	bl	801dc74 <f_close>

	wanted_rool = 0;
 8008220:	4bb6      	ldr	r3, [pc, #728]	@ (80084fc <NMI_Handler+0x30c>)
 8008222:	f04f 0200 	mov.w	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008228:	4bb5      	ldr	r3, [pc, #724]	@ (8008500 <NMI_Handler+0x310>)
 800822a:	f04f 0200 	mov.w	r2, #0
 800822e:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008230:	4bb4      	ldr	r3, [pc, #720]	@ (8008504 <NMI_Handler+0x314>)
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008238:	4bb3      	ldr	r3, [pc, #716]	@ (8008508 <NMI_Handler+0x318>)
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b21a      	sxth	r2, r3
 800823e:	4bb3      	ldr	r3, [pc, #716]	@ (800850c <NMI_Handler+0x31c>)
 8008240:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 8008242:	2001      	movs	r0, #1
 8008244:	f001 f942 	bl	80094cc <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8008248:	4bb1      	ldr	r3, [pc, #708]	@ (8008510 <NMI_Handler+0x320>)
 800824a:	edd3 7a00 	vldr	s15, [r3]
 800824e:	4bb1      	ldr	r3, [pc, #708]	@ (8008514 <NMI_Handler+0x324>)
 8008250:	ed93 7a00 	vldr	s14, [r3]
 8008254:	4bb0      	ldr	r3, [pc, #704]	@ (8008518 <NMI_Handler+0x328>)
 8008256:	edd3 6a00 	vldr	s13, [r3]
 800825a:	4bb0      	ldr	r3, [pc, #704]	@ (800851c <NMI_Handler+0x32c>)
 800825c:	ed93 6a00 	vldr	s12, [r3]
 8008260:	4baf      	ldr	r3, [pc, #700]	@ (8008520 <NMI_Handler+0x330>)
 8008262:	edd3 5a00 	vldr	s11, [r3]
 8008266:	4baf      	ldr	r3, [pc, #700]	@ (8008524 <NMI_Handler+0x334>)
 8008268:	ed93 5a00 	vldr	s10, [r3]
 800826c:	4bae      	ldr	r3, [pc, #696]	@ (8008528 <NMI_Handler+0x338>)
 800826e:	edd3 4a00 	vldr	s9, [r3]
 8008272:	4bae      	ldr	r3, [pc, #696]	@ (800852c <NMI_Handler+0x33c>)
 8008274:	ed93 4a00 	vldr	s8, [r3]
 8008278:	4bad      	ldr	r3, [pc, #692]	@ (8008530 <NMI_Handler+0x340>)
 800827a:	9301      	str	r3, [sp, #4]
 800827c:	4bad      	ldr	r3, [pc, #692]	@ (8008534 <NMI_Handler+0x344>)
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	eef0 3a44 	vmov.f32	s7, s8
 8008284:	eeb0 3a64 	vmov.f32	s6, s9
 8008288:	eef0 2a45 	vmov.f32	s5, s10
 800828c:	eeb0 2a65 	vmov.f32	s4, s11
 8008290:	eef0 1a46 	vmov.f32	s3, s12
 8008294:	eeb0 1a66 	vmov.f32	s2, s13
 8008298:	eef0 0a47 	vmov.f32	s1, s14
 800829c:	eeb0 0a67 	vmov.f32	s0, s15
 80082a0:	4ba5      	ldr	r3, [pc, #660]	@ (8008538 <NMI_Handler+0x348>)
 80082a2:	4aa6      	ldr	r2, [pc, #664]	@ (800853c <NMI_Handler+0x34c>)
 80082a4:	49a6      	ldr	r1, [pc, #664]	@ (8008540 <NMI_Handler+0x350>)
 80082a6:	48a7      	ldr	r0, [pc, #668]	@ (8008544 <NMI_Handler+0x354>)
 80082a8:	f7f9 f99c 	bl	80015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 80082ac:	4ba5      	ldr	r3, [pc, #660]	@ (8008544 <NMI_Handler+0x354>)
 80082ae:	edd3 7a00 	vldr	s15, [r3]
 80082b2:	4ba3      	ldr	r3, [pc, #652]	@ (8008540 <NMI_Handler+0x350>)
 80082b4:	ed93 7a00 	vldr	s14, [r3]
 80082b8:	4ba0      	ldr	r3, [pc, #640]	@ (800853c <NMI_Handler+0x34c>)
 80082ba:	edd3 6a00 	vldr	s13, [r3]
 80082be:	49a2      	ldr	r1, [pc, #648]	@ (8008548 <NMI_Handler+0x358>)
 80082c0:	48a2      	ldr	r0, [pc, #648]	@ (800854c <NMI_Handler+0x35c>)
 80082c2:	eeb0 1a66 	vmov.f32	s2, s13
 80082c6:	eef0 0a47 	vmov.f32	s1, s14
 80082ca:	eeb0 0a67 	vmov.f32	s0, s15
 80082ce:	f7f9 f90b 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 80082d2:	4b9e      	ldr	r3, [pc, #632]	@ (800854c <NMI_Handler+0x35c>)
 80082d4:	edd3 7a00 	vldr	s15, [r3]
 80082d8:	4b9b      	ldr	r3, [pc, #620]	@ (8008548 <NMI_Handler+0x358>)
 80082da:	ed93 7a00 	vldr	s14, [r3]
 80082de:	4b9c      	ldr	r3, [pc, #624]	@ (8008550 <NMI_Handler+0x360>)
 80082e0:	edd3 6a00 	vldr	s13, [r3]
 80082e4:	4b94      	ldr	r3, [pc, #592]	@ (8008538 <NMI_Handler+0x348>)
 80082e6:	ed93 6a00 	vldr	s12, [r3]
 80082ea:	4b92      	ldr	r3, [pc, #584]	@ (8008534 <NMI_Handler+0x344>)
 80082ec:	edd3 5a00 	vldr	s11, [r3]
 80082f0:	4b8f      	ldr	r3, [pc, #572]	@ (8008530 <NMI_Handler+0x340>)
 80082f2:	ed93 5a00 	vldr	s10, [r3]
 80082f6:	eef0 2a45 	vmov.f32	s5, s10
 80082fa:	eeb0 2a65 	vmov.f32	s4, s11
 80082fe:	eef0 1a46 	vmov.f32	s3, s12
 8008302:	eeb0 1a66 	vmov.f32	s2, s13
 8008306:	eef0 0a47 	vmov.f32	s1, s14
 800830a:	eeb0 0a67 	vmov.f32	s0, s15
 800830e:	4891      	ldr	r0, [pc, #580]	@ (8008554 <NMI_Handler+0x364>)
 8008310:	f7f9 fae2 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 8008314:	4b8f      	ldr	r3, [pc, #572]	@ (8008554 <NMI_Handler+0x364>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a8f      	ldr	r2, [pc, #572]	@ (8008558 <NMI_Handler+0x368>)
 800831a:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 800831c:	4b8d      	ldr	r3, [pc, #564]	@ (8008554 <NMI_Handler+0x364>)
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	4a8e      	ldr	r2, [pc, #568]	@ (800855c <NMI_Handler+0x36c>)
 8008322:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 8008324:	4b8b      	ldr	r3, [pc, #556]	@ (8008554 <NMI_Handler+0x364>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	4a8d      	ldr	r2, [pc, #564]	@ (8008560 <NMI_Handler+0x370>)
 800832a:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 800832c:	4b73      	ldr	r3, [pc, #460]	@ (80084fc <NMI_Handler+0x30c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a8c      	ldr	r2, [pc, #560]	@ (8008564 <NMI_Handler+0x374>)
 8008332:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 8008334:	4b72      	ldr	r3, [pc, #456]	@ (8008500 <NMI_Handler+0x310>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a8b      	ldr	r2, [pc, #556]	@ (8008568 <NMI_Handler+0x378>)
 800833a:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 800833c:	4b71      	ldr	r3, [pc, #452]	@ (8008504 <NMI_Handler+0x314>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a8a      	ldr	r2, [pc, #552]	@ (800856c <NMI_Handler+0x37c>)
 8008342:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 8008344:	4b8a      	ldr	r3, [pc, #552]	@ (8008570 <NMI_Handler+0x380>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	ee07 3a90 	vmov	s15, r3
 800834c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008350:	4b6b      	ldr	r3, [pc, #428]	@ (8008500 <NMI_Handler+0x310>)
 8008352:	edd3 6a00 	vldr	s13, [r3]
 8008356:	4b80      	ldr	r3, [pc, #512]	@ (8008558 <NMI_Handler+0x368>)
 8008358:	edd3 7a00 	vldr	s15, [r3]
 800835c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008368:	ee17 2a90 	vmov	r2, s15
 800836c:	4b80      	ldr	r3, [pc, #512]	@ (8008570 <NMI_Handler+0x380>)
 800836e:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8008370:	4b80      	ldr	r3, [pc, #512]	@ (8008574 <NMI_Handler+0x384>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	ee07 3a90 	vmov	s15, r3
 8008378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800837c:	4b5f      	ldr	r3, [pc, #380]	@ (80084fc <NMI_Handler+0x30c>)
 800837e:	edd3 6a00 	vldr	s13, [r3]
 8008382:	4b76      	ldr	r3, [pc, #472]	@ (800855c <NMI_Handler+0x36c>)
 8008384:	edd3 7a00 	vldr	s15, [r3]
 8008388:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800838c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008394:	ee17 2a90 	vmov	r2, s15
 8008398:	4b76      	ldr	r3, [pc, #472]	@ (8008574 <NMI_Handler+0x384>)
 800839a:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 800839c:	4b76      	ldr	r3, [pc, #472]	@ (8008578 <NMI_Handler+0x388>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	ee07 3a90 	vmov	s15, r3
 80083a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083a8:	4b56      	ldr	r3, [pc, #344]	@ (8008504 <NMI_Handler+0x314>)
 80083aa:	edd3 6a00 	vldr	s13, [r3]
 80083ae:	4b6c      	ldr	r3, [pc, #432]	@ (8008560 <NMI_Handler+0x370>)
 80083b0:	edd3 7a00 	vldr	s15, [r3]
 80083b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80083b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083c0:	ee17 2a90 	vmov	r2, s15
 80083c4:	4b6c      	ldr	r3, [pc, #432]	@ (8008578 <NMI_Handler+0x388>)
 80083c6:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 80083c8:	4b6c      	ldr	r3, [pc, #432]	@ (800857c <NMI_Handler+0x38c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	ee07 3a90 	vmov	s15, r3
 80083d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008580 <NMI_Handler+0x390>)
 80083d6:	edd3 6a00 	vldr	s13, [r3]
 80083da:	4b57      	ldr	r3, [pc, #348]	@ (8008538 <NMI_Handler+0x348>)
 80083dc:	edd3 7a00 	vldr	s15, [r3]
 80083e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80083e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083ec:	ee17 2a90 	vmov	r2, s15
 80083f0:	4b62      	ldr	r3, [pc, #392]	@ (800857c <NMI_Handler+0x38c>)
 80083f2:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 80083f4:	4b63      	ldr	r3, [pc, #396]	@ (8008584 <NMI_Handler+0x394>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008400:	4b61      	ldr	r3, [pc, #388]	@ (8008588 <NMI_Handler+0x398>)
 8008402:	edd3 6a00 	vldr	s13, [r3]
 8008406:	4b4b      	ldr	r3, [pc, #300]	@ (8008534 <NMI_Handler+0x344>)
 8008408:	edd3 7a00 	vldr	s15, [r3]
 800840c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008418:	ee17 2a90 	vmov	r2, s15
 800841c:	4b59      	ldr	r3, [pc, #356]	@ (8008584 <NMI_Handler+0x394>)
 800841e:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 8008420:	4b5a      	ldr	r3, [pc, #360]	@ (800858c <NMI_Handler+0x39c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	ee07 3a90 	vmov	s15, r3
 8008428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800842c:	4b58      	ldr	r3, [pc, #352]	@ (8008590 <NMI_Handler+0x3a0>)
 800842e:	edd3 6a00 	vldr	s13, [r3]
 8008432:	4b3f      	ldr	r3, [pc, #252]	@ (8008530 <NMI_Handler+0x340>)
 8008434:	edd3 7a00 	vldr	s15, [r3]
 8008438:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800843c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008444:	ee17 2a90 	vmov	r2, s15
 8008448:	4b50      	ldr	r3, [pc, #320]	@ (800858c <NMI_Handler+0x39c>)
 800844a:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 800844c:	2201      	movs	r2, #1
 800844e:	4951      	ldr	r1, [pc, #324]	@ (8008594 <NMI_Handler+0x3a4>)
 8008450:	484b      	ldr	r0, [pc, #300]	@ (8008580 <NMI_Handler+0x390>)
 8008452:	f7fb fabb 	bl	80039cc <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8008456:	2202      	movs	r2, #2
 8008458:	494f      	ldr	r1, [pc, #316]	@ (8008598 <NMI_Handler+0x3a8>)
 800845a:	484b      	ldr	r0, [pc, #300]	@ (8008588 <NMI_Handler+0x398>)
 800845c:	f7fb fab6 	bl	80039cc <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8008460:	2204      	movs	r2, #4
 8008462:	494e      	ldr	r1, [pc, #312]	@ (800859c <NMI_Handler+0x3ac>)
 8008464:	484e      	ldr	r0, [pc, #312]	@ (80085a0 <NMI_Handler+0x3b0>)
 8008466:	f7fb fab1 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 800846a:	2205      	movs	r2, #5
 800846c:	494d      	ldr	r1, [pc, #308]	@ (80085a4 <NMI_Handler+0x3b4>)
 800846e:	484e      	ldr	r0, [pc, #312]	@ (80085a8 <NMI_Handler+0x3b8>)
 8008470:	f7fb faac 	bl	80039cc <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8008474:	2206      	movs	r2, #6
 8008476:	494d      	ldr	r1, [pc, #308]	@ (80085ac <NMI_Handler+0x3bc>)
 8008478:	484d      	ldr	r0, [pc, #308]	@ (80085b0 <NMI_Handler+0x3c0>)
 800847a:	f7fb faa7 	bl	80039cc <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 800847e:	4b20      	ldr	r3, [pc, #128]	@ (8008500 <NMI_Handler+0x310>)
 8008480:	ed93 7a00 	vldr	s14, [r3]
 8008484:	4b34      	ldr	r3, [pc, #208]	@ (8008558 <NMI_Handler+0x368>)
 8008486:	edd3 7a00 	vldr	s15, [r3]
 800848a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800848e:	4b49      	ldr	r3, [pc, #292]	@ (80085b4 <NMI_Handler+0x3c4>)
 8008490:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 8008494:	4b19      	ldr	r3, [pc, #100]	@ (80084fc <NMI_Handler+0x30c>)
 8008496:	ed93 7a00 	vldr	s14, [r3]
 800849a:	4b30      	ldr	r3, [pc, #192]	@ (800855c <NMI_Handler+0x36c>)
 800849c:	edd3 7a00 	vldr	s15, [r3]
 80084a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084a4:	4b44      	ldr	r3, [pc, #272]	@ (80085b8 <NMI_Handler+0x3c8>)
 80084a6:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 80084aa:	4b35      	ldr	r3, [pc, #212]	@ (8008580 <NMI_Handler+0x390>)
 80084ac:	ed93 7a00 	vldr	s14, [r3]
 80084b0:	4b21      	ldr	r3, [pc, #132]	@ (8008538 <NMI_Handler+0x348>)
 80084b2:	edd3 7a00 	vldr	s15, [r3]
 80084b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084ba:	4b40      	ldr	r3, [pc, #256]	@ (80085bc <NMI_Handler+0x3cc>)
 80084bc:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 80084c0:	4b31      	ldr	r3, [pc, #196]	@ (8008588 <NMI_Handler+0x398>)
 80084c2:	ed93 7a00 	vldr	s14, [r3]
 80084c6:	4b1b      	ldr	r3, [pc, #108]	@ (8008534 <NMI_Handler+0x344>)
 80084c8:	edd3 7a00 	vldr	s15, [r3]
 80084cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084d0:	4b3b      	ldr	r3, [pc, #236]	@ (80085c0 <NMI_Handler+0x3d0>)
 80084d2:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 80084d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008504 <NMI_Handler+0x314>)
 80084d8:	ed93 7a00 	vldr	s14, [r3]
 80084dc:	4b14      	ldr	r3, [pc, #80]	@ (8008530 <NMI_Handler+0x340>)
 80084de:	edd3 7a00 	vldr	s15, [r3]
 80084e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084e6:	4b37      	ldr	r3, [pc, #220]	@ (80085c4 <NMI_Handler+0x3d4>)
 80084e8:	edc3 7a00 	vstr	s15, [r3]
 80084ec:	e06c      	b.n	80085c8 <NMI_Handler+0x3d8>
 80084ee:	bf00      	nop
 80084f0:	58021000 	.word	0x58021000
 80084f4:	58020400 	.word	0x58020400
 80084f8:	24001ef0 	.word	0x24001ef0
 80084fc:	0000406c 	.word	0x0000406c
 8008500:	00004068 	.word	0x00004068
 8008504:	00004070 	.word	0x00004070
 8008508:	0801eb28 	.word	0x0801eb28
 800850c:	0000405c 	.word	0x0000405c
 8008510:	00000030 	.word	0x00000030
 8008514:	00000034 	.word	0x00000034
 8008518:	00000038 	.word	0x00000038
 800851c:	0000003c 	.word	0x0000003c
 8008520:	00000040 	.word	0x00000040
 8008524:	00000044 	.word	0x00000044
 8008528:	0801eb1c 	.word	0x0801eb1c
 800852c:	0801eb20 	.word	0x0801eb20
 8008530:	00000014 	.word	0x00000014
 8008534:	00000010 	.word	0x00000010
 8008538:	0000000c 	.word	0x0000000c
 800853c:	00000008 	.word	0x00000008
 8008540:	00000004 	.word	0x00000004
 8008544:	00000000 	.word	0x00000000
 8008548:	0000001c 	.word	0x0000001c
 800854c:	00000018 	.word	0x00000018
 8008550:	00000058 	.word	0x00000058
 8008554:	0000007c 	.word	0x0000007c
 8008558:	00004078 	.word	0x00004078
 800855c:	0000407c 	.word	0x0000407c
 8008560:	00004080 	.word	0x00004080
 8008564:	00004054 	.word	0x00004054
 8008568:	00004050 	.word	0x00004050
 800856c:	00004058 	.word	0x00004058
 8008570:	0000409c 	.word	0x0000409c
 8008574:	000040a0 	.word	0x000040a0
 8008578:	000040a4 	.word	0x000040a4
 800857c:	000040a8 	.word	0x000040a8
 8008580:	000040b4 	.word	0x000040b4
 8008584:	000040ac 	.word	0x000040ac
 8008588:	000040bc 	.word	0x000040bc
 800858c:	000040b0 	.word	0x000040b0
 8008590:	000040b8 	.word	0x000040b8
 8008594:	000040f0 	.word	0x000040f0
 8008598:	00004104 	.word	0x00004104
 800859c:	00004150 	.word	0x00004150
 80085a0:	000040c0 	.word	0x000040c0
 80085a4:	00004164 	.word	0x00004164
 80085a8:	000040c8 	.word	0x000040c8
 80085ac:	00004178 	.word	0x00004178
 80085b0:	000040c4 	.word	0x000040c4
 80085b4:	00004084 	.word	0x00004084
 80085b8:	00004088 	.word	0x00004088
 80085bc:	00004090 	.word	0x00004090
 80085c0:	00004094 	.word	0x00004094
 80085c4:	00004098 	.word	0x00004098


		MYDRON.ROOL = pid_angular_rate_rool;
 80085c8:	4b99      	ldr	r3, [pc, #612]	@ (8008830 <NMI_Handler+0x640>)
 80085ca:	edd3 7a00 	vldr	s15, [r3]
 80085ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085d2:	ee17 3a90 	vmov	r3, s15
 80085d6:	b21a      	sxth	r2, r3
 80085d8:	4b96      	ldr	r3, [pc, #600]	@ (8008834 <NMI_Handler+0x644>)
 80085da:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 80085dc:	4b96      	ldr	r3, [pc, #600]	@ (8008838 <NMI_Handler+0x648>)
 80085de:	edd3 7a00 	vldr	s15, [r3]
 80085e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085e6:	ee17 3a90 	vmov	r3, s15
 80085ea:	b21a      	sxth	r2, r3
 80085ec:	4b91      	ldr	r3, [pc, #580]	@ (8008834 <NMI_Handler+0x644>)
 80085ee:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 80085f0:	4b92      	ldr	r3, [pc, #584]	@ (800883c <NMI_Handler+0x64c>)
 80085f2:	edd3 7a00 	vldr	s15, [r3]
 80085f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085fa:	ee17 3a90 	vmov	r3, s15
 80085fe:	b21a      	sxth	r2, r3
 8008600:	4b8c      	ldr	r3, [pc, #560]	@ (8008834 <NMI_Handler+0x644>)
 8008602:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 8008604:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8008608:	f7fb f8aa 	bl	8003760 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 800860c:	4b89      	ldr	r3, [pc, #548]	@ (8008834 <NMI_Handler+0x644>)
 800860e:	885b      	ldrh	r3, [r3, #2]
 8008610:	461a      	mov	r2, r3
 8008612:	4b8b      	ldr	r3, [pc, #556]	@ (8008840 <NMI_Handler+0x650>)
 8008614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008618:	429a      	cmp	r2, r3
 800861a:	dd05      	ble.n	8008628 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 800861c:	4b88      	ldr	r3, [pc, #544]	@ (8008840 <NMI_Handler+0x650>)
 800861e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008622:	b29a      	uxth	r2, r3
 8008624:	4b83      	ldr	r3, [pc, #524]	@ (8008834 <NMI_Handler+0x644>)
 8008626:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 8008628:	4b82      	ldr	r3, [pc, #520]	@ (8008834 <NMI_Handler+0x644>)
 800862a:	885b      	ldrh	r3, [r3, #2]
 800862c:	ee07 3a90 	vmov	s15, r3
 8008630:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008634:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8008818 <NMI_Handler+0x628>
 8008638:	ee27 6b06 	vmul.f64	d6, d7, d6
 800863c:	4b7d      	ldr	r3, [pc, #500]	@ (8008834 <NMI_Handler+0x644>)
 800863e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800864a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800864e:	4b79      	ldr	r3, [pc, #484]	@ (8008834 <NMI_Handler+0x644>)
 8008650:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008654:	ee07 3a90 	vmov	s15, r3
 8008658:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800865c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008660:	4b74      	ldr	r3, [pc, #464]	@ (8008834 <NMI_Handler+0x644>)
 8008662:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800866e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008672:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008820 <NMI_Handler+0x630>
 8008676:	ee37 7b06 	vadd.f64	d7, d7, d6
 800867a:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008828 <NMI_Handler+0x638>
 800867e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008682:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008686:	ee17 3a90 	vmov	r3, s15
 800868a:	b29a      	uxth	r2, r3
 800868c:	4b6d      	ldr	r3, [pc, #436]	@ (8008844 <NMI_Handler+0x654>)
 800868e:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8008690:	4b68      	ldr	r3, [pc, #416]	@ (8008834 <NMI_Handler+0x644>)
 8008692:	885b      	ldrh	r3, [r3, #2]
 8008694:	ee07 3a90 	vmov	s15, r3
 8008698:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800869c:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8008818 <NMI_Handler+0x628>
 80086a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80086a4:	4b63      	ldr	r3, [pc, #396]	@ (8008834 <NMI_Handler+0x644>)
 80086a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80086aa:	ee07 3a90 	vmov	s15, r3
 80086ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086b2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80086b6:	4b5f      	ldr	r3, [pc, #380]	@ (8008834 <NMI_Handler+0x644>)
 80086b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80086bc:	ee07 3a90 	vmov	s15, r3
 80086c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80086c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008834 <NMI_Handler+0x644>)
 80086ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80086da:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008820 <NMI_Handler+0x630>
 80086de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80086e2:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008828 <NMI_Handler+0x638>
 80086e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80086ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80086ee:	ee17 3a90 	vmov	r3, s15
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	4b54      	ldr	r3, [pc, #336]	@ (8008848 <NMI_Handler+0x658>)
 80086f6:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80086f8:	4b4e      	ldr	r3, [pc, #312]	@ (8008834 <NMI_Handler+0x644>)
 80086fa:	885b      	ldrh	r3, [r3, #2]
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008704:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8008818 <NMI_Handler+0x628>
 8008708:	ee27 6b06 	vmul.f64	d6, d7, d6
 800870c:	4b49      	ldr	r3, [pc, #292]	@ (8008834 <NMI_Handler+0x644>)
 800870e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008712:	ee07 3a90 	vmov	s15, r3
 8008716:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800871a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800871e:	4b45      	ldr	r3, [pc, #276]	@ (8008834 <NMI_Handler+0x644>)
 8008720:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008724:	ee07 3a90 	vmov	s15, r3
 8008728:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800872c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008730:	4b40      	ldr	r3, [pc, #256]	@ (8008834 <NMI_Handler+0x644>)
 8008732:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800873e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008742:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008820 <NMI_Handler+0x630>
 8008746:	ee37 7b06 	vadd.f64	d7, d7, d6
 800874a:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008828 <NMI_Handler+0x638>
 800874e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008752:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8008756:	ee17 3a90 	vmov	r3, s15
 800875a:	b29a      	uxth	r2, r3
 800875c:	4b3b      	ldr	r3, [pc, #236]	@ (800884c <NMI_Handler+0x65c>)
 800875e:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8008760:	4b34      	ldr	r3, [pc, #208]	@ (8008834 <NMI_Handler+0x644>)
 8008762:	885b      	ldrh	r3, [r3, #2]
 8008764:	ee07 3a90 	vmov	s15, r3
 8008768:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800876c:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8008818 <NMI_Handler+0x628>
 8008770:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008774:	4b2f      	ldr	r3, [pc, #188]	@ (8008834 <NMI_Handler+0x644>)
 8008776:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008782:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008786:	4b2b      	ldr	r3, [pc, #172]	@ (8008834 <NMI_Handler+0x644>)
 8008788:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800878c:	ee07 3a90 	vmov	s15, r3
 8008790:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008794:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008798:	4b26      	ldr	r3, [pc, #152]	@ (8008834 <NMI_Handler+0x644>)
 800879a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800879e:	ee07 3a90 	vmov	s15, r3
 80087a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80087aa:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008820 <NMI_Handler+0x630>
 80087ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087b2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008828 <NMI_Handler+0x638>
 80087b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80087ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80087be:	ee17 3a90 	vmov	r3, s15
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	4b22      	ldr	r3, [pc, #136]	@ (8008850 <NMI_Handler+0x660>)
 80087c6:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 80087c8:	4b1e      	ldr	r3, [pc, #120]	@ (8008844 <NMI_Handler+0x654>)
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7f8 fb31 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 80087d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008848 <NMI_Handler+0x658>)
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7f8 fb4e 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 80087dc:	4b1b      	ldr	r3, [pc, #108]	@ (800884c <NMI_Handler+0x65c>)
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7f8 fb6b 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 80087e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008850 <NMI_Handler+0x660>)
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7f8 fb88 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 80087f0:	4b14      	ldr	r3, [pc, #80]	@ (8008844 <NMI_Handler+0x654>)
 80087f2:	881a      	ldrh	r2, [r3, #0]
 80087f4:	4b17      	ldr	r3, [pc, #92]	@ (8008854 <NMI_Handler+0x664>)
 80087f6:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 80087f8:	4b13      	ldr	r3, [pc, #76]	@ (8008848 <NMI_Handler+0x658>)
 80087fa:	881a      	ldrh	r2, [r3, #0]
 80087fc:	4b16      	ldr	r3, [pc, #88]	@ (8008858 <NMI_Handler+0x668>)
 80087fe:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 8008800:	4b12      	ldr	r3, [pc, #72]	@ (800884c <NMI_Handler+0x65c>)
 8008802:	881a      	ldrh	r2, [r3, #0]
 8008804:	4b15      	ldr	r3, [pc, #84]	@ (800885c <NMI_Handler+0x66c>)
 8008806:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 8008808:	4b11      	ldr	r3, [pc, #68]	@ (8008850 <NMI_Handler+0x660>)
 800880a:	881a      	ldrh	r2, [r3, #0]
 800880c:	4b14      	ldr	r3, [pc, #80]	@ (8008860 <NMI_Handler+0x670>)
 800880e:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 8008810:	e517      	b.n	8008242 <NMI_Handler+0x52>
 8008812:	bf00      	nop
 8008814:	f3af 8000 	nop.w
 8008818:	66666666 	.word	0x66666666
 800881c:	3fe66666 	.word	0x3fe66666
 8008820:	00000000 	.word	0x00000000
 8008824:	40c48200 	.word	0x40c48200
 8008828:	00000000 	.word	0x00000000
 800882c:	407f4000 	.word	0x407f4000
 8008830:	000040c8 	.word	0x000040c8
 8008834:	00000178 	.word	0x00000178
 8008838:	000040c0 	.word	0x000040c0
 800883c:	000040c4 	.word	0x000040c4
 8008840:	0000405e 	.word	0x0000405e
 8008844:	0000418c 	.word	0x0000418c
 8008848:	0000418e 	.word	0x0000418e
 800884c:	00004190 	.word	0x00004190
 8008850:	00004192 	.word	0x00004192
 8008854:	00004194 	.word	0x00004194
 8008858:	00004196 	.word	0x00004196
 800885c:	00004198 	.word	0x00004198
 8008860:	0000419a 	.word	0x0000419a

08008864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 8008868:	2201      	movs	r2, #1
 800886a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800886e:	4812      	ldr	r0, [pc, #72]	@ (80088b8 <HardFault_Handler+0x54>)
 8008870:	f005 ff68 	bl	800e744 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008874:	2200      	movs	r2, #0
 8008876:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800887a:	4810      	ldr	r0, [pc, #64]	@ (80088bc <HardFault_Handler+0x58>)
 800887c:	f005 ff62 	bl	800e744 <HAL_GPIO_WritePin>
	LED_R_1;
 8008880:	2201      	movs	r2, #1
 8008882:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008886:	480d      	ldr	r0, [pc, #52]	@ (80088bc <HardFault_Handler+0x58>)
 8008888:	f005 ff5c 	bl	800e744 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 800888c:	480c      	ldr	r0, [pc, #48]	@ (80088c0 <HardFault_Handler+0x5c>)
 800888e:	f015 f9f1 	bl	801dc74 <f_close>
	wanted_rool = 0;
 8008892:	4b0c      	ldr	r3, [pc, #48]	@ (80088c4 <HardFault_Handler+0x60>)
 8008894:	f04f 0200 	mov.w	r2, #0
 8008898:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800889a:	4b0b      	ldr	r3, [pc, #44]	@ (80088c8 <HardFault_Handler+0x64>)
 800889c:	f04f 0200 	mov.w	r2, #0
 80088a0:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80088a2:	4b0a      	ldr	r3, [pc, #40]	@ (80088cc <HardFault_Handler+0x68>)
 80088a4:	f04f 0200 	mov.w	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80088aa:	4b09      	ldr	r3, [pc, #36]	@ (80088d0 <HardFault_Handler+0x6c>)
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	b21a      	sxth	r2, r3
 80088b0:	4b08      	ldr	r3, [pc, #32]	@ (80088d4 <HardFault_Handler+0x70>)
 80088b2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088b4:	bf00      	nop
 80088b6:	e7fd      	b.n	80088b4 <HardFault_Handler+0x50>
 80088b8:	58021000 	.word	0x58021000
 80088bc:	58020400 	.word	0x58020400
 80088c0:	24001ef0 	.word	0x24001ef0
 80088c4:	0000406c 	.word	0x0000406c
 80088c8:	00004068 	.word	0x00004068
 80088cc:	00004070 	.word	0x00004070
 80088d0:	0801eb28 	.word	0x0801eb28
 80088d4:	0000405c 	.word	0x0000405c

080088d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 80088dc:	2200      	movs	r2, #0
 80088de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80088e2:	4812      	ldr	r0, [pc, #72]	@ (800892c <MemManage_Handler+0x54>)
 80088e4:	f005 ff2e 	bl	800e744 <HAL_GPIO_WritePin>
	LED_Y_0;
 80088e8:	2200      	movs	r2, #0
 80088ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80088ee:	4810      	ldr	r0, [pc, #64]	@ (8008930 <MemManage_Handler+0x58>)
 80088f0:	f005 ff28 	bl	800e744 <HAL_GPIO_WritePin>
	LED_R_1;
 80088f4:	2201      	movs	r2, #1
 80088f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80088fa:	480d      	ldr	r0, [pc, #52]	@ (8008930 <MemManage_Handler+0x58>)
 80088fc:	f005 ff22 	bl	800e744 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008900:	480c      	ldr	r0, [pc, #48]	@ (8008934 <MemManage_Handler+0x5c>)
 8008902:	f015 f9b7 	bl	801dc74 <f_close>
	wanted_rool = 0;
 8008906:	4b0c      	ldr	r3, [pc, #48]	@ (8008938 <MemManage_Handler+0x60>)
 8008908:	f04f 0200 	mov.w	r2, #0
 800890c:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800890e:	4b0b      	ldr	r3, [pc, #44]	@ (800893c <MemManage_Handler+0x64>)
 8008910:	f04f 0200 	mov.w	r2, #0
 8008914:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008916:	4b0a      	ldr	r3, [pc, #40]	@ (8008940 <MemManage_Handler+0x68>)
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800891e:	4b09      	ldr	r3, [pc, #36]	@ (8008944 <MemManage_Handler+0x6c>)
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	b21a      	sxth	r2, r3
 8008924:	4b08      	ldr	r3, [pc, #32]	@ (8008948 <MemManage_Handler+0x70>)
 8008926:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008928:	bf00      	nop
 800892a:	e7fd      	b.n	8008928 <MemManage_Handler+0x50>
 800892c:	58021000 	.word	0x58021000
 8008930:	58020400 	.word	0x58020400
 8008934:	24001ef0 	.word	0x24001ef0
 8008938:	0000406c 	.word	0x0000406c
 800893c:	00004068 	.word	0x00004068
 8008940:	00004070 	.word	0x00004070
 8008944:	0801eb28 	.word	0x0801eb28
 8008948:	0000405c 	.word	0x0000405c

0800894c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008950:	2201      	movs	r2, #1
 8008952:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008956:	4812      	ldr	r0, [pc, #72]	@ (80089a0 <BusFault_Handler+0x54>)
 8008958:	f005 fef4 	bl	800e744 <HAL_GPIO_WritePin>
	LED_Y_1;
 800895c:	2201      	movs	r2, #1
 800895e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008962:	4810      	ldr	r0, [pc, #64]	@ (80089a4 <BusFault_Handler+0x58>)
 8008964:	f005 feee 	bl	800e744 <HAL_GPIO_WritePin>
	LED_R_1;
 8008968:	2201      	movs	r2, #1
 800896a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800896e:	480d      	ldr	r0, [pc, #52]	@ (80089a4 <BusFault_Handler+0x58>)
 8008970:	f005 fee8 	bl	800e744 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008974:	480c      	ldr	r0, [pc, #48]	@ (80089a8 <BusFault_Handler+0x5c>)
 8008976:	f015 f97d 	bl	801dc74 <f_close>
	wanted_rool = 0;
 800897a:	4b0c      	ldr	r3, [pc, #48]	@ (80089ac <BusFault_Handler+0x60>)
 800897c:	f04f 0200 	mov.w	r2, #0
 8008980:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008982:	4b0b      	ldr	r3, [pc, #44]	@ (80089b0 <BusFault_Handler+0x64>)
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800898a:	4b0a      	ldr	r3, [pc, #40]	@ (80089b4 <BusFault_Handler+0x68>)
 800898c:	f04f 0200 	mov.w	r2, #0
 8008990:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008992:	4b09      	ldr	r3, [pc, #36]	@ (80089b8 <BusFault_Handler+0x6c>)
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b21a      	sxth	r2, r3
 8008998:	4b08      	ldr	r3, [pc, #32]	@ (80089bc <BusFault_Handler+0x70>)
 800899a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800899c:	bf00      	nop
 800899e:	e7fd      	b.n	800899c <BusFault_Handler+0x50>
 80089a0:	58021000 	.word	0x58021000
 80089a4:	58020400 	.word	0x58020400
 80089a8:	24001ef0 	.word	0x24001ef0
 80089ac:	0000406c 	.word	0x0000406c
 80089b0:	00004068 	.word	0x00004068
 80089b4:	00004070 	.word	0x00004070
 80089b8:	0801eb28 	.word	0x0801eb28
 80089bc:	0000405c 	.word	0x0000405c

080089c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 80089c4:	2200      	movs	r2, #0
 80089c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80089ca:	4812      	ldr	r0, [pc, #72]	@ (8008a14 <UsageFault_Handler+0x54>)
 80089cc:	f005 feba 	bl	800e744 <HAL_GPIO_WritePin>
	LED_Y_1;
 80089d0:	2201      	movs	r2, #1
 80089d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80089d6:	4810      	ldr	r0, [pc, #64]	@ (8008a18 <UsageFault_Handler+0x58>)
 80089d8:	f005 feb4 	bl	800e744 <HAL_GPIO_WritePin>
	LED_R_1;
 80089dc:	2201      	movs	r2, #1
 80089de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80089e2:	480d      	ldr	r0, [pc, #52]	@ (8008a18 <UsageFault_Handler+0x58>)
 80089e4:	f005 feae 	bl	800e744 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80089e8:	480c      	ldr	r0, [pc, #48]	@ (8008a1c <UsageFault_Handler+0x5c>)
 80089ea:	f015 f943 	bl	801dc74 <f_close>
	wanted_rool = 0;
 80089ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008a20 <UsageFault_Handler+0x60>)
 80089f0:	f04f 0200 	mov.w	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80089f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008a24 <UsageFault_Handler+0x64>)
 80089f8:	f04f 0200 	mov.w	r2, #0
 80089fc:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80089fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008a28 <UsageFault_Handler+0x68>)
 8008a00:	f04f 0200 	mov.w	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008a06:	4b09      	ldr	r3, [pc, #36]	@ (8008a2c <UsageFault_Handler+0x6c>)
 8008a08:	881b      	ldrh	r3, [r3, #0]
 8008a0a:	b21a      	sxth	r2, r3
 8008a0c:	4b08      	ldr	r3, [pc, #32]	@ (8008a30 <UsageFault_Handler+0x70>)
 8008a0e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a10:	bf00      	nop
 8008a12:	e7fd      	b.n	8008a10 <UsageFault_Handler+0x50>
 8008a14:	58021000 	.word	0x58021000
 8008a18:	58020400 	.word	0x58020400
 8008a1c:	24001ef0 	.word	0x24001ef0
 8008a20:	0000406c 	.word	0x0000406c
 8008a24:	00004068 	.word	0x00004068
 8008a28:	00004070 	.word	0x00004070
 8008a2c:	0801eb28 	.word	0x0801eb28
 8008a30:	0000405c 	.word	0x0000405c

08008a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a34:	b480      	push	{r7}
 8008a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a38:	bf00      	nop
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a42:	b480      	push	{r7}
 8008a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a46:	bf00      	nop
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a54:	bf00      	nop
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8008a64:	4b08      	ldr	r3, [pc, #32]	@ (8008a88 <SysTick_Handler+0x28>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	4a07      	ldr	r2, [pc, #28]	@ (8008a88 <SysTick_Handler+0x28>)
 8008a6c:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 8008a6e:	4b06      	ldr	r3, [pc, #24]	@ (8008a88 <SysTick_Handler+0x28>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b09      	cmp	r3, #9
 8008a74:	d904      	bls.n	8008a80 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 8008a76:	4b04      	ldr	r3, [pc, #16]	@ (8008a88 <SysTick_Handler+0x28>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 8008a7c:	f7ff fb98 	bl	80081b0 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008a80:	f000 fd04 	bl	800948c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008a84:	bf00      	nop
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	24000374 	.word	0x24000374

08008a8c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008a90:	4802      	ldr	r0, [pc, #8]	@ (8008a9c <DMA1_Stream0_IRQHandler+0x10>)
 8008a92:	f004 f96b 	bl	800cd6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008a96:	bf00      	nop
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	240002fc 	.word	0x240002fc

08008aa0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8008aa4:	4802      	ldr	r0, [pc, #8]	@ (8008ab0 <ADC_IRQHandler+0x10>)
 8008aa6:	f001 fb3f 	bl	800a128 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8008aaa:	bf00      	nop
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	240000ac 	.word	0x240000ac

08008ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008ab8:	4802      	ldr	r0, [pc, #8]	@ (8008ac4 <TIM2_IRQHandler+0x10>)
 8008aba:	f00d ff02 	bl	80168c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008abe:	bf00      	nop
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	240003cc 	.word	0x240003cc

08008ac8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008acc:	4802      	ldr	r0, [pc, #8]	@ (8008ad8 <SPI2_IRQHandler+0x10>)
 8008ace:	f00d f871 	bl	8015bb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008ad2:	bf00      	nop
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	240001ec 	.word	0x240001ec

08008adc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008ae0:	4802      	ldr	r0, [pc, #8]	@ (8008aec <USART1_IRQHandler+0x10>)
 8008ae2:	f00f fb45 	bl	8018170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008ae6:	bf00      	nop
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	240004b0 	.word	0x240004b0

08008af0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 8008af4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008af8:	f005 fe3d 	bl	800e776 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008afc:	bf00      	nop
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008b04:	4802      	ldr	r0, [pc, #8]	@ (8008b10 <DMA2_Stream0_IRQHandler+0x10>)
 8008b06:	f004 f931 	bl	800cd6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008b0a:	bf00      	nop
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	2400011c 	.word	0x2400011c

08008b14 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008b18:	4802      	ldr	r0, [pc, #8]	@ (8008b24 <I2C5_EV_IRQHandler+0x10>)
 8008b1a:	f006 fa21 	bl	800ef60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8008b1e:	bf00      	nop
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	24000198 	.word	0x24000198

08008b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008b2c:	4b32      	ldr	r3, [pc, #200]	@ (8008bf8 <SystemInit+0xd0>)
 8008b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b32:	4a31      	ldr	r2, [pc, #196]	@ (8008bf8 <SystemInit+0xd0>)
 8008b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8008bfc <SystemInit+0xd4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 030f 	and.w	r3, r3, #15
 8008b44:	2b06      	cmp	r3, #6
 8008b46:	d807      	bhi.n	8008b58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b48:	4b2c      	ldr	r3, [pc, #176]	@ (8008bfc <SystemInit+0xd4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f023 030f 	bic.w	r3, r3, #15
 8008b50:	4a2a      	ldr	r2, [pc, #168]	@ (8008bfc <SystemInit+0xd4>)
 8008b52:	f043 0307 	orr.w	r3, r3, #7
 8008b56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008b58:	4b29      	ldr	r3, [pc, #164]	@ (8008c00 <SystemInit+0xd8>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a28      	ldr	r2, [pc, #160]	@ (8008c00 <SystemInit+0xd8>)
 8008b5e:	f043 0301 	orr.w	r3, r3, #1
 8008b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b64:	4b26      	ldr	r3, [pc, #152]	@ (8008c00 <SystemInit+0xd8>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008b6a:	4b25      	ldr	r3, [pc, #148]	@ (8008c00 <SystemInit+0xd8>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	4924      	ldr	r1, [pc, #144]	@ (8008c00 <SystemInit+0xd8>)
 8008b70:	4b24      	ldr	r3, [pc, #144]	@ (8008c04 <SystemInit+0xdc>)
 8008b72:	4013      	ands	r3, r2
 8008b74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b76:	4b21      	ldr	r3, [pc, #132]	@ (8008bfc <SystemInit+0xd4>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0308 	and.w	r3, r3, #8
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d007      	beq.n	8008b92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b82:	4b1e      	ldr	r3, [pc, #120]	@ (8008bfc <SystemInit+0xd4>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f023 030f 	bic.w	r3, r3, #15
 8008b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008bfc <SystemInit+0xd4>)
 8008b8c:	f043 0307 	orr.w	r3, r3, #7
 8008b90:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008b92:	4b1b      	ldr	r3, [pc, #108]	@ (8008c00 <SystemInit+0xd8>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008b98:	4b19      	ldr	r3, [pc, #100]	@ (8008c00 <SystemInit+0xd8>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008b9e:	4b18      	ldr	r3, [pc, #96]	@ (8008c00 <SystemInit+0xd8>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008ba4:	4b16      	ldr	r3, [pc, #88]	@ (8008c00 <SystemInit+0xd8>)
 8008ba6:	4a18      	ldr	r2, [pc, #96]	@ (8008c08 <SystemInit+0xe0>)
 8008ba8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008baa:	4b15      	ldr	r3, [pc, #84]	@ (8008c00 <SystemInit+0xd8>)
 8008bac:	4a17      	ldr	r2, [pc, #92]	@ (8008c0c <SystemInit+0xe4>)
 8008bae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008bb0:	4b13      	ldr	r3, [pc, #76]	@ (8008c00 <SystemInit+0xd8>)
 8008bb2:	4a17      	ldr	r2, [pc, #92]	@ (8008c10 <SystemInit+0xe8>)
 8008bb4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008bb6:	4b12      	ldr	r3, [pc, #72]	@ (8008c00 <SystemInit+0xd8>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008bbc:	4b10      	ldr	r3, [pc, #64]	@ (8008c00 <SystemInit+0xd8>)
 8008bbe:	4a14      	ldr	r2, [pc, #80]	@ (8008c10 <SystemInit+0xe8>)
 8008bc0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8008c00 <SystemInit+0xd8>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8008c00 <SystemInit+0xd8>)
 8008bca:	4a11      	ldr	r2, [pc, #68]	@ (8008c10 <SystemInit+0xe8>)
 8008bcc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008bce:	4b0c      	ldr	r3, [pc, #48]	@ (8008c00 <SystemInit+0xd8>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c00 <SystemInit+0xd8>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a09      	ldr	r2, [pc, #36]	@ (8008c00 <SystemInit+0xd8>)
 8008bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008be0:	4b07      	ldr	r3, [pc, #28]	@ (8008c00 <SystemInit+0xd8>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008be6:	4b0b      	ldr	r3, [pc, #44]	@ (8008c14 <SystemInit+0xec>)
 8008be8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008bec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008bee:	bf00      	nop
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	e000ed00 	.word	0xe000ed00
 8008bfc:	52002000 	.word	0x52002000
 8008c00:	58024400 	.word	0x58024400
 8008c04:	eaf6ed7f 	.word	0xeaf6ed7f
 8008c08:	02020200 	.word	0x02020200
 8008c0c:	01ff0000 	.word	0x01ff0000
 8008c10:	01010280 	.word	0x01010280
 8008c14:	52004000 	.word	0x52004000

08008c18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b098      	sub	sp, #96	@ 0x60
 8008c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	605a      	str	r2, [r3, #4]
 8008c28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008c2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	605a      	str	r2, [r3, #4]
 8008c34:	609a      	str	r2, [r3, #8]
 8008c36:	60da      	str	r2, [r3, #12]
 8008c38:	611a      	str	r2, [r3, #16]
 8008c3a:	615a      	str	r2, [r3, #20]
 8008c3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008c3e:	1d3b      	adds	r3, r7, #4
 8008c40:	2234      	movs	r2, #52	@ 0x34
 8008c42:	2100      	movs	r1, #0
 8008c44:	4618      	mov	r0, r3
 8008c46:	f015 fa0d 	bl	801e064 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008c4a:	4b45      	ldr	r3, [pc, #276]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008c4c:	4a45      	ldr	r2, [pc, #276]	@ (8008d64 <MX_TIM1_Init+0x14c>)
 8008c4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008c50:	4b43      	ldr	r3, [pc, #268]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008c52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008c56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c58:	4b41      	ldr	r3, [pc, #260]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008c5e:	4b40      	ldr	r3, [pc, #256]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008c60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c66:	4b3e      	ldr	r3, [pc, #248]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008c72:	4b3b      	ldr	r3, [pc, #236]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008c74:	2280      	movs	r2, #128	@ 0x80
 8008c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008c78:	4839      	ldr	r0, [pc, #228]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008c7a:	f00d fc57 	bl	801652c <HAL_TIM_PWM_Init>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8008c84:	f7ff f8b8 	bl	8007df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008c94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4831      	ldr	r0, [pc, #196]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008c9c:	f00e ff64 	bl	8017b68 <HAL_TIMEx_MasterConfigSynchronization>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008ca6:	f7ff f8a7 	bl	8007df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008caa:	2360      	movs	r3, #96	@ 0x60
 8008cac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008cc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008cca:	2204      	movs	r2, #4
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4824      	ldr	r0, [pc, #144]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008cd0:	f00d ff9a 	bl	8016c08 <HAL_TIM_PWM_ConfigChannel>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008cda:	f7ff f88d 	bl	8007df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008cde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008ce2:	2208      	movs	r2, #8
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	481e      	ldr	r0, [pc, #120]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008ce8:	f00d ff8e 	bl	8016c08 <HAL_TIM_PWM_ConfigChannel>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8008cf2:	f7ff f881 	bl	8007df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008cf6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008cfa:	220c      	movs	r2, #12
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4818      	ldr	r0, [pc, #96]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008d00:	f00d ff82 	bl	8016c08 <HAL_TIM_PWM_ConfigChannel>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008d0a:	f7ff f875 	bl	8007df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008d26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008d30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008d3e:	1d3b      	adds	r3, r7, #4
 8008d40:	4619      	mov	r1, r3
 8008d42:	4807      	ldr	r0, [pc, #28]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008d44:	f00e ffac 	bl	8017ca0 <HAL_TIMEx_ConfigBreakDeadTime>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008d4e:	f7ff f853 	bl	8007df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008d52:	4803      	ldr	r0, [pc, #12]	@ (8008d60 <MX_TIM1_Init+0x148>)
 8008d54:	f000 f9da 	bl	800910c <HAL_TIM_MspPostInit>

}
 8008d58:	bf00      	nop
 8008d5a:	3760      	adds	r7, #96	@ 0x60
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	24000380 	.word	0x24000380
 8008d64:	40010000 	.word	0x40010000

08008d68 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d6e:	f107 0314 	add.w	r3, r7, #20
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	605a      	str	r2, [r3, #4]
 8008d78:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008d7a:	1d3b      	adds	r3, r7, #4
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	605a      	str	r2, [r3, #4]
 8008d82:	609a      	str	r2, [r3, #8]
 8008d84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008d86:	4b21      	ldr	r3, [pc, #132]	@ (8008e0c <MX_TIM2_Init+0xa4>)
 8008d88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008d8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8008d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8008e0c <MX_TIM2_Init+0xa4>)
 8008d90:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008d94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d96:	4b1d      	ldr	r3, [pc, #116]	@ (8008e0c <MX_TIM2_Init+0xa4>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8008e0c <MX_TIM2_Init+0xa4>)
 8008d9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008da2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008da4:	4b19      	ldr	r3, [pc, #100]	@ (8008e0c <MX_TIM2_Init+0xa4>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008daa:	4b18      	ldr	r3, [pc, #96]	@ (8008e0c <MX_TIM2_Init+0xa4>)
 8008dac:	2280      	movs	r2, #128	@ 0x80
 8008dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008db0:	4816      	ldr	r0, [pc, #88]	@ (8008e0c <MX_TIM2_Init+0xa4>)
 8008db2:	f00d fd2f 	bl	8016814 <HAL_TIM_IC_Init>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8008dbc:	f7ff f81c 	bl	8007df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008dc8:	f107 0314 	add.w	r3, r7, #20
 8008dcc:	4619      	mov	r1, r3
 8008dce:	480f      	ldr	r0, [pc, #60]	@ (8008e0c <MX_TIM2_Init+0xa4>)
 8008dd0:	f00e feca 	bl	8017b68 <HAL_TIMEx_MasterConfigSynchronization>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008dda:	f7ff f80d 	bl	8007df8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008dde:	2300      	movs	r3, #0
 8008de0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008de2:	2301      	movs	r3, #1
 8008de4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008dee:	1d3b      	adds	r3, r7, #4
 8008df0:	2200      	movs	r2, #0
 8008df2:	4619      	mov	r1, r3
 8008df4:	4805      	ldr	r0, [pc, #20]	@ (8008e0c <MX_TIM2_Init+0xa4>)
 8008df6:	f00d fe6b 	bl	8016ad0 <HAL_TIM_IC_ConfigChannel>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008e00:	f7fe fffa 	bl	8007df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008e04:	bf00      	nop
 8008e06:	3720      	adds	r7, #32
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	240003cc 	.word	0x240003cc

08008e10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08a      	sub	sp, #40	@ 0x28
 8008e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e16:	f107 031c 	add.w	r3, r7, #28
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	605a      	str	r2, [r3, #4]
 8008e20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e22:	463b      	mov	r3, r7
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	605a      	str	r2, [r3, #4]
 8008e2a:	609a      	str	r2, [r3, #8]
 8008e2c:	60da      	str	r2, [r3, #12]
 8008e2e:	611a      	str	r2, [r3, #16]
 8008e30:	615a      	str	r2, [r3, #20]
 8008e32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008e34:	4b32      	ldr	r3, [pc, #200]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008e36:	4a33      	ldr	r2, [pc, #204]	@ (8008f04 <MX_TIM3_Init+0xf4>)
 8008e38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008e3a:	4b31      	ldr	r3, [pc, #196]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008e3c:	221c      	movs	r2, #28
 8008e3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e40:	4b2f      	ldr	r3, [pc, #188]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8008e46:	4b2e      	ldr	r3, [pc, #184]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008e48:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008e4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e54:	4b2a      	ldr	r3, [pc, #168]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008e5a:	4829      	ldr	r0, [pc, #164]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008e5c:	f00d fb66 	bl	801652c <HAL_TIM_PWM_Init>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8008e66:	f7fe ffc7 	bl	8007df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008e72:	f107 031c 	add.w	r3, r7, #28
 8008e76:	4619      	mov	r1, r3
 8008e78:	4821      	ldr	r0, [pc, #132]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008e7a:	f00e fe75 	bl	8017b68 <HAL_TIMEx_MasterConfigSynchronization>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8008e84:	f7fe ffb8 	bl	8007df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e88:	2360      	movs	r3, #96	@ 0x60
 8008e8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e94:	2300      	movs	r3, #0
 8008e96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008e98:	463b      	mov	r3, r7
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4818      	ldr	r0, [pc, #96]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008ea0:	f00d feb2 	bl	8016c08 <HAL_TIM_PWM_ConfigChannel>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8008eaa:	f7fe ffa5 	bl	8007df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008eae:	463b      	mov	r3, r7
 8008eb0:	2204      	movs	r2, #4
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	4812      	ldr	r0, [pc, #72]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008eb6:	f00d fea7 	bl	8016c08 <HAL_TIM_PWM_ConfigChannel>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008ec0:	f7fe ff9a 	bl	8007df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008ec4:	463b      	mov	r3, r7
 8008ec6:	2208      	movs	r2, #8
 8008ec8:	4619      	mov	r1, r3
 8008eca:	480d      	ldr	r0, [pc, #52]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008ecc:	f00d fe9c 	bl	8016c08 <HAL_TIM_PWM_ConfigChannel>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8008ed6:	f7fe ff8f 	bl	8007df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008eda:	463b      	mov	r3, r7
 8008edc:	220c      	movs	r2, #12
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4807      	ldr	r0, [pc, #28]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008ee2:	f00d fe91 	bl	8016c08 <HAL_TIM_PWM_ConfigChannel>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008eec:	f7fe ff84 	bl	8007df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008ef0:	4803      	ldr	r0, [pc, #12]	@ (8008f00 <MX_TIM3_Init+0xf0>)
 8008ef2:	f000 f90b 	bl	800910c <HAL_TIM_MspPostInit>

}
 8008ef6:	bf00      	nop
 8008ef8:	3728      	adds	r7, #40	@ 0x28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	24000418 	.word	0x24000418
 8008f04:	40000400 	.word	0x40000400

08008f08 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008f0e:	f107 0310 	add.w	r3, r7, #16
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	605a      	str	r2, [r3, #4]
 8008f18:	609a      	str	r2, [r3, #8]
 8008f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f1c:	1d3b      	adds	r3, r7, #4
 8008f1e:	2200      	movs	r2, #0
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	605a      	str	r2, [r3, #4]
 8008f24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8008f26:	4b21      	ldr	r3, [pc, #132]	@ (8008fac <MX_TIM8_Init+0xa4>)
 8008f28:	4a21      	ldr	r2, [pc, #132]	@ (8008fb0 <MX_TIM8_Init+0xa8>)
 8008f2a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8008fac <MX_TIM8_Init+0xa4>)
 8008f2e:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 8008f32:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f34:	4b1d      	ldr	r3, [pc, #116]	@ (8008fac <MX_TIM8_Init+0xa4>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8008fac <MX_TIM8_Init+0xa4>)
 8008f3c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008f40:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f42:	4b1a      	ldr	r3, [pc, #104]	@ (8008fac <MX_TIM8_Init+0xa4>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008f48:	4b18      	ldr	r3, [pc, #96]	@ (8008fac <MX_TIM8_Init+0xa4>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f4e:	4b17      	ldr	r3, [pc, #92]	@ (8008fac <MX_TIM8_Init+0xa4>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008f54:	4815      	ldr	r0, [pc, #84]	@ (8008fac <MX_TIM8_Init+0xa4>)
 8008f56:	f00d f98e 	bl	8016276 <HAL_TIM_Base_Init>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8008f60:	f7fe ff4a 	bl	8007df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008f6a:	f107 0310 	add.w	r3, r7, #16
 8008f6e:	4619      	mov	r1, r3
 8008f70:	480e      	ldr	r0, [pc, #56]	@ (8008fac <MX_TIM8_Init+0xa4>)
 8008f72:	f00d ff5d 	bl	8016e30 <HAL_TIM_ConfigClockSource>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8008f7c:	f7fe ff3c 	bl	8007df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008f80:	2320      	movs	r3, #32
 8008f82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8008f84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008f88:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008f8e:	1d3b      	adds	r3, r7, #4
 8008f90:	4619      	mov	r1, r3
 8008f92:	4806      	ldr	r0, [pc, #24]	@ (8008fac <MX_TIM8_Init+0xa4>)
 8008f94:	f00e fde8 	bl	8017b68 <HAL_TIMEx_MasterConfigSynchronization>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8008f9e:	f7fe ff2b 	bl	8007df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8008fa2:	bf00      	nop
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	24000464 	.word	0x24000464
 8008fb0:	40010400 	.word	0x40010400

08008fb4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a16      	ldr	r2, [pc, #88]	@ (800901c <HAL_TIM_PWM_MspInit+0x68>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d10f      	bne.n	8008fe6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008fc6:	4b16      	ldr	r3, [pc, #88]	@ (8009020 <HAL_TIM_PWM_MspInit+0x6c>)
 8008fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fcc:	4a14      	ldr	r2, [pc, #80]	@ (8009020 <HAL_TIM_PWM_MspInit+0x6c>)
 8008fce:	f043 0301 	orr.w	r3, r3, #1
 8008fd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008fd6:	4b12      	ldr	r3, [pc, #72]	@ (8009020 <HAL_TIM_PWM_MspInit+0x6c>)
 8008fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008fe4:	e013      	b.n	800900e <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a0e      	ldr	r2, [pc, #56]	@ (8009024 <HAL_TIM_PWM_MspInit+0x70>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d10e      	bne.n	800900e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8009020 <HAL_TIM_PWM_MspInit+0x6c>)
 8008ff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8009020 <HAL_TIM_PWM_MspInit+0x6c>)
 8008ff8:	f043 0302 	orr.w	r3, r3, #2
 8008ffc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009000:	4b07      	ldr	r3, [pc, #28]	@ (8009020 <HAL_TIM_PWM_MspInit+0x6c>)
 8009002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	60bb      	str	r3, [r7, #8]
 800900c:	68bb      	ldr	r3, [r7, #8]
}
 800900e:	bf00      	nop
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	40010000 	.word	0x40010000
 8009020:	58024400 	.word	0x58024400
 8009024:	40000400 	.word	0x40000400

08009028 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b08a      	sub	sp, #40	@ 0x28
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009030:	f107 0314 	add.w	r3, r7, #20
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	605a      	str	r2, [r3, #4]
 800903a:	609a      	str	r2, [r3, #8]
 800903c:	60da      	str	r2, [r3, #12]
 800903e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009048:	d135      	bne.n	80090b6 <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800904a:	4b1d      	ldr	r3, [pc, #116]	@ (80090c0 <HAL_TIM_IC_MspInit+0x98>)
 800904c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009050:	4a1b      	ldr	r2, [pc, #108]	@ (80090c0 <HAL_TIM_IC_MspInit+0x98>)
 8009052:	f043 0301 	orr.w	r3, r3, #1
 8009056:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800905a:	4b19      	ldr	r3, [pc, #100]	@ (80090c0 <HAL_TIM_IC_MspInit+0x98>)
 800905c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	613b      	str	r3, [r7, #16]
 8009066:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009068:	4b15      	ldr	r3, [pc, #84]	@ (80090c0 <HAL_TIM_IC_MspInit+0x98>)
 800906a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800906e:	4a14      	ldr	r2, [pc, #80]	@ (80090c0 <HAL_TIM_IC_MspInit+0x98>)
 8009070:	f043 0301 	orr.w	r3, r3, #1
 8009074:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009078:	4b11      	ldr	r3, [pc, #68]	@ (80090c0 <HAL_TIM_IC_MspInit+0x98>)
 800907a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009086:	2301      	movs	r3, #1
 8009088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800908a:	2302      	movs	r3, #2
 800908c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800908e:	2300      	movs	r3, #0
 8009090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009092:	2300      	movs	r3, #0
 8009094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009096:	2301      	movs	r3, #1
 8009098:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800909a:	f107 0314 	add.w	r3, r7, #20
 800909e:	4619      	mov	r1, r3
 80090a0:	4808      	ldr	r0, [pc, #32]	@ (80090c4 <HAL_TIM_IC_MspInit+0x9c>)
 80090a2:	f005 f98f 	bl	800e3c4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80090a6:	2200      	movs	r2, #0
 80090a8:	2101      	movs	r1, #1
 80090aa:	201c      	movs	r0, #28
 80090ac:	f002 fa8b 	bl	800b5c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80090b0:	201c      	movs	r0, #28
 80090b2:	f002 faa2 	bl	800b5fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80090b6:	bf00      	nop
 80090b8:	3728      	adds	r7, #40	@ 0x28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	58024400 	.word	0x58024400
 80090c4:	58020000 	.word	0x58020000

080090c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a0b      	ldr	r2, [pc, #44]	@ (8009104 <HAL_TIM_Base_MspInit+0x3c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d10e      	bne.n	80090f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80090da:	4b0b      	ldr	r3, [pc, #44]	@ (8009108 <HAL_TIM_Base_MspInit+0x40>)
 80090dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090e0:	4a09      	ldr	r2, [pc, #36]	@ (8009108 <HAL_TIM_Base_MspInit+0x40>)
 80090e2:	f043 0302 	orr.w	r3, r3, #2
 80090e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80090ea:	4b07      	ldr	r3, [pc, #28]	@ (8009108 <HAL_TIM_Base_MspInit+0x40>)
 80090ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80090f8:	bf00      	nop
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	40010400 	.word	0x40010400
 8009108:	58024400 	.word	0x58024400

0800910c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08a      	sub	sp, #40	@ 0x28
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009114:	f107 0314 	add.w	r3, r7, #20
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	605a      	str	r2, [r3, #4]
 800911e:	609a      	str	r2, [r3, #8]
 8009120:	60da      	str	r2, [r3, #12]
 8009122:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a26      	ldr	r2, [pc, #152]	@ (80091c4 <HAL_TIM_MspPostInit+0xb8>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d120      	bne.n	8009170 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800912e:	4b26      	ldr	r3, [pc, #152]	@ (80091c8 <HAL_TIM_MspPostInit+0xbc>)
 8009130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009134:	4a24      	ldr	r2, [pc, #144]	@ (80091c8 <HAL_TIM_MspPostInit+0xbc>)
 8009136:	f043 0310 	orr.w	r3, r3, #16
 800913a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800913e:	4b22      	ldr	r3, [pc, #136]	@ (80091c8 <HAL_TIM_MspPostInit+0xbc>)
 8009140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	613b      	str	r3, [r7, #16]
 800914a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800914c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8009150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009152:	2302      	movs	r3, #2
 8009154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009156:	2300      	movs	r3, #0
 8009158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800915a:	2300      	movs	r3, #0
 800915c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800915e:	2301      	movs	r3, #1
 8009160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009162:	f107 0314 	add.w	r3, r7, #20
 8009166:	4619      	mov	r1, r3
 8009168:	4818      	ldr	r0, [pc, #96]	@ (80091cc <HAL_TIM_MspPostInit+0xc0>)
 800916a:	f005 f92b 	bl	800e3c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800916e:	e024      	b.n	80091ba <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a16      	ldr	r2, [pc, #88]	@ (80091d0 <HAL_TIM_MspPostInit+0xc4>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d11f      	bne.n	80091ba <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800917a:	4b13      	ldr	r3, [pc, #76]	@ (80091c8 <HAL_TIM_MspPostInit+0xbc>)
 800917c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009180:	4a11      	ldr	r2, [pc, #68]	@ (80091c8 <HAL_TIM_MspPostInit+0xbc>)
 8009182:	f043 0304 	orr.w	r3, r3, #4
 8009186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800918a:	4b0f      	ldr	r3, [pc, #60]	@ (80091c8 <HAL_TIM_MspPostInit+0xbc>)
 800918c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8009198:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800919c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800919e:	2302      	movs	r3, #2
 80091a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091a6:	2300      	movs	r3, #0
 80091a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80091aa:	2302      	movs	r3, #2
 80091ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091ae:	f107 0314 	add.w	r3, r7, #20
 80091b2:	4619      	mov	r1, r3
 80091b4:	4807      	ldr	r0, [pc, #28]	@ (80091d4 <HAL_TIM_MspPostInit+0xc8>)
 80091b6:	f005 f905 	bl	800e3c4 <HAL_GPIO_Init>
}
 80091ba:	bf00      	nop
 80091bc:	3728      	adds	r7, #40	@ 0x28
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	40010000 	.word	0x40010000
 80091c8:	58024400 	.word	0x58024400
 80091cc:	58021000 	.word	0x58021000
 80091d0:	40000400 	.word	0x40000400
 80091d4:	58020800 	.word	0x58020800

080091d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80091dc:	4b22      	ldr	r3, [pc, #136]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 80091de:	4a23      	ldr	r2, [pc, #140]	@ (800926c <MX_USART1_UART_Init+0x94>)
 80091e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80091e2:	4b21      	ldr	r3, [pc, #132]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 80091e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80091e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80091ea:	4b1f      	ldr	r3, [pc, #124]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80091f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80091f6:	4b1c      	ldr	r3, [pc, #112]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80091fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 80091fe:	220c      	movs	r2, #12
 8009200:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009202:	4b19      	ldr	r3, [pc, #100]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 8009204:	2200      	movs	r2, #0
 8009206:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009208:	4b17      	ldr	r3, [pc, #92]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 800920a:	2200      	movs	r2, #0
 800920c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800920e:	4b16      	ldr	r3, [pc, #88]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 8009210:	2200      	movs	r2, #0
 8009212:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009214:	4b14      	ldr	r3, [pc, #80]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 8009216:	2200      	movs	r2, #0
 8009218:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800921a:	4b13      	ldr	r3, [pc, #76]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 800921c:	2200      	movs	r2, #0
 800921e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009220:	4811      	ldr	r0, [pc, #68]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 8009222:	f00e fde7 	bl	8017df4 <HAL_UART_Init>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800922c:	f7fe fde4 	bl	8007df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009230:	2100      	movs	r1, #0
 8009232:	480d      	ldr	r0, [pc, #52]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 8009234:	f011 fc97 	bl	801ab66 <HAL_UARTEx_SetTxFifoThreshold>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800923e:	f7fe fddb 	bl	8007df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009242:	2100      	movs	r1, #0
 8009244:	4808      	ldr	r0, [pc, #32]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 8009246:	f011 fccc 	bl	801abe2 <HAL_UARTEx_SetRxFifoThreshold>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8009250:	f7fe fdd2 	bl	8007df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8009254:	4804      	ldr	r0, [pc, #16]	@ (8009268 <MX_USART1_UART_Init+0x90>)
 8009256:	f011 fc4d 	bl	801aaf4 <HAL_UARTEx_DisableFifoMode>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009260:	f7fe fdca 	bl	8007df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009264:	bf00      	nop
 8009266:	bd80      	pop	{r7, pc}
 8009268:	240004b0 	.word	0x240004b0
 800926c:	40011000 	.word	0x40011000

08009270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b0b8      	sub	sp, #224	@ 0xe0
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009278:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800927c:	2200      	movs	r2, #0
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	605a      	str	r2, [r3, #4]
 8009282:	609a      	str	r2, [r3, #8]
 8009284:	60da      	str	r2, [r3, #12]
 8009286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009288:	f107 0310 	add.w	r3, r7, #16
 800928c:	22b8      	movs	r2, #184	@ 0xb8
 800928e:	2100      	movs	r1, #0
 8009290:	4618      	mov	r0, r3
 8009292:	f014 fee7 	bl	801e064 <memset>
  if(uartHandle->Instance==USART1)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a2b      	ldr	r2, [pc, #172]	@ (8009348 <HAL_UART_MspInit+0xd8>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d14e      	bne.n	800933e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80092a0:	f04f 0201 	mov.w	r2, #1
 80092a4:	f04f 0300 	mov.w	r3, #0
 80092a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80092ac:	2300      	movs	r3, #0
 80092ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80092b2:	f107 0310 	add.w	r3, r7, #16
 80092b6:	4618      	mov	r0, r3
 80092b8:	f008 fe96 	bl	8011fe8 <HAL_RCCEx_PeriphCLKConfig>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80092c2:	f7fe fd99 	bl	8007df8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80092c6:	4b21      	ldr	r3, [pc, #132]	@ (800934c <HAL_UART_MspInit+0xdc>)
 80092c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092cc:	4a1f      	ldr	r2, [pc, #124]	@ (800934c <HAL_UART_MspInit+0xdc>)
 80092ce:	f043 0310 	orr.w	r3, r3, #16
 80092d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80092d6:	4b1d      	ldr	r3, [pc, #116]	@ (800934c <HAL_UART_MspInit+0xdc>)
 80092d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092dc:	f003 0310 	and.w	r3, r3, #16
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092e4:	4b19      	ldr	r3, [pc, #100]	@ (800934c <HAL_UART_MspInit+0xdc>)
 80092e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092ea:	4a18      	ldr	r2, [pc, #96]	@ (800934c <HAL_UART_MspInit+0xdc>)
 80092ec:	f043 0301 	orr.w	r3, r3, #1
 80092f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80092f4:	4b15      	ldr	r3, [pc, #84]	@ (800934c <HAL_UART_MspInit+0xdc>)
 80092f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	60bb      	str	r3, [r7, #8]
 8009300:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009302:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009306:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800930a:	2302      	movs	r3, #2
 800930c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009310:	2300      	movs	r3, #0
 8009312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009316:	2300      	movs	r3, #0
 8009318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800931c:	2307      	movs	r3, #7
 800931e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009322:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8009326:	4619      	mov	r1, r3
 8009328:	4809      	ldr	r0, [pc, #36]	@ (8009350 <HAL_UART_MspInit+0xe0>)
 800932a:	f005 f84b 	bl	800e3c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800932e:	2200      	movs	r2, #0
 8009330:	2100      	movs	r1, #0
 8009332:	2025      	movs	r0, #37	@ 0x25
 8009334:	f002 f947 	bl	800b5c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009338:	2025      	movs	r0, #37	@ 0x25
 800933a:	f002 f95e 	bl	800b5fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800933e:	bf00      	nop
 8009340:	37e0      	adds	r7, #224	@ 0xe0
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	40011000 	.word	0x40011000
 800934c:	58024400 	.word	0x58024400
 8009350:	58020000 	.word	0x58020000

08009354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8009354:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800938c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8009358:	f7ff fbe6 	bl	8008b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800935c:	480c      	ldr	r0, [pc, #48]	@ (8009390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800935e:	490d      	ldr	r1, [pc, #52]	@ (8009394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009360:	4a0d      	ldr	r2, [pc, #52]	@ (8009398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009364:	e002      	b.n	800936c <LoopCopyDataInit>

08009366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800936a:	3304      	adds	r3, #4

0800936c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800936c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800936e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009370:	d3f9      	bcc.n	8009366 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009372:	4a0a      	ldr	r2, [pc, #40]	@ (800939c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009374:	4c0a      	ldr	r4, [pc, #40]	@ (80093a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009378:	e001      	b.n	800937e <LoopFillZerobss>

0800937a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800937a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800937c:	3204      	adds	r2, #4

0800937e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800937e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009380:	d3fb      	bcc.n	800937a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009382:	f014 fe7d 	bl	801e080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009386:	f7fb fde9 	bl	8004f5c <main>
  bx  lr
 800938a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800938c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8009390:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8009394:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8009398:	080208e8 	.word	0x080208e8
  ldr r2, =_sbss
 800939c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80093a0:	240008ac 	.word	0x240008ac

080093a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80093a4:	e7fe      	b.n	80093a4 <ADC3_IRQHandler>
	...

080093a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80093ae:	2003      	movs	r0, #3
 80093b0:	f002 f8fe 	bl	800b5b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093b4:	f008 fc42 	bl	8011c3c <HAL_RCC_GetSysClockFreq>
 80093b8:	4602      	mov	r2, r0
 80093ba:	4b15      	ldr	r3, [pc, #84]	@ (8009410 <HAL_Init+0x68>)
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	0a1b      	lsrs	r3, r3, #8
 80093c0:	f003 030f 	and.w	r3, r3, #15
 80093c4:	4913      	ldr	r1, [pc, #76]	@ (8009414 <HAL_Init+0x6c>)
 80093c6:	5ccb      	ldrb	r3, [r1, r3]
 80093c8:	f003 031f 	and.w	r3, r3, #31
 80093cc:	fa22 f303 	lsr.w	r3, r2, r3
 80093d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009410 <HAL_Init+0x68>)
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	f003 030f 	and.w	r3, r3, #15
 80093da:	4a0e      	ldr	r2, [pc, #56]	@ (8009414 <HAL_Init+0x6c>)
 80093dc:	5cd3      	ldrb	r3, [r2, r3]
 80093de:	f003 031f 	and.w	r3, r3, #31
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	fa22 f303 	lsr.w	r3, r2, r3
 80093e8:	4a0b      	ldr	r2, [pc, #44]	@ (8009418 <HAL_Init+0x70>)
 80093ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093ec:	4a0b      	ldr	r2, [pc, #44]	@ (800941c <HAL_Init+0x74>)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80093f2:	200f      	movs	r0, #15
 80093f4:	f000 f814 	bl	8009420 <HAL_InitTick>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e002      	b.n	8009408 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009402:	f7fe febb 	bl	800817c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	58024400 	.word	0x58024400
 8009414:	0801eb2c 	.word	0x0801eb2c
 8009418:	24000008 	.word	0x24000008
 800941c:	24000004 	.word	0x24000004

08009420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8009428:	4b15      	ldr	r3, [pc, #84]	@ (8009480 <HAL_InitTick+0x60>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d101      	bne.n	8009434 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e021      	b.n	8009478 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8009434:	4b13      	ldr	r3, [pc, #76]	@ (8009484 <HAL_InitTick+0x64>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	4b11      	ldr	r3, [pc, #68]	@ (8009480 <HAL_InitTick+0x60>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	4619      	mov	r1, r3
 800943e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009442:	fbb3 f3f1 	udiv	r3, r3, r1
 8009446:	fbb2 f3f3 	udiv	r3, r2, r3
 800944a:	4618      	mov	r0, r3
 800944c:	f002 f8e3 	bl	800b616 <HAL_SYSTICK_Config>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e00e      	b.n	8009478 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b0f      	cmp	r3, #15
 800945e:	d80a      	bhi.n	8009476 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009460:	2200      	movs	r2, #0
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	f04f 30ff 	mov.w	r0, #4294967295
 8009468:	f002 f8ad 	bl	800b5c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800946c:	4a06      	ldr	r2, [pc, #24]	@ (8009488 <HAL_InitTick+0x68>)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	e000      	b.n	8009478 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	24000010 	.word	0x24000010
 8009484:	24000004 	.word	0x24000004
 8009488:	2400000c 	.word	0x2400000c

0800948c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800948c:	b480      	push	{r7}
 800948e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009490:	4b06      	ldr	r3, [pc, #24]	@ (80094ac <HAL_IncTick+0x20>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	461a      	mov	r2, r3
 8009496:	4b06      	ldr	r3, [pc, #24]	@ (80094b0 <HAL_IncTick+0x24>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4413      	add	r3, r2
 800949c:	4a04      	ldr	r2, [pc, #16]	@ (80094b0 <HAL_IncTick+0x24>)
 800949e:	6013      	str	r3, [r2, #0]
}
 80094a0:	bf00      	nop
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	24000010 	.word	0x24000010
 80094b0:	24000544 	.word	0x24000544

080094b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
  return uwTick;
 80094b8:	4b03      	ldr	r3, [pc, #12]	@ (80094c8 <HAL_GetTick+0x14>)
 80094ba:	681b      	ldr	r3, [r3, #0]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	24000544 	.word	0x24000544

080094cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80094d4:	f7ff ffee 	bl	80094b4 <HAL_GetTick>
 80094d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d005      	beq.n	80094f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80094e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009510 <HAL_Delay+0x44>)
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80094f2:	bf00      	nop
 80094f4:	f7ff ffde 	bl	80094b4 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	429a      	cmp	r2, r3
 8009502:	d8f7      	bhi.n	80094f4 <HAL_Delay+0x28>
  {
  }
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	24000010 	.word	0x24000010

08009514 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	431a      	orrs	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	609a      	str	r2, [r3, #8]
}
 800952e:	bf00      	nop
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800953a:	b480      	push	{r7}
 800953c:	b083      	sub	sp, #12
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	431a      	orrs	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	609a      	str	r2, [r3, #8]
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009570:	4618      	mov	r0, r3
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a18      	ldr	r2, [pc, #96]	@ (80095ec <LL_ADC_SetChannelPreselection+0x70>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d027      	beq.n	80095de <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009594:	2b00      	cmp	r3, #0
 8009596:	d107      	bne.n	80095a8 <LL_ADC_SetChannelPreselection+0x2c>
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	0e9b      	lsrs	r3, r3, #26
 800959c:	f003 031f 	and.w	r3, r3, #31
 80095a0:	2201      	movs	r2, #1
 80095a2:	fa02 f303 	lsl.w	r3, r2, r3
 80095a6:	e015      	b.n	80095d4 <LL_ADC_SetChannelPreselection+0x58>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	fa93 f3a3 	rbit	r3, r3
 80095b2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d101      	bne.n	80095c2 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80095be:	2320      	movs	r3, #32
 80095c0:	e003      	b.n	80095ca <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	fab3 f383 	clz	r3, r3
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	f003 031f 	and.w	r3, r3, #31
 80095ce:	2201      	movs	r2, #1
 80095d0:	fa02 f303 	lsl.w	r3, r2, r3
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	69d2      	ldr	r2, [r2, #28]
 80095d8:	431a      	orrs	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80095de:	bf00      	nop
 80095e0:	371c      	adds	r7, #28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	58026000 	.word	0x58026000

080095f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
 80095fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3360      	adds	r3, #96	@ 0x60
 8009602:	461a      	mov	r2, r3
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4a10      	ldr	r2, [pc, #64]	@ (8009650 <LL_ADC_SetOffset+0x60>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d10b      	bne.n	800962c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	4313      	orrs	r3, r2
 8009622:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800962a:	e00b      	b.n	8009644 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	430b      	orrs	r3, r1
 800963e:	431a      	orrs	r2, r3
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	601a      	str	r2, [r3, #0]
}
 8009644:	bf00      	nop
 8009646:	371c      	adds	r7, #28
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	58026000 	.word	0x58026000

08009654 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3360      	adds	r3, #96	@ 0x60
 8009662:	461a      	mov	r2, r3
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f003 031f 	and.w	r3, r3, #31
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	fa01 f303 	lsl.w	r3, r1, r3
 80096a0:	431a      	orrs	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	611a      	str	r2, [r3, #16]
}
 80096a6:	bf00      	nop
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
	...

080096b4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	4a0c      	ldr	r2, [pc, #48]	@ (80096f4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d00e      	beq.n	80096e6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3360      	adds	r3, #96	@ 0x60
 80096cc:	461a      	mov	r2, r3
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	431a      	orrs	r2, r3
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	601a      	str	r2, [r3, #0]
  }
}
 80096e6:	bf00      	nop
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	58026000 	.word	0x58026000

080096f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b087      	sub	sp, #28
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4a0c      	ldr	r2, [pc, #48]	@ (8009738 <LL_ADC_SetOffsetSaturation+0x40>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d10e      	bne.n	800972a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3360      	adds	r3, #96	@ 0x60
 8009710:	461a      	mov	r2, r3
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	431a      	orrs	r2, r3
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800972a:	bf00      	nop
 800972c:	371c      	adds	r7, #28
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	58026000 	.word	0x58026000

0800973c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4a0c      	ldr	r2, [pc, #48]	@ (800977c <LL_ADC_SetOffsetSign+0x40>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d10e      	bne.n	800976e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3360      	adds	r3, #96	@ 0x60
 8009754:	461a      	mov	r2, r3
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	431a      	orrs	r2, r3
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800976e:	bf00      	nop
 8009770:	371c      	adds	r7, #28
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	58026000 	.word	0x58026000

08009780 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3360      	adds	r3, #96	@ 0x60
 8009790:	461a      	mov	r2, r3
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	4a0c      	ldr	r2, [pc, #48]	@ (80097d0 <LL_ADC_SetOffsetState+0x50>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d108      	bne.n	80097b4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	431a      	orrs	r2, r3
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80097b2:	e007      	b.n	80097c4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	431a      	orrs	r2, r3
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	601a      	str	r2, [r3, #0]
}
 80097c4:	bf00      	nop
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	58026000 	.word	0x58026000

080097d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80097e8:	2301      	movs	r3, #1
 80097ea:	e000      	b.n	80097ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b087      	sub	sp, #28
 80097fe:	af00      	add	r7, sp, #0
 8009800:	60f8      	str	r0, [r7, #12]
 8009802:	60b9      	str	r1, [r7, #8]
 8009804:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	3330      	adds	r3, #48	@ 0x30
 800980a:	461a      	mov	r2, r3
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	f003 030c 	and.w	r3, r3, #12
 8009816:	4413      	add	r3, r2
 8009818:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	f003 031f 	and.w	r3, r3, #31
 8009824:	211f      	movs	r1, #31
 8009826:	fa01 f303 	lsl.w	r3, r1, r3
 800982a:	43db      	mvns	r3, r3
 800982c:	401a      	ands	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	0e9b      	lsrs	r3, r3, #26
 8009832:	f003 011f 	and.w	r1, r3, #31
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f003 031f 	and.w	r3, r3, #31
 800983c:	fa01 f303 	lsl.w	r3, r1, r3
 8009840:	431a      	orrs	r2, r3
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009846:	bf00      	nop
 8009848:	371c      	adds	r7, #28
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8009852:	b480      	push	{r7}
 8009854:	b083      	sub	sp, #12
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	f023 0203 	bic.w	r2, r3, #3
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	60da      	str	r2, [r3, #12]
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	f043 0201 	orr.w	r2, r3, #1
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	60da      	str	r2, [r3, #12]
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a08      	ldr	r2, [pc, #32]	@ (80098c8 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d107      	bne.n	80098ba <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	f023 0203 	bic.w	r2, r3, #3
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	431a      	orrs	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	60da      	str	r2, [r3, #12]
  }
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	58026000 	.word	0x58026000

080098cc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80098e0:	2301      	movs	r3, #1
 80098e2:	e000      	b.n	80098e6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b087      	sub	sp, #28
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3314      	adds	r3, #20
 8009902:	461a      	mov	r2, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	0e5b      	lsrs	r3, r3, #25
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	4413      	add	r3, r2
 8009910:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	0d1b      	lsrs	r3, r3, #20
 800991a:	f003 031f 	and.w	r3, r3, #31
 800991e:	2107      	movs	r1, #7
 8009920:	fa01 f303 	lsl.w	r3, r1, r3
 8009924:	43db      	mvns	r3, r3
 8009926:	401a      	ands	r2, r3
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	0d1b      	lsrs	r3, r3, #20
 800992c:	f003 031f 	and.w	r3, r3, #31
 8009930:	6879      	ldr	r1, [r7, #4]
 8009932:	fa01 f303 	lsl.w	r3, r1, r3
 8009936:	431a      	orrs	r2, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800993c:	bf00      	nop
 800993e:	371c      	adds	r7, #28
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4a1a      	ldr	r2, [pc, #104]	@ (80099c0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d115      	bne.n	8009988 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009968:	43db      	mvns	r3, r3
 800996a:	401a      	ands	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f003 0318 	and.w	r3, r3, #24
 8009972:	4914      	ldr	r1, [pc, #80]	@ (80099c4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009974:	40d9      	lsrs	r1, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	400b      	ands	r3, r1
 800997a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800997e:	431a      	orrs	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8009986:	e014      	b.n	80099b2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009994:	43db      	mvns	r3, r3
 8009996:	401a      	ands	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f003 0318 	and.w	r3, r3, #24
 800999e:	4909      	ldr	r1, [pc, #36]	@ (80099c4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80099a0:	40d9      	lsrs	r1, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	400b      	ands	r3, r1
 80099a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099aa:	431a      	orrs	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80099b2:	bf00      	nop
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	58026000 	.word	0x58026000
 80099c4:	000fffff 	.word	0x000fffff

080099c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f003 031f 	and.w	r3, r3, #31
}
 80099d8:	4618      	mov	r0, r3
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	4b04      	ldr	r3, [pc, #16]	@ (8009a20 <LL_ADC_DisableDeepPowerDown+0x20>)
 8009a0e:	4013      	ands	r3, r2
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	6093      	str	r3, [r2, #8]
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr
 8009a20:	5fffffc0 	.word	0x5fffffc0

08009a24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a38:	d101      	bne.n	8009a3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e000      	b.n	8009a40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689a      	ldr	r2, [r3, #8]
 8009a58:	4b05      	ldr	r3, [pc, #20]	@ (8009a70 <LL_ADC_EnableInternalRegulator+0x24>)
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	6fffffc0 	.word	0x6fffffc0

08009a74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a88:	d101      	bne.n	8009a8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e000      	b.n	8009a90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	689a      	ldr	r2, [r3, #8]
 8009aa8:	4b05      	ldr	r3, [pc, #20]	@ (8009ac0 <LL_ADC_Enable+0x24>)
 8009aaa:	4013      	ands	r3, r2
 8009aac:	f043 0201 	orr.w	r2, r3, #1
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	7fffffc0 	.word	0x7fffffc0

08009ac4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d101      	bne.n	8009adc <LL_ADC_IsEnabled+0x18>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e000      	b.n	8009ade <LL_ADC_IsEnabled+0x1a>
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
	...

08009aec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	4b05      	ldr	r3, [pc, #20]	@ (8009b10 <LL_ADC_REG_StartConversion+0x24>)
 8009afa:	4013      	ands	r3, r2
 8009afc:	f043 0204 	orr.w	r2, r3, #4
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	7fffffc0 	.word	0x7fffffc0

08009b14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f003 0304 	and.w	r3, r3, #4
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	d101      	bne.n	8009b2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e000      	b.n	8009b2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b083      	sub	sp, #12
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f003 0308 	and.w	r3, r3, #8
 8009b4a:	2b08      	cmp	r3, #8
 8009b4c:	d101      	bne.n	8009b52 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e000      	b.n	8009b54 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009b60:	b590      	push	{r4, r7, lr}
 8009b62:	b089      	sub	sp, #36	@ 0x24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e1ee      	b.n	8009f58 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d109      	bne.n	8009b9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7f9 fd2d 	bl	80035e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff ff3f 	bl	8009a24 <LL_ADC_IsDeepPowerDownEnabled>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d004      	beq.n	8009bb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7ff ff25 	bl	8009a00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff ff5a 	bl	8009a74 <LL_ADC_IsInternalRegulatorEnabled>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d114      	bne.n	8009bf0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff ff3e 	bl	8009a4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009bd0:	4b8e      	ldr	r3, [pc, #568]	@ (8009e0c <HAL_ADC_Init+0x2ac>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	099b      	lsrs	r3, r3, #6
 8009bd6:	4a8e      	ldr	r2, [pc, #568]	@ (8009e10 <HAL_ADC_Init+0x2b0>)
 8009bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bdc:	099b      	lsrs	r3, r3, #6
 8009bde:	3301      	adds	r3, #1
 8009be0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009be2:	e002      	b.n	8009bea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1f9      	bne.n	8009be4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff ff3d 	bl	8009a74 <LL_ADC_IsInternalRegulatorEnabled>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10d      	bne.n	8009c1c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c04:	f043 0210 	orr.w	r2, r3, #16
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c10:	f043 0201 	orr.w	r2, r3, #1
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7ff ff77 	bl	8009b14 <LL_ADC_REG_IsConversionOngoing>
 8009c26:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c2c:	f003 0310 	and.w	r3, r3, #16
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f040 8188 	bne.w	8009f46 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f040 8184 	bne.w	8009f46 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c42:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009c46:	f043 0202 	orr.w	r2, r3, #2
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7ff ff36 	bl	8009ac4 <LL_ADC_IsEnabled>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d136      	bne.n	8009ccc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a6c      	ldr	r2, [pc, #432]	@ (8009e14 <HAL_ADC_Init+0x2b4>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d004      	beq.n	8009c72 <HAL_ADC_Init+0x112>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a6a      	ldr	r2, [pc, #424]	@ (8009e18 <HAL_ADC_Init+0x2b8>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d10e      	bne.n	8009c90 <HAL_ADC_Init+0x130>
 8009c72:	4868      	ldr	r0, [pc, #416]	@ (8009e14 <HAL_ADC_Init+0x2b4>)
 8009c74:	f7ff ff26 	bl	8009ac4 <LL_ADC_IsEnabled>
 8009c78:	4604      	mov	r4, r0
 8009c7a:	4867      	ldr	r0, [pc, #412]	@ (8009e18 <HAL_ADC_Init+0x2b8>)
 8009c7c:	f7ff ff22 	bl	8009ac4 <LL_ADC_IsEnabled>
 8009c80:	4603      	mov	r3, r0
 8009c82:	4323      	orrs	r3, r4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	bf0c      	ite	eq
 8009c88:	2301      	moveq	r3, #1
 8009c8a:	2300      	movne	r3, #0
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	e008      	b.n	8009ca2 <HAL_ADC_Init+0x142>
 8009c90:	4862      	ldr	r0, [pc, #392]	@ (8009e1c <HAL_ADC_Init+0x2bc>)
 8009c92:	f7ff ff17 	bl	8009ac4 <LL_ADC_IsEnabled>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bf0c      	ite	eq
 8009c9c:	2301      	moveq	r3, #1
 8009c9e:	2300      	movne	r3, #0
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d012      	beq.n	8009ccc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a5a      	ldr	r2, [pc, #360]	@ (8009e14 <HAL_ADC_Init+0x2b4>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d004      	beq.n	8009cba <HAL_ADC_Init+0x15a>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a58      	ldr	r2, [pc, #352]	@ (8009e18 <HAL_ADC_Init+0x2b8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d101      	bne.n	8009cbe <HAL_ADC_Init+0x15e>
 8009cba:	4a59      	ldr	r2, [pc, #356]	@ (8009e20 <HAL_ADC_Init+0x2c0>)
 8009cbc:	e000      	b.n	8009cc0 <HAL_ADC_Init+0x160>
 8009cbe:	4a59      	ldr	r2, [pc, #356]	@ (8009e24 <HAL_ADC_Init+0x2c4>)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f7ff fc24 	bl	8009514 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a52      	ldr	r2, [pc, #328]	@ (8009e1c <HAL_ADC_Init+0x2bc>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d129      	bne.n	8009d2a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	7e5b      	ldrb	r3, [r3, #25]
 8009cda:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009ce0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8009ce6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	2b08      	cmp	r3, #8
 8009cee:	d013      	beq.n	8009d18 <HAL_ADC_Init+0x1b8>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	2b0c      	cmp	r3, #12
 8009cf6:	d00d      	beq.n	8009d14 <HAL_ADC_Init+0x1b4>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	2b1c      	cmp	r3, #28
 8009cfe:	d007      	beq.n	8009d10 <HAL_ADC_Init+0x1b0>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	2b18      	cmp	r3, #24
 8009d06:	d101      	bne.n	8009d0c <HAL_ADC_Init+0x1ac>
 8009d08:	2318      	movs	r3, #24
 8009d0a:	e006      	b.n	8009d1a <HAL_ADC_Init+0x1ba>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	e004      	b.n	8009d1a <HAL_ADC_Init+0x1ba>
 8009d10:	2310      	movs	r3, #16
 8009d12:	e002      	b.n	8009d1a <HAL_ADC_Init+0x1ba>
 8009d14:	2308      	movs	r3, #8
 8009d16:	e000      	b.n	8009d1a <HAL_ADC_Init+0x1ba>
 8009d18:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8009d1a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d22:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8009d24:	4313      	orrs	r3, r2
 8009d26:	61bb      	str	r3, [r7, #24]
 8009d28:	e00e      	b.n	8009d48 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	7e5b      	ldrb	r3, [r3, #25]
 8009d2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009d34:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8009d3a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d42:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8009d44:	4313      	orrs	r3, r2
 8009d46:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d106      	bne.n	8009d60 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d56:	3b01      	subs	r3, #1
 8009d58:	045b      	lsls	r3, r3, #17
 8009d5a:	69ba      	ldr	r2, [r7, #24]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d009      	beq.n	8009d7c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d6c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a26      	ldr	r2, [pc, #152]	@ (8009e1c <HAL_ADC_Init+0x2bc>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d115      	bne.n	8009db2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68da      	ldr	r2, [r3, #12]
 8009d8c:	4b26      	ldr	r3, [pc, #152]	@ (8009e28 <HAL_ADC_Init+0x2c8>)
 8009d8e:	4013      	ands	r3, r2
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	69b9      	ldr	r1, [r7, #24]
 8009d96:	430b      	orrs	r3, r1
 8009d98:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	611a      	str	r2, [r3, #16]
 8009db0:	e009      	b.n	8009dc6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	4b1c      	ldr	r3, [pc, #112]	@ (8009e2c <HAL_ADC_Init+0x2cc>)
 8009dba:	4013      	ands	r3, r2
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	6812      	ldr	r2, [r2, #0]
 8009dc0:	69b9      	ldr	r1, [r7, #24]
 8009dc2:	430b      	orrs	r3, r1
 8009dc4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7ff fea2 	bl	8009b14 <LL_ADC_REG_IsConversionOngoing>
 8009dd0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff feaf 	bl	8009b3a <LL_ADC_INJ_IsConversionOngoing>
 8009ddc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f040 808e 	bne.w	8009f02 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f040 808a 	bne.w	8009f02 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a0a      	ldr	r2, [pc, #40]	@ (8009e1c <HAL_ADC_Init+0x2bc>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d11b      	bne.n	8009e30 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	7e1b      	ldrb	r3, [r3, #24]
 8009dfc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009e04:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8009e06:	4313      	orrs	r3, r2
 8009e08:	61bb      	str	r3, [r7, #24]
 8009e0a:	e018      	b.n	8009e3e <HAL_ADC_Init+0x2de>
 8009e0c:	24000004 	.word	0x24000004
 8009e10:	053e2d63 	.word	0x053e2d63
 8009e14:	40022000 	.word	0x40022000
 8009e18:	40022100 	.word	0x40022100
 8009e1c:	58026000 	.word	0x58026000
 8009e20:	40022300 	.word	0x40022300
 8009e24:	58026300 	.word	0x58026300
 8009e28:	fff04007 	.word	0xfff04007
 8009e2c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	7e1b      	ldrb	r3, [r3, #24]
 8009e34:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	4b46      	ldr	r3, [pc, #280]	@ (8009f60 <HAL_ADC_Init+0x400>)
 8009e46:	4013      	ands	r3, r2
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	6812      	ldr	r2, [r2, #0]
 8009e4c:	69b9      	ldr	r1, [r7, #24]
 8009e4e:	430b      	orrs	r3, r1
 8009e50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d137      	bne.n	8009ecc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e60:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a3f      	ldr	r2, [pc, #252]	@ (8009f64 <HAL_ADC_Init+0x404>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d116      	bne.n	8009e9a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	691a      	ldr	r2, [r3, #16]
 8009e72:	4b3d      	ldr	r3, [pc, #244]	@ (8009f68 <HAL_ADC_Init+0x408>)
 8009e74:	4013      	ands	r3, r2
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009e7e:	4311      	orrs	r1, r2
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009e84:	4311      	orrs	r1, r2
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f042 0201 	orr.w	r2, r2, #1
 8009e96:	611a      	str	r2, [r3, #16]
 8009e98:	e020      	b.n	8009edc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	691a      	ldr	r2, [r3, #16]
 8009ea0:	4b32      	ldr	r3, [pc, #200]	@ (8009f6c <HAL_ADC_Init+0x40c>)
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ea8:	3a01      	subs	r2, #1
 8009eaa:	0411      	lsls	r1, r2, #16
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009eb0:	4311      	orrs	r1, r2
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009eb6:	4311      	orrs	r1, r2
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	431a      	orrs	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f042 0201 	orr.w	r2, r2, #1
 8009ec8:	611a      	str	r2, [r3, #16]
 8009eca:	e007      	b.n	8009edc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	691a      	ldr	r2, [r3, #16]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f022 0201 	bic.w	r2, r2, #1
 8009eda:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8009f64 <HAL_ADC_Init+0x404>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d002      	beq.n	8009f02 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f001 f967 	bl	800b1d0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d10c      	bne.n	8009f24 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f10:	f023 010f 	bic.w	r1, r3, #15
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	69db      	ldr	r3, [r3, #28]
 8009f18:	1e5a      	subs	r2, r3, #1
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f22:	e007      	b.n	8009f34 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f022 020f 	bic.w	r2, r2, #15
 8009f32:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f38:	f023 0303 	bic.w	r3, r3, #3
 8009f3c:	f043 0201 	orr.w	r2, r3, #1
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	661a      	str	r2, [r3, #96]	@ 0x60
 8009f44:	e007      	b.n	8009f56 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f4a:	f043 0210 	orr.w	r2, r3, #16
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3724      	adds	r7, #36	@ 0x24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd90      	pop	{r4, r7, pc}
 8009f60:	ffffbffc 	.word	0xffffbffc
 8009f64:	58026000 	.word	0x58026000
 8009f68:	fc00f81f 	.word	0xfc00f81f
 8009f6c:	fc00f81e 	.word	0xfc00f81e

08009f70 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a60      	ldr	r2, [pc, #384]	@ (800a104 <HAL_ADC_Start_DMA+0x194>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d004      	beq.n	8009f90 <HAL_ADC_Start_DMA+0x20>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a5f      	ldr	r2, [pc, #380]	@ (800a108 <HAL_ADC_Start_DMA+0x198>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d101      	bne.n	8009f94 <HAL_ADC_Start_DMA+0x24>
 8009f90:	4b5e      	ldr	r3, [pc, #376]	@ (800a10c <HAL_ADC_Start_DMA+0x19c>)
 8009f92:	e000      	b.n	8009f96 <HAL_ADC_Start_DMA+0x26>
 8009f94:	4b5e      	ldr	r3, [pc, #376]	@ (800a110 <HAL_ADC_Start_DMA+0x1a0>)
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7ff fd16 	bl	80099c8 <LL_ADC_GetMultimode>
 8009f9c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff fdb6 	bl	8009b14 <LL_ADC_REG_IsConversionOngoing>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f040 80a2 	bne.w	800a0f4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d101      	bne.n	8009fbe <HAL_ADC_Start_DMA+0x4e>
 8009fba:	2302      	movs	r3, #2
 8009fbc:	e09d      	b.n	800a0fa <HAL_ADC_Start_DMA+0x18a>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d006      	beq.n	8009fda <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	2b05      	cmp	r3, #5
 8009fd0:	d003      	beq.n	8009fda <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	2b09      	cmp	r3, #9
 8009fd6:	f040 8086 	bne.w	800a0e6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 ffda 	bl	800af94 <ADC_Enable>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d178      	bne.n	800a0dc <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009fee:	4b49      	ldr	r3, [pc, #292]	@ (800a114 <HAL_ADC_Start_DMA+0x1a4>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a42      	ldr	r2, [pc, #264]	@ (800a108 <HAL_ADC_Start_DMA+0x198>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d002      	beq.n	800a00a <HAL_ADC_Start_DMA+0x9a>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	e000      	b.n	800a00c <HAL_ADC_Start_DMA+0x9c>
 800a00a:	4b3e      	ldr	r3, [pc, #248]	@ (800a104 <HAL_ADC_Start_DMA+0x194>)
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	6812      	ldr	r2, [r2, #0]
 800a010:	4293      	cmp	r3, r2
 800a012:	d002      	beq.n	800a01a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d105      	bne.n	800a026 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a01e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a02a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d006      	beq.n	800a040 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a036:	f023 0206 	bic.w	r2, r3, #6
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	665a      	str	r2, [r3, #100]	@ 0x64
 800a03e:	e002      	b.n	800a046 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a04a:	4a33      	ldr	r2, [pc, #204]	@ (800a118 <HAL_ADC_Start_DMA+0x1a8>)
 800a04c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a052:	4a32      	ldr	r2, [pc, #200]	@ (800a11c <HAL_ADC_Start_DMA+0x1ac>)
 800a054:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a05a:	4a31      	ldr	r2, [pc, #196]	@ (800a120 <HAL_ADC_Start_DMA+0x1b0>)
 800a05c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	221c      	movs	r2, #28
 800a064:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f042 0210 	orr.w	r2, r2, #16
 800a07c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a28      	ldr	r2, [pc, #160]	@ (800a124 <HAL_ADC_Start_DMA+0x1b4>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d10f      	bne.n	800a0a8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	4619      	mov	r1, r3
 800a096:	4610      	mov	r0, r2
 800a098:	f7ff fbfe 	bl	8009898 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7ff fbe9 	bl	8009878 <LL_ADC_EnableDMAReq>
 800a0a6:	e007      	b.n	800a0b8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f7ff fbcd 	bl	8009852 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3340      	adds	r3, #64	@ 0x40
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f001 fe82 	bl	800bdd0 <HAL_DMA_Start_IT>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7ff fd09 	bl	8009aec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a0da:	e00d      	b.n	800a0f8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800a0e4:	e008      	b.n	800a0f8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a0f2:	e001      	b.n	800a0f8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	40022000 	.word	0x40022000
 800a108:	40022100 	.word	0x40022100
 800a10c:	40022300 	.word	0x40022300
 800a110:	58026300 	.word	0x58026300
 800a114:	fffff0fe 	.word	0xfffff0fe
 800a118:	0800b0a9 	.word	0x0800b0a9
 800a11c:	0800b181 	.word	0x0800b181
 800a120:	0800b19d 	.word	0x0800b19d
 800a124:	58026000 	.word	0x58026000

0800a128 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b08a      	sub	sp, #40	@ 0x28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800a130:	2300      	movs	r3, #0
 800a132:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a87      	ldr	r2, [pc, #540]	@ (800a368 <HAL_ADC_IRQHandler+0x240>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d004      	beq.n	800a158 <HAL_ADC_IRQHandler+0x30>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a86      	ldr	r2, [pc, #536]	@ (800a36c <HAL_ADC_IRQHandler+0x244>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d101      	bne.n	800a15c <HAL_ADC_IRQHandler+0x34>
 800a158:	4b85      	ldr	r3, [pc, #532]	@ (800a370 <HAL_ADC_IRQHandler+0x248>)
 800a15a:	e000      	b.n	800a15e <HAL_ADC_IRQHandler+0x36>
 800a15c:	4b85      	ldr	r3, [pc, #532]	@ (800a374 <HAL_ADC_IRQHandler+0x24c>)
 800a15e:	4618      	mov	r0, r3
 800a160:	f7ff fc32 	bl	80099c8 <LL_ADC_GetMultimode>
 800a164:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	f003 0302 	and.w	r3, r3, #2
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d017      	beq.n	800a1a0 <HAL_ADC_IRQHandler+0x78>
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	f003 0302 	and.w	r3, r3, #2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d012      	beq.n	800a1a0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a17e:	f003 0310 	and.w	r3, r3, #16
 800a182:	2b00      	cmp	r3, #0
 800a184:	d105      	bne.n	800a192 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a18a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f001 f932 	bl	800b3fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2202      	movs	r2, #2
 800a19e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	f003 0304 	and.w	r3, r3, #4
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d004      	beq.n	800a1b4 <HAL_ADC_IRQHandler+0x8c>
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10a      	bne.n	800a1ca <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 8083 	beq.w	800a2c6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	f003 0308 	and.w	r3, r3, #8
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d07d      	beq.n	800a2c6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ce:	f003 0310 	and.w	r3, r3, #16
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d105      	bne.n	800a1e2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff faf4 	bl	80097d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d062      	beq.n	800a2b8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a5d      	ldr	r2, [pc, #372]	@ (800a36c <HAL_ADC_IRQHandler+0x244>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d002      	beq.n	800a202 <HAL_ADC_IRQHandler+0xda>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	e000      	b.n	800a204 <HAL_ADC_IRQHandler+0xdc>
 800a202:	4b59      	ldr	r3, [pc, #356]	@ (800a368 <HAL_ADC_IRQHandler+0x240>)
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	4293      	cmp	r3, r2
 800a20a:	d008      	beq.n	800a21e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d005      	beq.n	800a21e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b05      	cmp	r3, #5
 800a216:	d002      	beq.n	800a21e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	2b09      	cmp	r3, #9
 800a21c:	d104      	bne.n	800a228 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	623b      	str	r3, [r7, #32]
 800a226:	e00c      	b.n	800a242 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a4f      	ldr	r2, [pc, #316]	@ (800a36c <HAL_ADC_IRQHandler+0x244>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d002      	beq.n	800a238 <HAL_ADC_IRQHandler+0x110>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	e000      	b.n	800a23a <HAL_ADC_IRQHandler+0x112>
 800a238:	4b4b      	ldr	r3, [pc, #300]	@ (800a368 <HAL_ADC_IRQHandler+0x240>)
 800a23a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800a242:	6a3b      	ldr	r3, [r7, #32]
 800a244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d135      	bne.n	800a2b8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 0308 	and.w	r3, r3, #8
 800a256:	2b08      	cmp	r3, #8
 800a258:	d12e      	bne.n	800a2b8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4618      	mov	r0, r3
 800a260:	f7ff fc58 	bl	8009b14 <LL_ADC_REG_IsConversionOngoing>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d11a      	bne.n	800a2a0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f022 020c 	bic.w	r2, r2, #12
 800a278:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a27e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a28a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d112      	bne.n	800a2b8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a296:	f043 0201 	orr.w	r2, r3, #1
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a29e:	e00b      	b.n	800a2b8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2a4:	f043 0210 	orr.w	r2, r3, #16
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2b0:	f043 0201 	orr.w	r2, r3, #1
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f96f 	bl	800a59c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	220c      	movs	r2, #12
 800a2c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	f003 0320 	and.w	r3, r3, #32
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d004      	beq.n	800a2da <HAL_ADC_IRQHandler+0x1b2>
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	f003 0320 	and.w	r3, r3, #32
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10b      	bne.n	800a2f2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 80a0 	beq.w	800a426 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 809a 	beq.w	800a426 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2f6:	f003 0310 	and.w	r3, r3, #16
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d105      	bne.n	800a30a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a302:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff fadc 	bl	80098cc <LL_ADC_INJ_IsTriggerSourceSWStart>
 800a314:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7ff fa5a 	bl	80097d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a320:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a11      	ldr	r2, [pc, #68]	@ (800a36c <HAL_ADC_IRQHandler+0x244>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d002      	beq.n	800a332 <HAL_ADC_IRQHandler+0x20a>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	e000      	b.n	800a334 <HAL_ADC_IRQHandler+0x20c>
 800a332:	4b0d      	ldr	r3, [pc, #52]	@ (800a368 <HAL_ADC_IRQHandler+0x240>)
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	6812      	ldr	r2, [r2, #0]
 800a338:	4293      	cmp	r3, r2
 800a33a:	d008      	beq.n	800a34e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d005      	beq.n	800a34e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	2b06      	cmp	r3, #6
 800a346:	d002      	beq.n	800a34e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	2b07      	cmp	r3, #7
 800a34c:	d104      	bne.n	800a358 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	623b      	str	r3, [r7, #32]
 800a356:	e014      	b.n	800a382 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a03      	ldr	r2, [pc, #12]	@ (800a36c <HAL_ADC_IRQHandler+0x244>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d00a      	beq.n	800a378 <HAL_ADC_IRQHandler+0x250>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	e008      	b.n	800a37a <HAL_ADC_IRQHandler+0x252>
 800a368:	40022000 	.word	0x40022000
 800a36c:	40022100 	.word	0x40022100
 800a370:	40022300 	.word	0x40022300
 800a374:	58026300 	.word	0x58026300
 800a378:	4b84      	ldr	r3, [pc, #528]	@ (800a58c <HAL_ADC_IRQHandler+0x464>)
 800a37a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d047      	beq.n	800a418 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d007      	beq.n	800a3a2 <HAL_ADC_IRQHandler+0x27a>
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d03f      	beq.n	800a418 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d13a      	bne.n	800a418 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ac:	2b40      	cmp	r3, #64	@ 0x40
 800a3ae:	d133      	bne.n	800a418 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d12e      	bne.n	800a418 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7ff fbbb 	bl	8009b3a <LL_ADC_INJ_IsConversionOngoing>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d11a      	bne.n	800a400 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a3d8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d112      	bne.n	800a418 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3f6:	f043 0201 	orr.w	r2, r3, #1
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	661a      	str	r2, [r3, #96]	@ 0x60
 800a3fe:	e00b      	b.n	800a418 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a404:	f043 0210 	orr.w	r2, r3, #16
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a410:	f043 0201 	orr.w	r2, r3, #1
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 ffc7 	bl	800b3ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2260      	movs	r2, #96	@ 0x60
 800a424:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d011      	beq.n	800a454 <HAL_ADC_IRQHandler+0x32c>
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00c      	beq.n	800a454 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a43e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f8bc 	bl	800a5c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2280      	movs	r2, #128	@ 0x80
 800a452:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d012      	beq.n	800a484 <HAL_ADC_IRQHandler+0x35c>
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00d      	beq.n	800a484 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a46c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 ffad 	bl	800b3d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a482:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d012      	beq.n	800a4b4 <HAL_ADC_IRQHandler+0x38c>
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00d      	beq.n	800a4b4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a49c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 ff9f 	bl	800b3e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	f003 0310 	and.w	r3, r3, #16
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d043      	beq.n	800a546 <HAL_ADC_IRQHandler+0x41e>
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	f003 0310 	and.w	r3, r3, #16
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d03e      	beq.n	800a546 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d102      	bne.n	800a4d6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4d4:	e021      	b.n	800a51a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d015      	beq.n	800a508 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a2a      	ldr	r2, [pc, #168]	@ (800a58c <HAL_ADC_IRQHandler+0x464>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d004      	beq.n	800a4f0 <HAL_ADC_IRQHandler+0x3c8>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a29      	ldr	r2, [pc, #164]	@ (800a590 <HAL_ADC_IRQHandler+0x468>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d101      	bne.n	800a4f4 <HAL_ADC_IRQHandler+0x3cc>
 800a4f0:	4b28      	ldr	r3, [pc, #160]	@ (800a594 <HAL_ADC_IRQHandler+0x46c>)
 800a4f2:	e000      	b.n	800a4f6 <HAL_ADC_IRQHandler+0x3ce>
 800a4f4:	4b28      	ldr	r3, [pc, #160]	@ (800a598 <HAL_ADC_IRQHandler+0x470>)
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff fa74 	bl	80099e4 <LL_ADC_GetMultiDMATransfer>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00b      	beq.n	800a51a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a502:	2301      	movs	r3, #1
 800a504:	627b      	str	r3, [r7, #36]	@ 0x24
 800a506:	e008      	b.n	800a51a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f003 0303 	and.w	r3, r3, #3
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800a516:	2301      	movs	r3, #1
 800a518:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800a51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d10e      	bne.n	800a53e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a524:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a530:	f043 0202 	orr.w	r2, r3, #2
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f84d 	bl	800a5d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2210      	movs	r2, #16
 800a544:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d018      	beq.n	800a582 <HAL_ADC_IRQHandler+0x45a>
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a556:	2b00      	cmp	r3, #0
 800a558:	d013      	beq.n	800a582 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a55e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a56a:	f043 0208 	orr.w	r2, r3, #8
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a57a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 ff1f 	bl	800b3c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800a582:	bf00      	nop
 800a584:	3728      	adds	r7, #40	@ 0x28
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	40022000 	.word	0x40022000
 800a590:	40022100 	.word	0x40022100
 800a594:	40022300 	.word	0x40022300
 800a598:	58026300 	.word	0x58026300

0800a59c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a5ec:	b590      	push	{r4, r7, lr}
 800a5ee:	b0a5      	sub	sp, #148	@ 0x94
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a606:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	4aa4      	ldr	r2, [pc, #656]	@ (800a8a0 <HAL_ADC_ConfigChannel+0x2b4>)
 800a60e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a616:	2b01      	cmp	r3, #1
 800a618:	d102      	bne.n	800a620 <HAL_ADC_ConfigChannel+0x34>
 800a61a:	2302      	movs	r3, #2
 800a61c:	f000 bca2 	b.w	800af64 <HAL_ADC_ConfigChannel+0x978>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7ff fa71 	bl	8009b14 <LL_ADC_REG_IsConversionOngoing>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	f040 8486 	bne.w	800af46 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	db31      	blt.n	800a6a6 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a97      	ldr	r2, [pc, #604]	@ (800a8a4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d02c      	beq.n	800a6a6 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a654:	2b00      	cmp	r3, #0
 800a656:	d108      	bne.n	800a66a <HAL_ADC_ConfigChannel+0x7e>
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	0e9b      	lsrs	r3, r3, #26
 800a65e:	f003 031f 	and.w	r3, r3, #31
 800a662:	2201      	movs	r2, #1
 800a664:	fa02 f303 	lsl.w	r3, r2, r3
 800a668:	e016      	b.n	800a698 <HAL_ADC_ConfigChannel+0xac>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a670:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a672:	fa93 f3a3 	rbit	r3, r3
 800a676:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a678:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a67a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a67c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800a682:	2320      	movs	r3, #32
 800a684:	e003      	b.n	800a68e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800a686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a688:	fab3 f383 	clz	r3, r3
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f003 031f 	and.w	r3, r3, #31
 800a692:	2201      	movs	r2, #1
 800a694:	fa02 f303 	lsl.w	r3, r2, r3
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	6812      	ldr	r2, [r2, #0]
 800a69c:	69d1      	ldr	r1, [r2, #28]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	6812      	ldr	r2, [r2, #0]
 800a6a2:	430b      	orrs	r3, r1
 800a6a4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	6859      	ldr	r1, [r3, #4]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	f7ff f8a1 	bl	80097fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff fa29 	bl	8009b14 <LL_ADC_REG_IsConversionOngoing>
 800a6c2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7ff fa35 	bl	8009b3a <LL_ADC_INJ_IsConversionOngoing>
 800a6d0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a6d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f040 824a 	bne.w	800ab72 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a6de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f040 8245 	bne.w	800ab72 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6818      	ldr	r0, [r3, #0]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	6819      	ldr	r1, [r3, #0]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	f7ff f8fc 	bl	80098f2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a69      	ldr	r2, [pc, #420]	@ (800a8a4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d10d      	bne.n	800a720 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	695a      	ldr	r2, [r3, #20]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	08db      	lsrs	r3, r3, #3
 800a710:	f003 0303 	and.w	r3, r3, #3
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	fa02 f303 	lsl.w	r3, r2, r3
 800a71a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a71e:	e032      	b.n	800a786 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a720:	4b61      	ldr	r3, [pc, #388]	@ (800a8a8 <HAL_ADC_ConfigChannel+0x2bc>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a728:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a72c:	d10b      	bne.n	800a746 <HAL_ADC_ConfigChannel+0x15a>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	695a      	ldr	r2, [r3, #20]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	089b      	lsrs	r3, r3, #2
 800a73a:	f003 0307 	and.w	r3, r3, #7
 800a73e:	005b      	lsls	r3, r3, #1
 800a740:	fa02 f303 	lsl.w	r3, r2, r3
 800a744:	e01d      	b.n	800a782 <HAL_ADC_ConfigChannel+0x196>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f003 0310 	and.w	r3, r3, #16
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10b      	bne.n	800a76c <HAL_ADC_ConfigChannel+0x180>
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	695a      	ldr	r2, [r3, #20]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	089b      	lsrs	r3, r3, #2
 800a760:	f003 0307 	and.w	r3, r3, #7
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	fa02 f303 	lsl.w	r3, r2, r3
 800a76a:	e00a      	b.n	800a782 <HAL_ADC_ConfigChannel+0x196>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	695a      	ldr	r2, [r3, #20]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	089b      	lsrs	r3, r3, #2
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	005b      	lsls	r3, r3, #1
 800a77e:	fa02 f303 	lsl.w	r3, r2, r3
 800a782:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d048      	beq.n	800a820 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	6919      	ldr	r1, [r3, #16]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a79e:	f7fe ff27 	bl	80095f0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a3f      	ldr	r2, [pc, #252]	@ (800a8a4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d119      	bne.n	800a7e0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6818      	ldr	r0, [r3, #0]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	6919      	ldr	r1, [r3, #16]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	69db      	ldr	r3, [r3, #28]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	f7fe ffbf 	bl	800973c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6818      	ldr	r0, [r3, #0]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	6919      	ldr	r1, [r3, #16]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d102      	bne.n	800a7d6 <HAL_ADC_ConfigChannel+0x1ea>
 800a7d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a7d4:	e000      	b.n	800a7d8 <HAL_ADC_ConfigChannel+0x1ec>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	461a      	mov	r2, r3
 800a7da:	f7fe ff8d 	bl	80096f8 <LL_ADC_SetOffsetSaturation>
 800a7de:	e1c8      	b.n	800ab72 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6818      	ldr	r0, [r3, #0]
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	6919      	ldr	r1, [r3, #16]
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d102      	bne.n	800a7f8 <HAL_ADC_ConfigChannel+0x20c>
 800a7f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7f6:	e000      	b.n	800a7fa <HAL_ADC_ConfigChannel+0x20e>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	f7fe ff5a 	bl	80096b4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6818      	ldr	r0, [r3, #0]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	6919      	ldr	r1, [r3, #16]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	7e1b      	ldrb	r3, [r3, #24]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d102      	bne.n	800a816 <HAL_ADC_ConfigChannel+0x22a>
 800a810:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a814:	e000      	b.n	800a818 <HAL_ADC_ConfigChannel+0x22c>
 800a816:	2300      	movs	r3, #0
 800a818:	461a      	mov	r2, r3
 800a81a:	f7fe ff31 	bl	8009680 <LL_ADC_SetDataRightShift>
 800a81e:	e1a8      	b.n	800ab72 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a1f      	ldr	r2, [pc, #124]	@ (800a8a4 <HAL_ADC_ConfigChannel+0x2b8>)
 800a826:	4293      	cmp	r3, r2
 800a828:	f040 815b 	bne.w	800aae2 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2100      	movs	r1, #0
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe ff0e 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800a838:	4603      	mov	r3, r0
 800a83a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10a      	bne.n	800a858 <HAL_ADC_ConfigChannel+0x26c>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2100      	movs	r1, #0
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fe ff03 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800a84e:	4603      	mov	r3, r0
 800a850:	0e9b      	lsrs	r3, r3, #26
 800a852:	f003 021f 	and.w	r2, r3, #31
 800a856:	e017      	b.n	800a888 <HAL_ADC_ConfigChannel+0x29c>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2100      	movs	r1, #0
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fe fef8 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800a864:	4603      	mov	r3, r0
 800a866:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a86a:	fa93 f3a3 	rbit	r3, r3
 800a86e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a872:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800a87a:	2320      	movs	r3, #32
 800a87c:	e003      	b.n	800a886 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800a87e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a880:	fab3 f383 	clz	r3, r3
 800a884:	b2db      	uxtb	r3, r3
 800a886:	461a      	mov	r2, r3
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10b      	bne.n	800a8ac <HAL_ADC_ConfigChannel+0x2c0>
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	0e9b      	lsrs	r3, r3, #26
 800a89a:	f003 031f 	and.w	r3, r3, #31
 800a89e:	e017      	b.n	800a8d0 <HAL_ADC_ConfigChannel+0x2e4>
 800a8a0:	47ff0000 	.word	0x47ff0000
 800a8a4:	58026000 	.word	0x58026000
 800a8a8:	5c001000 	.word	0x5c001000
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8b4:	fa93 f3a3 	rbit	r3, r3
 800a8b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800a8ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8bc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800a8be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800a8c4:	2320      	movs	r3, #32
 800a8c6:	e003      	b.n	800a8d0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800a8c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8ca:	fab3 f383 	clz	r3, r3
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d106      	bne.n	800a8e2 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2100      	movs	r1, #0
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fe ff4f 	bl	8009780 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fe feb3 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <HAL_ADC_ConfigChannel+0x322>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fe fea8 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800a904:	4603      	mov	r3, r0
 800a906:	0e9b      	lsrs	r3, r3, #26
 800a908:	f003 021f 	and.w	r2, r3, #31
 800a90c:	e017      	b.n	800a93e <HAL_ADC_ConfigChannel+0x352>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2101      	movs	r1, #1
 800a914:	4618      	mov	r0, r3
 800a916:	f7fe fe9d 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800a91a:	4603      	mov	r3, r0
 800a91c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a91e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a920:	fa93 f3a3 	rbit	r3, r3
 800a924:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a928:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800a92a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800a930:	2320      	movs	r3, #32
 800a932:	e003      	b.n	800a93c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800a934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a936:	fab3 f383 	clz	r3, r3
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	461a      	mov	r2, r3
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a946:	2b00      	cmp	r3, #0
 800a948:	d105      	bne.n	800a956 <HAL_ADC_ConfigChannel+0x36a>
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	0e9b      	lsrs	r3, r3, #26
 800a950:	f003 031f 	and.w	r3, r3, #31
 800a954:	e011      	b.n	800a97a <HAL_ADC_ConfigChannel+0x38e>
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a95c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a95e:	fa93 f3a3 	rbit	r3, r3
 800a962:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800a964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a966:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800a968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800a96e:	2320      	movs	r3, #32
 800a970:	e003      	b.n	800a97a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800a972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a974:	fab3 f383 	clz	r3, r3
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d106      	bne.n	800a98c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2200      	movs	r2, #0
 800a984:	2101      	movs	r1, #1
 800a986:	4618      	mov	r0, r3
 800a988:	f7fe fefa 	bl	8009780 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2102      	movs	r1, #2
 800a992:	4618      	mov	r0, r3
 800a994:	f7fe fe5e 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800a998:	4603      	mov	r3, r0
 800a99a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <HAL_ADC_ConfigChannel+0x3cc>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2102      	movs	r1, #2
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe fe53 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	0e9b      	lsrs	r3, r3, #26
 800a9b2:	f003 021f 	and.w	r2, r3, #31
 800a9b6:	e017      	b.n	800a9e8 <HAL_ADC_ConfigChannel+0x3fc>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2102      	movs	r1, #2
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fe48 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ca:	fa93 f3a3 	rbit	r3, r3
 800a9ce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800a9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800a9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800a9da:	2320      	movs	r3, #32
 800a9dc:	e003      	b.n	800a9e6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800a9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e0:	fab3 f383 	clz	r3, r3
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d105      	bne.n	800aa00 <HAL_ADC_ConfigChannel+0x414>
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	0e9b      	lsrs	r3, r3, #26
 800a9fa:	f003 031f 	and.w	r3, r3, #31
 800a9fe:	e011      	b.n	800aa24 <HAL_ADC_ConfigChannel+0x438>
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa08:	fa93 f3a3 	rbit	r3, r3
 800aa0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800aa0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa10:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800aa12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800aa18:	2320      	movs	r3, #32
 800aa1a:	e003      	b.n	800aa24 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1e:	fab3 f383 	clz	r3, r3
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d106      	bne.n	800aa36 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2102      	movs	r1, #2
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe fea5 	bl	8009780 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2103      	movs	r1, #3
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fe fe09 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10a      	bne.n	800aa62 <HAL_ADC_ConfigChannel+0x476>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2103      	movs	r1, #3
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fe fdfe 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	0e9b      	lsrs	r3, r3, #26
 800aa5c:	f003 021f 	and.w	r2, r3, #31
 800aa60:	e017      	b.n	800aa92 <HAL_ADC_ConfigChannel+0x4a6>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2103      	movs	r1, #3
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7fe fdf3 	bl	8009654 <LL_ADC_GetOffsetChannel>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa72:	6a3b      	ldr	r3, [r7, #32]
 800aa74:	fa93 f3a3 	rbit	r3, r3
 800aa78:	61fb      	str	r3, [r7, #28]
  return result;
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800aa84:	2320      	movs	r3, #32
 800aa86:	e003      	b.n	800aa90 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800aa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8a:	fab3 f383 	clz	r3, r3
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	461a      	mov	r2, r3
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d105      	bne.n	800aaaa <HAL_ADC_ConfigChannel+0x4be>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	0e9b      	lsrs	r3, r3, #26
 800aaa4:	f003 031f 	and.w	r3, r3, #31
 800aaa8:	e011      	b.n	800aace <HAL_ADC_ConfigChannel+0x4e2>
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	fa93 f3a3 	rbit	r3, r3
 800aab6:	613b      	str	r3, [r7, #16]
  return result;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800aac2:	2320      	movs	r3, #32
 800aac4:	e003      	b.n	800aace <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	fab3 f383 	clz	r3, r3
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	429a      	cmp	r2, r3
 800aad0:	d14f      	bne.n	800ab72 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2200      	movs	r2, #0
 800aad8:	2103      	movs	r1, #3
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fe fe50 	bl	8009780 <LL_ADC_SetOffsetState>
 800aae0:	e047      	b.n	800ab72 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aae8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	069b      	lsls	r3, r3, #26
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d107      	bne.n	800ab06 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab04:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	069b      	lsls	r3, r3, #26
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d107      	bne.n	800ab2a <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab28:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	069b      	lsls	r3, r3, #26
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d107      	bne.n	800ab4e <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab4c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	069b      	lsls	r3, r3, #26
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d107      	bne.n	800ab72 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ab70:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fe ffa4 	bl	8009ac4 <LL_ADC_IsEnabled>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f040 81ea 	bne.w	800af58 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6818      	ldr	r0, [r3, #0]
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	6819      	ldr	r1, [r3, #0]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	461a      	mov	r2, r3
 800ab92:	f7fe fed9 	bl	8009948 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	4a7a      	ldr	r2, [pc, #488]	@ (800ad84 <HAL_ADC_ConfigChannel+0x798>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	f040 80e0 	bne.w	800ad62 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4977      	ldr	r1, [pc, #476]	@ (800ad88 <HAL_ADC_ConfigChannel+0x79c>)
 800abac:	428b      	cmp	r3, r1
 800abae:	d147      	bne.n	800ac40 <HAL_ADC_ConfigChannel+0x654>
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4975      	ldr	r1, [pc, #468]	@ (800ad8c <HAL_ADC_ConfigChannel+0x7a0>)
 800abb6:	428b      	cmp	r3, r1
 800abb8:	d040      	beq.n	800ac3c <HAL_ADC_ConfigChannel+0x650>
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4974      	ldr	r1, [pc, #464]	@ (800ad90 <HAL_ADC_ConfigChannel+0x7a4>)
 800abc0:	428b      	cmp	r3, r1
 800abc2:	d039      	beq.n	800ac38 <HAL_ADC_ConfigChannel+0x64c>
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4972      	ldr	r1, [pc, #456]	@ (800ad94 <HAL_ADC_ConfigChannel+0x7a8>)
 800abca:	428b      	cmp	r3, r1
 800abcc:	d032      	beq.n	800ac34 <HAL_ADC_ConfigChannel+0x648>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4971      	ldr	r1, [pc, #452]	@ (800ad98 <HAL_ADC_ConfigChannel+0x7ac>)
 800abd4:	428b      	cmp	r3, r1
 800abd6:	d02b      	beq.n	800ac30 <HAL_ADC_ConfigChannel+0x644>
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	496f      	ldr	r1, [pc, #444]	@ (800ad9c <HAL_ADC_ConfigChannel+0x7b0>)
 800abde:	428b      	cmp	r3, r1
 800abe0:	d024      	beq.n	800ac2c <HAL_ADC_ConfigChannel+0x640>
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	496e      	ldr	r1, [pc, #440]	@ (800ada0 <HAL_ADC_ConfigChannel+0x7b4>)
 800abe8:	428b      	cmp	r3, r1
 800abea:	d01d      	beq.n	800ac28 <HAL_ADC_ConfigChannel+0x63c>
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	496c      	ldr	r1, [pc, #432]	@ (800ada4 <HAL_ADC_ConfigChannel+0x7b8>)
 800abf2:	428b      	cmp	r3, r1
 800abf4:	d016      	beq.n	800ac24 <HAL_ADC_ConfigChannel+0x638>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	496b      	ldr	r1, [pc, #428]	@ (800ada8 <HAL_ADC_ConfigChannel+0x7bc>)
 800abfc:	428b      	cmp	r3, r1
 800abfe:	d00f      	beq.n	800ac20 <HAL_ADC_ConfigChannel+0x634>
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4969      	ldr	r1, [pc, #420]	@ (800adac <HAL_ADC_ConfigChannel+0x7c0>)
 800ac06:	428b      	cmp	r3, r1
 800ac08:	d008      	beq.n	800ac1c <HAL_ADC_ConfigChannel+0x630>
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4968      	ldr	r1, [pc, #416]	@ (800adb0 <HAL_ADC_ConfigChannel+0x7c4>)
 800ac10:	428b      	cmp	r3, r1
 800ac12:	d101      	bne.n	800ac18 <HAL_ADC_ConfigChannel+0x62c>
 800ac14:	4b67      	ldr	r3, [pc, #412]	@ (800adb4 <HAL_ADC_ConfigChannel+0x7c8>)
 800ac16:	e0a0      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	e09e      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ac1c:	4b66      	ldr	r3, [pc, #408]	@ (800adb8 <HAL_ADC_ConfigChannel+0x7cc>)
 800ac1e:	e09c      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ac20:	4b66      	ldr	r3, [pc, #408]	@ (800adbc <HAL_ADC_ConfigChannel+0x7d0>)
 800ac22:	e09a      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ac24:	4b60      	ldr	r3, [pc, #384]	@ (800ada8 <HAL_ADC_ConfigChannel+0x7bc>)
 800ac26:	e098      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ac28:	4b5e      	ldr	r3, [pc, #376]	@ (800ada4 <HAL_ADC_ConfigChannel+0x7b8>)
 800ac2a:	e096      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ac2c:	4b64      	ldr	r3, [pc, #400]	@ (800adc0 <HAL_ADC_ConfigChannel+0x7d4>)
 800ac2e:	e094      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ac30:	4b64      	ldr	r3, [pc, #400]	@ (800adc4 <HAL_ADC_ConfigChannel+0x7d8>)
 800ac32:	e092      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ac34:	4b64      	ldr	r3, [pc, #400]	@ (800adc8 <HAL_ADC_ConfigChannel+0x7dc>)
 800ac36:	e090      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ac38:	4b64      	ldr	r3, [pc, #400]	@ (800adcc <HAL_ADC_ConfigChannel+0x7e0>)
 800ac3a:	e08e      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e08c      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4962      	ldr	r1, [pc, #392]	@ (800add0 <HAL_ADC_ConfigChannel+0x7e4>)
 800ac46:	428b      	cmp	r3, r1
 800ac48:	d140      	bne.n	800accc <HAL_ADC_ConfigChannel+0x6e0>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	494f      	ldr	r1, [pc, #316]	@ (800ad8c <HAL_ADC_ConfigChannel+0x7a0>)
 800ac50:	428b      	cmp	r3, r1
 800ac52:	d039      	beq.n	800acc8 <HAL_ADC_ConfigChannel+0x6dc>
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	494d      	ldr	r1, [pc, #308]	@ (800ad90 <HAL_ADC_ConfigChannel+0x7a4>)
 800ac5a:	428b      	cmp	r3, r1
 800ac5c:	d032      	beq.n	800acc4 <HAL_ADC_ConfigChannel+0x6d8>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	494c      	ldr	r1, [pc, #304]	@ (800ad94 <HAL_ADC_ConfigChannel+0x7a8>)
 800ac64:	428b      	cmp	r3, r1
 800ac66:	d02b      	beq.n	800acc0 <HAL_ADC_ConfigChannel+0x6d4>
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	494a      	ldr	r1, [pc, #296]	@ (800ad98 <HAL_ADC_ConfigChannel+0x7ac>)
 800ac6e:	428b      	cmp	r3, r1
 800ac70:	d024      	beq.n	800acbc <HAL_ADC_ConfigChannel+0x6d0>
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4949      	ldr	r1, [pc, #292]	@ (800ad9c <HAL_ADC_ConfigChannel+0x7b0>)
 800ac78:	428b      	cmp	r3, r1
 800ac7a:	d01d      	beq.n	800acb8 <HAL_ADC_ConfigChannel+0x6cc>
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4947      	ldr	r1, [pc, #284]	@ (800ada0 <HAL_ADC_ConfigChannel+0x7b4>)
 800ac82:	428b      	cmp	r3, r1
 800ac84:	d016      	beq.n	800acb4 <HAL_ADC_ConfigChannel+0x6c8>
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4946      	ldr	r1, [pc, #280]	@ (800ada4 <HAL_ADC_ConfigChannel+0x7b8>)
 800ac8c:	428b      	cmp	r3, r1
 800ac8e:	d00f      	beq.n	800acb0 <HAL_ADC_ConfigChannel+0x6c4>
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4944      	ldr	r1, [pc, #272]	@ (800ada8 <HAL_ADC_ConfigChannel+0x7bc>)
 800ac96:	428b      	cmp	r3, r1
 800ac98:	d008      	beq.n	800acac <HAL_ADC_ConfigChannel+0x6c0>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4944      	ldr	r1, [pc, #272]	@ (800adb0 <HAL_ADC_ConfigChannel+0x7c4>)
 800aca0:	428b      	cmp	r3, r1
 800aca2:	d101      	bne.n	800aca8 <HAL_ADC_ConfigChannel+0x6bc>
 800aca4:	4b43      	ldr	r3, [pc, #268]	@ (800adb4 <HAL_ADC_ConfigChannel+0x7c8>)
 800aca6:	e058      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800aca8:	2300      	movs	r3, #0
 800acaa:	e056      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800acac:	4b43      	ldr	r3, [pc, #268]	@ (800adbc <HAL_ADC_ConfigChannel+0x7d0>)
 800acae:	e054      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800acb0:	4b3d      	ldr	r3, [pc, #244]	@ (800ada8 <HAL_ADC_ConfigChannel+0x7bc>)
 800acb2:	e052      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800acb4:	4b3b      	ldr	r3, [pc, #236]	@ (800ada4 <HAL_ADC_ConfigChannel+0x7b8>)
 800acb6:	e050      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800acb8:	4b41      	ldr	r3, [pc, #260]	@ (800adc0 <HAL_ADC_ConfigChannel+0x7d4>)
 800acba:	e04e      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800acbc:	4b41      	ldr	r3, [pc, #260]	@ (800adc4 <HAL_ADC_ConfigChannel+0x7d8>)
 800acbe:	e04c      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800acc0:	4b41      	ldr	r3, [pc, #260]	@ (800adc8 <HAL_ADC_ConfigChannel+0x7dc>)
 800acc2:	e04a      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800acc4:	4b41      	ldr	r3, [pc, #260]	@ (800adcc <HAL_ADC_ConfigChannel+0x7e0>)
 800acc6:	e048      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800acc8:	2301      	movs	r3, #1
 800acca:	e046      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4940      	ldr	r1, [pc, #256]	@ (800add4 <HAL_ADC_ConfigChannel+0x7e8>)
 800acd2:	428b      	cmp	r3, r1
 800acd4:	d140      	bne.n	800ad58 <HAL_ADC_ConfigChannel+0x76c>
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	492c      	ldr	r1, [pc, #176]	@ (800ad8c <HAL_ADC_ConfigChannel+0x7a0>)
 800acdc:	428b      	cmp	r3, r1
 800acde:	d039      	beq.n	800ad54 <HAL_ADC_ConfigChannel+0x768>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	492a      	ldr	r1, [pc, #168]	@ (800ad90 <HAL_ADC_ConfigChannel+0x7a4>)
 800ace6:	428b      	cmp	r3, r1
 800ace8:	d032      	beq.n	800ad50 <HAL_ADC_ConfigChannel+0x764>
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4929      	ldr	r1, [pc, #164]	@ (800ad94 <HAL_ADC_ConfigChannel+0x7a8>)
 800acf0:	428b      	cmp	r3, r1
 800acf2:	d02b      	beq.n	800ad4c <HAL_ADC_ConfigChannel+0x760>
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4927      	ldr	r1, [pc, #156]	@ (800ad98 <HAL_ADC_ConfigChannel+0x7ac>)
 800acfa:	428b      	cmp	r3, r1
 800acfc:	d024      	beq.n	800ad48 <HAL_ADC_ConfigChannel+0x75c>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4926      	ldr	r1, [pc, #152]	@ (800ad9c <HAL_ADC_ConfigChannel+0x7b0>)
 800ad04:	428b      	cmp	r3, r1
 800ad06:	d01d      	beq.n	800ad44 <HAL_ADC_ConfigChannel+0x758>
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4924      	ldr	r1, [pc, #144]	@ (800ada0 <HAL_ADC_ConfigChannel+0x7b4>)
 800ad0e:	428b      	cmp	r3, r1
 800ad10:	d016      	beq.n	800ad40 <HAL_ADC_ConfigChannel+0x754>
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4923      	ldr	r1, [pc, #140]	@ (800ada4 <HAL_ADC_ConfigChannel+0x7b8>)
 800ad18:	428b      	cmp	r3, r1
 800ad1a:	d00f      	beq.n	800ad3c <HAL_ADC_ConfigChannel+0x750>
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4926      	ldr	r1, [pc, #152]	@ (800adbc <HAL_ADC_ConfigChannel+0x7d0>)
 800ad22:	428b      	cmp	r3, r1
 800ad24:	d008      	beq.n	800ad38 <HAL_ADC_ConfigChannel+0x74c>
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	492b      	ldr	r1, [pc, #172]	@ (800add8 <HAL_ADC_ConfigChannel+0x7ec>)
 800ad2c:	428b      	cmp	r3, r1
 800ad2e:	d101      	bne.n	800ad34 <HAL_ADC_ConfigChannel+0x748>
 800ad30:	4b2a      	ldr	r3, [pc, #168]	@ (800addc <HAL_ADC_ConfigChannel+0x7f0>)
 800ad32:	e012      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ad34:	2300      	movs	r3, #0
 800ad36:	e010      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ad38:	4b27      	ldr	r3, [pc, #156]	@ (800add8 <HAL_ADC_ConfigChannel+0x7ec>)
 800ad3a:	e00e      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ad3c:	4b1a      	ldr	r3, [pc, #104]	@ (800ada8 <HAL_ADC_ConfigChannel+0x7bc>)
 800ad3e:	e00c      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ad40:	4b18      	ldr	r3, [pc, #96]	@ (800ada4 <HAL_ADC_ConfigChannel+0x7b8>)
 800ad42:	e00a      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ad44:	4b1e      	ldr	r3, [pc, #120]	@ (800adc0 <HAL_ADC_ConfigChannel+0x7d4>)
 800ad46:	e008      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ad48:	4b1e      	ldr	r3, [pc, #120]	@ (800adc4 <HAL_ADC_ConfigChannel+0x7d8>)
 800ad4a:	e006      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ad4c:	4b1e      	ldr	r3, [pc, #120]	@ (800adc8 <HAL_ADC_ConfigChannel+0x7dc>)
 800ad4e:	e004      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ad50:	4b1e      	ldr	r3, [pc, #120]	@ (800adcc <HAL_ADC_ConfigChannel+0x7e0>)
 800ad52:	e002      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ad54:	2301      	movs	r3, #1
 800ad56:	e000      	b.n	800ad5a <HAL_ADC_ConfigChannel+0x76e>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	f7fe fc0d 	bl	800957c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f280 80f6 	bge.w	800af58 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a05      	ldr	r2, [pc, #20]	@ (800ad88 <HAL_ADC_ConfigChannel+0x79c>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d004      	beq.n	800ad80 <HAL_ADC_ConfigChannel+0x794>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a15      	ldr	r2, [pc, #84]	@ (800add0 <HAL_ADC_ConfigChannel+0x7e4>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d131      	bne.n	800ade4 <HAL_ADC_ConfigChannel+0x7f8>
 800ad80:	4b17      	ldr	r3, [pc, #92]	@ (800ade0 <HAL_ADC_ConfigChannel+0x7f4>)
 800ad82:	e030      	b.n	800ade6 <HAL_ADC_ConfigChannel+0x7fa>
 800ad84:	47ff0000 	.word	0x47ff0000
 800ad88:	40022000 	.word	0x40022000
 800ad8c:	04300002 	.word	0x04300002
 800ad90:	08600004 	.word	0x08600004
 800ad94:	0c900008 	.word	0x0c900008
 800ad98:	10c00010 	.word	0x10c00010
 800ad9c:	14f00020 	.word	0x14f00020
 800ada0:	2a000400 	.word	0x2a000400
 800ada4:	2e300800 	.word	0x2e300800
 800ada8:	32601000 	.word	0x32601000
 800adac:	43210000 	.word	0x43210000
 800adb0:	4b840000 	.word	0x4b840000
 800adb4:	4fb80000 	.word	0x4fb80000
 800adb8:	47520000 	.word	0x47520000
 800adbc:	36902000 	.word	0x36902000
 800adc0:	25b00200 	.word	0x25b00200
 800adc4:	21800100 	.word	0x21800100
 800adc8:	1d500080 	.word	0x1d500080
 800adcc:	19200040 	.word	0x19200040
 800add0:	40022100 	.word	0x40022100
 800add4:	58026000 	.word	0x58026000
 800add8:	3ac04000 	.word	0x3ac04000
 800addc:	3ef08000 	.word	0x3ef08000
 800ade0:	40022300 	.word	0x40022300
 800ade4:	4b61      	ldr	r3, [pc, #388]	@ (800af6c <HAL_ADC_ConfigChannel+0x980>)
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe fbba 	bl	8009560 <LL_ADC_GetCommonPathInternalCh>
 800adec:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a5f      	ldr	r2, [pc, #380]	@ (800af70 <HAL_ADC_ConfigChannel+0x984>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d004      	beq.n	800ae02 <HAL_ADC_ConfigChannel+0x816>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a5d      	ldr	r2, [pc, #372]	@ (800af74 <HAL_ADC_ConfigChannel+0x988>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d10e      	bne.n	800ae20 <HAL_ADC_ConfigChannel+0x834>
 800ae02:	485b      	ldr	r0, [pc, #364]	@ (800af70 <HAL_ADC_ConfigChannel+0x984>)
 800ae04:	f7fe fe5e 	bl	8009ac4 <LL_ADC_IsEnabled>
 800ae08:	4604      	mov	r4, r0
 800ae0a:	485a      	ldr	r0, [pc, #360]	@ (800af74 <HAL_ADC_ConfigChannel+0x988>)
 800ae0c:	f7fe fe5a 	bl	8009ac4 <LL_ADC_IsEnabled>
 800ae10:	4603      	mov	r3, r0
 800ae12:	4323      	orrs	r3, r4
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	bf0c      	ite	eq
 800ae18:	2301      	moveq	r3, #1
 800ae1a:	2300      	movne	r3, #0
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	e008      	b.n	800ae32 <HAL_ADC_ConfigChannel+0x846>
 800ae20:	4855      	ldr	r0, [pc, #340]	@ (800af78 <HAL_ADC_ConfigChannel+0x98c>)
 800ae22:	f7fe fe4f 	bl	8009ac4 <LL_ADC_IsEnabled>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	bf0c      	ite	eq
 800ae2c:	2301      	moveq	r3, #1
 800ae2e:	2300      	movne	r3, #0
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d07d      	beq.n	800af32 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a50      	ldr	r2, [pc, #320]	@ (800af7c <HAL_ADC_ConfigChannel+0x990>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d130      	bne.n	800aea2 <HAL_ADC_ConfigChannel+0x8b6>
 800ae40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d12b      	bne.n	800aea2 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a4a      	ldr	r2, [pc, #296]	@ (800af78 <HAL_ADC_ConfigChannel+0x98c>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	f040 8081 	bne.w	800af58 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a45      	ldr	r2, [pc, #276]	@ (800af70 <HAL_ADC_ConfigChannel+0x984>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d004      	beq.n	800ae6a <HAL_ADC_ConfigChannel+0x87e>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a43      	ldr	r2, [pc, #268]	@ (800af74 <HAL_ADC_ConfigChannel+0x988>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d101      	bne.n	800ae6e <HAL_ADC_ConfigChannel+0x882>
 800ae6a:	4a45      	ldr	r2, [pc, #276]	@ (800af80 <HAL_ADC_ConfigChannel+0x994>)
 800ae6c:	e000      	b.n	800ae70 <HAL_ADC_ConfigChannel+0x884>
 800ae6e:	4a3f      	ldr	r2, [pc, #252]	@ (800af6c <HAL_ADC_ConfigChannel+0x980>)
 800ae70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ae76:	4619      	mov	r1, r3
 800ae78:	4610      	mov	r0, r2
 800ae7a:	f7fe fb5e 	bl	800953a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ae7e:	4b41      	ldr	r3, [pc, #260]	@ (800af84 <HAL_ADC_ConfigChannel+0x998>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	099b      	lsrs	r3, r3, #6
 800ae84:	4a40      	ldr	r2, [pc, #256]	@ (800af88 <HAL_ADC_ConfigChannel+0x99c>)
 800ae86:	fba2 2303 	umull	r2, r3, r2, r3
 800ae8a:	099b      	lsrs	r3, r3, #6
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800ae92:	e002      	b.n	800ae9a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	3b01      	subs	r3, #1
 800ae98:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1f9      	bne.n	800ae94 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aea0:	e05a      	b.n	800af58 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a39      	ldr	r2, [pc, #228]	@ (800af8c <HAL_ADC_ConfigChannel+0x9a0>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d11e      	bne.n	800aeea <HAL_ADC_ConfigChannel+0x8fe>
 800aeac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aeae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d119      	bne.n	800aeea <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a2f      	ldr	r2, [pc, #188]	@ (800af78 <HAL_ADC_ConfigChannel+0x98c>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d14b      	bne.n	800af58 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a2a      	ldr	r2, [pc, #168]	@ (800af70 <HAL_ADC_ConfigChannel+0x984>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d004      	beq.n	800aed4 <HAL_ADC_ConfigChannel+0x8e8>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a29      	ldr	r2, [pc, #164]	@ (800af74 <HAL_ADC_ConfigChannel+0x988>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d101      	bne.n	800aed8 <HAL_ADC_ConfigChannel+0x8ec>
 800aed4:	4a2a      	ldr	r2, [pc, #168]	@ (800af80 <HAL_ADC_ConfigChannel+0x994>)
 800aed6:	e000      	b.n	800aeda <HAL_ADC_ConfigChannel+0x8ee>
 800aed8:	4a24      	ldr	r2, [pc, #144]	@ (800af6c <HAL_ADC_ConfigChannel+0x980>)
 800aeda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aedc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aee0:	4619      	mov	r1, r3
 800aee2:	4610      	mov	r0, r2
 800aee4:	f7fe fb29 	bl	800953a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aee8:	e036      	b.n	800af58 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a28      	ldr	r2, [pc, #160]	@ (800af90 <HAL_ADC_ConfigChannel+0x9a4>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d131      	bne.n	800af58 <HAL_ADC_ConfigChannel+0x96c>
 800aef4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d12c      	bne.n	800af58 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a1d      	ldr	r2, [pc, #116]	@ (800af78 <HAL_ADC_ConfigChannel+0x98c>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d127      	bne.n	800af58 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a18      	ldr	r2, [pc, #96]	@ (800af70 <HAL_ADC_ConfigChannel+0x984>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d004      	beq.n	800af1c <HAL_ADC_ConfigChannel+0x930>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a17      	ldr	r2, [pc, #92]	@ (800af74 <HAL_ADC_ConfigChannel+0x988>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d101      	bne.n	800af20 <HAL_ADC_ConfigChannel+0x934>
 800af1c:	4a18      	ldr	r2, [pc, #96]	@ (800af80 <HAL_ADC_ConfigChannel+0x994>)
 800af1e:	e000      	b.n	800af22 <HAL_ADC_ConfigChannel+0x936>
 800af20:	4a12      	ldr	r2, [pc, #72]	@ (800af6c <HAL_ADC_ConfigChannel+0x980>)
 800af22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800af24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800af28:	4619      	mov	r1, r3
 800af2a:	4610      	mov	r0, r2
 800af2c:	f7fe fb05 	bl	800953a <LL_ADC_SetCommonPathInternalCh>
 800af30:	e012      	b.n	800af58 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af36:	f043 0220 	orr.w	r2, r3, #32
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800af44:	e008      	b.n	800af58 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af4a:	f043 0220 	orr.w	r2, r3, #32
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800af60:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800af64:	4618      	mov	r0, r3
 800af66:	3794      	adds	r7, #148	@ 0x94
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd90      	pop	{r4, r7, pc}
 800af6c:	58026300 	.word	0x58026300
 800af70:	40022000 	.word	0x40022000
 800af74:	40022100 	.word	0x40022100
 800af78:	58026000 	.word	0x58026000
 800af7c:	c7520000 	.word	0xc7520000
 800af80:	40022300 	.word	0x40022300
 800af84:	24000004 	.word	0x24000004
 800af88:	053e2d63 	.word	0x053e2d63
 800af8c:	c3210000 	.word	0xc3210000
 800af90:	cb840000 	.word	0xcb840000

0800af94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe fd8f 	bl	8009ac4 <LL_ADC_IsEnabled>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d16e      	bne.n	800b08a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	689a      	ldr	r2, [r3, #8]
 800afb2:	4b38      	ldr	r3, [pc, #224]	@ (800b094 <ADC_Enable+0x100>)
 800afb4:	4013      	ands	r3, r2
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00d      	beq.n	800afd6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afbe:	f043 0210 	orr.w	r2, r3, #16
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afca:	f043 0201 	orr.w	r2, r3, #1
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e05a      	b.n	800b08c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fe fd5e 	bl	8009a9c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800afe0:	f7fe fa68 	bl	80094b4 <HAL_GetTick>
 800afe4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a2b      	ldr	r2, [pc, #172]	@ (800b098 <ADC_Enable+0x104>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d004      	beq.n	800affa <ADC_Enable+0x66>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a29      	ldr	r2, [pc, #164]	@ (800b09c <ADC_Enable+0x108>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d101      	bne.n	800affe <ADC_Enable+0x6a>
 800affa:	4b29      	ldr	r3, [pc, #164]	@ (800b0a0 <ADC_Enable+0x10c>)
 800affc:	e000      	b.n	800b000 <ADC_Enable+0x6c>
 800affe:	4b29      	ldr	r3, [pc, #164]	@ (800b0a4 <ADC_Enable+0x110>)
 800b000:	4618      	mov	r0, r3
 800b002:	f7fe fce1 	bl	80099c8 <LL_ADC_GetMultimode>
 800b006:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a23      	ldr	r2, [pc, #140]	@ (800b09c <ADC_Enable+0x108>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d002      	beq.n	800b018 <ADC_Enable+0x84>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	e000      	b.n	800b01a <ADC_Enable+0x86>
 800b018:	4b1f      	ldr	r3, [pc, #124]	@ (800b098 <ADC_Enable+0x104>)
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	6812      	ldr	r2, [r2, #0]
 800b01e:	4293      	cmp	r3, r2
 800b020:	d02c      	beq.n	800b07c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d130      	bne.n	800b08a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b028:	e028      	b.n	800b07c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fe fd48 	bl	8009ac4 <LL_ADC_IsEnabled>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d104      	bne.n	800b044 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fe fd2c 	bl	8009a9c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b044:	f7fe fa36 	bl	80094b4 <HAL_GetTick>
 800b048:	4602      	mov	r2, r0
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d914      	bls.n	800b07c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d00d      	beq.n	800b07c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b064:	f043 0210 	orr.w	r2, r3, #16
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b070:	f043 0201 	orr.w	r2, r3, #1
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	e007      	b.n	800b08c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	2b01      	cmp	r3, #1
 800b088:	d1cf      	bne.n	800b02a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	8000003f 	.word	0x8000003f
 800b098:	40022000 	.word	0x40022000
 800b09c:	40022100 	.word	0x40022100
 800b0a0:	40022300 	.word	0x40022300
 800b0a4:	58026300 	.word	0x58026300

0800b0a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d14b      	bne.n	800b15a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 0308 	and.w	r3, r3, #8
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d021      	beq.n	800b120 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fe fb77 	bl	80097d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d032      	beq.n	800b152 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d12b      	bne.n	800b152 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b10a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d11f      	bne.n	800b152 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b116:	f043 0201 	orr.w	r2, r3, #1
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	661a      	str	r2, [r3, #96]	@ 0x60
 800b11e:	e018      	b.n	800b152 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d111      	bne.n	800b152 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b132:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b13e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b142:	2b00      	cmp	r3, #0
 800b144:	d105      	bne.n	800b152 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b14a:	f043 0201 	orr.w	r2, r3, #1
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f7ff fa22 	bl	800a59c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b158:	e00e      	b.n	800b178 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b15e:	f003 0310 	and.w	r3, r3, #16
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f7ff fa36 	bl	800a5d8 <HAL_ADC_ErrorCallback>
}
 800b16c:	e004      	b.n	800b178 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	4798      	blx	r3
}
 800b178:	bf00      	nop
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b18c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f7ff fa0e 	bl	800a5b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b194:	bf00      	nop
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1ba:	f043 0204 	orr.w	r2, r3, #4
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7ff fa08 	bl	800a5d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b1c8:	bf00      	nop
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a6c      	ldr	r2, [pc, #432]	@ (800b390 <ADC_ConfigureBoostMode+0x1c0>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d004      	beq.n	800b1ec <ADC_ConfigureBoostMode+0x1c>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a6b      	ldr	r2, [pc, #428]	@ (800b394 <ADC_ConfigureBoostMode+0x1c4>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d109      	bne.n	800b200 <ADC_ConfigureBoostMode+0x30>
 800b1ec:	4b6a      	ldr	r3, [pc, #424]	@ (800b398 <ADC_ConfigureBoostMode+0x1c8>)
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	bf14      	ite	ne
 800b1f8:	2301      	movne	r3, #1
 800b1fa:	2300      	moveq	r3, #0
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	e008      	b.n	800b212 <ADC_ConfigureBoostMode+0x42>
 800b200:	4b66      	ldr	r3, [pc, #408]	@ (800b39c <ADC_ConfigureBoostMode+0x1cc>)
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	bf14      	ite	ne
 800b20c:	2301      	movne	r3, #1
 800b20e:	2300      	moveq	r3, #0
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b00      	cmp	r3, #0
 800b214:	d01c      	beq.n	800b250 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b216:	f006 fe8b 	bl	8011f30 <HAL_RCC_GetHCLKFreq>
 800b21a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b224:	d010      	beq.n	800b248 <ADC_ConfigureBoostMode+0x78>
 800b226:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b22a:	d873      	bhi.n	800b314 <ADC_ConfigureBoostMode+0x144>
 800b22c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b230:	d002      	beq.n	800b238 <ADC_ConfigureBoostMode+0x68>
 800b232:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b236:	d16d      	bne.n	800b314 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	0c1b      	lsrs	r3, r3, #16
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	fbb2 f3f3 	udiv	r3, r2, r3
 800b244:	60fb      	str	r3, [r7, #12]
        break;
 800b246:	e068      	b.n	800b31a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	089b      	lsrs	r3, r3, #2
 800b24c:	60fb      	str	r3, [r7, #12]
        break;
 800b24e:	e064      	b.n	800b31a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b250:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800b254:	f04f 0100 	mov.w	r1, #0
 800b258:	f008 f866 	bl	8013328 <HAL_RCCEx_GetPeriphCLKFreq>
 800b25c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b266:	d051      	beq.n	800b30c <ADC_ConfigureBoostMode+0x13c>
 800b268:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800b26c:	d854      	bhi.n	800b318 <ADC_ConfigureBoostMode+0x148>
 800b26e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b272:	d047      	beq.n	800b304 <ADC_ConfigureBoostMode+0x134>
 800b274:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800b278:	d84e      	bhi.n	800b318 <ADC_ConfigureBoostMode+0x148>
 800b27a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b27e:	d03d      	beq.n	800b2fc <ADC_ConfigureBoostMode+0x12c>
 800b280:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800b284:	d848      	bhi.n	800b318 <ADC_ConfigureBoostMode+0x148>
 800b286:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b28a:	d033      	beq.n	800b2f4 <ADC_ConfigureBoostMode+0x124>
 800b28c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b290:	d842      	bhi.n	800b318 <ADC_ConfigureBoostMode+0x148>
 800b292:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b296:	d029      	beq.n	800b2ec <ADC_ConfigureBoostMode+0x11c>
 800b298:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800b29c:	d83c      	bhi.n	800b318 <ADC_ConfigureBoostMode+0x148>
 800b29e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b2a2:	d01a      	beq.n	800b2da <ADC_ConfigureBoostMode+0x10a>
 800b2a4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b2a8:	d836      	bhi.n	800b318 <ADC_ConfigureBoostMode+0x148>
 800b2aa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b2ae:	d014      	beq.n	800b2da <ADC_ConfigureBoostMode+0x10a>
 800b2b0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800b2b4:	d830      	bhi.n	800b318 <ADC_ConfigureBoostMode+0x148>
 800b2b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2ba:	d00e      	beq.n	800b2da <ADC_ConfigureBoostMode+0x10a>
 800b2bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2c0:	d82a      	bhi.n	800b318 <ADC_ConfigureBoostMode+0x148>
 800b2c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b2c6:	d008      	beq.n	800b2da <ADC_ConfigureBoostMode+0x10a>
 800b2c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b2cc:	d824      	bhi.n	800b318 <ADC_ConfigureBoostMode+0x148>
 800b2ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b2d2:	d002      	beq.n	800b2da <ADC_ConfigureBoostMode+0x10a>
 800b2d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b2d8:	d11e      	bne.n	800b318 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	0c9b      	lsrs	r3, r3, #18
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e8:	60fb      	str	r3, [r7, #12]
        break;
 800b2ea:	e016      	b.n	800b31a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	091b      	lsrs	r3, r3, #4
 800b2f0:	60fb      	str	r3, [r7, #12]
        break;
 800b2f2:	e012      	b.n	800b31a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	095b      	lsrs	r3, r3, #5
 800b2f8:	60fb      	str	r3, [r7, #12]
        break;
 800b2fa:	e00e      	b.n	800b31a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	099b      	lsrs	r3, r3, #6
 800b300:	60fb      	str	r3, [r7, #12]
        break;
 800b302:	e00a      	b.n	800b31a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	09db      	lsrs	r3, r3, #7
 800b308:	60fb      	str	r3, [r7, #12]
        break;
 800b30a:	e006      	b.n	800b31a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	0a1b      	lsrs	r3, r3, #8
 800b310:	60fb      	str	r3, [r7, #12]
        break;
 800b312:	e002      	b.n	800b31a <ADC_ConfigureBoostMode+0x14a>
        break;
 800b314:	bf00      	nop
 800b316:	e000      	b.n	800b31a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800b318:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	085b      	lsrs	r3, r3, #1
 800b31e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4a1f      	ldr	r2, [pc, #124]	@ (800b3a0 <ADC_ConfigureBoostMode+0x1d0>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d808      	bhi.n	800b33a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689a      	ldr	r2, [r3, #8]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b336:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b338:	e025      	b.n	800b386 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	4a19      	ldr	r2, [pc, #100]	@ (800b3a4 <ADC_ConfigureBoostMode+0x1d4>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d80a      	bhi.n	800b358 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b354:	609a      	str	r2, [r3, #8]
}
 800b356:	e016      	b.n	800b386 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	4a13      	ldr	r2, [pc, #76]	@ (800b3a8 <ADC_ConfigureBoostMode+0x1d8>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d80a      	bhi.n	800b376 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b372:	609a      	str	r2, [r3, #8]
}
 800b374:	e007      	b.n	800b386 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	689a      	ldr	r2, [r3, #8]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800b384:	609a      	str	r2, [r3, #8]
}
 800b386:	bf00      	nop
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	40022000 	.word	0x40022000
 800b394:	40022100 	.word	0x40022100
 800b398:	40022300 	.word	0x40022300
 800b39c:	58026300 	.word	0x58026300
 800b3a0:	005f5e10 	.word	0x005f5e10
 800b3a4:	00bebc20 	.word	0x00bebc20
 800b3a8:	017d7840 	.word	0x017d7840

0800b3ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <__NVIC_SetPriorityGrouping>:
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f003 0307 	and.w	r3, r3, #7
 800b41e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b420:	4b0b      	ldr	r3, [pc, #44]	@ (800b450 <__NVIC_SetPriorityGrouping+0x40>)
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b42c:	4013      	ands	r3, r2
 800b42e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b438:	4b06      	ldr	r3, [pc, #24]	@ (800b454 <__NVIC_SetPriorityGrouping+0x44>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b43e:	4a04      	ldr	r2, [pc, #16]	@ (800b450 <__NVIC_SetPriorityGrouping+0x40>)
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	60d3      	str	r3, [r2, #12]
}
 800b444:	bf00      	nop
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	e000ed00 	.word	0xe000ed00
 800b454:	05fa0000 	.word	0x05fa0000

0800b458 <__NVIC_GetPriorityGrouping>:
{
 800b458:	b480      	push	{r7}
 800b45a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b45c:	4b04      	ldr	r3, [pc, #16]	@ (800b470 <__NVIC_GetPriorityGrouping+0x18>)
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	0a1b      	lsrs	r3, r3, #8
 800b462:	f003 0307 	and.w	r3, r3, #7
}
 800b466:	4618      	mov	r0, r3
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	e000ed00 	.word	0xe000ed00

0800b474 <__NVIC_EnableIRQ>:
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	4603      	mov	r3, r0
 800b47c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b47e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b482:	2b00      	cmp	r3, #0
 800b484:	db0b      	blt.n	800b49e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b486:	88fb      	ldrh	r3, [r7, #6]
 800b488:	f003 021f 	and.w	r2, r3, #31
 800b48c:	4907      	ldr	r1, [pc, #28]	@ (800b4ac <__NVIC_EnableIRQ+0x38>)
 800b48e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b492:	095b      	lsrs	r3, r3, #5
 800b494:	2001      	movs	r0, #1
 800b496:	fa00 f202 	lsl.w	r2, r0, r2
 800b49a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b49e:	bf00      	nop
 800b4a0:	370c      	adds	r7, #12
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	e000e100 	.word	0xe000e100

0800b4b0 <__NVIC_SetPriority>:
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	6039      	str	r1, [r7, #0]
 800b4ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b4bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	db0a      	blt.n	800b4da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	490c      	ldr	r1, [pc, #48]	@ (800b4fc <__NVIC_SetPriority+0x4c>)
 800b4ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4ce:	0112      	lsls	r2, r2, #4
 800b4d0:	b2d2      	uxtb	r2, r2
 800b4d2:	440b      	add	r3, r1
 800b4d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b4d8:	e00a      	b.n	800b4f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	4908      	ldr	r1, [pc, #32]	@ (800b500 <__NVIC_SetPriority+0x50>)
 800b4e0:	88fb      	ldrh	r3, [r7, #6]
 800b4e2:	f003 030f 	and.w	r3, r3, #15
 800b4e6:	3b04      	subs	r3, #4
 800b4e8:	0112      	lsls	r2, r2, #4
 800b4ea:	b2d2      	uxtb	r2, r2
 800b4ec:	440b      	add	r3, r1
 800b4ee:	761a      	strb	r2, [r3, #24]
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	e000e100 	.word	0xe000e100
 800b500:	e000ed00 	.word	0xe000ed00

0800b504 <NVIC_EncodePriority>:
{
 800b504:	b480      	push	{r7}
 800b506:	b089      	sub	sp, #36	@ 0x24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f003 0307 	and.w	r3, r3, #7
 800b516:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	f1c3 0307 	rsb	r3, r3, #7
 800b51e:	2b04      	cmp	r3, #4
 800b520:	bf28      	it	cs
 800b522:	2304      	movcs	r3, #4
 800b524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	3304      	adds	r3, #4
 800b52a:	2b06      	cmp	r3, #6
 800b52c:	d902      	bls.n	800b534 <NVIC_EncodePriority+0x30>
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	3b03      	subs	r3, #3
 800b532:	e000      	b.n	800b536 <NVIC_EncodePriority+0x32>
 800b534:	2300      	movs	r3, #0
 800b536:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b538:	f04f 32ff 	mov.w	r2, #4294967295
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	fa02 f303 	lsl.w	r3, r2, r3
 800b542:	43da      	mvns	r2, r3
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	401a      	ands	r2, r3
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b54c:	f04f 31ff 	mov.w	r1, #4294967295
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	fa01 f303 	lsl.w	r3, r1, r3
 800b556:	43d9      	mvns	r1, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b55c:	4313      	orrs	r3, r2
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3724      	adds	r7, #36	@ 0x24
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
	...

0800b56c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3b01      	subs	r3, #1
 800b578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b57c:	d301      	bcc.n	800b582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b57e:	2301      	movs	r3, #1
 800b580:	e00f      	b.n	800b5a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b582:	4a0a      	ldr	r2, [pc, #40]	@ (800b5ac <SysTick_Config+0x40>)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3b01      	subs	r3, #1
 800b588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b58a:	210f      	movs	r1, #15
 800b58c:	f04f 30ff 	mov.w	r0, #4294967295
 800b590:	f7ff ff8e 	bl	800b4b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b594:	4b05      	ldr	r3, [pc, #20]	@ (800b5ac <SysTick_Config+0x40>)
 800b596:	2200      	movs	r2, #0
 800b598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b59a:	4b04      	ldr	r3, [pc, #16]	@ (800b5ac <SysTick_Config+0x40>)
 800b59c:	2207      	movs	r2, #7
 800b59e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3708      	adds	r7, #8
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	e000e010 	.word	0xe000e010

0800b5b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff ff29 	bl	800b410 <__NVIC_SetPriorityGrouping>
}
 800b5be:	bf00      	nop
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b086      	sub	sp, #24
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	60b9      	str	r1, [r7, #8]
 800b5d0:	607a      	str	r2, [r7, #4]
 800b5d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b5d4:	f7ff ff40 	bl	800b458 <__NVIC_GetPriorityGrouping>
 800b5d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	68b9      	ldr	r1, [r7, #8]
 800b5de:	6978      	ldr	r0, [r7, #20]
 800b5e0:	f7ff ff90 	bl	800b504 <NVIC_EncodePriority>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff ff5f 	bl	800b4b0 <__NVIC_SetPriority>
}
 800b5f2:	bf00      	nop
 800b5f4:	3718      	adds	r7, #24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b082      	sub	sp, #8
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	4603      	mov	r3, r0
 800b602:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff ff33 	bl	800b474 <__NVIC_EnableIRQ>
}
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7ff ffa4 	bl	800b56c <SysTick_Config>
 800b624:	4603      	mov	r3, r0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
	...

0800b630 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800b630:	b480      	push	{r7}
 800b632:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800b634:	f3bf 8f5f 	dmb	sy
}
 800b638:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800b63a:	4b07      	ldr	r3, [pc, #28]	@ (800b658 <HAL_MPU_Disable+0x28>)
 800b63c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b63e:	4a06      	ldr	r2, [pc, #24]	@ (800b658 <HAL_MPU_Disable+0x28>)
 800b640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b644:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800b646:	4b05      	ldr	r3, [pc, #20]	@ (800b65c <HAL_MPU_Disable+0x2c>)
 800b648:	2200      	movs	r2, #0
 800b64a:	605a      	str	r2, [r3, #4]
}
 800b64c:	bf00      	nop
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	e000ed00 	.word	0xe000ed00
 800b65c:	e000ed90 	.word	0xe000ed90

0800b660 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b668:	4a0b      	ldr	r2, [pc, #44]	@ (800b698 <HAL_MPU_Enable+0x38>)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f043 0301 	orr.w	r3, r3, #1
 800b670:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b672:	4b0a      	ldr	r3, [pc, #40]	@ (800b69c <HAL_MPU_Enable+0x3c>)
 800b674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b676:	4a09      	ldr	r2, [pc, #36]	@ (800b69c <HAL_MPU_Enable+0x3c>)
 800b678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b67c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b67e:	f3bf 8f4f 	dsb	sy
}
 800b682:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b684:	f3bf 8f6f 	isb	sy
}
 800b688:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b68a:	bf00      	nop
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	e000ed90 	.word	0xe000ed90
 800b69c:	e000ed00 	.word	0xe000ed00

0800b6a0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	785a      	ldrb	r2, [r3, #1]
 800b6ac:	4b1b      	ldr	r3, [pc, #108]	@ (800b71c <HAL_MPU_ConfigRegion+0x7c>)
 800b6ae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800b6b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b71c <HAL_MPU_ConfigRegion+0x7c>)
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	4a19      	ldr	r2, [pc, #100]	@ (800b71c <HAL_MPU_ConfigRegion+0x7c>)
 800b6b6:	f023 0301 	bic.w	r3, r3, #1
 800b6ba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800b6bc:	4a17      	ldr	r2, [pc, #92]	@ (800b71c <HAL_MPU_ConfigRegion+0x7c>)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	7b1b      	ldrb	r3, [r3, #12]
 800b6c8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	7adb      	ldrb	r3, [r3, #11]
 800b6ce:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b6d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	7a9b      	ldrb	r3, [r3, #10]
 800b6d6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b6d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	7b5b      	ldrb	r3, [r3, #13]
 800b6de:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b6e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	7b9b      	ldrb	r3, [r3, #14]
 800b6e6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b6e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	7bdb      	ldrb	r3, [r3, #15]
 800b6ee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b6f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	7a5b      	ldrb	r3, [r3, #9]
 800b6f6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b6f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	7a1b      	ldrb	r3, [r3, #8]
 800b6fe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b700:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	7812      	ldrb	r2, [r2, #0]
 800b706:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b708:	4a04      	ldr	r2, [pc, #16]	@ (800b71c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b70a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b70c:	6113      	str	r3, [r2, #16]
}
 800b70e:	bf00      	nop
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	e000ed90 	.word	0xe000ed90

0800b720 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800b728:	f7fd fec4 	bl	80094b4 <HAL_GetTick>
 800b72c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	e312      	b.n	800bd5e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a66      	ldr	r2, [pc, #408]	@ (800b8d8 <HAL_DMA_Init+0x1b8>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d04a      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a65      	ldr	r2, [pc, #404]	@ (800b8dc <HAL_DMA_Init+0x1bc>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d045      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a63      	ldr	r2, [pc, #396]	@ (800b8e0 <HAL_DMA_Init+0x1c0>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d040      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a62      	ldr	r2, [pc, #392]	@ (800b8e4 <HAL_DMA_Init+0x1c4>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d03b      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a60      	ldr	r2, [pc, #384]	@ (800b8e8 <HAL_DMA_Init+0x1c8>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d036      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a5f      	ldr	r2, [pc, #380]	@ (800b8ec <HAL_DMA_Init+0x1cc>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d031      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a5d      	ldr	r2, [pc, #372]	@ (800b8f0 <HAL_DMA_Init+0x1d0>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d02c      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a5c      	ldr	r2, [pc, #368]	@ (800b8f4 <HAL_DMA_Init+0x1d4>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d027      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a5a      	ldr	r2, [pc, #360]	@ (800b8f8 <HAL_DMA_Init+0x1d8>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d022      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a59      	ldr	r2, [pc, #356]	@ (800b8fc <HAL_DMA_Init+0x1dc>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d01d      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a57      	ldr	r2, [pc, #348]	@ (800b900 <HAL_DMA_Init+0x1e0>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d018      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a56      	ldr	r2, [pc, #344]	@ (800b904 <HAL_DMA_Init+0x1e4>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d013      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a54      	ldr	r2, [pc, #336]	@ (800b908 <HAL_DMA_Init+0x1e8>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d00e      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a53      	ldr	r2, [pc, #332]	@ (800b90c <HAL_DMA_Init+0x1ec>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d009      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a51      	ldr	r2, [pc, #324]	@ (800b910 <HAL_DMA_Init+0x1f0>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d004      	beq.n	800b7d8 <HAL_DMA_Init+0xb8>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a50      	ldr	r2, [pc, #320]	@ (800b914 <HAL_DMA_Init+0x1f4>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d101      	bne.n	800b7dc <HAL_DMA_Init+0xbc>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e000      	b.n	800b7de <HAL_DMA_Init+0xbe>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f000 813c 	beq.w	800ba5c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a37      	ldr	r2, [pc, #220]	@ (800b8d8 <HAL_DMA_Init+0x1b8>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d04a      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a36      	ldr	r2, [pc, #216]	@ (800b8dc <HAL_DMA_Init+0x1bc>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d045      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a34      	ldr	r2, [pc, #208]	@ (800b8e0 <HAL_DMA_Init+0x1c0>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d040      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a33      	ldr	r2, [pc, #204]	@ (800b8e4 <HAL_DMA_Init+0x1c4>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d03b      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a31      	ldr	r2, [pc, #196]	@ (800b8e8 <HAL_DMA_Init+0x1c8>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d036      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a30      	ldr	r2, [pc, #192]	@ (800b8ec <HAL_DMA_Init+0x1cc>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d031      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a2e      	ldr	r2, [pc, #184]	@ (800b8f0 <HAL_DMA_Init+0x1d0>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d02c      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a2d      	ldr	r2, [pc, #180]	@ (800b8f4 <HAL_DMA_Init+0x1d4>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d027      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a2b      	ldr	r2, [pc, #172]	@ (800b8f8 <HAL_DMA_Init+0x1d8>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d022      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a2a      	ldr	r2, [pc, #168]	@ (800b8fc <HAL_DMA_Init+0x1dc>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d01d      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a28      	ldr	r2, [pc, #160]	@ (800b900 <HAL_DMA_Init+0x1e0>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d018      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a27      	ldr	r2, [pc, #156]	@ (800b904 <HAL_DMA_Init+0x1e4>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d013      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a25      	ldr	r2, [pc, #148]	@ (800b908 <HAL_DMA_Init+0x1e8>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d00e      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a24      	ldr	r2, [pc, #144]	@ (800b90c <HAL_DMA_Init+0x1ec>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d009      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a22      	ldr	r2, [pc, #136]	@ (800b910 <HAL_DMA_Init+0x1f0>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d004      	beq.n	800b894 <HAL_DMA_Init+0x174>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a21      	ldr	r2, [pc, #132]	@ (800b914 <HAL_DMA_Init+0x1f4>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d108      	bne.n	800b8a6 <HAL_DMA_Init+0x186>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f022 0201 	bic.w	r2, r2, #1
 800b8a2:	601a      	str	r2, [r3, #0]
 800b8a4:	e007      	b.n	800b8b6 <HAL_DMA_Init+0x196>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f022 0201 	bic.w	r2, r2, #1
 800b8b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b8b6:	e02f      	b.n	800b918 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b8b8:	f7fd fdfc 	bl	80094b4 <HAL_GetTick>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	2b05      	cmp	r3, #5
 800b8c4:	d928      	bls.n	800b918 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2220      	movs	r2, #32
 800b8ca:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2203      	movs	r2, #3
 800b8d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e242      	b.n	800bd5e <HAL_DMA_Init+0x63e>
 800b8d8:	40020010 	.word	0x40020010
 800b8dc:	40020028 	.word	0x40020028
 800b8e0:	40020040 	.word	0x40020040
 800b8e4:	40020058 	.word	0x40020058
 800b8e8:	40020070 	.word	0x40020070
 800b8ec:	40020088 	.word	0x40020088
 800b8f0:	400200a0 	.word	0x400200a0
 800b8f4:	400200b8 	.word	0x400200b8
 800b8f8:	40020410 	.word	0x40020410
 800b8fc:	40020428 	.word	0x40020428
 800b900:	40020440 	.word	0x40020440
 800b904:	40020458 	.word	0x40020458
 800b908:	40020470 	.word	0x40020470
 800b90c:	40020488 	.word	0x40020488
 800b910:	400204a0 	.word	0x400204a0
 800b914:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 0301 	and.w	r3, r3, #1
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1c8      	bne.n	800b8b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	4b83      	ldr	r3, [pc, #524]	@ (800bb40 <HAL_DMA_Init+0x420>)
 800b932:	4013      	ands	r3, r2
 800b934:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800b93e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b94a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b956:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a1b      	ldr	r3, [r3, #32]
 800b95c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	4313      	orrs	r3, r2
 800b962:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b968:	2b04      	cmp	r3, #4
 800b96a:	d107      	bne.n	800b97c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b974:	4313      	orrs	r3, r2
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	4313      	orrs	r3, r2
 800b97a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	2b28      	cmp	r3, #40	@ 0x28
 800b982:	d903      	bls.n	800b98c <HAL_DMA_Init+0x26c>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	2b2e      	cmp	r3, #46	@ 0x2e
 800b98a:	d91f      	bls.n	800b9cc <HAL_DMA_Init+0x2ac>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	2b3e      	cmp	r3, #62	@ 0x3e
 800b992:	d903      	bls.n	800b99c <HAL_DMA_Init+0x27c>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	2b42      	cmp	r3, #66	@ 0x42
 800b99a:	d917      	bls.n	800b9cc <HAL_DMA_Init+0x2ac>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	2b46      	cmp	r3, #70	@ 0x46
 800b9a2:	d903      	bls.n	800b9ac <HAL_DMA_Init+0x28c>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	2b48      	cmp	r3, #72	@ 0x48
 800b9aa:	d90f      	bls.n	800b9cc <HAL_DMA_Init+0x2ac>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	2b4e      	cmp	r3, #78	@ 0x4e
 800b9b2:	d903      	bls.n	800b9bc <HAL_DMA_Init+0x29c>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	2b52      	cmp	r3, #82	@ 0x52
 800b9ba:	d907      	bls.n	800b9cc <HAL_DMA_Init+0x2ac>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	2b73      	cmp	r3, #115	@ 0x73
 800b9c2:	d905      	bls.n	800b9d0 <HAL_DMA_Init+0x2b0>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	2b77      	cmp	r3, #119	@ 0x77
 800b9ca:	d801      	bhi.n	800b9d0 <HAL_DMA_Init+0x2b0>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e000      	b.n	800b9d2 <HAL_DMA_Init+0x2b2>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9dc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	697a      	ldr	r2, [r7, #20]
 800b9e4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f023 0307 	bic.w	r3, r3, #7
 800b9f4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba04:	2b04      	cmp	r3, #4
 800ba06:	d117      	bne.n	800ba38 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00e      	beq.n	800ba38 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f002 fb48 	bl	800e0b0 <DMA_CheckFifoParam>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d008      	beq.n	800ba38 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2240      	movs	r2, #64	@ 0x40
 800ba2a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e192      	b.n	800bd5e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f002 fa83 	bl	800df4c <DMA_CalcBaseAndBitshift>
 800ba46:	4603      	mov	r3, r0
 800ba48:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba4e:	f003 031f 	and.w	r3, r3, #31
 800ba52:	223f      	movs	r2, #63	@ 0x3f
 800ba54:	409a      	lsls	r2, r3
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	609a      	str	r2, [r3, #8]
 800ba5a:	e0c8      	b.n	800bbee <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a38      	ldr	r2, [pc, #224]	@ (800bb44 <HAL_DMA_Init+0x424>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d022      	beq.n	800baac <HAL_DMA_Init+0x38c>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a37      	ldr	r2, [pc, #220]	@ (800bb48 <HAL_DMA_Init+0x428>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d01d      	beq.n	800baac <HAL_DMA_Init+0x38c>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a35      	ldr	r2, [pc, #212]	@ (800bb4c <HAL_DMA_Init+0x42c>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d018      	beq.n	800baac <HAL_DMA_Init+0x38c>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a34      	ldr	r2, [pc, #208]	@ (800bb50 <HAL_DMA_Init+0x430>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d013      	beq.n	800baac <HAL_DMA_Init+0x38c>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a32      	ldr	r2, [pc, #200]	@ (800bb54 <HAL_DMA_Init+0x434>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d00e      	beq.n	800baac <HAL_DMA_Init+0x38c>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a31      	ldr	r2, [pc, #196]	@ (800bb58 <HAL_DMA_Init+0x438>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d009      	beq.n	800baac <HAL_DMA_Init+0x38c>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a2f      	ldr	r2, [pc, #188]	@ (800bb5c <HAL_DMA_Init+0x43c>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d004      	beq.n	800baac <HAL_DMA_Init+0x38c>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a2e      	ldr	r2, [pc, #184]	@ (800bb60 <HAL_DMA_Init+0x440>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d101      	bne.n	800bab0 <HAL_DMA_Init+0x390>
 800baac:	2301      	movs	r3, #1
 800baae:	e000      	b.n	800bab2 <HAL_DMA_Init+0x392>
 800bab0:	2300      	movs	r3, #0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f000 8092 	beq.w	800bbdc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a21      	ldr	r2, [pc, #132]	@ (800bb44 <HAL_DMA_Init+0x424>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d021      	beq.n	800bb06 <HAL_DMA_Init+0x3e6>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a20      	ldr	r2, [pc, #128]	@ (800bb48 <HAL_DMA_Init+0x428>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d01c      	beq.n	800bb06 <HAL_DMA_Init+0x3e6>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a1e      	ldr	r2, [pc, #120]	@ (800bb4c <HAL_DMA_Init+0x42c>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d017      	beq.n	800bb06 <HAL_DMA_Init+0x3e6>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a1d      	ldr	r2, [pc, #116]	@ (800bb50 <HAL_DMA_Init+0x430>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d012      	beq.n	800bb06 <HAL_DMA_Init+0x3e6>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a1b      	ldr	r2, [pc, #108]	@ (800bb54 <HAL_DMA_Init+0x434>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d00d      	beq.n	800bb06 <HAL_DMA_Init+0x3e6>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a1a      	ldr	r2, [pc, #104]	@ (800bb58 <HAL_DMA_Init+0x438>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d008      	beq.n	800bb06 <HAL_DMA_Init+0x3e6>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a18      	ldr	r2, [pc, #96]	@ (800bb5c <HAL_DMA_Init+0x43c>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d003      	beq.n	800bb06 <HAL_DMA_Init+0x3e6>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a17      	ldr	r2, [pc, #92]	@ (800bb60 <HAL_DMA_Init+0x440>)
 800bb04:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2202      	movs	r2, #2
 800bb0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800bb1e:	697a      	ldr	r2, [r7, #20]
 800bb20:	4b10      	ldr	r3, [pc, #64]	@ (800bb64 <HAL_DMA_Init+0x444>)
 800bb22:	4013      	ands	r3, r2
 800bb24:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	2b40      	cmp	r3, #64	@ 0x40
 800bb2c:	d01c      	beq.n	800bb68 <HAL_DMA_Init+0x448>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	2b80      	cmp	r3, #128	@ 0x80
 800bb34:	d102      	bne.n	800bb3c <HAL_DMA_Init+0x41c>
 800bb36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bb3a:	e016      	b.n	800bb6a <HAL_DMA_Init+0x44a>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	e014      	b.n	800bb6a <HAL_DMA_Init+0x44a>
 800bb40:	fe10803f 	.word	0xfe10803f
 800bb44:	58025408 	.word	0x58025408
 800bb48:	5802541c 	.word	0x5802541c
 800bb4c:	58025430 	.word	0x58025430
 800bb50:	58025444 	.word	0x58025444
 800bb54:	58025458 	.word	0x58025458
 800bb58:	5802546c 	.word	0x5802546c
 800bb5c:	58025480 	.word	0x58025480
 800bb60:	58025494 	.word	0x58025494
 800bb64:	fffe000f 	.word	0xfffe000f
 800bb68:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	68d2      	ldr	r2, [r2, #12]
 800bb6e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bb70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800bb78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	695b      	ldr	r3, [r3, #20]
 800bb7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800bb80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800bb88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800bb90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a1b      	ldr	r3, [r3, #32]
 800bb96:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800bb98:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800bb9a:	697a      	ldr	r2, [r7, #20]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	461a      	mov	r2, r3
 800bbae:	4b6e      	ldr	r3, [pc, #440]	@ (800bd68 <HAL_DMA_Init+0x648>)
 800bbb0:	4413      	add	r3, r2
 800bbb2:	4a6e      	ldr	r2, [pc, #440]	@ (800bd6c <HAL_DMA_Init+0x64c>)
 800bbb4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb8:	091b      	lsrs	r3, r3, #4
 800bbba:	009a      	lsls	r2, r3, #2
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f002 f9c3 	bl	800df4c <DMA_CalcBaseAndBitshift>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbce:	f003 031f 	and.w	r3, r3, #31
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	409a      	lsls	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	605a      	str	r2, [r3, #4]
 800bbda:	e008      	b.n	800bbee <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2240      	movs	r2, #64	@ 0x40
 800bbe0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2203      	movs	r2, #3
 800bbe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	e0b7      	b.n	800bd5e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a5f      	ldr	r2, [pc, #380]	@ (800bd70 <HAL_DMA_Init+0x650>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d072      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a5d      	ldr	r2, [pc, #372]	@ (800bd74 <HAL_DMA_Init+0x654>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d06d      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a5c      	ldr	r2, [pc, #368]	@ (800bd78 <HAL_DMA_Init+0x658>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d068      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a5a      	ldr	r2, [pc, #360]	@ (800bd7c <HAL_DMA_Init+0x65c>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d063      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a59      	ldr	r2, [pc, #356]	@ (800bd80 <HAL_DMA_Init+0x660>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d05e      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a57      	ldr	r2, [pc, #348]	@ (800bd84 <HAL_DMA_Init+0x664>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d059      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a56      	ldr	r2, [pc, #344]	@ (800bd88 <HAL_DMA_Init+0x668>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d054      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a54      	ldr	r2, [pc, #336]	@ (800bd8c <HAL_DMA_Init+0x66c>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d04f      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a53      	ldr	r2, [pc, #332]	@ (800bd90 <HAL_DMA_Init+0x670>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d04a      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a51      	ldr	r2, [pc, #324]	@ (800bd94 <HAL_DMA_Init+0x674>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d045      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a50      	ldr	r2, [pc, #320]	@ (800bd98 <HAL_DMA_Init+0x678>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d040      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a4e      	ldr	r2, [pc, #312]	@ (800bd9c <HAL_DMA_Init+0x67c>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d03b      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a4d      	ldr	r2, [pc, #308]	@ (800bda0 <HAL_DMA_Init+0x680>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d036      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a4b      	ldr	r2, [pc, #300]	@ (800bda4 <HAL_DMA_Init+0x684>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d031      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a4a      	ldr	r2, [pc, #296]	@ (800bda8 <HAL_DMA_Init+0x688>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d02c      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a48      	ldr	r2, [pc, #288]	@ (800bdac <HAL_DMA_Init+0x68c>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d027      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a47      	ldr	r2, [pc, #284]	@ (800bdb0 <HAL_DMA_Init+0x690>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d022      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a45      	ldr	r2, [pc, #276]	@ (800bdb4 <HAL_DMA_Init+0x694>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d01d      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a44      	ldr	r2, [pc, #272]	@ (800bdb8 <HAL_DMA_Init+0x698>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d018      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a42      	ldr	r2, [pc, #264]	@ (800bdbc <HAL_DMA_Init+0x69c>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d013      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a41      	ldr	r2, [pc, #260]	@ (800bdc0 <HAL_DMA_Init+0x6a0>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d00e      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a3f      	ldr	r2, [pc, #252]	@ (800bdc4 <HAL_DMA_Init+0x6a4>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d009      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a3e      	ldr	r2, [pc, #248]	@ (800bdc8 <HAL_DMA_Init+0x6a8>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d004      	beq.n	800bcde <HAL_DMA_Init+0x5be>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a3c      	ldr	r2, [pc, #240]	@ (800bdcc <HAL_DMA_Init+0x6ac>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d101      	bne.n	800bce2 <HAL_DMA_Init+0x5c2>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e000      	b.n	800bce4 <HAL_DMA_Init+0x5c4>
 800bce2:	2300      	movs	r3, #0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d032      	beq.n	800bd4e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f002 fa5d 	bl	800e1a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	2b80      	cmp	r3, #128	@ 0x80
 800bcf4:	d102      	bne.n	800bcfc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685a      	ldr	r2, [r3, #4]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd04:	b2d2      	uxtb	r2, r2
 800bd06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800bd10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d010      	beq.n	800bd3c <HAL_DMA_Init+0x61c>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	2b08      	cmp	r3, #8
 800bd20:	d80c      	bhi.n	800bd3c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f002 fada 	bl	800e2dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bd38:	605a      	str	r2, [r3, #4]
 800bd3a:	e008      	b.n	800bd4e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	a7fdabf8 	.word	0xa7fdabf8
 800bd6c:	cccccccd 	.word	0xcccccccd
 800bd70:	40020010 	.word	0x40020010
 800bd74:	40020028 	.word	0x40020028
 800bd78:	40020040 	.word	0x40020040
 800bd7c:	40020058 	.word	0x40020058
 800bd80:	40020070 	.word	0x40020070
 800bd84:	40020088 	.word	0x40020088
 800bd88:	400200a0 	.word	0x400200a0
 800bd8c:	400200b8 	.word	0x400200b8
 800bd90:	40020410 	.word	0x40020410
 800bd94:	40020428 	.word	0x40020428
 800bd98:	40020440 	.word	0x40020440
 800bd9c:	40020458 	.word	0x40020458
 800bda0:	40020470 	.word	0x40020470
 800bda4:	40020488 	.word	0x40020488
 800bda8:	400204a0 	.word	0x400204a0
 800bdac:	400204b8 	.word	0x400204b8
 800bdb0:	58025408 	.word	0x58025408
 800bdb4:	5802541c 	.word	0x5802541c
 800bdb8:	58025430 	.word	0x58025430
 800bdbc:	58025444 	.word	0x58025444
 800bdc0:	58025458 	.word	0x58025458
 800bdc4:	5802546c 	.word	0x5802546c
 800bdc8:	58025480 	.word	0x58025480
 800bdcc:	58025494 	.word	0x58025494

0800bdd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e226      	b.n	800c23a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d101      	bne.n	800bdfa <HAL_DMA_Start_IT+0x2a>
 800bdf6:	2302      	movs	r3, #2
 800bdf8:	e21f      	b.n	800c23a <HAL_DMA_Start_IT+0x46a>
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	f040 820a 	bne.w	800c224 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2202      	movs	r2, #2
 800be14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a68      	ldr	r2, [pc, #416]	@ (800bfc4 <HAL_DMA_Start_IT+0x1f4>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d04a      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a66      	ldr	r2, [pc, #408]	@ (800bfc8 <HAL_DMA_Start_IT+0x1f8>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d045      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a65      	ldr	r2, [pc, #404]	@ (800bfcc <HAL_DMA_Start_IT+0x1fc>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d040      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a63      	ldr	r2, [pc, #396]	@ (800bfd0 <HAL_DMA_Start_IT+0x200>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d03b      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a62      	ldr	r2, [pc, #392]	@ (800bfd4 <HAL_DMA_Start_IT+0x204>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d036      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a60      	ldr	r2, [pc, #384]	@ (800bfd8 <HAL_DMA_Start_IT+0x208>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d031      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a5f      	ldr	r2, [pc, #380]	@ (800bfdc <HAL_DMA_Start_IT+0x20c>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d02c      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a5d      	ldr	r2, [pc, #372]	@ (800bfe0 <HAL_DMA_Start_IT+0x210>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d027      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a5c      	ldr	r2, [pc, #368]	@ (800bfe4 <HAL_DMA_Start_IT+0x214>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d022      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a5a      	ldr	r2, [pc, #360]	@ (800bfe8 <HAL_DMA_Start_IT+0x218>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d01d      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a59      	ldr	r2, [pc, #356]	@ (800bfec <HAL_DMA_Start_IT+0x21c>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d018      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a57      	ldr	r2, [pc, #348]	@ (800bff0 <HAL_DMA_Start_IT+0x220>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d013      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a56      	ldr	r2, [pc, #344]	@ (800bff4 <HAL_DMA_Start_IT+0x224>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d00e      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a54      	ldr	r2, [pc, #336]	@ (800bff8 <HAL_DMA_Start_IT+0x228>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d009      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a53      	ldr	r2, [pc, #332]	@ (800bffc <HAL_DMA_Start_IT+0x22c>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d004      	beq.n	800bebe <HAL_DMA_Start_IT+0xee>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a51      	ldr	r2, [pc, #324]	@ (800c000 <HAL_DMA_Start_IT+0x230>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d108      	bne.n	800bed0 <HAL_DMA_Start_IT+0x100>
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f022 0201 	bic.w	r2, r2, #1
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	e007      	b.n	800bee0 <HAL_DMA_Start_IT+0x110>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f022 0201 	bic.w	r2, r2, #1
 800bede:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	68b9      	ldr	r1, [r7, #8]
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f001 fe84 	bl	800dbf4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a34      	ldr	r2, [pc, #208]	@ (800bfc4 <HAL_DMA_Start_IT+0x1f4>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d04a      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a33      	ldr	r2, [pc, #204]	@ (800bfc8 <HAL_DMA_Start_IT+0x1f8>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d045      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a31      	ldr	r2, [pc, #196]	@ (800bfcc <HAL_DMA_Start_IT+0x1fc>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d040      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a30      	ldr	r2, [pc, #192]	@ (800bfd0 <HAL_DMA_Start_IT+0x200>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d03b      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a2e      	ldr	r2, [pc, #184]	@ (800bfd4 <HAL_DMA_Start_IT+0x204>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d036      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a2d      	ldr	r2, [pc, #180]	@ (800bfd8 <HAL_DMA_Start_IT+0x208>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d031      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a2b      	ldr	r2, [pc, #172]	@ (800bfdc <HAL_DMA_Start_IT+0x20c>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d02c      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a2a      	ldr	r2, [pc, #168]	@ (800bfe0 <HAL_DMA_Start_IT+0x210>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d027      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a28      	ldr	r2, [pc, #160]	@ (800bfe4 <HAL_DMA_Start_IT+0x214>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d022      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a27      	ldr	r2, [pc, #156]	@ (800bfe8 <HAL_DMA_Start_IT+0x218>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d01d      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a25      	ldr	r2, [pc, #148]	@ (800bfec <HAL_DMA_Start_IT+0x21c>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d018      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a24      	ldr	r2, [pc, #144]	@ (800bff0 <HAL_DMA_Start_IT+0x220>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d013      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a22      	ldr	r2, [pc, #136]	@ (800bff4 <HAL_DMA_Start_IT+0x224>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d00e      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a21      	ldr	r2, [pc, #132]	@ (800bff8 <HAL_DMA_Start_IT+0x228>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d009      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a1f      	ldr	r2, [pc, #124]	@ (800bffc <HAL_DMA_Start_IT+0x22c>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d004      	beq.n	800bf8c <HAL_DMA_Start_IT+0x1bc>
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a1e      	ldr	r2, [pc, #120]	@ (800c000 <HAL_DMA_Start_IT+0x230>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d101      	bne.n	800bf90 <HAL_DMA_Start_IT+0x1c0>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e000      	b.n	800bf92 <HAL_DMA_Start_IT+0x1c2>
 800bf90:	2300      	movs	r3, #0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d036      	beq.n	800c004 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f023 021e 	bic.w	r2, r3, #30
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f042 0216 	orr.w	r2, r2, #22
 800bfa8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d03e      	beq.n	800c030 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f042 0208 	orr.w	r2, r2, #8
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	e035      	b.n	800c030 <HAL_DMA_Start_IT+0x260>
 800bfc4:	40020010 	.word	0x40020010
 800bfc8:	40020028 	.word	0x40020028
 800bfcc:	40020040 	.word	0x40020040
 800bfd0:	40020058 	.word	0x40020058
 800bfd4:	40020070 	.word	0x40020070
 800bfd8:	40020088 	.word	0x40020088
 800bfdc:	400200a0 	.word	0x400200a0
 800bfe0:	400200b8 	.word	0x400200b8
 800bfe4:	40020410 	.word	0x40020410
 800bfe8:	40020428 	.word	0x40020428
 800bfec:	40020440 	.word	0x40020440
 800bff0:	40020458 	.word	0x40020458
 800bff4:	40020470 	.word	0x40020470
 800bff8:	40020488 	.word	0x40020488
 800bffc:	400204a0 	.word	0x400204a0
 800c000:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f023 020e 	bic.w	r2, r3, #14
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f042 020a 	orr.w	r2, r2, #10
 800c016:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d007      	beq.n	800c030 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f042 0204 	orr.w	r2, r2, #4
 800c02e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a83      	ldr	r2, [pc, #524]	@ (800c244 <HAL_DMA_Start_IT+0x474>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d072      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a82      	ldr	r2, [pc, #520]	@ (800c248 <HAL_DMA_Start_IT+0x478>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d06d      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a80      	ldr	r2, [pc, #512]	@ (800c24c <HAL_DMA_Start_IT+0x47c>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d068      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a7f      	ldr	r2, [pc, #508]	@ (800c250 <HAL_DMA_Start_IT+0x480>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d063      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a7d      	ldr	r2, [pc, #500]	@ (800c254 <HAL_DMA_Start_IT+0x484>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d05e      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a7c      	ldr	r2, [pc, #496]	@ (800c258 <HAL_DMA_Start_IT+0x488>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d059      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a7a      	ldr	r2, [pc, #488]	@ (800c25c <HAL_DMA_Start_IT+0x48c>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d054      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a79      	ldr	r2, [pc, #484]	@ (800c260 <HAL_DMA_Start_IT+0x490>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d04f      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a77      	ldr	r2, [pc, #476]	@ (800c264 <HAL_DMA_Start_IT+0x494>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d04a      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a76      	ldr	r2, [pc, #472]	@ (800c268 <HAL_DMA_Start_IT+0x498>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d045      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a74      	ldr	r2, [pc, #464]	@ (800c26c <HAL_DMA_Start_IT+0x49c>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d040      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a73      	ldr	r2, [pc, #460]	@ (800c270 <HAL_DMA_Start_IT+0x4a0>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d03b      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a71      	ldr	r2, [pc, #452]	@ (800c274 <HAL_DMA_Start_IT+0x4a4>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d036      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a70      	ldr	r2, [pc, #448]	@ (800c278 <HAL_DMA_Start_IT+0x4a8>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d031      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a6e      	ldr	r2, [pc, #440]	@ (800c27c <HAL_DMA_Start_IT+0x4ac>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d02c      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a6d      	ldr	r2, [pc, #436]	@ (800c280 <HAL_DMA_Start_IT+0x4b0>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d027      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a6b      	ldr	r2, [pc, #428]	@ (800c284 <HAL_DMA_Start_IT+0x4b4>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d022      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	4a6a      	ldr	r2, [pc, #424]	@ (800c288 <HAL_DMA_Start_IT+0x4b8>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d01d      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a68      	ldr	r2, [pc, #416]	@ (800c28c <HAL_DMA_Start_IT+0x4bc>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d018      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a67      	ldr	r2, [pc, #412]	@ (800c290 <HAL_DMA_Start_IT+0x4c0>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d013      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a65      	ldr	r2, [pc, #404]	@ (800c294 <HAL_DMA_Start_IT+0x4c4>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d00e      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a64      	ldr	r2, [pc, #400]	@ (800c298 <HAL_DMA_Start_IT+0x4c8>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d009      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a62      	ldr	r2, [pc, #392]	@ (800c29c <HAL_DMA_Start_IT+0x4cc>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d004      	beq.n	800c120 <HAL_DMA_Start_IT+0x350>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a61      	ldr	r2, [pc, #388]	@ (800c2a0 <HAL_DMA_Start_IT+0x4d0>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d101      	bne.n	800c124 <HAL_DMA_Start_IT+0x354>
 800c120:	2301      	movs	r3, #1
 800c122:	e000      	b.n	800c126 <HAL_DMA_Start_IT+0x356>
 800c124:	2300      	movs	r3, #0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d01a      	beq.n	800c160 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d007      	beq.n	800c148 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c142:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c146:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d007      	beq.n	800c160 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c15a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c15e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a37      	ldr	r2, [pc, #220]	@ (800c244 <HAL_DMA_Start_IT+0x474>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d04a      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a36      	ldr	r2, [pc, #216]	@ (800c248 <HAL_DMA_Start_IT+0x478>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d045      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a34      	ldr	r2, [pc, #208]	@ (800c24c <HAL_DMA_Start_IT+0x47c>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d040      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a33      	ldr	r2, [pc, #204]	@ (800c250 <HAL_DMA_Start_IT+0x480>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d03b      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a31      	ldr	r2, [pc, #196]	@ (800c254 <HAL_DMA_Start_IT+0x484>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d036      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a30      	ldr	r2, [pc, #192]	@ (800c258 <HAL_DMA_Start_IT+0x488>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d031      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a2e      	ldr	r2, [pc, #184]	@ (800c25c <HAL_DMA_Start_IT+0x48c>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d02c      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a2d      	ldr	r2, [pc, #180]	@ (800c260 <HAL_DMA_Start_IT+0x490>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d027      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a2b      	ldr	r2, [pc, #172]	@ (800c264 <HAL_DMA_Start_IT+0x494>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d022      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a2a      	ldr	r2, [pc, #168]	@ (800c268 <HAL_DMA_Start_IT+0x498>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d01d      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a28      	ldr	r2, [pc, #160]	@ (800c26c <HAL_DMA_Start_IT+0x49c>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d018      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a27      	ldr	r2, [pc, #156]	@ (800c270 <HAL_DMA_Start_IT+0x4a0>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d013      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a25      	ldr	r2, [pc, #148]	@ (800c274 <HAL_DMA_Start_IT+0x4a4>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d00e      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a24      	ldr	r2, [pc, #144]	@ (800c278 <HAL_DMA_Start_IT+0x4a8>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d009      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a22      	ldr	r2, [pc, #136]	@ (800c27c <HAL_DMA_Start_IT+0x4ac>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d004      	beq.n	800c200 <HAL_DMA_Start_IT+0x430>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a21      	ldr	r2, [pc, #132]	@ (800c280 <HAL_DMA_Start_IT+0x4b0>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d108      	bne.n	800c212 <HAL_DMA_Start_IT+0x442>
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f042 0201 	orr.w	r2, r2, #1
 800c20e:	601a      	str	r2, [r3, #0]
 800c210:	e012      	b.n	800c238 <HAL_DMA_Start_IT+0x468>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f042 0201 	orr.w	r2, r2, #1
 800c220:	601a      	str	r2, [r3, #0]
 800c222:	e009      	b.n	800c238 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c22a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c238:	7dfb      	ldrb	r3, [r7, #23]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3718      	adds	r7, #24
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	40020010 	.word	0x40020010
 800c248:	40020028 	.word	0x40020028
 800c24c:	40020040 	.word	0x40020040
 800c250:	40020058 	.word	0x40020058
 800c254:	40020070 	.word	0x40020070
 800c258:	40020088 	.word	0x40020088
 800c25c:	400200a0 	.word	0x400200a0
 800c260:	400200b8 	.word	0x400200b8
 800c264:	40020410 	.word	0x40020410
 800c268:	40020428 	.word	0x40020428
 800c26c:	40020440 	.word	0x40020440
 800c270:	40020458 	.word	0x40020458
 800c274:	40020470 	.word	0x40020470
 800c278:	40020488 	.word	0x40020488
 800c27c:	400204a0 	.word	0x400204a0
 800c280:	400204b8 	.word	0x400204b8
 800c284:	58025408 	.word	0x58025408
 800c288:	5802541c 	.word	0x5802541c
 800c28c:	58025430 	.word	0x58025430
 800c290:	58025444 	.word	0x58025444
 800c294:	58025458 	.word	0x58025458
 800c298:	5802546c 	.word	0x5802546c
 800c29c:	58025480 	.word	0x58025480
 800c2a0:	58025494 	.word	0x58025494

0800c2a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b086      	sub	sp, #24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c2ac:	f7fd f902 	bl	80094b4 <HAL_GetTick>
 800c2b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d101      	bne.n	800c2bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e2dc      	b.n	800c876 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d008      	beq.n	800c2da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2280      	movs	r2, #128	@ 0x80
 800c2cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e2cd      	b.n	800c876 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a76      	ldr	r2, [pc, #472]	@ (800c4b8 <HAL_DMA_Abort+0x214>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d04a      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a74      	ldr	r2, [pc, #464]	@ (800c4bc <HAL_DMA_Abort+0x218>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d045      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4a73      	ldr	r2, [pc, #460]	@ (800c4c0 <HAL_DMA_Abort+0x21c>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d040      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a71      	ldr	r2, [pc, #452]	@ (800c4c4 <HAL_DMA_Abort+0x220>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d03b      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a70      	ldr	r2, [pc, #448]	@ (800c4c8 <HAL_DMA_Abort+0x224>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d036      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a6e      	ldr	r2, [pc, #440]	@ (800c4cc <HAL_DMA_Abort+0x228>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d031      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a6d      	ldr	r2, [pc, #436]	@ (800c4d0 <HAL_DMA_Abort+0x22c>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d02c      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a6b      	ldr	r2, [pc, #428]	@ (800c4d4 <HAL_DMA_Abort+0x230>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d027      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a6a      	ldr	r2, [pc, #424]	@ (800c4d8 <HAL_DMA_Abort+0x234>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d022      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a68      	ldr	r2, [pc, #416]	@ (800c4dc <HAL_DMA_Abort+0x238>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d01d      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a67      	ldr	r2, [pc, #412]	@ (800c4e0 <HAL_DMA_Abort+0x23c>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d018      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a65      	ldr	r2, [pc, #404]	@ (800c4e4 <HAL_DMA_Abort+0x240>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d013      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a64      	ldr	r2, [pc, #400]	@ (800c4e8 <HAL_DMA_Abort+0x244>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d00e      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a62      	ldr	r2, [pc, #392]	@ (800c4ec <HAL_DMA_Abort+0x248>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d009      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a61      	ldr	r2, [pc, #388]	@ (800c4f0 <HAL_DMA_Abort+0x24c>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d004      	beq.n	800c37a <HAL_DMA_Abort+0xd6>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a5f      	ldr	r2, [pc, #380]	@ (800c4f4 <HAL_DMA_Abort+0x250>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d101      	bne.n	800c37e <HAL_DMA_Abort+0xda>
 800c37a:	2301      	movs	r3, #1
 800c37c:	e000      	b.n	800c380 <HAL_DMA_Abort+0xdc>
 800c37e:	2300      	movs	r3, #0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d013      	beq.n	800c3ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f022 021e 	bic.w	r2, r2, #30
 800c392:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	695a      	ldr	r2, [r3, #20]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	617b      	str	r3, [r7, #20]
 800c3aa:	e00a      	b.n	800c3c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f022 020e 	bic.w	r2, r2, #14
 800c3ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a3c      	ldr	r2, [pc, #240]	@ (800c4b8 <HAL_DMA_Abort+0x214>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d072      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a3a      	ldr	r2, [pc, #232]	@ (800c4bc <HAL_DMA_Abort+0x218>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d06d      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a39      	ldr	r2, [pc, #228]	@ (800c4c0 <HAL_DMA_Abort+0x21c>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d068      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a37      	ldr	r2, [pc, #220]	@ (800c4c4 <HAL_DMA_Abort+0x220>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d063      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a36      	ldr	r2, [pc, #216]	@ (800c4c8 <HAL_DMA_Abort+0x224>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d05e      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a34      	ldr	r2, [pc, #208]	@ (800c4cc <HAL_DMA_Abort+0x228>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d059      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a33      	ldr	r2, [pc, #204]	@ (800c4d0 <HAL_DMA_Abort+0x22c>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d054      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a31      	ldr	r2, [pc, #196]	@ (800c4d4 <HAL_DMA_Abort+0x230>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d04f      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a30      	ldr	r2, [pc, #192]	@ (800c4d8 <HAL_DMA_Abort+0x234>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d04a      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a2e      	ldr	r2, [pc, #184]	@ (800c4dc <HAL_DMA_Abort+0x238>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d045      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a2d      	ldr	r2, [pc, #180]	@ (800c4e0 <HAL_DMA_Abort+0x23c>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d040      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a2b      	ldr	r2, [pc, #172]	@ (800c4e4 <HAL_DMA_Abort+0x240>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d03b      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a2a      	ldr	r2, [pc, #168]	@ (800c4e8 <HAL_DMA_Abort+0x244>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d036      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a28      	ldr	r2, [pc, #160]	@ (800c4ec <HAL_DMA_Abort+0x248>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d031      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a27      	ldr	r2, [pc, #156]	@ (800c4f0 <HAL_DMA_Abort+0x24c>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d02c      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a25      	ldr	r2, [pc, #148]	@ (800c4f4 <HAL_DMA_Abort+0x250>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d027      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a24      	ldr	r2, [pc, #144]	@ (800c4f8 <HAL_DMA_Abort+0x254>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d022      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a22      	ldr	r2, [pc, #136]	@ (800c4fc <HAL_DMA_Abort+0x258>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d01d      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a21      	ldr	r2, [pc, #132]	@ (800c500 <HAL_DMA_Abort+0x25c>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d018      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a1f      	ldr	r2, [pc, #124]	@ (800c504 <HAL_DMA_Abort+0x260>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d013      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a1e      	ldr	r2, [pc, #120]	@ (800c508 <HAL_DMA_Abort+0x264>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d00e      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4a1c      	ldr	r2, [pc, #112]	@ (800c50c <HAL_DMA_Abort+0x268>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d009      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a1b      	ldr	r2, [pc, #108]	@ (800c510 <HAL_DMA_Abort+0x26c>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d004      	beq.n	800c4b2 <HAL_DMA_Abort+0x20e>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a19      	ldr	r2, [pc, #100]	@ (800c514 <HAL_DMA_Abort+0x270>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d132      	bne.n	800c518 <HAL_DMA_Abort+0x274>
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e031      	b.n	800c51a <HAL_DMA_Abort+0x276>
 800c4b6:	bf00      	nop
 800c4b8:	40020010 	.word	0x40020010
 800c4bc:	40020028 	.word	0x40020028
 800c4c0:	40020040 	.word	0x40020040
 800c4c4:	40020058 	.word	0x40020058
 800c4c8:	40020070 	.word	0x40020070
 800c4cc:	40020088 	.word	0x40020088
 800c4d0:	400200a0 	.word	0x400200a0
 800c4d4:	400200b8 	.word	0x400200b8
 800c4d8:	40020410 	.word	0x40020410
 800c4dc:	40020428 	.word	0x40020428
 800c4e0:	40020440 	.word	0x40020440
 800c4e4:	40020458 	.word	0x40020458
 800c4e8:	40020470 	.word	0x40020470
 800c4ec:	40020488 	.word	0x40020488
 800c4f0:	400204a0 	.word	0x400204a0
 800c4f4:	400204b8 	.word	0x400204b8
 800c4f8:	58025408 	.word	0x58025408
 800c4fc:	5802541c 	.word	0x5802541c
 800c500:	58025430 	.word	0x58025430
 800c504:	58025444 	.word	0x58025444
 800c508:	58025458 	.word	0x58025458
 800c50c:	5802546c 	.word	0x5802546c
 800c510:	58025480 	.word	0x58025480
 800c514:	58025494 	.word	0x58025494
 800c518:	2300      	movs	r3, #0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d007      	beq.n	800c52e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c52c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a6d      	ldr	r2, [pc, #436]	@ (800c6e8 <HAL_DMA_Abort+0x444>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d04a      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a6b      	ldr	r2, [pc, #428]	@ (800c6ec <HAL_DMA_Abort+0x448>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d045      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a6a      	ldr	r2, [pc, #424]	@ (800c6f0 <HAL_DMA_Abort+0x44c>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d040      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a68      	ldr	r2, [pc, #416]	@ (800c6f4 <HAL_DMA_Abort+0x450>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d03b      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a67      	ldr	r2, [pc, #412]	@ (800c6f8 <HAL_DMA_Abort+0x454>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d036      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a65      	ldr	r2, [pc, #404]	@ (800c6fc <HAL_DMA_Abort+0x458>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d031      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a64      	ldr	r2, [pc, #400]	@ (800c700 <HAL_DMA_Abort+0x45c>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d02c      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a62      	ldr	r2, [pc, #392]	@ (800c704 <HAL_DMA_Abort+0x460>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d027      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a61      	ldr	r2, [pc, #388]	@ (800c708 <HAL_DMA_Abort+0x464>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d022      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a5f      	ldr	r2, [pc, #380]	@ (800c70c <HAL_DMA_Abort+0x468>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d01d      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a5e      	ldr	r2, [pc, #376]	@ (800c710 <HAL_DMA_Abort+0x46c>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d018      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a5c      	ldr	r2, [pc, #368]	@ (800c714 <HAL_DMA_Abort+0x470>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d013      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a5b      	ldr	r2, [pc, #364]	@ (800c718 <HAL_DMA_Abort+0x474>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d00e      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a59      	ldr	r2, [pc, #356]	@ (800c71c <HAL_DMA_Abort+0x478>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d009      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a58      	ldr	r2, [pc, #352]	@ (800c720 <HAL_DMA_Abort+0x47c>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d004      	beq.n	800c5ce <HAL_DMA_Abort+0x32a>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a56      	ldr	r2, [pc, #344]	@ (800c724 <HAL_DMA_Abort+0x480>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d108      	bne.n	800c5e0 <HAL_DMA_Abort+0x33c>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f022 0201 	bic.w	r2, r2, #1
 800c5dc:	601a      	str	r2, [r3, #0]
 800c5de:	e007      	b.n	800c5f0 <HAL_DMA_Abort+0x34c>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f022 0201 	bic.w	r2, r2, #1
 800c5ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c5f0:	e013      	b.n	800c61a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c5f2:	f7fc ff5f 	bl	80094b4 <HAL_GetTick>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	2b05      	cmp	r3, #5
 800c5fe:	d90c      	bls.n	800c61a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2220      	movs	r2, #32
 800c604:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2203      	movs	r2, #3
 800c60a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	e12d      	b.n	800c876 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1e5      	bne.n	800c5f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a2f      	ldr	r2, [pc, #188]	@ (800c6e8 <HAL_DMA_Abort+0x444>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d04a      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a2d      	ldr	r2, [pc, #180]	@ (800c6ec <HAL_DMA_Abort+0x448>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d045      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a2c      	ldr	r2, [pc, #176]	@ (800c6f0 <HAL_DMA_Abort+0x44c>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d040      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a2a      	ldr	r2, [pc, #168]	@ (800c6f4 <HAL_DMA_Abort+0x450>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d03b      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a29      	ldr	r2, [pc, #164]	@ (800c6f8 <HAL_DMA_Abort+0x454>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d036      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a27      	ldr	r2, [pc, #156]	@ (800c6fc <HAL_DMA_Abort+0x458>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d031      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a26      	ldr	r2, [pc, #152]	@ (800c700 <HAL_DMA_Abort+0x45c>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d02c      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a24      	ldr	r2, [pc, #144]	@ (800c704 <HAL_DMA_Abort+0x460>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d027      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a23      	ldr	r2, [pc, #140]	@ (800c708 <HAL_DMA_Abort+0x464>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d022      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a21      	ldr	r2, [pc, #132]	@ (800c70c <HAL_DMA_Abort+0x468>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d01d      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a20      	ldr	r2, [pc, #128]	@ (800c710 <HAL_DMA_Abort+0x46c>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d018      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a1e      	ldr	r2, [pc, #120]	@ (800c714 <HAL_DMA_Abort+0x470>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d013      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a1d      	ldr	r2, [pc, #116]	@ (800c718 <HAL_DMA_Abort+0x474>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d00e      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a1b      	ldr	r2, [pc, #108]	@ (800c71c <HAL_DMA_Abort+0x478>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d009      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a1a      	ldr	r2, [pc, #104]	@ (800c720 <HAL_DMA_Abort+0x47c>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d004      	beq.n	800c6c6 <HAL_DMA_Abort+0x422>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a18      	ldr	r2, [pc, #96]	@ (800c724 <HAL_DMA_Abort+0x480>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d101      	bne.n	800c6ca <HAL_DMA_Abort+0x426>
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	e000      	b.n	800c6cc <HAL_DMA_Abort+0x428>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d02b      	beq.n	800c728 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6da:	f003 031f 	and.w	r3, r3, #31
 800c6de:	223f      	movs	r2, #63	@ 0x3f
 800c6e0:	409a      	lsls	r2, r3
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	609a      	str	r2, [r3, #8]
 800c6e6:	e02a      	b.n	800c73e <HAL_DMA_Abort+0x49a>
 800c6e8:	40020010 	.word	0x40020010
 800c6ec:	40020028 	.word	0x40020028
 800c6f0:	40020040 	.word	0x40020040
 800c6f4:	40020058 	.word	0x40020058
 800c6f8:	40020070 	.word	0x40020070
 800c6fc:	40020088 	.word	0x40020088
 800c700:	400200a0 	.word	0x400200a0
 800c704:	400200b8 	.word	0x400200b8
 800c708:	40020410 	.word	0x40020410
 800c70c:	40020428 	.word	0x40020428
 800c710:	40020440 	.word	0x40020440
 800c714:	40020458 	.word	0x40020458
 800c718:	40020470 	.word	0x40020470
 800c71c:	40020488 	.word	0x40020488
 800c720:	400204a0 	.word	0x400204a0
 800c724:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c72c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c732:	f003 031f 	and.w	r3, r3, #31
 800c736:	2201      	movs	r2, #1
 800c738:	409a      	lsls	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4a4f      	ldr	r2, [pc, #316]	@ (800c880 <HAL_DMA_Abort+0x5dc>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d072      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a4d      	ldr	r2, [pc, #308]	@ (800c884 <HAL_DMA_Abort+0x5e0>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d06d      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a4c      	ldr	r2, [pc, #304]	@ (800c888 <HAL_DMA_Abort+0x5e4>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d068      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a4a      	ldr	r2, [pc, #296]	@ (800c88c <HAL_DMA_Abort+0x5e8>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d063      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a49      	ldr	r2, [pc, #292]	@ (800c890 <HAL_DMA_Abort+0x5ec>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d05e      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a47      	ldr	r2, [pc, #284]	@ (800c894 <HAL_DMA_Abort+0x5f0>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d059      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a46      	ldr	r2, [pc, #280]	@ (800c898 <HAL_DMA_Abort+0x5f4>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d054      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a44      	ldr	r2, [pc, #272]	@ (800c89c <HAL_DMA_Abort+0x5f8>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d04f      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a43      	ldr	r2, [pc, #268]	@ (800c8a0 <HAL_DMA_Abort+0x5fc>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d04a      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a41      	ldr	r2, [pc, #260]	@ (800c8a4 <HAL_DMA_Abort+0x600>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d045      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a40      	ldr	r2, [pc, #256]	@ (800c8a8 <HAL_DMA_Abort+0x604>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d040      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a3e      	ldr	r2, [pc, #248]	@ (800c8ac <HAL_DMA_Abort+0x608>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d03b      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a3d      	ldr	r2, [pc, #244]	@ (800c8b0 <HAL_DMA_Abort+0x60c>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d036      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a3b      	ldr	r2, [pc, #236]	@ (800c8b4 <HAL_DMA_Abort+0x610>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d031      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a3a      	ldr	r2, [pc, #232]	@ (800c8b8 <HAL_DMA_Abort+0x614>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d02c      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a38      	ldr	r2, [pc, #224]	@ (800c8bc <HAL_DMA_Abort+0x618>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d027      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a37      	ldr	r2, [pc, #220]	@ (800c8c0 <HAL_DMA_Abort+0x61c>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d022      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a35      	ldr	r2, [pc, #212]	@ (800c8c4 <HAL_DMA_Abort+0x620>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d01d      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a34      	ldr	r2, [pc, #208]	@ (800c8c8 <HAL_DMA_Abort+0x624>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d018      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a32      	ldr	r2, [pc, #200]	@ (800c8cc <HAL_DMA_Abort+0x628>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d013      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a31      	ldr	r2, [pc, #196]	@ (800c8d0 <HAL_DMA_Abort+0x62c>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d00e      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a2f      	ldr	r2, [pc, #188]	@ (800c8d4 <HAL_DMA_Abort+0x630>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d009      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a2e      	ldr	r2, [pc, #184]	@ (800c8d8 <HAL_DMA_Abort+0x634>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d004      	beq.n	800c82e <HAL_DMA_Abort+0x58a>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a2c      	ldr	r2, [pc, #176]	@ (800c8dc <HAL_DMA_Abort+0x638>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d101      	bne.n	800c832 <HAL_DMA_Abort+0x58e>
 800c82e:	2301      	movs	r3, #1
 800c830:	e000      	b.n	800c834 <HAL_DMA_Abort+0x590>
 800c832:	2300      	movs	r3, #0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d015      	beq.n	800c864 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c840:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d00c      	beq.n	800c864 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c854:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c858:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c862:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3718      	adds	r7, #24
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	40020010 	.word	0x40020010
 800c884:	40020028 	.word	0x40020028
 800c888:	40020040 	.word	0x40020040
 800c88c:	40020058 	.word	0x40020058
 800c890:	40020070 	.word	0x40020070
 800c894:	40020088 	.word	0x40020088
 800c898:	400200a0 	.word	0x400200a0
 800c89c:	400200b8 	.word	0x400200b8
 800c8a0:	40020410 	.word	0x40020410
 800c8a4:	40020428 	.word	0x40020428
 800c8a8:	40020440 	.word	0x40020440
 800c8ac:	40020458 	.word	0x40020458
 800c8b0:	40020470 	.word	0x40020470
 800c8b4:	40020488 	.word	0x40020488
 800c8b8:	400204a0 	.word	0x400204a0
 800c8bc:	400204b8 	.word	0x400204b8
 800c8c0:	58025408 	.word	0x58025408
 800c8c4:	5802541c 	.word	0x5802541c
 800c8c8:	58025430 	.word	0x58025430
 800c8cc:	58025444 	.word	0x58025444
 800c8d0:	58025458 	.word	0x58025458
 800c8d4:	5802546c 	.word	0x5802546c
 800c8d8:	58025480 	.word	0x58025480
 800c8dc:	58025494 	.word	0x58025494

0800c8e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e237      	b.n	800cd62 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d004      	beq.n	800c908 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2280      	movs	r2, #128	@ 0x80
 800c902:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e22c      	b.n	800cd62 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a5c      	ldr	r2, [pc, #368]	@ (800ca80 <HAL_DMA_Abort_IT+0x1a0>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d04a      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a5b      	ldr	r2, [pc, #364]	@ (800ca84 <HAL_DMA_Abort_IT+0x1a4>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d045      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a59      	ldr	r2, [pc, #356]	@ (800ca88 <HAL_DMA_Abort_IT+0x1a8>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d040      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a58      	ldr	r2, [pc, #352]	@ (800ca8c <HAL_DMA_Abort_IT+0x1ac>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d03b      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a56      	ldr	r2, [pc, #344]	@ (800ca90 <HAL_DMA_Abort_IT+0x1b0>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d036      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a55      	ldr	r2, [pc, #340]	@ (800ca94 <HAL_DMA_Abort_IT+0x1b4>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d031      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a53      	ldr	r2, [pc, #332]	@ (800ca98 <HAL_DMA_Abort_IT+0x1b8>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d02c      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a52      	ldr	r2, [pc, #328]	@ (800ca9c <HAL_DMA_Abort_IT+0x1bc>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d027      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a50      	ldr	r2, [pc, #320]	@ (800caa0 <HAL_DMA_Abort_IT+0x1c0>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d022      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a4f      	ldr	r2, [pc, #316]	@ (800caa4 <HAL_DMA_Abort_IT+0x1c4>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d01d      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a4d      	ldr	r2, [pc, #308]	@ (800caa8 <HAL_DMA_Abort_IT+0x1c8>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d018      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a4c      	ldr	r2, [pc, #304]	@ (800caac <HAL_DMA_Abort_IT+0x1cc>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d013      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a4a      	ldr	r2, [pc, #296]	@ (800cab0 <HAL_DMA_Abort_IT+0x1d0>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d00e      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4a49      	ldr	r2, [pc, #292]	@ (800cab4 <HAL_DMA_Abort_IT+0x1d4>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d009      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a47      	ldr	r2, [pc, #284]	@ (800cab8 <HAL_DMA_Abort_IT+0x1d8>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d004      	beq.n	800c9a8 <HAL_DMA_Abort_IT+0xc8>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a46      	ldr	r2, [pc, #280]	@ (800cabc <HAL_DMA_Abort_IT+0x1dc>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d101      	bne.n	800c9ac <HAL_DMA_Abort_IT+0xcc>
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e000      	b.n	800c9ae <HAL_DMA_Abort_IT+0xce>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 8086 	beq.w	800cac0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2204      	movs	r2, #4
 800c9b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a2f      	ldr	r2, [pc, #188]	@ (800ca80 <HAL_DMA_Abort_IT+0x1a0>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d04a      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a2e      	ldr	r2, [pc, #184]	@ (800ca84 <HAL_DMA_Abort_IT+0x1a4>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d045      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a2c      	ldr	r2, [pc, #176]	@ (800ca88 <HAL_DMA_Abort_IT+0x1a8>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d040      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	4a2b      	ldr	r2, [pc, #172]	@ (800ca8c <HAL_DMA_Abort_IT+0x1ac>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d03b      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a29      	ldr	r2, [pc, #164]	@ (800ca90 <HAL_DMA_Abort_IT+0x1b0>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d036      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a28      	ldr	r2, [pc, #160]	@ (800ca94 <HAL_DMA_Abort_IT+0x1b4>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d031      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a26      	ldr	r2, [pc, #152]	@ (800ca98 <HAL_DMA_Abort_IT+0x1b8>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d02c      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a25      	ldr	r2, [pc, #148]	@ (800ca9c <HAL_DMA_Abort_IT+0x1bc>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d027      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a23      	ldr	r2, [pc, #140]	@ (800caa0 <HAL_DMA_Abort_IT+0x1c0>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d022      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a22      	ldr	r2, [pc, #136]	@ (800caa4 <HAL_DMA_Abort_IT+0x1c4>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d01d      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a20      	ldr	r2, [pc, #128]	@ (800caa8 <HAL_DMA_Abort_IT+0x1c8>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d018      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a1f      	ldr	r2, [pc, #124]	@ (800caac <HAL_DMA_Abort_IT+0x1cc>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d013      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a1d      	ldr	r2, [pc, #116]	@ (800cab0 <HAL_DMA_Abort_IT+0x1d0>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d00e      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a1c      	ldr	r2, [pc, #112]	@ (800cab4 <HAL_DMA_Abort_IT+0x1d4>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d009      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a1a      	ldr	r2, [pc, #104]	@ (800cab8 <HAL_DMA_Abort_IT+0x1d8>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d004      	beq.n	800ca5c <HAL_DMA_Abort_IT+0x17c>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a19      	ldr	r2, [pc, #100]	@ (800cabc <HAL_DMA_Abort_IT+0x1dc>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d108      	bne.n	800ca6e <HAL_DMA_Abort_IT+0x18e>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f022 0201 	bic.w	r2, r2, #1
 800ca6a:	601a      	str	r2, [r3, #0]
 800ca6c:	e178      	b.n	800cd60 <HAL_DMA_Abort_IT+0x480>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f022 0201 	bic.w	r2, r2, #1
 800ca7c:	601a      	str	r2, [r3, #0]
 800ca7e:	e16f      	b.n	800cd60 <HAL_DMA_Abort_IT+0x480>
 800ca80:	40020010 	.word	0x40020010
 800ca84:	40020028 	.word	0x40020028
 800ca88:	40020040 	.word	0x40020040
 800ca8c:	40020058 	.word	0x40020058
 800ca90:	40020070 	.word	0x40020070
 800ca94:	40020088 	.word	0x40020088
 800ca98:	400200a0 	.word	0x400200a0
 800ca9c:	400200b8 	.word	0x400200b8
 800caa0:	40020410 	.word	0x40020410
 800caa4:	40020428 	.word	0x40020428
 800caa8:	40020440 	.word	0x40020440
 800caac:	40020458 	.word	0x40020458
 800cab0:	40020470 	.word	0x40020470
 800cab4:	40020488 	.word	0x40020488
 800cab8:	400204a0 	.word	0x400204a0
 800cabc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f022 020e 	bic.w	r2, r2, #14
 800cace:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a6c      	ldr	r2, [pc, #432]	@ (800cc88 <HAL_DMA_Abort_IT+0x3a8>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d04a      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a6b      	ldr	r2, [pc, #428]	@ (800cc8c <HAL_DMA_Abort_IT+0x3ac>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d045      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a69      	ldr	r2, [pc, #420]	@ (800cc90 <HAL_DMA_Abort_IT+0x3b0>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d040      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a68      	ldr	r2, [pc, #416]	@ (800cc94 <HAL_DMA_Abort_IT+0x3b4>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d03b      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a66      	ldr	r2, [pc, #408]	@ (800cc98 <HAL_DMA_Abort_IT+0x3b8>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d036      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a65      	ldr	r2, [pc, #404]	@ (800cc9c <HAL_DMA_Abort_IT+0x3bc>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d031      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a63      	ldr	r2, [pc, #396]	@ (800cca0 <HAL_DMA_Abort_IT+0x3c0>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d02c      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a62      	ldr	r2, [pc, #392]	@ (800cca4 <HAL_DMA_Abort_IT+0x3c4>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d027      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a60      	ldr	r2, [pc, #384]	@ (800cca8 <HAL_DMA_Abort_IT+0x3c8>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d022      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a5f      	ldr	r2, [pc, #380]	@ (800ccac <HAL_DMA_Abort_IT+0x3cc>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d01d      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a5d      	ldr	r2, [pc, #372]	@ (800ccb0 <HAL_DMA_Abort_IT+0x3d0>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d018      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a5c      	ldr	r2, [pc, #368]	@ (800ccb4 <HAL_DMA_Abort_IT+0x3d4>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d013      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a5a      	ldr	r2, [pc, #360]	@ (800ccb8 <HAL_DMA_Abort_IT+0x3d8>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d00e      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a59      	ldr	r2, [pc, #356]	@ (800ccbc <HAL_DMA_Abort_IT+0x3dc>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d009      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a57      	ldr	r2, [pc, #348]	@ (800ccc0 <HAL_DMA_Abort_IT+0x3e0>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d004      	beq.n	800cb70 <HAL_DMA_Abort_IT+0x290>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a56      	ldr	r2, [pc, #344]	@ (800ccc4 <HAL_DMA_Abort_IT+0x3e4>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d108      	bne.n	800cb82 <HAL_DMA_Abort_IT+0x2a2>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f022 0201 	bic.w	r2, r2, #1
 800cb7e:	601a      	str	r2, [r3, #0]
 800cb80:	e007      	b.n	800cb92 <HAL_DMA_Abort_IT+0x2b2>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f022 0201 	bic.w	r2, r2, #1
 800cb90:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a3c      	ldr	r2, [pc, #240]	@ (800cc88 <HAL_DMA_Abort_IT+0x3a8>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d072      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a3a      	ldr	r2, [pc, #232]	@ (800cc8c <HAL_DMA_Abort_IT+0x3ac>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d06d      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a39      	ldr	r2, [pc, #228]	@ (800cc90 <HAL_DMA_Abort_IT+0x3b0>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d068      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a37      	ldr	r2, [pc, #220]	@ (800cc94 <HAL_DMA_Abort_IT+0x3b4>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d063      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a36      	ldr	r2, [pc, #216]	@ (800cc98 <HAL_DMA_Abort_IT+0x3b8>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d05e      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a34      	ldr	r2, [pc, #208]	@ (800cc9c <HAL_DMA_Abort_IT+0x3bc>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d059      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a33      	ldr	r2, [pc, #204]	@ (800cca0 <HAL_DMA_Abort_IT+0x3c0>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d054      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a31      	ldr	r2, [pc, #196]	@ (800cca4 <HAL_DMA_Abort_IT+0x3c4>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d04f      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a30      	ldr	r2, [pc, #192]	@ (800cca8 <HAL_DMA_Abort_IT+0x3c8>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d04a      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a2e      	ldr	r2, [pc, #184]	@ (800ccac <HAL_DMA_Abort_IT+0x3cc>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d045      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a2d      	ldr	r2, [pc, #180]	@ (800ccb0 <HAL_DMA_Abort_IT+0x3d0>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d040      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a2b      	ldr	r2, [pc, #172]	@ (800ccb4 <HAL_DMA_Abort_IT+0x3d4>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d03b      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a2a      	ldr	r2, [pc, #168]	@ (800ccb8 <HAL_DMA_Abort_IT+0x3d8>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d036      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a28      	ldr	r2, [pc, #160]	@ (800ccbc <HAL_DMA_Abort_IT+0x3dc>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d031      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a27      	ldr	r2, [pc, #156]	@ (800ccc0 <HAL_DMA_Abort_IT+0x3e0>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d02c      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a25      	ldr	r2, [pc, #148]	@ (800ccc4 <HAL_DMA_Abort_IT+0x3e4>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d027      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a24      	ldr	r2, [pc, #144]	@ (800ccc8 <HAL_DMA_Abort_IT+0x3e8>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d022      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a22      	ldr	r2, [pc, #136]	@ (800cccc <HAL_DMA_Abort_IT+0x3ec>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d01d      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a21      	ldr	r2, [pc, #132]	@ (800ccd0 <HAL_DMA_Abort_IT+0x3f0>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d018      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a1f      	ldr	r2, [pc, #124]	@ (800ccd4 <HAL_DMA_Abort_IT+0x3f4>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d013      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a1e      	ldr	r2, [pc, #120]	@ (800ccd8 <HAL_DMA_Abort_IT+0x3f8>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d00e      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a1c      	ldr	r2, [pc, #112]	@ (800ccdc <HAL_DMA_Abort_IT+0x3fc>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d009      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a1b      	ldr	r2, [pc, #108]	@ (800cce0 <HAL_DMA_Abort_IT+0x400>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d004      	beq.n	800cc82 <HAL_DMA_Abort_IT+0x3a2>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a19      	ldr	r2, [pc, #100]	@ (800cce4 <HAL_DMA_Abort_IT+0x404>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d132      	bne.n	800cce8 <HAL_DMA_Abort_IT+0x408>
 800cc82:	2301      	movs	r3, #1
 800cc84:	e031      	b.n	800ccea <HAL_DMA_Abort_IT+0x40a>
 800cc86:	bf00      	nop
 800cc88:	40020010 	.word	0x40020010
 800cc8c:	40020028 	.word	0x40020028
 800cc90:	40020040 	.word	0x40020040
 800cc94:	40020058 	.word	0x40020058
 800cc98:	40020070 	.word	0x40020070
 800cc9c:	40020088 	.word	0x40020088
 800cca0:	400200a0 	.word	0x400200a0
 800cca4:	400200b8 	.word	0x400200b8
 800cca8:	40020410 	.word	0x40020410
 800ccac:	40020428 	.word	0x40020428
 800ccb0:	40020440 	.word	0x40020440
 800ccb4:	40020458 	.word	0x40020458
 800ccb8:	40020470 	.word	0x40020470
 800ccbc:	40020488 	.word	0x40020488
 800ccc0:	400204a0 	.word	0x400204a0
 800ccc4:	400204b8 	.word	0x400204b8
 800ccc8:	58025408 	.word	0x58025408
 800cccc:	5802541c 	.word	0x5802541c
 800ccd0:	58025430 	.word	0x58025430
 800ccd4:	58025444 	.word	0x58025444
 800ccd8:	58025458 	.word	0x58025458
 800ccdc:	5802546c 	.word	0x5802546c
 800cce0:	58025480 	.word	0x58025480
 800cce4:	58025494 	.word	0x58025494
 800cce8:	2300      	movs	r3, #0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d028      	beq.n	800cd40 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ccf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ccfc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd08:	f003 031f 	and.w	r3, r3, #31
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	409a      	lsls	r2, r3
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800cd1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00c      	beq.n	800cd40 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800cd3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d003      	beq.n	800cd60 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop

0800cd6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b08a      	sub	sp, #40	@ 0x28
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800cd74:	2300      	movs	r3, #0
 800cd76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cd78:	4b67      	ldr	r3, [pc, #412]	@ (800cf18 <HAL_DMA_IRQHandler+0x1ac>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a67      	ldr	r2, [pc, #412]	@ (800cf1c <HAL_DMA_IRQHandler+0x1b0>)
 800cd7e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd82:	0a9b      	lsrs	r3, r3, #10
 800cd84:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd8a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd90:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800cd92:	6a3b      	ldr	r3, [r7, #32]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a5f      	ldr	r2, [pc, #380]	@ (800cf20 <HAL_DMA_IRQHandler+0x1b4>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d04a      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a5d      	ldr	r2, [pc, #372]	@ (800cf24 <HAL_DMA_IRQHandler+0x1b8>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d045      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a5c      	ldr	r2, [pc, #368]	@ (800cf28 <HAL_DMA_IRQHandler+0x1bc>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d040      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a5a      	ldr	r2, [pc, #360]	@ (800cf2c <HAL_DMA_IRQHandler+0x1c0>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d03b      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a59      	ldr	r2, [pc, #356]	@ (800cf30 <HAL_DMA_IRQHandler+0x1c4>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d036      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a57      	ldr	r2, [pc, #348]	@ (800cf34 <HAL_DMA_IRQHandler+0x1c8>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d031      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a56      	ldr	r2, [pc, #344]	@ (800cf38 <HAL_DMA_IRQHandler+0x1cc>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d02c      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a54      	ldr	r2, [pc, #336]	@ (800cf3c <HAL_DMA_IRQHandler+0x1d0>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d027      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a53      	ldr	r2, [pc, #332]	@ (800cf40 <HAL_DMA_IRQHandler+0x1d4>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d022      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a51      	ldr	r2, [pc, #324]	@ (800cf44 <HAL_DMA_IRQHandler+0x1d8>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d01d      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a50      	ldr	r2, [pc, #320]	@ (800cf48 <HAL_DMA_IRQHandler+0x1dc>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d018      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a4e      	ldr	r2, [pc, #312]	@ (800cf4c <HAL_DMA_IRQHandler+0x1e0>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d013      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a4d      	ldr	r2, [pc, #308]	@ (800cf50 <HAL_DMA_IRQHandler+0x1e4>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d00e      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a4b      	ldr	r2, [pc, #300]	@ (800cf54 <HAL_DMA_IRQHandler+0x1e8>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d009      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a4a      	ldr	r2, [pc, #296]	@ (800cf58 <HAL_DMA_IRQHandler+0x1ec>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d004      	beq.n	800ce3e <HAL_DMA_IRQHandler+0xd2>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a48      	ldr	r2, [pc, #288]	@ (800cf5c <HAL_DMA_IRQHandler+0x1f0>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d101      	bne.n	800ce42 <HAL_DMA_IRQHandler+0xd6>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e000      	b.n	800ce44 <HAL_DMA_IRQHandler+0xd8>
 800ce42:	2300      	movs	r3, #0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 842b 	beq.w	800d6a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce4e:	f003 031f 	and.w	r3, r3, #31
 800ce52:	2208      	movs	r2, #8
 800ce54:	409a      	lsls	r2, r3
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	4013      	ands	r3, r2
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f000 80a2 	beq.w	800cfa4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a2e      	ldr	r2, [pc, #184]	@ (800cf20 <HAL_DMA_IRQHandler+0x1b4>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d04a      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a2d      	ldr	r2, [pc, #180]	@ (800cf24 <HAL_DMA_IRQHandler+0x1b8>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d045      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a2b      	ldr	r2, [pc, #172]	@ (800cf28 <HAL_DMA_IRQHandler+0x1bc>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d040      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a2a      	ldr	r2, [pc, #168]	@ (800cf2c <HAL_DMA_IRQHandler+0x1c0>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d03b      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a28      	ldr	r2, [pc, #160]	@ (800cf30 <HAL_DMA_IRQHandler+0x1c4>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d036      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a27      	ldr	r2, [pc, #156]	@ (800cf34 <HAL_DMA_IRQHandler+0x1c8>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d031      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a25      	ldr	r2, [pc, #148]	@ (800cf38 <HAL_DMA_IRQHandler+0x1cc>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d02c      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a24      	ldr	r2, [pc, #144]	@ (800cf3c <HAL_DMA_IRQHandler+0x1d0>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d027      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a22      	ldr	r2, [pc, #136]	@ (800cf40 <HAL_DMA_IRQHandler+0x1d4>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d022      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a21      	ldr	r2, [pc, #132]	@ (800cf44 <HAL_DMA_IRQHandler+0x1d8>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d01d      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a1f      	ldr	r2, [pc, #124]	@ (800cf48 <HAL_DMA_IRQHandler+0x1dc>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d018      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a1e      	ldr	r2, [pc, #120]	@ (800cf4c <HAL_DMA_IRQHandler+0x1e0>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d013      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a1c      	ldr	r2, [pc, #112]	@ (800cf50 <HAL_DMA_IRQHandler+0x1e4>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d00e      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a1b      	ldr	r2, [pc, #108]	@ (800cf54 <HAL_DMA_IRQHandler+0x1e8>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d009      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a19      	ldr	r2, [pc, #100]	@ (800cf58 <HAL_DMA_IRQHandler+0x1ec>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d004      	beq.n	800cf00 <HAL_DMA_IRQHandler+0x194>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a18      	ldr	r2, [pc, #96]	@ (800cf5c <HAL_DMA_IRQHandler+0x1f0>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d12f      	bne.n	800cf60 <HAL_DMA_IRQHandler+0x1f4>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f003 0304 	and.w	r3, r3, #4
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	bf14      	ite	ne
 800cf0e:	2301      	movne	r3, #1
 800cf10:	2300      	moveq	r3, #0
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	e02e      	b.n	800cf74 <HAL_DMA_IRQHandler+0x208>
 800cf16:	bf00      	nop
 800cf18:	24000004 	.word	0x24000004
 800cf1c:	1b4e81b5 	.word	0x1b4e81b5
 800cf20:	40020010 	.word	0x40020010
 800cf24:	40020028 	.word	0x40020028
 800cf28:	40020040 	.word	0x40020040
 800cf2c:	40020058 	.word	0x40020058
 800cf30:	40020070 	.word	0x40020070
 800cf34:	40020088 	.word	0x40020088
 800cf38:	400200a0 	.word	0x400200a0
 800cf3c:	400200b8 	.word	0x400200b8
 800cf40:	40020410 	.word	0x40020410
 800cf44:	40020428 	.word	0x40020428
 800cf48:	40020440 	.word	0x40020440
 800cf4c:	40020458 	.word	0x40020458
 800cf50:	40020470 	.word	0x40020470
 800cf54:	40020488 	.word	0x40020488
 800cf58:	400204a0 	.word	0x400204a0
 800cf5c:	400204b8 	.word	0x400204b8
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 0308 	and.w	r3, r3, #8
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	bf14      	ite	ne
 800cf6e:	2301      	movne	r3, #1
 800cf70:	2300      	moveq	r3, #0
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d015      	beq.n	800cfa4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f022 0204 	bic.w	r2, r2, #4
 800cf86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf8c:	f003 031f 	and.w	r3, r3, #31
 800cf90:	2208      	movs	r2, #8
 800cf92:	409a      	lsls	r2, r3
 800cf94:	6a3b      	ldr	r3, [r7, #32]
 800cf96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf9c:	f043 0201 	orr.w	r2, r3, #1
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfa8:	f003 031f 	and.w	r3, r3, #31
 800cfac:	69ba      	ldr	r2, [r7, #24]
 800cfae:	fa22 f303 	lsr.w	r3, r2, r3
 800cfb2:	f003 0301 	and.w	r3, r3, #1
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d06e      	beq.n	800d098 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a69      	ldr	r2, [pc, #420]	@ (800d164 <HAL_DMA_IRQHandler+0x3f8>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d04a      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a67      	ldr	r2, [pc, #412]	@ (800d168 <HAL_DMA_IRQHandler+0x3fc>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d045      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a66      	ldr	r2, [pc, #408]	@ (800d16c <HAL_DMA_IRQHandler+0x400>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d040      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a64      	ldr	r2, [pc, #400]	@ (800d170 <HAL_DMA_IRQHandler+0x404>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d03b      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a63      	ldr	r2, [pc, #396]	@ (800d174 <HAL_DMA_IRQHandler+0x408>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d036      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a61      	ldr	r2, [pc, #388]	@ (800d178 <HAL_DMA_IRQHandler+0x40c>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d031      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a60      	ldr	r2, [pc, #384]	@ (800d17c <HAL_DMA_IRQHandler+0x410>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d02c      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a5e      	ldr	r2, [pc, #376]	@ (800d180 <HAL_DMA_IRQHandler+0x414>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d027      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a5d      	ldr	r2, [pc, #372]	@ (800d184 <HAL_DMA_IRQHandler+0x418>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d022      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a5b      	ldr	r2, [pc, #364]	@ (800d188 <HAL_DMA_IRQHandler+0x41c>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d01d      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a5a      	ldr	r2, [pc, #360]	@ (800d18c <HAL_DMA_IRQHandler+0x420>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d018      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a58      	ldr	r2, [pc, #352]	@ (800d190 <HAL_DMA_IRQHandler+0x424>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d013      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a57      	ldr	r2, [pc, #348]	@ (800d194 <HAL_DMA_IRQHandler+0x428>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d00e      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a55      	ldr	r2, [pc, #340]	@ (800d198 <HAL_DMA_IRQHandler+0x42c>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d009      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4a54      	ldr	r2, [pc, #336]	@ (800d19c <HAL_DMA_IRQHandler+0x430>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d004      	beq.n	800d05a <HAL_DMA_IRQHandler+0x2ee>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a52      	ldr	r2, [pc, #328]	@ (800d1a0 <HAL_DMA_IRQHandler+0x434>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d10a      	bne.n	800d070 <HAL_DMA_IRQHandler+0x304>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	695b      	ldr	r3, [r3, #20]
 800d060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d064:	2b00      	cmp	r3, #0
 800d066:	bf14      	ite	ne
 800d068:	2301      	movne	r3, #1
 800d06a:	2300      	moveq	r3, #0
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	e003      	b.n	800d078 <HAL_DMA_IRQHandler+0x30c>
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2300      	movs	r3, #0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00d      	beq.n	800d098 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d080:	f003 031f 	and.w	r3, r3, #31
 800d084:	2201      	movs	r2, #1
 800d086:	409a      	lsls	r2, r3
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d090:	f043 0202 	orr.w	r2, r3, #2
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d09c:	f003 031f 	and.w	r3, r3, #31
 800d0a0:	2204      	movs	r2, #4
 800d0a2:	409a      	lsls	r2, r3
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f000 808f 	beq.w	800d1cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a2c      	ldr	r2, [pc, #176]	@ (800d164 <HAL_DMA_IRQHandler+0x3f8>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d04a      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a2a      	ldr	r2, [pc, #168]	@ (800d168 <HAL_DMA_IRQHandler+0x3fc>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d045      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a29      	ldr	r2, [pc, #164]	@ (800d16c <HAL_DMA_IRQHandler+0x400>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d040      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a27      	ldr	r2, [pc, #156]	@ (800d170 <HAL_DMA_IRQHandler+0x404>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d03b      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4a26      	ldr	r2, [pc, #152]	@ (800d174 <HAL_DMA_IRQHandler+0x408>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d036      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a24      	ldr	r2, [pc, #144]	@ (800d178 <HAL_DMA_IRQHandler+0x40c>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d031      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4a23      	ldr	r2, [pc, #140]	@ (800d17c <HAL_DMA_IRQHandler+0x410>)
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d02c      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a21      	ldr	r2, [pc, #132]	@ (800d180 <HAL_DMA_IRQHandler+0x414>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d027      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4a20      	ldr	r2, [pc, #128]	@ (800d184 <HAL_DMA_IRQHandler+0x418>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d022      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a1e      	ldr	r2, [pc, #120]	@ (800d188 <HAL_DMA_IRQHandler+0x41c>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d01d      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4a1d      	ldr	r2, [pc, #116]	@ (800d18c <HAL_DMA_IRQHandler+0x420>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d018      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a1b      	ldr	r2, [pc, #108]	@ (800d190 <HAL_DMA_IRQHandler+0x424>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d013      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a1a      	ldr	r2, [pc, #104]	@ (800d194 <HAL_DMA_IRQHandler+0x428>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d00e      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a18      	ldr	r2, [pc, #96]	@ (800d198 <HAL_DMA_IRQHandler+0x42c>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d009      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4a17      	ldr	r2, [pc, #92]	@ (800d19c <HAL_DMA_IRQHandler+0x430>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d004      	beq.n	800d14e <HAL_DMA_IRQHandler+0x3e2>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a15      	ldr	r2, [pc, #84]	@ (800d1a0 <HAL_DMA_IRQHandler+0x434>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d12a      	bne.n	800d1a4 <HAL_DMA_IRQHandler+0x438>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f003 0302 	and.w	r3, r3, #2
 800d158:	2b00      	cmp	r3, #0
 800d15a:	bf14      	ite	ne
 800d15c:	2301      	movne	r3, #1
 800d15e:	2300      	moveq	r3, #0
 800d160:	b2db      	uxtb	r3, r3
 800d162:	e023      	b.n	800d1ac <HAL_DMA_IRQHandler+0x440>
 800d164:	40020010 	.word	0x40020010
 800d168:	40020028 	.word	0x40020028
 800d16c:	40020040 	.word	0x40020040
 800d170:	40020058 	.word	0x40020058
 800d174:	40020070 	.word	0x40020070
 800d178:	40020088 	.word	0x40020088
 800d17c:	400200a0 	.word	0x400200a0
 800d180:	400200b8 	.word	0x400200b8
 800d184:	40020410 	.word	0x40020410
 800d188:	40020428 	.word	0x40020428
 800d18c:	40020440 	.word	0x40020440
 800d190:	40020458 	.word	0x40020458
 800d194:	40020470 	.word	0x40020470
 800d198:	40020488 	.word	0x40020488
 800d19c:	400204a0 	.word	0x400204a0
 800d1a0:	400204b8 	.word	0x400204b8
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00d      	beq.n	800d1cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1b4:	f003 031f 	and.w	r3, r3, #31
 800d1b8:	2204      	movs	r2, #4
 800d1ba:	409a      	lsls	r2, r3
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1c4:	f043 0204 	orr.w	r2, r3, #4
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d1d0:	f003 031f 	and.w	r3, r3, #31
 800d1d4:	2210      	movs	r2, #16
 800d1d6:	409a      	lsls	r2, r3
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	4013      	ands	r3, r2
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	f000 80a6 	beq.w	800d32e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a85      	ldr	r2, [pc, #532]	@ (800d3fc <HAL_DMA_IRQHandler+0x690>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d04a      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4a83      	ldr	r2, [pc, #524]	@ (800d400 <HAL_DMA_IRQHandler+0x694>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d045      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a82      	ldr	r2, [pc, #520]	@ (800d404 <HAL_DMA_IRQHandler+0x698>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d040      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a80      	ldr	r2, [pc, #512]	@ (800d408 <HAL_DMA_IRQHandler+0x69c>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d03b      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4a7f      	ldr	r2, [pc, #508]	@ (800d40c <HAL_DMA_IRQHandler+0x6a0>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d036      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a7d      	ldr	r2, [pc, #500]	@ (800d410 <HAL_DMA_IRQHandler+0x6a4>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d031      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a7c      	ldr	r2, [pc, #496]	@ (800d414 <HAL_DMA_IRQHandler+0x6a8>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d02c      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a7a      	ldr	r2, [pc, #488]	@ (800d418 <HAL_DMA_IRQHandler+0x6ac>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d027      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4a79      	ldr	r2, [pc, #484]	@ (800d41c <HAL_DMA_IRQHandler+0x6b0>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d022      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a77      	ldr	r2, [pc, #476]	@ (800d420 <HAL_DMA_IRQHandler+0x6b4>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d01d      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a76      	ldr	r2, [pc, #472]	@ (800d424 <HAL_DMA_IRQHandler+0x6b8>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d018      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a74      	ldr	r2, [pc, #464]	@ (800d428 <HAL_DMA_IRQHandler+0x6bc>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d013      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a73      	ldr	r2, [pc, #460]	@ (800d42c <HAL_DMA_IRQHandler+0x6c0>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d00e      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a71      	ldr	r2, [pc, #452]	@ (800d430 <HAL_DMA_IRQHandler+0x6c4>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d009      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a70      	ldr	r2, [pc, #448]	@ (800d434 <HAL_DMA_IRQHandler+0x6c8>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d004      	beq.n	800d282 <HAL_DMA_IRQHandler+0x516>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a6e      	ldr	r2, [pc, #440]	@ (800d438 <HAL_DMA_IRQHandler+0x6cc>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d10a      	bne.n	800d298 <HAL_DMA_IRQHandler+0x52c>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f003 0308 	and.w	r3, r3, #8
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	bf14      	ite	ne
 800d290:	2301      	movne	r3, #1
 800d292:	2300      	moveq	r3, #0
 800d294:	b2db      	uxtb	r3, r3
 800d296:	e009      	b.n	800d2ac <HAL_DMA_IRQHandler+0x540>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f003 0304 	and.w	r3, r3, #4
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	bf14      	ite	ne
 800d2a6:	2301      	movne	r3, #1
 800d2a8:	2300      	moveq	r3, #0
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d03e      	beq.n	800d32e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2b4:	f003 031f 	and.w	r3, r3, #31
 800d2b8:	2210      	movs	r2, #16
 800d2ba:	409a      	lsls	r2, r3
 800d2bc:	6a3b      	ldr	r3, [r7, #32]
 800d2be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d018      	beq.n	800d300 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d108      	bne.n	800d2ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d024      	beq.n	800d32e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	4798      	blx	r3
 800d2ec:	e01f      	b.n	800d32e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d01b      	beq.n	800d32e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	4798      	blx	r3
 800d2fe:	e016      	b.n	800d32e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d107      	bne.n	800d31e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f022 0208 	bic.w	r2, r2, #8
 800d31c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d322:	2b00      	cmp	r3, #0
 800d324:	d003      	beq.n	800d32e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d332:	f003 031f 	and.w	r3, r3, #31
 800d336:	2220      	movs	r2, #32
 800d338:	409a      	lsls	r2, r3
 800d33a:	69bb      	ldr	r3, [r7, #24]
 800d33c:	4013      	ands	r3, r2
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f000 8110 	beq.w	800d564 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a2c      	ldr	r2, [pc, #176]	@ (800d3fc <HAL_DMA_IRQHandler+0x690>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d04a      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	4a2b      	ldr	r2, [pc, #172]	@ (800d400 <HAL_DMA_IRQHandler+0x694>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d045      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a29      	ldr	r2, [pc, #164]	@ (800d404 <HAL_DMA_IRQHandler+0x698>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d040      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4a28      	ldr	r2, [pc, #160]	@ (800d408 <HAL_DMA_IRQHandler+0x69c>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d03b      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a26      	ldr	r2, [pc, #152]	@ (800d40c <HAL_DMA_IRQHandler+0x6a0>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d036      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a25      	ldr	r2, [pc, #148]	@ (800d410 <HAL_DMA_IRQHandler+0x6a4>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d031      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a23      	ldr	r2, [pc, #140]	@ (800d414 <HAL_DMA_IRQHandler+0x6a8>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d02c      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a22      	ldr	r2, [pc, #136]	@ (800d418 <HAL_DMA_IRQHandler+0x6ac>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d027      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a20      	ldr	r2, [pc, #128]	@ (800d41c <HAL_DMA_IRQHandler+0x6b0>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d022      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a1f      	ldr	r2, [pc, #124]	@ (800d420 <HAL_DMA_IRQHandler+0x6b4>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d01d      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a1d      	ldr	r2, [pc, #116]	@ (800d424 <HAL_DMA_IRQHandler+0x6b8>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d018      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a1c      	ldr	r2, [pc, #112]	@ (800d428 <HAL_DMA_IRQHandler+0x6bc>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d013      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a1a      	ldr	r2, [pc, #104]	@ (800d42c <HAL_DMA_IRQHandler+0x6c0>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d00e      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	4a19      	ldr	r2, [pc, #100]	@ (800d430 <HAL_DMA_IRQHandler+0x6c4>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d009      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a17      	ldr	r2, [pc, #92]	@ (800d434 <HAL_DMA_IRQHandler+0x6c8>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d004      	beq.n	800d3e4 <HAL_DMA_IRQHandler+0x678>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a16      	ldr	r2, [pc, #88]	@ (800d438 <HAL_DMA_IRQHandler+0x6cc>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d12b      	bne.n	800d43c <HAL_DMA_IRQHandler+0x6d0>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 0310 	and.w	r3, r3, #16
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	bf14      	ite	ne
 800d3f2:	2301      	movne	r3, #1
 800d3f4:	2300      	moveq	r3, #0
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	e02a      	b.n	800d450 <HAL_DMA_IRQHandler+0x6e4>
 800d3fa:	bf00      	nop
 800d3fc:	40020010 	.word	0x40020010
 800d400:	40020028 	.word	0x40020028
 800d404:	40020040 	.word	0x40020040
 800d408:	40020058 	.word	0x40020058
 800d40c:	40020070 	.word	0x40020070
 800d410:	40020088 	.word	0x40020088
 800d414:	400200a0 	.word	0x400200a0
 800d418:	400200b8 	.word	0x400200b8
 800d41c:	40020410 	.word	0x40020410
 800d420:	40020428 	.word	0x40020428
 800d424:	40020440 	.word	0x40020440
 800d428:	40020458 	.word	0x40020458
 800d42c:	40020470 	.word	0x40020470
 800d430:	40020488 	.word	0x40020488
 800d434:	400204a0 	.word	0x400204a0
 800d438:	400204b8 	.word	0x400204b8
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f003 0302 	and.w	r3, r3, #2
 800d446:	2b00      	cmp	r3, #0
 800d448:	bf14      	ite	ne
 800d44a:	2301      	movne	r3, #1
 800d44c:	2300      	moveq	r3, #0
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	2b00      	cmp	r3, #0
 800d452:	f000 8087 	beq.w	800d564 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d45a:	f003 031f 	and.w	r3, r3, #31
 800d45e:	2220      	movs	r2, #32
 800d460:	409a      	lsls	r2, r3
 800d462:	6a3b      	ldr	r3, [r7, #32]
 800d464:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	2b04      	cmp	r3, #4
 800d470:	d139      	bne.n	800d4e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f022 0216 	bic.w	r2, r2, #22
 800d480:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	695a      	ldr	r2, [r3, #20]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d490:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d496:	2b00      	cmp	r3, #0
 800d498:	d103      	bne.n	800d4a2 <HAL_DMA_IRQHandler+0x736>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d007      	beq.n	800d4b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f022 0208 	bic.w	r2, r2, #8
 800d4b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4b6:	f003 031f 	and.w	r3, r3, #31
 800d4ba:	223f      	movs	r2, #63	@ 0x3f
 800d4bc:	409a      	lsls	r2, r3
 800d4be:	6a3b      	ldr	r3, [r7, #32]
 800d4c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f000 834a 	beq.w	800db70 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	4798      	blx	r3
          }
          return;
 800d4e4:	e344      	b.n	800db70 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d018      	beq.n	800d526 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d108      	bne.n	800d514 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d506:	2b00      	cmp	r3, #0
 800d508:	d02c      	beq.n	800d564 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	4798      	blx	r3
 800d512:	e027      	b.n	800d564 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d023      	beq.n	800d564 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	4798      	blx	r3
 800d524:	e01e      	b.n	800d564 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10f      	bne.n	800d554 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f022 0210 	bic.w	r2, r2, #16
 800d542:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2201      	movs	r2, #1
 800d548:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d003      	beq.n	800d564 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 8306 	beq.w	800db7a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d572:	f003 0301 	and.w	r3, r3, #1
 800d576:	2b00      	cmp	r3, #0
 800d578:	f000 8088 	beq.w	800d68c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2204      	movs	r2, #4
 800d580:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a7a      	ldr	r2, [pc, #488]	@ (800d774 <HAL_DMA_IRQHandler+0xa08>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d04a      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a79      	ldr	r2, [pc, #484]	@ (800d778 <HAL_DMA_IRQHandler+0xa0c>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d045      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a77      	ldr	r2, [pc, #476]	@ (800d77c <HAL_DMA_IRQHandler+0xa10>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d040      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4a76      	ldr	r2, [pc, #472]	@ (800d780 <HAL_DMA_IRQHandler+0xa14>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d03b      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a74      	ldr	r2, [pc, #464]	@ (800d784 <HAL_DMA_IRQHandler+0xa18>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d036      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a73      	ldr	r2, [pc, #460]	@ (800d788 <HAL_DMA_IRQHandler+0xa1c>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d031      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a71      	ldr	r2, [pc, #452]	@ (800d78c <HAL_DMA_IRQHandler+0xa20>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d02c      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a70      	ldr	r2, [pc, #448]	@ (800d790 <HAL_DMA_IRQHandler+0xa24>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d027      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4a6e      	ldr	r2, [pc, #440]	@ (800d794 <HAL_DMA_IRQHandler+0xa28>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d022      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a6d      	ldr	r2, [pc, #436]	@ (800d798 <HAL_DMA_IRQHandler+0xa2c>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d01d      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a6b      	ldr	r2, [pc, #428]	@ (800d79c <HAL_DMA_IRQHandler+0xa30>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d018      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a6a      	ldr	r2, [pc, #424]	@ (800d7a0 <HAL_DMA_IRQHandler+0xa34>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d013      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a68      	ldr	r2, [pc, #416]	@ (800d7a4 <HAL_DMA_IRQHandler+0xa38>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d00e      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a67      	ldr	r2, [pc, #412]	@ (800d7a8 <HAL_DMA_IRQHandler+0xa3c>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d009      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a65      	ldr	r2, [pc, #404]	@ (800d7ac <HAL_DMA_IRQHandler+0xa40>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d004      	beq.n	800d624 <HAL_DMA_IRQHandler+0x8b8>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a64      	ldr	r2, [pc, #400]	@ (800d7b0 <HAL_DMA_IRQHandler+0xa44>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d108      	bne.n	800d636 <HAL_DMA_IRQHandler+0x8ca>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f022 0201 	bic.w	r2, r2, #1
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	e007      	b.n	800d646 <HAL_DMA_IRQHandler+0x8da>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f022 0201 	bic.w	r2, r2, #1
 800d644:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	3301      	adds	r3, #1
 800d64a:	60fb      	str	r3, [r7, #12]
 800d64c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d64e:	429a      	cmp	r2, r3
 800d650:	d307      	bcc.n	800d662 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f003 0301 	and.w	r3, r3, #1
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1f2      	bne.n	800d646 <HAL_DMA_IRQHandler+0x8da>
 800d660:	e000      	b.n	800d664 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800d662:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f003 0301 	and.w	r3, r3, #1
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d004      	beq.n	800d67c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2203      	movs	r2, #3
 800d676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d67a:	e003      	b.n	800d684 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2201      	movs	r2, #1
 800d680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d690:	2b00      	cmp	r3, #0
 800d692:	f000 8272 	beq.w	800db7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	4798      	blx	r3
 800d69e:	e26c      	b.n	800db7a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a43      	ldr	r2, [pc, #268]	@ (800d7b4 <HAL_DMA_IRQHandler+0xa48>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d022      	beq.n	800d6f0 <HAL_DMA_IRQHandler+0x984>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4a42      	ldr	r2, [pc, #264]	@ (800d7b8 <HAL_DMA_IRQHandler+0xa4c>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d01d      	beq.n	800d6f0 <HAL_DMA_IRQHandler+0x984>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a40      	ldr	r2, [pc, #256]	@ (800d7bc <HAL_DMA_IRQHandler+0xa50>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d018      	beq.n	800d6f0 <HAL_DMA_IRQHandler+0x984>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a3f      	ldr	r2, [pc, #252]	@ (800d7c0 <HAL_DMA_IRQHandler+0xa54>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d013      	beq.n	800d6f0 <HAL_DMA_IRQHandler+0x984>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a3d      	ldr	r2, [pc, #244]	@ (800d7c4 <HAL_DMA_IRQHandler+0xa58>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d00e      	beq.n	800d6f0 <HAL_DMA_IRQHandler+0x984>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4a3c      	ldr	r2, [pc, #240]	@ (800d7c8 <HAL_DMA_IRQHandler+0xa5c>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d009      	beq.n	800d6f0 <HAL_DMA_IRQHandler+0x984>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a3a      	ldr	r2, [pc, #232]	@ (800d7cc <HAL_DMA_IRQHandler+0xa60>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d004      	beq.n	800d6f0 <HAL_DMA_IRQHandler+0x984>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a39      	ldr	r2, [pc, #228]	@ (800d7d0 <HAL_DMA_IRQHandler+0xa64>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d101      	bne.n	800d6f4 <HAL_DMA_IRQHandler+0x988>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e000      	b.n	800d6f6 <HAL_DMA_IRQHandler+0x98a>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f000 823f 	beq.w	800db7a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d708:	f003 031f 	and.w	r3, r3, #31
 800d70c:	2204      	movs	r2, #4
 800d70e:	409a      	lsls	r2, r3
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	4013      	ands	r3, r2
 800d714:	2b00      	cmp	r3, #0
 800d716:	f000 80cd 	beq.w	800d8b4 <HAL_DMA_IRQHandler+0xb48>
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	f003 0304 	and.w	r3, r3, #4
 800d720:	2b00      	cmp	r3, #0
 800d722:	f000 80c7 	beq.w	800d8b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d72a:	f003 031f 	and.w	r3, r3, #31
 800d72e:	2204      	movs	r2, #4
 800d730:	409a      	lsls	r2, r3
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d049      	beq.n	800d7d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d746:	2b00      	cmp	r3, #0
 800d748:	d109      	bne.n	800d75e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d74e:	2b00      	cmp	r3, #0
 800d750:	f000 8210 	beq.w	800db74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d75c:	e20a      	b.n	800db74 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d762:	2b00      	cmp	r3, #0
 800d764:	f000 8206 	beq.w	800db74 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d770:	e200      	b.n	800db74 <HAL_DMA_IRQHandler+0xe08>
 800d772:	bf00      	nop
 800d774:	40020010 	.word	0x40020010
 800d778:	40020028 	.word	0x40020028
 800d77c:	40020040 	.word	0x40020040
 800d780:	40020058 	.word	0x40020058
 800d784:	40020070 	.word	0x40020070
 800d788:	40020088 	.word	0x40020088
 800d78c:	400200a0 	.word	0x400200a0
 800d790:	400200b8 	.word	0x400200b8
 800d794:	40020410 	.word	0x40020410
 800d798:	40020428 	.word	0x40020428
 800d79c:	40020440 	.word	0x40020440
 800d7a0:	40020458 	.word	0x40020458
 800d7a4:	40020470 	.word	0x40020470
 800d7a8:	40020488 	.word	0x40020488
 800d7ac:	400204a0 	.word	0x400204a0
 800d7b0:	400204b8 	.word	0x400204b8
 800d7b4:	58025408 	.word	0x58025408
 800d7b8:	5802541c 	.word	0x5802541c
 800d7bc:	58025430 	.word	0x58025430
 800d7c0:	58025444 	.word	0x58025444
 800d7c4:	58025458 	.word	0x58025458
 800d7c8:	5802546c 	.word	0x5802546c
 800d7cc:	58025480 	.word	0x58025480
 800d7d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	f003 0320 	and.w	r3, r3, #32
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d160      	bne.n	800d8a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4a7f      	ldr	r2, [pc, #508]	@ (800d9e0 <HAL_DMA_IRQHandler+0xc74>)
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d04a      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a7d      	ldr	r2, [pc, #500]	@ (800d9e4 <HAL_DMA_IRQHandler+0xc78>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d045      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a7c      	ldr	r2, [pc, #496]	@ (800d9e8 <HAL_DMA_IRQHandler+0xc7c>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d040      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a7a      	ldr	r2, [pc, #488]	@ (800d9ec <HAL_DMA_IRQHandler+0xc80>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d03b      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a79      	ldr	r2, [pc, #484]	@ (800d9f0 <HAL_DMA_IRQHandler+0xc84>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d036      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a77      	ldr	r2, [pc, #476]	@ (800d9f4 <HAL_DMA_IRQHandler+0xc88>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d031      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4a76      	ldr	r2, [pc, #472]	@ (800d9f8 <HAL_DMA_IRQHandler+0xc8c>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d02c      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a74      	ldr	r2, [pc, #464]	@ (800d9fc <HAL_DMA_IRQHandler+0xc90>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d027      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a73      	ldr	r2, [pc, #460]	@ (800da00 <HAL_DMA_IRQHandler+0xc94>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d022      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a71      	ldr	r2, [pc, #452]	@ (800da04 <HAL_DMA_IRQHandler+0xc98>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d01d      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a70      	ldr	r2, [pc, #448]	@ (800da08 <HAL_DMA_IRQHandler+0xc9c>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d018      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a6e      	ldr	r2, [pc, #440]	@ (800da0c <HAL_DMA_IRQHandler+0xca0>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d013      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a6d      	ldr	r2, [pc, #436]	@ (800da10 <HAL_DMA_IRQHandler+0xca4>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d00e      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a6b      	ldr	r2, [pc, #428]	@ (800da14 <HAL_DMA_IRQHandler+0xca8>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d009      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a6a      	ldr	r2, [pc, #424]	@ (800da18 <HAL_DMA_IRQHandler+0xcac>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d004      	beq.n	800d87e <HAL_DMA_IRQHandler+0xb12>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a68      	ldr	r2, [pc, #416]	@ (800da1c <HAL_DMA_IRQHandler+0xcb0>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d108      	bne.n	800d890 <HAL_DMA_IRQHandler+0xb24>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f022 0208 	bic.w	r2, r2, #8
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	e007      	b.n	800d8a0 <HAL_DMA_IRQHandler+0xb34>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f022 0204 	bic.w	r2, r2, #4
 800d89e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f000 8165 	beq.w	800db74 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d8b2:	e15f      	b.n	800db74 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d8b8:	f003 031f 	and.w	r3, r3, #31
 800d8bc:	2202      	movs	r2, #2
 800d8be:	409a      	lsls	r2, r3
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f000 80c5 	beq.w	800da54 <HAL_DMA_IRQHandler+0xce8>
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	f003 0302 	and.w	r3, r3, #2
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 80bf 	beq.w	800da54 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d8da:	f003 031f 	and.w	r3, r3, #31
 800d8de:	2202      	movs	r2, #2
 800d8e0:	409a      	lsls	r2, r3
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d018      	beq.n	800d922 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d109      	bne.n	800d90e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	f000 813a 	beq.w	800db78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d90c:	e134      	b.n	800db78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d912:	2b00      	cmp	r3, #0
 800d914:	f000 8130 	beq.w	800db78 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800d920:	e12a      	b.n	800db78 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	f003 0320 	and.w	r3, r3, #32
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f040 8089 	bne.w	800da40 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a2b      	ldr	r2, [pc, #172]	@ (800d9e0 <HAL_DMA_IRQHandler+0xc74>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d04a      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a29      	ldr	r2, [pc, #164]	@ (800d9e4 <HAL_DMA_IRQHandler+0xc78>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d045      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a28      	ldr	r2, [pc, #160]	@ (800d9e8 <HAL_DMA_IRQHandler+0xc7c>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d040      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a26      	ldr	r2, [pc, #152]	@ (800d9ec <HAL_DMA_IRQHandler+0xc80>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d03b      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a25      	ldr	r2, [pc, #148]	@ (800d9f0 <HAL_DMA_IRQHandler+0xc84>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d036      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a23      	ldr	r2, [pc, #140]	@ (800d9f4 <HAL_DMA_IRQHandler+0xc88>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d031      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a22      	ldr	r2, [pc, #136]	@ (800d9f8 <HAL_DMA_IRQHandler+0xc8c>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d02c      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a20      	ldr	r2, [pc, #128]	@ (800d9fc <HAL_DMA_IRQHandler+0xc90>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d027      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a1f      	ldr	r2, [pc, #124]	@ (800da00 <HAL_DMA_IRQHandler+0xc94>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d022      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	4a1d      	ldr	r2, [pc, #116]	@ (800da04 <HAL_DMA_IRQHandler+0xc98>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d01d      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a1c      	ldr	r2, [pc, #112]	@ (800da08 <HAL_DMA_IRQHandler+0xc9c>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d018      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a1a      	ldr	r2, [pc, #104]	@ (800da0c <HAL_DMA_IRQHandler+0xca0>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d013      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a19      	ldr	r2, [pc, #100]	@ (800da10 <HAL_DMA_IRQHandler+0xca4>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d00e      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a17      	ldr	r2, [pc, #92]	@ (800da14 <HAL_DMA_IRQHandler+0xca8>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d009      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4a16      	ldr	r2, [pc, #88]	@ (800da18 <HAL_DMA_IRQHandler+0xcac>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d004      	beq.n	800d9ce <HAL_DMA_IRQHandler+0xc62>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a14      	ldr	r2, [pc, #80]	@ (800da1c <HAL_DMA_IRQHandler+0xcb0>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d128      	bne.n	800da20 <HAL_DMA_IRQHandler+0xcb4>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f022 0214 	bic.w	r2, r2, #20
 800d9dc:	601a      	str	r2, [r3, #0]
 800d9de:	e027      	b.n	800da30 <HAL_DMA_IRQHandler+0xcc4>
 800d9e0:	40020010 	.word	0x40020010
 800d9e4:	40020028 	.word	0x40020028
 800d9e8:	40020040 	.word	0x40020040
 800d9ec:	40020058 	.word	0x40020058
 800d9f0:	40020070 	.word	0x40020070
 800d9f4:	40020088 	.word	0x40020088
 800d9f8:	400200a0 	.word	0x400200a0
 800d9fc:	400200b8 	.word	0x400200b8
 800da00:	40020410 	.word	0x40020410
 800da04:	40020428 	.word	0x40020428
 800da08:	40020440 	.word	0x40020440
 800da0c:	40020458 	.word	0x40020458
 800da10:	40020470 	.word	0x40020470
 800da14:	40020488 	.word	0x40020488
 800da18:	400204a0 	.word	0x400204a0
 800da1c:	400204b8 	.word	0x400204b8
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f022 020a 	bic.w	r2, r2, #10
 800da2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da44:	2b00      	cmp	r3, #0
 800da46:	f000 8097 	beq.w	800db78 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800da52:	e091      	b.n	800db78 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800da58:	f003 031f 	and.w	r3, r3, #31
 800da5c:	2208      	movs	r2, #8
 800da5e:	409a      	lsls	r2, r3
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	4013      	ands	r3, r2
 800da64:	2b00      	cmp	r3, #0
 800da66:	f000 8088 	beq.w	800db7a <HAL_DMA_IRQHandler+0xe0e>
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	f003 0308 	and.w	r3, r3, #8
 800da70:	2b00      	cmp	r3, #0
 800da72:	f000 8082 	beq.w	800db7a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a41      	ldr	r2, [pc, #260]	@ (800db80 <HAL_DMA_IRQHandler+0xe14>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d04a      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a3f      	ldr	r2, [pc, #252]	@ (800db84 <HAL_DMA_IRQHandler+0xe18>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d045      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a3e      	ldr	r2, [pc, #248]	@ (800db88 <HAL_DMA_IRQHandler+0xe1c>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d040      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a3c      	ldr	r2, [pc, #240]	@ (800db8c <HAL_DMA_IRQHandler+0xe20>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d03b      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a3b      	ldr	r2, [pc, #236]	@ (800db90 <HAL_DMA_IRQHandler+0xe24>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d036      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a39      	ldr	r2, [pc, #228]	@ (800db94 <HAL_DMA_IRQHandler+0xe28>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d031      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a38      	ldr	r2, [pc, #224]	@ (800db98 <HAL_DMA_IRQHandler+0xe2c>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d02c      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a36      	ldr	r2, [pc, #216]	@ (800db9c <HAL_DMA_IRQHandler+0xe30>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d027      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a35      	ldr	r2, [pc, #212]	@ (800dba0 <HAL_DMA_IRQHandler+0xe34>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d022      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a33      	ldr	r2, [pc, #204]	@ (800dba4 <HAL_DMA_IRQHandler+0xe38>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d01d      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a32      	ldr	r2, [pc, #200]	@ (800dba8 <HAL_DMA_IRQHandler+0xe3c>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d018      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4a30      	ldr	r2, [pc, #192]	@ (800dbac <HAL_DMA_IRQHandler+0xe40>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d013      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a2f      	ldr	r2, [pc, #188]	@ (800dbb0 <HAL_DMA_IRQHandler+0xe44>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d00e      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a2d      	ldr	r2, [pc, #180]	@ (800dbb4 <HAL_DMA_IRQHandler+0xe48>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d009      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a2c      	ldr	r2, [pc, #176]	@ (800dbb8 <HAL_DMA_IRQHandler+0xe4c>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d004      	beq.n	800db16 <HAL_DMA_IRQHandler+0xdaa>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a2a      	ldr	r2, [pc, #168]	@ (800dbbc <HAL_DMA_IRQHandler+0xe50>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d108      	bne.n	800db28 <HAL_DMA_IRQHandler+0xdbc>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f022 021c 	bic.w	r2, r2, #28
 800db24:	601a      	str	r2, [r3, #0]
 800db26:	e007      	b.n	800db38 <HAL_DMA_IRQHandler+0xdcc>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f022 020e 	bic.w	r2, r2, #14
 800db36:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db3c:	f003 031f 	and.w	r3, r3, #31
 800db40:	2201      	movs	r2, #1
 800db42:	409a      	lsls	r2, r3
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2201      	movs	r2, #1
 800db52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db62:	2b00      	cmp	r3, #0
 800db64:	d009      	beq.n	800db7a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	4798      	blx	r3
 800db6e:	e004      	b.n	800db7a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800db70:	bf00      	nop
 800db72:	e002      	b.n	800db7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800db74:	bf00      	nop
 800db76:	e000      	b.n	800db7a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800db78:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800db7a:	3728      	adds	r7, #40	@ 0x28
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	40020010 	.word	0x40020010
 800db84:	40020028 	.word	0x40020028
 800db88:	40020040 	.word	0x40020040
 800db8c:	40020058 	.word	0x40020058
 800db90:	40020070 	.word	0x40020070
 800db94:	40020088 	.word	0x40020088
 800db98:	400200a0 	.word	0x400200a0
 800db9c:	400200b8 	.word	0x400200b8
 800dba0:	40020410 	.word	0x40020410
 800dba4:	40020428 	.word	0x40020428
 800dba8:	40020440 	.word	0x40020440
 800dbac:	40020458 	.word	0x40020458
 800dbb0:	40020470 	.word	0x40020470
 800dbb4:	40020488 	.word	0x40020488
 800dbb8:	400204a0 	.word	0x400204a0
 800dbbc:	400204b8 	.word	0x400204b8

0800dbc0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800dbce:	b2db      	uxtb	r3, r3
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	370c      	adds	r7, #12
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr

0800dbdc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b087      	sub	sp, #28
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
 800dc00:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc06:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc0c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a7f      	ldr	r2, [pc, #508]	@ (800de10 <DMA_SetConfig+0x21c>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d072      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a7d      	ldr	r2, [pc, #500]	@ (800de14 <DMA_SetConfig+0x220>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d06d      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a7c      	ldr	r2, [pc, #496]	@ (800de18 <DMA_SetConfig+0x224>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d068      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a7a      	ldr	r2, [pc, #488]	@ (800de1c <DMA_SetConfig+0x228>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d063      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a79      	ldr	r2, [pc, #484]	@ (800de20 <DMA_SetConfig+0x22c>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d05e      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4a77      	ldr	r2, [pc, #476]	@ (800de24 <DMA_SetConfig+0x230>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d059      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4a76      	ldr	r2, [pc, #472]	@ (800de28 <DMA_SetConfig+0x234>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d054      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a74      	ldr	r2, [pc, #464]	@ (800de2c <DMA_SetConfig+0x238>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d04f      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4a73      	ldr	r2, [pc, #460]	@ (800de30 <DMA_SetConfig+0x23c>)
 800dc64:	4293      	cmp	r3, r2
 800dc66:	d04a      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a71      	ldr	r2, [pc, #452]	@ (800de34 <DMA_SetConfig+0x240>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d045      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a70      	ldr	r2, [pc, #448]	@ (800de38 <DMA_SetConfig+0x244>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d040      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a6e      	ldr	r2, [pc, #440]	@ (800de3c <DMA_SetConfig+0x248>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d03b      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a6d      	ldr	r2, [pc, #436]	@ (800de40 <DMA_SetConfig+0x24c>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d036      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a6b      	ldr	r2, [pc, #428]	@ (800de44 <DMA_SetConfig+0x250>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d031      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a6a      	ldr	r2, [pc, #424]	@ (800de48 <DMA_SetConfig+0x254>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d02c      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a68      	ldr	r2, [pc, #416]	@ (800de4c <DMA_SetConfig+0x258>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d027      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a67      	ldr	r2, [pc, #412]	@ (800de50 <DMA_SetConfig+0x25c>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d022      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4a65      	ldr	r2, [pc, #404]	@ (800de54 <DMA_SetConfig+0x260>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d01d      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a64      	ldr	r2, [pc, #400]	@ (800de58 <DMA_SetConfig+0x264>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d018      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a62      	ldr	r2, [pc, #392]	@ (800de5c <DMA_SetConfig+0x268>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d013      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a61      	ldr	r2, [pc, #388]	@ (800de60 <DMA_SetConfig+0x26c>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d00e      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a5f      	ldr	r2, [pc, #380]	@ (800de64 <DMA_SetConfig+0x270>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d009      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a5e      	ldr	r2, [pc, #376]	@ (800de68 <DMA_SetConfig+0x274>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d004      	beq.n	800dcfe <DMA_SetConfig+0x10a>
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4a5c      	ldr	r2, [pc, #368]	@ (800de6c <DMA_SetConfig+0x278>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d101      	bne.n	800dd02 <DMA_SetConfig+0x10e>
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e000      	b.n	800dd04 <DMA_SetConfig+0x110>
 800dd02:	2300      	movs	r3, #0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d00d      	beq.n	800dd24 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800dd10:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d004      	beq.n	800dd24 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800dd22:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a39      	ldr	r2, [pc, #228]	@ (800de10 <DMA_SetConfig+0x21c>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d04a      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	4a38      	ldr	r2, [pc, #224]	@ (800de14 <DMA_SetConfig+0x220>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d045      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a36      	ldr	r2, [pc, #216]	@ (800de18 <DMA_SetConfig+0x224>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d040      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a35      	ldr	r2, [pc, #212]	@ (800de1c <DMA_SetConfig+0x228>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d03b      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a33      	ldr	r2, [pc, #204]	@ (800de20 <DMA_SetConfig+0x22c>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d036      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a32      	ldr	r2, [pc, #200]	@ (800de24 <DMA_SetConfig+0x230>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d031      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a30      	ldr	r2, [pc, #192]	@ (800de28 <DMA_SetConfig+0x234>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d02c      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a2f      	ldr	r2, [pc, #188]	@ (800de2c <DMA_SetConfig+0x238>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d027      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a2d      	ldr	r2, [pc, #180]	@ (800de30 <DMA_SetConfig+0x23c>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d022      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a2c      	ldr	r2, [pc, #176]	@ (800de34 <DMA_SetConfig+0x240>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d01d      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a2a      	ldr	r2, [pc, #168]	@ (800de38 <DMA_SetConfig+0x244>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d018      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4a29      	ldr	r2, [pc, #164]	@ (800de3c <DMA_SetConfig+0x248>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d013      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a27      	ldr	r2, [pc, #156]	@ (800de40 <DMA_SetConfig+0x24c>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d00e      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4a26      	ldr	r2, [pc, #152]	@ (800de44 <DMA_SetConfig+0x250>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d009      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a24      	ldr	r2, [pc, #144]	@ (800de48 <DMA_SetConfig+0x254>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d004      	beq.n	800ddc4 <DMA_SetConfig+0x1d0>
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4a23      	ldr	r2, [pc, #140]	@ (800de4c <DMA_SetConfig+0x258>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d101      	bne.n	800ddc8 <DMA_SetConfig+0x1d4>
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	e000      	b.n	800ddca <DMA_SetConfig+0x1d6>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d059      	beq.n	800de82 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ddd2:	f003 031f 	and.w	r3, r3, #31
 800ddd6:	223f      	movs	r2, #63	@ 0x3f
 800ddd8:	409a      	lsls	r2, r3
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ddec:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	2b40      	cmp	r3, #64	@ 0x40
 800ddfc:	d138      	bne.n	800de70 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800de0e:	e086      	b.n	800df1e <DMA_SetConfig+0x32a>
 800de10:	40020010 	.word	0x40020010
 800de14:	40020028 	.word	0x40020028
 800de18:	40020040 	.word	0x40020040
 800de1c:	40020058 	.word	0x40020058
 800de20:	40020070 	.word	0x40020070
 800de24:	40020088 	.word	0x40020088
 800de28:	400200a0 	.word	0x400200a0
 800de2c:	400200b8 	.word	0x400200b8
 800de30:	40020410 	.word	0x40020410
 800de34:	40020428 	.word	0x40020428
 800de38:	40020440 	.word	0x40020440
 800de3c:	40020458 	.word	0x40020458
 800de40:	40020470 	.word	0x40020470
 800de44:	40020488 	.word	0x40020488
 800de48:	400204a0 	.word	0x400204a0
 800de4c:	400204b8 	.word	0x400204b8
 800de50:	58025408 	.word	0x58025408
 800de54:	5802541c 	.word	0x5802541c
 800de58:	58025430 	.word	0x58025430
 800de5c:	58025444 	.word	0x58025444
 800de60:	58025458 	.word	0x58025458
 800de64:	5802546c 	.word	0x5802546c
 800de68:	58025480 	.word	0x58025480
 800de6c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	68ba      	ldr	r2, [r7, #8]
 800de76:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	60da      	str	r2, [r3, #12]
}
 800de80:	e04d      	b.n	800df1e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	4a29      	ldr	r2, [pc, #164]	@ (800df2c <DMA_SetConfig+0x338>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d022      	beq.n	800ded2 <DMA_SetConfig+0x2de>
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a27      	ldr	r2, [pc, #156]	@ (800df30 <DMA_SetConfig+0x33c>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d01d      	beq.n	800ded2 <DMA_SetConfig+0x2de>
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4a26      	ldr	r2, [pc, #152]	@ (800df34 <DMA_SetConfig+0x340>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d018      	beq.n	800ded2 <DMA_SetConfig+0x2de>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a24      	ldr	r2, [pc, #144]	@ (800df38 <DMA_SetConfig+0x344>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d013      	beq.n	800ded2 <DMA_SetConfig+0x2de>
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4a23      	ldr	r2, [pc, #140]	@ (800df3c <DMA_SetConfig+0x348>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d00e      	beq.n	800ded2 <DMA_SetConfig+0x2de>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4a21      	ldr	r2, [pc, #132]	@ (800df40 <DMA_SetConfig+0x34c>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d009      	beq.n	800ded2 <DMA_SetConfig+0x2de>
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4a20      	ldr	r2, [pc, #128]	@ (800df44 <DMA_SetConfig+0x350>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d004      	beq.n	800ded2 <DMA_SetConfig+0x2de>
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a1e      	ldr	r2, [pc, #120]	@ (800df48 <DMA_SetConfig+0x354>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d101      	bne.n	800ded6 <DMA_SetConfig+0x2e2>
 800ded2:	2301      	movs	r3, #1
 800ded4:	e000      	b.n	800ded8 <DMA_SetConfig+0x2e4>
 800ded6:	2300      	movs	r3, #0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d020      	beq.n	800df1e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dee0:	f003 031f 	and.w	r3, r3, #31
 800dee4:	2201      	movs	r2, #1
 800dee6:	409a      	lsls	r2, r3
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	683a      	ldr	r2, [r7, #0]
 800def2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	2b40      	cmp	r3, #64	@ 0x40
 800defa:	d108      	bne.n	800df0e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	68ba      	ldr	r2, [r7, #8]
 800df0a:	60da      	str	r2, [r3, #12]
}
 800df0c:	e007      	b.n	800df1e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	60da      	str	r2, [r3, #12]
}
 800df1e:	bf00      	nop
 800df20:	371c      	adds	r7, #28
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr
 800df2a:	bf00      	nop
 800df2c:	58025408 	.word	0x58025408
 800df30:	5802541c 	.word	0x5802541c
 800df34:	58025430 	.word	0x58025430
 800df38:	58025444 	.word	0x58025444
 800df3c:	58025458 	.word	0x58025458
 800df40:	5802546c 	.word	0x5802546c
 800df44:	58025480 	.word	0x58025480
 800df48:	58025494 	.word	0x58025494

0800df4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4a42      	ldr	r2, [pc, #264]	@ (800e064 <DMA_CalcBaseAndBitshift+0x118>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d04a      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a41      	ldr	r2, [pc, #260]	@ (800e068 <DMA_CalcBaseAndBitshift+0x11c>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d045      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a3f      	ldr	r2, [pc, #252]	@ (800e06c <DMA_CalcBaseAndBitshift+0x120>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d040      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a3e      	ldr	r2, [pc, #248]	@ (800e070 <DMA_CalcBaseAndBitshift+0x124>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d03b      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a3c      	ldr	r2, [pc, #240]	@ (800e074 <DMA_CalcBaseAndBitshift+0x128>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d036      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a3b      	ldr	r2, [pc, #236]	@ (800e078 <DMA_CalcBaseAndBitshift+0x12c>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d031      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a39      	ldr	r2, [pc, #228]	@ (800e07c <DMA_CalcBaseAndBitshift+0x130>)
 800df96:	4293      	cmp	r3, r2
 800df98:	d02c      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a38      	ldr	r2, [pc, #224]	@ (800e080 <DMA_CalcBaseAndBitshift+0x134>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d027      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4a36      	ldr	r2, [pc, #216]	@ (800e084 <DMA_CalcBaseAndBitshift+0x138>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d022      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	4a35      	ldr	r2, [pc, #212]	@ (800e088 <DMA_CalcBaseAndBitshift+0x13c>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d01d      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a33      	ldr	r2, [pc, #204]	@ (800e08c <DMA_CalcBaseAndBitshift+0x140>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d018      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4a32      	ldr	r2, [pc, #200]	@ (800e090 <DMA_CalcBaseAndBitshift+0x144>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d013      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a30      	ldr	r2, [pc, #192]	@ (800e094 <DMA_CalcBaseAndBitshift+0x148>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d00e      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a2f      	ldr	r2, [pc, #188]	@ (800e098 <DMA_CalcBaseAndBitshift+0x14c>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d009      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a2d      	ldr	r2, [pc, #180]	@ (800e09c <DMA_CalcBaseAndBitshift+0x150>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d004      	beq.n	800dff4 <DMA_CalcBaseAndBitshift+0xa8>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4a2c      	ldr	r2, [pc, #176]	@ (800e0a0 <DMA_CalcBaseAndBitshift+0x154>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d101      	bne.n	800dff8 <DMA_CalcBaseAndBitshift+0xac>
 800dff4:	2301      	movs	r3, #1
 800dff6:	e000      	b.n	800dffa <DMA_CalcBaseAndBitshift+0xae>
 800dff8:	2300      	movs	r3, #0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d024      	beq.n	800e048 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	b2db      	uxtb	r3, r3
 800e004:	3b10      	subs	r3, #16
 800e006:	4a27      	ldr	r2, [pc, #156]	@ (800e0a4 <DMA_CalcBaseAndBitshift+0x158>)
 800e008:	fba2 2303 	umull	r2, r3, r2, r3
 800e00c:	091b      	lsrs	r3, r3, #4
 800e00e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f003 0307 	and.w	r3, r3, #7
 800e016:	4a24      	ldr	r2, [pc, #144]	@ (800e0a8 <DMA_CalcBaseAndBitshift+0x15c>)
 800e018:	5cd3      	ldrb	r3, [r2, r3]
 800e01a:	461a      	mov	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2b03      	cmp	r3, #3
 800e024:	d908      	bls.n	800e038 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	461a      	mov	r2, r3
 800e02c:	4b1f      	ldr	r3, [pc, #124]	@ (800e0ac <DMA_CalcBaseAndBitshift+0x160>)
 800e02e:	4013      	ands	r3, r2
 800e030:	1d1a      	adds	r2, r3, #4
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	659a      	str	r2, [r3, #88]	@ 0x58
 800e036:	e00d      	b.n	800e054 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	461a      	mov	r2, r3
 800e03e:	4b1b      	ldr	r3, [pc, #108]	@ (800e0ac <DMA_CalcBaseAndBitshift+0x160>)
 800e040:	4013      	ands	r3, r2
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	6593      	str	r3, [r2, #88]	@ 0x58
 800e046:	e005      	b.n	800e054 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3714      	adds	r7, #20
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr
 800e064:	40020010 	.word	0x40020010
 800e068:	40020028 	.word	0x40020028
 800e06c:	40020040 	.word	0x40020040
 800e070:	40020058 	.word	0x40020058
 800e074:	40020070 	.word	0x40020070
 800e078:	40020088 	.word	0x40020088
 800e07c:	400200a0 	.word	0x400200a0
 800e080:	400200b8 	.word	0x400200b8
 800e084:	40020410 	.word	0x40020410
 800e088:	40020428 	.word	0x40020428
 800e08c:	40020440 	.word	0x40020440
 800e090:	40020458 	.word	0x40020458
 800e094:	40020470 	.word	0x40020470
 800e098:	40020488 	.word	0x40020488
 800e09c:	400204a0 	.word	0x400204a0
 800e0a0:	400204b8 	.word	0x400204b8
 800e0a4:	aaaaaaab 	.word	0xaaaaaaab
 800e0a8:	0801eb3c 	.word	0x0801eb3c
 800e0ac:	fffffc00 	.word	0xfffffc00

0800e0b0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	699b      	ldr	r3, [r3, #24]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d120      	bne.n	800e106 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d858      	bhi.n	800e17e <DMA_CheckFifoParam+0xce>
 800e0cc:	a201      	add	r2, pc, #4	@ (adr r2, 800e0d4 <DMA_CheckFifoParam+0x24>)
 800e0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d2:	bf00      	nop
 800e0d4:	0800e0e5 	.word	0x0800e0e5
 800e0d8:	0800e0f7 	.word	0x0800e0f7
 800e0dc:	0800e0e5 	.word	0x0800e0e5
 800e0e0:	0800e17f 	.word	0x0800e17f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d048      	beq.n	800e182 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e0f4:	e045      	b.n	800e182 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e0fe:	d142      	bne.n	800e186 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e100:	2301      	movs	r3, #1
 800e102:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e104:	e03f      	b.n	800e186 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	699b      	ldr	r3, [r3, #24]
 800e10a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e10e:	d123      	bne.n	800e158 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e114:	2b03      	cmp	r3, #3
 800e116:	d838      	bhi.n	800e18a <DMA_CheckFifoParam+0xda>
 800e118:	a201      	add	r2, pc, #4	@ (adr r2, 800e120 <DMA_CheckFifoParam+0x70>)
 800e11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11e:	bf00      	nop
 800e120:	0800e131 	.word	0x0800e131
 800e124:	0800e137 	.word	0x0800e137
 800e128:	0800e131 	.word	0x0800e131
 800e12c:	0800e149 	.word	0x0800e149
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e130:	2301      	movs	r3, #1
 800e132:	73fb      	strb	r3, [r7, #15]
        break;
 800e134:	e030      	b.n	800e198 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e13a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d025      	beq.n	800e18e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e142:	2301      	movs	r3, #1
 800e144:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e146:	e022      	b.n	800e18e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e14c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800e150:	d11f      	bne.n	800e192 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e156:	e01c      	b.n	800e192 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	d902      	bls.n	800e166 <DMA_CheckFifoParam+0xb6>
 800e160:	2b03      	cmp	r3, #3
 800e162:	d003      	beq.n	800e16c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e164:	e018      	b.n	800e198 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e166:	2301      	movs	r3, #1
 800e168:	73fb      	strb	r3, [r7, #15]
        break;
 800e16a:	e015      	b.n	800e198 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e170:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e174:	2b00      	cmp	r3, #0
 800e176:	d00e      	beq.n	800e196 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	73fb      	strb	r3, [r7, #15]
    break;
 800e17c:	e00b      	b.n	800e196 <DMA_CheckFifoParam+0xe6>
        break;
 800e17e:	bf00      	nop
 800e180:	e00a      	b.n	800e198 <DMA_CheckFifoParam+0xe8>
        break;
 800e182:	bf00      	nop
 800e184:	e008      	b.n	800e198 <DMA_CheckFifoParam+0xe8>
        break;
 800e186:	bf00      	nop
 800e188:	e006      	b.n	800e198 <DMA_CheckFifoParam+0xe8>
        break;
 800e18a:	bf00      	nop
 800e18c:	e004      	b.n	800e198 <DMA_CheckFifoParam+0xe8>
        break;
 800e18e:	bf00      	nop
 800e190:	e002      	b.n	800e198 <DMA_CheckFifoParam+0xe8>
        break;
 800e192:	bf00      	nop
 800e194:	e000      	b.n	800e198 <DMA_CheckFifoParam+0xe8>
    break;
 800e196:	bf00      	nop
    }
  }

  return status;
 800e198:	7bfb      	ldrb	r3, [r7, #15]
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop

0800e1a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4a38      	ldr	r2, [pc, #224]	@ (800e29c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d022      	beq.n	800e206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a36      	ldr	r2, [pc, #216]	@ (800e2a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d01d      	beq.n	800e206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a35      	ldr	r2, [pc, #212]	@ (800e2a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d018      	beq.n	800e206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a33      	ldr	r2, [pc, #204]	@ (800e2a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d013      	beq.n	800e206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a32      	ldr	r2, [pc, #200]	@ (800e2ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d00e      	beq.n	800e206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a30      	ldr	r2, [pc, #192]	@ (800e2b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d009      	beq.n	800e206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a2f      	ldr	r2, [pc, #188]	@ (800e2b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d004      	beq.n	800e206 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a2d      	ldr	r2, [pc, #180]	@ (800e2b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d101      	bne.n	800e20a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e206:	2301      	movs	r3, #1
 800e208:	e000      	b.n	800e20c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e20a:	2300      	movs	r3, #0
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d01a      	beq.n	800e246 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	b2db      	uxtb	r3, r3
 800e216:	3b08      	subs	r3, #8
 800e218:	4a28      	ldr	r2, [pc, #160]	@ (800e2bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e21a:	fba2 2303 	umull	r2, r3, r2, r3
 800e21e:	091b      	lsrs	r3, r3, #4
 800e220:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	4b26      	ldr	r3, [pc, #152]	@ (800e2c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e226:	4413      	add	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	461a      	mov	r2, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4a24      	ldr	r2, [pc, #144]	@ (800e2c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e234:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f003 031f 	and.w	r3, r3, #31
 800e23c:	2201      	movs	r2, #1
 800e23e:	409a      	lsls	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e244:	e024      	b.n	800e290 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	3b10      	subs	r3, #16
 800e24e:	4a1e      	ldr	r2, [pc, #120]	@ (800e2c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e250:	fba2 2303 	umull	r2, r3, r2, r3
 800e254:	091b      	lsrs	r3, r3, #4
 800e256:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	4a1c      	ldr	r2, [pc, #112]	@ (800e2cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d806      	bhi.n	800e26e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	4a1b      	ldr	r2, [pc, #108]	@ (800e2d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d902      	bls.n	800e26e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	3308      	adds	r3, #8
 800e26c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e26e:	68fa      	ldr	r2, [r7, #12]
 800e270:	4b18      	ldr	r3, [pc, #96]	@ (800e2d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e272:	4413      	add	r3, r2
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	461a      	mov	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a16      	ldr	r2, [pc, #88]	@ (800e2d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e280:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f003 031f 	and.w	r3, r3, #31
 800e288:	2201      	movs	r2, #1
 800e28a:	409a      	lsls	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e290:	bf00      	nop
 800e292:	3714      	adds	r7, #20
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	58025408 	.word	0x58025408
 800e2a0:	5802541c 	.word	0x5802541c
 800e2a4:	58025430 	.word	0x58025430
 800e2a8:	58025444 	.word	0x58025444
 800e2ac:	58025458 	.word	0x58025458
 800e2b0:	5802546c 	.word	0x5802546c
 800e2b4:	58025480 	.word	0x58025480
 800e2b8:	58025494 	.word	0x58025494
 800e2bc:	cccccccd 	.word	0xcccccccd
 800e2c0:	16009600 	.word	0x16009600
 800e2c4:	58025880 	.word	0x58025880
 800e2c8:	aaaaaaab 	.word	0xaaaaaaab
 800e2cc:	400204b8 	.word	0x400204b8
 800e2d0:	4002040f 	.word	0x4002040f
 800e2d4:	10008200 	.word	0x10008200
 800e2d8:	40020880 	.word	0x40020880

0800e2dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d04a      	beq.n	800e388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2b08      	cmp	r3, #8
 800e2f6:	d847      	bhi.n	800e388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4a25      	ldr	r2, [pc, #148]	@ (800e394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d022      	beq.n	800e348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4a24      	ldr	r2, [pc, #144]	@ (800e398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d01d      	beq.n	800e348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a22      	ldr	r2, [pc, #136]	@ (800e39c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d018      	beq.n	800e348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4a21      	ldr	r2, [pc, #132]	@ (800e3a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d013      	beq.n	800e348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a1f      	ldr	r2, [pc, #124]	@ (800e3a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d00e      	beq.n	800e348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a1e      	ldr	r2, [pc, #120]	@ (800e3a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d009      	beq.n	800e348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a1c      	ldr	r2, [pc, #112]	@ (800e3ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d004      	beq.n	800e348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	4a1b      	ldr	r2, [pc, #108]	@ (800e3b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d101      	bne.n	800e34c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e348:	2301      	movs	r3, #1
 800e34a:	e000      	b.n	800e34e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e34c:	2300      	movs	r3, #0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00a      	beq.n	800e368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	4b17      	ldr	r3, [pc, #92]	@ (800e3b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e356:	4413      	add	r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	461a      	mov	r2, r3
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a15      	ldr	r2, [pc, #84]	@ (800e3b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e364:	671a      	str	r2, [r3, #112]	@ 0x70
 800e366:	e009      	b.n	800e37c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	4b14      	ldr	r3, [pc, #80]	@ (800e3bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e36c:	4413      	add	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	461a      	mov	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4a11      	ldr	r2, [pc, #68]	@ (800e3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e37a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	3b01      	subs	r3, #1
 800e380:	2201      	movs	r2, #1
 800e382:	409a      	lsls	r2, r3
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800e388:	bf00      	nop
 800e38a:	3714      	adds	r7, #20
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr
 800e394:	58025408 	.word	0x58025408
 800e398:	5802541c 	.word	0x5802541c
 800e39c:	58025430 	.word	0x58025430
 800e3a0:	58025444 	.word	0x58025444
 800e3a4:	58025458 	.word	0x58025458
 800e3a8:	5802546c 	.word	0x5802546c
 800e3ac:	58025480 	.word	0x58025480
 800e3b0:	58025494 	.word	0x58025494
 800e3b4:	1600963f 	.word	0x1600963f
 800e3b8:	58025940 	.word	0x58025940
 800e3bc:	1000823f 	.word	0x1000823f
 800e3c0:	40020940 	.word	0x40020940

0800e3c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b089      	sub	sp, #36	@ 0x24
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e3d2:	4b86      	ldr	r3, [pc, #536]	@ (800e5ec <HAL_GPIO_Init+0x228>)
 800e3d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e3d6:	e18c      	b.n	800e6f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	2101      	movs	r1, #1
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e3e4:	4013      	ands	r3, r2
 800e3e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f000 817e 	beq.w	800e6ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	f003 0303 	and.w	r3, r3, #3
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d005      	beq.n	800e408 <HAL_GPIO_Init+0x44>
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	f003 0303 	and.w	r3, r3, #3
 800e404:	2b02      	cmp	r3, #2
 800e406:	d130      	bne.n	800e46a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	005b      	lsls	r3, r3, #1
 800e412:	2203      	movs	r2, #3
 800e414:	fa02 f303 	lsl.w	r3, r2, r3
 800e418:	43db      	mvns	r3, r3
 800e41a:	69ba      	ldr	r2, [r7, #24]
 800e41c:	4013      	ands	r3, r2
 800e41e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	68da      	ldr	r2, [r3, #12]
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	005b      	lsls	r3, r3, #1
 800e428:	fa02 f303 	lsl.w	r3, r2, r3
 800e42c:	69ba      	ldr	r2, [r7, #24]
 800e42e:	4313      	orrs	r3, r2
 800e430:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	69ba      	ldr	r2, [r7, #24]
 800e436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e43e:	2201      	movs	r2, #1
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	fa02 f303 	lsl.w	r3, r2, r3
 800e446:	43db      	mvns	r3, r3
 800e448:	69ba      	ldr	r2, [r7, #24]
 800e44a:	4013      	ands	r3, r2
 800e44c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	091b      	lsrs	r3, r3, #4
 800e454:	f003 0201 	and.w	r2, r3, #1
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	fa02 f303 	lsl.w	r3, r2, r3
 800e45e:	69ba      	ldr	r2, [r7, #24]
 800e460:	4313      	orrs	r3, r2
 800e462:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	69ba      	ldr	r2, [r7, #24]
 800e468:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	f003 0303 	and.w	r3, r3, #3
 800e472:	2b03      	cmp	r3, #3
 800e474:	d017      	beq.n	800e4a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	68db      	ldr	r3, [r3, #12]
 800e47a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	005b      	lsls	r3, r3, #1
 800e480:	2203      	movs	r2, #3
 800e482:	fa02 f303 	lsl.w	r3, r2, r3
 800e486:	43db      	mvns	r3, r3
 800e488:	69ba      	ldr	r2, [r7, #24]
 800e48a:	4013      	ands	r3, r2
 800e48c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	689a      	ldr	r2, [r3, #8]
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	005b      	lsls	r3, r3, #1
 800e496:	fa02 f303 	lsl.w	r3, r2, r3
 800e49a:	69ba      	ldr	r2, [r7, #24]
 800e49c:	4313      	orrs	r3, r2
 800e49e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	69ba      	ldr	r2, [r7, #24]
 800e4a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	f003 0303 	and.w	r3, r3, #3
 800e4ae:	2b02      	cmp	r3, #2
 800e4b0:	d123      	bne.n	800e4fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	08da      	lsrs	r2, r3, #3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	3208      	adds	r2, #8
 800e4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	f003 0307 	and.w	r3, r3, #7
 800e4c6:	009b      	lsls	r3, r3, #2
 800e4c8:	220f      	movs	r2, #15
 800e4ca:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ce:	43db      	mvns	r3, r3
 800e4d0:	69ba      	ldr	r2, [r7, #24]
 800e4d2:	4013      	ands	r3, r2
 800e4d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	691a      	ldr	r2, [r3, #16]
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	f003 0307 	and.w	r3, r3, #7
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e4e6:	69ba      	ldr	r2, [r7, #24]
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	08da      	lsrs	r2, r3, #3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	3208      	adds	r2, #8
 800e4f4:	69b9      	ldr	r1, [r7, #24]
 800e4f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	2203      	movs	r2, #3
 800e506:	fa02 f303 	lsl.w	r3, r2, r3
 800e50a:	43db      	mvns	r3, r3
 800e50c:	69ba      	ldr	r2, [r7, #24]
 800e50e:	4013      	ands	r3, r2
 800e510:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	f003 0203 	and.w	r2, r3, #3
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	005b      	lsls	r3, r3, #1
 800e51e:	fa02 f303 	lsl.w	r3, r2, r3
 800e522:	69ba      	ldr	r2, [r7, #24]
 800e524:	4313      	orrs	r3, r2
 800e526:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	69ba      	ldr	r2, [r7, #24]
 800e52c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e536:	2b00      	cmp	r3, #0
 800e538:	f000 80d8 	beq.w	800e6ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e53c:	4b2c      	ldr	r3, [pc, #176]	@ (800e5f0 <HAL_GPIO_Init+0x22c>)
 800e53e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e542:	4a2b      	ldr	r2, [pc, #172]	@ (800e5f0 <HAL_GPIO_Init+0x22c>)
 800e544:	f043 0302 	orr.w	r3, r3, #2
 800e548:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800e54c:	4b28      	ldr	r3, [pc, #160]	@ (800e5f0 <HAL_GPIO_Init+0x22c>)
 800e54e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e552:	f003 0302 	and.w	r3, r3, #2
 800e556:	60fb      	str	r3, [r7, #12]
 800e558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e55a:	4a26      	ldr	r2, [pc, #152]	@ (800e5f4 <HAL_GPIO_Init+0x230>)
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	089b      	lsrs	r3, r3, #2
 800e560:	3302      	adds	r3, #2
 800e562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	f003 0303 	and.w	r3, r3, #3
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	220f      	movs	r2, #15
 800e572:	fa02 f303 	lsl.w	r3, r2, r3
 800e576:	43db      	mvns	r3, r3
 800e578:	69ba      	ldr	r2, [r7, #24]
 800e57a:	4013      	ands	r3, r2
 800e57c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a1d      	ldr	r2, [pc, #116]	@ (800e5f8 <HAL_GPIO_Init+0x234>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d04a      	beq.n	800e61c <HAL_GPIO_Init+0x258>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a1c      	ldr	r2, [pc, #112]	@ (800e5fc <HAL_GPIO_Init+0x238>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d02b      	beq.n	800e5e6 <HAL_GPIO_Init+0x222>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a1b      	ldr	r2, [pc, #108]	@ (800e600 <HAL_GPIO_Init+0x23c>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d025      	beq.n	800e5e2 <HAL_GPIO_Init+0x21e>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a1a      	ldr	r2, [pc, #104]	@ (800e604 <HAL_GPIO_Init+0x240>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d01f      	beq.n	800e5de <HAL_GPIO_Init+0x21a>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a19      	ldr	r2, [pc, #100]	@ (800e608 <HAL_GPIO_Init+0x244>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d019      	beq.n	800e5da <HAL_GPIO_Init+0x216>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4a18      	ldr	r2, [pc, #96]	@ (800e60c <HAL_GPIO_Init+0x248>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d013      	beq.n	800e5d6 <HAL_GPIO_Init+0x212>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a17      	ldr	r2, [pc, #92]	@ (800e610 <HAL_GPIO_Init+0x24c>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d00d      	beq.n	800e5d2 <HAL_GPIO_Init+0x20e>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a16      	ldr	r2, [pc, #88]	@ (800e614 <HAL_GPIO_Init+0x250>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d007      	beq.n	800e5ce <HAL_GPIO_Init+0x20a>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4a15      	ldr	r2, [pc, #84]	@ (800e618 <HAL_GPIO_Init+0x254>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d101      	bne.n	800e5ca <HAL_GPIO_Init+0x206>
 800e5c6:	2309      	movs	r3, #9
 800e5c8:	e029      	b.n	800e61e <HAL_GPIO_Init+0x25a>
 800e5ca:	230a      	movs	r3, #10
 800e5cc:	e027      	b.n	800e61e <HAL_GPIO_Init+0x25a>
 800e5ce:	2307      	movs	r3, #7
 800e5d0:	e025      	b.n	800e61e <HAL_GPIO_Init+0x25a>
 800e5d2:	2306      	movs	r3, #6
 800e5d4:	e023      	b.n	800e61e <HAL_GPIO_Init+0x25a>
 800e5d6:	2305      	movs	r3, #5
 800e5d8:	e021      	b.n	800e61e <HAL_GPIO_Init+0x25a>
 800e5da:	2304      	movs	r3, #4
 800e5dc:	e01f      	b.n	800e61e <HAL_GPIO_Init+0x25a>
 800e5de:	2303      	movs	r3, #3
 800e5e0:	e01d      	b.n	800e61e <HAL_GPIO_Init+0x25a>
 800e5e2:	2302      	movs	r3, #2
 800e5e4:	e01b      	b.n	800e61e <HAL_GPIO_Init+0x25a>
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e019      	b.n	800e61e <HAL_GPIO_Init+0x25a>
 800e5ea:	bf00      	nop
 800e5ec:	58000080 	.word	0x58000080
 800e5f0:	58024400 	.word	0x58024400
 800e5f4:	58000400 	.word	0x58000400
 800e5f8:	58020000 	.word	0x58020000
 800e5fc:	58020400 	.word	0x58020400
 800e600:	58020800 	.word	0x58020800
 800e604:	58020c00 	.word	0x58020c00
 800e608:	58021000 	.word	0x58021000
 800e60c:	58021400 	.word	0x58021400
 800e610:	58021800 	.word	0x58021800
 800e614:	58021c00 	.word	0x58021c00
 800e618:	58022400 	.word	0x58022400
 800e61c:	2300      	movs	r3, #0
 800e61e:	69fa      	ldr	r2, [r7, #28]
 800e620:	f002 0203 	and.w	r2, r2, #3
 800e624:	0092      	lsls	r2, r2, #2
 800e626:	4093      	lsls	r3, r2
 800e628:	69ba      	ldr	r2, [r7, #24]
 800e62a:	4313      	orrs	r3, r2
 800e62c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e62e:	4938      	ldr	r1, [pc, #224]	@ (800e710 <HAL_GPIO_Init+0x34c>)
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	089b      	lsrs	r3, r3, #2
 800e634:	3302      	adds	r3, #2
 800e636:	69ba      	ldr	r2, [r7, #24]
 800e638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e63c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	43db      	mvns	r3, r3
 800e648:	69ba      	ldr	r2, [r7, #24]
 800e64a:	4013      	ands	r3, r2
 800e64c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e656:	2b00      	cmp	r3, #0
 800e658:	d003      	beq.n	800e662 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800e65a:	69ba      	ldr	r2, [r7, #24]
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	4313      	orrs	r3, r2
 800e660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800e662:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e66a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	43db      	mvns	r3, r3
 800e676:	69ba      	ldr	r2, [r7, #24]
 800e678:	4013      	ands	r3, r2
 800e67a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e684:	2b00      	cmp	r3, #0
 800e686:	d003      	beq.n	800e690 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800e688:	69ba      	ldr	r2, [r7, #24]
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	4313      	orrs	r3, r2
 800e68e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800e690:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	43db      	mvns	r3, r3
 800e6a2:	69ba      	ldr	r2, [r7, #24]
 800e6a4:	4013      	ands	r3, r2
 800e6a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d003      	beq.n	800e6bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800e6b4:	69ba      	ldr	r2, [r7, #24]
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	4313      	orrs	r3, r2
 800e6ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	69ba      	ldr	r2, [r7, #24]
 800e6c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	43db      	mvns	r3, r3
 800e6cc:	69ba      	ldr	r2, [r7, #24]
 800e6ce:	4013      	ands	r3, r2
 800e6d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d003      	beq.n	800e6e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800e6de:	69ba      	ldr	r2, [r7, #24]
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	69ba      	ldr	r2, [r7, #24]
 800e6ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	fa22 f303 	lsr.w	r3, r2, r3
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f47f ae6b 	bne.w	800e3d8 <HAL_GPIO_Init+0x14>
  }
}
 800e702:	bf00      	nop
 800e704:	bf00      	nop
 800e706:	3724      	adds	r7, #36	@ 0x24
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr
 800e710:	58000400 	.word	0x58000400

0800e714 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800e714:	b480      	push	{r7}
 800e716:	b085      	sub	sp, #20
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	460b      	mov	r3, r1
 800e71e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	691a      	ldr	r2, [r3, #16]
 800e724:	887b      	ldrh	r3, [r7, #2]
 800e726:	4013      	ands	r3, r2
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d002      	beq.n	800e732 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e72c:	2301      	movs	r3, #1
 800e72e:	73fb      	strb	r3, [r7, #15]
 800e730:	e001      	b.n	800e736 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e732:	2300      	movs	r3, #0
 800e734:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e736:	7bfb      	ldrb	r3, [r7, #15]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3714      	adds	r7, #20
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	460b      	mov	r3, r1
 800e74e:	807b      	strh	r3, [r7, #2]
 800e750:	4613      	mov	r3, r2
 800e752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e754:	787b      	ldrb	r3, [r7, #1]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d003      	beq.n	800e762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e75a:	887a      	ldrh	r2, [r7, #2]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800e760:	e003      	b.n	800e76a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800e762:	887b      	ldrh	r3, [r7, #2]
 800e764:	041a      	lsls	r2, r3, #16
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	619a      	str	r2, [r3, #24]
}
 800e76a:	bf00      	nop
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e776:	b580      	push	{r7, lr}
 800e778:	b082      	sub	sp, #8
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	4603      	mov	r3, r0
 800e77e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800e780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e784:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e788:	88fb      	ldrh	r3, [r7, #6]
 800e78a:	4013      	ands	r3, r2
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d008      	beq.n	800e7a2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e790:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e794:	88fb      	ldrh	r3, [r7, #6]
 800e796:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e79a:	88fb      	ldrh	r3, [r7, #6]
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7f7 fd61 	bl	8006264 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800e7a2:	bf00      	nop
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
	...

0800e7ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d101      	bne.n	800e7be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e08b      	b.n	800e8d6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f7f6 fb50 	bl	8004e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2224      	movs	r2, #36	@ 0x24
 800e7dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f022 0201 	bic.w	r2, r2, #1
 800e7ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	685a      	ldr	r2, [r3, #4]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e7fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	689a      	ldr	r2, [r3, #8]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e80c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	2b01      	cmp	r3, #1
 800e814:	d107      	bne.n	800e826 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	689a      	ldr	r2, [r3, #8]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e822:	609a      	str	r2, [r3, #8]
 800e824:	e006      	b.n	800e834 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	689a      	ldr	r2, [r3, #8]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e832:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	2b02      	cmp	r3, #2
 800e83a:	d108      	bne.n	800e84e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	685a      	ldr	r2, [r3, #4]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e84a:	605a      	str	r2, [r3, #4]
 800e84c:	e007      	b.n	800e85e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	685a      	ldr	r2, [r3, #4]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e85c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	6859      	ldr	r1, [r3, #4]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	4b1d      	ldr	r3, [pc, #116]	@ (800e8e0 <HAL_I2C_Init+0x134>)
 800e86a:	430b      	orrs	r3, r1
 800e86c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	68da      	ldr	r2, [r3, #12]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e87c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	691a      	ldr	r2, [r3, #16]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	695b      	ldr	r3, [r3, #20]
 800e886:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	699b      	ldr	r3, [r3, #24]
 800e88e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	430a      	orrs	r2, r1
 800e896:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	69d9      	ldr	r1, [r3, #28]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a1a      	ldr	r2, [r3, #32]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	430a      	orrs	r2, r1
 800e8a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f042 0201 	orr.w	r2, r2, #1
 800e8b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2220      	movs	r2, #32
 800e8c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3708      	adds	r7, #8
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	02008000 	.word	0x02008000

0800e8e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b088      	sub	sp, #32
 800e8e8:	af02      	add	r7, sp, #8
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	4608      	mov	r0, r1
 800e8ee:	4611      	mov	r1, r2
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	817b      	strh	r3, [r7, #10]
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	813b      	strh	r3, [r7, #8]
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e904:	b2db      	uxtb	r3, r3
 800e906:	2b20      	cmp	r3, #32
 800e908:	f040 80f9 	bne.w	800eafe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e90c:	6a3b      	ldr	r3, [r7, #32]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d002      	beq.n	800e918 <HAL_I2C_Mem_Write+0x34>
 800e912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e914:	2b00      	cmp	r3, #0
 800e916:	d105      	bne.n	800e924 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e91e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e920:	2301      	movs	r3, #1
 800e922:	e0ed      	b.n	800eb00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d101      	bne.n	800e932 <HAL_I2C_Mem_Write+0x4e>
 800e92e:	2302      	movs	r3, #2
 800e930:	e0e6      	b.n	800eb00 <HAL_I2C_Mem_Write+0x21c>
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2201      	movs	r2, #1
 800e936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e93a:	f7fa fdbb 	bl	80094b4 <HAL_GetTick>
 800e93e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	2319      	movs	r3, #25
 800e946:	2201      	movs	r2, #1
 800e948:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f002 f818 	bl	8010982 <I2C_WaitOnFlagUntilTimeout>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d001      	beq.n	800e95c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e958:	2301      	movs	r3, #1
 800e95a:	e0d1      	b.n	800eb00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2221      	movs	r2, #33	@ 0x21
 800e960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2240      	movs	r2, #64	@ 0x40
 800e968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2200      	movs	r2, #0
 800e970:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6a3a      	ldr	r2, [r7, #32]
 800e976:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e97c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2200      	movs	r2, #0
 800e982:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e984:	88f8      	ldrh	r0, [r7, #6]
 800e986:	893a      	ldrh	r2, [r7, #8]
 800e988:	8979      	ldrh	r1, [r7, #10]
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	9301      	str	r3, [sp, #4]
 800e98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	4603      	mov	r3, r0
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f001 f965 	bl	800fc64 <I2C_RequestMemoryWrite>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d005      	beq.n	800e9ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e0a9      	b.n	800eb00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	2bff      	cmp	r3, #255	@ 0xff
 800e9b4:	d90e      	bls.n	800e9d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	22ff      	movs	r2, #255	@ 0xff
 800e9ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9c0:	b2da      	uxtb	r2, r3
 800e9c2:	8979      	ldrh	r1, [r7, #10]
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f002 f99b 	bl	8010d08 <I2C_TransferConfig>
 800e9d2:	e00f      	b.n	800e9f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9e2:	b2da      	uxtb	r2, r3
 800e9e4:	8979      	ldrh	r1, [r7, #10]
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	9300      	str	r3, [sp, #0]
 800e9ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	f002 f98a 	bl	8010d08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e9f4:	697a      	ldr	r2, [r7, #20]
 800e9f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f002 f81b 	bl	8010a34 <I2C_WaitOnTXISFlagUntilTimeout>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d001      	beq.n	800ea08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ea04:	2301      	movs	r3, #1
 800ea06:	e07b      	b.n	800eb00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea0c:	781a      	ldrb	r2, [r3, #0]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea18:	1c5a      	adds	r2, r3, #1
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	3b01      	subs	r3, #1
 800ea26:	b29a      	uxth	r2, r3
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea30:	3b01      	subs	r3, #1
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d034      	beq.n	800eaac <HAL_I2C_Mem_Write+0x1c8>
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d130      	bne.n	800eaac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	9300      	str	r3, [sp, #0]
 800ea4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea50:	2200      	movs	r2, #0
 800ea52:	2180      	movs	r1, #128	@ 0x80
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f001 ff94 	bl	8010982 <I2C_WaitOnFlagUntilTimeout>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d001      	beq.n	800ea64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ea60:	2301      	movs	r3, #1
 800ea62:	e04d      	b.n	800eb00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	2bff      	cmp	r3, #255	@ 0xff
 800ea6c:	d90e      	bls.n	800ea8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	22ff      	movs	r2, #255	@ 0xff
 800ea72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	8979      	ldrh	r1, [r7, #10]
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	9300      	str	r3, [sp, #0]
 800ea80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f002 f93f 	bl	8010d08 <I2C_TransferConfig>
 800ea8a:	e00f      	b.n	800eaac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	8979      	ldrh	r1, [r7, #10]
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	9300      	str	r3, [sp, #0]
 800eaa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eaa6:	68f8      	ldr	r0, [r7, #12]
 800eaa8:	f002 f92e 	bl	8010d08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d19e      	bne.n	800e9f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eab6:	697a      	ldr	r2, [r7, #20]
 800eab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f002 f801 	bl	8010ac2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800eac6:	2301      	movs	r3, #1
 800eac8:	e01a      	b.n	800eb00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2220      	movs	r2, #32
 800ead0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	6859      	ldr	r1, [r3, #4]
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	4b0a      	ldr	r3, [pc, #40]	@ (800eb08 <HAL_I2C_Mem_Write+0x224>)
 800eade:	400b      	ands	r3, r1
 800eae0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2220      	movs	r2, #32
 800eae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800eafa:	2300      	movs	r3, #0
 800eafc:	e000      	b.n	800eb00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800eafe:	2302      	movs	r3, #2
  }
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3718      	adds	r7, #24
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	fe00e800 	.word	0xfe00e800

0800eb0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b088      	sub	sp, #32
 800eb10:	af02      	add	r7, sp, #8
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	4608      	mov	r0, r1
 800eb16:	4611      	mov	r1, r2
 800eb18:	461a      	mov	r2, r3
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	817b      	strh	r3, [r7, #10]
 800eb1e:	460b      	mov	r3, r1
 800eb20:	813b      	strh	r3, [r7, #8]
 800eb22:	4613      	mov	r3, r2
 800eb24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	2b20      	cmp	r3, #32
 800eb30:	f040 80fd 	bne.w	800ed2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb34:	6a3b      	ldr	r3, [r7, #32]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d002      	beq.n	800eb40 <HAL_I2C_Mem_Read+0x34>
 800eb3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d105      	bne.n	800eb4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb46:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800eb48:	2301      	movs	r3, #1
 800eb4a:	e0f1      	b.n	800ed30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d101      	bne.n	800eb5a <HAL_I2C_Mem_Read+0x4e>
 800eb56:	2302      	movs	r3, #2
 800eb58:	e0ea      	b.n	800ed30 <HAL_I2C_Mem_Read+0x224>
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800eb62:	f7fa fca7 	bl	80094b4 <HAL_GetTick>
 800eb66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	9300      	str	r3, [sp, #0]
 800eb6c:	2319      	movs	r3, #25
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800eb74:	68f8      	ldr	r0, [r7, #12]
 800eb76:	f001 ff04 	bl	8010982 <I2C_WaitOnFlagUntilTimeout>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d001      	beq.n	800eb84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800eb80:	2301      	movs	r3, #1
 800eb82:	e0d5      	b.n	800ed30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2222      	movs	r2, #34	@ 0x22
 800eb88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2240      	movs	r2, #64	@ 0x40
 800eb90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2200      	movs	r2, #0
 800eb98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	6a3a      	ldr	r2, [r7, #32]
 800eb9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800eba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ebac:	88f8      	ldrh	r0, [r7, #6]
 800ebae:	893a      	ldrh	r2, [r7, #8]
 800ebb0:	8979      	ldrh	r1, [r7, #10]
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	9301      	str	r3, [sp, #4]
 800ebb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	4603      	mov	r3, r0
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f001 f8a5 	bl	800fd0c <I2C_RequestMemoryRead>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d005      	beq.n	800ebd4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e0ad      	b.n	800ed30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	2bff      	cmp	r3, #255	@ 0xff
 800ebdc:	d90e      	bls.n	800ebfc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	22ff      	movs	r2, #255	@ 0xff
 800ebe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ebe8:	b2da      	uxtb	r2, r3
 800ebea:	8979      	ldrh	r1, [r7, #10]
 800ebec:	4b52      	ldr	r3, [pc, #328]	@ (800ed38 <HAL_I2C_Mem_Read+0x22c>)
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ebf4:	68f8      	ldr	r0, [r7, #12]
 800ebf6:	f002 f887 	bl	8010d08 <I2C_TransferConfig>
 800ebfa:	e00f      	b.n	800ec1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec00:	b29a      	uxth	r2, r3
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	8979      	ldrh	r1, [r7, #10]
 800ec0e:	4b4a      	ldr	r3, [pc, #296]	@ (800ed38 <HAL_I2C_Mem_Read+0x22c>)
 800ec10:	9300      	str	r3, [sp, #0]
 800ec12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f002 f876 	bl	8010d08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	9300      	str	r3, [sp, #0]
 800ec20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec22:	2200      	movs	r2, #0
 800ec24:	2104      	movs	r1, #4
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f001 feab 	bl	8010982 <I2C_WaitOnFlagUntilTimeout>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d001      	beq.n	800ec36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ec32:	2301      	movs	r3, #1
 800ec34:	e07c      	b.n	800ed30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec40:	b2d2      	uxtb	r2, r2
 800ec42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec48:	1c5a      	adds	r2, r3, #1
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec52:	3b01      	subs	r3, #1
 800ec54:	b29a      	uxth	r2, r3
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	3b01      	subs	r3, #1
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d034      	beq.n	800ecdc <HAL_I2C_Mem_Read+0x1d0>
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d130      	bne.n	800ecdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	9300      	str	r3, [sp, #0]
 800ec7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec80:	2200      	movs	r2, #0
 800ec82:	2180      	movs	r1, #128	@ 0x80
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f001 fe7c 	bl	8010982 <I2C_WaitOnFlagUntilTimeout>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d001      	beq.n	800ec94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ec90:	2301      	movs	r3, #1
 800ec92:	e04d      	b.n	800ed30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	2bff      	cmp	r3, #255	@ 0xff
 800ec9c:	d90e      	bls.n	800ecbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	22ff      	movs	r2, #255	@ 0xff
 800eca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eca8:	b2da      	uxtb	r2, r3
 800ecaa:	8979      	ldrh	r1, [r7, #10]
 800ecac:	2300      	movs	r3, #0
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ecb4:	68f8      	ldr	r0, [r7, #12]
 800ecb6:	f002 f827 	bl	8010d08 <I2C_TransferConfig>
 800ecba:	e00f      	b.n	800ecdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecc0:	b29a      	uxth	r2, r3
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	8979      	ldrh	r1, [r7, #10]
 800ecce:	2300      	movs	r3, #0
 800ecd0:	9300      	str	r3, [sp, #0]
 800ecd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	f002 f816 	bl	8010d08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ece0:	b29b      	uxth	r3, r3
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d19a      	bne.n	800ec1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ece6:	697a      	ldr	r2, [r7, #20]
 800ece8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ecea:	68f8      	ldr	r0, [r7, #12]
 800ecec:	f001 fee9 	bl	8010ac2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d001      	beq.n	800ecfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e01a      	b.n	800ed30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2220      	movs	r2, #32
 800ed00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	6859      	ldr	r1, [r3, #4]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ed3c <HAL_I2C_Mem_Read+0x230>)
 800ed0e:	400b      	ands	r3, r1
 800ed10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2220      	movs	r2, #32
 800ed16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	e000      	b.n	800ed30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ed2e:	2302      	movs	r3, #2
  }
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3718      	adds	r7, #24
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	80002400 	.word	0x80002400
 800ed3c:	fe00e800 	.word	0xfe00e800

0800ed40 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af02      	add	r7, sp, #8
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	4608      	mov	r0, r1
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	4603      	mov	r3, r0
 800ed50:	817b      	strh	r3, [r7, #10]
 800ed52:	460b      	mov	r3, r1
 800ed54:	813b      	strh	r3, [r7, #8]
 800ed56:	4613      	mov	r3, r2
 800ed58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	2b20      	cmp	r3, #32
 800ed64:	d16a      	bne.n	800ee3c <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <HAL_I2C_Mem_Write_IT+0x32>
 800ed6c:	8bbb      	ldrh	r3, [r7, #28]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d105      	bne.n	800ed7e <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed78:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e05f      	b.n	800ee3e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	699b      	ldr	r3, [r3, #24]
 800ed84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ed88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed8c:	d101      	bne.n	800ed92 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 800ed8e:	2302      	movs	r3, #2
 800ed90:	e055      	b.n	800ee3e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d101      	bne.n	800eda0 <HAL_I2C_Mem_Write_IT+0x60>
 800ed9c:	2302      	movs	r3, #2
 800ed9e:	e04e      	b.n	800ee3e <HAL_I2C_Mem_Write_IT+0xfe>
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2221      	movs	r2, #33	@ 0x21
 800edac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2240      	movs	r2, #64	@ 0x40
 800edb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2200      	movs	r2, #0
 800edbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2200      	movs	r2, #0
 800edc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	69ba      	ldr	r2, [r7, #24]
 800edc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	8bba      	ldrh	r2, [r7, #28]
 800edce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	4a1d      	ldr	r2, [pc, #116]	@ (800ee48 <HAL_I2C_Mem_Write_IT+0x108>)
 800edd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	4a1c      	ldr	r2, [pc, #112]	@ (800ee4c <HAL_I2C_Mem_Write_IT+0x10c>)
 800edda:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800eddc:	897a      	ldrh	r2, [r7, #10]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ede2:	88fb      	ldrh	r3, [r7, #6]
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d109      	bne.n	800edfc <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ede8:	893b      	ldrh	r3, [r7, #8]
 800edea:	b2da      	uxtb	r2, r3
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f04f 32ff 	mov.w	r2, #4294967295
 800edf8:	651a      	str	r2, [r3, #80]	@ 0x50
 800edfa:	e00b      	b.n	800ee14 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800edfc:	893b      	ldrh	r3, [r7, #8]
 800edfe:	0a1b      	lsrs	r3, r3, #8
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	b2da      	uxtb	r2, r3
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ee0a:	893b      	ldrh	r3, [r7, #8]
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	461a      	mov	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ee14:	88fb      	ldrh	r3, [r7, #6]
 800ee16:	b2da      	uxtb	r2, r3
 800ee18:	8979      	ldrh	r1, [r7, #10]
 800ee1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee50 <HAL_I2C_Mem_Write_IT+0x110>)
 800ee1c:	9300      	str	r3, [sp, #0]
 800ee1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ee22:	68f8      	ldr	r0, [r7, #12]
 800ee24:	f001 ff70 	bl	8010d08 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ee30:	2101      	movs	r1, #1
 800ee32:	68f8      	ldr	r0, [r7, #12]
 800ee34:	f001 ff9a 	bl	8010d6c <I2C_Enable_IRQ>

    return HAL_OK;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	e000      	b.n	800ee3e <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ee3c:	2302      	movs	r3, #2
  }
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	ffff0000 	.word	0xffff0000
 800ee4c:	0800f051 	.word	0x0800f051
 800ee50:	80002000 	.word	0x80002000

0800ee54 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af02      	add	r7, sp, #8
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	4608      	mov	r0, r1
 800ee5e:	4611      	mov	r1, r2
 800ee60:	461a      	mov	r2, r3
 800ee62:	4603      	mov	r3, r0
 800ee64:	817b      	strh	r3, [r7, #10]
 800ee66:	460b      	mov	r3, r1
 800ee68:	813b      	strh	r3, [r7, #8]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b20      	cmp	r3, #32
 800ee78:	d166      	bne.n	800ef48 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d002      	beq.n	800ee86 <HAL_I2C_Mem_Read_IT+0x32>
 800ee80:	8bbb      	ldrh	r3, [r7, #28]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d105      	bne.n	800ee92 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee8c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e05b      	b.n	800ef4a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ee9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eea0:	d101      	bne.n	800eea6 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800eea2:	2302      	movs	r3, #2
 800eea4:	e051      	b.n	800ef4a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d101      	bne.n	800eeb4 <HAL_I2C_Mem_Read_IT+0x60>
 800eeb0:	2302      	movs	r3, #2
 800eeb2:	e04a      	b.n	800ef4a <HAL_I2C_Mem_Read_IT+0xf6>
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2222      	movs	r2, #34	@ 0x22
 800eec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2240      	movs	r2, #64	@ 0x40
 800eec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2200      	movs	r2, #0
 800eed0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	69ba      	ldr	r2, [r7, #24]
 800eed6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	8bba      	ldrh	r2, [r7, #28]
 800eedc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	4a1c      	ldr	r2, [pc, #112]	@ (800ef54 <HAL_I2C_Mem_Read_IT+0x100>)
 800eee2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	4a1c      	ldr	r2, [pc, #112]	@ (800ef58 <HAL_I2C_Mem_Read_IT+0x104>)
 800eee8:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800eeea:	897a      	ldrh	r2, [r7, #10]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eef0:	88fb      	ldrh	r3, [r7, #6]
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d109      	bne.n	800ef0a <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800eef6:	893b      	ldrh	r3, [r7, #8]
 800eef8:	b2da      	uxtb	r2, r3
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f04f 32ff 	mov.w	r2, #4294967295
 800ef06:	651a      	str	r2, [r3, #80]	@ 0x50
 800ef08:	e00b      	b.n	800ef22 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ef0a:	893b      	ldrh	r3, [r7, #8]
 800ef0c:	0a1b      	lsrs	r3, r3, #8
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	b2da      	uxtb	r2, r3
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800ef18:	893b      	ldrh	r3, [r7, #8]
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ef22:	88fb      	ldrh	r3, [r7, #6]
 800ef24:	b2da      	uxtb	r2, r3
 800ef26:	8979      	ldrh	r1, [r7, #10]
 800ef28:	4b0c      	ldr	r3, [pc, #48]	@ (800ef5c <HAL_I2C_Mem_Read_IT+0x108>)
 800ef2a:	9300      	str	r3, [sp, #0]
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f001 feea 	bl	8010d08 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	2200      	movs	r2, #0
 800ef38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ef3c:	2101      	movs	r1, #1
 800ef3e:	68f8      	ldr	r0, [r7, #12]
 800ef40:	f001 ff14 	bl	8010d6c <I2C_Enable_IRQ>

    return HAL_OK;
 800ef44:	2300      	movs	r3, #0
 800ef46:	e000      	b.n	800ef4a <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800ef48:	2302      	movs	r3, #2
  }
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	ffff0000 	.word	0xffff0000
 800ef58:	0800f051 	.word	0x0800f051
 800ef5c:	80002000 	.word	0x80002000

0800ef60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b084      	sub	sp, #16
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	699b      	ldr	r3, [r3, #24]
 800ef6e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d005      	beq.n	800ef8c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef84:	68ba      	ldr	r2, [r7, #8]
 800ef86:	68f9      	ldr	r1, [r7, #12]
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	4798      	blx	r3
  }
}
 800ef8c:	bf00      	nop
 800ef8e:	3710      	adds	r7, #16
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ef9c:	bf00      	nop
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800efb0:	bf00      	nop
 800efb2:	370c      	adds	r7, #12
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800efc4:	bf00      	nop
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800efd8:	bf00      	nop
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	460b      	mov	r3, r1
 800efee:	70fb      	strb	r3, [r7, #3]
 800eff0:	4613      	mov	r3, r2
 800eff2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800eff4:	bf00      	nop
 800eff6:	370c      	adds	r7, #12
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f008:	bf00      	nop
 800f00a:	370c      	adds	r7, #12
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f01c:	bf00      	nop
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr

0800f028 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f030:	bf00      	nop
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f044:	bf00      	nop
 800f046:	370c      	adds	r7, #12
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b088      	sub	sp, #32
 800f054:	af02      	add	r7, sp, #8
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f05c:	4b8d      	ldr	r3, [pc, #564]	@ (800f294 <I2C_Mem_ISR_IT+0x244>)
 800f05e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d101      	bne.n	800f072 <I2C_Mem_ISR_IT+0x22>
 800f06e:	2302      	movs	r3, #2
 800f070:	e10c      	b.n	800f28c <I2C_Mem_ISR_IT+0x23c>
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2201      	movs	r2, #1
 800f076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	f003 0310 	and.w	r3, r3, #16
 800f080:	2b00      	cmp	r3, #0
 800f082:	d012      	beq.n	800f0aa <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00d      	beq.n	800f0aa <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2210      	movs	r2, #16
 800f094:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f09a:	f043 0204 	orr.w	r2, r3, #4
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f001 fc2b 	bl	80108fe <I2C_Flush_TXDR>
 800f0a8:	e0dd      	b.n	800f266 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	f003 0304 	and.w	r3, r3, #4
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d022      	beq.n	800f0fa <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d01d      	beq.n	800f0fa <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	f023 0304 	bic.w	r3, r3, #4
 800f0c4:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0d0:	b2d2      	uxtb	r2, r2
 800f0d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0d8:	1c5a      	adds	r2, r3, #1
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0e2:	3b01      	subs	r3, #1
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	3b01      	subs	r3, #1
 800f0f2:	b29a      	uxth	r2, r3
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f0f8:	e0b5      	b.n	800f266 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	f003 0302 	and.w	r3, r3, #2
 800f100:	2b00      	cmp	r3, #0
 800f102:	d02c      	beq.n	800f15e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d027      	beq.n	800f15e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f116:	d118      	bne.n	800f14a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f11c:	781a      	ldrb	r2, [r3, #0]
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f128:	1c5a      	adds	r2, r3, #1
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f132:	3b01      	subs	r3, #1
 800f134:	b29a      	uxth	r2, r3
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f13e:	b29b      	uxth	r3, r3
 800f140:	3b01      	subs	r3, #1
 800f142:	b29a      	uxth	r2, r3
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f148:	e08d      	b.n	800f266 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f152:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f04f 32ff 	mov.w	r2, #4294967295
 800f15a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800f15c:	e083      	b.n	800f266 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f164:	2b00      	cmp	r3, #0
 800f166:	d03c      	beq.n	800f1e2 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d037      	beq.n	800f1e2 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f176:	b29b      	uxth	r3, r3
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d02c      	beq.n	800f1d6 <I2C_Mem_ISR_IT+0x186>
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f180:	2b00      	cmp	r3, #0
 800f182:	d128      	bne.n	800f1d6 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f188:	b29b      	uxth	r3, r3
 800f18a:	2bff      	cmp	r3, #255	@ 0xff
 800f18c:	d910      	bls.n	800f1b0 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	22ff      	movs	r2, #255	@ 0xff
 800f192:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f198:	b299      	uxth	r1, r3
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f19e:	b2da      	uxtb	r2, r3
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f1a8:	68f8      	ldr	r0, [r7, #12]
 800f1aa:	f001 fdad 	bl	8010d08 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f1ae:	e017      	b.n	800f1e0 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1be:	b299      	uxth	r1, r3
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	9300      	str	r3, [sp, #0]
 800f1ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f1ce:	68f8      	ldr	r0, [r7, #12]
 800f1d0:	f001 fd9a 	bl	8010d08 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f1d4:	e004      	b.n	800f1e0 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f1d6:	2140      	movs	r1, #64	@ 0x40
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f001 fa79 	bl	80106d0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f1de:	e042      	b.n	800f266 <I2C_Mem_ISR_IT+0x216>
 800f1e0:	e041      	b.n	800f266 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d03c      	beq.n	800f266 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d037      	beq.n	800f266 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f1f6:	2101      	movs	r1, #1
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f001 fe3b 	bl	8010e74 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f1fe:	2102      	movs	r1, #2
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f001 fdb3 	bl	8010d6c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	2b22      	cmp	r3, #34	@ 0x22
 800f210:	d101      	bne.n	800f216 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800f212:	4b21      	ldr	r3, [pc, #132]	@ (800f298 <I2C_Mem_ISR_IT+0x248>)
 800f214:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	2bff      	cmp	r3, #255	@ 0xff
 800f21e:	d910      	bls.n	800f242 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	22ff      	movs	r2, #255	@ 0xff
 800f224:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f22a:	b299      	uxth	r1, r3
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f230:	b2da      	uxtb	r2, r3
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	9300      	str	r3, [sp, #0]
 800f236:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f001 fd64 	bl	8010d08 <I2C_TransferConfig>
 800f240:	e011      	b.n	800f266 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f246:	b29a      	uxth	r2, r3
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f250:	b299      	uxth	r1, r3
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f256:	b2da      	uxtb	r2, r3
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	9300      	str	r3, [sp, #0]
 800f25c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f260:	68f8      	ldr	r0, [r7, #12]
 800f262:	f001 fd51 	bl	8010d08 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	f003 0320 	and.w	r3, r3, #32
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d008      	beq.n	800f282 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f276:	2b00      	cmp	r3, #0
 800f278:	d003      	beq.n	800f282 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f27a:	6939      	ldr	r1, [r7, #16]
 800f27c:	68f8      	ldr	r0, [r7, #12]
 800f27e:	f000 feb7 	bl	800fff0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2200      	movs	r2, #0
 800f286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f28a:	2300      	movs	r3, #0
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3718      	adds	r7, #24
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	80002000 	.word	0x80002000
 800f298:	80002400 	.word	0x80002400

0800f29c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b086      	sub	sp, #24
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	60f8      	str	r0, [r7, #12]
 800f2a4:	60b9      	str	r1, [r7, #8]
 800f2a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	d101      	bne.n	800f2c0 <I2C_Slave_ISR_IT+0x24>
 800f2bc:	2302      	movs	r3, #2
 800f2be:	e0e2      	b.n	800f486 <I2C_Slave_ISR_IT+0x1ea>
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	f003 0320 	and.w	r3, r3, #32
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d009      	beq.n	800f2e6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d004      	beq.n	800f2e6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f2dc:	6939      	ldr	r1, [r7, #16]
 800f2de:	68f8      	ldr	r0, [r7, #12]
 800f2e0:	f000 ff4e 	bl	8010180 <I2C_ITSlaveCplt>
 800f2e4:	e0ca      	b.n	800f47c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	f003 0310 	and.w	r3, r3, #16
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d04b      	beq.n	800f388 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d046      	beq.n	800f388 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	2b00      	cmp	r3, #0
 800f302:	d128      	bne.n	800f356 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	2b28      	cmp	r3, #40	@ 0x28
 800f30e:	d108      	bne.n	800f322 <I2C_Slave_ISR_IT+0x86>
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f316:	d104      	bne.n	800f322 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f318:	6939      	ldr	r1, [r7, #16]
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f001 f984 	bl	8010628 <I2C_ITListenCplt>
 800f320:	e031      	b.n	800f386 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	2b29      	cmp	r3, #41	@ 0x29
 800f32c:	d10e      	bne.n	800f34c <I2C_Slave_ISR_IT+0xb0>
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f334:	d00a      	beq.n	800f34c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	2210      	movs	r2, #16
 800f33c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	f001 fadd 	bl	80108fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f000 fdf6 	bl	800ff36 <I2C_ITSlaveSeqCplt>
 800f34a:	e01c      	b.n	800f386 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2210      	movs	r2, #16
 800f352:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f354:	e08f      	b.n	800f476 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2210      	movs	r2, #16
 800f35c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f362:	f043 0204 	orr.w	r2, r3, #4
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d003      	beq.n	800f378 <I2C_Slave_ISR_IT+0xdc>
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f376:	d17e      	bne.n	800f476 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f37c:	4619      	mov	r1, r3
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f001 f9a6 	bl	80106d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f384:	e077      	b.n	800f476 <I2C_Slave_ISR_IT+0x1da>
 800f386:	e076      	b.n	800f476 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	f003 0304 	and.w	r3, r3, #4
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d02f      	beq.n	800f3f2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d02a      	beq.n	800f3f2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d018      	beq.n	800f3d8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3b0:	b2d2      	uxtb	r2, r2
 800f3b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3b8:	1c5a      	adds	r2, r3, #1
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	b29a      	uxth	r2, r3
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d14b      	bne.n	800f47a <I2C_Slave_ISR_IT+0x1de>
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f3e8:	d047      	beq.n	800f47a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f000 fda3 	bl	800ff36 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f3f0:	e043      	b.n	800f47a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	f003 0308 	and.w	r3, r3, #8
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d009      	beq.n	800f410 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f402:	2b00      	cmp	r3, #0
 800f404:	d004      	beq.n	800f410 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f406:	6939      	ldr	r1, [r7, #16]
 800f408:	68f8      	ldr	r0, [r7, #12]
 800f40a:	f000 fcd3 	bl	800fdb4 <I2C_ITAddrCplt>
 800f40e:	e035      	b.n	800f47c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	f003 0302 	and.w	r3, r3, #2
 800f416:	2b00      	cmp	r3, #0
 800f418:	d030      	beq.n	800f47c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f420:	2b00      	cmp	r3, #0
 800f422:	d02b      	beq.n	800f47c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f428:	b29b      	uxth	r3, r3
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d018      	beq.n	800f460 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f432:	781a      	ldrb	r2, [r3, #0]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f43e:	1c5a      	adds	r2, r3, #1
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f448:	b29b      	uxth	r3, r3
 800f44a:	3b01      	subs	r3, #1
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f456:	3b01      	subs	r3, #1
 800f458:	b29a      	uxth	r2, r3
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f45e:	e00d      	b.n	800f47c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f466:	d002      	beq.n	800f46e <I2C_Slave_ISR_IT+0x1d2>
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d106      	bne.n	800f47c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f000 fd61 	bl	800ff36 <I2C_ITSlaveSeqCplt>
 800f474:	e002      	b.n	800f47c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800f476:	bf00      	nop
 800f478:	e000      	b.n	800f47c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800f47a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2200      	movs	r2, #0
 800f480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f484:	2300      	movs	r3, #0
}
 800f486:	4618      	mov	r0, r3
 800f488:	3718      	adds	r7, #24
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}

0800f48e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f48e:	b580      	push	{r7, lr}
 800f490:	b088      	sub	sp, #32
 800f492:	af02      	add	r7, sp, #8
 800f494:	60f8      	str	r0, [r7, #12]
 800f496:	60b9      	str	r1, [r7, #8]
 800f498:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d101      	bne.n	800f4a8 <I2C_Master_ISR_DMA+0x1a>
 800f4a4:	2302      	movs	r3, #2
 800f4a6:	e0d9      	b.n	800f65c <I2C_Master_ISR_DMA+0x1ce>
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	f003 0310 	and.w	r3, r3, #16
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d016      	beq.n	800f4e8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d011      	beq.n	800f4e8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2210      	movs	r2, #16
 800f4ca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4d0:	f043 0204 	orr.w	r2, r3, #4
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f4d8:	2120      	movs	r1, #32
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f001 fc46 	bl	8010d6c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f001 fa0c 	bl	80108fe <I2C_Flush_TXDR>
 800f4e6:	e0b4      	b.n	800f652 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d071      	beq.n	800f5d6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d06c      	beq.n	800f5d6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f50a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f510:	b29b      	uxth	r3, r3
 800f512:	2b00      	cmp	r3, #0
 800f514:	d04e      	beq.n	800f5b4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f522:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f528:	b29b      	uxth	r3, r3
 800f52a:	2bff      	cmp	r3, #255	@ 0xff
 800f52c:	d906      	bls.n	800f53c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	22ff      	movs	r2, #255	@ 0xff
 800f532:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800f534:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f538:	617b      	str	r3, [r7, #20]
 800f53a:	e010      	b.n	800f55e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f540:	b29a      	uxth	r2, r3
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f54a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f54e:	d003      	beq.n	800f558 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f554:	617b      	str	r3, [r7, #20]
 800f556:	e002      	b.n	800f55e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800f558:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f55c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f562:	b2da      	uxtb	r2, r3
 800f564:	8a79      	ldrh	r1, [r7, #18]
 800f566:	2300      	movs	r3, #0
 800f568:	9300      	str	r3, [sp, #0]
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f001 fbcb 	bl	8010d08 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f576:	b29a      	uxth	r2, r3
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f57c:	1ad3      	subs	r3, r2, r3
 800f57e:	b29a      	uxth	r2, r3
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	2b22      	cmp	r3, #34	@ 0x22
 800f58e:	d108      	bne.n	800f5a2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	681a      	ldr	r2, [r3, #0]
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f59e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f5a0:	e057      	b.n	800f652 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	681a      	ldr	r2, [r3, #0]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f5b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f5b2:	e04e      	b.n	800f652 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f5c2:	d003      	beq.n	800f5cc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f5c4:	68f8      	ldr	r0, [r7, #12]
 800f5c6:	f000 fc79 	bl	800febc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800f5ca:	e042      	b.n	800f652 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f5cc:	2140      	movs	r1, #64	@ 0x40
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	f001 f87e 	bl	80106d0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f5d4:	e03d      	b.n	800f652 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d028      	beq.n	800f632 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d023      	beq.n	800f632 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d119      	bne.n	800f628 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f5fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f602:	d025      	beq.n	800f650 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f608:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f60c:	d108      	bne.n	800f620 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	685a      	ldr	r2, [r3, #4]
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f61c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800f61e:	e017      	b.n	800f650 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f620:	68f8      	ldr	r0, [r7, #12]
 800f622:	f000 fc4b 	bl	800febc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800f626:	e013      	b.n	800f650 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f628:	2140      	movs	r1, #64	@ 0x40
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f001 f850 	bl	80106d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f630:	e00e      	b.n	800f650 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	f003 0320 	and.w	r3, r3, #32
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d00a      	beq.n	800f652 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f642:	2b00      	cmp	r3, #0
 800f644:	d005      	beq.n	800f652 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f646:	68b9      	ldr	r1, [r7, #8]
 800f648:	68f8      	ldr	r0, [r7, #12]
 800f64a:	f000 fcd1 	bl	800fff0 <I2C_ITMasterCplt>
 800f64e:	e000      	b.n	800f652 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800f650:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f65a:	2300      	movs	r3, #0
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3718      	adds	r7, #24
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}

0800f664 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b088      	sub	sp, #32
 800f668:	af02      	add	r7, sp, #8
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800f670:	4b8d      	ldr	r3, [pc, #564]	@ (800f8a8 <I2C_Mem_ISR_DMA+0x244>)
 800f672:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d101      	bne.n	800f682 <I2C_Mem_ISR_DMA+0x1e>
 800f67e:	2302      	movs	r3, #2
 800f680:	e10e      	b.n	800f8a0 <I2C_Mem_ISR_DMA+0x23c>
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2201      	movs	r2, #1
 800f686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	f003 0310 	and.w	r3, r3, #16
 800f690:	2b00      	cmp	r3, #0
 800f692:	d016      	beq.n	800f6c2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d011      	beq.n	800f6c2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2210      	movs	r2, #16
 800f6a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6aa:	f043 0204 	orr.w	r2, r3, #4
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800f6b2:	2120      	movs	r1, #32
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f001 fb59 	bl	8010d6c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f001 f91f 	bl	80108fe <I2C_Flush_TXDR>
 800f6c0:	e0e9      	b.n	800f896 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	f003 0302 	and.w	r3, r3, #2
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00e      	beq.n	800f6ea <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d009      	beq.n	800f6ea <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	68fa      	ldr	r2, [r7, #12]
 800f6dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f6de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e6:	651a      	str	r2, [r3, #80]	@ 0x50
 800f6e8:	e0d5      	b.n	800f896 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d05f      	beq.n	800f7b4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d05a      	beq.n	800f7b4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f6fe:	2101      	movs	r1, #1
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f001 fbb7 	bl	8010e74 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f706:	2110      	movs	r1, #16
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f001 fb2f 	bl	8010d6c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f712:	b29b      	uxth	r3, r3
 800f714:	2b00      	cmp	r3, #0
 800f716:	d048      	beq.n	800f7aa <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	2bff      	cmp	r3, #255	@ 0xff
 800f720:	d910      	bls.n	800f744 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	22ff      	movs	r2, #255	@ 0xff
 800f726:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f72c:	b299      	uxth	r1, r3
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f732:	b2da      	uxtb	r2, r3
 800f734:	2300      	movs	r3, #0
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f73c:	68f8      	ldr	r0, [r7, #12]
 800f73e:	f001 fae3 	bl	8010d08 <I2C_TransferConfig>
 800f742:	e011      	b.n	800f768 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f748:	b29a      	uxth	r2, r3
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f752:	b299      	uxth	r1, r3
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f758:	b2da      	uxtb	r2, r3
 800f75a:	2300      	movs	r3, #0
 800f75c:	9300      	str	r3, [sp, #0]
 800f75e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f762:	68f8      	ldr	r0, [r7, #12]
 800f764:	f001 fad0 	bl	8010d08 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f76c:	b29a      	uxth	r2, r3
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f772:	1ad3      	subs	r3, r2, r3
 800f774:	b29a      	uxth	r2, r3
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f780:	b2db      	uxtb	r3, r3
 800f782:	2b22      	cmp	r3, #34	@ 0x22
 800f784:	d108      	bne.n	800f798 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	681a      	ldr	r2, [r3, #0]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f794:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f796:	e07e      	b.n	800f896 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f7a6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800f7a8:	e075      	b.n	800f896 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f7aa:	2140      	movs	r1, #64	@ 0x40
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f000 ff8f 	bl	80106d0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800f7b2:	e070      	b.n	800f896 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d05d      	beq.n	800f87a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d058      	beq.n	800f87a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f7c8:	2101      	movs	r1, #1
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f001 fb52 	bl	8010e74 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f7d0:	2110      	movs	r1, #16
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	f001 faca 	bl	8010d6c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	2b22      	cmp	r3, #34	@ 0x22
 800f7e2:	d101      	bne.n	800f7e8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800f7e4:	4b31      	ldr	r3, [pc, #196]	@ (800f8ac <I2C_Mem_ISR_DMA+0x248>)
 800f7e6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	2bff      	cmp	r3, #255	@ 0xff
 800f7f0:	d910      	bls.n	800f814 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	22ff      	movs	r2, #255	@ 0xff
 800f7f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7fc:	b299      	uxth	r1, r3
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f802:	b2da      	uxtb	r2, r3
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	9300      	str	r3, [sp, #0]
 800f808:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f001 fa7b 	bl	8010d08 <I2C_TransferConfig>
 800f812:	e011      	b.n	800f838 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f818:	b29a      	uxth	r2, r3
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f822:	b299      	uxth	r1, r3
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f828:	b2da      	uxtb	r2, r3
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f001 fa68 	bl	8010d08 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f842:	1ad3      	subs	r3, r2, r3
 800f844:	b29a      	uxth	r2, r3
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f850:	b2db      	uxtb	r3, r3
 800f852:	2b22      	cmp	r3, #34	@ 0x22
 800f854:	d108      	bne.n	800f868 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f864:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f866:	e016      	b.n	800f896 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f876:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f878:	e00d      	b.n	800f896 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	f003 0320 	and.w	r3, r3, #32
 800f880:	2b00      	cmp	r3, #0
 800f882:	d008      	beq.n	800f896 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d003      	beq.n	800f896 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800f88e:	68b9      	ldr	r1, [r7, #8]
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f000 fbad 	bl	800fff0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	2200      	movs	r2, #0
 800f89a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f89e:	2300      	movs	r3, #0
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3718      	adds	r7, #24
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	80002000 	.word	0x80002000
 800f8ac:	80002400 	.word	0x80002400

0800f8b0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b088      	sub	sp, #32
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	60f8      	str	r0, [r7, #12]
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8c0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d101      	bne.n	800f8d4 <I2C_Slave_ISR_DMA+0x24>
 800f8d0:	2302      	movs	r3, #2
 800f8d2:	e1c2      	b.n	800fc5a <I2C_Slave_ISR_DMA+0x3aa>
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	f003 0320 	and.w	r3, r3, #32
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d009      	beq.n	800f8fa <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d004      	beq.n	800f8fa <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800f8f0:	68b9      	ldr	r1, [r7, #8]
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f000 fc44 	bl	8010180 <I2C_ITSlaveCplt>
 800f8f8:	e1aa      	b.n	800fc50 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	f003 0310 	and.w	r3, r3, #16
 800f900:	2b00      	cmp	r3, #0
 800f902:	f000 8197 	beq.w	800fc34 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 8191 	beq.w	800fc34 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d105      	bne.n	800f928 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800f922:	2b00      	cmp	r3, #0
 800f924:	f000 817f 	beq.w	800fc26 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d07b      	beq.n	800fa28 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f936:	2b00      	cmp	r3, #0
 800f938:	d076      	beq.n	800fa28 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a74      	ldr	r2, [pc, #464]	@ (800fb14 <I2C_Slave_ISR_DMA+0x264>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d059      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a72      	ldr	r2, [pc, #456]	@ (800fb18 <I2C_Slave_ISR_DMA+0x268>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	d053      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	4a70      	ldr	r2, [pc, #448]	@ (800fb1c <I2C_Slave_ISR_DMA+0x26c>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d04d      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	4a6e      	ldr	r2, [pc, #440]	@ (800fb20 <I2C_Slave_ISR_DMA+0x270>)
 800f966:	4293      	cmp	r3, r2
 800f968:	d047      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a6c      	ldr	r2, [pc, #432]	@ (800fb24 <I2C_Slave_ISR_DMA+0x274>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d041      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a6a      	ldr	r2, [pc, #424]	@ (800fb28 <I2C_Slave_ISR_DMA+0x278>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d03b      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a68      	ldr	r2, [pc, #416]	@ (800fb2c <I2C_Slave_ISR_DMA+0x27c>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d035      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4a66      	ldr	r2, [pc, #408]	@ (800fb30 <I2C_Slave_ISR_DMA+0x280>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d02f      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a64      	ldr	r2, [pc, #400]	@ (800fb34 <I2C_Slave_ISR_DMA+0x284>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d029      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a62      	ldr	r2, [pc, #392]	@ (800fb38 <I2C_Slave_ISR_DMA+0x288>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d023      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a60      	ldr	r2, [pc, #384]	@ (800fb3c <I2C_Slave_ISR_DMA+0x28c>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d01d      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a5e      	ldr	r2, [pc, #376]	@ (800fb40 <I2C_Slave_ISR_DMA+0x290>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d017      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4a5c      	ldr	r2, [pc, #368]	@ (800fb44 <I2C_Slave_ISR_DMA+0x294>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d011      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	4a5a      	ldr	r2, [pc, #360]	@ (800fb48 <I2C_Slave_ISR_DMA+0x298>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d00b      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a58      	ldr	r2, [pc, #352]	@ (800fb4c <I2C_Slave_ISR_DMA+0x29c>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d005      	beq.n	800f9fa <I2C_Slave_ISR_DMA+0x14a>
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a56      	ldr	r2, [pc, #344]	@ (800fb50 <I2C_Slave_ISR_DMA+0x2a0>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d109      	bne.n	800fa0e <I2C_Slave_ISR_DMA+0x15e>
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	bf0c      	ite	eq
 800fa06:	2301      	moveq	r3, #1
 800fa08:	2300      	movne	r3, #0
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	e008      	b.n	800fa20 <I2C_Slave_ISR_DMA+0x170>
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	bf0c      	ite	eq
 800fa1a:	2301      	moveq	r3, #1
 800fa1c:	2300      	movne	r3, #0
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d001      	beq.n	800fa28 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800fa24:	2301      	movs	r3, #1
 800fa26:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	f000 809e 	beq.w	800fb6e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	f000 8098 	beq.w	800fb6e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a33      	ldr	r2, [pc, #204]	@ (800fb14 <I2C_Slave_ISR_DMA+0x264>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d059      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a31      	ldr	r2, [pc, #196]	@ (800fb18 <I2C_Slave_ISR_DMA+0x268>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d053      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a2f      	ldr	r2, [pc, #188]	@ (800fb1c <I2C_Slave_ISR_DMA+0x26c>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d04d      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a2d      	ldr	r2, [pc, #180]	@ (800fb20 <I2C_Slave_ISR_DMA+0x270>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d047      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a2b      	ldr	r2, [pc, #172]	@ (800fb24 <I2C_Slave_ISR_DMA+0x274>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d041      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	4a29      	ldr	r2, [pc, #164]	@ (800fb28 <I2C_Slave_ISR_DMA+0x278>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d03b      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a27      	ldr	r2, [pc, #156]	@ (800fb2c <I2C_Slave_ISR_DMA+0x27c>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d035      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	4a25      	ldr	r2, [pc, #148]	@ (800fb30 <I2C_Slave_ISR_DMA+0x280>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d02f      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a23      	ldr	r2, [pc, #140]	@ (800fb34 <I2C_Slave_ISR_DMA+0x284>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d029      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	4a21      	ldr	r2, [pc, #132]	@ (800fb38 <I2C_Slave_ISR_DMA+0x288>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d023      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a1f      	ldr	r2, [pc, #124]	@ (800fb3c <I2C_Slave_ISR_DMA+0x28c>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d01d      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4a1d      	ldr	r2, [pc, #116]	@ (800fb40 <I2C_Slave_ISR_DMA+0x290>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d017      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a1b      	ldr	r2, [pc, #108]	@ (800fb44 <I2C_Slave_ISR_DMA+0x294>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d011      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a19      	ldr	r2, [pc, #100]	@ (800fb48 <I2C_Slave_ISR_DMA+0x298>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d00b      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4a17      	ldr	r2, [pc, #92]	@ (800fb4c <I2C_Slave_ISR_DMA+0x29c>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d005      	beq.n	800fafe <I2C_Slave_ISR_DMA+0x24e>
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a15      	ldr	r2, [pc, #84]	@ (800fb50 <I2C_Slave_ISR_DMA+0x2a0>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d12a      	bne.n	800fb54 <I2C_Slave_ISR_DMA+0x2a4>
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	bf0c      	ite	eq
 800fb0a:	2301      	moveq	r3, #1
 800fb0c:	2300      	movne	r3, #0
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	e029      	b.n	800fb66 <I2C_Slave_ISR_DMA+0x2b6>
 800fb12:	bf00      	nop
 800fb14:	40020010 	.word	0x40020010
 800fb18:	40020028 	.word	0x40020028
 800fb1c:	40020040 	.word	0x40020040
 800fb20:	40020058 	.word	0x40020058
 800fb24:	40020070 	.word	0x40020070
 800fb28:	40020088 	.word	0x40020088
 800fb2c:	400200a0 	.word	0x400200a0
 800fb30:	400200b8 	.word	0x400200b8
 800fb34:	40020410 	.word	0x40020410
 800fb38:	40020428 	.word	0x40020428
 800fb3c:	40020440 	.word	0x40020440
 800fb40:	40020458 	.word	0x40020458
 800fb44:	40020470 	.word	0x40020470
 800fb48:	40020488 	.word	0x40020488
 800fb4c:	400204a0 	.word	0x400204a0
 800fb50:	400204b8 	.word	0x400204b8
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	bf0c      	ite	eq
 800fb60:	2301      	moveq	r3, #1
 800fb62:	2300      	movne	r3, #0
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d001      	beq.n	800fb6e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	2b01      	cmp	r3, #1
 800fb72:	d128      	bne.n	800fbc6 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	2b28      	cmp	r3, #40	@ 0x28
 800fb7e:	d108      	bne.n	800fb92 <I2C_Slave_ISR_DMA+0x2e2>
 800fb80:	69bb      	ldr	r3, [r7, #24]
 800fb82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fb86:	d104      	bne.n	800fb92 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800fb88:	68b9      	ldr	r1, [r7, #8]
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f000 fd4c 	bl	8010628 <I2C_ITListenCplt>
 800fb90:	e048      	b.n	800fc24 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	2b29      	cmp	r3, #41	@ 0x29
 800fb9c:	d10e      	bne.n	800fbbc <I2C_Slave_ISR_DMA+0x30c>
 800fb9e:	69bb      	ldr	r3, [r7, #24]
 800fba0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fba4:	d00a      	beq.n	800fbbc <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2210      	movs	r2, #16
 800fbac:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800fbae:	68f8      	ldr	r0, [r7, #12]
 800fbb0:	f000 fea5 	bl	80108fe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	f000 f9be 	bl	800ff36 <I2C_ITSlaveSeqCplt>
 800fbba:	e033      	b.n	800fc24 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2210      	movs	r2, #16
 800fbc2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800fbc4:	e034      	b.n	800fc30 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2210      	movs	r2, #16
 800fbcc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbd2:	f043 0204 	orr.w	r2, r3, #4
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fbe0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d003      	beq.n	800fbf0 <I2C_Slave_ISR_DMA+0x340>
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fbee:	d11f      	bne.n	800fc30 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fbf0:	7dfb      	ldrb	r3, [r7, #23]
 800fbf2:	2b21      	cmp	r3, #33	@ 0x21
 800fbf4:	d002      	beq.n	800fbfc <I2C_Slave_ISR_DMA+0x34c>
 800fbf6:	7dfb      	ldrb	r3, [r7, #23]
 800fbf8:	2b29      	cmp	r3, #41	@ 0x29
 800fbfa:	d103      	bne.n	800fc04 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2221      	movs	r2, #33	@ 0x21
 800fc00:	631a      	str	r2, [r3, #48]	@ 0x30
 800fc02:	e008      	b.n	800fc16 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fc04:	7dfb      	ldrb	r3, [r7, #23]
 800fc06:	2b22      	cmp	r3, #34	@ 0x22
 800fc08:	d002      	beq.n	800fc10 <I2C_Slave_ISR_DMA+0x360>
 800fc0a:	7dfb      	ldrb	r3, [r7, #23]
 800fc0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc0e:	d102      	bne.n	800fc16 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2222      	movs	r2, #34	@ 0x22
 800fc14:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	68f8      	ldr	r0, [r7, #12]
 800fc1e:	f000 fd57 	bl	80106d0 <I2C_ITError>
      if (treatdmanack == 1U)
 800fc22:	e005      	b.n	800fc30 <I2C_Slave_ISR_DMA+0x380>
 800fc24:	e004      	b.n	800fc30 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2210      	movs	r2, #16
 800fc2c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fc2e:	e00f      	b.n	800fc50 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 800fc30:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fc32:	e00d      	b.n	800fc50 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	f003 0308 	and.w	r3, r3, #8
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d008      	beq.n	800fc50 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d003      	beq.n	800fc50 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800fc48:	68b9      	ldr	r1, [r7, #8]
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f000 f8b2 	bl	800fdb4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	2200      	movs	r2, #0
 800fc54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fc58:	2300      	movs	r3, #0
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3720      	adds	r7, #32
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop

0800fc64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b086      	sub	sp, #24
 800fc68:	af02      	add	r7, sp, #8
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	4608      	mov	r0, r1
 800fc6e:	4611      	mov	r1, r2
 800fc70:	461a      	mov	r2, r3
 800fc72:	4603      	mov	r3, r0
 800fc74:	817b      	strh	r3, [r7, #10]
 800fc76:	460b      	mov	r3, r1
 800fc78:	813b      	strh	r3, [r7, #8]
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800fc7e:	88fb      	ldrh	r3, [r7, #6]
 800fc80:	b2da      	uxtb	r2, r3
 800fc82:	8979      	ldrh	r1, [r7, #10]
 800fc84:	4b20      	ldr	r3, [pc, #128]	@ (800fd08 <I2C_RequestMemoryWrite+0xa4>)
 800fc86:	9300      	str	r3, [sp, #0]
 800fc88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800fc8c:	68f8      	ldr	r0, [r7, #12]
 800fc8e:	f001 f83b 	bl	8010d08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fc92:	69fa      	ldr	r2, [r7, #28]
 800fc94:	69b9      	ldr	r1, [r7, #24]
 800fc96:	68f8      	ldr	r0, [r7, #12]
 800fc98:	f000 fecc 	bl	8010a34 <I2C_WaitOnTXISFlagUntilTimeout>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d001      	beq.n	800fca6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800fca2:	2301      	movs	r3, #1
 800fca4:	e02c      	b.n	800fd00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fca6:	88fb      	ldrh	r3, [r7, #6]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d105      	bne.n	800fcb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fcac:	893b      	ldrh	r3, [r7, #8]
 800fcae:	b2da      	uxtb	r2, r3
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	629a      	str	r2, [r3, #40]	@ 0x28
 800fcb6:	e015      	b.n	800fce4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fcb8:	893b      	ldrh	r3, [r7, #8]
 800fcba:	0a1b      	lsrs	r3, r3, #8
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	b2da      	uxtb	r2, r3
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fcc6:	69fa      	ldr	r2, [r7, #28]
 800fcc8:	69b9      	ldr	r1, [r7, #24]
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f000 feb2 	bl	8010a34 <I2C_WaitOnTXISFlagUntilTimeout>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d001      	beq.n	800fcda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	e012      	b.n	800fd00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fcda:	893b      	ldrh	r3, [r7, #8]
 800fcdc:	b2da      	uxtb	r2, r3
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	69bb      	ldr	r3, [r7, #24]
 800fcea:	2200      	movs	r2, #0
 800fcec:	2180      	movs	r1, #128	@ 0x80
 800fcee:	68f8      	ldr	r0, [r7, #12]
 800fcf0:	f000 fe47 	bl	8010982 <I2C_WaitOnFlagUntilTimeout>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d001      	beq.n	800fcfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	e000      	b.n	800fd00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800fcfe:	2300      	movs	r3, #0
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3710      	adds	r7, #16
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	80002000 	.word	0x80002000

0800fd0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b086      	sub	sp, #24
 800fd10:	af02      	add	r7, sp, #8
 800fd12:	60f8      	str	r0, [r7, #12]
 800fd14:	4608      	mov	r0, r1
 800fd16:	4611      	mov	r1, r2
 800fd18:	461a      	mov	r2, r3
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	817b      	strh	r3, [r7, #10]
 800fd1e:	460b      	mov	r3, r1
 800fd20:	813b      	strh	r3, [r7, #8]
 800fd22:	4613      	mov	r3, r2
 800fd24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800fd26:	88fb      	ldrh	r3, [r7, #6]
 800fd28:	b2da      	uxtb	r2, r3
 800fd2a:	8979      	ldrh	r1, [r7, #10]
 800fd2c:	4b20      	ldr	r3, [pc, #128]	@ (800fdb0 <I2C_RequestMemoryRead+0xa4>)
 800fd2e:	9300      	str	r3, [sp, #0]
 800fd30:	2300      	movs	r3, #0
 800fd32:	68f8      	ldr	r0, [r7, #12]
 800fd34:	f000 ffe8 	bl	8010d08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd38:	69fa      	ldr	r2, [r7, #28]
 800fd3a:	69b9      	ldr	r1, [r7, #24]
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f000 fe79 	bl	8010a34 <I2C_WaitOnTXISFlagUntilTimeout>
 800fd42:	4603      	mov	r3, r0
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d001      	beq.n	800fd4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800fd48:	2301      	movs	r3, #1
 800fd4a:	e02c      	b.n	800fda6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800fd4c:	88fb      	ldrh	r3, [r7, #6]
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d105      	bne.n	800fd5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd52:	893b      	ldrh	r3, [r7, #8]
 800fd54:	b2da      	uxtb	r2, r3
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	629a      	str	r2, [r3, #40]	@ 0x28
 800fd5c:	e015      	b.n	800fd8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800fd5e:	893b      	ldrh	r3, [r7, #8]
 800fd60:	0a1b      	lsrs	r3, r3, #8
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	b2da      	uxtb	r2, r3
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800fd6c:	69fa      	ldr	r2, [r7, #28]
 800fd6e:	69b9      	ldr	r1, [r7, #24]
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	f000 fe5f 	bl	8010a34 <I2C_WaitOnTXISFlagUntilTimeout>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	e012      	b.n	800fda6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800fd80:	893b      	ldrh	r3, [r7, #8]
 800fd82:	b2da      	uxtb	r2, r3
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	9300      	str	r3, [sp, #0]
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	2200      	movs	r2, #0
 800fd92:	2140      	movs	r1, #64	@ 0x40
 800fd94:	68f8      	ldr	r0, [r7, #12]
 800fd96:	f000 fdf4 	bl	8010982 <I2C_WaitOnFlagUntilTimeout>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d001      	beq.n	800fda4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800fda0:	2301      	movs	r3, #1
 800fda2:	e000      	b.n	800fda6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3710      	adds	r7, #16
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	80002000 	.word	0x80002000

0800fdb4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b084      	sub	sp, #16
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800fdca:	2b28      	cmp	r3, #40	@ 0x28
 800fdcc:	d16a      	bne.n	800fea4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	699b      	ldr	r3, [r3, #24]
 800fdd4:	0c1b      	lsrs	r3, r3, #16
 800fdd6:	b2db      	uxtb	r3, r3
 800fdd8:	f003 0301 	and.w	r3, r3, #1
 800fddc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	699b      	ldr	r3, [r3, #24]
 800fde4:	0c1b      	lsrs	r3, r3, #16
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fdec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	b29b      	uxth	r3, r3
 800fdf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fdfa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	b29b      	uxth	r3, r3
 800fe04:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800fe08:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	d138      	bne.n	800fe84 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800fe12:	897b      	ldrh	r3, [r7, #10]
 800fe14:	09db      	lsrs	r3, r3, #7
 800fe16:	b29a      	uxth	r2, r3
 800fe18:	89bb      	ldrh	r3, [r7, #12]
 800fe1a:	4053      	eors	r3, r2
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	f003 0306 	and.w	r3, r3, #6
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d11c      	bne.n	800fe60 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800fe26:	897b      	ldrh	r3, [r7, #10]
 800fe28:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe2e:	1c5a      	adds	r2, r3, #1
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe38:	2b02      	cmp	r3, #2
 800fe3a:	d13b      	bne.n	800feb4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	2208      	movs	r2, #8
 800fe48:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fe52:	89ba      	ldrh	r2, [r7, #12]
 800fe54:	7bfb      	ldrb	r3, [r7, #15]
 800fe56:	4619      	mov	r1, r3
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7ff f8c3 	bl	800efe4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fe5e:	e029      	b.n	800feb4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800fe60:	893b      	ldrh	r3, [r7, #8]
 800fe62:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fe64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f001 f803 	bl	8010e74 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2200      	movs	r2, #0
 800fe72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fe76:	89ba      	ldrh	r2, [r7, #12]
 800fe78:	7bfb      	ldrb	r3, [r7, #15]
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f7ff f8b1 	bl	800efe4 <HAL_I2C_AddrCallback>
}
 800fe82:	e017      	b.n	800feb4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800fe84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 fff3 	bl	8010e74 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2200      	movs	r2, #0
 800fe92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800fe96:	89ba      	ldrh	r2, [r7, #12]
 800fe98:	7bfb      	ldrb	r3, [r7, #15]
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f7ff f8a1 	bl	800efe4 <HAL_I2C_AddrCallback>
}
 800fea2:	e007      	b.n	800feb4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	2208      	movs	r2, #8
 800feaa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800feb4:	bf00      	nop
 800feb6:	3710      	adds	r7, #16
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	2b21      	cmp	r3, #33	@ 0x21
 800fed6:	d115      	bne.n	800ff04 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2220      	movs	r2, #32
 800fedc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2211      	movs	r2, #17
 800fee4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2200      	movs	r2, #0
 800feea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800feec:	2101      	movs	r1, #1
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 ffc0 	bl	8010e74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2200      	movs	r2, #0
 800fef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f7ff f849 	bl	800ef94 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ff02:	e014      	b.n	800ff2e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2220      	movs	r2, #32
 800ff08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2212      	movs	r2, #18
 800ff10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2200      	movs	r2, #0
 800ff16:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ff18:	2102      	movs	r1, #2
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 ffaa 	bl	8010e74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2200      	movs	r2, #0
 800ff24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f7ff f83d 	bl	800efa8 <HAL_I2C_MasterRxCpltCallback>
}
 800ff2e:	bf00      	nop
 800ff30:	3708      	adds	r7, #8
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b084      	sub	sp, #16
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d008      	beq.n	800ff6a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ff66:	601a      	str	r2, [r3, #0]
 800ff68:	e00c      	b.n	800ff84 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d007      	beq.n	800ff84 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ff82:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	2b29      	cmp	r3, #41	@ 0x29
 800ff8e:	d112      	bne.n	800ffb6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2228      	movs	r2, #40	@ 0x28
 800ff94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2221      	movs	r2, #33	@ 0x21
 800ff9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ff9e:	2101      	movs	r1, #1
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 ff67 	bl	8010e74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f7ff f804 	bl	800efbc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ffb4:	e017      	b.n	800ffe6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ffbc:	b2db      	uxtb	r3, r3
 800ffbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffc0:	d111      	bne.n	800ffe6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2228      	movs	r2, #40	@ 0x28
 800ffc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2222      	movs	r2, #34	@ 0x22
 800ffce:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ffd0:	2102      	movs	r1, #2
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 ff4e 	bl	8010e74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f7fe fff5 	bl	800efd0 <HAL_I2C_SlaveRxCpltCallback>
}
 800ffe6:	bf00      	nop
 800ffe8:	3710      	adds	r7, #16
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
	...

0800fff0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b086      	sub	sp, #24
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2220      	movs	r2, #32
 8010004:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801000c:	b2db      	uxtb	r3, r3
 801000e:	2b21      	cmp	r3, #33	@ 0x21
 8010010:	d107      	bne.n	8010022 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010012:	2101      	movs	r1, #1
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f000 ff2d 	bl	8010e74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2211      	movs	r2, #17
 801001e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010020:	e00c      	b.n	801003c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010028:	b2db      	uxtb	r3, r3
 801002a:	2b22      	cmp	r3, #34	@ 0x22
 801002c:	d106      	bne.n	801003c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801002e:	2102      	movs	r1, #2
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 ff1f 	bl	8010e74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2212      	movs	r2, #18
 801003a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	6859      	ldr	r1, [r3, #4]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	4b4c      	ldr	r3, [pc, #304]	@ (8010178 <I2C_ITMasterCplt+0x188>)
 8010048:	400b      	ands	r3, r1
 801004a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2200      	movs	r2, #0
 8010050:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4a49      	ldr	r2, [pc, #292]	@ (801017c <I2C_ITMasterCplt+0x18c>)
 8010056:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	f003 0310 	and.w	r3, r3, #16
 801005e:	2b00      	cmp	r3, #0
 8010060:	d009      	beq.n	8010076 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2210      	movs	r2, #16
 8010068:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801006e:	f043 0204 	orr.w	r2, r3, #4
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801007c:	b2db      	uxtb	r3, r3
 801007e:	2b60      	cmp	r3, #96	@ 0x60
 8010080:	d10a      	bne.n	8010098 <I2C_ITMasterCplt+0xa8>
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	f003 0304 	and.w	r3, r3, #4
 8010088:	2b00      	cmp	r3, #0
 801008a:	d005      	beq.n	8010098 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010092:	b2db      	uxtb	r3, r3
 8010094:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8010096:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f000 fc30 	bl	80108fe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100a2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	2b60      	cmp	r3, #96	@ 0x60
 80100ae:	d002      	beq.n	80100b6 <I2C_ITMasterCplt+0xc6>
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d006      	beq.n	80100c4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100ba:	4619      	mov	r1, r3
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 fb07 	bl	80106d0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80100c2:	e054      	b.n	801016e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	2b21      	cmp	r3, #33	@ 0x21
 80100ce:	d124      	bne.n	801011a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2220      	movs	r2, #32
 80100d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2200      	movs	r2, #0
 80100dc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80100e4:	b2db      	uxtb	r3, r3
 80100e6:	2b40      	cmp	r3, #64	@ 0x40
 80100e8:	d10b      	bne.n	8010102 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2200      	movs	r2, #0
 80100ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2200      	movs	r2, #0
 80100f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f7fe ff8a 	bl	800f014 <HAL_I2C_MemTxCpltCallback>
}
 8010100:	e035      	b.n	801016e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7fe ff3e 	bl	800ef94 <HAL_I2C_MasterTxCpltCallback>
}
 8010118:	e029      	b.n	801016e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010120:	b2db      	uxtb	r3, r3
 8010122:	2b22      	cmp	r3, #34	@ 0x22
 8010124:	d123      	bne.n	801016e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2220      	movs	r2, #32
 801012a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2200      	movs	r2, #0
 8010132:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801013a:	b2db      	uxtb	r3, r3
 801013c:	2b40      	cmp	r3, #64	@ 0x40
 801013e:	d10b      	bne.n	8010158 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2200      	movs	r2, #0
 8010144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2200      	movs	r2, #0
 801014c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7f6 fa4d 	bl	80065f0 <HAL_I2C_MemRxCpltCallback>
}
 8010156:	e00a      	b.n	801016e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2200      	movs	r2, #0
 801015c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2200      	movs	r2, #0
 8010164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f7fe ff1d 	bl	800efa8 <HAL_I2C_MasterRxCpltCallback>
}
 801016e:	bf00      	nop
 8010170:	3718      	adds	r7, #24
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
 8010176:	bf00      	nop
 8010178:	fe00e800 	.word	0xfe00e800
 801017c:	ffff0000 	.word	0xffff0000

08010180 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b086      	sub	sp, #24
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801019a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80101a2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2220      	movs	r2, #32
 80101aa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80101ac:	7afb      	ldrb	r3, [r7, #11]
 80101ae:	2b21      	cmp	r3, #33	@ 0x21
 80101b0:	d002      	beq.n	80101b8 <I2C_ITSlaveCplt+0x38>
 80101b2:	7afb      	ldrb	r3, [r7, #11]
 80101b4:	2b29      	cmp	r3, #41	@ 0x29
 80101b6:	d108      	bne.n	80101ca <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80101b8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f000 fe59 	bl	8010e74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2221      	movs	r2, #33	@ 0x21
 80101c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80101c8:	e019      	b.n	80101fe <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80101ca:	7afb      	ldrb	r3, [r7, #11]
 80101cc:	2b22      	cmp	r3, #34	@ 0x22
 80101ce:	d002      	beq.n	80101d6 <I2C_ITSlaveCplt+0x56>
 80101d0:	7afb      	ldrb	r3, [r7, #11]
 80101d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80101d4:	d108      	bne.n	80101e8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80101d6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 fe4a 	bl	8010e74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2222      	movs	r2, #34	@ 0x22
 80101e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80101e6:	e00a      	b.n	80101fe <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80101e8:	7afb      	ldrb	r3, [r7, #11]
 80101ea:	2b28      	cmp	r3, #40	@ 0x28
 80101ec:	d107      	bne.n	80101fe <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80101ee:	f248 0103 	movw	r1, #32771	@ 0x8003
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 fe3e 	bl	8010e74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	685a      	ldr	r2, [r3, #4]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801020c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	6859      	ldr	r1, [r3, #4]
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681a      	ldr	r2, [r3, #0]
 8010218:	4b7f      	ldr	r3, [pc, #508]	@ (8010418 <I2C_ITSlaveCplt+0x298>)
 801021a:	400b      	ands	r3, r1
 801021c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 fb6d 	bl	80108fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801022a:	2b00      	cmp	r3, #0
 801022c:	d07a      	beq.n	8010324 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801023c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010242:	2b00      	cmp	r3, #0
 8010244:	f000 8111 	beq.w	801046a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	4a73      	ldr	r2, [pc, #460]	@ (801041c <I2C_ITSlaveCplt+0x29c>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d059      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	4a71      	ldr	r2, [pc, #452]	@ (8010420 <I2C_ITSlaveCplt+0x2a0>)
 801025c:	4293      	cmp	r3, r2
 801025e:	d053      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	4a6f      	ldr	r2, [pc, #444]	@ (8010424 <I2C_ITSlaveCplt+0x2a4>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d04d      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	4a6d      	ldr	r2, [pc, #436]	@ (8010428 <I2C_ITSlaveCplt+0x2a8>)
 8010274:	4293      	cmp	r3, r2
 8010276:	d047      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	4a6b      	ldr	r2, [pc, #428]	@ (801042c <I2C_ITSlaveCplt+0x2ac>)
 8010280:	4293      	cmp	r3, r2
 8010282:	d041      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	4a69      	ldr	r2, [pc, #420]	@ (8010430 <I2C_ITSlaveCplt+0x2b0>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d03b      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4a67      	ldr	r2, [pc, #412]	@ (8010434 <I2C_ITSlaveCplt+0x2b4>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d035      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4a65      	ldr	r2, [pc, #404]	@ (8010438 <I2C_ITSlaveCplt+0x2b8>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d02f      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a63      	ldr	r2, [pc, #396]	@ (801043c <I2C_ITSlaveCplt+0x2bc>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d029      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a61      	ldr	r2, [pc, #388]	@ (8010440 <I2C_ITSlaveCplt+0x2c0>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d023      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	4a5f      	ldr	r2, [pc, #380]	@ (8010444 <I2C_ITSlaveCplt+0x2c4>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d01d      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a5d      	ldr	r2, [pc, #372]	@ (8010448 <I2C_ITSlaveCplt+0x2c8>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d017      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	4a5b      	ldr	r2, [pc, #364]	@ (801044c <I2C_ITSlaveCplt+0x2cc>)
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d011      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4a59      	ldr	r2, [pc, #356]	@ (8010450 <I2C_ITSlaveCplt+0x2d0>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d00b      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4a57      	ldr	r2, [pc, #348]	@ (8010454 <I2C_ITSlaveCplt+0x2d4>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d005      	beq.n	8010308 <I2C_ITSlaveCplt+0x188>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	4a55      	ldr	r2, [pc, #340]	@ (8010458 <I2C_ITSlaveCplt+0x2d8>)
 8010304:	4293      	cmp	r3, r2
 8010306:	d105      	bne.n	8010314 <I2C_ITSlaveCplt+0x194>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	b29b      	uxth	r3, r3
 8010312:	e004      	b.n	801031e <I2C_ITSlaveCplt+0x19e>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	b29b      	uxth	r3, r3
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8010322:	e0a2      	b.n	801046a <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801032a:	2b00      	cmp	r3, #0
 801032c:	f000 809d 	beq.w	801046a <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801033e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010344:	2b00      	cmp	r3, #0
 8010346:	f000 8090 	beq.w	801046a <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	4a32      	ldr	r2, [pc, #200]	@ (801041c <I2C_ITSlaveCplt+0x29c>)
 8010352:	4293      	cmp	r3, r2
 8010354:	d059      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4a30      	ldr	r2, [pc, #192]	@ (8010420 <I2C_ITSlaveCplt+0x2a0>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d053      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	4a2e      	ldr	r2, [pc, #184]	@ (8010424 <I2C_ITSlaveCplt+0x2a4>)
 801036a:	4293      	cmp	r3, r2
 801036c:	d04d      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4a2c      	ldr	r2, [pc, #176]	@ (8010428 <I2C_ITSlaveCplt+0x2a8>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d047      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4a2a      	ldr	r2, [pc, #168]	@ (801042c <I2C_ITSlaveCplt+0x2ac>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d041      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4a28      	ldr	r2, [pc, #160]	@ (8010430 <I2C_ITSlaveCplt+0x2b0>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d03b      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a26      	ldr	r2, [pc, #152]	@ (8010434 <I2C_ITSlaveCplt+0x2b4>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d035      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4a24      	ldr	r2, [pc, #144]	@ (8010438 <I2C_ITSlaveCplt+0x2b8>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d02f      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a22      	ldr	r2, [pc, #136]	@ (801043c <I2C_ITSlaveCplt+0x2bc>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d029      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	4a20      	ldr	r2, [pc, #128]	@ (8010440 <I2C_ITSlaveCplt+0x2c0>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d023      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4a1e      	ldr	r2, [pc, #120]	@ (8010444 <I2C_ITSlaveCplt+0x2c4>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d01d      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a1c      	ldr	r2, [pc, #112]	@ (8010448 <I2C_ITSlaveCplt+0x2c8>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d017      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4a1a      	ldr	r2, [pc, #104]	@ (801044c <I2C_ITSlaveCplt+0x2cc>)
 80103e2:	4293      	cmp	r3, r2
 80103e4:	d011      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4a18      	ldr	r2, [pc, #96]	@ (8010450 <I2C_ITSlaveCplt+0x2d0>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d00b      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a16      	ldr	r2, [pc, #88]	@ (8010454 <I2C_ITSlaveCplt+0x2d4>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d005      	beq.n	801040a <I2C_ITSlaveCplt+0x28a>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	4a14      	ldr	r2, [pc, #80]	@ (8010458 <I2C_ITSlaveCplt+0x2d8>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d128      	bne.n	801045c <I2C_ITSlaveCplt+0x2dc>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	685b      	ldr	r3, [r3, #4]
 8010412:	b29b      	uxth	r3, r3
 8010414:	e027      	b.n	8010466 <I2C_ITSlaveCplt+0x2e6>
 8010416:	bf00      	nop
 8010418:	fe00e800 	.word	0xfe00e800
 801041c:	40020010 	.word	0x40020010
 8010420:	40020028 	.word	0x40020028
 8010424:	40020040 	.word	0x40020040
 8010428:	40020058 	.word	0x40020058
 801042c:	40020070 	.word	0x40020070
 8010430:	40020088 	.word	0x40020088
 8010434:	400200a0 	.word	0x400200a0
 8010438:	400200b8 	.word	0x400200b8
 801043c:	40020410 	.word	0x40020410
 8010440:	40020428 	.word	0x40020428
 8010444:	40020440 	.word	0x40020440
 8010448:	40020458 	.word	0x40020458
 801044c:	40020470 	.word	0x40020470
 8010450:	40020488 	.word	0x40020488
 8010454:	400204a0 	.word	0x400204a0
 8010458:	400204b8 	.word	0x400204b8
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	b29b      	uxth	r3, r3
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	f003 0304 	and.w	r3, r3, #4
 8010470:	2b00      	cmp	r3, #0
 8010472:	d020      	beq.n	80104b6 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	f023 0304 	bic.w	r3, r3, #4
 801047a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010486:	b2d2      	uxtb	r2, r2
 8010488:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801048e:	1c5a      	adds	r2, r3, #1
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010498:	2b00      	cmp	r3, #0
 801049a:	d00c      	beq.n	80104b6 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104a0:	3b01      	subs	r3, #1
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	3b01      	subs	r3, #1
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d005      	beq.n	80104cc <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104c4:	f043 0204 	orr.w	r2, r3, #4
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	f003 0310 	and.w	r3, r3, #16
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d049      	beq.n	801056a <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d044      	beq.n	801056a <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104e4:	b29b      	uxth	r3, r3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d128      	bne.n	801053c <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	2b28      	cmp	r3, #40	@ 0x28
 80104f4:	d108      	bne.n	8010508 <I2C_ITSlaveCplt+0x388>
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80104fc:	d104      	bne.n	8010508 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80104fe:	6979      	ldr	r1, [r7, #20]
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f000 f891 	bl	8010628 <I2C_ITListenCplt>
 8010506:	e030      	b.n	801056a <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801050e:	b2db      	uxtb	r3, r3
 8010510:	2b29      	cmp	r3, #41	@ 0x29
 8010512:	d10e      	bne.n	8010532 <I2C_ITSlaveCplt+0x3b2>
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 801051a:	d00a      	beq.n	8010532 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2210      	movs	r2, #16
 8010522:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f000 f9ea 	bl	80108fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7ff fd03 	bl	800ff36 <I2C_ITSlaveSeqCplt>
 8010530:	e01b      	b.n	801056a <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	2210      	movs	r2, #16
 8010538:	61da      	str	r2, [r3, #28]
 801053a:	e016      	b.n	801056a <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2210      	movs	r2, #16
 8010542:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010548:	f043 0204 	orr.w	r2, r3, #4
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d003      	beq.n	801055e <I2C_ITSlaveCplt+0x3de>
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801055c:	d105      	bne.n	801056a <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010562:	4619      	mov	r1, r3
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 f8b3 	bl	80106d0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2200      	movs	r2, #0
 801056e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801057c:	2b00      	cmp	r3, #0
 801057e:	d010      	beq.n	80105a2 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010584:	4619      	mov	r1, r3
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 f8a2 	bl	80106d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010592:	b2db      	uxtb	r3, r3
 8010594:	2b28      	cmp	r3, #40	@ 0x28
 8010596:	d141      	bne.n	801061c <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010598:	6979      	ldr	r1, [r7, #20]
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f000 f844 	bl	8010628 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80105a0:	e03c      	b.n	801061c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80105aa:	d014      	beq.n	80105d6 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f7ff fcc2 	bl	800ff36 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	4a1b      	ldr	r2, [pc, #108]	@ (8010624 <I2C_ITSlaveCplt+0x4a4>)
 80105b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2220      	movs	r2, #32
 80105bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2200      	movs	r2, #0
 80105c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2200      	movs	r2, #0
 80105ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80105ce:	6878      	ldr	r0, [r7, #4]
 80105d0:	f7fe fd16 	bl	800f000 <HAL_I2C_ListenCpltCallback>
}
 80105d4:	e022      	b.n	801061c <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	2b22      	cmp	r3, #34	@ 0x22
 80105e0:	d10e      	bne.n	8010600 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2220      	movs	r2, #32
 80105e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2200      	movs	r2, #0
 80105ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2200      	movs	r2, #0
 80105f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7fe fce9 	bl	800efd0 <HAL_I2C_SlaveRxCpltCallback>
}
 80105fe:	e00d      	b.n	801061c <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2220      	movs	r2, #32
 8010604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2200      	movs	r2, #0
 801060c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2200      	movs	r2, #0
 8010612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f7fe fcd0 	bl	800efbc <HAL_I2C_SlaveTxCpltCallback>
}
 801061c:	bf00      	nop
 801061e:	3718      	adds	r7, #24
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	ffff0000 	.word	0xffff0000

08010628 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	4a25      	ldr	r2, [pc, #148]	@ (80106cc <I2C_ITListenCplt+0xa4>)
 8010636:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2220      	movs	r2, #32
 8010642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2200      	movs	r2, #0
 801064a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	f003 0304 	and.w	r3, r3, #4
 801065a:	2b00      	cmp	r3, #0
 801065c:	d022      	beq.n	80106a4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010668:	b2d2      	uxtb	r2, r2
 801066a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010670:	1c5a      	adds	r2, r3, #1
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801067a:	2b00      	cmp	r3, #0
 801067c:	d012      	beq.n	80106a4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010682:	3b01      	subs	r3, #1
 8010684:	b29a      	uxth	r2, r3
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801068e:	b29b      	uxth	r3, r3
 8010690:	3b01      	subs	r3, #1
 8010692:	b29a      	uxth	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801069c:	f043 0204 	orr.w	r2, r3, #4
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80106a4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f000 fbe3 	bl	8010e74 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	2210      	movs	r2, #16
 80106b4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2200      	movs	r2, #0
 80106ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f7fe fc9e 	bl	800f000 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80106c4:	bf00      	nop
 80106c6:	3708      	adds	r7, #8
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	ffff0000 	.word	0xffff0000

080106d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80106e0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2200      	movs	r2, #0
 80106e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4a6d      	ldr	r2, [pc, #436]	@ (80108a4 <I2C_ITError+0x1d4>)
 80106ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2200      	movs	r2, #0
 80106f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	431a      	orrs	r2, r3
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8010702:	7bfb      	ldrb	r3, [r7, #15]
 8010704:	2b28      	cmp	r3, #40	@ 0x28
 8010706:	d005      	beq.n	8010714 <I2C_ITError+0x44>
 8010708:	7bfb      	ldrb	r3, [r7, #15]
 801070a:	2b29      	cmp	r3, #41	@ 0x29
 801070c:	d002      	beq.n	8010714 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801070e:	7bfb      	ldrb	r3, [r7, #15]
 8010710:	2b2a      	cmp	r3, #42	@ 0x2a
 8010712:	d10b      	bne.n	801072c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010714:	2103      	movs	r1, #3
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 fbac 	bl	8010e74 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2228      	movs	r2, #40	@ 0x28
 8010720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	4a60      	ldr	r2, [pc, #384]	@ (80108a8 <I2C_ITError+0x1d8>)
 8010728:	635a      	str	r2, [r3, #52]	@ 0x34
 801072a:	e030      	b.n	801078e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801072c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f000 fb9f 	bl	8010e74 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f000 f8e1 	bl	80108fe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010742:	b2db      	uxtb	r3, r3
 8010744:	2b60      	cmp	r3, #96	@ 0x60
 8010746:	d01f      	beq.n	8010788 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2220      	movs	r2, #32
 801074c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	699b      	ldr	r3, [r3, #24]
 8010756:	f003 0320 	and.w	r3, r3, #32
 801075a:	2b20      	cmp	r3, #32
 801075c:	d114      	bne.n	8010788 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	699b      	ldr	r3, [r3, #24]
 8010764:	f003 0310 	and.w	r3, r3, #16
 8010768:	2b10      	cmp	r3, #16
 801076a:	d109      	bne.n	8010780 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	2210      	movs	r2, #16
 8010772:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010778:	f043 0204 	orr.w	r2, r3, #4
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2220      	movs	r2, #32
 8010786:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2200      	movs	r2, #0
 801078c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010792:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010798:	2b00      	cmp	r3, #0
 801079a:	d039      	beq.n	8010810 <I2C_ITError+0x140>
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	2b11      	cmp	r3, #17
 80107a0:	d002      	beq.n	80107a8 <I2C_ITError+0xd8>
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	2b21      	cmp	r3, #33	@ 0x21
 80107a6:	d133      	bne.n	8010810 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80107b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80107b6:	d107      	bne.n	80107c8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80107c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7fd f9f7 	bl	800dbc0 <HAL_DMA_GetState>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d017      	beq.n	8010808 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107dc:	4a33      	ldr	r2, [pc, #204]	@ (80108ac <I2C_ITError+0x1dc>)
 80107de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2200      	movs	r2, #0
 80107e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7fc f877 	bl	800c8e0 <HAL_DMA_Abort_IT>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d04d      	beq.n	8010894 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80107fe:	687a      	ldr	r2, [r7, #4]
 8010800:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8010802:	4610      	mov	r0, r2
 8010804:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010806:	e045      	b.n	8010894 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 f851 	bl	80108b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801080e:	e041      	b.n	8010894 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010814:	2b00      	cmp	r3, #0
 8010816:	d039      	beq.n	801088c <I2C_ITError+0x1bc>
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	2b12      	cmp	r3, #18
 801081c:	d002      	beq.n	8010824 <I2C_ITError+0x154>
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	2b22      	cmp	r3, #34	@ 0x22
 8010822:	d133      	bne.n	801088c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801082e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010832:	d107      	bne.n	8010844 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010842:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010848:	4618      	mov	r0, r3
 801084a:	f7fd f9b9 	bl	800dbc0 <HAL_DMA_GetState>
 801084e:	4603      	mov	r3, r0
 8010850:	2b01      	cmp	r3, #1
 8010852:	d017      	beq.n	8010884 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010858:	4a14      	ldr	r2, [pc, #80]	@ (80108ac <I2C_ITError+0x1dc>)
 801085a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2200      	movs	r2, #0
 8010860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010868:	4618      	mov	r0, r3
 801086a:	f7fc f839 	bl	800c8e0 <HAL_DMA_Abort_IT>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d011      	beq.n	8010898 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801087e:	4610      	mov	r0, r2
 8010880:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010882:	e009      	b.n	8010898 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f000 f813 	bl	80108b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801088a:	e005      	b.n	8010898 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f000 f80f 	bl	80108b0 <I2C_TreatErrorCallback>
  }
}
 8010892:	e002      	b.n	801089a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010894:	bf00      	nop
 8010896:	e000      	b.n	801089a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010898:	bf00      	nop
}
 801089a:	bf00      	nop
 801089c:	3710      	adds	r7, #16
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop
 80108a4:	ffff0000 	.word	0xffff0000
 80108a8:	0800f29d 	.word	0x0800f29d
 80108ac:	08010947 	.word	0x08010947

080108b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	2b60      	cmp	r3, #96	@ 0x60
 80108c2:	d10e      	bne.n	80108e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2220      	movs	r2, #32
 80108c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2200      	movs	r2, #0
 80108d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f7fe fbae 	bl	800f03c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80108e0:	e009      	b.n	80108f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2200      	movs	r2, #0
 80108e6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2200      	movs	r2, #0
 80108ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80108f0:	6878      	ldr	r0, [r7, #4]
 80108f2:	f7fe fb99 	bl	800f028 <HAL_I2C_ErrorCallback>
}
 80108f6:	bf00      	nop
 80108f8:	3708      	adds	r7, #8
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}

080108fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80108fe:	b480      	push	{r7}
 8010900:	b083      	sub	sp, #12
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	699b      	ldr	r3, [r3, #24]
 801090c:	f003 0302 	and.w	r3, r3, #2
 8010910:	2b02      	cmp	r3, #2
 8010912:	d103      	bne.n	801091c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2200      	movs	r2, #0
 801091a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	699b      	ldr	r3, [r3, #24]
 8010922:	f003 0301 	and.w	r3, r3, #1
 8010926:	2b01      	cmp	r3, #1
 8010928:	d007      	beq.n	801093a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	699a      	ldr	r2, [r3, #24]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f042 0201 	orr.w	r2, r2, #1
 8010938:	619a      	str	r2, [r3, #24]
  }
}
 801093a:	bf00      	nop
 801093c:	370c      	adds	r7, #12
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr

08010946 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b084      	sub	sp, #16
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010952:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010958:	2b00      	cmp	r3, #0
 801095a:	d003      	beq.n	8010964 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010960:	2200      	movs	r2, #0
 8010962:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010968:	2b00      	cmp	r3, #0
 801096a:	d003      	beq.n	8010974 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010970:	2200      	movs	r2, #0
 8010972:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8010974:	68f8      	ldr	r0, [r7, #12]
 8010976:	f7ff ff9b 	bl	80108b0 <I2C_TreatErrorCallback>
}
 801097a:	bf00      	nop
 801097c:	3710      	adds	r7, #16
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010982:	b580      	push	{r7, lr}
 8010984:	b084      	sub	sp, #16
 8010986:	af00      	add	r7, sp, #0
 8010988:	60f8      	str	r0, [r7, #12]
 801098a:	60b9      	str	r1, [r7, #8]
 801098c:	603b      	str	r3, [r7, #0]
 801098e:	4613      	mov	r3, r2
 8010990:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010992:	e03b      	b.n	8010a0c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010994:	69ba      	ldr	r2, [r7, #24]
 8010996:	6839      	ldr	r1, [r7, #0]
 8010998:	68f8      	ldr	r0, [r7, #12]
 801099a:	f000 f8d5 	bl	8010b48 <I2C_IsErrorOccurred>
 801099e:	4603      	mov	r3, r0
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d001      	beq.n	80109a8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80109a4:	2301      	movs	r3, #1
 80109a6:	e041      	b.n	8010a2c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ae:	d02d      	beq.n	8010a0c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80109b0:	f7f8 fd80 	bl	80094b4 <HAL_GetTick>
 80109b4:	4602      	mov	r2, r0
 80109b6:	69bb      	ldr	r3, [r7, #24]
 80109b8:	1ad3      	subs	r3, r2, r3
 80109ba:	683a      	ldr	r2, [r7, #0]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d302      	bcc.n	80109c6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d122      	bne.n	8010a0c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	699a      	ldr	r2, [r3, #24]
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	4013      	ands	r3, r2
 80109d0:	68ba      	ldr	r2, [r7, #8]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	bf0c      	ite	eq
 80109d6:	2301      	moveq	r3, #1
 80109d8:	2300      	movne	r3, #0
 80109da:	b2db      	uxtb	r3, r3
 80109dc:	461a      	mov	r2, r3
 80109de:	79fb      	ldrb	r3, [r7, #7]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d113      	bne.n	8010a0c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109e8:	f043 0220 	orr.w	r2, r3, #32
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	2220      	movs	r2, #32
 80109f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	2200      	movs	r2, #0
 80109fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2200      	movs	r2, #0
 8010a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e00f      	b.n	8010a2c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	699a      	ldr	r2, [r3, #24]
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	4013      	ands	r3, r2
 8010a16:	68ba      	ldr	r2, [r7, #8]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	bf0c      	ite	eq
 8010a1c:	2301      	moveq	r3, #1
 8010a1e:	2300      	movne	r3, #0
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	461a      	mov	r2, r3
 8010a24:	79fb      	ldrb	r3, [r7, #7]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d0b4      	beq.n	8010994 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3710      	adds	r7, #16
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010a40:	e033      	b.n	8010aaa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010a42:	687a      	ldr	r2, [r7, #4]
 8010a44:	68b9      	ldr	r1, [r7, #8]
 8010a46:	68f8      	ldr	r0, [r7, #12]
 8010a48:	f000 f87e 	bl	8010b48 <I2C_IsErrorOccurred>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d001      	beq.n	8010a56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010a52:	2301      	movs	r3, #1
 8010a54:	e031      	b.n	8010aba <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a5c:	d025      	beq.n	8010aaa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a5e:	f7f8 fd29 	bl	80094b4 <HAL_GetTick>
 8010a62:	4602      	mov	r2, r0
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	1ad3      	subs	r3, r2, r3
 8010a68:	68ba      	ldr	r2, [r7, #8]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d302      	bcc.n	8010a74 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d11a      	bne.n	8010aaa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	699b      	ldr	r3, [r3, #24]
 8010a7a:	f003 0302 	and.w	r3, r3, #2
 8010a7e:	2b02      	cmp	r3, #2
 8010a80:	d013      	beq.n	8010aaa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a86:	f043 0220 	orr.w	r2, r3, #32
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2220      	movs	r2, #32
 8010a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	e007      	b.n	8010aba <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	699b      	ldr	r3, [r3, #24]
 8010ab0:	f003 0302 	and.w	r3, r3, #2
 8010ab4:	2b02      	cmp	r3, #2
 8010ab6:	d1c4      	bne.n	8010a42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010ab8:	2300      	movs	r3, #0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3710      	adds	r7, #16
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b084      	sub	sp, #16
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	60f8      	str	r0, [r7, #12]
 8010aca:	60b9      	str	r1, [r7, #8]
 8010acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010ace:	e02f      	b.n	8010b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010ad0:	687a      	ldr	r2, [r7, #4]
 8010ad2:	68b9      	ldr	r1, [r7, #8]
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f000 f837 	bl	8010b48 <I2C_IsErrorOccurred>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d001      	beq.n	8010ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	e02d      	b.n	8010b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ae4:	f7f8 fce6 	bl	80094b4 <HAL_GetTick>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	1ad3      	subs	r3, r2, r3
 8010aee:	68ba      	ldr	r2, [r7, #8]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d302      	bcc.n	8010afa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d11a      	bne.n	8010b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	699b      	ldr	r3, [r3, #24]
 8010b00:	f003 0320 	and.w	r3, r3, #32
 8010b04:	2b20      	cmp	r3, #32
 8010b06:	d013      	beq.n	8010b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b0c:	f043 0220 	orr.w	r2, r3, #32
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2220      	movs	r2, #32
 8010b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2200      	movs	r2, #0
 8010b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	e007      	b.n	8010b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	699b      	ldr	r3, [r3, #24]
 8010b36:	f003 0320 	and.w	r3, r3, #32
 8010b3a:	2b20      	cmp	r3, #32
 8010b3c:	d1c8      	bne.n	8010ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010b3e:	2300      	movs	r3, #0
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3710      	adds	r7, #16
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b08a      	sub	sp, #40	@ 0x28
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	60b9      	str	r1, [r7, #8]
 8010b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010b54:	2300      	movs	r3, #0
 8010b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010b62:	2300      	movs	r3, #0
 8010b64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010b6a:	69bb      	ldr	r3, [r7, #24]
 8010b6c:	f003 0310 	and.w	r3, r3, #16
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d068      	beq.n	8010c46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	2210      	movs	r2, #16
 8010b7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010b7c:	e049      	b.n	8010c12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b84:	d045      	beq.n	8010c12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010b86:	f7f8 fc95 	bl	80094b4 <HAL_GetTick>
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	1ad3      	subs	r3, r2, r3
 8010b90:	68ba      	ldr	r2, [r7, #8]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d302      	bcc.n	8010b9c <I2C_IsErrorOccurred+0x54>
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d13a      	bne.n	8010c12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010ba6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010bae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	699b      	ldr	r3, [r3, #24]
 8010bb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010bba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010bbe:	d121      	bne.n	8010c04 <I2C_IsErrorOccurred+0xbc>
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010bc6:	d01d      	beq.n	8010c04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8010bc8:	7cfb      	ldrb	r3, [r7, #19]
 8010bca:	2b20      	cmp	r3, #32
 8010bcc:	d01a      	beq.n	8010c04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	685a      	ldr	r2, [r3, #4]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010bdc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010bde:	f7f8 fc69 	bl	80094b4 <HAL_GetTick>
 8010be2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010be4:	e00e      	b.n	8010c04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010be6:	f7f8 fc65 	bl	80094b4 <HAL_GetTick>
 8010bea:	4602      	mov	r2, r0
 8010bec:	69fb      	ldr	r3, [r7, #28]
 8010bee:	1ad3      	subs	r3, r2, r3
 8010bf0:	2b19      	cmp	r3, #25
 8010bf2:	d907      	bls.n	8010c04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010bf4:	6a3b      	ldr	r3, [r7, #32]
 8010bf6:	f043 0320 	orr.w	r3, r3, #32
 8010bfa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8010c02:	e006      	b.n	8010c12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	699b      	ldr	r3, [r3, #24]
 8010c0a:	f003 0320 	and.w	r3, r3, #32
 8010c0e:	2b20      	cmp	r3, #32
 8010c10:	d1e9      	bne.n	8010be6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	699b      	ldr	r3, [r3, #24]
 8010c18:	f003 0320 	and.w	r3, r3, #32
 8010c1c:	2b20      	cmp	r3, #32
 8010c1e:	d003      	beq.n	8010c28 <I2C_IsErrorOccurred+0xe0>
 8010c20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d0aa      	beq.n	8010b7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d103      	bne.n	8010c38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	2220      	movs	r2, #32
 8010c36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010c38:	6a3b      	ldr	r3, [r7, #32]
 8010c3a:	f043 0304 	orr.w	r3, r3, #4
 8010c3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010c40:	2301      	movs	r3, #1
 8010c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	699b      	ldr	r3, [r3, #24]
 8010c4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010c4e:	69bb      	ldr	r3, [r7, #24]
 8010c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d00b      	beq.n	8010c70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010c58:	6a3b      	ldr	r3, [r7, #32]
 8010c5a:	f043 0301 	orr.w	r3, r3, #1
 8010c5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010c68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010c70:	69bb      	ldr	r3, [r7, #24]
 8010c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d00b      	beq.n	8010c92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010c7a:	6a3b      	ldr	r3, [r7, #32]
 8010c7c:	f043 0308 	orr.w	r3, r3, #8
 8010c80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010c8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010c92:	69bb      	ldr	r3, [r7, #24]
 8010c94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d00b      	beq.n	8010cb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010c9c:	6a3b      	ldr	r3, [r7, #32]
 8010c9e:	f043 0302 	orr.w	r3, r3, #2
 8010ca2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010cac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010cae:	2301      	movs	r3, #1
 8010cb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8010cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d01c      	beq.n	8010cf6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010cbc:	68f8      	ldr	r0, [r7, #12]
 8010cbe:	f7ff fe1e 	bl	80108fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	6859      	ldr	r1, [r3, #4]
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8010d04 <I2C_IsErrorOccurred+0x1bc>)
 8010cce:	400b      	ands	r3, r1
 8010cd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010cd6:	6a3b      	ldr	r3, [r7, #32]
 8010cd8:	431a      	orrs	r2, r3
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	2220      	movs	r2, #32
 8010ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8010cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3728      	adds	r7, #40	@ 0x28
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	fe00e800 	.word	0xfe00e800

08010d08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8010d08:	b480      	push	{r7}
 8010d0a:	b087      	sub	sp, #28
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	607b      	str	r3, [r7, #4]
 8010d12:	460b      	mov	r3, r1
 8010d14:	817b      	strh	r3, [r7, #10]
 8010d16:	4613      	mov	r3, r2
 8010d18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010d1a:	897b      	ldrh	r3, [r7, #10]
 8010d1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010d20:	7a7b      	ldrb	r3, [r7, #9]
 8010d22:	041b      	lsls	r3, r3, #16
 8010d24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010d28:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8010d2e:	6a3b      	ldr	r3, [r7, #32]
 8010d30:	4313      	orrs	r3, r2
 8010d32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010d36:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	685a      	ldr	r2, [r3, #4]
 8010d3e:	6a3b      	ldr	r3, [r7, #32]
 8010d40:	0d5b      	lsrs	r3, r3, #21
 8010d42:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8010d46:	4b08      	ldr	r3, [pc, #32]	@ (8010d68 <I2C_TransferConfig+0x60>)
 8010d48:	430b      	orrs	r3, r1
 8010d4a:	43db      	mvns	r3, r3
 8010d4c:	ea02 0103 	and.w	r1, r2, r3
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	697a      	ldr	r2, [r7, #20]
 8010d56:	430a      	orrs	r2, r1
 8010d58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8010d5a:	bf00      	nop
 8010d5c:	371c      	adds	r7, #28
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	03ff63ff 	.word	0x03ff63ff

08010d6c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	460b      	mov	r3, r1
 8010d76:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d80:	4a39      	ldr	r2, [pc, #228]	@ (8010e68 <I2C_Enable_IRQ+0xfc>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d032      	beq.n	8010dec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8010d8a:	4a38      	ldr	r2, [pc, #224]	@ (8010e6c <I2C_Enable_IRQ+0x100>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d02d      	beq.n	8010dec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8010d94:	4a36      	ldr	r2, [pc, #216]	@ (8010e70 <I2C_Enable_IRQ+0x104>)
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d028      	beq.n	8010dec <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010d9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	da03      	bge.n	8010daa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010da8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010daa:	887b      	ldrh	r3, [r7, #2]
 8010dac:	f003 0301 	and.w	r3, r3, #1
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d003      	beq.n	8010dbc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010dba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010dbc:	887b      	ldrh	r3, [r7, #2]
 8010dbe:	f003 0302 	and.w	r3, r3, #2
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d003      	beq.n	8010dce <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010dcc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010dce:	887b      	ldrh	r3, [r7, #2]
 8010dd0:	2b10      	cmp	r3, #16
 8010dd2:	d103      	bne.n	8010ddc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010dda:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010ddc:	887b      	ldrh	r3, [r7, #2]
 8010dde:	2b20      	cmp	r3, #32
 8010de0:	d133      	bne.n	8010e4a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	f043 0320 	orr.w	r3, r3, #32
 8010de8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010dea:	e02e      	b.n	8010e4a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010dec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	da03      	bge.n	8010dfc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010dfa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010dfc:	887b      	ldrh	r3, [r7, #2]
 8010dfe:	f003 0301 	and.w	r3, r3, #1
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d003      	beq.n	8010e0e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010e0c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010e0e:	887b      	ldrh	r3, [r7, #2]
 8010e10:	f003 0302 	and.w	r3, r3, #2
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d003      	beq.n	8010e20 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010e1e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010e20:	887b      	ldrh	r3, [r7, #2]
 8010e22:	2b10      	cmp	r3, #16
 8010e24:	d103      	bne.n	8010e2e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010e2c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010e2e:	887b      	ldrh	r3, [r7, #2]
 8010e30:	2b20      	cmp	r3, #32
 8010e32:	d103      	bne.n	8010e3c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010e3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010e3c:	887b      	ldrh	r3, [r7, #2]
 8010e3e:	2b40      	cmp	r3, #64	@ 0x40
 8010e40:	d103      	bne.n	8010e4a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e48:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	6819      	ldr	r1, [r3, #0]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	68fa      	ldr	r2, [r7, #12]
 8010e56:	430a      	orrs	r2, r1
 8010e58:	601a      	str	r2, [r3, #0]
}
 8010e5a:	bf00      	nop
 8010e5c:	3714      	adds	r7, #20
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e64:	4770      	bx	lr
 8010e66:	bf00      	nop
 8010e68:	0800f48f 	.word	0x0800f48f
 8010e6c:	0800f8b1 	.word	0x0800f8b1
 8010e70:	0800f665 	.word	0x0800f665

08010e74 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b085      	sub	sp, #20
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8010e80:	2300      	movs	r3, #0
 8010e82:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8010e84:	887b      	ldrh	r3, [r7, #2]
 8010e86:	f003 0301 	and.w	r3, r3, #1
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d00f      	beq.n	8010eae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010e94:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010ea2:	2b28      	cmp	r3, #40	@ 0x28
 8010ea4:	d003      	beq.n	8010eae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010eac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8010eae:	887b      	ldrh	r3, [r7, #2]
 8010eb0:	f003 0302 	and.w	r3, r3, #2
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d00f      	beq.n	8010ed8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8010ebe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010ecc:	2b28      	cmp	r3, #40	@ 0x28
 8010ece:	d003      	beq.n	8010ed8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010ed6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8010ed8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	da03      	bge.n	8010ee8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010ee6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8010ee8:	887b      	ldrh	r3, [r7, #2]
 8010eea:	2b10      	cmp	r3, #16
 8010eec:	d103      	bne.n	8010ef6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010ef4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8010ef6:	887b      	ldrh	r3, [r7, #2]
 8010ef8:	2b20      	cmp	r3, #32
 8010efa:	d103      	bne.n	8010f04 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	f043 0320 	orr.w	r3, r3, #32
 8010f02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8010f04:	887b      	ldrh	r3, [r7, #2]
 8010f06:	2b40      	cmp	r3, #64	@ 0x40
 8010f08:	d103      	bne.n	8010f12 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f10:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	6819      	ldr	r1, [r3, #0]
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	43da      	mvns	r2, r3
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	400a      	ands	r2, r1
 8010f22:	601a      	str	r2, [r3, #0]
}
 8010f24:	bf00      	nop
 8010f26:	3714      	adds	r7, #20
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr

08010f30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	2b20      	cmp	r3, #32
 8010f44:	d138      	bne.n	8010fb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d101      	bne.n	8010f54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8010f50:	2302      	movs	r3, #2
 8010f52:	e032      	b.n	8010fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2201      	movs	r2, #1
 8010f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2224      	movs	r2, #36	@ 0x24
 8010f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	f022 0201 	bic.w	r2, r2, #1
 8010f72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	681a      	ldr	r2, [r3, #0]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8010f82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	6819      	ldr	r1, [r3, #0]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	683a      	ldr	r2, [r7, #0]
 8010f90:	430a      	orrs	r2, r1
 8010f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f042 0201 	orr.w	r2, r2, #1
 8010fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2220      	movs	r2, #32
 8010fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	e000      	b.n	8010fba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010fb8:	2302      	movs	r3, #2
  }
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	370c      	adds	r7, #12
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc4:	4770      	bx	lr

08010fc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8010fc6:	b480      	push	{r7}
 8010fc8:	b085      	sub	sp, #20
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
 8010fce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010fd6:	b2db      	uxtb	r3, r3
 8010fd8:	2b20      	cmp	r3, #32
 8010fda:	d139      	bne.n	8011050 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d101      	bne.n	8010fea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010fe6:	2302      	movs	r3, #2
 8010fe8:	e033      	b.n	8011052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	2201      	movs	r2, #1
 8010fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2224      	movs	r2, #36	@ 0x24
 8010ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f022 0201 	bic.w	r2, r2, #1
 8011008:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8011018:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	021b      	lsls	r3, r3, #8
 801101e:	68fa      	ldr	r2, [r7, #12]
 8011020:	4313      	orrs	r3, r2
 8011022:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	68fa      	ldr	r2, [r7, #12]
 801102a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	f042 0201 	orr.w	r2, r2, #1
 801103a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2220      	movs	r2, #32
 8011040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2200      	movs	r2, #0
 8011048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801104c:	2300      	movs	r3, #0
 801104e:	e000      	b.n	8011052 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011050:	2302      	movs	r3, #2
  }
}
 8011052:	4618      	mov	r0, r3
 8011054:	3714      	adds	r7, #20
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr
	...

08011060 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8011060:	b480      	push	{r7}
 8011062:	b085      	sub	sp, #20
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011068:	4b0d      	ldr	r3, [pc, #52]	@ (80110a0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801106a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801106e:	4a0c      	ldr	r2, [pc, #48]	@ (80110a0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8011070:	f043 0302 	orr.w	r3, r3, #2
 8011074:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011078:	4b09      	ldr	r3, [pc, #36]	@ (80110a0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 801107a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801107e:	f003 0302 	and.w	r3, r3, #2
 8011082:	60fb      	str	r3, [r7, #12]
 8011084:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8011086:	4b07      	ldr	r3, [pc, #28]	@ (80110a4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8011088:	685a      	ldr	r2, [r3, #4]
 801108a:	4906      	ldr	r1, [pc, #24]	@ (80110a4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	4313      	orrs	r3, r2
 8011090:	604b      	str	r3, [r1, #4]
}
 8011092:	bf00      	nop
 8011094:	3714      	adds	r7, #20
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	58024400 	.word	0x58024400
 80110a4:	58000400 	.word	0x58000400

080110a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80110b0:	4b19      	ldr	r3, [pc, #100]	@ (8011118 <HAL_PWREx_ConfigSupply+0x70>)
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	f003 0304 	and.w	r3, r3, #4
 80110b8:	2b04      	cmp	r3, #4
 80110ba:	d00a      	beq.n	80110d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80110bc:	4b16      	ldr	r3, [pc, #88]	@ (8011118 <HAL_PWREx_ConfigSupply+0x70>)
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	f003 0307 	and.w	r3, r3, #7
 80110c4:	687a      	ldr	r2, [r7, #4]
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d001      	beq.n	80110ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80110ca:	2301      	movs	r3, #1
 80110cc:	e01f      	b.n	801110e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80110ce:	2300      	movs	r3, #0
 80110d0:	e01d      	b.n	801110e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80110d2:	4b11      	ldr	r3, [pc, #68]	@ (8011118 <HAL_PWREx_ConfigSupply+0x70>)
 80110d4:	68db      	ldr	r3, [r3, #12]
 80110d6:	f023 0207 	bic.w	r2, r3, #7
 80110da:	490f      	ldr	r1, [pc, #60]	@ (8011118 <HAL_PWREx_ConfigSupply+0x70>)
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	4313      	orrs	r3, r2
 80110e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80110e2:	f7f8 f9e7 	bl	80094b4 <HAL_GetTick>
 80110e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80110e8:	e009      	b.n	80110fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80110ea:	f7f8 f9e3 	bl	80094b4 <HAL_GetTick>
 80110ee:	4602      	mov	r2, r0
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80110f8:	d901      	bls.n	80110fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80110fa:	2301      	movs	r3, #1
 80110fc:	e007      	b.n	801110e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80110fe:	4b06      	ldr	r3, [pc, #24]	@ (8011118 <HAL_PWREx_ConfigSupply+0x70>)
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801110a:	d1ee      	bne.n	80110ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801110c:	2300      	movs	r3, #0
}
 801110e:	4618      	mov	r0, r3
 8011110:	3710      	adds	r7, #16
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	58024800 	.word	0x58024800

0801111c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b08c      	sub	sp, #48	@ 0x30
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d101      	bne.n	801112e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801112a:	2301      	movs	r3, #1
 801112c:	e3c8      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f003 0301 	and.w	r3, r3, #1
 8011136:	2b00      	cmp	r3, #0
 8011138:	f000 8087 	beq.w	801124a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801113c:	4b88      	ldr	r3, [pc, #544]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 801113e:	691b      	ldr	r3, [r3, #16]
 8011140:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011146:	4b86      	ldr	r3, [pc, #536]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 8011148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801114a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801114c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801114e:	2b10      	cmp	r3, #16
 8011150:	d007      	beq.n	8011162 <HAL_RCC_OscConfig+0x46>
 8011152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011154:	2b18      	cmp	r3, #24
 8011156:	d110      	bne.n	801117a <HAL_RCC_OscConfig+0x5e>
 8011158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801115a:	f003 0303 	and.w	r3, r3, #3
 801115e:	2b02      	cmp	r3, #2
 8011160:	d10b      	bne.n	801117a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011162:	4b7f      	ldr	r3, [pc, #508]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801116a:	2b00      	cmp	r3, #0
 801116c:	d06c      	beq.n	8011248 <HAL_RCC_OscConfig+0x12c>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d168      	bne.n	8011248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8011176:	2301      	movs	r3, #1
 8011178:	e3a2      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	685b      	ldr	r3, [r3, #4]
 801117e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011182:	d106      	bne.n	8011192 <HAL_RCC_OscConfig+0x76>
 8011184:	4b76      	ldr	r3, [pc, #472]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	4a75      	ldr	r2, [pc, #468]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 801118a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801118e:	6013      	str	r3, [r2, #0]
 8011190:	e02e      	b.n	80111f0 <HAL_RCC_OscConfig+0xd4>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d10c      	bne.n	80111b4 <HAL_RCC_OscConfig+0x98>
 801119a:	4b71      	ldr	r3, [pc, #452]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	4a70      	ldr	r2, [pc, #448]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80111a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80111a4:	6013      	str	r3, [r2, #0]
 80111a6:	4b6e      	ldr	r3, [pc, #440]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	4a6d      	ldr	r2, [pc, #436]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80111ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80111b0:	6013      	str	r3, [r2, #0]
 80111b2:	e01d      	b.n	80111f0 <HAL_RCC_OscConfig+0xd4>
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	685b      	ldr	r3, [r3, #4]
 80111b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80111bc:	d10c      	bne.n	80111d8 <HAL_RCC_OscConfig+0xbc>
 80111be:	4b68      	ldr	r3, [pc, #416]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	4a67      	ldr	r2, [pc, #412]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80111c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80111c8:	6013      	str	r3, [r2, #0]
 80111ca:	4b65      	ldr	r3, [pc, #404]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	4a64      	ldr	r2, [pc, #400]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80111d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80111d4:	6013      	str	r3, [r2, #0]
 80111d6:	e00b      	b.n	80111f0 <HAL_RCC_OscConfig+0xd4>
 80111d8:	4b61      	ldr	r3, [pc, #388]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	4a60      	ldr	r2, [pc, #384]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80111de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80111e2:	6013      	str	r3, [r2, #0]
 80111e4:	4b5e      	ldr	r3, [pc, #376]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	4a5d      	ldr	r2, [pc, #372]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80111ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80111ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d013      	beq.n	8011220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80111f8:	f7f8 f95c 	bl	80094b4 <HAL_GetTick>
 80111fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80111fe:	e008      	b.n	8011212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011200:	f7f8 f958 	bl	80094b4 <HAL_GetTick>
 8011204:	4602      	mov	r2, r0
 8011206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	2b64      	cmp	r3, #100	@ 0x64
 801120c:	d901      	bls.n	8011212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801120e:	2303      	movs	r3, #3
 8011210:	e356      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011212:	4b53      	ldr	r3, [pc, #332]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801121a:	2b00      	cmp	r3, #0
 801121c:	d0f0      	beq.n	8011200 <HAL_RCC_OscConfig+0xe4>
 801121e:	e014      	b.n	801124a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011220:	f7f8 f948 	bl	80094b4 <HAL_GetTick>
 8011224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011226:	e008      	b.n	801123a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011228:	f7f8 f944 	bl	80094b4 <HAL_GetTick>
 801122c:	4602      	mov	r2, r0
 801122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011230:	1ad3      	subs	r3, r2, r3
 8011232:	2b64      	cmp	r3, #100	@ 0x64
 8011234:	d901      	bls.n	801123a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8011236:	2303      	movs	r3, #3
 8011238:	e342      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801123a:	4b49      	ldr	r3, [pc, #292]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011242:	2b00      	cmp	r3, #0
 8011244:	d1f0      	bne.n	8011228 <HAL_RCC_OscConfig+0x10c>
 8011246:	e000      	b.n	801124a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	f003 0302 	and.w	r3, r3, #2
 8011252:	2b00      	cmp	r3, #0
 8011254:	f000 808c 	beq.w	8011370 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011258:	4b41      	ldr	r3, [pc, #260]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 801125a:	691b      	ldr	r3, [r3, #16]
 801125c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011260:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011262:	4b3f      	ldr	r3, [pc, #252]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 8011264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011266:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011268:	6a3b      	ldr	r3, [r7, #32]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d007      	beq.n	801127e <HAL_RCC_OscConfig+0x162>
 801126e:	6a3b      	ldr	r3, [r7, #32]
 8011270:	2b18      	cmp	r3, #24
 8011272:	d137      	bne.n	80112e4 <HAL_RCC_OscConfig+0x1c8>
 8011274:	69fb      	ldr	r3, [r7, #28]
 8011276:	f003 0303 	and.w	r3, r3, #3
 801127a:	2b00      	cmp	r3, #0
 801127c:	d132      	bne.n	80112e4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801127e:	4b38      	ldr	r3, [pc, #224]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f003 0304 	and.w	r3, r3, #4
 8011286:	2b00      	cmp	r3, #0
 8011288:	d005      	beq.n	8011296 <HAL_RCC_OscConfig+0x17a>
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	68db      	ldr	r3, [r3, #12]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d101      	bne.n	8011296 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8011292:	2301      	movs	r3, #1
 8011294:	e314      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011296:	4b32      	ldr	r3, [pc, #200]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f023 0219 	bic.w	r2, r3, #25
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	492f      	ldr	r1, [pc, #188]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80112a4:	4313      	orrs	r3, r2
 80112a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112a8:	f7f8 f904 	bl	80094b4 <HAL_GetTick>
 80112ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80112ae:	e008      	b.n	80112c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80112b0:	f7f8 f900 	bl	80094b4 <HAL_GetTick>
 80112b4:	4602      	mov	r2, r0
 80112b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b8:	1ad3      	subs	r3, r2, r3
 80112ba:	2b02      	cmp	r3, #2
 80112bc:	d901      	bls.n	80112c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80112be:	2303      	movs	r3, #3
 80112c0:	e2fe      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80112c2:	4b27      	ldr	r3, [pc, #156]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f003 0304 	and.w	r3, r3, #4
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d0f0      	beq.n	80112b0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80112ce:	4b24      	ldr	r3, [pc, #144]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80112d0:	685b      	ldr	r3, [r3, #4]
 80112d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	691b      	ldr	r3, [r3, #16]
 80112da:	061b      	lsls	r3, r3, #24
 80112dc:	4920      	ldr	r1, [pc, #128]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80112de:	4313      	orrs	r3, r2
 80112e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80112e2:	e045      	b.n	8011370 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d026      	beq.n	801133a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80112ec:	4b1c      	ldr	r3, [pc, #112]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f023 0219 	bic.w	r2, r3, #25
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	4919      	ldr	r1, [pc, #100]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 80112fa:	4313      	orrs	r3, r2
 80112fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112fe:	f7f8 f8d9 	bl	80094b4 <HAL_GetTick>
 8011302:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011304:	e008      	b.n	8011318 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011306:	f7f8 f8d5 	bl	80094b4 <HAL_GetTick>
 801130a:	4602      	mov	r2, r0
 801130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	2b02      	cmp	r3, #2
 8011312:	d901      	bls.n	8011318 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8011314:	2303      	movs	r3, #3
 8011316:	e2d3      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011318:	4b11      	ldr	r3, [pc, #68]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	f003 0304 	and.w	r3, r3, #4
 8011320:	2b00      	cmp	r3, #0
 8011322:	d0f0      	beq.n	8011306 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011324:	4b0e      	ldr	r3, [pc, #56]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	691b      	ldr	r3, [r3, #16]
 8011330:	061b      	lsls	r3, r3, #24
 8011332:	490b      	ldr	r1, [pc, #44]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 8011334:	4313      	orrs	r3, r2
 8011336:	604b      	str	r3, [r1, #4]
 8011338:	e01a      	b.n	8011370 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801133a:	4b09      	ldr	r3, [pc, #36]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4a08      	ldr	r2, [pc, #32]	@ (8011360 <HAL_RCC_OscConfig+0x244>)
 8011340:	f023 0301 	bic.w	r3, r3, #1
 8011344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011346:	f7f8 f8b5 	bl	80094b4 <HAL_GetTick>
 801134a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801134c:	e00a      	b.n	8011364 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801134e:	f7f8 f8b1 	bl	80094b4 <HAL_GetTick>
 8011352:	4602      	mov	r2, r0
 8011354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	2b02      	cmp	r3, #2
 801135a:	d903      	bls.n	8011364 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801135c:	2303      	movs	r3, #3
 801135e:	e2af      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
 8011360:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011364:	4b96      	ldr	r3, [pc, #600]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f003 0304 	and.w	r3, r3, #4
 801136c:	2b00      	cmp	r3, #0
 801136e:	d1ee      	bne.n	801134e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	f003 0310 	and.w	r3, r3, #16
 8011378:	2b00      	cmp	r3, #0
 801137a:	d06a      	beq.n	8011452 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801137c:	4b90      	ldr	r3, [pc, #576]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 801137e:	691b      	ldr	r3, [r3, #16]
 8011380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011384:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011386:	4b8e      	ldr	r3, [pc, #568]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 8011388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801138a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801138c:	69bb      	ldr	r3, [r7, #24]
 801138e:	2b08      	cmp	r3, #8
 8011390:	d007      	beq.n	80113a2 <HAL_RCC_OscConfig+0x286>
 8011392:	69bb      	ldr	r3, [r7, #24]
 8011394:	2b18      	cmp	r3, #24
 8011396:	d11b      	bne.n	80113d0 <HAL_RCC_OscConfig+0x2b4>
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	f003 0303 	and.w	r3, r3, #3
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d116      	bne.n	80113d0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80113a2:	4b87      	ldr	r3, [pc, #540]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d005      	beq.n	80113ba <HAL_RCC_OscConfig+0x29e>
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	69db      	ldr	r3, [r3, #28]
 80113b2:	2b80      	cmp	r3, #128	@ 0x80
 80113b4:	d001      	beq.n	80113ba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80113b6:	2301      	movs	r3, #1
 80113b8:	e282      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80113ba:	4b81      	ldr	r3, [pc, #516]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80113bc:	68db      	ldr	r3, [r3, #12]
 80113be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6a1b      	ldr	r3, [r3, #32]
 80113c6:	061b      	lsls	r3, r3, #24
 80113c8:	497d      	ldr	r1, [pc, #500]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80113ca:	4313      	orrs	r3, r2
 80113cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80113ce:	e040      	b.n	8011452 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	69db      	ldr	r3, [r3, #28]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d023      	beq.n	8011420 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80113d8:	4b79      	ldr	r3, [pc, #484]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4a78      	ldr	r2, [pc, #480]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80113de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113e4:	f7f8 f866 	bl	80094b4 <HAL_GetTick>
 80113e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80113ea:	e008      	b.n	80113fe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80113ec:	f7f8 f862 	bl	80094b4 <HAL_GetTick>
 80113f0:	4602      	mov	r2, r0
 80113f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113f4:	1ad3      	subs	r3, r2, r3
 80113f6:	2b02      	cmp	r3, #2
 80113f8:	d901      	bls.n	80113fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80113fa:	2303      	movs	r3, #3
 80113fc:	e260      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80113fe:	4b70      	ldr	r3, [pc, #448]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011406:	2b00      	cmp	r3, #0
 8011408:	d0f0      	beq.n	80113ec <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801140a:	4b6d      	ldr	r3, [pc, #436]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	6a1b      	ldr	r3, [r3, #32]
 8011416:	061b      	lsls	r3, r3, #24
 8011418:	4969      	ldr	r1, [pc, #420]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 801141a:	4313      	orrs	r3, r2
 801141c:	60cb      	str	r3, [r1, #12]
 801141e:	e018      	b.n	8011452 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8011420:	4b67      	ldr	r3, [pc, #412]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	4a66      	ldr	r2, [pc, #408]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 8011426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801142a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801142c:	f7f8 f842 	bl	80094b4 <HAL_GetTick>
 8011430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011432:	e008      	b.n	8011446 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011434:	f7f8 f83e 	bl	80094b4 <HAL_GetTick>
 8011438:	4602      	mov	r2, r0
 801143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	2b02      	cmp	r3, #2
 8011440:	d901      	bls.n	8011446 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8011442:	2303      	movs	r3, #3
 8011444:	e23c      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011446:	4b5e      	ldr	r3, [pc, #376]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1f0      	bne.n	8011434 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f003 0308 	and.w	r3, r3, #8
 801145a:	2b00      	cmp	r3, #0
 801145c:	d036      	beq.n	80114cc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	695b      	ldr	r3, [r3, #20]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d019      	beq.n	801149a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011466:	4b56      	ldr	r3, [pc, #344]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 8011468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801146a:	4a55      	ldr	r2, [pc, #340]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 801146c:	f043 0301 	orr.w	r3, r3, #1
 8011470:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011472:	f7f8 f81f 	bl	80094b4 <HAL_GetTick>
 8011476:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011478:	e008      	b.n	801148c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801147a:	f7f8 f81b 	bl	80094b4 <HAL_GetTick>
 801147e:	4602      	mov	r2, r0
 8011480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011482:	1ad3      	subs	r3, r2, r3
 8011484:	2b02      	cmp	r3, #2
 8011486:	d901      	bls.n	801148c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8011488:	2303      	movs	r3, #3
 801148a:	e219      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801148c:	4b4c      	ldr	r3, [pc, #304]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 801148e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011490:	f003 0302 	and.w	r3, r3, #2
 8011494:	2b00      	cmp	r3, #0
 8011496:	d0f0      	beq.n	801147a <HAL_RCC_OscConfig+0x35e>
 8011498:	e018      	b.n	80114cc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801149a:	4b49      	ldr	r3, [pc, #292]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 801149c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801149e:	4a48      	ldr	r2, [pc, #288]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80114a0:	f023 0301 	bic.w	r3, r3, #1
 80114a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80114a6:	f7f8 f805 	bl	80094b4 <HAL_GetTick>
 80114aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80114ac:	e008      	b.n	80114c0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80114ae:	f7f8 f801 	bl	80094b4 <HAL_GetTick>
 80114b2:	4602      	mov	r2, r0
 80114b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b6:	1ad3      	subs	r3, r2, r3
 80114b8:	2b02      	cmp	r3, #2
 80114ba:	d901      	bls.n	80114c0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80114bc:	2303      	movs	r3, #3
 80114be:	e1ff      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80114c0:	4b3f      	ldr	r3, [pc, #252]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80114c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114c4:	f003 0302 	and.w	r3, r3, #2
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d1f0      	bne.n	80114ae <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f003 0320 	and.w	r3, r3, #32
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d036      	beq.n	8011546 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	699b      	ldr	r3, [r3, #24]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d019      	beq.n	8011514 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80114e0:	4b37      	ldr	r3, [pc, #220]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	4a36      	ldr	r2, [pc, #216]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80114e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80114ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80114ec:	f7f7 ffe2 	bl	80094b4 <HAL_GetTick>
 80114f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80114f2:	e008      	b.n	8011506 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80114f4:	f7f7 ffde 	bl	80094b4 <HAL_GetTick>
 80114f8:	4602      	mov	r2, r0
 80114fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fc:	1ad3      	subs	r3, r2, r3
 80114fe:	2b02      	cmp	r3, #2
 8011500:	d901      	bls.n	8011506 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8011502:	2303      	movs	r3, #3
 8011504:	e1dc      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011506:	4b2e      	ldr	r3, [pc, #184]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801150e:	2b00      	cmp	r3, #0
 8011510:	d0f0      	beq.n	80114f4 <HAL_RCC_OscConfig+0x3d8>
 8011512:	e018      	b.n	8011546 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011514:	4b2a      	ldr	r3, [pc, #168]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4a29      	ldr	r2, [pc, #164]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 801151a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801151e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011520:	f7f7 ffc8 	bl	80094b4 <HAL_GetTick>
 8011524:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011526:	e008      	b.n	801153a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011528:	f7f7 ffc4 	bl	80094b4 <HAL_GetTick>
 801152c:	4602      	mov	r2, r0
 801152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	2b02      	cmp	r3, #2
 8011534:	d901      	bls.n	801153a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8011536:	2303      	movs	r3, #3
 8011538:	e1c2      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801153a:	4b21      	ldr	r3, [pc, #132]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011542:	2b00      	cmp	r3, #0
 8011544:	d1f0      	bne.n	8011528 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	f003 0304 	and.w	r3, r3, #4
 801154e:	2b00      	cmp	r3, #0
 8011550:	f000 8086 	beq.w	8011660 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011554:	4b1b      	ldr	r3, [pc, #108]	@ (80115c4 <HAL_RCC_OscConfig+0x4a8>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	4a1a      	ldr	r2, [pc, #104]	@ (80115c4 <HAL_RCC_OscConfig+0x4a8>)
 801155a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801155e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011560:	f7f7 ffa8 	bl	80094b4 <HAL_GetTick>
 8011564:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011566:	e008      	b.n	801157a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011568:	f7f7 ffa4 	bl	80094b4 <HAL_GetTick>
 801156c:	4602      	mov	r2, r0
 801156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011570:	1ad3      	subs	r3, r2, r3
 8011572:	2b64      	cmp	r3, #100	@ 0x64
 8011574:	d901      	bls.n	801157a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8011576:	2303      	movs	r3, #3
 8011578:	e1a2      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801157a:	4b12      	ldr	r3, [pc, #72]	@ (80115c4 <HAL_RCC_OscConfig+0x4a8>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011582:	2b00      	cmp	r3, #0
 8011584:	d0f0      	beq.n	8011568 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	689b      	ldr	r3, [r3, #8]
 801158a:	2b01      	cmp	r3, #1
 801158c:	d106      	bne.n	801159c <HAL_RCC_OscConfig+0x480>
 801158e:	4b0c      	ldr	r3, [pc, #48]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 8011590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011592:	4a0b      	ldr	r2, [pc, #44]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 8011594:	f043 0301 	orr.w	r3, r3, #1
 8011598:	6713      	str	r3, [r2, #112]	@ 0x70
 801159a:	e032      	b.n	8011602 <HAL_RCC_OscConfig+0x4e6>
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	689b      	ldr	r3, [r3, #8]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d111      	bne.n	80115c8 <HAL_RCC_OscConfig+0x4ac>
 80115a4:	4b06      	ldr	r3, [pc, #24]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80115a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115a8:	4a05      	ldr	r2, [pc, #20]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80115aa:	f023 0301 	bic.w	r3, r3, #1
 80115ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80115b0:	4b03      	ldr	r3, [pc, #12]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80115b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115b4:	4a02      	ldr	r2, [pc, #8]	@ (80115c0 <HAL_RCC_OscConfig+0x4a4>)
 80115b6:	f023 0304 	bic.w	r3, r3, #4
 80115ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80115bc:	e021      	b.n	8011602 <HAL_RCC_OscConfig+0x4e6>
 80115be:	bf00      	nop
 80115c0:	58024400 	.word	0x58024400
 80115c4:	58024800 	.word	0x58024800
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	689b      	ldr	r3, [r3, #8]
 80115cc:	2b05      	cmp	r3, #5
 80115ce:	d10c      	bne.n	80115ea <HAL_RCC_OscConfig+0x4ce>
 80115d0:	4b83      	ldr	r3, [pc, #524]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80115d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115d4:	4a82      	ldr	r2, [pc, #520]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80115d6:	f043 0304 	orr.w	r3, r3, #4
 80115da:	6713      	str	r3, [r2, #112]	@ 0x70
 80115dc:	4b80      	ldr	r3, [pc, #512]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80115de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115e0:	4a7f      	ldr	r2, [pc, #508]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80115e2:	f043 0301 	orr.w	r3, r3, #1
 80115e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80115e8:	e00b      	b.n	8011602 <HAL_RCC_OscConfig+0x4e6>
 80115ea:	4b7d      	ldr	r3, [pc, #500]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80115ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115ee:	4a7c      	ldr	r2, [pc, #496]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80115f0:	f023 0301 	bic.w	r3, r3, #1
 80115f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80115f6:	4b7a      	ldr	r3, [pc, #488]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80115f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115fa:	4a79      	ldr	r2, [pc, #484]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80115fc:	f023 0304 	bic.w	r3, r3, #4
 8011600:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	689b      	ldr	r3, [r3, #8]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d015      	beq.n	8011636 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801160a:	f7f7 ff53 	bl	80094b4 <HAL_GetTick>
 801160e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011610:	e00a      	b.n	8011628 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011612:	f7f7 ff4f 	bl	80094b4 <HAL_GetTick>
 8011616:	4602      	mov	r2, r0
 8011618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801161a:	1ad3      	subs	r3, r2, r3
 801161c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011620:	4293      	cmp	r3, r2
 8011622:	d901      	bls.n	8011628 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8011624:	2303      	movs	r3, #3
 8011626:	e14b      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011628:	4b6d      	ldr	r3, [pc, #436]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 801162a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801162c:	f003 0302 	and.w	r3, r3, #2
 8011630:	2b00      	cmp	r3, #0
 8011632:	d0ee      	beq.n	8011612 <HAL_RCC_OscConfig+0x4f6>
 8011634:	e014      	b.n	8011660 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011636:	f7f7 ff3d 	bl	80094b4 <HAL_GetTick>
 801163a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801163c:	e00a      	b.n	8011654 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801163e:	f7f7 ff39 	bl	80094b4 <HAL_GetTick>
 8011642:	4602      	mov	r2, r0
 8011644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011646:	1ad3      	subs	r3, r2, r3
 8011648:	f241 3288 	movw	r2, #5000	@ 0x1388
 801164c:	4293      	cmp	r3, r2
 801164e:	d901      	bls.n	8011654 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8011650:	2303      	movs	r3, #3
 8011652:	e135      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011654:	4b62      	ldr	r3, [pc, #392]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011658:	f003 0302 	and.w	r3, r3, #2
 801165c:	2b00      	cmp	r3, #0
 801165e:	d1ee      	bne.n	801163e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011664:	2b00      	cmp	r3, #0
 8011666:	f000 812a 	beq.w	80118be <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801166a:	4b5d      	ldr	r3, [pc, #372]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 801166c:	691b      	ldr	r3, [r3, #16]
 801166e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011672:	2b18      	cmp	r3, #24
 8011674:	f000 80ba 	beq.w	80117ec <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801167c:	2b02      	cmp	r3, #2
 801167e:	f040 8095 	bne.w	80117ac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011682:	4b57      	ldr	r3, [pc, #348]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4a56      	ldr	r2, [pc, #344]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011688:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801168c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801168e:	f7f7 ff11 	bl	80094b4 <HAL_GetTick>
 8011692:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011694:	e008      	b.n	80116a8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011696:	f7f7 ff0d 	bl	80094b4 <HAL_GetTick>
 801169a:	4602      	mov	r2, r0
 801169c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801169e:	1ad3      	subs	r3, r2, r3
 80116a0:	2b02      	cmp	r3, #2
 80116a2:	d901      	bls.n	80116a8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80116a4:	2303      	movs	r3, #3
 80116a6:	e10b      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80116a8:	4b4d      	ldr	r3, [pc, #308]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d1f0      	bne.n	8011696 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80116b4:	4b4a      	ldr	r3, [pc, #296]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80116b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80116b8:	4b4a      	ldr	r3, [pc, #296]	@ (80117e4 <HAL_RCC_OscConfig+0x6c8>)
 80116ba:	4013      	ands	r3, r2
 80116bc:	687a      	ldr	r2, [r7, #4]
 80116be:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80116c0:	687a      	ldr	r2, [r7, #4]
 80116c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80116c4:	0112      	lsls	r2, r2, #4
 80116c6:	430a      	orrs	r2, r1
 80116c8:	4945      	ldr	r1, [pc, #276]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80116ca:	4313      	orrs	r3, r2
 80116cc:	628b      	str	r3, [r1, #40]	@ 0x28
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116d2:	3b01      	subs	r3, #1
 80116d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80116dc:	3b01      	subs	r3, #1
 80116de:	025b      	lsls	r3, r3, #9
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	431a      	orrs	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116e8:	3b01      	subs	r3, #1
 80116ea:	041b      	lsls	r3, r3, #16
 80116ec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80116f0:	431a      	orrs	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116f6:	3b01      	subs	r3, #1
 80116f8:	061b      	lsls	r3, r3, #24
 80116fa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80116fe:	4938      	ldr	r1, [pc, #224]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011700:	4313      	orrs	r3, r2
 8011702:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8011704:	4b36      	ldr	r3, [pc, #216]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011708:	4a35      	ldr	r2, [pc, #212]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 801170a:	f023 0301 	bic.w	r3, r3, #1
 801170e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011710:	4b33      	ldr	r3, [pc, #204]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011714:	4b34      	ldr	r3, [pc, #208]	@ (80117e8 <HAL_RCC_OscConfig+0x6cc>)
 8011716:	4013      	ands	r3, r2
 8011718:	687a      	ldr	r2, [r7, #4]
 801171a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801171c:	00d2      	lsls	r2, r2, #3
 801171e:	4930      	ldr	r1, [pc, #192]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011720:	4313      	orrs	r3, r2
 8011722:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8011724:	4b2e      	ldr	r3, [pc, #184]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011728:	f023 020c 	bic.w	r2, r3, #12
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011730:	492b      	ldr	r1, [pc, #172]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011732:	4313      	orrs	r3, r2
 8011734:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8011736:	4b2a      	ldr	r3, [pc, #168]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801173a:	f023 0202 	bic.w	r2, r3, #2
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011742:	4927      	ldr	r1, [pc, #156]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011744:	4313      	orrs	r3, r2
 8011746:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011748:	4b25      	ldr	r3, [pc, #148]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 801174a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801174c:	4a24      	ldr	r2, [pc, #144]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 801174e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011754:	4b22      	ldr	r3, [pc, #136]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011758:	4a21      	ldr	r2, [pc, #132]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 801175a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801175e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011760:	4b1f      	ldr	r3, [pc, #124]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011764:	4a1e      	ldr	r2, [pc, #120]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011766:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801176a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801176c:	4b1c      	ldr	r3, [pc, #112]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 801176e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011770:	4a1b      	ldr	r2, [pc, #108]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 8011772:	f043 0301 	orr.w	r3, r3, #1
 8011776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011778:	4b19      	ldr	r3, [pc, #100]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	4a18      	ldr	r2, [pc, #96]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 801177e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011784:	f7f7 fe96 	bl	80094b4 <HAL_GetTick>
 8011788:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801178a:	e008      	b.n	801179e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801178c:	f7f7 fe92 	bl	80094b4 <HAL_GetTick>
 8011790:	4602      	mov	r2, r0
 8011792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011794:	1ad3      	subs	r3, r2, r3
 8011796:	2b02      	cmp	r3, #2
 8011798:	d901      	bls.n	801179e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801179a:	2303      	movs	r3, #3
 801179c:	e090      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801179e:	4b10      	ldr	r3, [pc, #64]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d0f0      	beq.n	801178c <HAL_RCC_OscConfig+0x670>
 80117aa:	e088      	b.n	80118be <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80117ac:	4b0c      	ldr	r3, [pc, #48]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	4a0b      	ldr	r2, [pc, #44]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80117b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80117b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80117b8:	f7f7 fe7c 	bl	80094b4 <HAL_GetTick>
 80117bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80117be:	e008      	b.n	80117d2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80117c0:	f7f7 fe78 	bl	80094b4 <HAL_GetTick>
 80117c4:	4602      	mov	r2, r0
 80117c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c8:	1ad3      	subs	r3, r2, r3
 80117ca:	2b02      	cmp	r3, #2
 80117cc:	d901      	bls.n	80117d2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80117ce:	2303      	movs	r3, #3
 80117d0:	e076      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80117d2:	4b03      	ldr	r3, [pc, #12]	@ (80117e0 <HAL_RCC_OscConfig+0x6c4>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d1f0      	bne.n	80117c0 <HAL_RCC_OscConfig+0x6a4>
 80117de:	e06e      	b.n	80118be <HAL_RCC_OscConfig+0x7a2>
 80117e0:	58024400 	.word	0x58024400
 80117e4:	fffffc0c 	.word	0xfffffc0c
 80117e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80117ec:	4b36      	ldr	r3, [pc, #216]	@ (80118c8 <HAL_RCC_OscConfig+0x7ac>)
 80117ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80117f2:	4b35      	ldr	r3, [pc, #212]	@ (80118c8 <HAL_RCC_OscConfig+0x7ac>)
 80117f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d031      	beq.n	8011864 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	f003 0203 	and.w	r2, r3, #3
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801180a:	429a      	cmp	r2, r3
 801180c:	d12a      	bne.n	8011864 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	091b      	lsrs	r3, r3, #4
 8011812:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801181a:	429a      	cmp	r2, r3
 801181c:	d122      	bne.n	8011864 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011828:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801182a:	429a      	cmp	r2, r3
 801182c:	d11a      	bne.n	8011864 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	0a5b      	lsrs	r3, r3, #9
 8011832:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801183a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801183c:	429a      	cmp	r2, r3
 801183e:	d111      	bne.n	8011864 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	0c1b      	lsrs	r3, r3, #16
 8011844:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801184c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801184e:	429a      	cmp	r2, r3
 8011850:	d108      	bne.n	8011864 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	0e1b      	lsrs	r3, r3, #24
 8011856:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801185e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011860:	429a      	cmp	r2, r3
 8011862:	d001      	beq.n	8011868 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8011864:	2301      	movs	r3, #1
 8011866:	e02b      	b.n	80118c0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011868:	4b17      	ldr	r3, [pc, #92]	@ (80118c8 <HAL_RCC_OscConfig+0x7ac>)
 801186a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801186c:	08db      	lsrs	r3, r3, #3
 801186e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011872:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011878:	693a      	ldr	r2, [r7, #16]
 801187a:	429a      	cmp	r2, r3
 801187c:	d01f      	beq.n	80118be <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801187e:	4b12      	ldr	r3, [pc, #72]	@ (80118c8 <HAL_RCC_OscConfig+0x7ac>)
 8011880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011882:	4a11      	ldr	r2, [pc, #68]	@ (80118c8 <HAL_RCC_OscConfig+0x7ac>)
 8011884:	f023 0301 	bic.w	r3, r3, #1
 8011888:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801188a:	f7f7 fe13 	bl	80094b4 <HAL_GetTick>
 801188e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011890:	bf00      	nop
 8011892:	f7f7 fe0f 	bl	80094b4 <HAL_GetTick>
 8011896:	4602      	mov	r2, r0
 8011898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801189a:	4293      	cmp	r3, r2
 801189c:	d0f9      	beq.n	8011892 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801189e:	4b0a      	ldr	r3, [pc, #40]	@ (80118c8 <HAL_RCC_OscConfig+0x7ac>)
 80118a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80118a2:	4b0a      	ldr	r3, [pc, #40]	@ (80118cc <HAL_RCC_OscConfig+0x7b0>)
 80118a4:	4013      	ands	r3, r2
 80118a6:	687a      	ldr	r2, [r7, #4]
 80118a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80118aa:	00d2      	lsls	r2, r2, #3
 80118ac:	4906      	ldr	r1, [pc, #24]	@ (80118c8 <HAL_RCC_OscConfig+0x7ac>)
 80118ae:	4313      	orrs	r3, r2
 80118b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80118b2:	4b05      	ldr	r3, [pc, #20]	@ (80118c8 <HAL_RCC_OscConfig+0x7ac>)
 80118b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118b6:	4a04      	ldr	r2, [pc, #16]	@ (80118c8 <HAL_RCC_OscConfig+0x7ac>)
 80118b8:	f043 0301 	orr.w	r3, r3, #1
 80118bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80118be:	2300      	movs	r3, #0
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3730      	adds	r7, #48	@ 0x30
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	58024400 	.word	0x58024400
 80118cc:	ffff0007 	.word	0xffff0007

080118d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b086      	sub	sp, #24
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d101      	bne.n	80118e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80118e0:	2301      	movs	r3, #1
 80118e2:	e19c      	b.n	8011c1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80118e4:	4b8a      	ldr	r3, [pc, #552]	@ (8011b10 <HAL_RCC_ClockConfig+0x240>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f003 030f 	and.w	r3, r3, #15
 80118ec:	683a      	ldr	r2, [r7, #0]
 80118ee:	429a      	cmp	r2, r3
 80118f0:	d910      	bls.n	8011914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80118f2:	4b87      	ldr	r3, [pc, #540]	@ (8011b10 <HAL_RCC_ClockConfig+0x240>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	f023 020f 	bic.w	r2, r3, #15
 80118fa:	4985      	ldr	r1, [pc, #532]	@ (8011b10 <HAL_RCC_ClockConfig+0x240>)
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	4313      	orrs	r3, r2
 8011900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011902:	4b83      	ldr	r3, [pc, #524]	@ (8011b10 <HAL_RCC_ClockConfig+0x240>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	f003 030f 	and.w	r3, r3, #15
 801190a:	683a      	ldr	r2, [r7, #0]
 801190c:	429a      	cmp	r2, r3
 801190e:	d001      	beq.n	8011914 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011910:	2301      	movs	r3, #1
 8011912:	e184      	b.n	8011c1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f003 0304 	and.w	r3, r3, #4
 801191c:	2b00      	cmp	r3, #0
 801191e:	d010      	beq.n	8011942 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	691a      	ldr	r2, [r3, #16]
 8011924:	4b7b      	ldr	r3, [pc, #492]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011926:	699b      	ldr	r3, [r3, #24]
 8011928:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801192c:	429a      	cmp	r2, r3
 801192e:	d908      	bls.n	8011942 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011930:	4b78      	ldr	r3, [pc, #480]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011932:	699b      	ldr	r3, [r3, #24]
 8011934:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	691b      	ldr	r3, [r3, #16]
 801193c:	4975      	ldr	r1, [pc, #468]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 801193e:	4313      	orrs	r3, r2
 8011940:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	f003 0308 	and.w	r3, r3, #8
 801194a:	2b00      	cmp	r3, #0
 801194c:	d010      	beq.n	8011970 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	695a      	ldr	r2, [r3, #20]
 8011952:	4b70      	ldr	r3, [pc, #448]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011954:	69db      	ldr	r3, [r3, #28]
 8011956:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801195a:	429a      	cmp	r2, r3
 801195c:	d908      	bls.n	8011970 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801195e:	4b6d      	ldr	r3, [pc, #436]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011960:	69db      	ldr	r3, [r3, #28]
 8011962:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	695b      	ldr	r3, [r3, #20]
 801196a:	496a      	ldr	r1, [pc, #424]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 801196c:	4313      	orrs	r3, r2
 801196e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	f003 0310 	and.w	r3, r3, #16
 8011978:	2b00      	cmp	r3, #0
 801197a:	d010      	beq.n	801199e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	699a      	ldr	r2, [r3, #24]
 8011980:	4b64      	ldr	r3, [pc, #400]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011982:	69db      	ldr	r3, [r3, #28]
 8011984:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011988:	429a      	cmp	r2, r3
 801198a:	d908      	bls.n	801199e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801198c:	4b61      	ldr	r3, [pc, #388]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 801198e:	69db      	ldr	r3, [r3, #28]
 8011990:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	699b      	ldr	r3, [r3, #24]
 8011998:	495e      	ldr	r1, [pc, #376]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 801199a:	4313      	orrs	r3, r2
 801199c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f003 0320 	and.w	r3, r3, #32
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d010      	beq.n	80119cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	69da      	ldr	r2, [r3, #28]
 80119ae:	4b59      	ldr	r3, [pc, #356]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 80119b0:	6a1b      	ldr	r3, [r3, #32]
 80119b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d908      	bls.n	80119cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80119ba:	4b56      	ldr	r3, [pc, #344]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 80119bc:	6a1b      	ldr	r3, [r3, #32]
 80119be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	69db      	ldr	r3, [r3, #28]
 80119c6:	4953      	ldr	r1, [pc, #332]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 80119c8:	4313      	orrs	r3, r2
 80119ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f003 0302 	and.w	r3, r3, #2
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d010      	beq.n	80119fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	68da      	ldr	r2, [r3, #12]
 80119dc:	4b4d      	ldr	r3, [pc, #308]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 80119de:	699b      	ldr	r3, [r3, #24]
 80119e0:	f003 030f 	and.w	r3, r3, #15
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d908      	bls.n	80119fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80119e8:	4b4a      	ldr	r3, [pc, #296]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 80119ea:	699b      	ldr	r3, [r3, #24]
 80119ec:	f023 020f 	bic.w	r2, r3, #15
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	68db      	ldr	r3, [r3, #12]
 80119f4:	4947      	ldr	r1, [pc, #284]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 80119f6:	4313      	orrs	r3, r2
 80119f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	f003 0301 	and.w	r3, r3, #1
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d055      	beq.n	8011ab2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011a06:	4b43      	ldr	r3, [pc, #268]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011a08:	699b      	ldr	r3, [r3, #24]
 8011a0a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	689b      	ldr	r3, [r3, #8]
 8011a12:	4940      	ldr	r1, [pc, #256]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011a14:	4313      	orrs	r3, r2
 8011a16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	2b02      	cmp	r3, #2
 8011a1e:	d107      	bne.n	8011a30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011a20:	4b3c      	ldr	r3, [pc, #240]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d121      	bne.n	8011a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	e0f6      	b.n	8011c1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	2b03      	cmp	r3, #3
 8011a36:	d107      	bne.n	8011a48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011a38:	4b36      	ldr	r3, [pc, #216]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d115      	bne.n	8011a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011a44:	2301      	movs	r3, #1
 8011a46:	e0ea      	b.n	8011c1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	685b      	ldr	r3, [r3, #4]
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d107      	bne.n	8011a60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011a50:	4b30      	ldr	r3, [pc, #192]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d109      	bne.n	8011a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	e0de      	b.n	8011c1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011a60:	4b2c      	ldr	r3, [pc, #176]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	f003 0304 	and.w	r3, r3, #4
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d101      	bne.n	8011a70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	e0d6      	b.n	8011c1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011a70:	4b28      	ldr	r3, [pc, #160]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011a72:	691b      	ldr	r3, [r3, #16]
 8011a74:	f023 0207 	bic.w	r2, r3, #7
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	4925      	ldr	r1, [pc, #148]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011a7e:	4313      	orrs	r3, r2
 8011a80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011a82:	f7f7 fd17 	bl	80094b4 <HAL_GetTick>
 8011a86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011a88:	e00a      	b.n	8011aa0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011a8a:	f7f7 fd13 	bl	80094b4 <HAL_GetTick>
 8011a8e:	4602      	mov	r2, r0
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	1ad3      	subs	r3, r2, r3
 8011a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	d901      	bls.n	8011aa0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011a9c:	2303      	movs	r3, #3
 8011a9e:	e0be      	b.n	8011c1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011aa2:	691b      	ldr	r3, [r3, #16]
 8011aa4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	00db      	lsls	r3, r3, #3
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d1eb      	bne.n	8011a8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	f003 0302 	and.w	r3, r3, #2
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d010      	beq.n	8011ae0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	68da      	ldr	r2, [r3, #12]
 8011ac2:	4b14      	ldr	r3, [pc, #80]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011ac4:	699b      	ldr	r3, [r3, #24]
 8011ac6:	f003 030f 	and.w	r3, r3, #15
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d208      	bcs.n	8011ae0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011ace:	4b11      	ldr	r3, [pc, #68]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011ad0:	699b      	ldr	r3, [r3, #24]
 8011ad2:	f023 020f 	bic.w	r2, r3, #15
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	68db      	ldr	r3, [r3, #12]
 8011ada:	490e      	ldr	r1, [pc, #56]	@ (8011b14 <HAL_RCC_ClockConfig+0x244>)
 8011adc:	4313      	orrs	r3, r2
 8011ade:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8011b10 <HAL_RCC_ClockConfig+0x240>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f003 030f 	and.w	r3, r3, #15
 8011ae8:	683a      	ldr	r2, [r7, #0]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d214      	bcs.n	8011b18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011aee:	4b08      	ldr	r3, [pc, #32]	@ (8011b10 <HAL_RCC_ClockConfig+0x240>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	f023 020f 	bic.w	r2, r3, #15
 8011af6:	4906      	ldr	r1, [pc, #24]	@ (8011b10 <HAL_RCC_ClockConfig+0x240>)
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	4313      	orrs	r3, r2
 8011afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011afe:	4b04      	ldr	r3, [pc, #16]	@ (8011b10 <HAL_RCC_ClockConfig+0x240>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	f003 030f 	and.w	r3, r3, #15
 8011b06:	683a      	ldr	r2, [r7, #0]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d005      	beq.n	8011b18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011b0c:	2301      	movs	r3, #1
 8011b0e:	e086      	b.n	8011c1e <HAL_RCC_ClockConfig+0x34e>
 8011b10:	52002000 	.word	0x52002000
 8011b14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	f003 0304 	and.w	r3, r3, #4
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d010      	beq.n	8011b46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	691a      	ldr	r2, [r3, #16]
 8011b28:	4b3f      	ldr	r3, [pc, #252]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011b2a:	699b      	ldr	r3, [r3, #24]
 8011b2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d208      	bcs.n	8011b46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011b34:	4b3c      	ldr	r3, [pc, #240]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011b36:	699b      	ldr	r3, [r3, #24]
 8011b38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	691b      	ldr	r3, [r3, #16]
 8011b40:	4939      	ldr	r1, [pc, #228]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011b42:	4313      	orrs	r3, r2
 8011b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	f003 0308 	and.w	r3, r3, #8
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d010      	beq.n	8011b74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	695a      	ldr	r2, [r3, #20]
 8011b56:	4b34      	ldr	r3, [pc, #208]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011b58:	69db      	ldr	r3, [r3, #28]
 8011b5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d208      	bcs.n	8011b74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011b62:	4b31      	ldr	r3, [pc, #196]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011b64:	69db      	ldr	r3, [r3, #28]
 8011b66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	695b      	ldr	r3, [r3, #20]
 8011b6e:	492e      	ldr	r1, [pc, #184]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011b70:	4313      	orrs	r3, r2
 8011b72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	f003 0310 	and.w	r3, r3, #16
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d010      	beq.n	8011ba2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	699a      	ldr	r2, [r3, #24]
 8011b84:	4b28      	ldr	r3, [pc, #160]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011b86:	69db      	ldr	r3, [r3, #28]
 8011b88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d208      	bcs.n	8011ba2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011b90:	4b25      	ldr	r3, [pc, #148]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011b92:	69db      	ldr	r3, [r3, #28]
 8011b94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	699b      	ldr	r3, [r3, #24]
 8011b9c:	4922      	ldr	r1, [pc, #136]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011b9e:	4313      	orrs	r3, r2
 8011ba0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f003 0320 	and.w	r3, r3, #32
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d010      	beq.n	8011bd0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	69da      	ldr	r2, [r3, #28]
 8011bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011bb4:	6a1b      	ldr	r3, [r3, #32]
 8011bb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d208      	bcs.n	8011bd0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011bc0:	6a1b      	ldr	r3, [r3, #32]
 8011bc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	69db      	ldr	r3, [r3, #28]
 8011bca:	4917      	ldr	r1, [pc, #92]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011bcc:	4313      	orrs	r3, r2
 8011bce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011bd0:	f000 f834 	bl	8011c3c <HAL_RCC_GetSysClockFreq>
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	4b14      	ldr	r3, [pc, #80]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011bd8:	699b      	ldr	r3, [r3, #24]
 8011bda:	0a1b      	lsrs	r3, r3, #8
 8011bdc:	f003 030f 	and.w	r3, r3, #15
 8011be0:	4912      	ldr	r1, [pc, #72]	@ (8011c2c <HAL_RCC_ClockConfig+0x35c>)
 8011be2:	5ccb      	ldrb	r3, [r1, r3]
 8011be4:	f003 031f 	and.w	r3, r3, #31
 8011be8:	fa22 f303 	lsr.w	r3, r2, r3
 8011bec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011bee:	4b0e      	ldr	r3, [pc, #56]	@ (8011c28 <HAL_RCC_ClockConfig+0x358>)
 8011bf0:	699b      	ldr	r3, [r3, #24]
 8011bf2:	f003 030f 	and.w	r3, r3, #15
 8011bf6:	4a0d      	ldr	r2, [pc, #52]	@ (8011c2c <HAL_RCC_ClockConfig+0x35c>)
 8011bf8:	5cd3      	ldrb	r3, [r2, r3]
 8011bfa:	f003 031f 	and.w	r3, r3, #31
 8011bfe:	693a      	ldr	r2, [r7, #16]
 8011c00:	fa22 f303 	lsr.w	r3, r2, r3
 8011c04:	4a0a      	ldr	r2, [pc, #40]	@ (8011c30 <HAL_RCC_ClockConfig+0x360>)
 8011c06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011c08:	4a0a      	ldr	r2, [pc, #40]	@ (8011c34 <HAL_RCC_ClockConfig+0x364>)
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8011c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8011c38 <HAL_RCC_ClockConfig+0x368>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7f7 fc04 	bl	8009420 <HAL_InitTick>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3718      	adds	r7, #24
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	58024400 	.word	0x58024400
 8011c2c:	0801eb2c 	.word	0x0801eb2c
 8011c30:	24000008 	.word	0x24000008
 8011c34:	24000004 	.word	0x24000004
 8011c38:	2400000c 	.word	0x2400000c

08011c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b089      	sub	sp, #36	@ 0x24
 8011c40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011c42:	4bb3      	ldr	r3, [pc, #716]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011c44:	691b      	ldr	r3, [r3, #16]
 8011c46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011c4a:	2b18      	cmp	r3, #24
 8011c4c:	f200 8155 	bhi.w	8011efa <HAL_RCC_GetSysClockFreq+0x2be>
 8011c50:	a201      	add	r2, pc, #4	@ (adr r2, 8011c58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8011c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c56:	bf00      	nop
 8011c58:	08011cbd 	.word	0x08011cbd
 8011c5c:	08011efb 	.word	0x08011efb
 8011c60:	08011efb 	.word	0x08011efb
 8011c64:	08011efb 	.word	0x08011efb
 8011c68:	08011efb 	.word	0x08011efb
 8011c6c:	08011efb 	.word	0x08011efb
 8011c70:	08011efb 	.word	0x08011efb
 8011c74:	08011efb 	.word	0x08011efb
 8011c78:	08011ce3 	.word	0x08011ce3
 8011c7c:	08011efb 	.word	0x08011efb
 8011c80:	08011efb 	.word	0x08011efb
 8011c84:	08011efb 	.word	0x08011efb
 8011c88:	08011efb 	.word	0x08011efb
 8011c8c:	08011efb 	.word	0x08011efb
 8011c90:	08011efb 	.word	0x08011efb
 8011c94:	08011efb 	.word	0x08011efb
 8011c98:	08011ce9 	.word	0x08011ce9
 8011c9c:	08011efb 	.word	0x08011efb
 8011ca0:	08011efb 	.word	0x08011efb
 8011ca4:	08011efb 	.word	0x08011efb
 8011ca8:	08011efb 	.word	0x08011efb
 8011cac:	08011efb 	.word	0x08011efb
 8011cb0:	08011efb 	.word	0x08011efb
 8011cb4:	08011efb 	.word	0x08011efb
 8011cb8:	08011cef 	.word	0x08011cef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011cbc:	4b94      	ldr	r3, [pc, #592]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	f003 0320 	and.w	r3, r3, #32
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d009      	beq.n	8011cdc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011cc8:	4b91      	ldr	r3, [pc, #580]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	08db      	lsrs	r3, r3, #3
 8011cce:	f003 0303 	and.w	r3, r3, #3
 8011cd2:	4a90      	ldr	r2, [pc, #576]	@ (8011f14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8011cd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011cda:	e111      	b.n	8011f00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011cdc:	4b8d      	ldr	r3, [pc, #564]	@ (8011f14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011cde:	61bb      	str	r3, [r7, #24]
      break;
 8011ce0:	e10e      	b.n	8011f00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8011ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8011f18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011ce4:	61bb      	str	r3, [r7, #24]
      break;
 8011ce6:	e10b      	b.n	8011f00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011ce8:	4b8c      	ldr	r3, [pc, #560]	@ (8011f1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011cea:	61bb      	str	r3, [r7, #24]
      break;
 8011cec:	e108      	b.n	8011f00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011cee:	4b88      	ldr	r3, [pc, #544]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cf2:	f003 0303 	and.w	r3, r3, #3
 8011cf6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011cf8:	4b85      	ldr	r3, [pc, #532]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cfc:	091b      	lsrs	r3, r3, #4
 8011cfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011d02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011d04:	4b82      	ldr	r3, [pc, #520]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d08:	f003 0301 	and.w	r3, r3, #1
 8011d0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011d0e:	4b80      	ldr	r3, [pc, #512]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d12:	08db      	lsrs	r3, r3, #3
 8011d14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011d18:	68fa      	ldr	r2, [r7, #12]
 8011d1a:	fb02 f303 	mul.w	r3, r2, r3
 8011d1e:	ee07 3a90 	vmov	s15, r3
 8011d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	f000 80e1 	beq.w	8011ef4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	2b02      	cmp	r3, #2
 8011d36:	f000 8083 	beq.w	8011e40 <HAL_RCC_GetSysClockFreq+0x204>
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	2b02      	cmp	r3, #2
 8011d3e:	f200 80a1 	bhi.w	8011e84 <HAL_RCC_GetSysClockFreq+0x248>
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d003      	beq.n	8011d50 <HAL_RCC_GetSysClockFreq+0x114>
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d056      	beq.n	8011dfc <HAL_RCC_GetSysClockFreq+0x1c0>
 8011d4e:	e099      	b.n	8011e84 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d50:	4b6f      	ldr	r3, [pc, #444]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f003 0320 	and.w	r3, r3, #32
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d02d      	beq.n	8011db8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	08db      	lsrs	r3, r3, #3
 8011d62:	f003 0303 	and.w	r3, r3, #3
 8011d66:	4a6b      	ldr	r2, [pc, #428]	@ (8011f14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011d68:	fa22 f303 	lsr.w	r3, r2, r3
 8011d6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	ee07 3a90 	vmov	s15, r3
 8011d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	ee07 3a90 	vmov	s15, r3
 8011d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011d86:	4b62      	ldr	r3, [pc, #392]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d8e:	ee07 3a90 	vmov	s15, r3
 8011d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8011d9a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8011f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011db2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011db6:	e087      	b.n	8011ec8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	ee07 3a90 	vmov	s15, r3
 8011dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011dc2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8011f24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011dca:	4b51      	ldr	r3, [pc, #324]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011dd2:	ee07 3a90 	vmov	s15, r3
 8011dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8011dde:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8011f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011dfa:	e065      	b.n	8011ec8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	ee07 3a90 	vmov	s15, r3
 8011e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e06:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8011f28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e0e:	4b40      	ldr	r3, [pc, #256]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e16:	ee07 3a90 	vmov	s15, r3
 8011e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e22:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8011f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011e3e:	e043      	b.n	8011ec8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	ee07 3a90 	vmov	s15, r3
 8011e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e4a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8011f2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8011e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e52:	4b2f      	ldr	r3, [pc, #188]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e5a:	ee07 3a90 	vmov	s15, r3
 8011e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8011e66:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8011f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011e82:	e021      	b.n	8011ec8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	ee07 3a90 	vmov	s15, r3
 8011e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e8e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011f28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e96:	4b1e      	ldr	r3, [pc, #120]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e9e:	ee07 3a90 	vmov	s15, r3
 8011ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8011eaa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8011f20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011ec6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011ec8:	4b11      	ldr	r3, [pc, #68]	@ (8011f10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ecc:	0a5b      	lsrs	r3, r3, #9
 8011ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	ee07 3a90 	vmov	s15, r3
 8011edc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8011ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011eec:	ee17 3a90 	vmov	r3, s15
 8011ef0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011ef2:	e005      	b.n	8011f00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	61bb      	str	r3, [r7, #24]
      break;
 8011ef8:	e002      	b.n	8011f00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011efa:	4b07      	ldr	r3, [pc, #28]	@ (8011f18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011efc:	61bb      	str	r3, [r7, #24]
      break;
 8011efe:	bf00      	nop
  }

  return sysclockfreq;
 8011f00:	69bb      	ldr	r3, [r7, #24]
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3724      	adds	r7, #36	@ 0x24
 8011f06:	46bd      	mov	sp, r7
 8011f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	58024400 	.word	0x58024400
 8011f14:	03d09000 	.word	0x03d09000
 8011f18:	003d0900 	.word	0x003d0900
 8011f1c:	016e3600 	.word	0x016e3600
 8011f20:	46000000 	.word	0x46000000
 8011f24:	4c742400 	.word	0x4c742400
 8011f28:	4a742400 	.word	0x4a742400
 8011f2c:	4bb71b00 	.word	0x4bb71b00

08011f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011f36:	f7ff fe81 	bl	8011c3c <HAL_RCC_GetSysClockFreq>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	4b10      	ldr	r3, [pc, #64]	@ (8011f80 <HAL_RCC_GetHCLKFreq+0x50>)
 8011f3e:	699b      	ldr	r3, [r3, #24]
 8011f40:	0a1b      	lsrs	r3, r3, #8
 8011f42:	f003 030f 	and.w	r3, r3, #15
 8011f46:	490f      	ldr	r1, [pc, #60]	@ (8011f84 <HAL_RCC_GetHCLKFreq+0x54>)
 8011f48:	5ccb      	ldrb	r3, [r1, r3]
 8011f4a:	f003 031f 	and.w	r3, r3, #31
 8011f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8011f52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011f54:	4b0a      	ldr	r3, [pc, #40]	@ (8011f80 <HAL_RCC_GetHCLKFreq+0x50>)
 8011f56:	699b      	ldr	r3, [r3, #24]
 8011f58:	f003 030f 	and.w	r3, r3, #15
 8011f5c:	4a09      	ldr	r2, [pc, #36]	@ (8011f84 <HAL_RCC_GetHCLKFreq+0x54>)
 8011f5e:	5cd3      	ldrb	r3, [r2, r3]
 8011f60:	f003 031f 	and.w	r3, r3, #31
 8011f64:	687a      	ldr	r2, [r7, #4]
 8011f66:	fa22 f303 	lsr.w	r3, r2, r3
 8011f6a:	4a07      	ldr	r2, [pc, #28]	@ (8011f88 <HAL_RCC_GetHCLKFreq+0x58>)
 8011f6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011f6e:	4a07      	ldr	r2, [pc, #28]	@ (8011f8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011f74:	4b04      	ldr	r3, [pc, #16]	@ (8011f88 <HAL_RCC_GetHCLKFreq+0x58>)
 8011f76:	681b      	ldr	r3, [r3, #0]
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3708      	adds	r7, #8
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}
 8011f80:	58024400 	.word	0x58024400
 8011f84:	0801eb2c 	.word	0x0801eb2c
 8011f88:	24000008 	.word	0x24000008
 8011f8c:	24000004 	.word	0x24000004

08011f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011f94:	f7ff ffcc 	bl	8011f30 <HAL_RCC_GetHCLKFreq>
 8011f98:	4602      	mov	r2, r0
 8011f9a:	4b06      	ldr	r3, [pc, #24]	@ (8011fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011f9c:	69db      	ldr	r3, [r3, #28]
 8011f9e:	091b      	lsrs	r3, r3, #4
 8011fa0:	f003 0307 	and.w	r3, r3, #7
 8011fa4:	4904      	ldr	r1, [pc, #16]	@ (8011fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011fa6:	5ccb      	ldrb	r3, [r1, r3]
 8011fa8:	f003 031f 	and.w	r3, r3, #31
 8011fac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	58024400 	.word	0x58024400
 8011fb8:	0801eb2c 	.word	0x0801eb2c

08011fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011fc0:	f7ff ffb6 	bl	8011f30 <HAL_RCC_GetHCLKFreq>
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	4b06      	ldr	r3, [pc, #24]	@ (8011fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011fc8:	69db      	ldr	r3, [r3, #28]
 8011fca:	0a1b      	lsrs	r3, r3, #8
 8011fcc:	f003 0307 	and.w	r3, r3, #7
 8011fd0:	4904      	ldr	r1, [pc, #16]	@ (8011fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8011fd2:	5ccb      	ldrb	r3, [r1, r3]
 8011fd4:	f003 031f 	and.w	r3, r3, #31
 8011fd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	58024400 	.word	0x58024400
 8011fe4:	0801eb2c 	.word	0x0801eb2c

08011fe8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011fec:	b0c6      	sub	sp, #280	@ 0x118
 8011fee:	af00      	add	r7, sp, #0
 8011ff0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012008:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801200c:	2500      	movs	r5, #0
 801200e:	ea54 0305 	orrs.w	r3, r4, r5
 8012012:	d049      	beq.n	80120a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8012014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801201a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801201e:	d02f      	beq.n	8012080 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8012020:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012024:	d828      	bhi.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012026:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801202a:	d01a      	beq.n	8012062 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801202c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012030:	d822      	bhi.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012032:	2b00      	cmp	r3, #0
 8012034:	d003      	beq.n	801203e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8012036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801203a:	d007      	beq.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801203c:	e01c      	b.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801203e:	4bab      	ldr	r3, [pc, #684]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012042:	4aaa      	ldr	r2, [pc, #680]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012048:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801204a:	e01a      	b.n	8012082 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801204c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012050:	3308      	adds	r3, #8
 8012052:	2102      	movs	r1, #2
 8012054:	4618      	mov	r0, r3
 8012056:	f002 fa49 	bl	80144ec <RCCEx_PLL2_Config>
 801205a:	4603      	mov	r3, r0
 801205c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012060:	e00f      	b.n	8012082 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012066:	3328      	adds	r3, #40	@ 0x28
 8012068:	2102      	movs	r1, #2
 801206a:	4618      	mov	r0, r3
 801206c:	f002 faf0 	bl	8014650 <RCCEx_PLL3_Config>
 8012070:	4603      	mov	r3, r0
 8012072:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012076:	e004      	b.n	8012082 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012078:	2301      	movs	r3, #1
 801207a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801207e:	e000      	b.n	8012082 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8012080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012082:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012086:	2b00      	cmp	r3, #0
 8012088:	d10a      	bne.n	80120a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801208a:	4b98      	ldr	r3, [pc, #608]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801208c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801208e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012096:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012098:	4a94      	ldr	r2, [pc, #592]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801209a:	430b      	orrs	r3, r1
 801209c:	6513      	str	r3, [r2, #80]	@ 0x50
 801209e:	e003      	b.n	80120a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80120a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80120a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80120b4:	f04f 0900 	mov.w	r9, #0
 80120b8:	ea58 0309 	orrs.w	r3, r8, r9
 80120bc:	d047      	beq.n	801214e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80120be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120c4:	2b04      	cmp	r3, #4
 80120c6:	d82a      	bhi.n	801211e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80120c8:	a201      	add	r2, pc, #4	@ (adr r2, 80120d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80120ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120ce:	bf00      	nop
 80120d0:	080120e5 	.word	0x080120e5
 80120d4:	080120f3 	.word	0x080120f3
 80120d8:	08012109 	.word	0x08012109
 80120dc:	08012127 	.word	0x08012127
 80120e0:	08012127 	.word	0x08012127
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80120e4:	4b81      	ldr	r3, [pc, #516]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80120e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120e8:	4a80      	ldr	r2, [pc, #512]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80120ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80120ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80120f0:	e01a      	b.n	8012128 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80120f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120f6:	3308      	adds	r3, #8
 80120f8:	2100      	movs	r1, #0
 80120fa:	4618      	mov	r0, r3
 80120fc:	f002 f9f6 	bl	80144ec <RCCEx_PLL2_Config>
 8012100:	4603      	mov	r3, r0
 8012102:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012106:	e00f      	b.n	8012128 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801210c:	3328      	adds	r3, #40	@ 0x28
 801210e:	2100      	movs	r1, #0
 8012110:	4618      	mov	r0, r3
 8012112:	f002 fa9d 	bl	8014650 <RCCEx_PLL3_Config>
 8012116:	4603      	mov	r3, r0
 8012118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801211c:	e004      	b.n	8012128 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801211e:	2301      	movs	r3, #1
 8012120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012124:	e000      	b.n	8012128 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8012126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801212c:	2b00      	cmp	r3, #0
 801212e:	d10a      	bne.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012130:	4b6e      	ldr	r3, [pc, #440]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012134:	f023 0107 	bic.w	r1, r3, #7
 8012138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801213e:	4a6b      	ldr	r2, [pc, #428]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012140:	430b      	orrs	r3, r1
 8012142:	6513      	str	r3, [r2, #80]	@ 0x50
 8012144:	e003      	b.n	801214e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801214a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801214e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012156:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 801215a:	f04f 0b00 	mov.w	fp, #0
 801215e:	ea5a 030b 	orrs.w	r3, sl, fp
 8012162:	d05b      	beq.n	801221c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8012164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012168:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801216c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8012170:	d03b      	beq.n	80121ea <HAL_RCCEx_PeriphCLKConfig+0x202>
 8012172:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8012176:	d834      	bhi.n	80121e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012178:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801217c:	d037      	beq.n	80121ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 801217e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012182:	d82e      	bhi.n	80121e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012184:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012188:	d033      	beq.n	80121f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801218a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801218e:	d828      	bhi.n	80121e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8012190:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012194:	d01a      	beq.n	80121cc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8012196:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801219a:	d822      	bhi.n	80121e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801219c:	2b00      	cmp	r3, #0
 801219e:	d003      	beq.n	80121a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80121a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80121a4:	d007      	beq.n	80121b6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80121a6:	e01c      	b.n	80121e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80121a8:	4b50      	ldr	r3, [pc, #320]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121ac:	4a4f      	ldr	r2, [pc, #316]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80121b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121b4:	e01e      	b.n	80121f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80121b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121ba:	3308      	adds	r3, #8
 80121bc:	2100      	movs	r1, #0
 80121be:	4618      	mov	r0, r3
 80121c0:	f002 f994 	bl	80144ec <RCCEx_PLL2_Config>
 80121c4:	4603      	mov	r3, r0
 80121c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80121ca:	e013      	b.n	80121f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80121cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121d0:	3328      	adds	r3, #40	@ 0x28
 80121d2:	2100      	movs	r1, #0
 80121d4:	4618      	mov	r0, r3
 80121d6:	f002 fa3b 	bl	8014650 <RCCEx_PLL3_Config>
 80121da:	4603      	mov	r3, r0
 80121dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80121e0:	e008      	b.n	80121f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80121e2:	2301      	movs	r3, #1
 80121e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80121e8:	e004      	b.n	80121f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80121ea:	bf00      	nop
 80121ec:	e002      	b.n	80121f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80121ee:	bf00      	nop
 80121f0:	e000      	b.n	80121f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80121f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80121f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d10b      	bne.n	8012214 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80121fc:	4b3b      	ldr	r3, [pc, #236]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80121fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012200:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8012204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012208:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801220c:	4a37      	ldr	r2, [pc, #220]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801220e:	430b      	orrs	r3, r1
 8012210:	6593      	str	r3, [r2, #88]	@ 0x58
 8012212:	e003      	b.n	801221c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012214:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012218:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801221c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012224:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8012228:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801222c:	2300      	movs	r3, #0
 801222e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8012232:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8012236:	460b      	mov	r3, r1
 8012238:	4313      	orrs	r3, r2
 801223a:	d05d      	beq.n	80122f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801223c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012240:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8012244:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8012248:	d03b      	beq.n	80122c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801224a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 801224e:	d834      	bhi.n	80122ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012250:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012254:	d037      	beq.n	80122c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8012256:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801225a:	d82e      	bhi.n	80122ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801225c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012260:	d033      	beq.n	80122ca <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8012262:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012266:	d828      	bhi.n	80122ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801226c:	d01a      	beq.n	80122a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801226e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012272:	d822      	bhi.n	80122ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8012274:	2b00      	cmp	r3, #0
 8012276:	d003      	beq.n	8012280 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8012278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801227c:	d007      	beq.n	801228e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801227e:	e01c      	b.n	80122ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012280:	4b1a      	ldr	r3, [pc, #104]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012284:	4a19      	ldr	r2, [pc, #100]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8012286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801228a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801228c:	e01e      	b.n	80122cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801228e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012292:	3308      	adds	r3, #8
 8012294:	2100      	movs	r1, #0
 8012296:	4618      	mov	r0, r3
 8012298:	f002 f928 	bl	80144ec <RCCEx_PLL2_Config>
 801229c:	4603      	mov	r3, r0
 801229e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80122a2:	e013      	b.n	80122cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80122a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122a8:	3328      	adds	r3, #40	@ 0x28
 80122aa:	2100      	movs	r1, #0
 80122ac:	4618      	mov	r0, r3
 80122ae:	f002 f9cf 	bl	8014650 <RCCEx_PLL3_Config>
 80122b2:	4603      	mov	r3, r0
 80122b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80122b8:	e008      	b.n	80122cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80122ba:	2301      	movs	r3, #1
 80122bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80122c0:	e004      	b.n	80122cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80122c2:	bf00      	nop
 80122c4:	e002      	b.n	80122cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80122c6:	bf00      	nop
 80122c8:	e000      	b.n	80122cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80122ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80122cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d10d      	bne.n	80122f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80122d4:	4b05      	ldr	r3, [pc, #20]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80122d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80122dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80122e4:	4a01      	ldr	r2, [pc, #4]	@ (80122ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80122e6:	430b      	orrs	r3, r1
 80122e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80122ea:	e005      	b.n	80122f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80122ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80122f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012300:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8012304:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012308:	2300      	movs	r3, #0
 801230a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801230e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8012312:	460b      	mov	r3, r1
 8012314:	4313      	orrs	r3, r2
 8012316:	d03a      	beq.n	801238e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8012318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801231e:	2b30      	cmp	r3, #48	@ 0x30
 8012320:	d01f      	beq.n	8012362 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8012322:	2b30      	cmp	r3, #48	@ 0x30
 8012324:	d819      	bhi.n	801235a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8012326:	2b20      	cmp	r3, #32
 8012328:	d00c      	beq.n	8012344 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801232a:	2b20      	cmp	r3, #32
 801232c:	d815      	bhi.n	801235a <HAL_RCCEx_PeriphCLKConfig+0x372>
 801232e:	2b00      	cmp	r3, #0
 8012330:	d019      	beq.n	8012366 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8012332:	2b10      	cmp	r3, #16
 8012334:	d111      	bne.n	801235a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012336:	4baa      	ldr	r3, [pc, #680]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801233a:	4aa9      	ldr	r2, [pc, #676]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801233c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012340:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012342:	e011      	b.n	8012368 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012348:	3308      	adds	r3, #8
 801234a:	2102      	movs	r1, #2
 801234c:	4618      	mov	r0, r3
 801234e:	f002 f8cd 	bl	80144ec <RCCEx_PLL2_Config>
 8012352:	4603      	mov	r3, r0
 8012354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8012358:	e006      	b.n	8012368 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801235a:	2301      	movs	r3, #1
 801235c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012360:	e002      	b.n	8012368 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012362:	bf00      	nop
 8012364:	e000      	b.n	8012368 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8012366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801236c:	2b00      	cmp	r3, #0
 801236e:	d10a      	bne.n	8012386 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8012370:	4b9b      	ldr	r3, [pc, #620]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012374:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8012378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801237e:	4a98      	ldr	r2, [pc, #608]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012380:	430b      	orrs	r3, r1
 8012382:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012384:	e003      	b.n	801238e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012386:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801238a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801238e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012396:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801239a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801239e:	2300      	movs	r3, #0
 80123a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80123a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80123a8:	460b      	mov	r3, r1
 80123aa:	4313      	orrs	r3, r2
 80123ac:	d051      	beq.n	8012452 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80123ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80123b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80123b8:	d035      	beq.n	8012426 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80123ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80123be:	d82e      	bhi.n	801241e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80123c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80123c4:	d031      	beq.n	801242a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80123c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80123ca:	d828      	bhi.n	801241e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80123cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80123d0:	d01a      	beq.n	8012408 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80123d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80123d6:	d822      	bhi.n	801241e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d003      	beq.n	80123e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80123dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80123e0:	d007      	beq.n	80123f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80123e2:	e01c      	b.n	801241e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80123e4:	4b7e      	ldr	r3, [pc, #504]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80123e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123e8:	4a7d      	ldr	r2, [pc, #500]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80123ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80123ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80123f0:	e01c      	b.n	801242c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80123f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123f6:	3308      	adds	r3, #8
 80123f8:	2100      	movs	r1, #0
 80123fa:	4618      	mov	r0, r3
 80123fc:	f002 f876 	bl	80144ec <RCCEx_PLL2_Config>
 8012400:	4603      	mov	r3, r0
 8012402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012406:	e011      	b.n	801242c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801240c:	3328      	adds	r3, #40	@ 0x28
 801240e:	2100      	movs	r1, #0
 8012410:	4618      	mov	r0, r3
 8012412:	f002 f91d 	bl	8014650 <RCCEx_PLL3_Config>
 8012416:	4603      	mov	r3, r0
 8012418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801241c:	e006      	b.n	801242c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801241e:	2301      	movs	r3, #1
 8012420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012424:	e002      	b.n	801242c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8012426:	bf00      	nop
 8012428:	e000      	b.n	801242c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801242a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801242c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012430:	2b00      	cmp	r3, #0
 8012432:	d10a      	bne.n	801244a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8012434:	4b6a      	ldr	r3, [pc, #424]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012438:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801243c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012442:	4a67      	ldr	r2, [pc, #412]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012444:	430b      	orrs	r3, r1
 8012446:	6513      	str	r3, [r2, #80]	@ 0x50
 8012448:	e003      	b.n	8012452 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801244a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801244e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801245e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012462:	2300      	movs	r3, #0
 8012464:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012468:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801246c:	460b      	mov	r3, r1
 801246e:	4313      	orrs	r3, r2
 8012470:	d053      	beq.n	801251a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8012472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801247c:	d033      	beq.n	80124e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801247e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012482:	d82c      	bhi.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012484:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012488:	d02f      	beq.n	80124ea <HAL_RCCEx_PeriphCLKConfig+0x502>
 801248a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801248e:	d826      	bhi.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012490:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012494:	d02b      	beq.n	80124ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8012496:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801249a:	d820      	bhi.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801249c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80124a0:	d012      	beq.n	80124c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80124a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80124a6:	d81a      	bhi.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d022      	beq.n	80124f2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80124ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124b0:	d115      	bne.n	80124de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80124b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124b6:	3308      	adds	r3, #8
 80124b8:	2101      	movs	r1, #1
 80124ba:	4618      	mov	r0, r3
 80124bc:	f002 f816 	bl	80144ec <RCCEx_PLL2_Config>
 80124c0:	4603      	mov	r3, r0
 80124c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80124c6:	e015      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80124c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124cc:	3328      	adds	r3, #40	@ 0x28
 80124ce:	2101      	movs	r1, #1
 80124d0:	4618      	mov	r0, r3
 80124d2:	f002 f8bd 	bl	8014650 <RCCEx_PLL3_Config>
 80124d6:	4603      	mov	r3, r0
 80124d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80124dc:	e00a      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80124de:	2301      	movs	r3, #1
 80124e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80124e4:	e006      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80124e6:	bf00      	nop
 80124e8:	e004      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80124ea:	bf00      	nop
 80124ec:	e002      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80124ee:	bf00      	nop
 80124f0:	e000      	b.n	80124f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80124f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80124f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d10a      	bne.n	8012512 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80124fc:	4b38      	ldr	r3, [pc, #224]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80124fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012500:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8012504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801250a:	4a35      	ldr	r2, [pc, #212]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801250c:	430b      	orrs	r3, r1
 801250e:	6513      	str	r3, [r2, #80]	@ 0x50
 8012510:	e003      	b.n	801251a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012512:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012516:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801251a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012522:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8012526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801252a:	2300      	movs	r3, #0
 801252c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012530:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012534:	460b      	mov	r3, r1
 8012536:	4313      	orrs	r3, r2
 8012538:	d058      	beq.n	80125ec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801253a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801253e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012542:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012546:	d033      	beq.n	80125b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8012548:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801254c:	d82c      	bhi.n	80125a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801254e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012552:	d02f      	beq.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8012554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012558:	d826      	bhi.n	80125a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801255a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801255e:	d02b      	beq.n	80125b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8012560:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012564:	d820      	bhi.n	80125a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801256a:	d012      	beq.n	8012592 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801256c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012570:	d81a      	bhi.n	80125a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8012572:	2b00      	cmp	r3, #0
 8012574:	d022      	beq.n	80125bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8012576:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801257a:	d115      	bne.n	80125a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801257c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012580:	3308      	adds	r3, #8
 8012582:	2101      	movs	r1, #1
 8012584:	4618      	mov	r0, r3
 8012586:	f001 ffb1 	bl	80144ec <RCCEx_PLL2_Config>
 801258a:	4603      	mov	r3, r0
 801258c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012590:	e015      	b.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012596:	3328      	adds	r3, #40	@ 0x28
 8012598:	2101      	movs	r1, #1
 801259a:	4618      	mov	r0, r3
 801259c:	f002 f858 	bl	8014650 <RCCEx_PLL3_Config>
 80125a0:	4603      	mov	r3, r0
 80125a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80125a6:	e00a      	b.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80125a8:	2301      	movs	r3, #1
 80125aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80125ae:	e006      	b.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80125b0:	bf00      	nop
 80125b2:	e004      	b.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80125b4:	bf00      	nop
 80125b6:	e002      	b.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80125b8:	bf00      	nop
 80125ba:	e000      	b.n	80125be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80125bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80125be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d10e      	bne.n	80125e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80125c6:	4b06      	ldr	r3, [pc, #24]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80125c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80125ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80125d6:	4a02      	ldr	r2, [pc, #8]	@ (80125e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80125d8:	430b      	orrs	r3, r1
 80125da:	6593      	str	r3, [r2, #88]	@ 0x58
 80125dc:	e006      	b.n	80125ec <HAL_RCCEx_PeriphCLKConfig+0x604>
 80125de:	bf00      	nop
 80125e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80125ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80125f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80125fc:	2300      	movs	r3, #0
 80125fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012602:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8012606:	460b      	mov	r3, r1
 8012608:	4313      	orrs	r3, r2
 801260a:	d037      	beq.n	801267c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801260c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012616:	d00e      	beq.n	8012636 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8012618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801261c:	d816      	bhi.n	801264c <HAL_RCCEx_PeriphCLKConfig+0x664>
 801261e:	2b00      	cmp	r3, #0
 8012620:	d018      	beq.n	8012654 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8012622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012626:	d111      	bne.n	801264c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012628:	4bc4      	ldr	r3, [pc, #784]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801262c:	4ac3      	ldr	r2, [pc, #780]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801262e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012634:	e00f      	b.n	8012656 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801263a:	3308      	adds	r3, #8
 801263c:	2101      	movs	r1, #1
 801263e:	4618      	mov	r0, r3
 8012640:	f001 ff54 	bl	80144ec <RCCEx_PLL2_Config>
 8012644:	4603      	mov	r3, r0
 8012646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801264a:	e004      	b.n	8012656 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801264c:	2301      	movs	r3, #1
 801264e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012652:	e000      	b.n	8012656 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8012654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801265a:	2b00      	cmp	r3, #0
 801265c:	d10a      	bne.n	8012674 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801265e:	4bb7      	ldr	r3, [pc, #732]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012662:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801266a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801266c:	4ab3      	ldr	r2, [pc, #716]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801266e:	430b      	orrs	r3, r1
 8012670:	6513      	str	r3, [r2, #80]	@ 0x50
 8012672:	e003      	b.n	801267c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801267c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012684:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012688:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801268c:	2300      	movs	r3, #0
 801268e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012692:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8012696:	460b      	mov	r3, r1
 8012698:	4313      	orrs	r3, r2
 801269a:	d039      	beq.n	8012710 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801269c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80126a2:	2b03      	cmp	r3, #3
 80126a4:	d81c      	bhi.n	80126e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80126a6:	a201      	add	r2, pc, #4	@ (adr r2, 80126ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80126a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126ac:	080126e9 	.word	0x080126e9
 80126b0:	080126bd 	.word	0x080126bd
 80126b4:	080126cb 	.word	0x080126cb
 80126b8:	080126e9 	.word	0x080126e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80126bc:	4b9f      	ldr	r3, [pc, #636]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126c0:	4a9e      	ldr	r2, [pc, #632]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80126c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80126c8:	e00f      	b.n	80126ea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80126ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126ce:	3308      	adds	r3, #8
 80126d0:	2102      	movs	r1, #2
 80126d2:	4618      	mov	r0, r3
 80126d4:	f001 ff0a 	bl	80144ec <RCCEx_PLL2_Config>
 80126d8:	4603      	mov	r3, r0
 80126da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80126de:	e004      	b.n	80126ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80126e0:	2301      	movs	r3, #1
 80126e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80126e6:	e000      	b.n	80126ea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80126e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80126ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d10a      	bne.n	8012708 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80126f2:	4b92      	ldr	r3, [pc, #584]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80126f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80126f6:	f023 0103 	bic.w	r1, r3, #3
 80126fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012700:	4a8e      	ldr	r2, [pc, #568]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012702:	430b      	orrs	r3, r1
 8012704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012706:	e003      	b.n	8012710 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801270c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012718:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801271c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012720:	2300      	movs	r3, #0
 8012722:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012726:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801272a:	460b      	mov	r3, r1
 801272c:	4313      	orrs	r3, r2
 801272e:	f000 8099 	beq.w	8012864 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012732:	4b83      	ldr	r3, [pc, #524]	@ (8012940 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4a82      	ldr	r2, [pc, #520]	@ (8012940 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801273c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801273e:	f7f6 feb9 	bl	80094b4 <HAL_GetTick>
 8012742:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012746:	e00b      	b.n	8012760 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012748:	f7f6 feb4 	bl	80094b4 <HAL_GetTick>
 801274c:	4602      	mov	r2, r0
 801274e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012752:	1ad3      	subs	r3, r2, r3
 8012754:	2b64      	cmp	r3, #100	@ 0x64
 8012756:	d903      	bls.n	8012760 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8012758:	2303      	movs	r3, #3
 801275a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801275e:	e005      	b.n	801276c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012760:	4b77      	ldr	r3, [pc, #476]	@ (8012940 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012768:	2b00      	cmp	r3, #0
 801276a:	d0ed      	beq.n	8012748 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801276c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012770:	2b00      	cmp	r3, #0
 8012772:	d173      	bne.n	801285c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012774:	4b71      	ldr	r3, [pc, #452]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012776:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801277c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012780:	4053      	eors	r3, r2
 8012782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012786:	2b00      	cmp	r3, #0
 8012788:	d015      	beq.n	80127b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801278a:	4b6c      	ldr	r3, [pc, #432]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801278e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012792:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012796:	4b69      	ldr	r3, [pc, #420]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801279a:	4a68      	ldr	r2, [pc, #416]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801279c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80127a0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80127a2:	4b66      	ldr	r3, [pc, #408]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127a6:	4a65      	ldr	r2, [pc, #404]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80127ac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80127ae:	4a63      	ldr	r2, [pc, #396]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80127b4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80127b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80127be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80127c2:	d118      	bne.n	80127f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80127c4:	f7f6 fe76 	bl	80094b4 <HAL_GetTick>
 80127c8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80127cc:	e00d      	b.n	80127ea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80127ce:	f7f6 fe71 	bl	80094b4 <HAL_GetTick>
 80127d2:	4602      	mov	r2, r0
 80127d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80127d8:	1ad2      	subs	r2, r2, r3
 80127da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80127de:	429a      	cmp	r2, r3
 80127e0:	d903      	bls.n	80127ea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80127e2:	2303      	movs	r3, #3
 80127e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80127e8:	e005      	b.n	80127f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80127ea:	4b54      	ldr	r3, [pc, #336]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80127ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127ee:	f003 0302 	and.w	r3, r3, #2
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d0eb      	beq.n	80127ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80127f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d129      	bne.n	8012852 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80127fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801280a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801280e:	d10e      	bne.n	801282e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8012810:	4b4a      	ldr	r3, [pc, #296]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801281c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012820:	091a      	lsrs	r2, r3, #4
 8012822:	4b48      	ldr	r3, [pc, #288]	@ (8012944 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012824:	4013      	ands	r3, r2
 8012826:	4a45      	ldr	r2, [pc, #276]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012828:	430b      	orrs	r3, r1
 801282a:	6113      	str	r3, [r2, #16]
 801282c:	e005      	b.n	801283a <HAL_RCCEx_PeriphCLKConfig+0x852>
 801282e:	4b43      	ldr	r3, [pc, #268]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012830:	691b      	ldr	r3, [r3, #16]
 8012832:	4a42      	ldr	r2, [pc, #264]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012834:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012838:	6113      	str	r3, [r2, #16]
 801283a:	4b40      	ldr	r3, [pc, #256]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801283c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801283e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012842:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801284a:	4a3c      	ldr	r2, [pc, #240]	@ (801293c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801284c:	430b      	orrs	r3, r1
 801284e:	6713      	str	r3, [r2, #112]	@ 0x70
 8012850:	e008      	b.n	8012864 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012852:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012856:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 801285a:	e003      	b.n	8012864 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801285c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012860:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286c:	f002 0301 	and.w	r3, r2, #1
 8012870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012874:	2300      	movs	r3, #0
 8012876:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801287a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801287e:	460b      	mov	r3, r1
 8012880:	4313      	orrs	r3, r2
 8012882:	f000 808f 	beq.w	80129a4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801288a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801288c:	2b28      	cmp	r3, #40	@ 0x28
 801288e:	d871      	bhi.n	8012974 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8012890:	a201      	add	r2, pc, #4	@ (adr r2, 8012898 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8012892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012896:	bf00      	nop
 8012898:	0801297d 	.word	0x0801297d
 801289c:	08012975 	.word	0x08012975
 80128a0:	08012975 	.word	0x08012975
 80128a4:	08012975 	.word	0x08012975
 80128a8:	08012975 	.word	0x08012975
 80128ac:	08012975 	.word	0x08012975
 80128b0:	08012975 	.word	0x08012975
 80128b4:	08012975 	.word	0x08012975
 80128b8:	08012949 	.word	0x08012949
 80128bc:	08012975 	.word	0x08012975
 80128c0:	08012975 	.word	0x08012975
 80128c4:	08012975 	.word	0x08012975
 80128c8:	08012975 	.word	0x08012975
 80128cc:	08012975 	.word	0x08012975
 80128d0:	08012975 	.word	0x08012975
 80128d4:	08012975 	.word	0x08012975
 80128d8:	0801295f 	.word	0x0801295f
 80128dc:	08012975 	.word	0x08012975
 80128e0:	08012975 	.word	0x08012975
 80128e4:	08012975 	.word	0x08012975
 80128e8:	08012975 	.word	0x08012975
 80128ec:	08012975 	.word	0x08012975
 80128f0:	08012975 	.word	0x08012975
 80128f4:	08012975 	.word	0x08012975
 80128f8:	0801297d 	.word	0x0801297d
 80128fc:	08012975 	.word	0x08012975
 8012900:	08012975 	.word	0x08012975
 8012904:	08012975 	.word	0x08012975
 8012908:	08012975 	.word	0x08012975
 801290c:	08012975 	.word	0x08012975
 8012910:	08012975 	.word	0x08012975
 8012914:	08012975 	.word	0x08012975
 8012918:	0801297d 	.word	0x0801297d
 801291c:	08012975 	.word	0x08012975
 8012920:	08012975 	.word	0x08012975
 8012924:	08012975 	.word	0x08012975
 8012928:	08012975 	.word	0x08012975
 801292c:	08012975 	.word	0x08012975
 8012930:	08012975 	.word	0x08012975
 8012934:	08012975 	.word	0x08012975
 8012938:	0801297d 	.word	0x0801297d
 801293c:	58024400 	.word	0x58024400
 8012940:	58024800 	.word	0x58024800
 8012944:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801294c:	3308      	adds	r3, #8
 801294e:	2101      	movs	r1, #1
 8012950:	4618      	mov	r0, r3
 8012952:	f001 fdcb 	bl	80144ec <RCCEx_PLL2_Config>
 8012956:	4603      	mov	r3, r0
 8012958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801295c:	e00f      	b.n	801297e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801295e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012962:	3328      	adds	r3, #40	@ 0x28
 8012964:	2101      	movs	r1, #1
 8012966:	4618      	mov	r0, r3
 8012968:	f001 fe72 	bl	8014650 <RCCEx_PLL3_Config>
 801296c:	4603      	mov	r3, r0
 801296e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012972:	e004      	b.n	801297e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012974:	2301      	movs	r3, #1
 8012976:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801297a:	e000      	b.n	801297e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 801297c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801297e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012982:	2b00      	cmp	r3, #0
 8012984:	d10a      	bne.n	801299c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012986:	4bbf      	ldr	r3, [pc, #764]	@ (8012c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801298a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801298e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012992:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012994:	4abb      	ldr	r2, [pc, #748]	@ (8012c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012996:	430b      	orrs	r3, r1
 8012998:	6553      	str	r3, [r2, #84]	@ 0x54
 801299a:	e003      	b.n	80129a4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801299c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80129a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80129a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ac:	f002 0302 	and.w	r3, r2, #2
 80129b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80129b4:	2300      	movs	r3, #0
 80129b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80129ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80129be:	460b      	mov	r3, r1
 80129c0:	4313      	orrs	r3, r2
 80129c2:	d041      	beq.n	8012a48 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80129c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80129ca:	2b05      	cmp	r3, #5
 80129cc:	d824      	bhi.n	8012a18 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80129ce:	a201      	add	r2, pc, #4	@ (adr r2, 80129d4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80129d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129d4:	08012a21 	.word	0x08012a21
 80129d8:	080129ed 	.word	0x080129ed
 80129dc:	08012a03 	.word	0x08012a03
 80129e0:	08012a21 	.word	0x08012a21
 80129e4:	08012a21 	.word	0x08012a21
 80129e8:	08012a21 	.word	0x08012a21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80129ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129f0:	3308      	adds	r3, #8
 80129f2:	2101      	movs	r1, #1
 80129f4:	4618      	mov	r0, r3
 80129f6:	f001 fd79 	bl	80144ec <RCCEx_PLL2_Config>
 80129fa:	4603      	mov	r3, r0
 80129fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012a00:	e00f      	b.n	8012a22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a06:	3328      	adds	r3, #40	@ 0x28
 8012a08:	2101      	movs	r1, #1
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f001 fe20 	bl	8014650 <RCCEx_PLL3_Config>
 8012a10:	4603      	mov	r3, r0
 8012a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012a16:	e004      	b.n	8012a22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012a18:	2301      	movs	r3, #1
 8012a1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012a1e:	e000      	b.n	8012a22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8012a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d10a      	bne.n	8012a40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012a2a:	4b96      	ldr	r3, [pc, #600]	@ (8012c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a2e:	f023 0107 	bic.w	r1, r3, #7
 8012a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012a38:	4a92      	ldr	r2, [pc, #584]	@ (8012c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012a3a:	430b      	orrs	r3, r1
 8012a3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8012a3e:	e003      	b.n	8012a48 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a50:	f002 0304 	and.w	r3, r2, #4
 8012a54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012a58:	2300      	movs	r3, #0
 8012a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012a5e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012a62:	460b      	mov	r3, r1
 8012a64:	4313      	orrs	r3, r2
 8012a66:	d044      	beq.n	8012af2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012a70:	2b05      	cmp	r3, #5
 8012a72:	d825      	bhi.n	8012ac0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012a74:	a201      	add	r2, pc, #4	@ (adr r2, 8012a7c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8012a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a7a:	bf00      	nop
 8012a7c:	08012ac9 	.word	0x08012ac9
 8012a80:	08012a95 	.word	0x08012a95
 8012a84:	08012aab 	.word	0x08012aab
 8012a88:	08012ac9 	.word	0x08012ac9
 8012a8c:	08012ac9 	.word	0x08012ac9
 8012a90:	08012ac9 	.word	0x08012ac9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a98:	3308      	adds	r3, #8
 8012a9a:	2101      	movs	r1, #1
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f001 fd25 	bl	80144ec <RCCEx_PLL2_Config>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012aa8:	e00f      	b.n	8012aca <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012aae:	3328      	adds	r3, #40	@ 0x28
 8012ab0:	2101      	movs	r1, #1
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f001 fdcc 	bl	8014650 <RCCEx_PLL3_Config>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012abe:	e004      	b.n	8012aca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012ac6:	e000      	b.n	8012aca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012aca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d10b      	bne.n	8012aea <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012ad2:	4b6c      	ldr	r3, [pc, #432]	@ (8012c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ad6:	f023 0107 	bic.w	r1, r3, #7
 8012ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012ae2:	4a68      	ldr	r2, [pc, #416]	@ (8012c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012ae4:	430b      	orrs	r3, r1
 8012ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8012ae8:	e003      	b.n	8012af2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012aea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012aee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8012af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afa:	f002 0320 	and.w	r3, r2, #32
 8012afe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012b02:	2300      	movs	r3, #0
 8012b04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012b08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012b0c:	460b      	mov	r3, r1
 8012b0e:	4313      	orrs	r3, r2
 8012b10:	d055      	beq.n	8012bbe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8012b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012b1e:	d033      	beq.n	8012b88 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8012b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012b24:	d82c      	bhi.n	8012b80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b2a:	d02f      	beq.n	8012b8c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8012b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012b30:	d826      	bhi.n	8012b80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012b36:	d02b      	beq.n	8012b90 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8012b38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012b3c:	d820      	bhi.n	8012b80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b42:	d012      	beq.n	8012b6a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8012b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b48:	d81a      	bhi.n	8012b80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d022      	beq.n	8012b94 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8012b4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012b52:	d115      	bne.n	8012b80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b58:	3308      	adds	r3, #8
 8012b5a:	2100      	movs	r1, #0
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f001 fcc5 	bl	80144ec <RCCEx_PLL2_Config>
 8012b62:	4603      	mov	r3, r0
 8012b64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012b68:	e015      	b.n	8012b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b6e:	3328      	adds	r3, #40	@ 0x28
 8012b70:	2102      	movs	r1, #2
 8012b72:	4618      	mov	r0, r3
 8012b74:	f001 fd6c 	bl	8014650 <RCCEx_PLL3_Config>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8012b7e:	e00a      	b.n	8012b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012b80:	2301      	movs	r3, #1
 8012b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012b86:	e006      	b.n	8012b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012b88:	bf00      	nop
 8012b8a:	e004      	b.n	8012b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012b8c:	bf00      	nop
 8012b8e:	e002      	b.n	8012b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012b90:	bf00      	nop
 8012b92:	e000      	b.n	8012b96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d10b      	bne.n	8012bb6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012b9e:	4b39      	ldr	r3, [pc, #228]	@ (8012c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ba2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012bae:	4a35      	ldr	r2, [pc, #212]	@ (8012c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012bb0:	430b      	orrs	r3, r1
 8012bb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8012bb4:	e003      	b.n	8012bbe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012bb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012bba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012bca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012bce:	2300      	movs	r3, #0
 8012bd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012bd4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012bd8:	460b      	mov	r3, r1
 8012bda:	4313      	orrs	r3, r2
 8012bdc:	d058      	beq.n	8012c90 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8012bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012be6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012bea:	d033      	beq.n	8012c54 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012bec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012bf0:	d82c      	bhi.n	8012c4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012bf6:	d02f      	beq.n	8012c58 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012bfc:	d826      	bhi.n	8012c4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012bfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012c02:	d02b      	beq.n	8012c5c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012c04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012c08:	d820      	bhi.n	8012c4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012c0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012c0e:	d012      	beq.n	8012c36 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012c14:	d81a      	bhi.n	8012c4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d022      	beq.n	8012c60 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012c1e:	d115      	bne.n	8012c4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c24:	3308      	adds	r3, #8
 8012c26:	2100      	movs	r1, #0
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f001 fc5f 	bl	80144ec <RCCEx_PLL2_Config>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012c34:	e015      	b.n	8012c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c3a:	3328      	adds	r3, #40	@ 0x28
 8012c3c:	2102      	movs	r1, #2
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f001 fd06 	bl	8014650 <RCCEx_PLL3_Config>
 8012c44:	4603      	mov	r3, r0
 8012c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8012c4a:	e00a      	b.n	8012c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012c52:	e006      	b.n	8012c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012c54:	bf00      	nop
 8012c56:	e004      	b.n	8012c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012c58:	bf00      	nop
 8012c5a:	e002      	b.n	8012c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012c5c:	bf00      	nop
 8012c5e:	e000      	b.n	8012c62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8012c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d10e      	bne.n	8012c88 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8012c6a:	4b06      	ldr	r3, [pc, #24]	@ (8012c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012c6e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8012c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012c7a:	4a02      	ldr	r2, [pc, #8]	@ (8012c84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012c7c:	430b      	orrs	r3, r1
 8012c7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8012c80:	e006      	b.n	8012c90 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8012c82:	bf00      	nop
 8012c84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012c8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8012c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c98:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012c9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012ca6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012caa:	460b      	mov	r3, r1
 8012cac:	4313      	orrs	r3, r2
 8012cae:	d055      	beq.n	8012d5c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012cb8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012cbc:	d033      	beq.n	8012d26 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012cbe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012cc2:	d82c      	bhi.n	8012d1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012cc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012cc8:	d02f      	beq.n	8012d2a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012cce:	d826      	bhi.n	8012d1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012cd0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012cd4:	d02b      	beq.n	8012d2e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012cd6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012cda:	d820      	bhi.n	8012d1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012cdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012ce0:	d012      	beq.n	8012d08 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8012ce2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012ce6:	d81a      	bhi.n	8012d1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d022      	beq.n	8012d32 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012cf0:	d115      	bne.n	8012d1e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012cf6:	3308      	adds	r3, #8
 8012cf8:	2100      	movs	r1, #0
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f001 fbf6 	bl	80144ec <RCCEx_PLL2_Config>
 8012d00:	4603      	mov	r3, r0
 8012d02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012d06:	e015      	b.n	8012d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d0c:	3328      	adds	r3, #40	@ 0x28
 8012d0e:	2102      	movs	r1, #2
 8012d10:	4618      	mov	r0, r3
 8012d12:	f001 fc9d 	bl	8014650 <RCCEx_PLL3_Config>
 8012d16:	4603      	mov	r3, r0
 8012d18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012d1c:	e00a      	b.n	8012d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012d1e:	2301      	movs	r3, #1
 8012d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012d24:	e006      	b.n	8012d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d26:	bf00      	nop
 8012d28:	e004      	b.n	8012d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d2a:	bf00      	nop
 8012d2c:	e002      	b.n	8012d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d2e:	bf00      	nop
 8012d30:	e000      	b.n	8012d34 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012d34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d10b      	bne.n	8012d54 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8012d3c:	4ba0      	ldr	r3, [pc, #640]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d40:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8012d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012d4c:	4a9c      	ldr	r2, [pc, #624]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012d4e:	430b      	orrs	r3, r1
 8012d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8012d52:	e003      	b.n	8012d5c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012d58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8012d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d64:	f002 0308 	and.w	r3, r2, #8
 8012d68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012d72:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8012d76:	460b      	mov	r3, r1
 8012d78:	4313      	orrs	r3, r2
 8012d7a:	d01e      	beq.n	8012dba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8012d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012d88:	d10c      	bne.n	8012da4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012d8e:	3328      	adds	r3, #40	@ 0x28
 8012d90:	2102      	movs	r1, #2
 8012d92:	4618      	mov	r0, r3
 8012d94:	f001 fc5c 	bl	8014650 <RCCEx_PLL3_Config>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d002      	beq.n	8012da4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8012d9e:	2301      	movs	r3, #1
 8012da0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012da4:	4b86      	ldr	r3, [pc, #536]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012da8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012db4:	4a82      	ldr	r2, [pc, #520]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012db6:	430b      	orrs	r3, r1
 8012db8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc2:	f002 0310 	and.w	r3, r2, #16
 8012dc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012dca:	2300      	movs	r3, #0
 8012dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012dd0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	4313      	orrs	r3, r2
 8012dd8:	d01e      	beq.n	8012e18 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012de6:	d10c      	bne.n	8012e02 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012dec:	3328      	adds	r3, #40	@ 0x28
 8012dee:	2102      	movs	r1, #2
 8012df0:	4618      	mov	r0, r3
 8012df2:	f001 fc2d 	bl	8014650 <RCCEx_PLL3_Config>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d002      	beq.n	8012e02 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012e02:	4b6f      	ldr	r3, [pc, #444]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012e12:	4a6b      	ldr	r2, [pc, #428]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e14:	430b      	orrs	r3, r1
 8012e16:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e20:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8012e24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012e26:	2300      	movs	r3, #0
 8012e28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012e2a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8012e2e:	460b      	mov	r3, r1
 8012e30:	4313      	orrs	r3, r2
 8012e32:	d03e      	beq.n	8012eb2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012e3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012e40:	d022      	beq.n	8012e88 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012e42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012e46:	d81b      	bhi.n	8012e80 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d003      	beq.n	8012e54 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e50:	d00b      	beq.n	8012e6a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012e52:	e015      	b.n	8012e80 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e58:	3308      	adds	r3, #8
 8012e5a:	2100      	movs	r1, #0
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f001 fb45 	bl	80144ec <RCCEx_PLL2_Config>
 8012e62:	4603      	mov	r3, r0
 8012e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012e68:	e00f      	b.n	8012e8a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e6e:	3328      	adds	r3, #40	@ 0x28
 8012e70:	2102      	movs	r1, #2
 8012e72:	4618      	mov	r0, r3
 8012e74:	f001 fbec 	bl	8014650 <RCCEx_PLL3_Config>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012e7e:	e004      	b.n	8012e8a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012e80:	2301      	movs	r3, #1
 8012e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012e86:	e000      	b.n	8012e8a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d10b      	bne.n	8012eaa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012e92:	4b4b      	ldr	r3, [pc, #300]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e96:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012e9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012ea2:	4a47      	ldr	r2, [pc, #284]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ea4:	430b      	orrs	r3, r1
 8012ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8012ea8:	e003      	b.n	8012eb2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012eaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012eae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8012ebe:	673b      	str	r3, [r7, #112]	@ 0x70
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	677b      	str	r3, [r7, #116]	@ 0x74
 8012ec4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012ec8:	460b      	mov	r3, r1
 8012eca:	4313      	orrs	r3, r2
 8012ecc:	d03b      	beq.n	8012f46 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012ed6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012eda:	d01f      	beq.n	8012f1c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012edc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012ee0:	d818      	bhi.n	8012f14 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012ee6:	d003      	beq.n	8012ef0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012ee8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012eec:	d007      	beq.n	8012efe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012eee:	e011      	b.n	8012f14 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012ef0:	4b33      	ldr	r3, [pc, #204]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ef4:	4a32      	ldr	r2, [pc, #200]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012efc:	e00f      	b.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f02:	3328      	adds	r3, #40	@ 0x28
 8012f04:	2101      	movs	r1, #1
 8012f06:	4618      	mov	r0, r3
 8012f08:	f001 fba2 	bl	8014650 <RCCEx_PLL3_Config>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012f12:	e004      	b.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f14:	2301      	movs	r3, #1
 8012f16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012f1a:	e000      	b.n	8012f1e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d10b      	bne.n	8012f3e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012f26:	4b26      	ldr	r3, [pc, #152]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8012f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f36:	4a22      	ldr	r2, [pc, #136]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f38:	430b      	orrs	r3, r1
 8012f3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8012f3c:	e003      	b.n	8012f46 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012f42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8012f52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012f54:	2300      	movs	r3, #0
 8012f56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012f58:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	4313      	orrs	r3, r2
 8012f60:	d034      	beq.n	8012fcc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8012f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d003      	beq.n	8012f74 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8012f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f70:	d007      	beq.n	8012f82 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012f72:	e011      	b.n	8012f98 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012f74:	4b12      	ldr	r3, [pc, #72]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f78:	4a11      	ldr	r2, [pc, #68]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012f80:	e00e      	b.n	8012fa0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012f86:	3308      	adds	r3, #8
 8012f88:	2102      	movs	r1, #2
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f001 faae 	bl	80144ec <RCCEx_PLL2_Config>
 8012f90:	4603      	mov	r3, r0
 8012f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012f96:	e003      	b.n	8012fa0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012f98:	2301      	movs	r3, #1
 8012f9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012f9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012fa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10d      	bne.n	8012fc4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012fa8:	4b05      	ldr	r3, [pc, #20]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012fac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8012fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012fb6:	4a02      	ldr	r2, [pc, #8]	@ (8012fc0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012fb8:	430b      	orrs	r3, r1
 8012fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012fbc:	e006      	b.n	8012fcc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012fbe:	bf00      	nop
 8012fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012fc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8012fd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8012fda:	2300      	movs	r3, #0
 8012fdc:	667b      	str	r3, [r7, #100]	@ 0x64
 8012fde:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8012fe2:	460b      	mov	r3, r1
 8012fe4:	4313      	orrs	r3, r2
 8012fe6:	d00c      	beq.n	8013002 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012fec:	3328      	adds	r3, #40	@ 0x28
 8012fee:	2102      	movs	r1, #2
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f001 fb2d 	bl	8014650 <RCCEx_PLL3_Config>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d002      	beq.n	8013002 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8013002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801300e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013010:	2300      	movs	r3, #0
 8013012:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013014:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8013018:	460b      	mov	r3, r1
 801301a:	4313      	orrs	r3, r2
 801301c:	d036      	beq.n	801308c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801301e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013024:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013028:	d018      	beq.n	801305c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 801302a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801302e:	d811      	bhi.n	8013054 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8013030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013034:	d014      	beq.n	8013060 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8013036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801303a:	d80b      	bhi.n	8013054 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801303c:	2b00      	cmp	r3, #0
 801303e:	d011      	beq.n	8013064 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8013040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013044:	d106      	bne.n	8013054 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013046:	4bb7      	ldr	r3, [pc, #732]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801304a:	4ab6      	ldr	r2, [pc, #728]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801304c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8013052:	e008      	b.n	8013066 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013054:	2301      	movs	r3, #1
 8013056:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801305a:	e004      	b.n	8013066 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801305c:	bf00      	nop
 801305e:	e002      	b.n	8013066 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013060:	bf00      	nop
 8013062:	e000      	b.n	8013066 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8013064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013066:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801306a:	2b00      	cmp	r3, #0
 801306c:	d10a      	bne.n	8013084 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801306e:	4bad      	ldr	r3, [pc, #692]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013072:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8013076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801307a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801307c:	4aa9      	ldr	r2, [pc, #676]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801307e:	430b      	orrs	r3, r1
 8013080:	6553      	str	r3, [r2, #84]	@ 0x54
 8013082:	e003      	b.n	801308c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801308c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013094:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8013098:	653b      	str	r3, [r7, #80]	@ 0x50
 801309a:	2300      	movs	r3, #0
 801309c:	657b      	str	r3, [r7, #84]	@ 0x54
 801309e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80130a2:	460b      	mov	r3, r1
 80130a4:	4313      	orrs	r3, r2
 80130a6:	d009      	beq.n	80130bc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80130a8:	4b9e      	ldr	r3, [pc, #632]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80130ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80130b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130b6:	4a9b      	ldr	r2, [pc, #620]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130b8:	430b      	orrs	r3, r1
 80130ba:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80130bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80130c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80130ca:	2300      	movs	r3, #0
 80130cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80130ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80130d2:	460b      	mov	r3, r1
 80130d4:	4313      	orrs	r3, r2
 80130d6:	d009      	beq.n	80130ec <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80130d8:	4b92      	ldr	r3, [pc, #584]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80130dc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80130e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80130e6:	4a8f      	ldr	r2, [pc, #572]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80130e8:	430b      	orrs	r3, r1
 80130ea:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80130ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80130f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80130f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80130fa:	2300      	movs	r3, #0
 80130fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80130fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8013102:	460b      	mov	r3, r1
 8013104:	4313      	orrs	r3, r2
 8013106:	d00e      	beq.n	8013126 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013108:	4b86      	ldr	r3, [pc, #536]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801310a:	691b      	ldr	r3, [r3, #16]
 801310c:	4a85      	ldr	r2, [pc, #532]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801310e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8013112:	6113      	str	r3, [r2, #16]
 8013114:	4b83      	ldr	r3, [pc, #524]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013116:	6919      	ldr	r1, [r3, #16]
 8013118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801311c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8013120:	4a80      	ldr	r2, [pc, #512]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013122:	430b      	orrs	r3, r1
 8013124:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8013126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801312e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8013132:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013134:	2300      	movs	r3, #0
 8013136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013138:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801313c:	460b      	mov	r3, r1
 801313e:	4313      	orrs	r3, r2
 8013140:	d009      	beq.n	8013156 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013142:	4b78      	ldr	r3, [pc, #480]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013146:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801314a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801314e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013150:	4a74      	ldr	r2, [pc, #464]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013152:	430b      	orrs	r3, r1
 8013154:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8013162:	633b      	str	r3, [r7, #48]	@ 0x30
 8013164:	2300      	movs	r3, #0
 8013166:	637b      	str	r3, [r7, #52]	@ 0x34
 8013168:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801316c:	460b      	mov	r3, r1
 801316e:	4313      	orrs	r3, r2
 8013170:	d00a      	beq.n	8013188 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8013172:	4b6c      	ldr	r3, [pc, #432]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013176:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801317a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013182:	4a68      	ldr	r2, [pc, #416]	@ (8013324 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8013184:	430b      	orrs	r3, r1
 8013186:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8013188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013190:	2100      	movs	r1, #0
 8013192:	62b9      	str	r1, [r7, #40]	@ 0x28
 8013194:	f003 0301 	and.w	r3, r3, #1
 8013198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801319a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801319e:	460b      	mov	r3, r1
 80131a0:	4313      	orrs	r3, r2
 80131a2:	d011      	beq.n	80131c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80131a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131a8:	3308      	adds	r3, #8
 80131aa:	2100      	movs	r1, #0
 80131ac:	4618      	mov	r0, r3
 80131ae:	f001 f99d 	bl	80144ec <RCCEx_PLL2_Config>
 80131b2:	4603      	mov	r3, r0
 80131b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80131b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d003      	beq.n	80131c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80131c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80131c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80131c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d0:	2100      	movs	r1, #0
 80131d2:	6239      	str	r1, [r7, #32]
 80131d4:	f003 0302 	and.w	r3, r3, #2
 80131d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80131da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80131de:	460b      	mov	r3, r1
 80131e0:	4313      	orrs	r3, r2
 80131e2:	d011      	beq.n	8013208 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80131e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80131e8:	3308      	adds	r3, #8
 80131ea:	2101      	movs	r1, #1
 80131ec:	4618      	mov	r0, r3
 80131ee:	f001 f97d 	bl	80144ec <RCCEx_PLL2_Config>
 80131f2:	4603      	mov	r3, r0
 80131f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80131f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d003      	beq.n	8013208 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013200:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013204:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8013208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013210:	2100      	movs	r1, #0
 8013212:	61b9      	str	r1, [r7, #24]
 8013214:	f003 0304 	and.w	r3, r3, #4
 8013218:	61fb      	str	r3, [r7, #28]
 801321a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801321e:	460b      	mov	r3, r1
 8013220:	4313      	orrs	r3, r2
 8013222:	d011      	beq.n	8013248 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8013224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013228:	3308      	adds	r3, #8
 801322a:	2102      	movs	r1, #2
 801322c:	4618      	mov	r0, r3
 801322e:	f001 f95d 	bl	80144ec <RCCEx_PLL2_Config>
 8013232:	4603      	mov	r3, r0
 8013234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8013238:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801323c:	2b00      	cmp	r3, #0
 801323e:	d003      	beq.n	8013248 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013240:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013244:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8013248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013250:	2100      	movs	r1, #0
 8013252:	6139      	str	r1, [r7, #16]
 8013254:	f003 0308 	and.w	r3, r3, #8
 8013258:	617b      	str	r3, [r7, #20]
 801325a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801325e:	460b      	mov	r3, r1
 8013260:	4313      	orrs	r3, r2
 8013262:	d011      	beq.n	8013288 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8013264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8013268:	3328      	adds	r3, #40	@ 0x28
 801326a:	2100      	movs	r1, #0
 801326c:	4618      	mov	r0, r3
 801326e:	f001 f9ef 	bl	8014650 <RCCEx_PLL3_Config>
 8013272:	4603      	mov	r3, r0
 8013274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8013278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801327c:	2b00      	cmp	r3, #0
 801327e:	d003      	beq.n	8013288 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013284:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8013288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013290:	2100      	movs	r1, #0
 8013292:	60b9      	str	r1, [r7, #8]
 8013294:	f003 0310 	and.w	r3, r3, #16
 8013298:	60fb      	str	r3, [r7, #12]
 801329a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801329e:	460b      	mov	r3, r1
 80132a0:	4313      	orrs	r3, r2
 80132a2:	d011      	beq.n	80132c8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80132a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132a8:	3328      	adds	r3, #40	@ 0x28
 80132aa:	2101      	movs	r1, #1
 80132ac:	4618      	mov	r0, r3
 80132ae:	f001 f9cf 	bl	8014650 <RCCEx_PLL3_Config>
 80132b2:	4603      	mov	r3, r0
 80132b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80132b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d003      	beq.n	80132c8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80132c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d0:	2100      	movs	r1, #0
 80132d2:	6039      	str	r1, [r7, #0]
 80132d4:	f003 0320 	and.w	r3, r3, #32
 80132d8:	607b      	str	r3, [r7, #4]
 80132da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80132de:	460b      	mov	r3, r1
 80132e0:	4313      	orrs	r3, r2
 80132e2:	d011      	beq.n	8013308 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80132e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80132e8:	3328      	adds	r3, #40	@ 0x28
 80132ea:	2102      	movs	r1, #2
 80132ec:	4618      	mov	r0, r3
 80132ee:	f001 f9af 	bl	8014650 <RCCEx_PLL3_Config>
 80132f2:	4603      	mov	r3, r0
 80132f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80132f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d003      	beq.n	8013308 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8013304:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8013308:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 801330c:	2b00      	cmp	r3, #0
 801330e:	d101      	bne.n	8013314 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8013310:	2300      	movs	r3, #0
 8013312:	e000      	b.n	8013316 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8013314:	2301      	movs	r3, #1
}
 8013316:	4618      	mov	r0, r3
 8013318:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801331c:	46bd      	mov	sp, r7
 801331e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013322:	bf00      	nop
 8013324:	58024400 	.word	0x58024400

08013328 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b090      	sub	sp, #64	@ 0x40
 801332c:	af00      	add	r7, sp, #0
 801332e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8013332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013336:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801333a:	430b      	orrs	r3, r1
 801333c:	f040 8094 	bne.w	8013468 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8013340:	4b9b      	ldr	r3, [pc, #620]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013344:	f003 0307 	and.w	r3, r3, #7
 8013348:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801334a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801334c:	2b04      	cmp	r3, #4
 801334e:	f200 8087 	bhi.w	8013460 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8013352:	a201      	add	r2, pc, #4	@ (adr r2, 8013358 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8013354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013358:	0801336d 	.word	0x0801336d
 801335c:	08013395 	.word	0x08013395
 8013360:	080133bd 	.word	0x080133bd
 8013364:	08013459 	.word	0x08013459
 8013368:	080133e5 	.word	0x080133e5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801336c:	4b90      	ldr	r3, [pc, #576]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013374:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013378:	d108      	bne.n	801338c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801337a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801337e:	4618      	mov	r0, r3
 8013380:	f000 ff62 	bl	8014248 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013388:	f000 bc93 	b.w	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801338c:	2300      	movs	r3, #0
 801338e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013390:	f000 bc8f 	b.w	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013394:	4b86      	ldr	r3, [pc, #536]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801339c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80133a0:	d108      	bne.n	80133b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80133a2:	f107 0318 	add.w	r3, r7, #24
 80133a6:	4618      	mov	r0, r3
 80133a8:	f000 fca6 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80133ac:	69bb      	ldr	r3, [r7, #24]
 80133ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133b0:	f000 bc7f 	b.w	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133b4:	2300      	movs	r3, #0
 80133b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133b8:	f000 bc7b 	b.w	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80133bc:	4b7c      	ldr	r3, [pc, #496]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80133c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80133c8:	d108      	bne.n	80133dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80133ca:	f107 030c 	add.w	r3, r7, #12
 80133ce:	4618      	mov	r0, r3
 80133d0:	f000 fde6 	bl	8013fa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80133d8:	f000 bc6b 	b.w	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80133dc:	2300      	movs	r3, #0
 80133de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80133e0:	f000 bc67 	b.w	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80133e4:	4b72      	ldr	r3, [pc, #456]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80133e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80133ec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80133ee:	4b70      	ldr	r3, [pc, #448]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	f003 0304 	and.w	r3, r3, #4
 80133f6:	2b04      	cmp	r3, #4
 80133f8:	d10c      	bne.n	8013414 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80133fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d109      	bne.n	8013414 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013400:	4b6b      	ldr	r3, [pc, #428]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	08db      	lsrs	r3, r3, #3
 8013406:	f003 0303 	and.w	r3, r3, #3
 801340a:	4a6a      	ldr	r2, [pc, #424]	@ (80135b4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801340c:	fa22 f303 	lsr.w	r3, r2, r3
 8013410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013412:	e01f      	b.n	8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013414:	4b66      	ldr	r3, [pc, #408]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801341c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013420:	d106      	bne.n	8013430 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8013422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013428:	d102      	bne.n	8013430 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801342a:	4b63      	ldr	r3, [pc, #396]	@ (80135b8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801342c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801342e:	e011      	b.n	8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013430:	4b5f      	ldr	r3, [pc, #380]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801343c:	d106      	bne.n	801344c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801343e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013440:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013444:	d102      	bne.n	801344c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013446:	4b5d      	ldr	r3, [pc, #372]	@ (80135bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801344a:	e003      	b.n	8013454 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801344c:	2300      	movs	r3, #0
 801344e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013450:	f000 bc2f 	b.w	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013454:	f000 bc2d 	b.w	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013458:	4b59      	ldr	r3, [pc, #356]	@ (80135c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801345a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801345c:	f000 bc29 	b.w	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013460:	2300      	movs	r3, #0
 8013462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013464:	f000 bc25 	b.w	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013468:	e9d7 2300 	ldrd	r2, r3, [r7]
 801346c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8013470:	430b      	orrs	r3, r1
 8013472:	f040 80a7 	bne.w	80135c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8013476:	4b4e      	ldr	r3, [pc, #312]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801347a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801347e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013482:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013486:	d054      	beq.n	8013532 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8013488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801348a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801348e:	f200 808b 	bhi.w	80135a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8013492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013494:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013498:	f000 8083 	beq.w	80135a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801349c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801349e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80134a2:	f200 8081 	bhi.w	80135a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80134a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80134ac:	d02f      	beq.n	801350e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80134ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80134b4:	d878      	bhi.n	80135a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80134b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d004      	beq.n	80134c6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80134bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80134c2:	d012      	beq.n	80134ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80134c4:	e070      	b.n	80135a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80134c6:	4b3a      	ldr	r3, [pc, #232]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80134ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80134d2:	d107      	bne.n	80134e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80134d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80134d8:	4618      	mov	r0, r3
 80134da:	f000 feb5 	bl	8014248 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80134de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80134e2:	e3e6      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80134e4:	2300      	movs	r3, #0
 80134e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134e8:	e3e3      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80134ea:	4b31      	ldr	r3, [pc, #196]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80134f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80134f6:	d107      	bne.n	8013508 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80134f8:	f107 0318 	add.w	r3, r7, #24
 80134fc:	4618      	mov	r0, r3
 80134fe:	f000 fbfb 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013502:	69bb      	ldr	r3, [r7, #24]
 8013504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013506:	e3d4      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013508:	2300      	movs	r3, #0
 801350a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801350c:	e3d1      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801350e:	4b28      	ldr	r3, [pc, #160]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801351a:	d107      	bne.n	801352c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801351c:	f107 030c 	add.w	r3, r7, #12
 8013520:	4618      	mov	r0, r3
 8013522:	f000 fd3d 	bl	8013fa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801352a:	e3c2      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801352c:	2300      	movs	r3, #0
 801352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013530:	e3bf      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013532:	4b1f      	ldr	r3, [pc, #124]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013536:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801353a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801353c:	4b1c      	ldr	r3, [pc, #112]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	f003 0304 	and.w	r3, r3, #4
 8013544:	2b04      	cmp	r3, #4
 8013546:	d10c      	bne.n	8013562 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8013548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801354a:	2b00      	cmp	r3, #0
 801354c:	d109      	bne.n	8013562 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801354e:	4b18      	ldr	r3, [pc, #96]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	08db      	lsrs	r3, r3, #3
 8013554:	f003 0303 	and.w	r3, r3, #3
 8013558:	4a16      	ldr	r2, [pc, #88]	@ (80135b4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801355a:	fa22 f303 	lsr.w	r3, r2, r3
 801355e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013560:	e01e      	b.n	80135a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013562:	4b13      	ldr	r3, [pc, #76]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801356a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801356e:	d106      	bne.n	801357e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8013570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013576:	d102      	bne.n	801357e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013578:	4b0f      	ldr	r3, [pc, #60]	@ (80135b8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801357a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801357c:	e010      	b.n	80135a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801357e:	4b0c      	ldr	r3, [pc, #48]	@ (80135b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013586:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801358a:	d106      	bne.n	801359a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801358c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801358e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013592:	d102      	bne.n	801359a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013594:	4b09      	ldr	r3, [pc, #36]	@ (80135bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013598:	e002      	b.n	80135a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801359a:	2300      	movs	r3, #0
 801359c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801359e:	e388      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135a0:	e387      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80135a2:	4b07      	ldr	r3, [pc, #28]	@ (80135c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80135a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135a6:	e384      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80135a8:	2300      	movs	r3, #0
 80135aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80135ac:	e381      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80135ae:	bf00      	nop
 80135b0:	58024400 	.word	0x58024400
 80135b4:	03d09000 	.word	0x03d09000
 80135b8:	003d0900 	.word	0x003d0900
 80135bc:	016e3600 	.word	0x016e3600
 80135c0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80135c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135c8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80135cc:	430b      	orrs	r3, r1
 80135ce:	f040 809c 	bne.w	801370a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80135d2:	4b9e      	ldr	r3, [pc, #632]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80135d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80135d6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80135da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80135dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80135e2:	d054      	beq.n	801368e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80135e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80135ea:	f200 808b 	bhi.w	8013704 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80135ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80135f4:	f000 8083 	beq.w	80136fe <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80135f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80135fe:	f200 8081 	bhi.w	8013704 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8013602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013604:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013608:	d02f      	beq.n	801366a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801360c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013610:	d878      	bhi.n	8013704 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8013612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013614:	2b00      	cmp	r3, #0
 8013616:	d004      	beq.n	8013622 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8013618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801361a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801361e:	d012      	beq.n	8013646 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8013620:	e070      	b.n	8013704 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013622:	4b8a      	ldr	r3, [pc, #552]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801362a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801362e:	d107      	bne.n	8013640 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013630:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013634:	4618      	mov	r0, r3
 8013636:	f000 fe07 	bl	8014248 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801363c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801363e:	e338      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013640:	2300      	movs	r3, #0
 8013642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013644:	e335      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013646:	4b81      	ldr	r3, [pc, #516]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801364e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013652:	d107      	bne.n	8013664 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013654:	f107 0318 	add.w	r3, r7, #24
 8013658:	4618      	mov	r0, r3
 801365a:	f000 fb4d 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801365e:	69bb      	ldr	r3, [r7, #24]
 8013660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013662:	e326      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013664:	2300      	movs	r3, #0
 8013666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013668:	e323      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801366a:	4b78      	ldr	r3, [pc, #480]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013676:	d107      	bne.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013678:	f107 030c 	add.w	r3, r7, #12
 801367c:	4618      	mov	r0, r3
 801367e:	f000 fc8f 	bl	8013fa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013686:	e314      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013688:	2300      	movs	r3, #0
 801368a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801368c:	e311      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801368e:	4b6f      	ldr	r3, [pc, #444]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013692:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013696:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013698:	4b6c      	ldr	r3, [pc, #432]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	f003 0304 	and.w	r3, r3, #4
 80136a0:	2b04      	cmp	r3, #4
 80136a2:	d10c      	bne.n	80136be <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80136a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d109      	bne.n	80136be <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80136aa:	4b68      	ldr	r3, [pc, #416]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	08db      	lsrs	r3, r3, #3
 80136b0:	f003 0303 	and.w	r3, r3, #3
 80136b4:	4a66      	ldr	r2, [pc, #408]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80136b6:	fa22 f303 	lsr.w	r3, r2, r3
 80136ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136bc:	e01e      	b.n	80136fc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80136be:	4b63      	ldr	r3, [pc, #396]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80136c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80136ca:	d106      	bne.n	80136da <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80136cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80136d2:	d102      	bne.n	80136da <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80136d4:	4b5f      	ldr	r3, [pc, #380]	@ (8013854 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80136d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136d8:	e010      	b.n	80136fc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80136da:	4b5c      	ldr	r3, [pc, #368]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80136e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80136e6:	d106      	bne.n	80136f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80136e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80136ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80136ee:	d102      	bne.n	80136f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80136f0:	4b59      	ldr	r3, [pc, #356]	@ (8013858 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80136f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136f4:	e002      	b.n	80136fc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80136f6:	2300      	movs	r3, #0
 80136f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80136fa:	e2da      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80136fc:	e2d9      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80136fe:	4b57      	ldr	r3, [pc, #348]	@ (801385c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013702:	e2d6      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013704:	2300      	movs	r3, #0
 8013706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013708:	e2d3      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801370a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801370e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8013712:	430b      	orrs	r3, r1
 8013714:	f040 80a7 	bne.w	8013866 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8013718:	4b4c      	ldr	r3, [pc, #304]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801371a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801371c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8013720:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013728:	d055      	beq.n	80137d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801372a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801372c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013730:	f200 8096 	bhi.w	8013860 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013736:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801373a:	f000 8084 	beq.w	8013846 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801373e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013740:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013744:	f200 808c 	bhi.w	8013860 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8013748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801374a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801374e:	d030      	beq.n	80137b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8013750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013756:	f200 8083 	bhi.w	8013860 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801375a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801375c:	2b00      	cmp	r3, #0
 801375e:	d004      	beq.n	801376a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8013760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013766:	d012      	beq.n	801378e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8013768:	e07a      	b.n	8013860 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801376a:	4b38      	ldr	r3, [pc, #224]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013772:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013776:	d107      	bne.n	8013788 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801377c:	4618      	mov	r0, r3
 801377e:	f000 fd63 	bl	8014248 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013786:	e294      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013788:	2300      	movs	r3, #0
 801378a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801378c:	e291      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801378e:	4b2f      	ldr	r3, [pc, #188]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013796:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801379a:	d107      	bne.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801379c:	f107 0318 	add.w	r3, r7, #24
 80137a0:	4618      	mov	r0, r3
 80137a2:	f000 faa9 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80137a6:	69bb      	ldr	r3, [r7, #24]
 80137a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137aa:	e282      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137ac:	2300      	movs	r3, #0
 80137ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137b0:	e27f      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80137b2:	4b26      	ldr	r3, [pc, #152]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80137ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80137be:	d107      	bne.n	80137d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80137c0:	f107 030c 	add.w	r3, r7, #12
 80137c4:	4618      	mov	r0, r3
 80137c6:	f000 fbeb 	bl	8013fa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80137ce:	e270      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80137d0:	2300      	movs	r3, #0
 80137d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80137d4:	e26d      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80137d6:	4b1d      	ldr	r3, [pc, #116]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80137da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80137de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80137e0:	4b1a      	ldr	r3, [pc, #104]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	f003 0304 	and.w	r3, r3, #4
 80137e8:	2b04      	cmp	r3, #4
 80137ea:	d10c      	bne.n	8013806 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80137ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d109      	bne.n	8013806 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80137f2:	4b16      	ldr	r3, [pc, #88]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	08db      	lsrs	r3, r3, #3
 80137f8:	f003 0303 	and.w	r3, r3, #3
 80137fc:	4a14      	ldr	r2, [pc, #80]	@ (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80137fe:	fa22 f303 	lsr.w	r3, r2, r3
 8013802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013804:	e01e      	b.n	8013844 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013806:	4b11      	ldr	r3, [pc, #68]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801380e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013812:	d106      	bne.n	8013822 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8013814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013816:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801381a:	d102      	bne.n	8013822 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801381c:	4b0d      	ldr	r3, [pc, #52]	@ (8013854 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801381e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013820:	e010      	b.n	8013844 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013822:	4b0a      	ldr	r3, [pc, #40]	@ (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801382a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801382e:	d106      	bne.n	801383e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8013830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013836:	d102      	bne.n	801383e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013838:	4b07      	ldr	r3, [pc, #28]	@ (8013858 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801383a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801383c:	e002      	b.n	8013844 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801383e:	2300      	movs	r3, #0
 8013840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013842:	e236      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013844:	e235      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013846:	4b05      	ldr	r3, [pc, #20]	@ (801385c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801384a:	e232      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801384c:	58024400 	.word	0x58024400
 8013850:	03d09000 	.word	0x03d09000
 8013854:	003d0900 	.word	0x003d0900
 8013858:	016e3600 	.word	0x016e3600
 801385c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8013860:	2300      	movs	r3, #0
 8013862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013864:	e225      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8013866:	e9d7 2300 	ldrd	r2, r3, [r7]
 801386a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801386e:	430b      	orrs	r3, r1
 8013870:	f040 8085 	bne.w	801397e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8013874:	4b9c      	ldr	r3, [pc, #624]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013878:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801387c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013884:	d06b      	beq.n	801395e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8013886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013888:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801388c:	d874      	bhi.n	8013978 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801388e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013890:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013894:	d056      	beq.n	8013944 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8013896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013898:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801389c:	d86c      	bhi.n	8013978 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801389e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80138a4:	d03b      	beq.n	801391e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80138a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80138ac:	d864      	bhi.n	8013978 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80138ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80138b4:	d021      	beq.n	80138fa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80138b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80138bc:	d85c      	bhi.n	8013978 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80138be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d004      	beq.n	80138ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80138c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80138ca:	d004      	beq.n	80138d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80138cc:	e054      	b.n	8013978 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80138ce:	f7fe fb5f 	bl	8011f90 <HAL_RCC_GetPCLK1Freq>
 80138d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80138d4:	e1ed      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80138d6:	4b84      	ldr	r3, [pc, #528]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80138de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80138e2:	d107      	bne.n	80138f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80138e4:	f107 0318 	add.w	r3, r7, #24
 80138e8:	4618      	mov	r0, r3
 80138ea:	f000 fa05 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80138ee:	69fb      	ldr	r3, [r7, #28]
 80138f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80138f2:	e1de      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80138f4:	2300      	movs	r3, #0
 80138f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80138f8:	e1db      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80138fa:	4b7b      	ldr	r3, [pc, #492]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013906:	d107      	bne.n	8013918 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013908:	f107 030c 	add.w	r3, r7, #12
 801390c:	4618      	mov	r0, r3
 801390e:	f000 fb47 	bl	8013fa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013916:	e1cc      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013918:	2300      	movs	r3, #0
 801391a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801391c:	e1c9      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801391e:	4b72      	ldr	r3, [pc, #456]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f003 0304 	and.w	r3, r3, #4
 8013926:	2b04      	cmp	r3, #4
 8013928:	d109      	bne.n	801393e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801392a:	4b6f      	ldr	r3, [pc, #444]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	08db      	lsrs	r3, r3, #3
 8013930:	f003 0303 	and.w	r3, r3, #3
 8013934:	4a6d      	ldr	r2, [pc, #436]	@ (8013aec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013936:	fa22 f303 	lsr.w	r3, r2, r3
 801393a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801393c:	e1b9      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801393e:	2300      	movs	r3, #0
 8013940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013942:	e1b6      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013944:	4b68      	ldr	r3, [pc, #416]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801394c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013950:	d102      	bne.n	8013958 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8013952:	4b67      	ldr	r3, [pc, #412]	@ (8013af0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013956:	e1ac      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013958:	2300      	movs	r3, #0
 801395a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801395c:	e1a9      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801395e:	4b62      	ldr	r3, [pc, #392]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801396a:	d102      	bne.n	8013972 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801396c:	4b61      	ldr	r3, [pc, #388]	@ (8013af4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801396e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013970:	e19f      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013972:	2300      	movs	r3, #0
 8013974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013976:	e19c      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013978:	2300      	movs	r3, #0
 801397a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801397c:	e199      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801397e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013982:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8013986:	430b      	orrs	r3, r1
 8013988:	d173      	bne.n	8013a72 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801398a:	4b57      	ldr	r3, [pc, #348]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801398e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013992:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801399a:	d02f      	beq.n	80139fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 801399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801399e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80139a2:	d863      	bhi.n	8013a6c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80139a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d004      	beq.n	80139b4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80139aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80139b0:	d012      	beq.n	80139d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80139b2:	e05b      	b.n	8013a6c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80139b4:	4b4c      	ldr	r3, [pc, #304]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80139bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80139c0:	d107      	bne.n	80139d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80139c2:	f107 0318 	add.w	r3, r7, #24
 80139c6:	4618      	mov	r0, r3
 80139c8:	f000 f996 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80139cc:	69bb      	ldr	r3, [r7, #24]
 80139ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139d0:	e16f      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139d2:	2300      	movs	r3, #0
 80139d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139d6:	e16c      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80139d8:	4b43      	ldr	r3, [pc, #268]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80139e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80139e4:	d107      	bne.n	80139f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80139e6:	f107 030c 	add.w	r3, r7, #12
 80139ea:	4618      	mov	r0, r3
 80139ec:	f000 fad8 	bl	8013fa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80139f4:	e15d      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80139f6:	2300      	movs	r3, #0
 80139f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139fa:	e15a      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80139fc:	4b3a      	ldr	r3, [pc, #232]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80139fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013a04:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013a06:	4b38      	ldr	r3, [pc, #224]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	f003 0304 	and.w	r3, r3, #4
 8013a0e:	2b04      	cmp	r3, #4
 8013a10:	d10c      	bne.n	8013a2c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8013a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d109      	bne.n	8013a2c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013a18:	4b33      	ldr	r3, [pc, #204]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	08db      	lsrs	r3, r3, #3
 8013a1e:	f003 0303 	and.w	r3, r3, #3
 8013a22:	4a32      	ldr	r2, [pc, #200]	@ (8013aec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8013a24:	fa22 f303 	lsr.w	r3, r2, r3
 8013a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a2a:	e01e      	b.n	8013a6a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a38:	d106      	bne.n	8013a48 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8013a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013a40:	d102      	bne.n	8013a48 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013a42:	4b2b      	ldr	r3, [pc, #172]	@ (8013af0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8013a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a46:	e010      	b.n	8013a6a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013a48:	4b27      	ldr	r3, [pc, #156]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013a50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013a54:	d106      	bne.n	8013a64 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8013a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a5c:	d102      	bne.n	8013a64 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013a5e:	4b25      	ldr	r3, [pc, #148]	@ (8013af4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8013a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a62:	e002      	b.n	8013a6a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013a64:	2300      	movs	r3, #0
 8013a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013a68:	e123      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013a6a:	e122      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a70:	e11f      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a76:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8013a7a:	430b      	orrs	r3, r1
 8013a7c:	d13c      	bne.n	8013af8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8013a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013a86:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d004      	beq.n	8013a98 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8013a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013a94:	d012      	beq.n	8013abc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013a96:	e023      	b.n	8013ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013a98:	4b13      	ldr	r3, [pc, #76]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013aa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013aa4:	d107      	bne.n	8013ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f000 fbcc 	bl	8014248 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ab4:	e0fd      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013aba:	e0fa      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013abc:	4b0a      	ldr	r3, [pc, #40]	@ (8013ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013ac4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013ac8:	d107      	bne.n	8013ada <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013aca:	f107 0318 	add.w	r3, r7, #24
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f000 f912 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013ad4:	6a3b      	ldr	r3, [r7, #32]
 8013ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ad8:	e0eb      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ada:	2300      	movs	r3, #0
 8013adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ade:	e0e8      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ae4:	e0e5      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013ae6:	bf00      	nop
 8013ae8:	58024400 	.word	0x58024400
 8013aec:	03d09000 	.word	0x03d09000
 8013af0:	003d0900 	.word	0x003d0900
 8013af4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013afc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8013b00:	430b      	orrs	r3, r1
 8013b02:	f040 8085 	bne.w	8013c10 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8013b06:	4b6d      	ldr	r3, [pc, #436]	@ (8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013b0a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8013b0e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013b16:	d06b      	beq.n	8013bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013b1e:	d874      	bhi.n	8013c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b26:	d056      	beq.n	8013bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8013b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b2e:	d86c      	bhi.n	8013c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013b36:	d03b      	beq.n	8013bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8013b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013b3e:	d864      	bhi.n	8013c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b46:	d021      	beq.n	8013b8c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8013b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b4e:	d85c      	bhi.n	8013c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8013b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d004      	beq.n	8013b60 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8013b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b5c:	d004      	beq.n	8013b68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8013b5e:	e054      	b.n	8013c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013b60:	f000 f8b4 	bl	8013ccc <HAL_RCCEx_GetD3PCLK1Freq>
 8013b64:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013b66:	e0a4      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013b68:	4b54      	ldr	r3, [pc, #336]	@ (8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013b70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013b74:	d107      	bne.n	8013b86 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013b76:	f107 0318 	add.w	r3, r7, #24
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f000 f8bc 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013b80:	69fb      	ldr	r3, [r7, #28]
 8013b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013b84:	e095      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013b86:	2300      	movs	r3, #0
 8013b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b8a:	e092      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b98:	d107      	bne.n	8013baa <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013b9a:	f107 030c 	add.w	r3, r7, #12
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f000 f9fe 	bl	8013fa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ba8:	e083      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013baa:	2300      	movs	r3, #0
 8013bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bae:	e080      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013bb0:	4b42      	ldr	r3, [pc, #264]	@ (8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	f003 0304 	and.w	r3, r3, #4
 8013bb8:	2b04      	cmp	r3, #4
 8013bba:	d109      	bne.n	8013bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	08db      	lsrs	r3, r3, #3
 8013bc2:	f003 0303 	and.w	r3, r3, #3
 8013bc6:	4a3e      	ldr	r2, [pc, #248]	@ (8013cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8013bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013bce:	e070      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bd4:	e06d      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013bd6:	4b39      	ldr	r3, [pc, #228]	@ (8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013be2:	d102      	bne.n	8013bea <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013be4:	4b37      	ldr	r3, [pc, #220]	@ (8013cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013be8:	e063      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013bea:	2300      	movs	r3, #0
 8013bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bee:	e060      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013bf0:	4b32      	ldr	r3, [pc, #200]	@ (8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013bfc:	d102      	bne.n	8013c04 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8013bfe:	4b32      	ldr	r3, [pc, #200]	@ (8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c02:	e056      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c04:	2300      	movs	r3, #0
 8013c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c08:	e053      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c0e:	e050      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8013c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c14:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013c18:	430b      	orrs	r3, r1
 8013c1a:	d148      	bne.n	8013cae <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8013c1c:	4b27      	ldr	r3, [pc, #156]	@ (8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013c20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013c24:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c2c:	d02a      	beq.n	8013c84 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8013c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c34:	d838      	bhi.n	8013ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8013c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d004      	beq.n	8013c46 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8013c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c42:	d00d      	beq.n	8013c60 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8013c44:	e030      	b.n	8013ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8013c46:	4b1d      	ldr	r3, [pc, #116]	@ (8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013c52:	d102      	bne.n	8013c5a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8013c54:	4b1c      	ldr	r3, [pc, #112]	@ (8013cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8013c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c58:	e02b      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c5e:	e028      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013c60:	4b16      	ldr	r3, [pc, #88]	@ (8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013c68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013c6c:	d107      	bne.n	8013c7e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013c72:	4618      	mov	r0, r3
 8013c74:	f000 fae8 	bl	8014248 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c7c:	e019      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c82:	e016      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013c84:	4b0d      	ldr	r3, [pc, #52]	@ (8013cbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013c8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013c90:	d107      	bne.n	8013ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013c92:	f107 0318 	add.w	r3, r7, #24
 8013c96:	4618      	mov	r0, r3
 8013c98:	f000 f82e 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013c9c:	69fb      	ldr	r3, [r7, #28]
 8013c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013ca0:	e007      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013ca6:	e004      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013cac:	e001      	b.n	8013cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8013cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	3740      	adds	r7, #64	@ 0x40
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}
 8013cbc:	58024400 	.word	0x58024400
 8013cc0:	03d09000 	.word	0x03d09000
 8013cc4:	003d0900 	.word	0x003d0900
 8013cc8:	016e3600 	.word	0x016e3600

08013ccc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013cd0:	f7fe f92e 	bl	8011f30 <HAL_RCC_GetHCLKFreq>
 8013cd4:	4602      	mov	r2, r0
 8013cd6:	4b06      	ldr	r3, [pc, #24]	@ (8013cf0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013cd8:	6a1b      	ldr	r3, [r3, #32]
 8013cda:	091b      	lsrs	r3, r3, #4
 8013cdc:	f003 0307 	and.w	r3, r3, #7
 8013ce0:	4904      	ldr	r1, [pc, #16]	@ (8013cf4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013ce2:	5ccb      	ldrb	r3, [r1, r3]
 8013ce4:	f003 031f 	and.w	r3, r3, #31
 8013ce8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	bd80      	pop	{r7, pc}
 8013cf0:	58024400 	.word	0x58024400
 8013cf4:	0801eb2c 	.word	0x0801eb2c

08013cf8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013cf8:	b480      	push	{r7}
 8013cfa:	b089      	sub	sp, #36	@ 0x24
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013d00:	4ba1      	ldr	r3, [pc, #644]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d04:	f003 0303 	and.w	r3, r3, #3
 8013d08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013d0a:	4b9f      	ldr	r3, [pc, #636]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d0e:	0b1b      	lsrs	r3, r3, #12
 8013d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013d14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013d16:	4b9c      	ldr	r3, [pc, #624]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d1a:	091b      	lsrs	r3, r3, #4
 8013d1c:	f003 0301 	and.w	r3, r3, #1
 8013d20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8013d22:	4b99      	ldr	r3, [pc, #612]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013d26:	08db      	lsrs	r3, r3, #3
 8013d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d2c:	693a      	ldr	r2, [r7, #16]
 8013d2e:	fb02 f303 	mul.w	r3, r2, r3
 8013d32:	ee07 3a90 	vmov	s15, r3
 8013d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	f000 8111 	beq.w	8013f68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8013d46:	69bb      	ldr	r3, [r7, #24]
 8013d48:	2b02      	cmp	r3, #2
 8013d4a:	f000 8083 	beq.w	8013e54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013d4e:	69bb      	ldr	r3, [r7, #24]
 8013d50:	2b02      	cmp	r3, #2
 8013d52:	f200 80a1 	bhi.w	8013e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8013d56:	69bb      	ldr	r3, [r7, #24]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d003      	beq.n	8013d64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013d5c:	69bb      	ldr	r3, [r7, #24]
 8013d5e:	2b01      	cmp	r3, #1
 8013d60:	d056      	beq.n	8013e10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013d62:	e099      	b.n	8013e98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013d64:	4b88      	ldr	r3, [pc, #544]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f003 0320 	and.w	r3, r3, #32
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d02d      	beq.n	8013dcc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013d70:	4b85      	ldr	r3, [pc, #532]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	08db      	lsrs	r3, r3, #3
 8013d76:	f003 0303 	and.w	r3, r3, #3
 8013d7a:	4a84      	ldr	r2, [pc, #528]	@ (8013f8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8013d80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	ee07 3a90 	vmov	s15, r3
 8013d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	ee07 3a90 	vmov	s15, r3
 8013d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d9a:	4b7b      	ldr	r3, [pc, #492]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013da2:	ee07 3a90 	vmov	s15, r3
 8013da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8013dae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013dca:	e087      	b.n	8013edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	ee07 3a90 	vmov	s15, r3
 8013dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dd6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013f94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013dde:	4b6a      	ldr	r3, [pc, #424]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013de6:	ee07 3a90 	vmov	s15, r3
 8013dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8013df2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e0e:	e065      	b.n	8013edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	ee07 3a90 	vmov	s15, r3
 8013e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e22:	4b59      	ldr	r3, [pc, #356]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e2a:	ee07 3a90 	vmov	s15, r3
 8013e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e52:	e043      	b.n	8013edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	ee07 3a90 	vmov	s15, r3
 8013e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e66:	4b48      	ldr	r3, [pc, #288]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e6e:	ee07 3a90 	vmov	s15, r3
 8013e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013e96:	e021      	b.n	8013edc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	ee07 3a90 	vmov	s15, r3
 8013e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ea2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013eaa:	4b37      	ldr	r3, [pc, #220]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013eb2:	ee07 3a90 	vmov	s15, r3
 8013eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ebe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013f90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013eda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013edc:	4b2a      	ldr	r3, [pc, #168]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ee0:	0a5b      	lsrs	r3, r3, #9
 8013ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013ee6:	ee07 3a90 	vmov	s15, r3
 8013eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013eee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8013efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f02:	ee17 2a90 	vmov	r2, s15
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f0e:	0c1b      	lsrs	r3, r3, #16
 8013f10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f14:	ee07 3a90 	vmov	s15, r3
 8013f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f24:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f30:	ee17 2a90 	vmov	r2, s15
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8013f38:	4b13      	ldr	r3, [pc, #76]	@ (8013f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f3c:	0e1b      	lsrs	r3, r3, #24
 8013f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013f42:	ee07 3a90 	vmov	s15, r3
 8013f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f5e:	ee17 2a90 	vmov	r2, s15
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013f66:	e008      	b.n	8013f7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2200      	movs	r2, #0
 8013f72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2200      	movs	r2, #0
 8013f78:	609a      	str	r2, [r3, #8]
}
 8013f7a:	bf00      	nop
 8013f7c:	3724      	adds	r7, #36	@ 0x24
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f84:	4770      	bx	lr
 8013f86:	bf00      	nop
 8013f88:	58024400 	.word	0x58024400
 8013f8c:	03d09000 	.word	0x03d09000
 8013f90:	46000000 	.word	0x46000000
 8013f94:	4c742400 	.word	0x4c742400
 8013f98:	4a742400 	.word	0x4a742400
 8013f9c:	4bb71b00 	.word	0x4bb71b00

08013fa0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013fa0:	b480      	push	{r7}
 8013fa2:	b089      	sub	sp, #36	@ 0x24
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013fa8:	4ba1      	ldr	r3, [pc, #644]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fac:	f003 0303 	and.w	r3, r3, #3
 8013fb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8013fb2:	4b9f      	ldr	r3, [pc, #636]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fb6:	0d1b      	lsrs	r3, r3, #20
 8013fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013fbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013fbe:	4b9c      	ldr	r3, [pc, #624]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fc2:	0a1b      	lsrs	r3, r3, #8
 8013fc4:	f003 0301 	and.w	r3, r3, #1
 8013fc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8013fca:	4b99      	ldr	r3, [pc, #612]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013fce:	08db      	lsrs	r3, r3, #3
 8013fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013fd4:	693a      	ldr	r2, [r7, #16]
 8013fd6:	fb02 f303 	mul.w	r3, r2, r3
 8013fda:	ee07 3a90 	vmov	s15, r3
 8013fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fe2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	f000 8111 	beq.w	8014210 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8013fee:	69bb      	ldr	r3, [r7, #24]
 8013ff0:	2b02      	cmp	r3, #2
 8013ff2:	f000 8083 	beq.w	80140fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013ff6:	69bb      	ldr	r3, [r7, #24]
 8013ff8:	2b02      	cmp	r3, #2
 8013ffa:	f200 80a1 	bhi.w	8014140 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8013ffe:	69bb      	ldr	r3, [r7, #24]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d003      	beq.n	801400c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8014004:	69bb      	ldr	r3, [r7, #24]
 8014006:	2b01      	cmp	r3, #1
 8014008:	d056      	beq.n	80140b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801400a:	e099      	b.n	8014140 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801400c:	4b88      	ldr	r3, [pc, #544]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	f003 0320 	and.w	r3, r3, #32
 8014014:	2b00      	cmp	r3, #0
 8014016:	d02d      	beq.n	8014074 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014018:	4b85      	ldr	r3, [pc, #532]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	08db      	lsrs	r3, r3, #3
 801401e:	f003 0303 	and.w	r3, r3, #3
 8014022:	4a84      	ldr	r2, [pc, #528]	@ (8014234 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8014024:	fa22 f303 	lsr.w	r3, r2, r3
 8014028:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	ee07 3a90 	vmov	s15, r3
 8014030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	ee07 3a90 	vmov	s15, r3
 801403a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801403e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014042:	4b7b      	ldr	r3, [pc, #492]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801404a:	ee07 3a90 	vmov	s15, r3
 801404e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014052:	ed97 6a03 	vldr	s12, [r7, #12]
 8014056:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801405a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801405e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801406e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8014072:	e087      	b.n	8014184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	ee07 3a90 	vmov	s15, r3
 801407a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801407e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801423c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8014082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014086:	4b6a      	ldr	r3, [pc, #424]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801408e:	ee07 3a90 	vmov	s15, r3
 8014092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014096:	ed97 6a03 	vldr	s12, [r7, #12]
 801409a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801409e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80140aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80140b6:	e065      	b.n	8014184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	ee07 3a90 	vmov	s15, r3
 80140be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80140c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140ca:	4b59      	ldr	r3, [pc, #356]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80140cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80140ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140d2:	ee07 3a90 	vmov	s15, r3
 80140d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140da:	ed97 6a03 	vldr	s12, [r7, #12]
 80140de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80140e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80140ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80140fa:	e043      	b.n	8014184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	ee07 3a90 	vmov	s15, r3
 8014102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014106:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014244 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801410a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801410e:	4b48      	ldr	r3, [pc, #288]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014116:	ee07 3a90 	vmov	s15, r3
 801411a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801411e:	ed97 6a03 	vldr	s12, [r7, #12]
 8014122:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801412a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801412e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014136:	ee67 7a27 	vmul.f32	s15, s14, s15
 801413a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801413e:	e021      	b.n	8014184 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	ee07 3a90 	vmov	s15, r3
 8014146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801414a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014240 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801414e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014152:	4b37      	ldr	r3, [pc, #220]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801415a:	ee07 3a90 	vmov	s15, r3
 801415e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014162:	ed97 6a03 	vldr	s12, [r7, #12]
 8014166:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014238 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801416a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801416e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801417a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801417e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014182:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8014184:	4b2a      	ldr	r3, [pc, #168]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014188:	0a5b      	lsrs	r3, r3, #9
 801418a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801418e:	ee07 3a90 	vmov	s15, r3
 8014192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014196:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801419a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801419e:	edd7 6a07 	vldr	s13, [r7, #28]
 80141a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141aa:	ee17 2a90 	vmov	r2, s15
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80141b2:	4b1f      	ldr	r3, [pc, #124]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141b6:	0c1b      	lsrs	r3, r3, #16
 80141b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141bc:	ee07 3a90 	vmov	s15, r3
 80141c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80141c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80141cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80141d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141d8:	ee17 2a90 	vmov	r2, s15
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80141e0:	4b13      	ldr	r3, [pc, #76]	@ (8014230 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80141e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80141e4:	0e1b      	lsrs	r3, r3, #24
 80141e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141ea:	ee07 3a90 	vmov	s15, r3
 80141ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80141f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80141fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80141fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014206:	ee17 2a90 	vmov	r2, s15
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801420e:	e008      	b.n	8014222 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2200      	movs	r2, #0
 8014214:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	2200      	movs	r2, #0
 801421a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2200      	movs	r2, #0
 8014220:	609a      	str	r2, [r3, #8]
}
 8014222:	bf00      	nop
 8014224:	3724      	adds	r7, #36	@ 0x24
 8014226:	46bd      	mov	sp, r7
 8014228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422c:	4770      	bx	lr
 801422e:	bf00      	nop
 8014230:	58024400 	.word	0x58024400
 8014234:	03d09000 	.word	0x03d09000
 8014238:	46000000 	.word	0x46000000
 801423c:	4c742400 	.word	0x4c742400
 8014240:	4a742400 	.word	0x4a742400
 8014244:	4bb71b00 	.word	0x4bb71b00

08014248 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8014248:	b480      	push	{r7}
 801424a:	b089      	sub	sp, #36	@ 0x24
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014250:	4ba0      	ldr	r3, [pc, #640]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014254:	f003 0303 	and.w	r3, r3, #3
 8014258:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801425a:	4b9e      	ldr	r3, [pc, #632]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801425e:	091b      	lsrs	r3, r3, #4
 8014260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014264:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8014266:	4b9b      	ldr	r3, [pc, #620]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801426a:	f003 0301 	and.w	r3, r3, #1
 801426e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8014270:	4b98      	ldr	r3, [pc, #608]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014274:	08db      	lsrs	r3, r3, #3
 8014276:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801427a:	693a      	ldr	r2, [r7, #16]
 801427c:	fb02 f303 	mul.w	r3, r2, r3
 8014280:	ee07 3a90 	vmov	s15, r3
 8014284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014288:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801428c:	697b      	ldr	r3, [r7, #20]
 801428e:	2b00      	cmp	r3, #0
 8014290:	f000 8111 	beq.w	80144b6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8014294:	69bb      	ldr	r3, [r7, #24]
 8014296:	2b02      	cmp	r3, #2
 8014298:	f000 8083 	beq.w	80143a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801429c:	69bb      	ldr	r3, [r7, #24]
 801429e:	2b02      	cmp	r3, #2
 80142a0:	f200 80a1 	bhi.w	80143e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80142a4:	69bb      	ldr	r3, [r7, #24]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d003      	beq.n	80142b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80142aa:	69bb      	ldr	r3, [r7, #24]
 80142ac:	2b01      	cmp	r3, #1
 80142ae:	d056      	beq.n	801435e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80142b0:	e099      	b.n	80143e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80142b2:	4b88      	ldr	r3, [pc, #544]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	f003 0320 	and.w	r3, r3, #32
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d02d      	beq.n	801431a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80142be:	4b85      	ldr	r3, [pc, #532]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	08db      	lsrs	r3, r3, #3
 80142c4:	f003 0303 	and.w	r3, r3, #3
 80142c8:	4a83      	ldr	r2, [pc, #524]	@ (80144d8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80142ca:	fa22 f303 	lsr.w	r3, r2, r3
 80142ce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	ee07 3a90 	vmov	s15, r3
 80142d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	ee07 3a90 	vmov	s15, r3
 80142e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80142e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80142e8:	4b7a      	ldr	r3, [pc, #488]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80142ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80142ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80142f0:	ee07 3a90 	vmov	s15, r3
 80142f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80142f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80142fc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80144dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014308:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801430c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014314:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8014318:	e087      	b.n	801442a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	ee07 3a90 	vmov	s15, r3
 8014320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014324:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80144e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8014328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801432c:	4b69      	ldr	r3, [pc, #420]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801432e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014334:	ee07 3a90 	vmov	s15, r3
 8014338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801433c:	ed97 6a03 	vldr	s12, [r7, #12]
 8014340:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80144dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801434c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014358:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801435c:	e065      	b.n	801442a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801435e:	697b      	ldr	r3, [r7, #20]
 8014360:	ee07 3a90 	vmov	s15, r3
 8014364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014368:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80144e4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801436c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014370:	4b58      	ldr	r3, [pc, #352]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014378:	ee07 3a90 	vmov	s15, r3
 801437c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014380:	ed97 6a03 	vldr	s12, [r7, #12]
 8014384:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80144dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014388:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801438c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014390:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014398:	ee67 7a27 	vmul.f32	s15, s14, s15
 801439c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80143a0:	e043      	b.n	801442a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	ee07 3a90 	vmov	s15, r3
 80143a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143ac:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80144e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80143b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143b4:	4b47      	ldr	r3, [pc, #284]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143bc:	ee07 3a90 	vmov	s15, r3
 80143c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80143c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80143c8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80144dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80143cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80143d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80143d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80143d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80143e4:	e021      	b.n	801442a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80143e6:	697b      	ldr	r3, [r7, #20]
 80143e8:	ee07 3a90 	vmov	s15, r3
 80143ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80143f0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80144e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80143f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80143f8:	4b36      	ldr	r3, [pc, #216]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80143fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014400:	ee07 3a90 	vmov	s15, r3
 8014404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014408:	ed97 6a03 	vldr	s12, [r7, #12]
 801440c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80144dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014418:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801441c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014424:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014428:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801442a:	4b2a      	ldr	r3, [pc, #168]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801442c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801442e:	0a5b      	lsrs	r3, r3, #9
 8014430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014434:	ee07 3a90 	vmov	s15, r3
 8014438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801443c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014440:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014444:	edd7 6a07 	vldr	s13, [r7, #28]
 8014448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801444c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014450:	ee17 2a90 	vmov	r2, s15
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8014458:	4b1e      	ldr	r3, [pc, #120]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801445a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801445c:	0c1b      	lsrs	r3, r3, #16
 801445e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014462:	ee07 3a90 	vmov	s15, r3
 8014466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801446a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801446e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014472:	edd7 6a07 	vldr	s13, [r7, #28]
 8014476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801447a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801447e:	ee17 2a90 	vmov	r2, s15
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8014486:	4b13      	ldr	r3, [pc, #76]	@ (80144d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801448a:	0e1b      	lsrs	r3, r3, #24
 801448c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014490:	ee07 3a90 	vmov	s15, r3
 8014494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014498:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801449c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80144a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80144a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80144ac:	ee17 2a90 	vmov	r2, s15
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80144b4:	e008      	b.n	80144c8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	2200      	movs	r2, #0
 80144ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2200      	movs	r2, #0
 80144c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2200      	movs	r2, #0
 80144c6:	609a      	str	r2, [r3, #8]
}
 80144c8:	bf00      	nop
 80144ca:	3724      	adds	r7, #36	@ 0x24
 80144cc:	46bd      	mov	sp, r7
 80144ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d2:	4770      	bx	lr
 80144d4:	58024400 	.word	0x58024400
 80144d8:	03d09000 	.word	0x03d09000
 80144dc:	46000000 	.word	0x46000000
 80144e0:	4c742400 	.word	0x4c742400
 80144e4:	4a742400 	.word	0x4a742400
 80144e8:	4bb71b00 	.word	0x4bb71b00

080144ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80144f6:	2300      	movs	r3, #0
 80144f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80144fa:	4b53      	ldr	r3, [pc, #332]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80144fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144fe:	f003 0303 	and.w	r3, r3, #3
 8014502:	2b03      	cmp	r3, #3
 8014504:	d101      	bne.n	801450a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8014506:	2301      	movs	r3, #1
 8014508:	e099      	b.n	801463e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801450a:	4b4f      	ldr	r3, [pc, #316]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	4a4e      	ldr	r2, [pc, #312]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 8014510:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014516:	f7f4 ffcd 	bl	80094b4 <HAL_GetTick>
 801451a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801451c:	e008      	b.n	8014530 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801451e:	f7f4 ffc9 	bl	80094b4 <HAL_GetTick>
 8014522:	4602      	mov	r2, r0
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	1ad3      	subs	r3, r2, r3
 8014528:	2b02      	cmp	r3, #2
 801452a:	d901      	bls.n	8014530 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801452c:	2303      	movs	r3, #3
 801452e:	e086      	b.n	801463e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014530:	4b45      	ldr	r3, [pc, #276]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014538:	2b00      	cmp	r3, #0
 801453a:	d1f0      	bne.n	801451e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801453c:	4b42      	ldr	r3, [pc, #264]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 801453e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014540:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	031b      	lsls	r3, r3, #12
 801454a:	493f      	ldr	r1, [pc, #252]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 801454c:	4313      	orrs	r3, r2
 801454e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	685b      	ldr	r3, [r3, #4]
 8014554:	3b01      	subs	r3, #1
 8014556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	689b      	ldr	r3, [r3, #8]
 801455e:	3b01      	subs	r3, #1
 8014560:	025b      	lsls	r3, r3, #9
 8014562:	b29b      	uxth	r3, r3
 8014564:	431a      	orrs	r2, r3
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	68db      	ldr	r3, [r3, #12]
 801456a:	3b01      	subs	r3, #1
 801456c:	041b      	lsls	r3, r3, #16
 801456e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014572:	431a      	orrs	r2, r3
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	691b      	ldr	r3, [r3, #16]
 8014578:	3b01      	subs	r3, #1
 801457a:	061b      	lsls	r3, r3, #24
 801457c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014580:	4931      	ldr	r1, [pc, #196]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 8014582:	4313      	orrs	r3, r2
 8014584:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014586:	4b30      	ldr	r3, [pc, #192]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 8014588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801458a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	695b      	ldr	r3, [r3, #20]
 8014592:	492d      	ldr	r1, [pc, #180]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 8014594:	4313      	orrs	r3, r2
 8014596:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014598:	4b2b      	ldr	r3, [pc, #172]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 801459a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801459c:	f023 0220 	bic.w	r2, r3, #32
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	699b      	ldr	r3, [r3, #24]
 80145a4:	4928      	ldr	r1, [pc, #160]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80145a6:	4313      	orrs	r3, r2
 80145a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80145aa:	4b27      	ldr	r3, [pc, #156]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80145ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ae:	4a26      	ldr	r2, [pc, #152]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80145b0:	f023 0310 	bic.w	r3, r3, #16
 80145b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80145b6:	4b24      	ldr	r3, [pc, #144]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80145b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80145ba:	4b24      	ldr	r3, [pc, #144]	@ (801464c <RCCEx_PLL2_Config+0x160>)
 80145bc:	4013      	ands	r3, r2
 80145be:	687a      	ldr	r2, [r7, #4]
 80145c0:	69d2      	ldr	r2, [r2, #28]
 80145c2:	00d2      	lsls	r2, r2, #3
 80145c4:	4920      	ldr	r1, [pc, #128]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80145c6:	4313      	orrs	r3, r2
 80145c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80145ca:	4b1f      	ldr	r3, [pc, #124]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80145cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ce:	4a1e      	ldr	r2, [pc, #120]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80145d0:	f043 0310 	orr.w	r3, r3, #16
 80145d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80145d6:	683b      	ldr	r3, [r7, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d106      	bne.n	80145ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80145dc:	4b1a      	ldr	r3, [pc, #104]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80145de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145e0:	4a19      	ldr	r2, [pc, #100]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80145e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80145e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80145e8:	e00f      	b.n	801460a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	2b01      	cmp	r3, #1
 80145ee:	d106      	bne.n	80145fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80145f0:	4b15      	ldr	r3, [pc, #84]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80145f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145f4:	4a14      	ldr	r2, [pc, #80]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 80145f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80145fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80145fc:	e005      	b.n	801460a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80145fe:	4b12      	ldr	r3, [pc, #72]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 8014600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014602:	4a11      	ldr	r2, [pc, #68]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 8014604:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014608:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801460a:	4b0f      	ldr	r3, [pc, #60]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	4a0e      	ldr	r2, [pc, #56]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 8014610:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014616:	f7f4 ff4d 	bl	80094b4 <HAL_GetTick>
 801461a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801461c:	e008      	b.n	8014630 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801461e:	f7f4 ff49 	bl	80094b4 <HAL_GetTick>
 8014622:	4602      	mov	r2, r0
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	1ad3      	subs	r3, r2, r3
 8014628:	2b02      	cmp	r3, #2
 801462a:	d901      	bls.n	8014630 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801462c:	2303      	movs	r3, #3
 801462e:	e006      	b.n	801463e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014630:	4b05      	ldr	r3, [pc, #20]	@ (8014648 <RCCEx_PLL2_Config+0x15c>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014638:	2b00      	cmp	r3, #0
 801463a:	d0f0      	beq.n	801461e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801463c:	7bfb      	ldrb	r3, [r7, #15]
}
 801463e:	4618      	mov	r0, r3
 8014640:	3710      	adds	r7, #16
 8014642:	46bd      	mov	sp, r7
 8014644:	bd80      	pop	{r7, pc}
 8014646:	bf00      	nop
 8014648:	58024400 	.word	0x58024400
 801464c:	ffff0007 	.word	0xffff0007

08014650 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
 8014658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801465a:	2300      	movs	r3, #0
 801465c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801465e:	4b53      	ldr	r3, [pc, #332]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014662:	f003 0303 	and.w	r3, r3, #3
 8014666:	2b03      	cmp	r3, #3
 8014668:	d101      	bne.n	801466e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801466a:	2301      	movs	r3, #1
 801466c:	e099      	b.n	80147a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801466e:	4b4f      	ldr	r3, [pc, #316]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	4a4e      	ldr	r2, [pc, #312]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801467a:	f7f4 ff1b 	bl	80094b4 <HAL_GetTick>
 801467e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014680:	e008      	b.n	8014694 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014682:	f7f4 ff17 	bl	80094b4 <HAL_GetTick>
 8014686:	4602      	mov	r2, r0
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	1ad3      	subs	r3, r2, r3
 801468c:	2b02      	cmp	r3, #2
 801468e:	d901      	bls.n	8014694 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014690:	2303      	movs	r3, #3
 8014692:	e086      	b.n	80147a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014694:	4b45      	ldr	r3, [pc, #276]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801469c:	2b00      	cmp	r3, #0
 801469e:	d1f0      	bne.n	8014682 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80146a0:	4b42      	ldr	r3, [pc, #264]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 80146a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	051b      	lsls	r3, r3, #20
 80146ae:	493f      	ldr	r1, [pc, #252]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 80146b0:	4313      	orrs	r3, r2
 80146b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	3b01      	subs	r3, #1
 80146ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	689b      	ldr	r3, [r3, #8]
 80146c2:	3b01      	subs	r3, #1
 80146c4:	025b      	lsls	r3, r3, #9
 80146c6:	b29b      	uxth	r3, r3
 80146c8:	431a      	orrs	r2, r3
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	68db      	ldr	r3, [r3, #12]
 80146ce:	3b01      	subs	r3, #1
 80146d0:	041b      	lsls	r3, r3, #16
 80146d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80146d6:	431a      	orrs	r2, r3
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	691b      	ldr	r3, [r3, #16]
 80146dc:	3b01      	subs	r3, #1
 80146de:	061b      	lsls	r3, r3, #24
 80146e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80146e4:	4931      	ldr	r1, [pc, #196]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 80146e6:	4313      	orrs	r3, r2
 80146e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80146ea:	4b30      	ldr	r3, [pc, #192]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 80146ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	695b      	ldr	r3, [r3, #20]
 80146f6:	492d      	ldr	r1, [pc, #180]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 80146f8:	4313      	orrs	r3, r2
 80146fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80146fc:	4b2b      	ldr	r3, [pc, #172]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 80146fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014700:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	699b      	ldr	r3, [r3, #24]
 8014708:	4928      	ldr	r1, [pc, #160]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 801470a:	4313      	orrs	r3, r2
 801470c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801470e:	4b27      	ldr	r3, [pc, #156]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014712:	4a26      	ldr	r2, [pc, #152]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014718:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801471a:	4b24      	ldr	r3, [pc, #144]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 801471c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801471e:	4b24      	ldr	r3, [pc, #144]	@ (80147b0 <RCCEx_PLL3_Config+0x160>)
 8014720:	4013      	ands	r3, r2
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	69d2      	ldr	r2, [r2, #28]
 8014726:	00d2      	lsls	r2, r2, #3
 8014728:	4920      	ldr	r1, [pc, #128]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 801472a:	4313      	orrs	r3, r2
 801472c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801472e:	4b1f      	ldr	r3, [pc, #124]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014732:	4a1e      	ldr	r2, [pc, #120]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014738:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d106      	bne.n	801474e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014740:	4b1a      	ldr	r3, [pc, #104]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014744:	4a19      	ldr	r2, [pc, #100]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014746:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801474a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801474c:	e00f      	b.n	801476e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	2b01      	cmp	r3, #1
 8014752:	d106      	bne.n	8014762 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014754:	4b15      	ldr	r3, [pc, #84]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014758:	4a14      	ldr	r2, [pc, #80]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 801475a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801475e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014760:	e005      	b.n	801476e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014762:	4b12      	ldr	r3, [pc, #72]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014766:	4a11      	ldr	r2, [pc, #68]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014768:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801476c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801476e:	4b0f      	ldr	r3, [pc, #60]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	4a0e      	ldr	r2, [pc, #56]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801477a:	f7f4 fe9b 	bl	80094b4 <HAL_GetTick>
 801477e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014780:	e008      	b.n	8014794 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014782:	f7f4 fe97 	bl	80094b4 <HAL_GetTick>
 8014786:	4602      	mov	r2, r0
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	1ad3      	subs	r3, r2, r3
 801478c:	2b02      	cmp	r3, #2
 801478e:	d901      	bls.n	8014794 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014790:	2303      	movs	r3, #3
 8014792:	e006      	b.n	80147a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014794:	4b05      	ldr	r3, [pc, #20]	@ (80147ac <RCCEx_PLL3_Config+0x15c>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801479c:	2b00      	cmp	r3, #0
 801479e:	d0f0      	beq.n	8014782 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80147a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80147a2:	4618      	mov	r0, r3
 80147a4:	3710      	adds	r7, #16
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}
 80147aa:	bf00      	nop
 80147ac:	58024400 	.word	0x58024400
 80147b0:	ffff0007 	.word	0xffff0007

080147b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b084      	sub	sp, #16
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d101      	bne.n	80147c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80147c2:	2301      	movs	r3, #1
 80147c4:	e10f      	b.n	80149e6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2200      	movs	r2, #0
 80147ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	4a87      	ldr	r2, [pc, #540]	@ (80149f0 <HAL_SPI_Init+0x23c>)
 80147d2:	4293      	cmp	r3, r2
 80147d4:	d00f      	beq.n	80147f6 <HAL_SPI_Init+0x42>
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	4a86      	ldr	r2, [pc, #536]	@ (80149f4 <HAL_SPI_Init+0x240>)
 80147dc:	4293      	cmp	r3, r2
 80147de:	d00a      	beq.n	80147f6 <HAL_SPI_Init+0x42>
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	4a84      	ldr	r2, [pc, #528]	@ (80149f8 <HAL_SPI_Init+0x244>)
 80147e6:	4293      	cmp	r3, r2
 80147e8:	d005      	beq.n	80147f6 <HAL_SPI_Init+0x42>
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	68db      	ldr	r3, [r3, #12]
 80147ee:	2b0f      	cmp	r3, #15
 80147f0:	d901      	bls.n	80147f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80147f2:	2301      	movs	r3, #1
 80147f4:	e0f7      	b.n	80149e6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f001 fd22 	bl	8016240 <SPI_GetPacketSize>
 80147fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	4a7b      	ldr	r2, [pc, #492]	@ (80149f0 <HAL_SPI_Init+0x23c>)
 8014804:	4293      	cmp	r3, r2
 8014806:	d00c      	beq.n	8014822 <HAL_SPI_Init+0x6e>
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	4a79      	ldr	r2, [pc, #484]	@ (80149f4 <HAL_SPI_Init+0x240>)
 801480e:	4293      	cmp	r3, r2
 8014810:	d007      	beq.n	8014822 <HAL_SPI_Init+0x6e>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	4a78      	ldr	r2, [pc, #480]	@ (80149f8 <HAL_SPI_Init+0x244>)
 8014818:	4293      	cmp	r3, r2
 801481a:	d002      	beq.n	8014822 <HAL_SPI_Init+0x6e>
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2b08      	cmp	r3, #8
 8014820:	d811      	bhi.n	8014846 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8014826:	4a72      	ldr	r2, [pc, #456]	@ (80149f0 <HAL_SPI_Init+0x23c>)
 8014828:	4293      	cmp	r3, r2
 801482a:	d009      	beq.n	8014840 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	4a70      	ldr	r2, [pc, #448]	@ (80149f4 <HAL_SPI_Init+0x240>)
 8014832:	4293      	cmp	r3, r2
 8014834:	d004      	beq.n	8014840 <HAL_SPI_Init+0x8c>
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	4a6f      	ldr	r2, [pc, #444]	@ (80149f8 <HAL_SPI_Init+0x244>)
 801483c:	4293      	cmp	r3, r2
 801483e:	d104      	bne.n	801484a <HAL_SPI_Init+0x96>
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	2b10      	cmp	r3, #16
 8014844:	d901      	bls.n	801484a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8014846:	2301      	movs	r3, #1
 8014848:	e0cd      	b.n	80149e6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014850:	b2db      	uxtb	r3, r3
 8014852:	2b00      	cmp	r3, #0
 8014854:	d106      	bne.n	8014864 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	2200      	movs	r2, #0
 801485a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	f7f3 fb7c 	bl	8007f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2202      	movs	r2, #2
 8014868:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	681a      	ldr	r2, [r3, #0]
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	f022 0201 	bic.w	r2, r2, #1
 801487a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	689b      	ldr	r3, [r3, #8]
 8014882:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8014886:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	699b      	ldr	r3, [r3, #24]
 801488c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8014890:	d119      	bne.n	80148c6 <HAL_SPI_Init+0x112>
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	685b      	ldr	r3, [r3, #4]
 8014896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801489a:	d103      	bne.n	80148a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d008      	beq.n	80148b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d10c      	bne.n	80148c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80148b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80148b4:	d107      	bne.n	80148c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80148c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	685b      	ldr	r3, [r3, #4]
 80148ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d00f      	beq.n	80148f2 <HAL_SPI_Init+0x13e>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	68db      	ldr	r3, [r3, #12]
 80148d6:	2b06      	cmp	r3, #6
 80148d8:	d90b      	bls.n	80148f2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	430a      	orrs	r2, r1
 80148ee:	601a      	str	r2, [r3, #0]
 80148f0:	e007      	b.n	8014902 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	681a      	ldr	r2, [r3, #0]
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014900:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	69da      	ldr	r2, [r3, #28]
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801490a:	431a      	orrs	r2, r3
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	431a      	orrs	r2, r3
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014914:	ea42 0103 	orr.w	r1, r2, r3
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	68da      	ldr	r2, [r3, #12]
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	430a      	orrs	r2, r1
 8014922:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801492c:	431a      	orrs	r2, r3
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014932:	431a      	orrs	r2, r3
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	699b      	ldr	r3, [r3, #24]
 8014938:	431a      	orrs	r2, r3
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	691b      	ldr	r3, [r3, #16]
 801493e:	431a      	orrs	r2, r3
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	695b      	ldr	r3, [r3, #20]
 8014944:	431a      	orrs	r2, r3
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	6a1b      	ldr	r3, [r3, #32]
 801494a:	431a      	orrs	r2, r3
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	685b      	ldr	r3, [r3, #4]
 8014950:	431a      	orrs	r2, r3
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014956:	431a      	orrs	r2, r3
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	689b      	ldr	r3, [r3, #8]
 801495c:	431a      	orrs	r2, r3
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014962:	ea42 0103 	orr.w	r1, r2, r3
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	430a      	orrs	r2, r1
 8014970:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	685b      	ldr	r3, [r3, #4]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d113      	bne.n	80149a2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	689b      	ldr	r3, [r3, #8]
 8014980:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801498c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	689b      	ldr	r3, [r3, #8]
 8014994:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80149a0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	f022 0201 	bic.w	r2, r2, #1
 80149b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	685b      	ldr	r3, [r3, #4]
 80149b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d00a      	beq.n	80149d4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	68db      	ldr	r3, [r3, #12]
 80149c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	430a      	orrs	r2, r1
 80149d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	2200      	movs	r2, #0
 80149d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	2201      	movs	r2, #1
 80149e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80149e4:	2300      	movs	r3, #0
}
 80149e6:	4618      	mov	r0, r3
 80149e8:	3710      	adds	r7, #16
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}
 80149ee:	bf00      	nop
 80149f0:	40013000 	.word	0x40013000
 80149f4:	40003800 	.word	0x40003800
 80149f8:	40003c00 	.word	0x40003c00

080149fc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b088      	sub	sp, #32
 8014a00:	af02      	add	r7, sp, #8
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	603b      	str	r3, [r7, #0]
 8014a08:	4613      	mov	r3, r2
 8014a0a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	3320      	adds	r3, #32
 8014a12:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014a14:	f7f4 fd4e 	bl	80094b4 <HAL_GetTick>
 8014a18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014a20:	b2db      	uxtb	r3, r3
 8014a22:	2b01      	cmp	r3, #1
 8014a24:	d001      	beq.n	8014a2a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8014a26:	2302      	movs	r3, #2
 8014a28:	e1d1      	b.n	8014dce <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d002      	beq.n	8014a36 <HAL_SPI_Transmit+0x3a>
 8014a30:	88fb      	ldrh	r3, [r7, #6]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d101      	bne.n	8014a3a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8014a36:	2301      	movs	r3, #1
 8014a38:	e1c9      	b.n	8014dce <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014a40:	2b01      	cmp	r3, #1
 8014a42:	d101      	bne.n	8014a48 <HAL_SPI_Transmit+0x4c>
 8014a44:	2302      	movs	r3, #2
 8014a46:	e1c2      	b.n	8014dce <HAL_SPI_Transmit+0x3d2>
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	2201      	movs	r2, #1
 8014a4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	2203      	movs	r2, #3
 8014a54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	68ba      	ldr	r2, [r7, #8]
 8014a64:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	88fa      	ldrh	r2, [r7, #6]
 8014a6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	88fa      	ldrh	r2, [r7, #6]
 8014a72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	2200      	movs	r2, #0
 8014a7a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	2200      	movs	r2, #0
 8014a80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	2200      	movs	r2, #0
 8014a88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	2200      	movs	r2, #0
 8014a90:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	2200      	movs	r2, #0
 8014a96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	689b      	ldr	r3, [r3, #8]
 8014a9c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014aa0:	d108      	bne.n	8014ab4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	681a      	ldr	r2, [r3, #0]
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014ab0:	601a      	str	r2, [r3, #0]
 8014ab2:	e009      	b.n	8014ac8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	68db      	ldr	r3, [r3, #12]
 8014aba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014ac6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	685a      	ldr	r2, [r3, #4]
 8014ace:	4b96      	ldr	r3, [pc, #600]	@ (8014d28 <HAL_SPI_Transmit+0x32c>)
 8014ad0:	4013      	ands	r3, r2
 8014ad2:	88f9      	ldrh	r1, [r7, #6]
 8014ad4:	68fa      	ldr	r2, [r7, #12]
 8014ad6:	6812      	ldr	r2, [r2, #0]
 8014ad8:	430b      	orrs	r3, r1
 8014ada:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	f042 0201 	orr.w	r2, r2, #1
 8014aea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	685b      	ldr	r3, [r3, #4]
 8014af0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014af4:	d107      	bne.n	8014b06 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014b04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	68db      	ldr	r3, [r3, #12]
 8014b0a:	2b0f      	cmp	r3, #15
 8014b0c:	d947      	bls.n	8014b9e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014b0e:	e03f      	b.n	8014b90 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	695b      	ldr	r3, [r3, #20]
 8014b16:	f003 0302 	and.w	r3, r3, #2
 8014b1a:	2b02      	cmp	r3, #2
 8014b1c:	d114      	bne.n	8014b48 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	6812      	ldr	r2, [r2, #0]
 8014b28:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014b2e:	1d1a      	adds	r2, r3, #4
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014b3a:	b29b      	uxth	r3, r3
 8014b3c:	3b01      	subs	r3, #1
 8014b3e:	b29a      	uxth	r2, r3
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014b46:	e023      	b.n	8014b90 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014b48:	f7f4 fcb4 	bl	80094b4 <HAL_GetTick>
 8014b4c:	4602      	mov	r2, r0
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	1ad3      	subs	r3, r2, r3
 8014b52:	683a      	ldr	r2, [r7, #0]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d803      	bhi.n	8014b60 <HAL_SPI_Transmit+0x164>
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b5e:	d102      	bne.n	8014b66 <HAL_SPI_Transmit+0x16a>
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d114      	bne.n	8014b90 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014b66:	68f8      	ldr	r0, [r7, #12]
 8014b68:	f001 fa9c 	bl	80160a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	2201      	movs	r2, #1
 8014b80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	2200      	movs	r2, #0
 8014b88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014b8c:	2303      	movs	r3, #3
 8014b8e:	e11e      	b.n	8014dce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d1b9      	bne.n	8014b10 <HAL_SPI_Transmit+0x114>
 8014b9c:	e0f1      	b.n	8014d82 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	68db      	ldr	r3, [r3, #12]
 8014ba2:	2b07      	cmp	r3, #7
 8014ba4:	f240 80e6 	bls.w	8014d74 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014ba8:	e05d      	b.n	8014c66 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	695b      	ldr	r3, [r3, #20]
 8014bb0:	f003 0302 	and.w	r3, r3, #2
 8014bb4:	2b02      	cmp	r3, #2
 8014bb6:	d132      	bne.n	8014c1e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	2b01      	cmp	r3, #1
 8014bc2:	d918      	bls.n	8014bf6 <HAL_SPI_Transmit+0x1fa>
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d014      	beq.n	8014bf6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	6812      	ldr	r2, [r2, #0]
 8014bd6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014bdc:	1d1a      	adds	r2, r3, #4
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014be8:	b29b      	uxth	r3, r3
 8014bea:	3b02      	subs	r3, #2
 8014bec:	b29a      	uxth	r2, r3
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014bf4:	e037      	b.n	8014c66 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014bfa:	881a      	ldrh	r2, [r3, #0]
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014c04:	1c9a      	adds	r2, r3, #2
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c10:	b29b      	uxth	r3, r3
 8014c12:	3b01      	subs	r3, #1
 8014c14:	b29a      	uxth	r2, r3
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014c1c:	e023      	b.n	8014c66 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014c1e:	f7f4 fc49 	bl	80094b4 <HAL_GetTick>
 8014c22:	4602      	mov	r2, r0
 8014c24:	693b      	ldr	r3, [r7, #16]
 8014c26:	1ad3      	subs	r3, r2, r3
 8014c28:	683a      	ldr	r2, [r7, #0]
 8014c2a:	429a      	cmp	r2, r3
 8014c2c:	d803      	bhi.n	8014c36 <HAL_SPI_Transmit+0x23a>
 8014c2e:	683b      	ldr	r3, [r7, #0]
 8014c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c34:	d102      	bne.n	8014c3c <HAL_SPI_Transmit+0x240>
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d114      	bne.n	8014c66 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014c3c:	68f8      	ldr	r0, [r7, #12]
 8014c3e:	f001 fa31 	bl	80160a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	2201      	movs	r2, #1
 8014c56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014c62:	2303      	movs	r3, #3
 8014c64:	e0b3      	b.n	8014dce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c6c:	b29b      	uxth	r3, r3
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d19b      	bne.n	8014baa <HAL_SPI_Transmit+0x1ae>
 8014c72:	e086      	b.n	8014d82 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	695b      	ldr	r3, [r3, #20]
 8014c7a:	f003 0302 	and.w	r3, r3, #2
 8014c7e:	2b02      	cmp	r3, #2
 8014c80:	d154      	bne.n	8014d2c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014c88:	b29b      	uxth	r3, r3
 8014c8a:	2b03      	cmp	r3, #3
 8014c8c:	d918      	bls.n	8014cc0 <HAL_SPI_Transmit+0x2c4>
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c92:	2b40      	cmp	r3, #64	@ 0x40
 8014c94:	d914      	bls.n	8014cc0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	6812      	ldr	r2, [r2, #0]
 8014ca0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ca6:	1d1a      	adds	r2, r3, #4
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	3b04      	subs	r3, #4
 8014cb6:	b29a      	uxth	r2, r3
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014cbe:	e059      	b.n	8014d74 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cc6:	b29b      	uxth	r3, r3
 8014cc8:	2b01      	cmp	r3, #1
 8014cca:	d917      	bls.n	8014cfc <HAL_SPI_Transmit+0x300>
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d013      	beq.n	8014cfc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cd8:	881a      	ldrh	r2, [r3, #0]
 8014cda:	697b      	ldr	r3, [r7, #20]
 8014cdc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ce2:	1c9a      	adds	r2, r3, #2
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	3b02      	subs	r3, #2
 8014cf2:	b29a      	uxth	r2, r3
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014cfa:	e03b      	b.n	8014d74 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	3320      	adds	r3, #32
 8014d06:	7812      	ldrb	r2, [r2, #0]
 8014d08:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d0e:	1c5a      	adds	r2, r3, #1
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d1a:	b29b      	uxth	r3, r3
 8014d1c:	3b01      	subs	r3, #1
 8014d1e:	b29a      	uxth	r2, r3
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014d26:	e025      	b.n	8014d74 <HAL_SPI_Transmit+0x378>
 8014d28:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014d2c:	f7f4 fbc2 	bl	80094b4 <HAL_GetTick>
 8014d30:	4602      	mov	r2, r0
 8014d32:	693b      	ldr	r3, [r7, #16]
 8014d34:	1ad3      	subs	r3, r2, r3
 8014d36:	683a      	ldr	r2, [r7, #0]
 8014d38:	429a      	cmp	r2, r3
 8014d3a:	d803      	bhi.n	8014d44 <HAL_SPI_Transmit+0x348>
 8014d3c:	683b      	ldr	r3, [r7, #0]
 8014d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d42:	d102      	bne.n	8014d4a <HAL_SPI_Transmit+0x34e>
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d114      	bne.n	8014d74 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014d4a:	68f8      	ldr	r0, [r7, #12]
 8014d4c:	f001 f9aa 	bl	80160a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	2201      	movs	r2, #1
 8014d64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014d70:	2303      	movs	r3, #3
 8014d72:	e02c      	b.n	8014dce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014d7a:	b29b      	uxth	r3, r3
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	f47f af79 	bne.w	8014c74 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8014d82:	693b      	ldr	r3, [r7, #16]
 8014d84:	9300      	str	r3, [sp, #0]
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	2200      	movs	r2, #0
 8014d8a:	2108      	movs	r1, #8
 8014d8c:	68f8      	ldr	r0, [r7, #12]
 8014d8e:	f001 fa29 	bl	80161e4 <SPI_WaitOnFlagUntilTimeout>
 8014d92:	4603      	mov	r3, r0
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d007      	beq.n	8014da8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d9e:	f043 0220 	orr.w	r2, r3, #32
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014da8:	68f8      	ldr	r0, [r7, #12]
 8014daa:	f001 f97b 	bl	80160a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	2201      	movs	r2, #1
 8014db2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	2200      	movs	r2, #0
 8014dba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d001      	beq.n	8014dcc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8014dc8:	2301      	movs	r3, #1
 8014dca:	e000      	b.n	8014dce <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8014dcc:	2300      	movs	r3, #0
  }
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3718      	adds	r7, #24
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
 8014dd6:	bf00      	nop

08014dd8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b088      	sub	sp, #32
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	60f8      	str	r0, [r7, #12]
 8014de0:	60b9      	str	r1, [r7, #8]
 8014de2:	603b      	str	r3, [r7, #0]
 8014de4:	4613      	mov	r3, r2
 8014de6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014dec:	095b      	lsrs	r3, r3, #5
 8014dee:	b29b      	uxth	r3, r3
 8014df0:	3301      	adds	r3, #1
 8014df2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	3330      	adds	r3, #48	@ 0x30
 8014dfa:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014dfc:	f7f4 fb5a 	bl	80094b4 <HAL_GetTick>
 8014e00:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014e08:	b2db      	uxtb	r3, r3
 8014e0a:	2b01      	cmp	r3, #1
 8014e0c:	d001      	beq.n	8014e12 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8014e0e:	2302      	movs	r3, #2
 8014e10:	e250      	b.n	80152b4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d002      	beq.n	8014e1e <HAL_SPI_Receive+0x46>
 8014e18:	88fb      	ldrh	r3, [r7, #6]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d101      	bne.n	8014e22 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8014e1e:	2301      	movs	r3, #1
 8014e20:	e248      	b.n	80152b4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014e28:	2b01      	cmp	r3, #1
 8014e2a:	d101      	bne.n	8014e30 <HAL_SPI_Receive+0x58>
 8014e2c:	2302      	movs	r3, #2
 8014e2e:	e241      	b.n	80152b4 <HAL_SPI_Receive+0x4dc>
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	2201      	movs	r2, #1
 8014e34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	2204      	movs	r2, #4
 8014e3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	2200      	movs	r2, #0
 8014e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	68ba      	ldr	r2, [r7, #8]
 8014e4c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	88fa      	ldrh	r2, [r7, #6]
 8014e52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	88fa      	ldrh	r2, [r7, #6]
 8014e5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2200      	movs	r2, #0
 8014e62:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	2200      	movs	r2, #0
 8014e68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	2200      	movs	r2, #0
 8014e70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	2200      	movs	r2, #0
 8014e78:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	689b      	ldr	r3, [r3, #8]
 8014e84:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014e88:	d108      	bne.n	8014e9c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	681a      	ldr	r2, [r3, #0]
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014e98:	601a      	str	r2, [r3, #0]
 8014e9a:	e009      	b.n	8014eb0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	68db      	ldr	r3, [r3, #12]
 8014ea2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8014eae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	685a      	ldr	r2, [r3, #4]
 8014eb6:	4b95      	ldr	r3, [pc, #596]	@ (801510c <HAL_SPI_Receive+0x334>)
 8014eb8:	4013      	ands	r3, r2
 8014eba:	88f9      	ldrh	r1, [r7, #6]
 8014ebc:	68fa      	ldr	r2, [r7, #12]
 8014ebe:	6812      	ldr	r2, [r2, #0]
 8014ec0:	430b      	orrs	r3, r1
 8014ec2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	681a      	ldr	r2, [r3, #0]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	f042 0201 	orr.w	r2, r2, #1
 8014ed2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	685b      	ldr	r3, [r3, #4]
 8014ed8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014edc:	d107      	bne.n	8014eee <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014eec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	68db      	ldr	r3, [r3, #12]
 8014ef2:	2b0f      	cmp	r3, #15
 8014ef4:	d96c      	bls.n	8014fd0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014ef6:	e064      	b.n	8014fc2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	695b      	ldr	r3, [r3, #20]
 8014efe:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	695b      	ldr	r3, [r3, #20]
 8014f06:	f003 0301 	and.w	r3, r3, #1
 8014f0a:	2b01      	cmp	r3, #1
 8014f0c:	d114      	bne.n	8014f38 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	681a      	ldr	r2, [r3, #0]
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014f18:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f1e:	1d1a      	adds	r2, r3, #4
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f2a:	b29b      	uxth	r3, r3
 8014f2c:	3b01      	subs	r3, #1
 8014f2e:	b29a      	uxth	r2, r3
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014f36:	e044      	b.n	8014fc2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f3e:	b29b      	uxth	r3, r3
 8014f40:	8bfa      	ldrh	r2, [r7, #30]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d919      	bls.n	8014f7a <HAL_SPI_Receive+0x1a2>
 8014f46:	693b      	ldr	r3, [r7, #16]
 8014f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d014      	beq.n	8014f7a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	681a      	ldr	r2, [r3, #0]
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014f5a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014f60:	1d1a      	adds	r2, r3, #4
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f6c:	b29b      	uxth	r3, r3
 8014f6e:	3b01      	subs	r3, #1
 8014f70:	b29a      	uxth	r2, r3
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014f78:	e023      	b.n	8014fc2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014f7a:	f7f4 fa9b 	bl	80094b4 <HAL_GetTick>
 8014f7e:	4602      	mov	r2, r0
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	1ad3      	subs	r3, r2, r3
 8014f84:	683a      	ldr	r2, [r7, #0]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d803      	bhi.n	8014f92 <HAL_SPI_Receive+0x1ba>
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f90:	d102      	bne.n	8014f98 <HAL_SPI_Receive+0x1c0>
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d114      	bne.n	8014fc2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014f98:	68f8      	ldr	r0, [r7, #12]
 8014f9a:	f001 f883 	bl	80160a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014fa4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	2201      	movs	r2, #1
 8014fb2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2200      	movs	r2, #0
 8014fba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014fbe:	2303      	movs	r3, #3
 8014fc0:	e178      	b.n	80152b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d194      	bne.n	8014ef8 <HAL_SPI_Receive+0x120>
 8014fce:	e15e      	b.n	801528e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	68db      	ldr	r3, [r3, #12]
 8014fd4:	2b07      	cmp	r3, #7
 8014fd6:	f240 8153 	bls.w	8015280 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014fda:	e08f      	b.n	80150fc <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	695b      	ldr	r3, [r3, #20]
 8014fe2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	695b      	ldr	r3, [r3, #20]
 8014fea:	f003 0301 	and.w	r3, r3, #1
 8014fee:	2b01      	cmp	r3, #1
 8014ff0:	d114      	bne.n	801501c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ff6:	69ba      	ldr	r2, [r7, #24]
 8014ff8:	8812      	ldrh	r2, [r2, #0]
 8014ffa:	b292      	uxth	r2, r2
 8014ffc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015002:	1c9a      	adds	r2, r3, #2
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801500e:	b29b      	uxth	r3, r3
 8015010:	3b01      	subs	r3, #1
 8015012:	b29a      	uxth	r2, r3
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801501a:	e06f      	b.n	80150fc <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015022:	b29b      	uxth	r3, r3
 8015024:	8bfa      	ldrh	r2, [r7, #30]
 8015026:	429a      	cmp	r2, r3
 8015028:	d924      	bls.n	8015074 <HAL_SPI_Receive+0x29c>
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015030:	2b00      	cmp	r3, #0
 8015032:	d01f      	beq.n	8015074 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015038:	69ba      	ldr	r2, [r7, #24]
 801503a:	8812      	ldrh	r2, [r2, #0]
 801503c:	b292      	uxth	r2, r2
 801503e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015044:	1c9a      	adds	r2, r3, #2
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801504e:	69ba      	ldr	r2, [r7, #24]
 8015050:	8812      	ldrh	r2, [r2, #0]
 8015052:	b292      	uxth	r2, r2
 8015054:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801505a:	1c9a      	adds	r2, r3, #2
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015066:	b29b      	uxth	r3, r3
 8015068:	3b02      	subs	r3, #2
 801506a:	b29a      	uxth	r2, r3
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015072:	e043      	b.n	80150fc <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801507a:	b29b      	uxth	r3, r3
 801507c:	2b01      	cmp	r3, #1
 801507e:	d119      	bne.n	80150b4 <HAL_SPI_Receive+0x2dc>
 8015080:	693b      	ldr	r3, [r7, #16]
 8015082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015086:	2b00      	cmp	r3, #0
 8015088:	d014      	beq.n	80150b4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801508e:	69ba      	ldr	r2, [r7, #24]
 8015090:	8812      	ldrh	r2, [r2, #0]
 8015092:	b292      	uxth	r2, r2
 8015094:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801509a:	1c9a      	adds	r2, r3, #2
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150a6:	b29b      	uxth	r3, r3
 80150a8:	3b01      	subs	r3, #1
 80150aa:	b29a      	uxth	r2, r3
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80150b2:	e023      	b.n	80150fc <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80150b4:	f7f4 f9fe 	bl	80094b4 <HAL_GetTick>
 80150b8:	4602      	mov	r2, r0
 80150ba:	697b      	ldr	r3, [r7, #20]
 80150bc:	1ad3      	subs	r3, r2, r3
 80150be:	683a      	ldr	r2, [r7, #0]
 80150c0:	429a      	cmp	r2, r3
 80150c2:	d803      	bhi.n	80150cc <HAL_SPI_Receive+0x2f4>
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150ca:	d102      	bne.n	80150d2 <HAL_SPI_Receive+0x2fa>
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d114      	bne.n	80150fc <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80150d2:	68f8      	ldr	r0, [r7, #12]
 80150d4:	f000 ffe6 	bl	80160a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80150de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	2201      	movs	r2, #1
 80150ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	2200      	movs	r2, #0
 80150f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80150f8:	2303      	movs	r3, #3
 80150fa:	e0db      	b.n	80152b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015102:	b29b      	uxth	r3, r3
 8015104:	2b00      	cmp	r3, #0
 8015106:	f47f af69 	bne.w	8014fdc <HAL_SPI_Receive+0x204>
 801510a:	e0c0      	b.n	801528e <HAL_SPI_Receive+0x4b6>
 801510c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	695b      	ldr	r3, [r3, #20]
 8015116:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	695b      	ldr	r3, [r3, #20]
 801511e:	f003 0301 	and.w	r3, r3, #1
 8015122:	2b01      	cmp	r3, #1
 8015124:	d117      	bne.n	8015156 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015132:	7812      	ldrb	r2, [r2, #0]
 8015134:	b2d2      	uxtb	r2, r2
 8015136:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801513c:	1c5a      	adds	r2, r3, #1
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015148:	b29b      	uxth	r3, r3
 801514a:	3b01      	subs	r3, #1
 801514c:	b29a      	uxth	r2, r3
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015154:	e094      	b.n	8015280 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801515c:	b29b      	uxth	r3, r3
 801515e:	8bfa      	ldrh	r2, [r7, #30]
 8015160:	429a      	cmp	r2, r3
 8015162:	d946      	bls.n	80151f2 <HAL_SPI_Receive+0x41a>
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801516a:	2b00      	cmp	r3, #0
 801516c:	d041      	beq.n	80151f2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801517a:	7812      	ldrb	r2, [r2, #0]
 801517c:	b2d2      	uxtb	r2, r2
 801517e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015184:	1c5a      	adds	r2, r3, #1
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015196:	7812      	ldrb	r2, [r2, #0]
 8015198:	b2d2      	uxtb	r2, r2
 801519a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151a0:	1c5a      	adds	r2, r3, #1
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151b2:	7812      	ldrb	r2, [r2, #0]
 80151b4:	b2d2      	uxtb	r2, r2
 80151b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151bc:	1c5a      	adds	r2, r3, #1
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151ce:	7812      	ldrb	r2, [r2, #0]
 80151d0:	b2d2      	uxtb	r2, r2
 80151d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80151d8:	1c5a      	adds	r2, r3, #1
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151e4:	b29b      	uxth	r3, r3
 80151e6:	3b04      	subs	r3, #4
 80151e8:	b29a      	uxth	r2, r3
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80151f0:	e046      	b.n	8015280 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80151f8:	b29b      	uxth	r3, r3
 80151fa:	2b03      	cmp	r3, #3
 80151fc:	d81c      	bhi.n	8015238 <HAL_SPI_Receive+0x460>
 80151fe:	693b      	ldr	r3, [r7, #16]
 8015200:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8015204:	2b00      	cmp	r3, #0
 8015206:	d017      	beq.n	8015238 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015214:	7812      	ldrb	r2, [r2, #0]
 8015216:	b2d2      	uxtb	r2, r2
 8015218:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801521e:	1c5a      	adds	r2, r3, #1
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801522a:	b29b      	uxth	r3, r3
 801522c:	3b01      	subs	r3, #1
 801522e:	b29a      	uxth	r2, r3
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015236:	e023      	b.n	8015280 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015238:	f7f4 f93c 	bl	80094b4 <HAL_GetTick>
 801523c:	4602      	mov	r2, r0
 801523e:	697b      	ldr	r3, [r7, #20]
 8015240:	1ad3      	subs	r3, r2, r3
 8015242:	683a      	ldr	r2, [r7, #0]
 8015244:	429a      	cmp	r2, r3
 8015246:	d803      	bhi.n	8015250 <HAL_SPI_Receive+0x478>
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801524e:	d102      	bne.n	8015256 <HAL_SPI_Receive+0x47e>
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d114      	bne.n	8015280 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8015256:	68f8      	ldr	r0, [r7, #12]
 8015258:	f000 ff24 	bl	80160a4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015262:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	2201      	movs	r2, #1
 8015270:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	2200      	movs	r2, #0
 8015278:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801527c:	2303      	movs	r3, #3
 801527e:	e019      	b.n	80152b4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015286:	b29b      	uxth	r3, r3
 8015288:	2b00      	cmp	r3, #0
 801528a:	f47f af41 	bne.w	8015110 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801528e:	68f8      	ldr	r0, [r7, #12]
 8015290:	f000 ff08 	bl	80160a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	2201      	movs	r2, #1
 8015298:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	2200      	movs	r2, #0
 80152a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d001      	beq.n	80152b2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80152ae:	2301      	movs	r3, #1
 80152b0:	e000      	b.n	80152b4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80152b2:	2300      	movs	r3, #0
  }
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3720      	adds	r7, #32
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}

080152bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b08e      	sub	sp, #56	@ 0x38
 80152c0:	af02      	add	r7, sp, #8
 80152c2:	60f8      	str	r0, [r7, #12]
 80152c4:	60b9      	str	r1, [r7, #8]
 80152c6:	607a      	str	r2, [r7, #4]
 80152c8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	3320      	adds	r3, #32
 80152d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	3330      	adds	r3, #48	@ 0x30
 80152d8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152de:	095b      	lsrs	r3, r3, #5
 80152e0:	b29b      	uxth	r3, r3
 80152e2:	3301      	adds	r3, #1
 80152e4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80152e6:	f7f4 f8e5 	bl	80094b4 <HAL_GetTick>
 80152ea:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80152ec:	887b      	ldrh	r3, [r7, #2]
 80152ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80152f0:	887b      	ldrh	r3, [r7, #2]
 80152f2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80152fa:	b2db      	uxtb	r3, r3
 80152fc:	2b01      	cmp	r3, #1
 80152fe:	d001      	beq.n	8015304 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8015300:	2302      	movs	r3, #2
 8015302:	e310      	b.n	8015926 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8015304:	68bb      	ldr	r3, [r7, #8]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d005      	beq.n	8015316 <HAL_SPI_TransmitReceive+0x5a>
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d002      	beq.n	8015316 <HAL_SPI_TransmitReceive+0x5a>
 8015310:	887b      	ldrh	r3, [r7, #2]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d101      	bne.n	801531a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8015316:	2301      	movs	r3, #1
 8015318:	e305      	b.n	8015926 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015320:	2b01      	cmp	r3, #1
 8015322:	d101      	bne.n	8015328 <HAL_SPI_TransmitReceive+0x6c>
 8015324:	2302      	movs	r3, #2
 8015326:	e2fe      	b.n	8015926 <HAL_SPI_TransmitReceive+0x66a>
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	2201      	movs	r2, #1
 801532c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	2205      	movs	r2, #5
 8015334:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	2200      	movs	r2, #0
 801533c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	887a      	ldrh	r2, [r7, #2]
 801534a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	887a      	ldrh	r2, [r7, #2]
 8015352:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	68ba      	ldr	r2, [r7, #8]
 801535a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	887a      	ldrh	r2, [r7, #2]
 8015360:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	887a      	ldrh	r2, [r7, #2]
 8015368:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	2200      	movs	r2, #0
 8015370:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	2200      	movs	r2, #0
 8015376:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	68da      	ldr	r2, [r3, #12]
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8015386:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	4a70      	ldr	r2, [pc, #448]	@ (8015550 <HAL_SPI_TransmitReceive+0x294>)
 801538e:	4293      	cmp	r3, r2
 8015390:	d009      	beq.n	80153a6 <HAL_SPI_TransmitReceive+0xea>
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	4a6f      	ldr	r2, [pc, #444]	@ (8015554 <HAL_SPI_TransmitReceive+0x298>)
 8015398:	4293      	cmp	r3, r2
 801539a:	d004      	beq.n	80153a6 <HAL_SPI_TransmitReceive+0xea>
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	4a6d      	ldr	r2, [pc, #436]	@ (8015558 <HAL_SPI_TransmitReceive+0x29c>)
 80153a2:	4293      	cmp	r3, r2
 80153a4:	d102      	bne.n	80153ac <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80153a6:	2310      	movs	r3, #16
 80153a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80153aa:	e001      	b.n	80153b0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80153ac:	2308      	movs	r3, #8
 80153ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	685a      	ldr	r2, [r3, #4]
 80153b6:	4b69      	ldr	r3, [pc, #420]	@ (801555c <HAL_SPI_TransmitReceive+0x2a0>)
 80153b8:	4013      	ands	r3, r2
 80153ba:	8879      	ldrh	r1, [r7, #2]
 80153bc:	68fa      	ldr	r2, [r7, #12]
 80153be:	6812      	ldr	r2, [r2, #0]
 80153c0:	430b      	orrs	r3, r1
 80153c2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	681a      	ldr	r2, [r3, #0]
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	f042 0201 	orr.w	r2, r2, #1
 80153d2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	685b      	ldr	r3, [r3, #4]
 80153d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80153dc:	d107      	bne.n	80153ee <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	681a      	ldr	r2, [r3, #0]
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80153ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	2b0f      	cmp	r3, #15
 80153f4:	f240 80a2 	bls.w	801553c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80153f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153fa:	089b      	lsrs	r3, r3, #2
 80153fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80153fe:	e094      	b.n	801552a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	695b      	ldr	r3, [r3, #20]
 8015406:	f003 0302 	and.w	r3, r3, #2
 801540a:	2b02      	cmp	r3, #2
 801540c:	d120      	bne.n	8015450 <HAL_SPI_TransmitReceive+0x194>
 801540e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015410:	2b00      	cmp	r3, #0
 8015412:	d01d      	beq.n	8015450 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015414:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015416:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801541a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801541c:	429a      	cmp	r2, r3
 801541e:	d217      	bcs.n	8015450 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	6812      	ldr	r2, [r2, #0]
 801542a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015430:	1d1a      	adds	r2, r3, #4
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801543c:	b29b      	uxth	r3, r3
 801543e:	3b01      	subs	r3, #1
 8015440:	b29a      	uxth	r2, r3
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801544e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	695b      	ldr	r3, [r3, #20]
 8015456:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8015458:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801545a:	2b00      	cmp	r3, #0
 801545c:	d065      	beq.n	801552a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	695b      	ldr	r3, [r3, #20]
 8015464:	f003 0301 	and.w	r3, r3, #1
 8015468:	2b01      	cmp	r3, #1
 801546a:	d118      	bne.n	801549e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	681a      	ldr	r2, [r3, #0]
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015474:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015476:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801547c:	1d1a      	adds	r2, r3, #4
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015488:	b29b      	uxth	r3, r3
 801548a:	3b01      	subs	r3, #1
 801548c:	b29a      	uxth	r2, r3
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801549a:	853b      	strh	r3, [r7, #40]	@ 0x28
 801549c:	e045      	b.n	801552a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801549e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80154a0:	8bfb      	ldrh	r3, [r7, #30]
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d21d      	bcs.n	80154e2 <HAL_SPI_TransmitReceive+0x226>
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d018      	beq.n	80154e2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	681a      	ldr	r2, [r3, #0]
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80154ba:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80154c0:	1d1a      	adds	r2, r3, #4
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	3b01      	subs	r3, #1
 80154d0:	b29a      	uxth	r2, r3
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80154de:	853b      	strh	r3, [r7, #40]	@ 0x28
 80154e0:	e023      	b.n	801552a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80154e2:	f7f3 ffe7 	bl	80094b4 <HAL_GetTick>
 80154e6:	4602      	mov	r2, r0
 80154e8:	69bb      	ldr	r3, [r7, #24]
 80154ea:	1ad3      	subs	r3, r2, r3
 80154ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d803      	bhi.n	80154fa <HAL_SPI_TransmitReceive+0x23e>
 80154f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154f8:	d102      	bne.n	8015500 <HAL_SPI_TransmitReceive+0x244>
 80154fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d114      	bne.n	801552a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8015500:	68f8      	ldr	r0, [r7, #12]
 8015502:	f000 fdcf 	bl	80160a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801550c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	2201      	movs	r2, #1
 801551a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	2200      	movs	r2, #0
 8015522:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8015526:	2303      	movs	r3, #3
 8015528:	e1fd      	b.n	8015926 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801552a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801552c:	2b00      	cmp	r3, #0
 801552e:	f47f af67 	bne.w	8015400 <HAL_SPI_TransmitReceive+0x144>
 8015532:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015534:	2b00      	cmp	r3, #0
 8015536:	f47f af63 	bne.w	8015400 <HAL_SPI_TransmitReceive+0x144>
 801553a:	e1ce      	b.n	80158da <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	68db      	ldr	r3, [r3, #12]
 8015540:	2b07      	cmp	r3, #7
 8015542:	f240 81c2 	bls.w	80158ca <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8015546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015548:	085b      	lsrs	r3, r3, #1
 801554a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801554c:	e0c9      	b.n	80156e2 <HAL_SPI_TransmitReceive+0x426>
 801554e:	bf00      	nop
 8015550:	40013000 	.word	0x40013000
 8015554:	40003800 	.word	0x40003800
 8015558:	40003c00 	.word	0x40003c00
 801555c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	695b      	ldr	r3, [r3, #20]
 8015566:	f003 0302 	and.w	r3, r3, #2
 801556a:	2b02      	cmp	r3, #2
 801556c:	d11f      	bne.n	80155ae <HAL_SPI_TransmitReceive+0x2f2>
 801556e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015570:	2b00      	cmp	r3, #0
 8015572:	d01c      	beq.n	80155ae <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015574:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015576:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8015578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801557a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 801557c:	429a      	cmp	r2, r3
 801557e:	d216      	bcs.n	80155ae <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015584:	881a      	ldrh	r2, [r3, #0]
 8015586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015588:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801558e:	1c9a      	adds	r2, r3, #2
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801559a:	b29b      	uxth	r3, r3
 801559c:	3b01      	subs	r3, #1
 801559e:	b29a      	uxth	r2, r3
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80155ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	695b      	ldr	r3, [r3, #20]
 80155b4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80155b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	f000 8092 	beq.w	80156e2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	695b      	ldr	r3, [r3, #20]
 80155c4:	f003 0301 	and.w	r3, r3, #1
 80155c8:	2b01      	cmp	r3, #1
 80155ca:	d118      	bne.n	80155fe <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155d0:	6a3a      	ldr	r2, [r7, #32]
 80155d2:	8812      	ldrh	r2, [r2, #0]
 80155d4:	b292      	uxth	r2, r2
 80155d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155dc:	1c9a      	adds	r2, r3, #2
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	3b01      	subs	r3, #1
 80155ec:	b29a      	uxth	r2, r3
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80155fc:	e071      	b.n	80156e2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80155fe:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8015600:	8bfb      	ldrh	r3, [r7, #30]
 8015602:	429a      	cmp	r2, r3
 8015604:	d228      	bcs.n	8015658 <HAL_SPI_TransmitReceive+0x39c>
 8015606:	697b      	ldr	r3, [r7, #20]
 8015608:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801560c:	2b00      	cmp	r3, #0
 801560e:	d023      	beq.n	8015658 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015614:	6a3a      	ldr	r2, [r7, #32]
 8015616:	8812      	ldrh	r2, [r2, #0]
 8015618:	b292      	uxth	r2, r2
 801561a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015620:	1c9a      	adds	r2, r3, #2
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801562a:	6a3a      	ldr	r2, [r7, #32]
 801562c:	8812      	ldrh	r2, [r2, #0]
 801562e:	b292      	uxth	r2, r2
 8015630:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015636:	1c9a      	adds	r2, r3, #2
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015642:	b29b      	uxth	r3, r3
 8015644:	3b02      	subs	r3, #2
 8015646:	b29a      	uxth	r2, r3
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015654:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015656:	e044      	b.n	80156e2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8015658:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801565a:	2b01      	cmp	r3, #1
 801565c:	d11d      	bne.n	801569a <HAL_SPI_TransmitReceive+0x3de>
 801565e:	697b      	ldr	r3, [r7, #20]
 8015660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015664:	2b00      	cmp	r3, #0
 8015666:	d018      	beq.n	801569a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801566c:	6a3a      	ldr	r2, [r7, #32]
 801566e:	8812      	ldrh	r2, [r2, #0]
 8015670:	b292      	uxth	r2, r2
 8015672:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015678:	1c9a      	adds	r2, r3, #2
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015684:	b29b      	uxth	r3, r3
 8015686:	3b01      	subs	r3, #1
 8015688:	b29a      	uxth	r2, r3
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015696:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015698:	e023      	b.n	80156e2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801569a:	f7f3 ff0b 	bl	80094b4 <HAL_GetTick>
 801569e:	4602      	mov	r2, r0
 80156a0:	69bb      	ldr	r3, [r7, #24]
 80156a2:	1ad3      	subs	r3, r2, r3
 80156a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d803      	bhi.n	80156b2 <HAL_SPI_TransmitReceive+0x3f6>
 80156aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156b0:	d102      	bne.n	80156b8 <HAL_SPI_TransmitReceive+0x3fc>
 80156b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d114      	bne.n	80156e2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80156b8:	68f8      	ldr	r0, [r7, #12]
 80156ba:	f000 fcf3 	bl	80160a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	2201      	movs	r2, #1
 80156d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	2200      	movs	r2, #0
 80156da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80156de:	2303      	movs	r3, #3
 80156e0:	e121      	b.n	8015926 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80156e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	f47f af3b 	bne.w	8015560 <HAL_SPI_TransmitReceive+0x2a4>
 80156ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	f47f af37 	bne.w	8015560 <HAL_SPI_TransmitReceive+0x2a4>
 80156f2:	e0f2      	b.n	80158da <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	695b      	ldr	r3, [r3, #20]
 80156fa:	f003 0302 	and.w	r3, r3, #2
 80156fe:	2b02      	cmp	r3, #2
 8015700:	d121      	bne.n	8015746 <HAL_SPI_TransmitReceive+0x48a>
 8015702:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015704:	2b00      	cmp	r3, #0
 8015706:	d01e      	beq.n	8015746 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8015708:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801570a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 801570c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801570e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8015710:	429a      	cmp	r2, r3
 8015712:	d218      	bcs.n	8015746 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	3320      	adds	r3, #32
 801571e:	7812      	ldrb	r2, [r2, #0]
 8015720:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015726:	1c5a      	adds	r2, r3, #1
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015732:	b29b      	uxth	r3, r3
 8015734:	3b01      	subs	r3, #1
 8015736:	b29a      	uxth	r2, r3
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015744:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	695b      	ldr	r3, [r3, #20]
 801574c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 801574e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015750:	2b00      	cmp	r3, #0
 8015752:	f000 80ba 	beq.w	80158ca <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	695b      	ldr	r3, [r3, #20]
 801575c:	f003 0301 	and.w	r3, r3, #1
 8015760:	2b01      	cmp	r3, #1
 8015762:	d11b      	bne.n	801579c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015770:	7812      	ldrb	r2, [r2, #0]
 8015772:	b2d2      	uxtb	r2, r2
 8015774:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801577a:	1c5a      	adds	r2, r3, #1
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015786:	b29b      	uxth	r3, r3
 8015788:	3b01      	subs	r3, #1
 801578a:	b29a      	uxth	r2, r3
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015798:	853b      	strh	r3, [r7, #40]	@ 0x28
 801579a:	e096      	b.n	80158ca <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801579c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801579e:	8bfb      	ldrh	r3, [r7, #30]
 80157a0:	429a      	cmp	r2, r3
 80157a2:	d24a      	bcs.n	801583a <HAL_SPI_TransmitReceive+0x57e>
 80157a4:	697b      	ldr	r3, [r7, #20]
 80157a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d045      	beq.n	801583a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157ba:	7812      	ldrb	r2, [r2, #0]
 80157bc:	b2d2      	uxtb	r2, r2
 80157be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157c4:	1c5a      	adds	r2, r3, #1
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157d6:	7812      	ldrb	r2, [r2, #0]
 80157d8:	b2d2      	uxtb	r2, r2
 80157da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157e0:	1c5a      	adds	r2, r3, #1
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157f2:	7812      	ldrb	r2, [r2, #0]
 80157f4:	b2d2      	uxtb	r2, r2
 80157f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80157fc:	1c5a      	adds	r2, r3, #1
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801580e:	7812      	ldrb	r2, [r2, #0]
 8015810:	b2d2      	uxtb	r2, r2
 8015812:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015818:	1c5a      	adds	r2, r3, #1
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015824:	b29b      	uxth	r3, r3
 8015826:	3b04      	subs	r3, #4
 8015828:	b29a      	uxth	r2, r3
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015836:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015838:	e047      	b.n	80158ca <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 801583a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801583c:	2b03      	cmp	r3, #3
 801583e:	d820      	bhi.n	8015882 <HAL_SPI_TransmitReceive+0x5c6>
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8015846:	2b00      	cmp	r3, #0
 8015848:	d01b      	beq.n	8015882 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015856:	7812      	ldrb	r2, [r2, #0]
 8015858:	b2d2      	uxtb	r2, r2
 801585a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015860:	1c5a      	adds	r2, r3, #1
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801586c:	b29b      	uxth	r3, r3
 801586e:	3b01      	subs	r3, #1
 8015870:	b29a      	uxth	r2, r3
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801587e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015880:	e023      	b.n	80158ca <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015882:	f7f3 fe17 	bl	80094b4 <HAL_GetTick>
 8015886:	4602      	mov	r2, r0
 8015888:	69bb      	ldr	r3, [r7, #24]
 801588a:	1ad3      	subs	r3, r2, r3
 801588c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801588e:	429a      	cmp	r2, r3
 8015890:	d803      	bhi.n	801589a <HAL_SPI_TransmitReceive+0x5de>
 8015892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015898:	d102      	bne.n	80158a0 <HAL_SPI_TransmitReceive+0x5e4>
 801589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801589c:	2b00      	cmp	r3, #0
 801589e:	d114      	bne.n	80158ca <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80158a0:	68f8      	ldr	r0, [r7, #12]
 80158a2:	f000 fbff 	bl	80160a4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	2201      	movs	r2, #1
 80158ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	2200      	movs	r2, #0
 80158c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80158c6:	2303      	movs	r3, #3
 80158c8:	e02d      	b.n	8015926 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80158ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	f47f af11 	bne.w	80156f4 <HAL_SPI_TransmitReceive+0x438>
 80158d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	f47f af0d 	bne.w	80156f4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80158da:	69bb      	ldr	r3, [r7, #24]
 80158dc:	9300      	str	r3, [sp, #0]
 80158de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158e0:	2200      	movs	r2, #0
 80158e2:	2108      	movs	r1, #8
 80158e4:	68f8      	ldr	r0, [r7, #12]
 80158e6:	f000 fc7d 	bl	80161e4 <SPI_WaitOnFlagUntilTimeout>
 80158ea:	4603      	mov	r3, r0
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d007      	beq.n	8015900 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158f6:	f043 0220 	orr.w	r2, r3, #32
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8015900:	68f8      	ldr	r0, [r7, #12]
 8015902:	f000 fbcf 	bl	80160a4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2201      	movs	r2, #1
 801590a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2200      	movs	r2, #0
 8015912:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801591c:	2b00      	cmp	r3, #0
 801591e:	d001      	beq.n	8015924 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8015920:	2301      	movs	r3, #1
 8015922:	e000      	b.n	8015926 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8015924:	2300      	movs	r3, #0
  }
}
 8015926:	4618      	mov	r0, r3
 8015928:	3730      	adds	r7, #48	@ 0x30
 801592a:	46bd      	mov	sp, r7
 801592c:	bd80      	pop	{r7, pc}
 801592e:	bf00      	nop

08015930 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b084      	sub	sp, #16
 8015934:	af00      	add	r7, sp, #0
 8015936:	60f8      	str	r0, [r7, #12]
 8015938:	60b9      	str	r1, [r7, #8]
 801593a:	4613      	mov	r3, r2
 801593c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015944:	b2db      	uxtb	r3, r3
 8015946:	2b01      	cmp	r3, #1
 8015948:	d001      	beq.n	801594e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 801594a:	2302      	movs	r3, #2
 801594c:	e126      	b.n	8015b9c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 801594e:	68bb      	ldr	r3, [r7, #8]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d002      	beq.n	801595a <HAL_SPI_Transmit_DMA+0x2a>
 8015954:	88fb      	ldrh	r3, [r7, #6]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d101      	bne.n	801595e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 801595a:	2301      	movs	r3, #1
 801595c:	e11e      	b.n	8015b9c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8015964:	2b01      	cmp	r3, #1
 8015966:	d101      	bne.n	801596c <HAL_SPI_Transmit_DMA+0x3c>
 8015968:	2302      	movs	r3, #2
 801596a:	e117      	b.n	8015b9c <HAL_SPI_Transmit_DMA+0x26c>
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	2201      	movs	r2, #1
 8015970:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	2203      	movs	r2, #3
 8015978:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	2200      	movs	r2, #0
 8015980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	68ba      	ldr	r2, [r7, #8]
 8015988:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	88fa      	ldrh	r2, [r7, #6]
 801598e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	88fa      	ldrh	r2, [r7, #6]
 8015996:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2200      	movs	r2, #0
 801599e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	2200      	movs	r2, #0
 80159a4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	2200      	movs	r2, #0
 80159aa:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	2200      	movs	r2, #0
 80159b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	2200      	movs	r2, #0
 80159b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	689b      	ldr	r3, [r3, #8]
 80159c0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80159c4:	d108      	bne.n	80159d8 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	681a      	ldr	r2, [r3, #0]
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80159d4:	601a      	str	r2, [r3, #0]
 80159d6:	e009      	b.n	80159ec <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	68db      	ldr	r3, [r3, #12]
 80159de:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80159ea:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	2b0f      	cmp	r3, #15
 80159f2:	d905      	bls.n	8015a00 <HAL_SPI_Transmit_DMA+0xd0>
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80159f8:	699b      	ldr	r3, [r3, #24]
 80159fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80159fe:	d10f      	bne.n	8015a20 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015a04:	2b07      	cmp	r3, #7
 8015a06:	d911      	bls.n	8015a2c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a0c:	699b      	ldr	r3, [r3, #24]
 8015a0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015a12:	d00b      	beq.n	8015a2c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a18:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015a1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a1e:	d005      	beq.n	8015a2c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	2200      	movs	r2, #0
 8015a24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8015a28:	2301      	movs	r3, #1
 8015a2a:	e0b7      	b.n	8015b9c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	68db      	ldr	r3, [r3, #12]
 8015a30:	2b07      	cmp	r3, #7
 8015a32:	d820      	bhi.n	8015a76 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a38:	699b      	ldr	r3, [r3, #24]
 8015a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015a3e:	d109      	bne.n	8015a54 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	3301      	adds	r3, #1
 8015a4a:	105b      	asrs	r3, r3, #1
 8015a4c:	b29a      	uxth	r2, r3
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a58:	699b      	ldr	r3, [r3, #24]
 8015a5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a5e:	d11e      	bne.n	8015a9e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015a66:	b29b      	uxth	r3, r3
 8015a68:	3303      	adds	r3, #3
 8015a6a:	109b      	asrs	r3, r3, #2
 8015a6c:	b29a      	uxth	r2, r3
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015a74:	e013      	b.n	8015a9e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	68db      	ldr	r3, [r3, #12]
 8015a7a:	2b0f      	cmp	r3, #15
 8015a7c:	d80f      	bhi.n	8015a9e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015a82:	699b      	ldr	r3, [r3, #24]
 8015a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015a88:	d109      	bne.n	8015a9e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015a90:	b29b      	uxth	r3, r3
 8015a92:	3301      	adds	r3, #1
 8015a94:	105b      	asrs	r3, r3, #1
 8015a96:	b29a      	uxth	r2, r3
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015aa2:	4a40      	ldr	r2, [pc, #256]	@ (8015ba4 <HAL_SPI_Transmit_DMA+0x274>)
 8015aa4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015aaa:	4a3f      	ldr	r2, [pc, #252]	@ (8015ba8 <HAL_SPI_Transmit_DMA+0x278>)
 8015aac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ab2:	4a3e      	ldr	r2, [pc, #248]	@ (8015bac <HAL_SPI_Transmit_DMA+0x27c>)
 8015ab4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015aba:	2200      	movs	r2, #0
 8015abc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	689a      	ldr	r2, [r3, #8]
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015acc:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	3320      	adds	r3, #32
 8015ade:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015ae6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015ae8:	f7f6 f972 	bl	800bdd0 <HAL_DMA_Start_IT>
 8015aec:	4603      	mov	r3, r0
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d011      	beq.n	8015b16 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015af8:	f043 0210 	orr.w	r2, r3, #16
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	2201      	movs	r2, #1
 8015b06:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	2200      	movs	r2, #0
 8015b0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8015b12:	2301      	movs	r3, #1
 8015b14:	e042      	b.n	8015b9c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015b1a:	69db      	ldr	r3, [r3, #28]
 8015b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015b20:	d108      	bne.n	8015b34 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	6859      	ldr	r1, [r3, #4]
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	681a      	ldr	r2, [r3, #0]
 8015b2c:	4b20      	ldr	r3, [pc, #128]	@ (8015bb0 <HAL_SPI_Transmit_DMA+0x280>)
 8015b2e:	400b      	ands	r3, r1
 8015b30:	6053      	str	r3, [r2, #4]
 8015b32:	e009      	b.n	8015b48 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	685a      	ldr	r2, [r3, #4]
 8015b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8015bb0 <HAL_SPI_Transmit_DMA+0x280>)
 8015b3c:	4013      	ands	r3, r2
 8015b3e:	88f9      	ldrh	r1, [r7, #6]
 8015b40:	68fa      	ldr	r2, [r7, #12]
 8015b42:	6812      	ldr	r2, [r2, #0]
 8015b44:	430b      	orrs	r3, r1
 8015b46:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	689a      	ldr	r2, [r3, #8]
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015b56:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	691a      	ldr	r2, [r3, #16]
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8015b66:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	681a      	ldr	r2, [r3, #0]
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	f042 0201 	orr.w	r2, r2, #1
 8015b76:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	685b      	ldr	r3, [r3, #4]
 8015b7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8015b80:	d107      	bne.n	8015b92 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	681a      	ldr	r2, [r3, #0]
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015b90:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	2200      	movs	r2, #0
 8015b96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015b9a:	2300      	movs	r3, #0
}
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	3710      	adds	r7, #16
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd80      	pop	{r7, pc}
 8015ba4:	0801600f 	.word	0x0801600f
 8015ba8:	08015fc9 	.word	0x08015fc9
 8015bac:	0801602b 	.word	0x0801602b
 8015bb0:	ffff0000 	.word	0xffff0000

08015bb4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b08a      	sub	sp, #40	@ 0x28
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	691b      	ldr	r3, [r3, #16]
 8015bc2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	695b      	ldr	r3, [r3, #20]
 8015bca:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015bcc:	6a3a      	ldr	r2, [r7, #32]
 8015bce:	69fb      	ldr	r3, [r7, #28]
 8015bd0:	4013      	ands	r3, r2
 8015bd2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	689b      	ldr	r3, [r3, #8]
 8015bda:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015bdc:	2300      	movs	r3, #0
 8015bde:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015be6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	3330      	adds	r3, #48	@ 0x30
 8015bee:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8015bf0:	69fb      	ldr	r3, [r7, #28]
 8015bf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d010      	beq.n	8015c1c <HAL_SPI_IRQHandler+0x68>
 8015bfa:	6a3b      	ldr	r3, [r7, #32]
 8015bfc:	f003 0308 	and.w	r3, r3, #8
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d00b      	beq.n	8015c1c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	699a      	ldr	r2, [r3, #24]
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015c12:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f000 f9cd 	bl	8015fb4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8015c1a:	e192      	b.n	8015f42 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015c1c:	69bb      	ldr	r3, [r7, #24]
 8015c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d113      	bne.n	8015c4e <HAL_SPI_IRQHandler+0x9a>
 8015c26:	69bb      	ldr	r3, [r7, #24]
 8015c28:	f003 0320 	and.w	r3, r3, #32
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d10e      	bne.n	8015c4e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8015c30:	69bb      	ldr	r3, [r7, #24]
 8015c32:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d009      	beq.n	8015c4e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	4798      	blx	r3
    hspi->RxISR(hspi);
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	4798      	blx	r3
    handled = 1UL;
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015c4e:	69bb      	ldr	r3, [r7, #24]
 8015c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d10f      	bne.n	8015c78 <HAL_SPI_IRQHandler+0xc4>
 8015c58:	69bb      	ldr	r3, [r7, #24]
 8015c5a:	f003 0301 	and.w	r3, r3, #1
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d00a      	beq.n	8015c78 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015c62:	69bb      	ldr	r3, [r7, #24]
 8015c64:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d105      	bne.n	8015c78 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c70:	6878      	ldr	r0, [r7, #4]
 8015c72:	4798      	blx	r3
    handled = 1UL;
 8015c74:	2301      	movs	r3, #1
 8015c76:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015c78:	69bb      	ldr	r3, [r7, #24]
 8015c7a:	f003 0320 	and.w	r3, r3, #32
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d10f      	bne.n	8015ca2 <HAL_SPI_IRQHandler+0xee>
 8015c82:	69bb      	ldr	r3, [r7, #24]
 8015c84:	f003 0302 	and.w	r3, r3, #2
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d00a      	beq.n	8015ca2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015c8c:	69bb      	ldr	r3, [r7, #24]
 8015c8e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d105      	bne.n	8015ca2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015c9a:	6878      	ldr	r0, [r7, #4]
 8015c9c:	4798      	blx	r3
    handled = 1UL;
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8015ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	f040 8147 	bne.w	8015f38 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015caa:	69bb      	ldr	r3, [r7, #24]
 8015cac:	f003 0308 	and.w	r3, r3, #8
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	f000 808b 	beq.w	8015dcc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	699a      	ldr	r2, [r3, #24]
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	f042 0208 	orr.w	r2, r2, #8
 8015cc4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	699a      	ldr	r2, [r3, #24]
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	f042 0210 	orr.w	r2, r2, #16
 8015cd4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	699a      	ldr	r2, [r3, #24]
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015ce4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	691a      	ldr	r2, [r3, #16]
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	f022 0208 	bic.w	r2, r2, #8
 8015cf4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	689b      	ldr	r3, [r3, #8]
 8015cfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d13d      	bne.n	8015d80 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015d04:	e036      	b.n	8015d74 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	68db      	ldr	r3, [r3, #12]
 8015d0a:	2b0f      	cmp	r3, #15
 8015d0c:	d90b      	bls.n	8015d26 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681a      	ldr	r2, [r3, #0]
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015d18:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d1e:	1d1a      	adds	r2, r3, #4
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	665a      	str	r2, [r3, #100]	@ 0x64
 8015d24:	e01d      	b.n	8015d62 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	68db      	ldr	r3, [r3, #12]
 8015d2a:	2b07      	cmp	r3, #7
 8015d2c:	d90b      	bls.n	8015d46 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d32:	68fa      	ldr	r2, [r7, #12]
 8015d34:	8812      	ldrh	r2, [r2, #0]
 8015d36:	b292      	uxth	r2, r2
 8015d38:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d3e:	1c9a      	adds	r2, r3, #2
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	665a      	str	r2, [r3, #100]	@ 0x64
 8015d44:	e00d      	b.n	8015d62 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d52:	7812      	ldrb	r2, [r2, #0]
 8015d54:	b2d2      	uxtb	r2, r2
 8015d56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015d5c:	1c5a      	adds	r2, r3, #1
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015d68:	b29b      	uxth	r3, r3
 8015d6a:	3b01      	subs	r3, #1
 8015d6c:	b29a      	uxth	r2, r3
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015d7a:	b29b      	uxth	r3, r3
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d1c2      	bne.n	8015d06 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f000 f98f 	bl	80160a4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	2201      	movs	r2, #1
 8015d8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d003      	beq.n	8015da0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	f000 f901 	bl	8015fa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8015d9e:	e0d0      	b.n	8015f42 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8015da0:	7cfb      	ldrb	r3, [r7, #19]
 8015da2:	2b05      	cmp	r3, #5
 8015da4:	d103      	bne.n	8015dae <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	f000 f8e6 	bl	8015f78 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015dac:	e0c6      	b.n	8015f3c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8015dae:	7cfb      	ldrb	r3, [r7, #19]
 8015db0:	2b04      	cmp	r3, #4
 8015db2:	d103      	bne.n	8015dbc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f000 f8d5 	bl	8015f64 <HAL_SPI_RxCpltCallback>
    return;
 8015dba:	e0bf      	b.n	8015f3c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015dbc:	7cfb      	ldrb	r3, [r7, #19]
 8015dbe:	2b03      	cmp	r3, #3
 8015dc0:	f040 80bc 	bne.w	8015f3c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015dc4:	6878      	ldr	r0, [r7, #4]
 8015dc6:	f000 f8c3 	bl	8015f50 <HAL_SPI_TxCpltCallback>
    return;
 8015dca:	e0b7      	b.n	8015f3c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015dcc:	69bb      	ldr	r3, [r7, #24]
 8015dce:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	f000 80b5 	beq.w	8015f42 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015dd8:	69bb      	ldr	r3, [r7, #24]
 8015dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d00f      	beq.n	8015e02 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015de8:	f043 0204 	orr.w	r2, r3, #4
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	699a      	ldr	r2, [r3, #24]
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015e00:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8015e02:	69bb      	ldr	r3, [r7, #24]
 8015e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d00f      	beq.n	8015e2c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e12:	f043 0201 	orr.w	r2, r3, #1
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	699a      	ldr	r2, [r3, #24]
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015e2a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8015e2c:	69bb      	ldr	r3, [r7, #24]
 8015e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d00f      	beq.n	8015e56 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e3c:	f043 0208 	orr.w	r2, r3, #8
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	699a      	ldr	r2, [r3, #24]
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015e54:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8015e56:	69bb      	ldr	r3, [r7, #24]
 8015e58:	f003 0320 	and.w	r3, r3, #32
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d00f      	beq.n	8015e80 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	699a      	ldr	r2, [r3, #24]
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	f042 0220 	orr.w	r2, r2, #32
 8015e7e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d05a      	beq.n	8015f40 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	681a      	ldr	r2, [r3, #0]
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	f022 0201 	bic.w	r2, r2, #1
 8015e98:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	6919      	ldr	r1, [r3, #16]
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681a      	ldr	r2, [r3, #0]
 8015ea4:	4b28      	ldr	r3, [pc, #160]	@ (8015f48 <HAL_SPI_IRQHandler+0x394>)
 8015ea6:	400b      	ands	r3, r1
 8015ea8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015eaa:	697b      	ldr	r3, [r7, #20]
 8015eac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8015eb0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015eb4:	d138      	bne.n	8015f28 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	689a      	ldr	r2, [r3, #8]
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015ec4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d013      	beq.n	8015ef6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8015f4c <HAL_SPI_IRQHandler+0x398>)
 8015ed4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015eda:	4618      	mov	r0, r3
 8015edc:	f7f6 fd00 	bl	800c8e0 <HAL_DMA_Abort_IT>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d007      	beq.n	8015ef6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015eec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d020      	beq.n	8015f40 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f02:	4a12      	ldr	r2, [pc, #72]	@ (8015f4c <HAL_SPI_IRQHandler+0x398>)
 8015f04:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f7f6 fce8 	bl	800c8e0 <HAL_DMA_Abort_IT>
 8015f10:	4603      	mov	r3, r0
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d014      	beq.n	8015f40 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015f1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8015f26:	e00b      	b.n	8015f40 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	2201      	movs	r2, #1
 8015f2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 f835 	bl	8015fa0 <HAL_SPI_ErrorCallback>
    return;
 8015f36:	e003      	b.n	8015f40 <HAL_SPI_IRQHandler+0x38c>
    return;
 8015f38:	bf00      	nop
 8015f3a:	e002      	b.n	8015f42 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015f3c:	bf00      	nop
 8015f3e:	e000      	b.n	8015f42 <HAL_SPI_IRQHandler+0x38e>
    return;
 8015f40:	bf00      	nop
  }
}
 8015f42:	3728      	adds	r7, #40	@ 0x28
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd80      	pop	{r7, pc}
 8015f48:	fffffc94 	.word	0xfffffc94
 8015f4c:	08016071 	.word	0x08016071

08015f50 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015f50:	b480      	push	{r7}
 8015f52:	b083      	sub	sp, #12
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8015f58:	bf00      	nop
 8015f5a:	370c      	adds	r7, #12
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f62:	4770      	bx	lr

08015f64 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015f64:	b480      	push	{r7}
 8015f66:	b083      	sub	sp, #12
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8015f6c:	bf00      	nop
 8015f6e:	370c      	adds	r7, #12
 8015f70:	46bd      	mov	sp, r7
 8015f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f76:	4770      	bx	lr

08015f78 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015f78:	b480      	push	{r7}
 8015f7a:	b083      	sub	sp, #12
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8015f80:	bf00      	nop
 8015f82:	370c      	adds	r7, #12
 8015f84:	46bd      	mov	sp, r7
 8015f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8a:	4770      	bx	lr

08015f8c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015f8c:	b480      	push	{r7}
 8015f8e:	b083      	sub	sp, #12
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015f94:	bf00      	nop
 8015f96:	370c      	adds	r7, #12
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9e:	4770      	bx	lr

08015fa0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015fa0:	b480      	push	{r7}
 8015fa2:	b083      	sub	sp, #12
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015fa8:	bf00      	nop
 8015faa:	370c      	adds	r7, #12
 8015fac:	46bd      	mov	sp, r7
 8015fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb2:	4770      	bx	lr

08015fb4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015fb4:	b480      	push	{r7}
 8015fb6:	b083      	sub	sp, #12
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8015fbc:	bf00      	nop
 8015fbe:	370c      	adds	r7, #12
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc6:	4770      	bx	lr

08015fc8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b084      	sub	sp, #16
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015fd4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015fdc:	b2db      	uxtb	r3, r3
 8015fde:	2b07      	cmp	r3, #7
 8015fe0:	d011      	beq.n	8016006 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015fe6:	69db      	ldr	r3, [r3, #28]
 8015fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015fec:	d103      	bne.n	8015ff6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8015fee:	68f8      	ldr	r0, [r7, #12]
 8015ff0:	f7ff ffae 	bl	8015f50 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015ff4:	e007      	b.n	8016006 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	691a      	ldr	r2, [r3, #16]
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	f042 0208 	orr.w	r2, r2, #8
 8016004:	611a      	str	r2, [r3, #16]
}
 8016006:	bf00      	nop
 8016008:	3710      	adds	r7, #16
 801600a:	46bd      	mov	sp, r7
 801600c:	bd80      	pop	{r7, pc}

0801600e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801600e:	b580      	push	{r7, lr}
 8016010:	b084      	sub	sp, #16
 8016012:	af00      	add	r7, sp, #0
 8016014:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801601a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 801601c:	68f8      	ldr	r0, [r7, #12]
 801601e:	f7ff ffb5 	bl	8015f8c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8016022:	bf00      	nop
 8016024:	3710      	adds	r7, #16
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}

0801602a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801602a:	b580      	push	{r7, lr}
 801602c:	b084      	sub	sp, #16
 801602e:	af00      	add	r7, sp, #0
 8016030:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016036:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f7f7 fdcf 	bl	800dbdc <HAL_DMA_GetError>
 801603e:	4603      	mov	r3, r0
 8016040:	2b02      	cmp	r3, #2
 8016042:	d011      	beq.n	8016068 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8016044:	68f8      	ldr	r0, [r7, #12]
 8016046:	f000 f82d 	bl	80160a4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016050:	f043 0210 	orr.w	r2, r3, #16
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	2201      	movs	r2, #1
 801605e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8016062:	68f8      	ldr	r0, [r7, #12]
 8016064:	f7ff ff9c 	bl	8015fa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8016068:	bf00      	nop
 801606a:	3710      	adds	r7, #16
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}

08016070 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b084      	sub	sp, #16
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801607c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	2200      	movs	r2, #0
 8016082:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	2200      	movs	r2, #0
 801608a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	2201      	movs	r2, #1
 8016092:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8016096:	68f8      	ldr	r0, [r7, #12]
 8016098:	f7ff ff82 	bl	8015fa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801609c:	bf00      	nop
 801609e:	3710      	adds	r7, #16
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}

080160a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80160a4:	b480      	push	{r7}
 80160a6:	b085      	sub	sp, #20
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	695b      	ldr	r3, [r3, #20]
 80160b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	699a      	ldr	r2, [r3, #24]
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	f042 0208 	orr.w	r2, r2, #8
 80160c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	699a      	ldr	r2, [r3, #24]
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	f042 0210 	orr.w	r2, r2, #16
 80160d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	681a      	ldr	r2, [r3, #0]
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	f022 0201 	bic.w	r2, r2, #1
 80160e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	6919      	ldr	r1, [r3, #16]
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681a      	ldr	r2, [r3, #0]
 80160ee:	4b3c      	ldr	r3, [pc, #240]	@ (80161e0 <SPI_CloseTransfer+0x13c>)
 80160f0:	400b      	ands	r3, r1
 80160f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	689a      	ldr	r2, [r3, #8]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8016102:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801610a:	b2db      	uxtb	r3, r3
 801610c:	2b04      	cmp	r3, #4
 801610e:	d014      	beq.n	801613a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	f003 0320 	and.w	r3, r3, #32
 8016116:	2b00      	cmp	r3, #0
 8016118:	d00f      	beq.n	801613a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016120:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	699a      	ldr	r2, [r3, #24]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	f042 0220 	orr.w	r2, r2, #32
 8016138:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8016140:	b2db      	uxtb	r3, r3
 8016142:	2b03      	cmp	r3, #3
 8016144:	d014      	beq.n	8016170 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801614c:	2b00      	cmp	r3, #0
 801614e:	d00f      	beq.n	8016170 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016156:	f043 0204 	orr.w	r2, r3, #4
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	699a      	ldr	r2, [r3, #24]
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801616e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016176:	2b00      	cmp	r3, #0
 8016178:	d00f      	beq.n	801619a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016180:	f043 0201 	orr.w	r2, r3, #1
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	699a      	ldr	r2, [r3, #24]
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016198:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d00f      	beq.n	80161c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161aa:	f043 0208 	orr.w	r2, r3, #8
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	699a      	ldr	r2, [r3, #24]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80161c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2200      	movs	r2, #0
 80161c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	2200      	movs	r2, #0
 80161d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80161d4:	bf00      	nop
 80161d6:	3714      	adds	r7, #20
 80161d8:	46bd      	mov	sp, r7
 80161da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161de:	4770      	bx	lr
 80161e0:	fffffc90 	.word	0xfffffc90

080161e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b084      	sub	sp, #16
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	60f8      	str	r0, [r7, #12]
 80161ec:	60b9      	str	r1, [r7, #8]
 80161ee:	603b      	str	r3, [r7, #0]
 80161f0:	4613      	mov	r3, r2
 80161f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80161f4:	e010      	b.n	8016218 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80161f6:	f7f3 f95d 	bl	80094b4 <HAL_GetTick>
 80161fa:	4602      	mov	r2, r0
 80161fc:	69bb      	ldr	r3, [r7, #24]
 80161fe:	1ad3      	subs	r3, r2, r3
 8016200:	683a      	ldr	r2, [r7, #0]
 8016202:	429a      	cmp	r2, r3
 8016204:	d803      	bhi.n	801620e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801620c:	d102      	bne.n	8016214 <SPI_WaitOnFlagUntilTimeout+0x30>
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d101      	bne.n	8016218 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8016214:	2303      	movs	r3, #3
 8016216:	e00f      	b.n	8016238 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	695a      	ldr	r2, [r3, #20]
 801621e:	68bb      	ldr	r3, [r7, #8]
 8016220:	4013      	ands	r3, r2
 8016222:	68ba      	ldr	r2, [r7, #8]
 8016224:	429a      	cmp	r2, r3
 8016226:	bf0c      	ite	eq
 8016228:	2301      	moveq	r3, #1
 801622a:	2300      	movne	r3, #0
 801622c:	b2db      	uxtb	r3, r3
 801622e:	461a      	mov	r2, r3
 8016230:	79fb      	ldrb	r3, [r7, #7]
 8016232:	429a      	cmp	r2, r3
 8016234:	d0df      	beq.n	80161f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8016236:	2300      	movs	r3, #0
}
 8016238:	4618      	mov	r0, r3
 801623a:	3710      	adds	r7, #16
 801623c:	46bd      	mov	sp, r7
 801623e:	bd80      	pop	{r7, pc}

08016240 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8016240:	b480      	push	{r7}
 8016242:	b085      	sub	sp, #20
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801624c:	095b      	lsrs	r3, r3, #5
 801624e:	3301      	adds	r3, #1
 8016250:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	68db      	ldr	r3, [r3, #12]
 8016256:	3301      	adds	r3, #1
 8016258:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801625a:	68bb      	ldr	r3, [r7, #8]
 801625c:	3307      	adds	r3, #7
 801625e:	08db      	lsrs	r3, r3, #3
 8016260:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8016262:	68bb      	ldr	r3, [r7, #8]
 8016264:	68fa      	ldr	r2, [r7, #12]
 8016266:	fb02 f303 	mul.w	r3, r2, r3
}
 801626a:	4618      	mov	r0, r3
 801626c:	3714      	adds	r7, #20
 801626e:	46bd      	mov	sp, r7
 8016270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016274:	4770      	bx	lr

08016276 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016276:	b580      	push	{r7, lr}
 8016278:	b082      	sub	sp, #8
 801627a:	af00      	add	r7, sp, #0
 801627c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d101      	bne.n	8016288 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016284:	2301      	movs	r3, #1
 8016286:	e049      	b.n	801631c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801628e:	b2db      	uxtb	r3, r3
 8016290:	2b00      	cmp	r3, #0
 8016292:	d106      	bne.n	80162a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2200      	movs	r2, #0
 8016298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f7f2 ff13 	bl	80090c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2202      	movs	r2, #2
 80162a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	681a      	ldr	r2, [r3, #0]
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	3304      	adds	r3, #4
 80162b2:	4619      	mov	r1, r3
 80162b4:	4610      	mov	r0, r2
 80162b6:	f000 fedb 	bl	8017070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2201      	movs	r2, #1
 80162be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	2201      	movs	r2, #1
 80162c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	2201      	movs	r2, #1
 80162ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	2201      	movs	r2, #1
 80162d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	2201      	movs	r2, #1
 80162de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	2201      	movs	r2, #1
 80162e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	2201      	movs	r2, #1
 80162ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	2201      	movs	r2, #1
 80162f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2201      	movs	r2, #1
 80162fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	2201      	movs	r2, #1
 8016306:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2201      	movs	r2, #1
 801630e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2201      	movs	r2, #1
 8016316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801631a:	2300      	movs	r3, #0
}
 801631c:	4618      	mov	r0, r3
 801631e:	3708      	adds	r7, #8
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}

08016324 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016324:	b480      	push	{r7}
 8016326:	b085      	sub	sp, #20
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016332:	b2db      	uxtb	r3, r3
 8016334:	2b01      	cmp	r3, #1
 8016336:	d001      	beq.n	801633c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016338:	2301      	movs	r3, #1
 801633a:	e056      	b.n	80163ea <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2202      	movs	r2, #2
 8016340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	4a2b      	ldr	r2, [pc, #172]	@ (80163f8 <HAL_TIM_Base_Start+0xd4>)
 801634a:	4293      	cmp	r3, r2
 801634c:	d02c      	beq.n	80163a8 <HAL_TIM_Base_Start+0x84>
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016356:	d027      	beq.n	80163a8 <HAL_TIM_Base_Start+0x84>
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	4a27      	ldr	r2, [pc, #156]	@ (80163fc <HAL_TIM_Base_Start+0xd8>)
 801635e:	4293      	cmp	r3, r2
 8016360:	d022      	beq.n	80163a8 <HAL_TIM_Base_Start+0x84>
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	4a26      	ldr	r2, [pc, #152]	@ (8016400 <HAL_TIM_Base_Start+0xdc>)
 8016368:	4293      	cmp	r3, r2
 801636a:	d01d      	beq.n	80163a8 <HAL_TIM_Base_Start+0x84>
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	4a24      	ldr	r2, [pc, #144]	@ (8016404 <HAL_TIM_Base_Start+0xe0>)
 8016372:	4293      	cmp	r3, r2
 8016374:	d018      	beq.n	80163a8 <HAL_TIM_Base_Start+0x84>
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	4a23      	ldr	r2, [pc, #140]	@ (8016408 <HAL_TIM_Base_Start+0xe4>)
 801637c:	4293      	cmp	r3, r2
 801637e:	d013      	beq.n	80163a8 <HAL_TIM_Base_Start+0x84>
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	4a21      	ldr	r2, [pc, #132]	@ (801640c <HAL_TIM_Base_Start+0xe8>)
 8016386:	4293      	cmp	r3, r2
 8016388:	d00e      	beq.n	80163a8 <HAL_TIM_Base_Start+0x84>
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	4a20      	ldr	r2, [pc, #128]	@ (8016410 <HAL_TIM_Base_Start+0xec>)
 8016390:	4293      	cmp	r3, r2
 8016392:	d009      	beq.n	80163a8 <HAL_TIM_Base_Start+0x84>
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	4a1e      	ldr	r2, [pc, #120]	@ (8016414 <HAL_TIM_Base_Start+0xf0>)
 801639a:	4293      	cmp	r3, r2
 801639c:	d004      	beq.n	80163a8 <HAL_TIM_Base_Start+0x84>
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	4a1d      	ldr	r2, [pc, #116]	@ (8016418 <HAL_TIM_Base_Start+0xf4>)
 80163a4:	4293      	cmp	r3, r2
 80163a6:	d115      	bne.n	80163d4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	689a      	ldr	r2, [r3, #8]
 80163ae:	4b1b      	ldr	r3, [pc, #108]	@ (801641c <HAL_TIM_Base_Start+0xf8>)
 80163b0:	4013      	ands	r3, r2
 80163b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	2b06      	cmp	r3, #6
 80163b8:	d015      	beq.n	80163e6 <HAL_TIM_Base_Start+0xc2>
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80163c0:	d011      	beq.n	80163e6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	681a      	ldr	r2, [r3, #0]
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	f042 0201 	orr.w	r2, r2, #1
 80163d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80163d2:	e008      	b.n	80163e6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	681a      	ldr	r2, [r3, #0]
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	f042 0201 	orr.w	r2, r2, #1
 80163e2:	601a      	str	r2, [r3, #0]
 80163e4:	e000      	b.n	80163e8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80163e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80163e8:	2300      	movs	r3, #0
}
 80163ea:	4618      	mov	r0, r3
 80163ec:	3714      	adds	r7, #20
 80163ee:	46bd      	mov	sp, r7
 80163f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f4:	4770      	bx	lr
 80163f6:	bf00      	nop
 80163f8:	40010000 	.word	0x40010000
 80163fc:	40000400 	.word	0x40000400
 8016400:	40000800 	.word	0x40000800
 8016404:	40000c00 	.word	0x40000c00
 8016408:	40010400 	.word	0x40010400
 801640c:	40001800 	.word	0x40001800
 8016410:	40014000 	.word	0x40014000
 8016414:	4000e000 	.word	0x4000e000
 8016418:	4000e400 	.word	0x4000e400
 801641c:	00010007 	.word	0x00010007

08016420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016420:	b480      	push	{r7}
 8016422:	b085      	sub	sp, #20
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801642e:	b2db      	uxtb	r3, r3
 8016430:	2b01      	cmp	r3, #1
 8016432:	d001      	beq.n	8016438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8016434:	2301      	movs	r3, #1
 8016436:	e05e      	b.n	80164f6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2202      	movs	r2, #2
 801643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	68da      	ldr	r2, [r3, #12]
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	f042 0201 	orr.w	r2, r2, #1
 801644e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	4a2b      	ldr	r2, [pc, #172]	@ (8016504 <HAL_TIM_Base_Start_IT+0xe4>)
 8016456:	4293      	cmp	r3, r2
 8016458:	d02c      	beq.n	80164b4 <HAL_TIM_Base_Start_IT+0x94>
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016462:	d027      	beq.n	80164b4 <HAL_TIM_Base_Start_IT+0x94>
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	4a27      	ldr	r2, [pc, #156]	@ (8016508 <HAL_TIM_Base_Start_IT+0xe8>)
 801646a:	4293      	cmp	r3, r2
 801646c:	d022      	beq.n	80164b4 <HAL_TIM_Base_Start_IT+0x94>
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	4a26      	ldr	r2, [pc, #152]	@ (801650c <HAL_TIM_Base_Start_IT+0xec>)
 8016474:	4293      	cmp	r3, r2
 8016476:	d01d      	beq.n	80164b4 <HAL_TIM_Base_Start_IT+0x94>
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	4a24      	ldr	r2, [pc, #144]	@ (8016510 <HAL_TIM_Base_Start_IT+0xf0>)
 801647e:	4293      	cmp	r3, r2
 8016480:	d018      	beq.n	80164b4 <HAL_TIM_Base_Start_IT+0x94>
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	4a23      	ldr	r2, [pc, #140]	@ (8016514 <HAL_TIM_Base_Start_IT+0xf4>)
 8016488:	4293      	cmp	r3, r2
 801648a:	d013      	beq.n	80164b4 <HAL_TIM_Base_Start_IT+0x94>
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	4a21      	ldr	r2, [pc, #132]	@ (8016518 <HAL_TIM_Base_Start_IT+0xf8>)
 8016492:	4293      	cmp	r3, r2
 8016494:	d00e      	beq.n	80164b4 <HAL_TIM_Base_Start_IT+0x94>
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	4a20      	ldr	r2, [pc, #128]	@ (801651c <HAL_TIM_Base_Start_IT+0xfc>)
 801649c:	4293      	cmp	r3, r2
 801649e:	d009      	beq.n	80164b4 <HAL_TIM_Base_Start_IT+0x94>
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	4a1e      	ldr	r2, [pc, #120]	@ (8016520 <HAL_TIM_Base_Start_IT+0x100>)
 80164a6:	4293      	cmp	r3, r2
 80164a8:	d004      	beq.n	80164b4 <HAL_TIM_Base_Start_IT+0x94>
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	4a1d      	ldr	r2, [pc, #116]	@ (8016524 <HAL_TIM_Base_Start_IT+0x104>)
 80164b0:	4293      	cmp	r3, r2
 80164b2:	d115      	bne.n	80164e0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	689a      	ldr	r2, [r3, #8]
 80164ba:	4b1b      	ldr	r3, [pc, #108]	@ (8016528 <HAL_TIM_Base_Start_IT+0x108>)
 80164bc:	4013      	ands	r3, r2
 80164be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	2b06      	cmp	r3, #6
 80164c4:	d015      	beq.n	80164f2 <HAL_TIM_Base_Start_IT+0xd2>
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80164cc:	d011      	beq.n	80164f2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	681a      	ldr	r2, [r3, #0]
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	f042 0201 	orr.w	r2, r2, #1
 80164dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80164de:	e008      	b.n	80164f2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	681a      	ldr	r2, [r3, #0]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	f042 0201 	orr.w	r2, r2, #1
 80164ee:	601a      	str	r2, [r3, #0]
 80164f0:	e000      	b.n	80164f4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80164f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80164f4:	2300      	movs	r3, #0
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3714      	adds	r7, #20
 80164fa:	46bd      	mov	sp, r7
 80164fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016500:	4770      	bx	lr
 8016502:	bf00      	nop
 8016504:	40010000 	.word	0x40010000
 8016508:	40000400 	.word	0x40000400
 801650c:	40000800 	.word	0x40000800
 8016510:	40000c00 	.word	0x40000c00
 8016514:	40010400 	.word	0x40010400
 8016518:	40001800 	.word	0x40001800
 801651c:	40014000 	.word	0x40014000
 8016520:	4000e000 	.word	0x4000e000
 8016524:	4000e400 	.word	0x4000e400
 8016528:	00010007 	.word	0x00010007

0801652c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d101      	bne.n	801653e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801653a:	2301      	movs	r3, #1
 801653c:	e049      	b.n	80165d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016544:	b2db      	uxtb	r3, r3
 8016546:	2b00      	cmp	r3, #0
 8016548:	d106      	bne.n	8016558 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	2200      	movs	r2, #0
 801654e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f7f2 fd2e 	bl	8008fb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	2202      	movs	r2, #2
 801655c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	681a      	ldr	r2, [r3, #0]
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	3304      	adds	r3, #4
 8016568:	4619      	mov	r1, r3
 801656a:	4610      	mov	r0, r2
 801656c:	f000 fd80 	bl	8017070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2201      	movs	r2, #1
 8016574:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	2201      	movs	r2, #1
 801657c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	2201      	movs	r2, #1
 8016584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	2201      	movs	r2, #1
 801658c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2201      	movs	r2, #1
 8016594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2201      	movs	r2, #1
 801659c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	2201      	movs	r2, #1
 80165a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2201      	movs	r2, #1
 80165ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2201      	movs	r2, #1
 80165b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2201      	movs	r2, #1
 80165bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	2201      	movs	r2, #1
 80165c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2201      	movs	r2, #1
 80165cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80165d0:	2300      	movs	r3, #0
}
 80165d2:	4618      	mov	r0, r3
 80165d4:	3708      	adds	r7, #8
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}
	...

080165dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b084      	sub	sp, #16
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
 80165e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d109      	bne.n	8016600 <HAL_TIM_PWM_Start+0x24>
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80165f2:	b2db      	uxtb	r3, r3
 80165f4:	2b01      	cmp	r3, #1
 80165f6:	bf14      	ite	ne
 80165f8:	2301      	movne	r3, #1
 80165fa:	2300      	moveq	r3, #0
 80165fc:	b2db      	uxtb	r3, r3
 80165fe:	e03c      	b.n	801667a <HAL_TIM_PWM_Start+0x9e>
 8016600:	683b      	ldr	r3, [r7, #0]
 8016602:	2b04      	cmp	r3, #4
 8016604:	d109      	bne.n	801661a <HAL_TIM_PWM_Start+0x3e>
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 801660c:	b2db      	uxtb	r3, r3
 801660e:	2b01      	cmp	r3, #1
 8016610:	bf14      	ite	ne
 8016612:	2301      	movne	r3, #1
 8016614:	2300      	moveq	r3, #0
 8016616:	b2db      	uxtb	r3, r3
 8016618:	e02f      	b.n	801667a <HAL_TIM_PWM_Start+0x9e>
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	2b08      	cmp	r3, #8
 801661e:	d109      	bne.n	8016634 <HAL_TIM_PWM_Start+0x58>
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016626:	b2db      	uxtb	r3, r3
 8016628:	2b01      	cmp	r3, #1
 801662a:	bf14      	ite	ne
 801662c:	2301      	movne	r3, #1
 801662e:	2300      	moveq	r3, #0
 8016630:	b2db      	uxtb	r3, r3
 8016632:	e022      	b.n	801667a <HAL_TIM_PWM_Start+0x9e>
 8016634:	683b      	ldr	r3, [r7, #0]
 8016636:	2b0c      	cmp	r3, #12
 8016638:	d109      	bne.n	801664e <HAL_TIM_PWM_Start+0x72>
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016640:	b2db      	uxtb	r3, r3
 8016642:	2b01      	cmp	r3, #1
 8016644:	bf14      	ite	ne
 8016646:	2301      	movne	r3, #1
 8016648:	2300      	moveq	r3, #0
 801664a:	b2db      	uxtb	r3, r3
 801664c:	e015      	b.n	801667a <HAL_TIM_PWM_Start+0x9e>
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	2b10      	cmp	r3, #16
 8016652:	d109      	bne.n	8016668 <HAL_TIM_PWM_Start+0x8c>
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801665a:	b2db      	uxtb	r3, r3
 801665c:	2b01      	cmp	r3, #1
 801665e:	bf14      	ite	ne
 8016660:	2301      	movne	r3, #1
 8016662:	2300      	moveq	r3, #0
 8016664:	b2db      	uxtb	r3, r3
 8016666:	e008      	b.n	801667a <HAL_TIM_PWM_Start+0x9e>
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801666e:	b2db      	uxtb	r3, r3
 8016670:	2b01      	cmp	r3, #1
 8016672:	bf14      	ite	ne
 8016674:	2301      	movne	r3, #1
 8016676:	2300      	moveq	r3, #0
 8016678:	b2db      	uxtb	r3, r3
 801667a:	2b00      	cmp	r3, #0
 801667c:	d001      	beq.n	8016682 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801667e:	2301      	movs	r3, #1
 8016680:	e0ab      	b.n	80167da <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d104      	bne.n	8016692 <HAL_TIM_PWM_Start+0xb6>
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	2202      	movs	r2, #2
 801668c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016690:	e023      	b.n	80166da <HAL_TIM_PWM_Start+0xfe>
 8016692:	683b      	ldr	r3, [r7, #0]
 8016694:	2b04      	cmp	r3, #4
 8016696:	d104      	bne.n	80166a2 <HAL_TIM_PWM_Start+0xc6>
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2202      	movs	r2, #2
 801669c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80166a0:	e01b      	b.n	80166da <HAL_TIM_PWM_Start+0xfe>
 80166a2:	683b      	ldr	r3, [r7, #0]
 80166a4:	2b08      	cmp	r3, #8
 80166a6:	d104      	bne.n	80166b2 <HAL_TIM_PWM_Start+0xd6>
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2202      	movs	r2, #2
 80166ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80166b0:	e013      	b.n	80166da <HAL_TIM_PWM_Start+0xfe>
 80166b2:	683b      	ldr	r3, [r7, #0]
 80166b4:	2b0c      	cmp	r3, #12
 80166b6:	d104      	bne.n	80166c2 <HAL_TIM_PWM_Start+0xe6>
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2202      	movs	r2, #2
 80166bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80166c0:	e00b      	b.n	80166da <HAL_TIM_PWM_Start+0xfe>
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	2b10      	cmp	r3, #16
 80166c6:	d104      	bne.n	80166d2 <HAL_TIM_PWM_Start+0xf6>
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2202      	movs	r2, #2
 80166cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80166d0:	e003      	b.n	80166da <HAL_TIM_PWM_Start+0xfe>
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	2202      	movs	r2, #2
 80166d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	2201      	movs	r2, #1
 80166e0:	6839      	ldr	r1, [r7, #0]
 80166e2:	4618      	mov	r0, r3
 80166e4:	f001 fa1a 	bl	8017b1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4a3d      	ldr	r2, [pc, #244]	@ (80167e4 <HAL_TIM_PWM_Start+0x208>)
 80166ee:	4293      	cmp	r3, r2
 80166f0:	d013      	beq.n	801671a <HAL_TIM_PWM_Start+0x13e>
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	4a3c      	ldr	r2, [pc, #240]	@ (80167e8 <HAL_TIM_PWM_Start+0x20c>)
 80166f8:	4293      	cmp	r3, r2
 80166fa:	d00e      	beq.n	801671a <HAL_TIM_PWM_Start+0x13e>
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	4a3a      	ldr	r2, [pc, #232]	@ (80167ec <HAL_TIM_PWM_Start+0x210>)
 8016702:	4293      	cmp	r3, r2
 8016704:	d009      	beq.n	801671a <HAL_TIM_PWM_Start+0x13e>
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	4a39      	ldr	r2, [pc, #228]	@ (80167f0 <HAL_TIM_PWM_Start+0x214>)
 801670c:	4293      	cmp	r3, r2
 801670e:	d004      	beq.n	801671a <HAL_TIM_PWM_Start+0x13e>
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	4a37      	ldr	r2, [pc, #220]	@ (80167f4 <HAL_TIM_PWM_Start+0x218>)
 8016716:	4293      	cmp	r3, r2
 8016718:	d101      	bne.n	801671e <HAL_TIM_PWM_Start+0x142>
 801671a:	2301      	movs	r3, #1
 801671c:	e000      	b.n	8016720 <HAL_TIM_PWM_Start+0x144>
 801671e:	2300      	movs	r3, #0
 8016720:	2b00      	cmp	r3, #0
 8016722:	d007      	beq.n	8016734 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016732:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	4a2a      	ldr	r2, [pc, #168]	@ (80167e4 <HAL_TIM_PWM_Start+0x208>)
 801673a:	4293      	cmp	r3, r2
 801673c:	d02c      	beq.n	8016798 <HAL_TIM_PWM_Start+0x1bc>
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016746:	d027      	beq.n	8016798 <HAL_TIM_PWM_Start+0x1bc>
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	4a2a      	ldr	r2, [pc, #168]	@ (80167f8 <HAL_TIM_PWM_Start+0x21c>)
 801674e:	4293      	cmp	r3, r2
 8016750:	d022      	beq.n	8016798 <HAL_TIM_PWM_Start+0x1bc>
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	4a29      	ldr	r2, [pc, #164]	@ (80167fc <HAL_TIM_PWM_Start+0x220>)
 8016758:	4293      	cmp	r3, r2
 801675a:	d01d      	beq.n	8016798 <HAL_TIM_PWM_Start+0x1bc>
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	4a27      	ldr	r2, [pc, #156]	@ (8016800 <HAL_TIM_PWM_Start+0x224>)
 8016762:	4293      	cmp	r3, r2
 8016764:	d018      	beq.n	8016798 <HAL_TIM_PWM_Start+0x1bc>
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	4a1f      	ldr	r2, [pc, #124]	@ (80167e8 <HAL_TIM_PWM_Start+0x20c>)
 801676c:	4293      	cmp	r3, r2
 801676e:	d013      	beq.n	8016798 <HAL_TIM_PWM_Start+0x1bc>
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	4a23      	ldr	r2, [pc, #140]	@ (8016804 <HAL_TIM_PWM_Start+0x228>)
 8016776:	4293      	cmp	r3, r2
 8016778:	d00e      	beq.n	8016798 <HAL_TIM_PWM_Start+0x1bc>
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	4a1b      	ldr	r2, [pc, #108]	@ (80167ec <HAL_TIM_PWM_Start+0x210>)
 8016780:	4293      	cmp	r3, r2
 8016782:	d009      	beq.n	8016798 <HAL_TIM_PWM_Start+0x1bc>
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	4a1f      	ldr	r2, [pc, #124]	@ (8016808 <HAL_TIM_PWM_Start+0x22c>)
 801678a:	4293      	cmp	r3, r2
 801678c:	d004      	beq.n	8016798 <HAL_TIM_PWM_Start+0x1bc>
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	4a1e      	ldr	r2, [pc, #120]	@ (801680c <HAL_TIM_PWM_Start+0x230>)
 8016794:	4293      	cmp	r3, r2
 8016796:	d115      	bne.n	80167c4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	689a      	ldr	r2, [r3, #8]
 801679e:	4b1c      	ldr	r3, [pc, #112]	@ (8016810 <HAL_TIM_PWM_Start+0x234>)
 80167a0:	4013      	ands	r3, r2
 80167a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	2b06      	cmp	r3, #6
 80167a8:	d015      	beq.n	80167d6 <HAL_TIM_PWM_Start+0x1fa>
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80167b0:	d011      	beq.n	80167d6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	f042 0201 	orr.w	r2, r2, #1
 80167c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80167c2:	e008      	b.n	80167d6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	681a      	ldr	r2, [r3, #0]
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	f042 0201 	orr.w	r2, r2, #1
 80167d2:	601a      	str	r2, [r3, #0]
 80167d4:	e000      	b.n	80167d8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80167d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80167d8:	2300      	movs	r3, #0
}
 80167da:	4618      	mov	r0, r3
 80167dc:	3710      	adds	r7, #16
 80167de:	46bd      	mov	sp, r7
 80167e0:	bd80      	pop	{r7, pc}
 80167e2:	bf00      	nop
 80167e4:	40010000 	.word	0x40010000
 80167e8:	40010400 	.word	0x40010400
 80167ec:	40014000 	.word	0x40014000
 80167f0:	40014400 	.word	0x40014400
 80167f4:	40014800 	.word	0x40014800
 80167f8:	40000400 	.word	0x40000400
 80167fc:	40000800 	.word	0x40000800
 8016800:	40000c00 	.word	0x40000c00
 8016804:	40001800 	.word	0x40001800
 8016808:	4000e000 	.word	0x4000e000
 801680c:	4000e400 	.word	0x4000e400
 8016810:	00010007 	.word	0x00010007

08016814 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b082      	sub	sp, #8
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d101      	bne.n	8016826 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8016822:	2301      	movs	r3, #1
 8016824:	e049      	b.n	80168ba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801682c:	b2db      	uxtb	r3, r3
 801682e:	2b00      	cmp	r3, #0
 8016830:	d106      	bne.n	8016840 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	2200      	movs	r2, #0
 8016836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801683a:	6878      	ldr	r0, [r7, #4]
 801683c:	f7f2 fbf4 	bl	8009028 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	2202      	movs	r2, #2
 8016844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681a      	ldr	r2, [r3, #0]
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	3304      	adds	r3, #4
 8016850:	4619      	mov	r1, r3
 8016852:	4610      	mov	r0, r2
 8016854:	f000 fc0c 	bl	8017070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2201      	movs	r2, #1
 801685c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2201      	movs	r2, #1
 8016864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	2201      	movs	r2, #1
 801686c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	2201      	movs	r2, #1
 8016874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	2201      	movs	r2, #1
 801687c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2201      	movs	r2, #1
 8016884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	2201      	movs	r2, #1
 801688c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	2201      	movs	r2, #1
 8016894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2201      	movs	r2, #1
 801689c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	2201      	movs	r2, #1
 80168a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2201      	movs	r2, #1
 80168ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	2201      	movs	r2, #1
 80168b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80168b8:	2300      	movs	r3, #0
}
 80168ba:	4618      	mov	r0, r3
 80168bc:	3708      	adds	r7, #8
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}

080168c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80168c2:	b580      	push	{r7, lr}
 80168c4:	b084      	sub	sp, #16
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	68db      	ldr	r3, [r3, #12]
 80168d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	691b      	ldr	r3, [r3, #16]
 80168d8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80168da:	68bb      	ldr	r3, [r7, #8]
 80168dc:	f003 0302 	and.w	r3, r3, #2
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d020      	beq.n	8016926 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f003 0302 	and.w	r3, r3, #2
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d01b      	beq.n	8016926 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	f06f 0202 	mvn.w	r2, #2
 80168f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	2201      	movs	r2, #1
 80168fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	699b      	ldr	r3, [r3, #24]
 8016904:	f003 0303 	and.w	r3, r3, #3
 8016908:	2b00      	cmp	r3, #0
 801690a:	d003      	beq.n	8016914 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f000 fb91 	bl	8017034 <HAL_TIM_IC_CaptureCallback>
 8016912:	e005      	b.n	8016920 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f000 fb83 	bl	8017020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f000 fb94 	bl	8017048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2200      	movs	r2, #0
 8016924:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8016926:	68bb      	ldr	r3, [r7, #8]
 8016928:	f003 0304 	and.w	r3, r3, #4
 801692c:	2b00      	cmp	r3, #0
 801692e:	d020      	beq.n	8016972 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	f003 0304 	and.w	r3, r3, #4
 8016936:	2b00      	cmp	r3, #0
 8016938:	d01b      	beq.n	8016972 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	f06f 0204 	mvn.w	r2, #4
 8016942:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	2202      	movs	r2, #2
 8016948:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	699b      	ldr	r3, [r3, #24]
 8016950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016954:	2b00      	cmp	r3, #0
 8016956:	d003      	beq.n	8016960 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f000 fb6b 	bl	8017034 <HAL_TIM_IC_CaptureCallback>
 801695e:	e005      	b.n	801696c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016960:	6878      	ldr	r0, [r7, #4]
 8016962:	f000 fb5d 	bl	8017020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016966:	6878      	ldr	r0, [r7, #4]
 8016968:	f000 fb6e 	bl	8017048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	2200      	movs	r2, #0
 8016970:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8016972:	68bb      	ldr	r3, [r7, #8]
 8016974:	f003 0308 	and.w	r3, r3, #8
 8016978:	2b00      	cmp	r3, #0
 801697a:	d020      	beq.n	80169be <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	f003 0308 	and.w	r3, r3, #8
 8016982:	2b00      	cmp	r3, #0
 8016984:	d01b      	beq.n	80169be <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	f06f 0208 	mvn.w	r2, #8
 801698e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2204      	movs	r2, #4
 8016994:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	69db      	ldr	r3, [r3, #28]
 801699c:	f003 0303 	and.w	r3, r3, #3
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d003      	beq.n	80169ac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80169a4:	6878      	ldr	r0, [r7, #4]
 80169a6:	f000 fb45 	bl	8017034 <HAL_TIM_IC_CaptureCallback>
 80169aa:	e005      	b.n	80169b8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f000 fb37 	bl	8017020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80169b2:	6878      	ldr	r0, [r7, #4]
 80169b4:	f000 fb48 	bl	8017048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	2200      	movs	r2, #0
 80169bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	f003 0310 	and.w	r3, r3, #16
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d020      	beq.n	8016a0a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	f003 0310 	and.w	r3, r3, #16
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d01b      	beq.n	8016a0a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	f06f 0210 	mvn.w	r2, #16
 80169da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	2208      	movs	r2, #8
 80169e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	69db      	ldr	r3, [r3, #28]
 80169e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d003      	beq.n	80169f8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80169f0:	6878      	ldr	r0, [r7, #4]
 80169f2:	f000 fb1f 	bl	8017034 <HAL_TIM_IC_CaptureCallback>
 80169f6:	e005      	b.n	8016a04 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80169f8:	6878      	ldr	r0, [r7, #4]
 80169fa:	f000 fb11 	bl	8017020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80169fe:	6878      	ldr	r0, [r7, #4]
 8016a00:	f000 fb22 	bl	8017048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	2200      	movs	r2, #0
 8016a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8016a0a:	68bb      	ldr	r3, [r7, #8]
 8016a0c:	f003 0301 	and.w	r3, r3, #1
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d00c      	beq.n	8016a2e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	f003 0301 	and.w	r3, r3, #1
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d007      	beq.n	8016a2e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	f06f 0201 	mvn.w	r2, #1
 8016a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016a28:	6878      	ldr	r0, [r7, #4]
 8016a2a:	f7ef fadd 	bl	8005fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016a2e:	68bb      	ldr	r3, [r7, #8]
 8016a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d104      	bne.n	8016a42 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8016a38:	68bb      	ldr	r3, [r7, #8]
 8016a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d00c      	beq.n	8016a5c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d007      	beq.n	8016a5c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8016a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016a56:	6878      	ldr	r0, [r7, #4]
 8016a58:	f001 f9b8 	bl	8017dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8016a5c:	68bb      	ldr	r3, [r7, #8]
 8016a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d00c      	beq.n	8016a80 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d007      	beq.n	8016a80 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016a7a:	6878      	ldr	r0, [r7, #4]
 8016a7c:	f001 f9b0 	bl	8017de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8016a80:	68bb      	ldr	r3, [r7, #8]
 8016a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d00c      	beq.n	8016aa4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d007      	beq.n	8016aa4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016a9e:	6878      	ldr	r0, [r7, #4]
 8016aa0:	f000 fadc 	bl	801705c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016aa4:	68bb      	ldr	r3, [r7, #8]
 8016aa6:	f003 0320 	and.w	r3, r3, #32
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d00c      	beq.n	8016ac8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	f003 0320 	and.w	r3, r3, #32
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d007      	beq.n	8016ac8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	f06f 0220 	mvn.w	r2, #32
 8016ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f001 f978 	bl	8017db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016ac8:	bf00      	nop
 8016aca:	3710      	adds	r7, #16
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd80      	pop	{r7, pc}

08016ad0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b086      	sub	sp, #24
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	60f8      	str	r0, [r7, #12]
 8016ad8:	60b9      	str	r1, [r7, #8]
 8016ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016adc:	2300      	movs	r3, #0
 8016ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016ae6:	2b01      	cmp	r3, #1
 8016ae8:	d101      	bne.n	8016aee <HAL_TIM_IC_ConfigChannel+0x1e>
 8016aea:	2302      	movs	r3, #2
 8016aec:	e088      	b.n	8016c00 <HAL_TIM_IC_ConfigChannel+0x130>
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	2201      	movs	r2, #1
 8016af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d11b      	bne.n	8016b34 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016b00:	68bb      	ldr	r3, [r7, #8]
 8016b02:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016b04:	68bb      	ldr	r3, [r7, #8]
 8016b06:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016b08:	68bb      	ldr	r3, [r7, #8]
 8016b0a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8016b0c:	f000 fe32 	bl	8017774 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	699a      	ldr	r2, [r3, #24]
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	f022 020c 	bic.w	r2, r2, #12
 8016b1e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	6999      	ldr	r1, [r3, #24]
 8016b26:	68bb      	ldr	r3, [r7, #8]
 8016b28:	689a      	ldr	r2, [r3, #8]
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	430a      	orrs	r2, r1
 8016b30:	619a      	str	r2, [r3, #24]
 8016b32:	e060      	b.n	8016bf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2b04      	cmp	r3, #4
 8016b38:	d11c      	bne.n	8016b74 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016b3e:	68bb      	ldr	r3, [r7, #8]
 8016b40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016b46:	68bb      	ldr	r3, [r7, #8]
 8016b48:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8016b4a:	f000 fec2 	bl	80178d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	699a      	ldr	r2, [r3, #24]
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016b5c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	6999      	ldr	r1, [r3, #24]
 8016b64:	68bb      	ldr	r3, [r7, #8]
 8016b66:	689b      	ldr	r3, [r3, #8]
 8016b68:	021a      	lsls	r2, r3, #8
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	430a      	orrs	r2, r1
 8016b70:	619a      	str	r2, [r3, #24]
 8016b72:	e040      	b.n	8016bf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	2b08      	cmp	r3, #8
 8016b78:	d11b      	bne.n	8016bb2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016b7e:	68bb      	ldr	r3, [r7, #8]
 8016b80:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016b82:	68bb      	ldr	r3, [r7, #8]
 8016b84:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016b86:	68bb      	ldr	r3, [r7, #8]
 8016b88:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8016b8a:	f000 ff0f 	bl	80179ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	69da      	ldr	r2, [r3, #28]
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	f022 020c 	bic.w	r2, r2, #12
 8016b9c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	69d9      	ldr	r1, [r3, #28]
 8016ba4:	68bb      	ldr	r3, [r7, #8]
 8016ba6:	689a      	ldr	r2, [r3, #8]
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	430a      	orrs	r2, r1
 8016bae:	61da      	str	r2, [r3, #28]
 8016bb0:	e021      	b.n	8016bf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	2b0c      	cmp	r3, #12
 8016bb6:	d11c      	bne.n	8016bf2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016bbc:	68bb      	ldr	r3, [r7, #8]
 8016bbe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016bc0:	68bb      	ldr	r3, [r7, #8]
 8016bc2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016bc8:	f000 ff2c 	bl	8017a24 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	69da      	ldr	r2, [r3, #28]
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016bda:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	69d9      	ldr	r1, [r3, #28]
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	689b      	ldr	r3, [r3, #8]
 8016be6:	021a      	lsls	r2, r3, #8
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	430a      	orrs	r2, r1
 8016bee:	61da      	str	r2, [r3, #28]
 8016bf0:	e001      	b.n	8016bf6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3718      	adds	r7, #24
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}

08016c08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b086      	sub	sp, #24
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	60f8      	str	r0, [r7, #12]
 8016c10:	60b9      	str	r1, [r7, #8]
 8016c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016c14:	2300      	movs	r3, #0
 8016c16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016c1e:	2b01      	cmp	r3, #1
 8016c20:	d101      	bne.n	8016c26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016c22:	2302      	movs	r3, #2
 8016c24:	e0ff      	b.n	8016e26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2201      	movs	r2, #1
 8016c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	2b14      	cmp	r3, #20
 8016c32:	f200 80f0 	bhi.w	8016e16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8016c36:	a201      	add	r2, pc, #4	@ (adr r2, 8016c3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c3c:	08016c91 	.word	0x08016c91
 8016c40:	08016e17 	.word	0x08016e17
 8016c44:	08016e17 	.word	0x08016e17
 8016c48:	08016e17 	.word	0x08016e17
 8016c4c:	08016cd1 	.word	0x08016cd1
 8016c50:	08016e17 	.word	0x08016e17
 8016c54:	08016e17 	.word	0x08016e17
 8016c58:	08016e17 	.word	0x08016e17
 8016c5c:	08016d13 	.word	0x08016d13
 8016c60:	08016e17 	.word	0x08016e17
 8016c64:	08016e17 	.word	0x08016e17
 8016c68:	08016e17 	.word	0x08016e17
 8016c6c:	08016d53 	.word	0x08016d53
 8016c70:	08016e17 	.word	0x08016e17
 8016c74:	08016e17 	.word	0x08016e17
 8016c78:	08016e17 	.word	0x08016e17
 8016c7c:	08016d95 	.word	0x08016d95
 8016c80:	08016e17 	.word	0x08016e17
 8016c84:	08016e17 	.word	0x08016e17
 8016c88:	08016e17 	.word	0x08016e17
 8016c8c:	08016dd5 	.word	0x08016dd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	68b9      	ldr	r1, [r7, #8]
 8016c96:	4618      	mov	r0, r3
 8016c98:	f000 fa96 	bl	80171c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	699a      	ldr	r2, [r3, #24]
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	f042 0208 	orr.w	r2, r2, #8
 8016caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	699a      	ldr	r2, [r3, #24]
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	f022 0204 	bic.w	r2, r2, #4
 8016cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	6999      	ldr	r1, [r3, #24]
 8016cc2:	68bb      	ldr	r3, [r7, #8]
 8016cc4:	691a      	ldr	r2, [r3, #16]
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	430a      	orrs	r2, r1
 8016ccc:	619a      	str	r2, [r3, #24]
      break;
 8016cce:	e0a5      	b.n	8016e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	68b9      	ldr	r1, [r7, #8]
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f000 fb06 	bl	80172e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	699a      	ldr	r2, [r3, #24]
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	699a      	ldr	r2, [r3, #24]
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	6999      	ldr	r1, [r3, #24]
 8016d02:	68bb      	ldr	r3, [r7, #8]
 8016d04:	691b      	ldr	r3, [r3, #16]
 8016d06:	021a      	lsls	r2, r3, #8
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	430a      	orrs	r2, r1
 8016d0e:	619a      	str	r2, [r3, #24]
      break;
 8016d10:	e084      	b.n	8016e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	68b9      	ldr	r1, [r7, #8]
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f000 fb6f 	bl	80173fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	69da      	ldr	r2, [r3, #28]
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	f042 0208 	orr.w	r2, r2, #8
 8016d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	69da      	ldr	r2, [r3, #28]
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	f022 0204 	bic.w	r2, r2, #4
 8016d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	69d9      	ldr	r1, [r3, #28]
 8016d44:	68bb      	ldr	r3, [r7, #8]
 8016d46:	691a      	ldr	r2, [r3, #16]
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	430a      	orrs	r2, r1
 8016d4e:	61da      	str	r2, [r3, #28]
      break;
 8016d50:	e064      	b.n	8016e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	68b9      	ldr	r1, [r7, #8]
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f000 fbd7 	bl	801750c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	69da      	ldr	r2, [r3, #28]
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	69da      	ldr	r2, [r3, #28]
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	69d9      	ldr	r1, [r3, #28]
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	691b      	ldr	r3, [r3, #16]
 8016d88:	021a      	lsls	r2, r3, #8
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	430a      	orrs	r2, r1
 8016d90:	61da      	str	r2, [r3, #28]
      break;
 8016d92:	e043      	b.n	8016e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	68b9      	ldr	r1, [r7, #8]
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f000 fc20 	bl	80175e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	f042 0208 	orr.w	r2, r2, #8
 8016dae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	f022 0204 	bic.w	r2, r2, #4
 8016dbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016dc6:	68bb      	ldr	r3, [r7, #8]
 8016dc8:	691a      	ldr	r2, [r3, #16]
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	430a      	orrs	r2, r1
 8016dd0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016dd2:	e023      	b.n	8016e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	68b9      	ldr	r1, [r7, #8]
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f000 fc64 	bl	80176a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016dee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016dfe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016e06:	68bb      	ldr	r3, [r7, #8]
 8016e08:	691b      	ldr	r3, [r3, #16]
 8016e0a:	021a      	lsls	r2, r3, #8
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	430a      	orrs	r2, r1
 8016e12:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016e14:	e002      	b.n	8016e1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016e16:	2301      	movs	r3, #1
 8016e18:	75fb      	strb	r3, [r7, #23]
      break;
 8016e1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	2200      	movs	r2, #0
 8016e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e26:	4618      	mov	r0, r3
 8016e28:	3718      	adds	r7, #24
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	bd80      	pop	{r7, pc}
 8016e2e:	bf00      	nop

08016e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b084      	sub	sp, #16
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
 8016e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016e44:	2b01      	cmp	r3, #1
 8016e46:	d101      	bne.n	8016e4c <HAL_TIM_ConfigClockSource+0x1c>
 8016e48:	2302      	movs	r3, #2
 8016e4a:	e0dc      	b.n	8017006 <HAL_TIM_ConfigClockSource+0x1d6>
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	2201      	movs	r2, #1
 8016e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	2202      	movs	r2, #2
 8016e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	689b      	ldr	r3, [r3, #8]
 8016e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016e64:	68ba      	ldr	r2, [r7, #8]
 8016e66:	4b6a      	ldr	r3, [pc, #424]	@ (8017010 <HAL_TIM_ConfigClockSource+0x1e0>)
 8016e68:	4013      	ands	r3, r2
 8016e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016e6c:	68bb      	ldr	r3, [r7, #8]
 8016e6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8016e72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	68ba      	ldr	r2, [r7, #8]
 8016e7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	4a64      	ldr	r2, [pc, #400]	@ (8017014 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016e82:	4293      	cmp	r3, r2
 8016e84:	f000 80a9 	beq.w	8016fda <HAL_TIM_ConfigClockSource+0x1aa>
 8016e88:	4a62      	ldr	r2, [pc, #392]	@ (8017014 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016e8a:	4293      	cmp	r3, r2
 8016e8c:	f200 80ae 	bhi.w	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016e90:	4a61      	ldr	r2, [pc, #388]	@ (8017018 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016e92:	4293      	cmp	r3, r2
 8016e94:	f000 80a1 	beq.w	8016fda <HAL_TIM_ConfigClockSource+0x1aa>
 8016e98:	4a5f      	ldr	r2, [pc, #380]	@ (8017018 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016e9a:	4293      	cmp	r3, r2
 8016e9c:	f200 80a6 	bhi.w	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016ea0:	4a5e      	ldr	r2, [pc, #376]	@ (801701c <HAL_TIM_ConfigClockSource+0x1ec>)
 8016ea2:	4293      	cmp	r3, r2
 8016ea4:	f000 8099 	beq.w	8016fda <HAL_TIM_ConfigClockSource+0x1aa>
 8016ea8:	4a5c      	ldr	r2, [pc, #368]	@ (801701c <HAL_TIM_ConfigClockSource+0x1ec>)
 8016eaa:	4293      	cmp	r3, r2
 8016eac:	f200 809e 	bhi.w	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016eb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016eb4:	f000 8091 	beq.w	8016fda <HAL_TIM_ConfigClockSource+0x1aa>
 8016eb8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016ebc:	f200 8096 	bhi.w	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016ec0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016ec4:	f000 8089 	beq.w	8016fda <HAL_TIM_ConfigClockSource+0x1aa>
 8016ec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016ecc:	f200 808e 	bhi.w	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016ed4:	d03e      	beq.n	8016f54 <HAL_TIM_ConfigClockSource+0x124>
 8016ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016eda:	f200 8087 	bhi.w	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016ee2:	f000 8086 	beq.w	8016ff2 <HAL_TIM_ConfigClockSource+0x1c2>
 8016ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016eea:	d87f      	bhi.n	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016eec:	2b70      	cmp	r3, #112	@ 0x70
 8016eee:	d01a      	beq.n	8016f26 <HAL_TIM_ConfigClockSource+0xf6>
 8016ef0:	2b70      	cmp	r3, #112	@ 0x70
 8016ef2:	d87b      	bhi.n	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016ef4:	2b60      	cmp	r3, #96	@ 0x60
 8016ef6:	d050      	beq.n	8016f9a <HAL_TIM_ConfigClockSource+0x16a>
 8016ef8:	2b60      	cmp	r3, #96	@ 0x60
 8016efa:	d877      	bhi.n	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016efc:	2b50      	cmp	r3, #80	@ 0x50
 8016efe:	d03c      	beq.n	8016f7a <HAL_TIM_ConfigClockSource+0x14a>
 8016f00:	2b50      	cmp	r3, #80	@ 0x50
 8016f02:	d873      	bhi.n	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016f04:	2b40      	cmp	r3, #64	@ 0x40
 8016f06:	d058      	beq.n	8016fba <HAL_TIM_ConfigClockSource+0x18a>
 8016f08:	2b40      	cmp	r3, #64	@ 0x40
 8016f0a:	d86f      	bhi.n	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016f0c:	2b30      	cmp	r3, #48	@ 0x30
 8016f0e:	d064      	beq.n	8016fda <HAL_TIM_ConfigClockSource+0x1aa>
 8016f10:	2b30      	cmp	r3, #48	@ 0x30
 8016f12:	d86b      	bhi.n	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016f14:	2b20      	cmp	r3, #32
 8016f16:	d060      	beq.n	8016fda <HAL_TIM_ConfigClockSource+0x1aa>
 8016f18:	2b20      	cmp	r3, #32
 8016f1a:	d867      	bhi.n	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d05c      	beq.n	8016fda <HAL_TIM_ConfigClockSource+0x1aa>
 8016f20:	2b10      	cmp	r3, #16
 8016f22:	d05a      	beq.n	8016fda <HAL_TIM_ConfigClockSource+0x1aa>
 8016f24:	e062      	b.n	8016fec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016f2a:	683b      	ldr	r3, [r7, #0]
 8016f2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016f2e:	683b      	ldr	r3, [r7, #0]
 8016f30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016f32:	683b      	ldr	r3, [r7, #0]
 8016f34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016f36:	f000 fdd1 	bl	8017adc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	689b      	ldr	r3, [r3, #8]
 8016f40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016f42:	68bb      	ldr	r3, [r7, #8]
 8016f44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8016f48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	68ba      	ldr	r2, [r7, #8]
 8016f50:	609a      	str	r2, [r3, #8]
      break;
 8016f52:	e04f      	b.n	8016ff4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016f58:	683b      	ldr	r3, [r7, #0]
 8016f5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016f64:	f000 fdba 	bl	8017adc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	689a      	ldr	r2, [r3, #8]
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016f76:	609a      	str	r2, [r3, #8]
      break;
 8016f78:	e03c      	b.n	8016ff4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016f82:	683b      	ldr	r3, [r7, #0]
 8016f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016f86:	461a      	mov	r2, r3
 8016f88:	f000 fc74 	bl	8017874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	2150      	movs	r1, #80	@ 0x50
 8016f92:	4618      	mov	r0, r3
 8016f94:	f000 fd84 	bl	8017aa0 <TIM_ITRx_SetConfig>
      break;
 8016f98:	e02c      	b.n	8016ff4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016f9e:	683b      	ldr	r3, [r7, #0]
 8016fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016fa6:	461a      	mov	r2, r3
 8016fa8:	f000 fcd0 	bl	801794c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	2160      	movs	r1, #96	@ 0x60
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f000 fd74 	bl	8017aa0 <TIM_ITRx_SetConfig>
      break;
 8016fb8:	e01c      	b.n	8016ff4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8016fbe:	683b      	ldr	r3, [r7, #0]
 8016fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016fc6:	461a      	mov	r2, r3
 8016fc8:	f000 fc54 	bl	8017874 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	2140      	movs	r1, #64	@ 0x40
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f000 fd64 	bl	8017aa0 <TIM_ITRx_SetConfig>
      break;
 8016fd8:	e00c      	b.n	8016ff4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	681a      	ldr	r2, [r3, #0]
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	4619      	mov	r1, r3
 8016fe4:	4610      	mov	r0, r2
 8016fe6:	f000 fd5b 	bl	8017aa0 <TIM_ITRx_SetConfig>
      break;
 8016fea:	e003      	b.n	8016ff4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8016fec:	2301      	movs	r3, #1
 8016fee:	73fb      	strb	r3, [r7, #15]
      break;
 8016ff0:	e000      	b.n	8016ff4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8016ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	2201      	movs	r2, #1
 8016ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	2200      	movs	r2, #0
 8017000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8017004:	7bfb      	ldrb	r3, [r7, #15]
}
 8017006:	4618      	mov	r0, r3
 8017008:	3710      	adds	r7, #16
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	ffceff88 	.word	0xffceff88
 8017014:	00100040 	.word	0x00100040
 8017018:	00100030 	.word	0x00100030
 801701c:	00100020 	.word	0x00100020

08017020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017020:	b480      	push	{r7}
 8017022:	b083      	sub	sp, #12
 8017024:	af00      	add	r7, sp, #0
 8017026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017028:	bf00      	nop
 801702a:	370c      	adds	r7, #12
 801702c:	46bd      	mov	sp, r7
 801702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017032:	4770      	bx	lr

08017034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017034:	b480      	push	{r7}
 8017036:	b083      	sub	sp, #12
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801703c:	bf00      	nop
 801703e:	370c      	adds	r7, #12
 8017040:	46bd      	mov	sp, r7
 8017042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017046:	4770      	bx	lr

08017048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017048:	b480      	push	{r7}
 801704a:	b083      	sub	sp, #12
 801704c:	af00      	add	r7, sp, #0
 801704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8017050:	bf00      	nop
 8017052:	370c      	adds	r7, #12
 8017054:	46bd      	mov	sp, r7
 8017056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705a:	4770      	bx	lr

0801705c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801705c:	b480      	push	{r7}
 801705e:	b083      	sub	sp, #12
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017064:	bf00      	nop
 8017066:	370c      	adds	r7, #12
 8017068:	46bd      	mov	sp, r7
 801706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706e:	4770      	bx	lr

08017070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017070:	b480      	push	{r7}
 8017072:	b085      	sub	sp, #20
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
 8017078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	4a47      	ldr	r2, [pc, #284]	@ (80171a0 <TIM_Base_SetConfig+0x130>)
 8017084:	4293      	cmp	r3, r2
 8017086:	d013      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801708e:	d00f      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	4a44      	ldr	r2, [pc, #272]	@ (80171a4 <TIM_Base_SetConfig+0x134>)
 8017094:	4293      	cmp	r3, r2
 8017096:	d00b      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	4a43      	ldr	r2, [pc, #268]	@ (80171a8 <TIM_Base_SetConfig+0x138>)
 801709c:	4293      	cmp	r3, r2
 801709e:	d007      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	4a42      	ldr	r2, [pc, #264]	@ (80171ac <TIM_Base_SetConfig+0x13c>)
 80170a4:	4293      	cmp	r3, r2
 80170a6:	d003      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	4a41      	ldr	r2, [pc, #260]	@ (80171b0 <TIM_Base_SetConfig+0x140>)
 80170ac:	4293      	cmp	r3, r2
 80170ae:	d108      	bne.n	80170c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80170b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	68fa      	ldr	r2, [r7, #12]
 80170be:	4313      	orrs	r3, r2
 80170c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	4a36      	ldr	r2, [pc, #216]	@ (80171a0 <TIM_Base_SetConfig+0x130>)
 80170c6:	4293      	cmp	r3, r2
 80170c8:	d027      	beq.n	801711a <TIM_Base_SetConfig+0xaa>
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80170d0:	d023      	beq.n	801711a <TIM_Base_SetConfig+0xaa>
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	4a33      	ldr	r2, [pc, #204]	@ (80171a4 <TIM_Base_SetConfig+0x134>)
 80170d6:	4293      	cmp	r3, r2
 80170d8:	d01f      	beq.n	801711a <TIM_Base_SetConfig+0xaa>
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	4a32      	ldr	r2, [pc, #200]	@ (80171a8 <TIM_Base_SetConfig+0x138>)
 80170de:	4293      	cmp	r3, r2
 80170e0:	d01b      	beq.n	801711a <TIM_Base_SetConfig+0xaa>
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	4a31      	ldr	r2, [pc, #196]	@ (80171ac <TIM_Base_SetConfig+0x13c>)
 80170e6:	4293      	cmp	r3, r2
 80170e8:	d017      	beq.n	801711a <TIM_Base_SetConfig+0xaa>
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	4a30      	ldr	r2, [pc, #192]	@ (80171b0 <TIM_Base_SetConfig+0x140>)
 80170ee:	4293      	cmp	r3, r2
 80170f0:	d013      	beq.n	801711a <TIM_Base_SetConfig+0xaa>
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	4a2f      	ldr	r2, [pc, #188]	@ (80171b4 <TIM_Base_SetConfig+0x144>)
 80170f6:	4293      	cmp	r3, r2
 80170f8:	d00f      	beq.n	801711a <TIM_Base_SetConfig+0xaa>
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	4a2e      	ldr	r2, [pc, #184]	@ (80171b8 <TIM_Base_SetConfig+0x148>)
 80170fe:	4293      	cmp	r3, r2
 8017100:	d00b      	beq.n	801711a <TIM_Base_SetConfig+0xaa>
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	4a2d      	ldr	r2, [pc, #180]	@ (80171bc <TIM_Base_SetConfig+0x14c>)
 8017106:	4293      	cmp	r3, r2
 8017108:	d007      	beq.n	801711a <TIM_Base_SetConfig+0xaa>
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	4a2c      	ldr	r2, [pc, #176]	@ (80171c0 <TIM_Base_SetConfig+0x150>)
 801710e:	4293      	cmp	r3, r2
 8017110:	d003      	beq.n	801711a <TIM_Base_SetConfig+0xaa>
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	4a2b      	ldr	r2, [pc, #172]	@ (80171c4 <TIM_Base_SetConfig+0x154>)
 8017116:	4293      	cmp	r3, r2
 8017118:	d108      	bne.n	801712c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017122:	683b      	ldr	r3, [r7, #0]
 8017124:	68db      	ldr	r3, [r3, #12]
 8017126:	68fa      	ldr	r2, [r7, #12]
 8017128:	4313      	orrs	r3, r2
 801712a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8017132:	683b      	ldr	r3, [r7, #0]
 8017134:	695b      	ldr	r3, [r3, #20]
 8017136:	4313      	orrs	r3, r2
 8017138:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801713a:	683b      	ldr	r3, [r7, #0]
 801713c:	689a      	ldr	r2, [r3, #8]
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	681a      	ldr	r2, [r3, #0]
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	4a14      	ldr	r2, [pc, #80]	@ (80171a0 <TIM_Base_SetConfig+0x130>)
 801714e:	4293      	cmp	r3, r2
 8017150:	d00f      	beq.n	8017172 <TIM_Base_SetConfig+0x102>
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	4a16      	ldr	r2, [pc, #88]	@ (80171b0 <TIM_Base_SetConfig+0x140>)
 8017156:	4293      	cmp	r3, r2
 8017158:	d00b      	beq.n	8017172 <TIM_Base_SetConfig+0x102>
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	4a15      	ldr	r2, [pc, #84]	@ (80171b4 <TIM_Base_SetConfig+0x144>)
 801715e:	4293      	cmp	r3, r2
 8017160:	d007      	beq.n	8017172 <TIM_Base_SetConfig+0x102>
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	4a14      	ldr	r2, [pc, #80]	@ (80171b8 <TIM_Base_SetConfig+0x148>)
 8017166:	4293      	cmp	r3, r2
 8017168:	d003      	beq.n	8017172 <TIM_Base_SetConfig+0x102>
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	4a13      	ldr	r2, [pc, #76]	@ (80171bc <TIM_Base_SetConfig+0x14c>)
 801716e:	4293      	cmp	r3, r2
 8017170:	d103      	bne.n	801717a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	691a      	ldr	r2, [r3, #16]
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	f043 0204 	orr.w	r2, r3, #4
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	2201      	movs	r2, #1
 801718a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	68fa      	ldr	r2, [r7, #12]
 8017190:	601a      	str	r2, [r3, #0]
}
 8017192:	bf00      	nop
 8017194:	3714      	adds	r7, #20
 8017196:	46bd      	mov	sp, r7
 8017198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719c:	4770      	bx	lr
 801719e:	bf00      	nop
 80171a0:	40010000 	.word	0x40010000
 80171a4:	40000400 	.word	0x40000400
 80171a8:	40000800 	.word	0x40000800
 80171ac:	40000c00 	.word	0x40000c00
 80171b0:	40010400 	.word	0x40010400
 80171b4:	40014000 	.word	0x40014000
 80171b8:	40014400 	.word	0x40014400
 80171bc:	40014800 	.word	0x40014800
 80171c0:	4000e000 	.word	0x4000e000
 80171c4:	4000e400 	.word	0x4000e400

080171c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80171c8:	b480      	push	{r7}
 80171ca:	b087      	sub	sp, #28
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
 80171d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	6a1b      	ldr	r3, [r3, #32]
 80171d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	6a1b      	ldr	r3, [r3, #32]
 80171dc:	f023 0201 	bic.w	r2, r3, #1
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	685b      	ldr	r3, [r3, #4]
 80171e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	699b      	ldr	r3, [r3, #24]
 80171ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80171f0:	68fa      	ldr	r2, [r7, #12]
 80171f2:	4b37      	ldr	r3, [pc, #220]	@ (80172d0 <TIM_OC1_SetConfig+0x108>)
 80171f4:	4013      	ands	r3, r2
 80171f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	f023 0303 	bic.w	r3, r3, #3
 80171fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017200:	683b      	ldr	r3, [r7, #0]
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	68fa      	ldr	r2, [r7, #12]
 8017206:	4313      	orrs	r3, r2
 8017208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801720a:	697b      	ldr	r3, [r7, #20]
 801720c:	f023 0302 	bic.w	r3, r3, #2
 8017210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	689b      	ldr	r3, [r3, #8]
 8017216:	697a      	ldr	r2, [r7, #20]
 8017218:	4313      	orrs	r3, r2
 801721a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	4a2d      	ldr	r2, [pc, #180]	@ (80172d4 <TIM_OC1_SetConfig+0x10c>)
 8017220:	4293      	cmp	r3, r2
 8017222:	d00f      	beq.n	8017244 <TIM_OC1_SetConfig+0x7c>
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	4a2c      	ldr	r2, [pc, #176]	@ (80172d8 <TIM_OC1_SetConfig+0x110>)
 8017228:	4293      	cmp	r3, r2
 801722a:	d00b      	beq.n	8017244 <TIM_OC1_SetConfig+0x7c>
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	4a2b      	ldr	r2, [pc, #172]	@ (80172dc <TIM_OC1_SetConfig+0x114>)
 8017230:	4293      	cmp	r3, r2
 8017232:	d007      	beq.n	8017244 <TIM_OC1_SetConfig+0x7c>
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	4a2a      	ldr	r2, [pc, #168]	@ (80172e0 <TIM_OC1_SetConfig+0x118>)
 8017238:	4293      	cmp	r3, r2
 801723a:	d003      	beq.n	8017244 <TIM_OC1_SetConfig+0x7c>
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	4a29      	ldr	r2, [pc, #164]	@ (80172e4 <TIM_OC1_SetConfig+0x11c>)
 8017240:	4293      	cmp	r3, r2
 8017242:	d10c      	bne.n	801725e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8017244:	697b      	ldr	r3, [r7, #20]
 8017246:	f023 0308 	bic.w	r3, r3, #8
 801724a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	68db      	ldr	r3, [r3, #12]
 8017250:	697a      	ldr	r2, [r7, #20]
 8017252:	4313      	orrs	r3, r2
 8017254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8017256:	697b      	ldr	r3, [r7, #20]
 8017258:	f023 0304 	bic.w	r3, r3, #4
 801725c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	4a1c      	ldr	r2, [pc, #112]	@ (80172d4 <TIM_OC1_SetConfig+0x10c>)
 8017262:	4293      	cmp	r3, r2
 8017264:	d00f      	beq.n	8017286 <TIM_OC1_SetConfig+0xbe>
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	4a1b      	ldr	r2, [pc, #108]	@ (80172d8 <TIM_OC1_SetConfig+0x110>)
 801726a:	4293      	cmp	r3, r2
 801726c:	d00b      	beq.n	8017286 <TIM_OC1_SetConfig+0xbe>
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	4a1a      	ldr	r2, [pc, #104]	@ (80172dc <TIM_OC1_SetConfig+0x114>)
 8017272:	4293      	cmp	r3, r2
 8017274:	d007      	beq.n	8017286 <TIM_OC1_SetConfig+0xbe>
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	4a19      	ldr	r2, [pc, #100]	@ (80172e0 <TIM_OC1_SetConfig+0x118>)
 801727a:	4293      	cmp	r3, r2
 801727c:	d003      	beq.n	8017286 <TIM_OC1_SetConfig+0xbe>
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	4a18      	ldr	r2, [pc, #96]	@ (80172e4 <TIM_OC1_SetConfig+0x11c>)
 8017282:	4293      	cmp	r3, r2
 8017284:	d111      	bne.n	80172aa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801728c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801728e:	693b      	ldr	r3, [r7, #16]
 8017290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017296:	683b      	ldr	r3, [r7, #0]
 8017298:	695b      	ldr	r3, [r3, #20]
 801729a:	693a      	ldr	r2, [r7, #16]
 801729c:	4313      	orrs	r3, r2
 801729e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	699b      	ldr	r3, [r3, #24]
 80172a4:	693a      	ldr	r2, [r7, #16]
 80172a6:	4313      	orrs	r3, r2
 80172a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	693a      	ldr	r2, [r7, #16]
 80172ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	68fa      	ldr	r2, [r7, #12]
 80172b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	685a      	ldr	r2, [r3, #4]
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	697a      	ldr	r2, [r7, #20]
 80172c2:	621a      	str	r2, [r3, #32]
}
 80172c4:	bf00      	nop
 80172c6:	371c      	adds	r7, #28
 80172c8:	46bd      	mov	sp, r7
 80172ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ce:	4770      	bx	lr
 80172d0:	fffeff8f 	.word	0xfffeff8f
 80172d4:	40010000 	.word	0x40010000
 80172d8:	40010400 	.word	0x40010400
 80172dc:	40014000 	.word	0x40014000
 80172e0:	40014400 	.word	0x40014400
 80172e4:	40014800 	.word	0x40014800

080172e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80172e8:	b480      	push	{r7}
 80172ea:	b087      	sub	sp, #28
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
 80172f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	6a1b      	ldr	r3, [r3, #32]
 80172f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	6a1b      	ldr	r3, [r3, #32]
 80172fc:	f023 0210 	bic.w	r2, r3, #16
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	685b      	ldr	r3, [r3, #4]
 8017308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	699b      	ldr	r3, [r3, #24]
 801730e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8017310:	68fa      	ldr	r2, [r7, #12]
 8017312:	4b34      	ldr	r3, [pc, #208]	@ (80173e4 <TIM_OC2_SetConfig+0xfc>)
 8017314:	4013      	ands	r3, r2
 8017316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801731e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017320:	683b      	ldr	r3, [r7, #0]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	021b      	lsls	r3, r3, #8
 8017326:	68fa      	ldr	r2, [r7, #12]
 8017328:	4313      	orrs	r3, r2
 801732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801732c:	697b      	ldr	r3, [r7, #20]
 801732e:	f023 0320 	bic.w	r3, r3, #32
 8017332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017334:	683b      	ldr	r3, [r7, #0]
 8017336:	689b      	ldr	r3, [r3, #8]
 8017338:	011b      	lsls	r3, r3, #4
 801733a:	697a      	ldr	r2, [r7, #20]
 801733c:	4313      	orrs	r3, r2
 801733e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	4a29      	ldr	r2, [pc, #164]	@ (80173e8 <TIM_OC2_SetConfig+0x100>)
 8017344:	4293      	cmp	r3, r2
 8017346:	d003      	beq.n	8017350 <TIM_OC2_SetConfig+0x68>
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	4a28      	ldr	r2, [pc, #160]	@ (80173ec <TIM_OC2_SetConfig+0x104>)
 801734c:	4293      	cmp	r3, r2
 801734e:	d10d      	bne.n	801736c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017350:	697b      	ldr	r3, [r7, #20]
 8017352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017358:	683b      	ldr	r3, [r7, #0]
 801735a:	68db      	ldr	r3, [r3, #12]
 801735c:	011b      	lsls	r3, r3, #4
 801735e:	697a      	ldr	r2, [r7, #20]
 8017360:	4313      	orrs	r3, r2
 8017362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017364:	697b      	ldr	r3, [r7, #20]
 8017366:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801736a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	4a1e      	ldr	r2, [pc, #120]	@ (80173e8 <TIM_OC2_SetConfig+0x100>)
 8017370:	4293      	cmp	r3, r2
 8017372:	d00f      	beq.n	8017394 <TIM_OC2_SetConfig+0xac>
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	4a1d      	ldr	r2, [pc, #116]	@ (80173ec <TIM_OC2_SetConfig+0x104>)
 8017378:	4293      	cmp	r3, r2
 801737a:	d00b      	beq.n	8017394 <TIM_OC2_SetConfig+0xac>
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	4a1c      	ldr	r2, [pc, #112]	@ (80173f0 <TIM_OC2_SetConfig+0x108>)
 8017380:	4293      	cmp	r3, r2
 8017382:	d007      	beq.n	8017394 <TIM_OC2_SetConfig+0xac>
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	4a1b      	ldr	r2, [pc, #108]	@ (80173f4 <TIM_OC2_SetConfig+0x10c>)
 8017388:	4293      	cmp	r3, r2
 801738a:	d003      	beq.n	8017394 <TIM_OC2_SetConfig+0xac>
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	4a1a      	ldr	r2, [pc, #104]	@ (80173f8 <TIM_OC2_SetConfig+0x110>)
 8017390:	4293      	cmp	r3, r2
 8017392:	d113      	bne.n	80173bc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017394:	693b      	ldr	r3, [r7, #16]
 8017396:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801739a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801739c:	693b      	ldr	r3, [r7, #16]
 801739e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80173a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80173a4:	683b      	ldr	r3, [r7, #0]
 80173a6:	695b      	ldr	r3, [r3, #20]
 80173a8:	009b      	lsls	r3, r3, #2
 80173aa:	693a      	ldr	r2, [r7, #16]
 80173ac:	4313      	orrs	r3, r2
 80173ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	699b      	ldr	r3, [r3, #24]
 80173b4:	009b      	lsls	r3, r3, #2
 80173b6:	693a      	ldr	r2, [r7, #16]
 80173b8:	4313      	orrs	r3, r2
 80173ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	693a      	ldr	r2, [r7, #16]
 80173c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	68fa      	ldr	r2, [r7, #12]
 80173c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80173c8:	683b      	ldr	r3, [r7, #0]
 80173ca:	685a      	ldr	r2, [r3, #4]
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	697a      	ldr	r2, [r7, #20]
 80173d4:	621a      	str	r2, [r3, #32]
}
 80173d6:	bf00      	nop
 80173d8:	371c      	adds	r7, #28
 80173da:	46bd      	mov	sp, r7
 80173dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e0:	4770      	bx	lr
 80173e2:	bf00      	nop
 80173e4:	feff8fff 	.word	0xfeff8fff
 80173e8:	40010000 	.word	0x40010000
 80173ec:	40010400 	.word	0x40010400
 80173f0:	40014000 	.word	0x40014000
 80173f4:	40014400 	.word	0x40014400
 80173f8:	40014800 	.word	0x40014800

080173fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80173fc:	b480      	push	{r7}
 80173fe:	b087      	sub	sp, #28
 8017400:	af00      	add	r7, sp, #0
 8017402:	6078      	str	r0, [r7, #4]
 8017404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	6a1b      	ldr	r3, [r3, #32]
 801740a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	6a1b      	ldr	r3, [r3, #32]
 8017410:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	685b      	ldr	r3, [r3, #4]
 801741c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	69db      	ldr	r3, [r3, #28]
 8017422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017424:	68fa      	ldr	r2, [r7, #12]
 8017426:	4b33      	ldr	r3, [pc, #204]	@ (80174f4 <TIM_OC3_SetConfig+0xf8>)
 8017428:	4013      	ands	r3, r2
 801742a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	f023 0303 	bic.w	r3, r3, #3
 8017432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017434:	683b      	ldr	r3, [r7, #0]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	68fa      	ldr	r2, [r7, #12]
 801743a:	4313      	orrs	r3, r2
 801743c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801743e:	697b      	ldr	r3, [r7, #20]
 8017440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8017444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017446:	683b      	ldr	r3, [r7, #0]
 8017448:	689b      	ldr	r3, [r3, #8]
 801744a:	021b      	lsls	r3, r3, #8
 801744c:	697a      	ldr	r2, [r7, #20]
 801744e:	4313      	orrs	r3, r2
 8017450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	4a28      	ldr	r2, [pc, #160]	@ (80174f8 <TIM_OC3_SetConfig+0xfc>)
 8017456:	4293      	cmp	r3, r2
 8017458:	d003      	beq.n	8017462 <TIM_OC3_SetConfig+0x66>
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	4a27      	ldr	r2, [pc, #156]	@ (80174fc <TIM_OC3_SetConfig+0x100>)
 801745e:	4293      	cmp	r3, r2
 8017460:	d10d      	bne.n	801747e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017462:	697b      	ldr	r3, [r7, #20]
 8017464:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	68db      	ldr	r3, [r3, #12]
 801746e:	021b      	lsls	r3, r3, #8
 8017470:	697a      	ldr	r2, [r7, #20]
 8017472:	4313      	orrs	r3, r2
 8017474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8017476:	697b      	ldr	r3, [r7, #20]
 8017478:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801747c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	4a1d      	ldr	r2, [pc, #116]	@ (80174f8 <TIM_OC3_SetConfig+0xfc>)
 8017482:	4293      	cmp	r3, r2
 8017484:	d00f      	beq.n	80174a6 <TIM_OC3_SetConfig+0xaa>
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	4a1c      	ldr	r2, [pc, #112]	@ (80174fc <TIM_OC3_SetConfig+0x100>)
 801748a:	4293      	cmp	r3, r2
 801748c:	d00b      	beq.n	80174a6 <TIM_OC3_SetConfig+0xaa>
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	4a1b      	ldr	r2, [pc, #108]	@ (8017500 <TIM_OC3_SetConfig+0x104>)
 8017492:	4293      	cmp	r3, r2
 8017494:	d007      	beq.n	80174a6 <TIM_OC3_SetConfig+0xaa>
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	4a1a      	ldr	r2, [pc, #104]	@ (8017504 <TIM_OC3_SetConfig+0x108>)
 801749a:	4293      	cmp	r3, r2
 801749c:	d003      	beq.n	80174a6 <TIM_OC3_SetConfig+0xaa>
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	4a19      	ldr	r2, [pc, #100]	@ (8017508 <TIM_OC3_SetConfig+0x10c>)
 80174a2:	4293      	cmp	r3, r2
 80174a4:	d113      	bne.n	80174ce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80174a6:	693b      	ldr	r3, [r7, #16]
 80174a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80174ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80174ae:	693b      	ldr	r3, [r7, #16]
 80174b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80174b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80174b6:	683b      	ldr	r3, [r7, #0]
 80174b8:	695b      	ldr	r3, [r3, #20]
 80174ba:	011b      	lsls	r3, r3, #4
 80174bc:	693a      	ldr	r2, [r7, #16]
 80174be:	4313      	orrs	r3, r2
 80174c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80174c2:	683b      	ldr	r3, [r7, #0]
 80174c4:	699b      	ldr	r3, [r3, #24]
 80174c6:	011b      	lsls	r3, r3, #4
 80174c8:	693a      	ldr	r2, [r7, #16]
 80174ca:	4313      	orrs	r3, r2
 80174cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	693a      	ldr	r2, [r7, #16]
 80174d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	68fa      	ldr	r2, [r7, #12]
 80174d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80174da:	683b      	ldr	r3, [r7, #0]
 80174dc:	685a      	ldr	r2, [r3, #4]
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	697a      	ldr	r2, [r7, #20]
 80174e6:	621a      	str	r2, [r3, #32]
}
 80174e8:	bf00      	nop
 80174ea:	371c      	adds	r7, #28
 80174ec:	46bd      	mov	sp, r7
 80174ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f2:	4770      	bx	lr
 80174f4:	fffeff8f 	.word	0xfffeff8f
 80174f8:	40010000 	.word	0x40010000
 80174fc:	40010400 	.word	0x40010400
 8017500:	40014000 	.word	0x40014000
 8017504:	40014400 	.word	0x40014400
 8017508:	40014800 	.word	0x40014800

0801750c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801750c:	b480      	push	{r7}
 801750e:	b087      	sub	sp, #28
 8017510:	af00      	add	r7, sp, #0
 8017512:	6078      	str	r0, [r7, #4]
 8017514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6a1b      	ldr	r3, [r3, #32]
 801751a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	6a1b      	ldr	r3, [r3, #32]
 8017520:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	685b      	ldr	r3, [r3, #4]
 801752c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	69db      	ldr	r3, [r3, #28]
 8017532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017534:	68fa      	ldr	r2, [r7, #12]
 8017536:	4b24      	ldr	r3, [pc, #144]	@ (80175c8 <TIM_OC4_SetConfig+0xbc>)
 8017538:	4013      	ands	r3, r2
 801753a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017544:	683b      	ldr	r3, [r7, #0]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	021b      	lsls	r3, r3, #8
 801754a:	68fa      	ldr	r2, [r7, #12]
 801754c:	4313      	orrs	r3, r2
 801754e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017550:	693b      	ldr	r3, [r7, #16]
 8017552:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017558:	683b      	ldr	r3, [r7, #0]
 801755a:	689b      	ldr	r3, [r3, #8]
 801755c:	031b      	lsls	r3, r3, #12
 801755e:	693a      	ldr	r2, [r7, #16]
 8017560:	4313      	orrs	r3, r2
 8017562:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	4a19      	ldr	r2, [pc, #100]	@ (80175cc <TIM_OC4_SetConfig+0xc0>)
 8017568:	4293      	cmp	r3, r2
 801756a:	d00f      	beq.n	801758c <TIM_OC4_SetConfig+0x80>
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	4a18      	ldr	r2, [pc, #96]	@ (80175d0 <TIM_OC4_SetConfig+0xc4>)
 8017570:	4293      	cmp	r3, r2
 8017572:	d00b      	beq.n	801758c <TIM_OC4_SetConfig+0x80>
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	4a17      	ldr	r2, [pc, #92]	@ (80175d4 <TIM_OC4_SetConfig+0xc8>)
 8017578:	4293      	cmp	r3, r2
 801757a:	d007      	beq.n	801758c <TIM_OC4_SetConfig+0x80>
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	4a16      	ldr	r2, [pc, #88]	@ (80175d8 <TIM_OC4_SetConfig+0xcc>)
 8017580:	4293      	cmp	r3, r2
 8017582:	d003      	beq.n	801758c <TIM_OC4_SetConfig+0x80>
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	4a15      	ldr	r2, [pc, #84]	@ (80175dc <TIM_OC4_SetConfig+0xd0>)
 8017588:	4293      	cmp	r3, r2
 801758a:	d109      	bne.n	80175a0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801758c:	697b      	ldr	r3, [r7, #20]
 801758e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017594:	683b      	ldr	r3, [r7, #0]
 8017596:	695b      	ldr	r3, [r3, #20]
 8017598:	019b      	lsls	r3, r3, #6
 801759a:	697a      	ldr	r2, [r7, #20]
 801759c:	4313      	orrs	r3, r2
 801759e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	697a      	ldr	r2, [r7, #20]
 80175a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	68fa      	ldr	r2, [r7, #12]
 80175aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	685a      	ldr	r2, [r3, #4]
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	693a      	ldr	r2, [r7, #16]
 80175b8:	621a      	str	r2, [r3, #32]
}
 80175ba:	bf00      	nop
 80175bc:	371c      	adds	r7, #28
 80175be:	46bd      	mov	sp, r7
 80175c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c4:	4770      	bx	lr
 80175c6:	bf00      	nop
 80175c8:	feff8fff 	.word	0xfeff8fff
 80175cc:	40010000 	.word	0x40010000
 80175d0:	40010400 	.word	0x40010400
 80175d4:	40014000 	.word	0x40014000
 80175d8:	40014400 	.word	0x40014400
 80175dc:	40014800 	.word	0x40014800

080175e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80175e0:	b480      	push	{r7}
 80175e2:	b087      	sub	sp, #28
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
 80175e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	6a1b      	ldr	r3, [r3, #32]
 80175ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	6a1b      	ldr	r3, [r3, #32]
 80175f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	685b      	ldr	r3, [r3, #4]
 8017600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017608:	68fa      	ldr	r2, [r7, #12]
 801760a:	4b21      	ldr	r3, [pc, #132]	@ (8017690 <TIM_OC5_SetConfig+0xb0>)
 801760c:	4013      	ands	r3, r2
 801760e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017610:	683b      	ldr	r3, [r7, #0]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	68fa      	ldr	r2, [r7, #12]
 8017616:	4313      	orrs	r3, r2
 8017618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801761a:	693b      	ldr	r3, [r7, #16]
 801761c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8017620:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8017622:	683b      	ldr	r3, [r7, #0]
 8017624:	689b      	ldr	r3, [r3, #8]
 8017626:	041b      	lsls	r3, r3, #16
 8017628:	693a      	ldr	r2, [r7, #16]
 801762a:	4313      	orrs	r3, r2
 801762c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	4a18      	ldr	r2, [pc, #96]	@ (8017694 <TIM_OC5_SetConfig+0xb4>)
 8017632:	4293      	cmp	r3, r2
 8017634:	d00f      	beq.n	8017656 <TIM_OC5_SetConfig+0x76>
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	4a17      	ldr	r2, [pc, #92]	@ (8017698 <TIM_OC5_SetConfig+0xb8>)
 801763a:	4293      	cmp	r3, r2
 801763c:	d00b      	beq.n	8017656 <TIM_OC5_SetConfig+0x76>
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	4a16      	ldr	r2, [pc, #88]	@ (801769c <TIM_OC5_SetConfig+0xbc>)
 8017642:	4293      	cmp	r3, r2
 8017644:	d007      	beq.n	8017656 <TIM_OC5_SetConfig+0x76>
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	4a15      	ldr	r2, [pc, #84]	@ (80176a0 <TIM_OC5_SetConfig+0xc0>)
 801764a:	4293      	cmp	r3, r2
 801764c:	d003      	beq.n	8017656 <TIM_OC5_SetConfig+0x76>
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	4a14      	ldr	r2, [pc, #80]	@ (80176a4 <TIM_OC5_SetConfig+0xc4>)
 8017652:	4293      	cmp	r3, r2
 8017654:	d109      	bne.n	801766a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017656:	697b      	ldr	r3, [r7, #20]
 8017658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801765c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801765e:	683b      	ldr	r3, [r7, #0]
 8017660:	695b      	ldr	r3, [r3, #20]
 8017662:	021b      	lsls	r3, r3, #8
 8017664:	697a      	ldr	r2, [r7, #20]
 8017666:	4313      	orrs	r3, r2
 8017668:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	697a      	ldr	r2, [r7, #20]
 801766e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	68fa      	ldr	r2, [r7, #12]
 8017674:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	685a      	ldr	r2, [r3, #4]
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	693a      	ldr	r2, [r7, #16]
 8017682:	621a      	str	r2, [r3, #32]
}
 8017684:	bf00      	nop
 8017686:	371c      	adds	r7, #28
 8017688:	46bd      	mov	sp, r7
 801768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768e:	4770      	bx	lr
 8017690:	fffeff8f 	.word	0xfffeff8f
 8017694:	40010000 	.word	0x40010000
 8017698:	40010400 	.word	0x40010400
 801769c:	40014000 	.word	0x40014000
 80176a0:	40014400 	.word	0x40014400
 80176a4:	40014800 	.word	0x40014800

080176a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80176a8:	b480      	push	{r7}
 80176aa:	b087      	sub	sp, #28
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
 80176b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	6a1b      	ldr	r3, [r3, #32]
 80176b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	6a1b      	ldr	r3, [r3, #32]
 80176bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	685b      	ldr	r3, [r3, #4]
 80176c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80176ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80176d0:	68fa      	ldr	r2, [r7, #12]
 80176d2:	4b22      	ldr	r3, [pc, #136]	@ (801775c <TIM_OC6_SetConfig+0xb4>)
 80176d4:	4013      	ands	r3, r2
 80176d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	021b      	lsls	r3, r3, #8
 80176de:	68fa      	ldr	r2, [r7, #12]
 80176e0:	4313      	orrs	r3, r2
 80176e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80176e4:	693b      	ldr	r3, [r7, #16]
 80176e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80176ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80176ec:	683b      	ldr	r3, [r7, #0]
 80176ee:	689b      	ldr	r3, [r3, #8]
 80176f0:	051b      	lsls	r3, r3, #20
 80176f2:	693a      	ldr	r2, [r7, #16]
 80176f4:	4313      	orrs	r3, r2
 80176f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	4a19      	ldr	r2, [pc, #100]	@ (8017760 <TIM_OC6_SetConfig+0xb8>)
 80176fc:	4293      	cmp	r3, r2
 80176fe:	d00f      	beq.n	8017720 <TIM_OC6_SetConfig+0x78>
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	4a18      	ldr	r2, [pc, #96]	@ (8017764 <TIM_OC6_SetConfig+0xbc>)
 8017704:	4293      	cmp	r3, r2
 8017706:	d00b      	beq.n	8017720 <TIM_OC6_SetConfig+0x78>
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	4a17      	ldr	r2, [pc, #92]	@ (8017768 <TIM_OC6_SetConfig+0xc0>)
 801770c:	4293      	cmp	r3, r2
 801770e:	d007      	beq.n	8017720 <TIM_OC6_SetConfig+0x78>
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	4a16      	ldr	r2, [pc, #88]	@ (801776c <TIM_OC6_SetConfig+0xc4>)
 8017714:	4293      	cmp	r3, r2
 8017716:	d003      	beq.n	8017720 <TIM_OC6_SetConfig+0x78>
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	4a15      	ldr	r2, [pc, #84]	@ (8017770 <TIM_OC6_SetConfig+0xc8>)
 801771c:	4293      	cmp	r3, r2
 801771e:	d109      	bne.n	8017734 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8017720:	697b      	ldr	r3, [r7, #20]
 8017722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8017726:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	695b      	ldr	r3, [r3, #20]
 801772c:	029b      	lsls	r3, r3, #10
 801772e:	697a      	ldr	r2, [r7, #20]
 8017730:	4313      	orrs	r3, r2
 8017732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	697a      	ldr	r2, [r7, #20]
 8017738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	68fa      	ldr	r2, [r7, #12]
 801773e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017740:	683b      	ldr	r3, [r7, #0]
 8017742:	685a      	ldr	r2, [r3, #4]
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	693a      	ldr	r2, [r7, #16]
 801774c:	621a      	str	r2, [r3, #32]
}
 801774e:	bf00      	nop
 8017750:	371c      	adds	r7, #28
 8017752:	46bd      	mov	sp, r7
 8017754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017758:	4770      	bx	lr
 801775a:	bf00      	nop
 801775c:	feff8fff 	.word	0xfeff8fff
 8017760:	40010000 	.word	0x40010000
 8017764:	40010400 	.word	0x40010400
 8017768:	40014000 	.word	0x40014000
 801776c:	40014400 	.word	0x40014400
 8017770:	40014800 	.word	0x40014800

08017774 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8017774:	b480      	push	{r7}
 8017776:	b087      	sub	sp, #28
 8017778:	af00      	add	r7, sp, #0
 801777a:	60f8      	str	r0, [r7, #12]
 801777c:	60b9      	str	r1, [r7, #8]
 801777e:	607a      	str	r2, [r7, #4]
 8017780:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	6a1b      	ldr	r3, [r3, #32]
 8017786:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	6a1b      	ldr	r3, [r3, #32]
 801778c:	f023 0201 	bic.w	r2, r3, #1
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	699b      	ldr	r3, [r3, #24]
 8017798:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	4a2c      	ldr	r2, [pc, #176]	@ (8017850 <TIM_TI1_SetConfig+0xdc>)
 801779e:	4293      	cmp	r3, r2
 80177a0:	d023      	beq.n	80177ea <TIM_TI1_SetConfig+0x76>
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80177a8:	d01f      	beq.n	80177ea <TIM_TI1_SetConfig+0x76>
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	4a29      	ldr	r2, [pc, #164]	@ (8017854 <TIM_TI1_SetConfig+0xe0>)
 80177ae:	4293      	cmp	r3, r2
 80177b0:	d01b      	beq.n	80177ea <TIM_TI1_SetConfig+0x76>
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	4a28      	ldr	r2, [pc, #160]	@ (8017858 <TIM_TI1_SetConfig+0xe4>)
 80177b6:	4293      	cmp	r3, r2
 80177b8:	d017      	beq.n	80177ea <TIM_TI1_SetConfig+0x76>
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	4a27      	ldr	r2, [pc, #156]	@ (801785c <TIM_TI1_SetConfig+0xe8>)
 80177be:	4293      	cmp	r3, r2
 80177c0:	d013      	beq.n	80177ea <TIM_TI1_SetConfig+0x76>
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	4a26      	ldr	r2, [pc, #152]	@ (8017860 <TIM_TI1_SetConfig+0xec>)
 80177c6:	4293      	cmp	r3, r2
 80177c8:	d00f      	beq.n	80177ea <TIM_TI1_SetConfig+0x76>
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	4a25      	ldr	r2, [pc, #148]	@ (8017864 <TIM_TI1_SetConfig+0xf0>)
 80177ce:	4293      	cmp	r3, r2
 80177d0:	d00b      	beq.n	80177ea <TIM_TI1_SetConfig+0x76>
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	4a24      	ldr	r2, [pc, #144]	@ (8017868 <TIM_TI1_SetConfig+0xf4>)
 80177d6:	4293      	cmp	r3, r2
 80177d8:	d007      	beq.n	80177ea <TIM_TI1_SetConfig+0x76>
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	4a23      	ldr	r2, [pc, #140]	@ (801786c <TIM_TI1_SetConfig+0xf8>)
 80177de:	4293      	cmp	r3, r2
 80177e0:	d003      	beq.n	80177ea <TIM_TI1_SetConfig+0x76>
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	4a22      	ldr	r2, [pc, #136]	@ (8017870 <TIM_TI1_SetConfig+0xfc>)
 80177e6:	4293      	cmp	r3, r2
 80177e8:	d101      	bne.n	80177ee <TIM_TI1_SetConfig+0x7a>
 80177ea:	2301      	movs	r3, #1
 80177ec:	e000      	b.n	80177f0 <TIM_TI1_SetConfig+0x7c>
 80177ee:	2300      	movs	r3, #0
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d008      	beq.n	8017806 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80177f4:	697b      	ldr	r3, [r7, #20]
 80177f6:	f023 0303 	bic.w	r3, r3, #3
 80177fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80177fc:	697a      	ldr	r2, [r7, #20]
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	4313      	orrs	r3, r2
 8017802:	617b      	str	r3, [r7, #20]
 8017804:	e003      	b.n	801780e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8017806:	697b      	ldr	r3, [r7, #20]
 8017808:	f043 0301 	orr.w	r3, r3, #1
 801780c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801780e:	697b      	ldr	r3, [r7, #20]
 8017810:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8017816:	683b      	ldr	r3, [r7, #0]
 8017818:	011b      	lsls	r3, r3, #4
 801781a:	b2db      	uxtb	r3, r3
 801781c:	697a      	ldr	r2, [r7, #20]
 801781e:	4313      	orrs	r3, r2
 8017820:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	f023 030a 	bic.w	r3, r3, #10
 8017828:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801782a:	68bb      	ldr	r3, [r7, #8]
 801782c:	f003 030a 	and.w	r3, r3, #10
 8017830:	693a      	ldr	r2, [r7, #16]
 8017832:	4313      	orrs	r3, r2
 8017834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	697a      	ldr	r2, [r7, #20]
 801783a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	693a      	ldr	r2, [r7, #16]
 8017840:	621a      	str	r2, [r3, #32]
}
 8017842:	bf00      	nop
 8017844:	371c      	adds	r7, #28
 8017846:	46bd      	mov	sp, r7
 8017848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784c:	4770      	bx	lr
 801784e:	bf00      	nop
 8017850:	40010000 	.word	0x40010000
 8017854:	40000400 	.word	0x40000400
 8017858:	40000800 	.word	0x40000800
 801785c:	40000c00 	.word	0x40000c00
 8017860:	40010400 	.word	0x40010400
 8017864:	40001800 	.word	0x40001800
 8017868:	40014000 	.word	0x40014000
 801786c:	4000e000 	.word	0x4000e000
 8017870:	4000e400 	.word	0x4000e400

08017874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017874:	b480      	push	{r7}
 8017876:	b087      	sub	sp, #28
 8017878:	af00      	add	r7, sp, #0
 801787a:	60f8      	str	r0, [r7, #12]
 801787c:	60b9      	str	r1, [r7, #8]
 801787e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	6a1b      	ldr	r3, [r3, #32]
 8017884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	6a1b      	ldr	r3, [r3, #32]
 801788a:	f023 0201 	bic.w	r2, r3, #1
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	699b      	ldr	r3, [r3, #24]
 8017896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017898:	693b      	ldr	r3, [r7, #16]
 801789a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801789e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	011b      	lsls	r3, r3, #4
 80178a4:	693a      	ldr	r2, [r7, #16]
 80178a6:	4313      	orrs	r3, r2
 80178a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80178aa:	697b      	ldr	r3, [r7, #20]
 80178ac:	f023 030a 	bic.w	r3, r3, #10
 80178b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80178b2:	697a      	ldr	r2, [r7, #20]
 80178b4:	68bb      	ldr	r3, [r7, #8]
 80178b6:	4313      	orrs	r3, r2
 80178b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	693a      	ldr	r2, [r7, #16]
 80178be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	697a      	ldr	r2, [r7, #20]
 80178c4:	621a      	str	r2, [r3, #32]
}
 80178c6:	bf00      	nop
 80178c8:	371c      	adds	r7, #28
 80178ca:	46bd      	mov	sp, r7
 80178cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d0:	4770      	bx	lr

080178d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80178d2:	b480      	push	{r7}
 80178d4:	b087      	sub	sp, #28
 80178d6:	af00      	add	r7, sp, #0
 80178d8:	60f8      	str	r0, [r7, #12]
 80178da:	60b9      	str	r1, [r7, #8]
 80178dc:	607a      	str	r2, [r7, #4]
 80178de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	6a1b      	ldr	r3, [r3, #32]
 80178e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	6a1b      	ldr	r3, [r3, #32]
 80178ea:	f023 0210 	bic.w	r2, r3, #16
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	699b      	ldr	r3, [r3, #24]
 80178f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80178f8:	693b      	ldr	r3, [r7, #16]
 80178fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80178fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	021b      	lsls	r3, r3, #8
 8017904:	693a      	ldr	r2, [r7, #16]
 8017906:	4313      	orrs	r3, r2
 8017908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801790a:	693b      	ldr	r3, [r7, #16]
 801790c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	031b      	lsls	r3, r3, #12
 8017916:	b29b      	uxth	r3, r3
 8017918:	693a      	ldr	r2, [r7, #16]
 801791a:	4313      	orrs	r3, r2
 801791c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801791e:	697b      	ldr	r3, [r7, #20]
 8017920:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017924:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8017926:	68bb      	ldr	r3, [r7, #8]
 8017928:	011b      	lsls	r3, r3, #4
 801792a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801792e:	697a      	ldr	r2, [r7, #20]
 8017930:	4313      	orrs	r3, r2
 8017932:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	693a      	ldr	r2, [r7, #16]
 8017938:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	697a      	ldr	r2, [r7, #20]
 801793e:	621a      	str	r2, [r3, #32]
}
 8017940:	bf00      	nop
 8017942:	371c      	adds	r7, #28
 8017944:	46bd      	mov	sp, r7
 8017946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794a:	4770      	bx	lr

0801794c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801794c:	b480      	push	{r7}
 801794e:	b087      	sub	sp, #28
 8017950:	af00      	add	r7, sp, #0
 8017952:	60f8      	str	r0, [r7, #12]
 8017954:	60b9      	str	r1, [r7, #8]
 8017956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	6a1b      	ldr	r3, [r3, #32]
 801795c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	6a1b      	ldr	r3, [r3, #32]
 8017962:	f023 0210 	bic.w	r2, r3, #16
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	699b      	ldr	r3, [r3, #24]
 801796e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017970:	693b      	ldr	r3, [r7, #16]
 8017972:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	031b      	lsls	r3, r3, #12
 801797c:	693a      	ldr	r2, [r7, #16]
 801797e:	4313      	orrs	r3, r2
 8017980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017982:	697b      	ldr	r3, [r7, #20]
 8017984:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017988:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801798a:	68bb      	ldr	r3, [r7, #8]
 801798c:	011b      	lsls	r3, r3, #4
 801798e:	697a      	ldr	r2, [r7, #20]
 8017990:	4313      	orrs	r3, r2
 8017992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	693a      	ldr	r2, [r7, #16]
 8017998:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	697a      	ldr	r2, [r7, #20]
 801799e:	621a      	str	r2, [r3, #32]
}
 80179a0:	bf00      	nop
 80179a2:	371c      	adds	r7, #28
 80179a4:	46bd      	mov	sp, r7
 80179a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179aa:	4770      	bx	lr

080179ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80179ac:	b480      	push	{r7}
 80179ae:	b087      	sub	sp, #28
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	60f8      	str	r0, [r7, #12]
 80179b4:	60b9      	str	r1, [r7, #8]
 80179b6:	607a      	str	r2, [r7, #4]
 80179b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	6a1b      	ldr	r3, [r3, #32]
 80179be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	6a1b      	ldr	r3, [r3, #32]
 80179c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	69db      	ldr	r3, [r3, #28]
 80179d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80179d2:	693b      	ldr	r3, [r7, #16]
 80179d4:	f023 0303 	bic.w	r3, r3, #3
 80179d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80179da:	693a      	ldr	r2, [r7, #16]
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	4313      	orrs	r3, r2
 80179e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80179e2:	693b      	ldr	r3, [r7, #16]
 80179e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80179e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80179ea:	683b      	ldr	r3, [r7, #0]
 80179ec:	011b      	lsls	r3, r3, #4
 80179ee:	b2db      	uxtb	r3, r3
 80179f0:	693a      	ldr	r2, [r7, #16]
 80179f2:	4313      	orrs	r3, r2
 80179f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80179f6:	697b      	ldr	r3, [r7, #20]
 80179f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80179fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80179fe:	68bb      	ldr	r3, [r7, #8]
 8017a00:	021b      	lsls	r3, r3, #8
 8017a02:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8017a06:	697a      	ldr	r2, [r7, #20]
 8017a08:	4313      	orrs	r3, r2
 8017a0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	693a      	ldr	r2, [r7, #16]
 8017a10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	697a      	ldr	r2, [r7, #20]
 8017a16:	621a      	str	r2, [r3, #32]
}
 8017a18:	bf00      	nop
 8017a1a:	371c      	adds	r7, #28
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a22:	4770      	bx	lr

08017a24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017a24:	b480      	push	{r7}
 8017a26:	b087      	sub	sp, #28
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	60f8      	str	r0, [r7, #12]
 8017a2c:	60b9      	str	r1, [r7, #8]
 8017a2e:	607a      	str	r2, [r7, #4]
 8017a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	6a1b      	ldr	r3, [r3, #32]
 8017a36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	6a1b      	ldr	r3, [r3, #32]
 8017a3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	69db      	ldr	r3, [r3, #28]
 8017a48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8017a4a:	693b      	ldr	r3, [r7, #16]
 8017a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017a50:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	021b      	lsls	r3, r3, #8
 8017a56:	693a      	ldr	r2, [r7, #16]
 8017a58:	4313      	orrs	r3, r2
 8017a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8017a5c:	693b      	ldr	r3, [r7, #16]
 8017a5e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017a62:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017a64:	683b      	ldr	r3, [r7, #0]
 8017a66:	031b      	lsls	r3, r3, #12
 8017a68:	b29b      	uxth	r3, r3
 8017a6a:	693a      	ldr	r2, [r7, #16]
 8017a6c:	4313      	orrs	r3, r2
 8017a6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017a70:	697b      	ldr	r3, [r7, #20]
 8017a72:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8017a76:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017a78:	68bb      	ldr	r3, [r7, #8]
 8017a7a:	031b      	lsls	r3, r3, #12
 8017a7c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017a80:	697a      	ldr	r2, [r7, #20]
 8017a82:	4313      	orrs	r3, r2
 8017a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	693a      	ldr	r2, [r7, #16]
 8017a8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	697a      	ldr	r2, [r7, #20]
 8017a90:	621a      	str	r2, [r3, #32]
}
 8017a92:	bf00      	nop
 8017a94:	371c      	adds	r7, #28
 8017a96:	46bd      	mov	sp, r7
 8017a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a9c:	4770      	bx	lr
	...

08017aa0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017aa0:	b480      	push	{r7}
 8017aa2:	b085      	sub	sp, #20
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
 8017aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	689b      	ldr	r3, [r3, #8]
 8017aae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017ab0:	68fa      	ldr	r2, [r7, #12]
 8017ab2:	4b09      	ldr	r3, [pc, #36]	@ (8017ad8 <TIM_ITRx_SetConfig+0x38>)
 8017ab4:	4013      	ands	r3, r2
 8017ab6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017ab8:	683a      	ldr	r2, [r7, #0]
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	4313      	orrs	r3, r2
 8017abe:	f043 0307 	orr.w	r3, r3, #7
 8017ac2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	68fa      	ldr	r2, [r7, #12]
 8017ac8:	609a      	str	r2, [r3, #8]
}
 8017aca:	bf00      	nop
 8017acc:	3714      	adds	r7, #20
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad4:	4770      	bx	lr
 8017ad6:	bf00      	nop
 8017ad8:	ffcfff8f 	.word	0xffcfff8f

08017adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017adc:	b480      	push	{r7}
 8017ade:	b087      	sub	sp, #28
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	60f8      	str	r0, [r7, #12]
 8017ae4:	60b9      	str	r1, [r7, #8]
 8017ae6:	607a      	str	r2, [r7, #4]
 8017ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	689b      	ldr	r3, [r3, #8]
 8017aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017af0:	697b      	ldr	r3, [r7, #20]
 8017af2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017af8:	683b      	ldr	r3, [r7, #0]
 8017afa:	021a      	lsls	r2, r3, #8
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	431a      	orrs	r2, r3
 8017b00:	68bb      	ldr	r3, [r7, #8]
 8017b02:	4313      	orrs	r3, r2
 8017b04:	697a      	ldr	r2, [r7, #20]
 8017b06:	4313      	orrs	r3, r2
 8017b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	697a      	ldr	r2, [r7, #20]
 8017b0e:	609a      	str	r2, [r3, #8]
}
 8017b10:	bf00      	nop
 8017b12:	371c      	adds	r7, #28
 8017b14:	46bd      	mov	sp, r7
 8017b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1a:	4770      	bx	lr

08017b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017b1c:	b480      	push	{r7}
 8017b1e:	b087      	sub	sp, #28
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	60f8      	str	r0, [r7, #12]
 8017b24:	60b9      	str	r1, [r7, #8]
 8017b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	f003 031f 	and.w	r3, r3, #31
 8017b2e:	2201      	movs	r2, #1
 8017b30:	fa02 f303 	lsl.w	r3, r2, r3
 8017b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	6a1a      	ldr	r2, [r3, #32]
 8017b3a:	697b      	ldr	r3, [r7, #20]
 8017b3c:	43db      	mvns	r3, r3
 8017b3e:	401a      	ands	r2, r3
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	6a1a      	ldr	r2, [r3, #32]
 8017b48:	68bb      	ldr	r3, [r7, #8]
 8017b4a:	f003 031f 	and.w	r3, r3, #31
 8017b4e:	6879      	ldr	r1, [r7, #4]
 8017b50:	fa01 f303 	lsl.w	r3, r1, r3
 8017b54:	431a      	orrs	r2, r3
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	621a      	str	r2, [r3, #32]
}
 8017b5a:	bf00      	nop
 8017b5c:	371c      	adds	r7, #28
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b64:	4770      	bx	lr
	...

08017b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017b68:	b480      	push	{r7}
 8017b6a:	b085      	sub	sp, #20
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
 8017b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017b78:	2b01      	cmp	r3, #1
 8017b7a:	d101      	bne.n	8017b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017b7c:	2302      	movs	r3, #2
 8017b7e:	e077      	b.n	8017c70 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	2201      	movs	r2, #1
 8017b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	2202      	movs	r2, #2
 8017b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	685b      	ldr	r3, [r3, #4]
 8017b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	689b      	ldr	r3, [r3, #8]
 8017b9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	4a35      	ldr	r2, [pc, #212]	@ (8017c7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017ba6:	4293      	cmp	r3, r2
 8017ba8:	d004      	beq.n	8017bb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	4a34      	ldr	r2, [pc, #208]	@ (8017c80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017bb0:	4293      	cmp	r3, r2
 8017bb2:	d108      	bne.n	8017bc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017bba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	685b      	ldr	r3, [r3, #4]
 8017bc0:	68fa      	ldr	r2, [r7, #12]
 8017bc2:	4313      	orrs	r3, r2
 8017bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017bcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017bce:	683b      	ldr	r3, [r7, #0]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	68fa      	ldr	r2, [r7, #12]
 8017bd4:	4313      	orrs	r3, r2
 8017bd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	68fa      	ldr	r2, [r7, #12]
 8017bde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	4a25      	ldr	r2, [pc, #148]	@ (8017c7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017be6:	4293      	cmp	r3, r2
 8017be8:	d02c      	beq.n	8017c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017bf2:	d027      	beq.n	8017c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	4a22      	ldr	r2, [pc, #136]	@ (8017c84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017bfa:	4293      	cmp	r3, r2
 8017bfc:	d022      	beq.n	8017c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	4a21      	ldr	r2, [pc, #132]	@ (8017c88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8017c04:	4293      	cmp	r3, r2
 8017c06:	d01d      	beq.n	8017c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8017c8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8017c0e:	4293      	cmp	r3, r2
 8017c10:	d018      	beq.n	8017c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	4a1a      	ldr	r2, [pc, #104]	@ (8017c80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017c18:	4293      	cmp	r3, r2
 8017c1a:	d013      	beq.n	8017c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	4a1b      	ldr	r2, [pc, #108]	@ (8017c90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8017c22:	4293      	cmp	r3, r2
 8017c24:	d00e      	beq.n	8017c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8017c94 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8017c2c:	4293      	cmp	r3, r2
 8017c2e:	d009      	beq.n	8017c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	4a18      	ldr	r2, [pc, #96]	@ (8017c98 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8017c36:	4293      	cmp	r3, r2
 8017c38:	d004      	beq.n	8017c44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	4a17      	ldr	r2, [pc, #92]	@ (8017c9c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8017c40:	4293      	cmp	r3, r2
 8017c42:	d10c      	bne.n	8017c5e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017c44:	68bb      	ldr	r3, [r7, #8]
 8017c46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017c4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017c4c:	683b      	ldr	r3, [r7, #0]
 8017c4e:	689b      	ldr	r3, [r3, #8]
 8017c50:	68ba      	ldr	r2, [r7, #8]
 8017c52:	4313      	orrs	r3, r2
 8017c54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	68ba      	ldr	r2, [r7, #8]
 8017c5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	2201      	movs	r2, #1
 8017c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	2200      	movs	r2, #0
 8017c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017c6e:	2300      	movs	r3, #0
}
 8017c70:	4618      	mov	r0, r3
 8017c72:	3714      	adds	r7, #20
 8017c74:	46bd      	mov	sp, r7
 8017c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7a:	4770      	bx	lr
 8017c7c:	40010000 	.word	0x40010000
 8017c80:	40010400 	.word	0x40010400
 8017c84:	40000400 	.word	0x40000400
 8017c88:	40000800 	.word	0x40000800
 8017c8c:	40000c00 	.word	0x40000c00
 8017c90:	40001800 	.word	0x40001800
 8017c94:	40014000 	.word	0x40014000
 8017c98:	4000e000 	.word	0x4000e000
 8017c9c:	4000e400 	.word	0x4000e400

08017ca0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017ca0:	b480      	push	{r7}
 8017ca2:	b085      	sub	sp, #20
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	6078      	str	r0, [r7, #4]
 8017ca8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017caa:	2300      	movs	r3, #0
 8017cac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017cb4:	2b01      	cmp	r3, #1
 8017cb6:	d101      	bne.n	8017cbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017cb8:	2302      	movs	r3, #2
 8017cba:	e073      	b.n	8017da4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2201      	movs	r2, #1
 8017cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017cca:	683b      	ldr	r3, [r7, #0]
 8017ccc:	68db      	ldr	r3, [r3, #12]
 8017cce:	4313      	orrs	r3, r2
 8017cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017cd8:	683b      	ldr	r3, [r7, #0]
 8017cda:	689b      	ldr	r3, [r3, #8]
 8017cdc:	4313      	orrs	r3, r2
 8017cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017ce6:	683b      	ldr	r3, [r7, #0]
 8017ce8:	685b      	ldr	r3, [r3, #4]
 8017cea:	4313      	orrs	r3, r2
 8017cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017cf4:	683b      	ldr	r3, [r7, #0]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	4313      	orrs	r3, r2
 8017cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8017d02:	683b      	ldr	r3, [r7, #0]
 8017d04:	691b      	ldr	r3, [r3, #16]
 8017d06:	4313      	orrs	r3, r2
 8017d08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017d10:	683b      	ldr	r3, [r7, #0]
 8017d12:	695b      	ldr	r3, [r3, #20]
 8017d14:	4313      	orrs	r3, r2
 8017d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8017d1e:	683b      	ldr	r3, [r7, #0]
 8017d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017d22:	4313      	orrs	r3, r2
 8017d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8017d2c:	683b      	ldr	r3, [r7, #0]
 8017d2e:	699b      	ldr	r3, [r3, #24]
 8017d30:	041b      	lsls	r3, r3, #16
 8017d32:	4313      	orrs	r3, r2
 8017d34:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8017d3c:	683b      	ldr	r3, [r7, #0]
 8017d3e:	69db      	ldr	r3, [r3, #28]
 8017d40:	4313      	orrs	r3, r2
 8017d42:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	4a19      	ldr	r2, [pc, #100]	@ (8017db0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8017d4a:	4293      	cmp	r3, r2
 8017d4c:	d004      	beq.n	8017d58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	4a18      	ldr	r2, [pc, #96]	@ (8017db4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8017d54:	4293      	cmp	r3, r2
 8017d56:	d11c      	bne.n	8017d92 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8017d5e:	683b      	ldr	r3, [r7, #0]
 8017d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d62:	051b      	lsls	r3, r3, #20
 8017d64:	4313      	orrs	r3, r2
 8017d66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8017d6e:	683b      	ldr	r3, [r7, #0]
 8017d70:	6a1b      	ldr	r3, [r3, #32]
 8017d72:	4313      	orrs	r3, r2
 8017d74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017d7c:	683b      	ldr	r3, [r7, #0]
 8017d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d80:	4313      	orrs	r3, r2
 8017d82:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017d8a:	683b      	ldr	r3, [r7, #0]
 8017d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d8e:	4313      	orrs	r3, r2
 8017d90:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	68fa      	ldr	r2, [r7, #12]
 8017d98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017da2:	2300      	movs	r3, #0
}
 8017da4:	4618      	mov	r0, r3
 8017da6:	3714      	adds	r7, #20
 8017da8:	46bd      	mov	sp, r7
 8017daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dae:	4770      	bx	lr
 8017db0:	40010000 	.word	0x40010000
 8017db4:	40010400 	.word	0x40010400

08017db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017db8:	b480      	push	{r7}
 8017dba:	b083      	sub	sp, #12
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017dc0:	bf00      	nop
 8017dc2:	370c      	adds	r7, #12
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dca:	4770      	bx	lr

08017dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017dcc:	b480      	push	{r7}
 8017dce:	b083      	sub	sp, #12
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017dd4:	bf00      	nop
 8017dd6:	370c      	adds	r7, #12
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dde:	4770      	bx	lr

08017de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017de0:	b480      	push	{r7}
 8017de2:	b083      	sub	sp, #12
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017de8:	bf00      	nop
 8017dea:	370c      	adds	r7, #12
 8017dec:	46bd      	mov	sp, r7
 8017dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df2:	4770      	bx	lr

08017df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b082      	sub	sp, #8
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d101      	bne.n	8017e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017e02:	2301      	movs	r3, #1
 8017e04:	e042      	b.n	8017e8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d106      	bne.n	8017e1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	2200      	movs	r2, #0
 8017e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017e18:	6878      	ldr	r0, [r7, #4]
 8017e1a:	f7f1 fa29 	bl	8009270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	2224      	movs	r2, #36	@ 0x24
 8017e22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	681a      	ldr	r2, [r3, #0]
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	f022 0201 	bic.w	r2, r2, #1
 8017e34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d002      	beq.n	8017e44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8017e3e:	6878      	ldr	r0, [r7, #4]
 8017e40:	f001 fbf8 	bl	8019634 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017e44:	6878      	ldr	r0, [r7, #4]
 8017e46:	f000 fd89 	bl	801895c <UART_SetConfig>
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	2b01      	cmp	r3, #1
 8017e4e:	d101      	bne.n	8017e54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8017e50:	2301      	movs	r3, #1
 8017e52:	e01b      	b.n	8017e8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	685a      	ldr	r2, [r3, #4]
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	689a      	ldr	r2, [r3, #8]
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	681a      	ldr	r2, [r3, #0]
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	f042 0201 	orr.w	r2, r2, #1
 8017e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017e84:	6878      	ldr	r0, [r7, #4]
 8017e86:	f001 fc77 	bl	8019778 <UART_CheckIdleState>
 8017e8a:	4603      	mov	r3, r0
}
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	3708      	adds	r7, #8
 8017e90:	46bd      	mov	sp, r7
 8017e92:	bd80      	pop	{r7, pc}

08017e94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b08a      	sub	sp, #40	@ 0x28
 8017e98:	af02      	add	r7, sp, #8
 8017e9a:	60f8      	str	r0, [r7, #12]
 8017e9c:	60b9      	str	r1, [r7, #8]
 8017e9e:	603b      	str	r3, [r7, #0]
 8017ea0:	4613      	mov	r3, r2
 8017ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017eaa:	2b20      	cmp	r3, #32
 8017eac:	d17b      	bne.n	8017fa6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017eae:	68bb      	ldr	r3, [r7, #8]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d002      	beq.n	8017eba <HAL_UART_Transmit+0x26>
 8017eb4:	88fb      	ldrh	r3, [r7, #6]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d101      	bne.n	8017ebe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017eba:	2301      	movs	r3, #1
 8017ebc:	e074      	b.n	8017fa8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017ebe:	68fb      	ldr	r3, [r7, #12]
 8017ec0:	2200      	movs	r2, #0
 8017ec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	2221      	movs	r2, #33	@ 0x21
 8017eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017ece:	f7f1 faf1 	bl	80094b4 <HAL_GetTick>
 8017ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	88fa      	ldrh	r2, [r7, #6]
 8017ed8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	88fa      	ldrh	r2, [r7, #6]
 8017ee0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	689b      	ldr	r3, [r3, #8]
 8017ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017eec:	d108      	bne.n	8017f00 <HAL_UART_Transmit+0x6c>
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	691b      	ldr	r3, [r3, #16]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d104      	bne.n	8017f00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017efa:	68bb      	ldr	r3, [r7, #8]
 8017efc:	61bb      	str	r3, [r7, #24]
 8017efe:	e003      	b.n	8017f08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017f00:	68bb      	ldr	r3, [r7, #8]
 8017f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017f04:	2300      	movs	r3, #0
 8017f06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017f08:	e030      	b.n	8017f6c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017f0a:	683b      	ldr	r3, [r7, #0]
 8017f0c:	9300      	str	r3, [sp, #0]
 8017f0e:	697b      	ldr	r3, [r7, #20]
 8017f10:	2200      	movs	r2, #0
 8017f12:	2180      	movs	r1, #128	@ 0x80
 8017f14:	68f8      	ldr	r0, [r7, #12]
 8017f16:	f001 fcd9 	bl	80198cc <UART_WaitOnFlagUntilTimeout>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d005      	beq.n	8017f2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	2220      	movs	r2, #32
 8017f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8017f28:	2303      	movs	r3, #3
 8017f2a:	e03d      	b.n	8017fa8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8017f2c:	69fb      	ldr	r3, [r7, #28]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d10b      	bne.n	8017f4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017f32:	69bb      	ldr	r3, [r7, #24]
 8017f34:	881b      	ldrh	r3, [r3, #0]
 8017f36:	461a      	mov	r2, r3
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017f40:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017f42:	69bb      	ldr	r3, [r7, #24]
 8017f44:	3302      	adds	r3, #2
 8017f46:	61bb      	str	r3, [r7, #24]
 8017f48:	e007      	b.n	8017f5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017f4a:	69fb      	ldr	r3, [r7, #28]
 8017f4c:	781a      	ldrb	r2, [r3, #0]
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017f54:	69fb      	ldr	r3, [r7, #28]
 8017f56:	3301      	adds	r3, #1
 8017f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017f60:	b29b      	uxth	r3, r3
 8017f62:	3b01      	subs	r3, #1
 8017f64:	b29a      	uxth	r2, r3
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8017f72:	b29b      	uxth	r3, r3
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d1c8      	bne.n	8017f0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017f78:	683b      	ldr	r3, [r7, #0]
 8017f7a:	9300      	str	r3, [sp, #0]
 8017f7c:	697b      	ldr	r3, [r7, #20]
 8017f7e:	2200      	movs	r2, #0
 8017f80:	2140      	movs	r1, #64	@ 0x40
 8017f82:	68f8      	ldr	r0, [r7, #12]
 8017f84:	f001 fca2 	bl	80198cc <UART_WaitOnFlagUntilTimeout>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d005      	beq.n	8017f9a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	2220      	movs	r2, #32
 8017f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8017f96:	2303      	movs	r3, #3
 8017f98:	e006      	b.n	8017fa8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	2220      	movs	r2, #32
 8017f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	e000      	b.n	8017fa8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8017fa6:	2302      	movs	r3, #2
  }
}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	3720      	adds	r7, #32
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}

08017fb0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017fb0:	b480      	push	{r7}
 8017fb2:	b091      	sub	sp, #68	@ 0x44
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	60f8      	str	r0, [r7, #12]
 8017fb8:	60b9      	str	r1, [r7, #8]
 8017fba:	4613      	mov	r3, r2
 8017fbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017fc4:	2b20      	cmp	r3, #32
 8017fc6:	d178      	bne.n	80180ba <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017fc8:	68bb      	ldr	r3, [r7, #8]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d002      	beq.n	8017fd4 <HAL_UART_Transmit_IT+0x24>
 8017fce:	88fb      	ldrh	r3, [r7, #6]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d101      	bne.n	8017fd8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	e071      	b.n	80180bc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	68ba      	ldr	r2, [r7, #8]
 8017fdc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	88fa      	ldrh	r2, [r7, #6]
 8017fe2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	88fa      	ldrh	r2, [r7, #6]
 8017fea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	2221      	movs	r2, #33	@ 0x21
 8018000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801800c:	d12a      	bne.n	8018064 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	689b      	ldr	r3, [r3, #8]
 8018012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018016:	d107      	bne.n	8018028 <HAL_UART_Transmit_IT+0x78>
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	691b      	ldr	r3, [r3, #16]
 801801c:	2b00      	cmp	r3, #0
 801801e:	d103      	bne.n	8018028 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	4a29      	ldr	r2, [pc, #164]	@ (80180c8 <HAL_UART_Transmit_IT+0x118>)
 8018024:	679a      	str	r2, [r3, #120]	@ 0x78
 8018026:	e002      	b.n	801802e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	4a28      	ldr	r2, [pc, #160]	@ (80180cc <HAL_UART_Transmit_IT+0x11c>)
 801802c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	3308      	adds	r3, #8
 8018034:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018038:	e853 3f00 	ldrex	r3, [r3]
 801803c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801803e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018040:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8018044:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	3308      	adds	r3, #8
 801804c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801804e:	637a      	str	r2, [r7, #52]	@ 0x34
 8018050:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018052:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018054:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018056:	e841 2300 	strex	r3, r2, [r1]
 801805a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801805c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801805e:	2b00      	cmp	r3, #0
 8018060:	d1e5      	bne.n	801802e <HAL_UART_Transmit_IT+0x7e>
 8018062:	e028      	b.n	80180b6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	689b      	ldr	r3, [r3, #8]
 8018068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801806c:	d107      	bne.n	801807e <HAL_UART_Transmit_IT+0xce>
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	691b      	ldr	r3, [r3, #16]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d103      	bne.n	801807e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	4a15      	ldr	r2, [pc, #84]	@ (80180d0 <HAL_UART_Transmit_IT+0x120>)
 801807a:	679a      	str	r2, [r3, #120]	@ 0x78
 801807c:	e002      	b.n	8018084 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	4a14      	ldr	r2, [pc, #80]	@ (80180d4 <HAL_UART_Transmit_IT+0x124>)
 8018082:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801808a:	697b      	ldr	r3, [r7, #20]
 801808c:	e853 3f00 	ldrex	r3, [r3]
 8018090:	613b      	str	r3, [r7, #16]
   return(result);
 8018092:	693b      	ldr	r3, [r7, #16]
 8018094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	461a      	mov	r2, r3
 80180a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180a2:	623b      	str	r3, [r7, #32]
 80180a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180a6:	69f9      	ldr	r1, [r7, #28]
 80180a8:	6a3a      	ldr	r2, [r7, #32]
 80180aa:	e841 2300 	strex	r3, r2, [r1]
 80180ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80180b0:	69bb      	ldr	r3, [r7, #24]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d1e6      	bne.n	8018084 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80180b6:	2300      	movs	r3, #0
 80180b8:	e000      	b.n	80180bc <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80180ba:	2302      	movs	r3, #2
  }
}
 80180bc:	4618      	mov	r0, r3
 80180be:	3744      	adds	r7, #68	@ 0x44
 80180c0:	46bd      	mov	sp, r7
 80180c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c6:	4770      	bx	lr
 80180c8:	08019f37 	.word	0x08019f37
 80180cc:	08019e57 	.word	0x08019e57
 80180d0:	08019d95 	.word	0x08019d95
 80180d4:	08019cdd 	.word	0x08019cdd

080180d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b08a      	sub	sp, #40	@ 0x28
 80180dc:	af00      	add	r7, sp, #0
 80180de:	60f8      	str	r0, [r7, #12]
 80180e0:	60b9      	str	r1, [r7, #8]
 80180e2:	4613      	mov	r3, r2
 80180e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80180ec:	2b20      	cmp	r3, #32
 80180ee:	d137      	bne.n	8018160 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80180f0:	68bb      	ldr	r3, [r7, #8]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d002      	beq.n	80180fc <HAL_UART_Receive_IT+0x24>
 80180f6:	88fb      	ldrh	r3, [r7, #6]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d101      	bne.n	8018100 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80180fc:	2301      	movs	r3, #1
 80180fe:	e030      	b.n	8018162 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	2200      	movs	r2, #0
 8018104:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	4a18      	ldr	r2, [pc, #96]	@ (801816c <HAL_UART_Receive_IT+0x94>)
 801810c:	4293      	cmp	r3, r2
 801810e:	d01f      	beq.n	8018150 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	685b      	ldr	r3, [r3, #4]
 8018116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801811a:	2b00      	cmp	r3, #0
 801811c:	d018      	beq.n	8018150 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018124:	697b      	ldr	r3, [r7, #20]
 8018126:	e853 3f00 	ldrex	r3, [r3]
 801812a:	613b      	str	r3, [r7, #16]
   return(result);
 801812c:	693b      	ldr	r3, [r7, #16]
 801812e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8018132:	627b      	str	r3, [r7, #36]	@ 0x24
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	461a      	mov	r2, r3
 801813a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801813c:	623b      	str	r3, [r7, #32]
 801813e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018140:	69f9      	ldr	r1, [r7, #28]
 8018142:	6a3a      	ldr	r2, [r7, #32]
 8018144:	e841 2300 	strex	r3, r2, [r1]
 8018148:	61bb      	str	r3, [r7, #24]
   return(result);
 801814a:	69bb      	ldr	r3, [r7, #24]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d1e6      	bne.n	801811e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018150:	88fb      	ldrh	r3, [r7, #6]
 8018152:	461a      	mov	r2, r3
 8018154:	68b9      	ldr	r1, [r7, #8]
 8018156:	68f8      	ldr	r0, [r7, #12]
 8018158:	f001 fc26 	bl	80199a8 <UART_Start_Receive_IT>
 801815c:	4603      	mov	r3, r0
 801815e:	e000      	b.n	8018162 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018160:	2302      	movs	r3, #2
  }
}
 8018162:	4618      	mov	r0, r3
 8018164:	3728      	adds	r7, #40	@ 0x28
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}
 801816a:	bf00      	nop
 801816c:	58000c00 	.word	0x58000c00

08018170 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b0ba      	sub	sp, #232	@ 0xe8
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	69db      	ldr	r3, [r3, #28]
 801817e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	689b      	ldr	r3, [r3, #8]
 8018192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8018196:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801819a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801819e:	4013      	ands	r3, r2
 80181a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80181a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d11b      	bne.n	80181e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80181ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80181b0:	f003 0320 	and.w	r3, r3, #32
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d015      	beq.n	80181e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80181b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80181bc:	f003 0320 	and.w	r3, r3, #32
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d105      	bne.n	80181d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80181c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80181c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d009      	beq.n	80181e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	f000 8393 	beq.w	8018900 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181de:	6878      	ldr	r0, [r7, #4]
 80181e0:	4798      	blx	r3
      }
      return;
 80181e2:	e38d      	b.n	8018900 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80181e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	f000 8123 	beq.w	8018434 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80181ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80181f2:	4b8d      	ldr	r3, [pc, #564]	@ (8018428 <HAL_UART_IRQHandler+0x2b8>)
 80181f4:	4013      	ands	r3, r2
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d106      	bne.n	8018208 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80181fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80181fe:	4b8b      	ldr	r3, [pc, #556]	@ (801842c <HAL_UART_IRQHandler+0x2bc>)
 8018200:	4013      	ands	r3, r2
 8018202:	2b00      	cmp	r3, #0
 8018204:	f000 8116 	beq.w	8018434 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801820c:	f003 0301 	and.w	r3, r3, #1
 8018210:	2b00      	cmp	r3, #0
 8018212:	d011      	beq.n	8018238 <HAL_UART_IRQHandler+0xc8>
 8018214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801821c:	2b00      	cmp	r3, #0
 801821e:	d00b      	beq.n	8018238 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	2201      	movs	r2, #1
 8018226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801822e:	f043 0201 	orr.w	r2, r3, #1
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801823c:	f003 0302 	and.w	r3, r3, #2
 8018240:	2b00      	cmp	r3, #0
 8018242:	d011      	beq.n	8018268 <HAL_UART_IRQHandler+0xf8>
 8018244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018248:	f003 0301 	and.w	r3, r3, #1
 801824c:	2b00      	cmp	r3, #0
 801824e:	d00b      	beq.n	8018268 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	2202      	movs	r2, #2
 8018256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801825e:	f043 0204 	orr.w	r2, r3, #4
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801826c:	f003 0304 	and.w	r3, r3, #4
 8018270:	2b00      	cmp	r3, #0
 8018272:	d011      	beq.n	8018298 <HAL_UART_IRQHandler+0x128>
 8018274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018278:	f003 0301 	and.w	r3, r3, #1
 801827c:	2b00      	cmp	r3, #0
 801827e:	d00b      	beq.n	8018298 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	2204      	movs	r2, #4
 8018286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801828e:	f043 0202 	orr.w	r2, r3, #2
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801829c:	f003 0308 	and.w	r3, r3, #8
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d017      	beq.n	80182d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80182a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80182a8:	f003 0320 	and.w	r3, r3, #32
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d105      	bne.n	80182bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80182b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80182b4:	4b5c      	ldr	r3, [pc, #368]	@ (8018428 <HAL_UART_IRQHandler+0x2b8>)
 80182b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d00b      	beq.n	80182d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	2208      	movs	r2, #8
 80182c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80182ca:	f043 0208 	orr.w	r2, r3, #8
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80182d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80182d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d012      	beq.n	8018306 <HAL_UART_IRQHandler+0x196>
 80182e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80182e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d00c      	beq.n	8018306 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80182f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80182fc:	f043 0220 	orr.w	r2, r3, #32
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801830c:	2b00      	cmp	r3, #0
 801830e:	f000 82f9 	beq.w	8018904 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018316:	f003 0320 	and.w	r3, r3, #32
 801831a:	2b00      	cmp	r3, #0
 801831c:	d013      	beq.n	8018346 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801831e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018322:	f003 0320 	and.w	r3, r3, #32
 8018326:	2b00      	cmp	r3, #0
 8018328:	d105      	bne.n	8018336 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801832a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801832e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018332:	2b00      	cmp	r3, #0
 8018334:	d007      	beq.n	8018346 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801833a:	2b00      	cmp	r3, #0
 801833c:	d003      	beq.n	8018346 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018342:	6878      	ldr	r0, [r7, #4]
 8018344:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801834c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	689b      	ldr	r3, [r3, #8]
 8018356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801835a:	2b40      	cmp	r3, #64	@ 0x40
 801835c:	d005      	beq.n	801836a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801835e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8018362:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018366:	2b00      	cmp	r3, #0
 8018368:	d054      	beq.n	8018414 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801836a:	6878      	ldr	r0, [r7, #4]
 801836c:	f001 fc3e 	bl	8019bec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	689b      	ldr	r3, [r3, #8]
 8018376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801837a:	2b40      	cmp	r3, #64	@ 0x40
 801837c:	d146      	bne.n	801840c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	3308      	adds	r3, #8
 8018384:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018388:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801838c:	e853 3f00 	ldrex	r3, [r3]
 8018390:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8018394:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801839c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	3308      	adds	r3, #8
 80183a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80183aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80183ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80183b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80183ba:	e841 2300 	strex	r3, r2, [r1]
 80183be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80183c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d1d9      	bne.n	801837e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d017      	beq.n	8018404 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80183da:	4a15      	ldr	r2, [pc, #84]	@ (8018430 <HAL_UART_IRQHandler+0x2c0>)
 80183dc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80183e4:	4618      	mov	r0, r3
 80183e6:	f7f4 fa7b 	bl	800c8e0 <HAL_DMA_Abort_IT>
 80183ea:	4603      	mov	r3, r0
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d019      	beq.n	8018424 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80183f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80183f8:	687a      	ldr	r2, [r7, #4]
 80183fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80183fe:	4610      	mov	r0, r2
 8018400:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018402:	e00f      	b.n	8018424 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018404:	6878      	ldr	r0, [r7, #4]
 8018406:	f000 fa93 	bl	8018930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801840a:	e00b      	b.n	8018424 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801840c:	6878      	ldr	r0, [r7, #4]
 801840e:	f000 fa8f 	bl	8018930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018412:	e007      	b.n	8018424 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018414:	6878      	ldr	r0, [r7, #4]
 8018416:	f000 fa8b 	bl	8018930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	2200      	movs	r2, #0
 801841e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8018422:	e26f      	b.n	8018904 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018424:	bf00      	nop
    return;
 8018426:	e26d      	b.n	8018904 <HAL_UART_IRQHandler+0x794>
 8018428:	10000001 	.word	0x10000001
 801842c:	04000120 	.word	0x04000120
 8018430:	08019cb9 	.word	0x08019cb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018438:	2b01      	cmp	r3, #1
 801843a:	f040 8203 	bne.w	8018844 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801843e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018442:	f003 0310 	and.w	r3, r3, #16
 8018446:	2b00      	cmp	r3, #0
 8018448:	f000 81fc 	beq.w	8018844 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801844c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018450:	f003 0310 	and.w	r3, r3, #16
 8018454:	2b00      	cmp	r3, #0
 8018456:	f000 81f5 	beq.w	8018844 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	2210      	movs	r2, #16
 8018460:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	689b      	ldr	r3, [r3, #8]
 8018468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801846c:	2b40      	cmp	r3, #64	@ 0x40
 801846e:	f040 816d 	bne.w	801874c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	4aa4      	ldr	r2, [pc, #656]	@ (801870c <HAL_UART_IRQHandler+0x59c>)
 801847c:	4293      	cmp	r3, r2
 801847e:	d068      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	4aa1      	ldr	r2, [pc, #644]	@ (8018710 <HAL_UART_IRQHandler+0x5a0>)
 801848a:	4293      	cmp	r3, r2
 801848c:	d061      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	4a9f      	ldr	r2, [pc, #636]	@ (8018714 <HAL_UART_IRQHandler+0x5a4>)
 8018498:	4293      	cmp	r3, r2
 801849a:	d05a      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	4a9c      	ldr	r2, [pc, #624]	@ (8018718 <HAL_UART_IRQHandler+0x5a8>)
 80184a6:	4293      	cmp	r3, r2
 80184a8:	d053      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	4a9a      	ldr	r2, [pc, #616]	@ (801871c <HAL_UART_IRQHandler+0x5ac>)
 80184b4:	4293      	cmp	r3, r2
 80184b6:	d04c      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	4a97      	ldr	r2, [pc, #604]	@ (8018720 <HAL_UART_IRQHandler+0x5b0>)
 80184c2:	4293      	cmp	r3, r2
 80184c4:	d045      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	4a95      	ldr	r2, [pc, #596]	@ (8018724 <HAL_UART_IRQHandler+0x5b4>)
 80184d0:	4293      	cmp	r3, r2
 80184d2:	d03e      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	4a92      	ldr	r2, [pc, #584]	@ (8018728 <HAL_UART_IRQHandler+0x5b8>)
 80184de:	4293      	cmp	r3, r2
 80184e0:	d037      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	4a90      	ldr	r2, [pc, #576]	@ (801872c <HAL_UART_IRQHandler+0x5bc>)
 80184ec:	4293      	cmp	r3, r2
 80184ee:	d030      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	4a8d      	ldr	r2, [pc, #564]	@ (8018730 <HAL_UART_IRQHandler+0x5c0>)
 80184fa:	4293      	cmp	r3, r2
 80184fc:	d029      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	4a8b      	ldr	r2, [pc, #556]	@ (8018734 <HAL_UART_IRQHandler+0x5c4>)
 8018508:	4293      	cmp	r3, r2
 801850a:	d022      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	4a88      	ldr	r2, [pc, #544]	@ (8018738 <HAL_UART_IRQHandler+0x5c8>)
 8018516:	4293      	cmp	r3, r2
 8018518:	d01b      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	4a86      	ldr	r2, [pc, #536]	@ (801873c <HAL_UART_IRQHandler+0x5cc>)
 8018524:	4293      	cmp	r3, r2
 8018526:	d014      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	4a83      	ldr	r2, [pc, #524]	@ (8018740 <HAL_UART_IRQHandler+0x5d0>)
 8018532:	4293      	cmp	r3, r2
 8018534:	d00d      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	4a81      	ldr	r2, [pc, #516]	@ (8018744 <HAL_UART_IRQHandler+0x5d4>)
 8018540:	4293      	cmp	r3, r2
 8018542:	d006      	beq.n	8018552 <HAL_UART_IRQHandler+0x3e2>
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	4a7e      	ldr	r2, [pc, #504]	@ (8018748 <HAL_UART_IRQHandler+0x5d8>)
 801854e:	4293      	cmp	r3, r2
 8018550:	d106      	bne.n	8018560 <HAL_UART_IRQHandler+0x3f0>
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	685b      	ldr	r3, [r3, #4]
 801855c:	b29b      	uxth	r3, r3
 801855e:	e005      	b.n	801856c <HAL_UART_IRQHandler+0x3fc>
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	685b      	ldr	r3, [r3, #4]
 801856a:	b29b      	uxth	r3, r3
 801856c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8018570:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8018574:	2b00      	cmp	r3, #0
 8018576:	f000 80ad 	beq.w	80186d4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018580:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018584:	429a      	cmp	r2, r3
 8018586:	f080 80a5 	bcs.w	80186d4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8018590:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801859a:	69db      	ldr	r3, [r3, #28]
 801859c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80185a0:	f000 8087 	beq.w	80186b2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80185ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80185b0:	e853 3f00 	ldrex	r3, [r3]
 80185b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80185b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80185bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80185c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	461a      	mov	r2, r3
 80185ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80185ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80185d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80185d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80185da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80185de:	e841 2300 	strex	r3, r2, [r1]
 80185e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80185e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d1da      	bne.n	80185a4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	3308      	adds	r3, #8
 80185f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80185f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80185f8:	e853 3f00 	ldrex	r3, [r3]
 80185fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80185fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018600:	f023 0301 	bic.w	r3, r3, #1
 8018604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	3308      	adds	r3, #8
 801860e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8018612:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8018616:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018618:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801861a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801861e:	e841 2300 	strex	r3, r2, [r1]
 8018622:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8018624:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018626:	2b00      	cmp	r3, #0
 8018628:	d1e1      	bne.n	80185ee <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	3308      	adds	r3, #8
 8018630:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018632:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018634:	e853 3f00 	ldrex	r3, [r3]
 8018638:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801863a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801863c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8018640:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	3308      	adds	r3, #8
 801864a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801864e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8018650:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018652:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8018654:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8018656:	e841 2300 	strex	r3, r2, [r1]
 801865a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801865c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801865e:	2b00      	cmp	r3, #0
 8018660:	d1e3      	bne.n	801862a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	2220      	movs	r2, #32
 8018666:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	2200      	movs	r2, #0
 801866e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018678:	e853 3f00 	ldrex	r3, [r3]
 801867c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801867e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018680:	f023 0310 	bic.w	r3, r3, #16
 8018684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	461a      	mov	r2, r3
 801868e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8018692:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018694:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018696:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018698:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801869a:	e841 2300 	strex	r3, r2, [r1]
 801869e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80186a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d1e4      	bne.n	8018670 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80186ac:	4618      	mov	r0, r3
 80186ae:	f7f3 fdf9 	bl	800c2a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2202      	movs	r2, #2
 80186b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80186c4:	b29b      	uxth	r3, r3
 80186c6:	1ad3      	subs	r3, r2, r3
 80186c8:	b29b      	uxth	r3, r3
 80186ca:	4619      	mov	r1, r3
 80186cc:	6878      	ldr	r0, [r7, #4]
 80186ce:	f000 f939 	bl	8018944 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80186d2:	e119      	b.n	8018908 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80186da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80186de:	429a      	cmp	r2, r3
 80186e0:	f040 8112 	bne.w	8018908 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80186ea:	69db      	ldr	r3, [r3, #28]
 80186ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80186f0:	f040 810a 	bne.w	8018908 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	2202      	movs	r2, #2
 80186f8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8018700:	4619      	mov	r1, r3
 8018702:	6878      	ldr	r0, [r7, #4]
 8018704:	f000 f91e 	bl	8018944 <HAL_UARTEx_RxEventCallback>
      return;
 8018708:	e0fe      	b.n	8018908 <HAL_UART_IRQHandler+0x798>
 801870a:	bf00      	nop
 801870c:	40020010 	.word	0x40020010
 8018710:	40020028 	.word	0x40020028
 8018714:	40020040 	.word	0x40020040
 8018718:	40020058 	.word	0x40020058
 801871c:	40020070 	.word	0x40020070
 8018720:	40020088 	.word	0x40020088
 8018724:	400200a0 	.word	0x400200a0
 8018728:	400200b8 	.word	0x400200b8
 801872c:	40020410 	.word	0x40020410
 8018730:	40020428 	.word	0x40020428
 8018734:	40020440 	.word	0x40020440
 8018738:	40020458 	.word	0x40020458
 801873c:	40020470 	.word	0x40020470
 8018740:	40020488 	.word	0x40020488
 8018744:	400204a0 	.word	0x400204a0
 8018748:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018758:	b29b      	uxth	r3, r3
 801875a:	1ad3      	subs	r3, r2, r3
 801875c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8018766:	b29b      	uxth	r3, r3
 8018768:	2b00      	cmp	r3, #0
 801876a:	f000 80cf 	beq.w	801890c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 801876e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8018772:	2b00      	cmp	r3, #0
 8018774:	f000 80ca 	beq.w	801890c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801877e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018780:	e853 3f00 	ldrex	r3, [r3]
 8018784:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8018786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801878c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	461a      	mov	r2, r3
 8018796:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801879a:	647b      	str	r3, [r7, #68]	@ 0x44
 801879c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801879e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80187a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80187a2:	e841 2300 	strex	r3, r2, [r1]
 80187a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80187a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d1e4      	bne.n	8018778 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	3308      	adds	r3, #8
 80187b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80187b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b8:	e853 3f00 	ldrex	r3, [r3]
 80187bc:	623b      	str	r3, [r7, #32]
   return(result);
 80187be:	6a3a      	ldr	r2, [r7, #32]
 80187c0:	4b55      	ldr	r3, [pc, #340]	@ (8018918 <HAL_UART_IRQHandler+0x7a8>)
 80187c2:	4013      	ands	r3, r2
 80187c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	3308      	adds	r3, #8
 80187ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80187d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80187d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80187d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80187d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80187da:	e841 2300 	strex	r3, r2, [r1]
 80187de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80187e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d1e3      	bne.n	80187ae <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2220      	movs	r2, #32
 80187ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	2200      	movs	r2, #0
 80187f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	2200      	movs	r2, #0
 80187f8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018800:	693b      	ldr	r3, [r7, #16]
 8018802:	e853 3f00 	ldrex	r3, [r3]
 8018806:	60fb      	str	r3, [r7, #12]
   return(result);
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	f023 0310 	bic.w	r3, r3, #16
 801880e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	461a      	mov	r2, r3
 8018818:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801881c:	61fb      	str	r3, [r7, #28]
 801881e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018820:	69b9      	ldr	r1, [r7, #24]
 8018822:	69fa      	ldr	r2, [r7, #28]
 8018824:	e841 2300 	strex	r3, r2, [r1]
 8018828:	617b      	str	r3, [r7, #20]
   return(result);
 801882a:	697b      	ldr	r3, [r7, #20]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d1e4      	bne.n	80187fa <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	2202      	movs	r2, #2
 8018834:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8018836:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801883a:	4619      	mov	r1, r3
 801883c:	6878      	ldr	r0, [r7, #4]
 801883e:	f000 f881 	bl	8018944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8018842:	e063      	b.n	801890c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8018844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018848:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801884c:	2b00      	cmp	r3, #0
 801884e:	d00e      	beq.n	801886e <HAL_UART_IRQHandler+0x6fe>
 8018850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018858:	2b00      	cmp	r3, #0
 801885a:	d008      	beq.n	801886e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8018864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018866:	6878      	ldr	r0, [r7, #4]
 8018868:	f002 f926 	bl	801aab8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801886c:	e051      	b.n	8018912 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801886e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018876:	2b00      	cmp	r3, #0
 8018878:	d014      	beq.n	80188a4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801887a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801887e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018882:	2b00      	cmp	r3, #0
 8018884:	d105      	bne.n	8018892 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801888a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801888e:	2b00      	cmp	r3, #0
 8018890:	d008      	beq.n	80188a4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018896:	2b00      	cmp	r3, #0
 8018898:	d03a      	beq.n	8018910 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801889e:	6878      	ldr	r0, [r7, #4]
 80188a0:	4798      	blx	r3
    }
    return;
 80188a2:	e035      	b.n	8018910 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80188a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80188a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d009      	beq.n	80188c4 <HAL_UART_IRQHandler+0x754>
 80188b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80188b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d003      	beq.n	80188c4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80188bc:	6878      	ldr	r0, [r7, #4]
 80188be:	f001 fbaf 	bl	801a020 <UART_EndTransmit_IT>
    return;
 80188c2:	e026      	b.n	8018912 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80188c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80188c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d009      	beq.n	80188e4 <HAL_UART_IRQHandler+0x774>
 80188d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80188d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d003      	beq.n	80188e4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80188dc:	6878      	ldr	r0, [r7, #4]
 80188de:	f002 f8ff 	bl	801aae0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80188e2:	e016      	b.n	8018912 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80188e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80188e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d010      	beq.n	8018912 <HAL_UART_IRQHandler+0x7a2>
 80188f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	da0c      	bge.n	8018912 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80188f8:	6878      	ldr	r0, [r7, #4]
 80188fa:	f002 f8e7 	bl	801aacc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80188fe:	e008      	b.n	8018912 <HAL_UART_IRQHandler+0x7a2>
      return;
 8018900:	bf00      	nop
 8018902:	e006      	b.n	8018912 <HAL_UART_IRQHandler+0x7a2>
    return;
 8018904:	bf00      	nop
 8018906:	e004      	b.n	8018912 <HAL_UART_IRQHandler+0x7a2>
      return;
 8018908:	bf00      	nop
 801890a:	e002      	b.n	8018912 <HAL_UART_IRQHandler+0x7a2>
      return;
 801890c:	bf00      	nop
 801890e:	e000      	b.n	8018912 <HAL_UART_IRQHandler+0x7a2>
    return;
 8018910:	bf00      	nop
  }
}
 8018912:	37e8      	adds	r7, #232	@ 0xe8
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}
 8018918:	effffffe 	.word	0xeffffffe

0801891c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801891c:	b480      	push	{r7}
 801891e:	b083      	sub	sp, #12
 8018920:	af00      	add	r7, sp, #0
 8018922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018924:	bf00      	nop
 8018926:	370c      	adds	r7, #12
 8018928:	46bd      	mov	sp, r7
 801892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801892e:	4770      	bx	lr

08018930 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018930:	b480      	push	{r7}
 8018932:	b083      	sub	sp, #12
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018938:	bf00      	nop
 801893a:	370c      	adds	r7, #12
 801893c:	46bd      	mov	sp, r7
 801893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018942:	4770      	bx	lr

08018944 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018944:	b480      	push	{r7}
 8018946:	b083      	sub	sp, #12
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
 801894c:	460b      	mov	r3, r1
 801894e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8018950:	bf00      	nop
 8018952:	370c      	adds	r7, #12
 8018954:	46bd      	mov	sp, r7
 8018956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801895a:	4770      	bx	lr

0801895c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801895c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018960:	b092      	sub	sp, #72	@ 0x48
 8018962:	af00      	add	r7, sp, #0
 8018964:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018966:	2300      	movs	r3, #0
 8018968:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801896c:	697b      	ldr	r3, [r7, #20]
 801896e:	689a      	ldr	r2, [r3, #8]
 8018970:	697b      	ldr	r3, [r7, #20]
 8018972:	691b      	ldr	r3, [r3, #16]
 8018974:	431a      	orrs	r2, r3
 8018976:	697b      	ldr	r3, [r7, #20]
 8018978:	695b      	ldr	r3, [r3, #20]
 801897a:	431a      	orrs	r2, r3
 801897c:	697b      	ldr	r3, [r7, #20]
 801897e:	69db      	ldr	r3, [r3, #28]
 8018980:	4313      	orrs	r3, r2
 8018982:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018984:	697b      	ldr	r3, [r7, #20]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	681a      	ldr	r2, [r3, #0]
 801898a:	4bbe      	ldr	r3, [pc, #760]	@ (8018c84 <UART_SetConfig+0x328>)
 801898c:	4013      	ands	r3, r2
 801898e:	697a      	ldr	r2, [r7, #20]
 8018990:	6812      	ldr	r2, [r2, #0]
 8018992:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018994:	430b      	orrs	r3, r1
 8018996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018998:	697b      	ldr	r3, [r7, #20]
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	685b      	ldr	r3, [r3, #4]
 801899e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80189a2:	697b      	ldr	r3, [r7, #20]
 80189a4:	68da      	ldr	r2, [r3, #12]
 80189a6:	697b      	ldr	r3, [r7, #20]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	430a      	orrs	r2, r1
 80189ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80189ae:	697b      	ldr	r3, [r7, #20]
 80189b0:	699b      	ldr	r3, [r3, #24]
 80189b2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80189b4:	697b      	ldr	r3, [r7, #20]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	4ab3      	ldr	r2, [pc, #716]	@ (8018c88 <UART_SetConfig+0x32c>)
 80189ba:	4293      	cmp	r3, r2
 80189bc:	d004      	beq.n	80189c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80189be:	697b      	ldr	r3, [r7, #20]
 80189c0:	6a1b      	ldr	r3, [r3, #32]
 80189c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80189c4:	4313      	orrs	r3, r2
 80189c6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80189c8:	697b      	ldr	r3, [r7, #20]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	689a      	ldr	r2, [r3, #8]
 80189ce:	4baf      	ldr	r3, [pc, #700]	@ (8018c8c <UART_SetConfig+0x330>)
 80189d0:	4013      	ands	r3, r2
 80189d2:	697a      	ldr	r2, [r7, #20]
 80189d4:	6812      	ldr	r2, [r2, #0]
 80189d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80189d8:	430b      	orrs	r3, r1
 80189da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80189dc:	697b      	ldr	r3, [r7, #20]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80189e2:	f023 010f 	bic.w	r1, r3, #15
 80189e6:	697b      	ldr	r3, [r7, #20]
 80189e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80189ea:	697b      	ldr	r3, [r7, #20]
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	430a      	orrs	r2, r1
 80189f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80189f2:	697b      	ldr	r3, [r7, #20]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	4aa6      	ldr	r2, [pc, #664]	@ (8018c90 <UART_SetConfig+0x334>)
 80189f8:	4293      	cmp	r3, r2
 80189fa:	d177      	bne.n	8018aec <UART_SetConfig+0x190>
 80189fc:	4ba5      	ldr	r3, [pc, #660]	@ (8018c94 <UART_SetConfig+0x338>)
 80189fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018a00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018a04:	2b28      	cmp	r3, #40	@ 0x28
 8018a06:	d86d      	bhi.n	8018ae4 <UART_SetConfig+0x188>
 8018a08:	a201      	add	r2, pc, #4	@ (adr r2, 8018a10 <UART_SetConfig+0xb4>)
 8018a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a0e:	bf00      	nop
 8018a10:	08018ab5 	.word	0x08018ab5
 8018a14:	08018ae5 	.word	0x08018ae5
 8018a18:	08018ae5 	.word	0x08018ae5
 8018a1c:	08018ae5 	.word	0x08018ae5
 8018a20:	08018ae5 	.word	0x08018ae5
 8018a24:	08018ae5 	.word	0x08018ae5
 8018a28:	08018ae5 	.word	0x08018ae5
 8018a2c:	08018ae5 	.word	0x08018ae5
 8018a30:	08018abd 	.word	0x08018abd
 8018a34:	08018ae5 	.word	0x08018ae5
 8018a38:	08018ae5 	.word	0x08018ae5
 8018a3c:	08018ae5 	.word	0x08018ae5
 8018a40:	08018ae5 	.word	0x08018ae5
 8018a44:	08018ae5 	.word	0x08018ae5
 8018a48:	08018ae5 	.word	0x08018ae5
 8018a4c:	08018ae5 	.word	0x08018ae5
 8018a50:	08018ac5 	.word	0x08018ac5
 8018a54:	08018ae5 	.word	0x08018ae5
 8018a58:	08018ae5 	.word	0x08018ae5
 8018a5c:	08018ae5 	.word	0x08018ae5
 8018a60:	08018ae5 	.word	0x08018ae5
 8018a64:	08018ae5 	.word	0x08018ae5
 8018a68:	08018ae5 	.word	0x08018ae5
 8018a6c:	08018ae5 	.word	0x08018ae5
 8018a70:	08018acd 	.word	0x08018acd
 8018a74:	08018ae5 	.word	0x08018ae5
 8018a78:	08018ae5 	.word	0x08018ae5
 8018a7c:	08018ae5 	.word	0x08018ae5
 8018a80:	08018ae5 	.word	0x08018ae5
 8018a84:	08018ae5 	.word	0x08018ae5
 8018a88:	08018ae5 	.word	0x08018ae5
 8018a8c:	08018ae5 	.word	0x08018ae5
 8018a90:	08018ad5 	.word	0x08018ad5
 8018a94:	08018ae5 	.word	0x08018ae5
 8018a98:	08018ae5 	.word	0x08018ae5
 8018a9c:	08018ae5 	.word	0x08018ae5
 8018aa0:	08018ae5 	.word	0x08018ae5
 8018aa4:	08018ae5 	.word	0x08018ae5
 8018aa8:	08018ae5 	.word	0x08018ae5
 8018aac:	08018ae5 	.word	0x08018ae5
 8018ab0:	08018add 	.word	0x08018add
 8018ab4:	2301      	movs	r3, #1
 8018ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018aba:	e326      	b.n	801910a <UART_SetConfig+0x7ae>
 8018abc:	2304      	movs	r3, #4
 8018abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ac2:	e322      	b.n	801910a <UART_SetConfig+0x7ae>
 8018ac4:	2308      	movs	r3, #8
 8018ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018aca:	e31e      	b.n	801910a <UART_SetConfig+0x7ae>
 8018acc:	2310      	movs	r3, #16
 8018ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ad2:	e31a      	b.n	801910a <UART_SetConfig+0x7ae>
 8018ad4:	2320      	movs	r3, #32
 8018ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ada:	e316      	b.n	801910a <UART_SetConfig+0x7ae>
 8018adc:	2340      	movs	r3, #64	@ 0x40
 8018ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ae2:	e312      	b.n	801910a <UART_SetConfig+0x7ae>
 8018ae4:	2380      	movs	r3, #128	@ 0x80
 8018ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018aea:	e30e      	b.n	801910a <UART_SetConfig+0x7ae>
 8018aec:	697b      	ldr	r3, [r7, #20]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	4a69      	ldr	r2, [pc, #420]	@ (8018c98 <UART_SetConfig+0x33c>)
 8018af2:	4293      	cmp	r3, r2
 8018af4:	d130      	bne.n	8018b58 <UART_SetConfig+0x1fc>
 8018af6:	4b67      	ldr	r3, [pc, #412]	@ (8018c94 <UART_SetConfig+0x338>)
 8018af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018afa:	f003 0307 	and.w	r3, r3, #7
 8018afe:	2b05      	cmp	r3, #5
 8018b00:	d826      	bhi.n	8018b50 <UART_SetConfig+0x1f4>
 8018b02:	a201      	add	r2, pc, #4	@ (adr r2, 8018b08 <UART_SetConfig+0x1ac>)
 8018b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b08:	08018b21 	.word	0x08018b21
 8018b0c:	08018b29 	.word	0x08018b29
 8018b10:	08018b31 	.word	0x08018b31
 8018b14:	08018b39 	.word	0x08018b39
 8018b18:	08018b41 	.word	0x08018b41
 8018b1c:	08018b49 	.word	0x08018b49
 8018b20:	2300      	movs	r3, #0
 8018b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b26:	e2f0      	b.n	801910a <UART_SetConfig+0x7ae>
 8018b28:	2304      	movs	r3, #4
 8018b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b2e:	e2ec      	b.n	801910a <UART_SetConfig+0x7ae>
 8018b30:	2308      	movs	r3, #8
 8018b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b36:	e2e8      	b.n	801910a <UART_SetConfig+0x7ae>
 8018b38:	2310      	movs	r3, #16
 8018b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b3e:	e2e4      	b.n	801910a <UART_SetConfig+0x7ae>
 8018b40:	2320      	movs	r3, #32
 8018b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b46:	e2e0      	b.n	801910a <UART_SetConfig+0x7ae>
 8018b48:	2340      	movs	r3, #64	@ 0x40
 8018b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b4e:	e2dc      	b.n	801910a <UART_SetConfig+0x7ae>
 8018b50:	2380      	movs	r3, #128	@ 0x80
 8018b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b56:	e2d8      	b.n	801910a <UART_SetConfig+0x7ae>
 8018b58:	697b      	ldr	r3, [r7, #20]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	4a4f      	ldr	r2, [pc, #316]	@ (8018c9c <UART_SetConfig+0x340>)
 8018b5e:	4293      	cmp	r3, r2
 8018b60:	d130      	bne.n	8018bc4 <UART_SetConfig+0x268>
 8018b62:	4b4c      	ldr	r3, [pc, #304]	@ (8018c94 <UART_SetConfig+0x338>)
 8018b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b66:	f003 0307 	and.w	r3, r3, #7
 8018b6a:	2b05      	cmp	r3, #5
 8018b6c:	d826      	bhi.n	8018bbc <UART_SetConfig+0x260>
 8018b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8018b74 <UART_SetConfig+0x218>)
 8018b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b74:	08018b8d 	.word	0x08018b8d
 8018b78:	08018b95 	.word	0x08018b95
 8018b7c:	08018b9d 	.word	0x08018b9d
 8018b80:	08018ba5 	.word	0x08018ba5
 8018b84:	08018bad 	.word	0x08018bad
 8018b88:	08018bb5 	.word	0x08018bb5
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b92:	e2ba      	b.n	801910a <UART_SetConfig+0x7ae>
 8018b94:	2304      	movs	r3, #4
 8018b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018b9a:	e2b6      	b.n	801910a <UART_SetConfig+0x7ae>
 8018b9c:	2308      	movs	r3, #8
 8018b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018ba2:	e2b2      	b.n	801910a <UART_SetConfig+0x7ae>
 8018ba4:	2310      	movs	r3, #16
 8018ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018baa:	e2ae      	b.n	801910a <UART_SetConfig+0x7ae>
 8018bac:	2320      	movs	r3, #32
 8018bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bb2:	e2aa      	b.n	801910a <UART_SetConfig+0x7ae>
 8018bb4:	2340      	movs	r3, #64	@ 0x40
 8018bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bba:	e2a6      	b.n	801910a <UART_SetConfig+0x7ae>
 8018bbc:	2380      	movs	r3, #128	@ 0x80
 8018bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bc2:	e2a2      	b.n	801910a <UART_SetConfig+0x7ae>
 8018bc4:	697b      	ldr	r3, [r7, #20]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	4a35      	ldr	r2, [pc, #212]	@ (8018ca0 <UART_SetConfig+0x344>)
 8018bca:	4293      	cmp	r3, r2
 8018bcc:	d130      	bne.n	8018c30 <UART_SetConfig+0x2d4>
 8018bce:	4b31      	ldr	r3, [pc, #196]	@ (8018c94 <UART_SetConfig+0x338>)
 8018bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bd2:	f003 0307 	and.w	r3, r3, #7
 8018bd6:	2b05      	cmp	r3, #5
 8018bd8:	d826      	bhi.n	8018c28 <UART_SetConfig+0x2cc>
 8018bda:	a201      	add	r2, pc, #4	@ (adr r2, 8018be0 <UART_SetConfig+0x284>)
 8018bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018be0:	08018bf9 	.word	0x08018bf9
 8018be4:	08018c01 	.word	0x08018c01
 8018be8:	08018c09 	.word	0x08018c09
 8018bec:	08018c11 	.word	0x08018c11
 8018bf0:	08018c19 	.word	0x08018c19
 8018bf4:	08018c21 	.word	0x08018c21
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018bfe:	e284      	b.n	801910a <UART_SetConfig+0x7ae>
 8018c00:	2304      	movs	r3, #4
 8018c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c06:	e280      	b.n	801910a <UART_SetConfig+0x7ae>
 8018c08:	2308      	movs	r3, #8
 8018c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c0e:	e27c      	b.n	801910a <UART_SetConfig+0x7ae>
 8018c10:	2310      	movs	r3, #16
 8018c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c16:	e278      	b.n	801910a <UART_SetConfig+0x7ae>
 8018c18:	2320      	movs	r3, #32
 8018c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c1e:	e274      	b.n	801910a <UART_SetConfig+0x7ae>
 8018c20:	2340      	movs	r3, #64	@ 0x40
 8018c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c26:	e270      	b.n	801910a <UART_SetConfig+0x7ae>
 8018c28:	2380      	movs	r3, #128	@ 0x80
 8018c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c2e:	e26c      	b.n	801910a <UART_SetConfig+0x7ae>
 8018c30:	697b      	ldr	r3, [r7, #20]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	4a1b      	ldr	r2, [pc, #108]	@ (8018ca4 <UART_SetConfig+0x348>)
 8018c36:	4293      	cmp	r3, r2
 8018c38:	d142      	bne.n	8018cc0 <UART_SetConfig+0x364>
 8018c3a:	4b16      	ldr	r3, [pc, #88]	@ (8018c94 <UART_SetConfig+0x338>)
 8018c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018c3e:	f003 0307 	and.w	r3, r3, #7
 8018c42:	2b05      	cmp	r3, #5
 8018c44:	d838      	bhi.n	8018cb8 <UART_SetConfig+0x35c>
 8018c46:	a201      	add	r2, pc, #4	@ (adr r2, 8018c4c <UART_SetConfig+0x2f0>)
 8018c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c4c:	08018c65 	.word	0x08018c65
 8018c50:	08018c6d 	.word	0x08018c6d
 8018c54:	08018c75 	.word	0x08018c75
 8018c58:	08018c7d 	.word	0x08018c7d
 8018c5c:	08018ca9 	.word	0x08018ca9
 8018c60:	08018cb1 	.word	0x08018cb1
 8018c64:	2300      	movs	r3, #0
 8018c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c6a:	e24e      	b.n	801910a <UART_SetConfig+0x7ae>
 8018c6c:	2304      	movs	r3, #4
 8018c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c72:	e24a      	b.n	801910a <UART_SetConfig+0x7ae>
 8018c74:	2308      	movs	r3, #8
 8018c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c7a:	e246      	b.n	801910a <UART_SetConfig+0x7ae>
 8018c7c:	2310      	movs	r3, #16
 8018c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018c82:	e242      	b.n	801910a <UART_SetConfig+0x7ae>
 8018c84:	cfff69f3 	.word	0xcfff69f3
 8018c88:	58000c00 	.word	0x58000c00
 8018c8c:	11fff4ff 	.word	0x11fff4ff
 8018c90:	40011000 	.word	0x40011000
 8018c94:	58024400 	.word	0x58024400
 8018c98:	40004400 	.word	0x40004400
 8018c9c:	40004800 	.word	0x40004800
 8018ca0:	40004c00 	.word	0x40004c00
 8018ca4:	40005000 	.word	0x40005000
 8018ca8:	2320      	movs	r3, #32
 8018caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cae:	e22c      	b.n	801910a <UART_SetConfig+0x7ae>
 8018cb0:	2340      	movs	r3, #64	@ 0x40
 8018cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cb6:	e228      	b.n	801910a <UART_SetConfig+0x7ae>
 8018cb8:	2380      	movs	r3, #128	@ 0x80
 8018cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018cbe:	e224      	b.n	801910a <UART_SetConfig+0x7ae>
 8018cc0:	697b      	ldr	r3, [r7, #20]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	4ab1      	ldr	r2, [pc, #708]	@ (8018f8c <UART_SetConfig+0x630>)
 8018cc6:	4293      	cmp	r3, r2
 8018cc8:	d176      	bne.n	8018db8 <UART_SetConfig+0x45c>
 8018cca:	4bb1      	ldr	r3, [pc, #708]	@ (8018f90 <UART_SetConfig+0x634>)
 8018ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018cce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018cd2:	2b28      	cmp	r3, #40	@ 0x28
 8018cd4:	d86c      	bhi.n	8018db0 <UART_SetConfig+0x454>
 8018cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8018cdc <UART_SetConfig+0x380>)
 8018cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cdc:	08018d81 	.word	0x08018d81
 8018ce0:	08018db1 	.word	0x08018db1
 8018ce4:	08018db1 	.word	0x08018db1
 8018ce8:	08018db1 	.word	0x08018db1
 8018cec:	08018db1 	.word	0x08018db1
 8018cf0:	08018db1 	.word	0x08018db1
 8018cf4:	08018db1 	.word	0x08018db1
 8018cf8:	08018db1 	.word	0x08018db1
 8018cfc:	08018d89 	.word	0x08018d89
 8018d00:	08018db1 	.word	0x08018db1
 8018d04:	08018db1 	.word	0x08018db1
 8018d08:	08018db1 	.word	0x08018db1
 8018d0c:	08018db1 	.word	0x08018db1
 8018d10:	08018db1 	.word	0x08018db1
 8018d14:	08018db1 	.word	0x08018db1
 8018d18:	08018db1 	.word	0x08018db1
 8018d1c:	08018d91 	.word	0x08018d91
 8018d20:	08018db1 	.word	0x08018db1
 8018d24:	08018db1 	.word	0x08018db1
 8018d28:	08018db1 	.word	0x08018db1
 8018d2c:	08018db1 	.word	0x08018db1
 8018d30:	08018db1 	.word	0x08018db1
 8018d34:	08018db1 	.word	0x08018db1
 8018d38:	08018db1 	.word	0x08018db1
 8018d3c:	08018d99 	.word	0x08018d99
 8018d40:	08018db1 	.word	0x08018db1
 8018d44:	08018db1 	.word	0x08018db1
 8018d48:	08018db1 	.word	0x08018db1
 8018d4c:	08018db1 	.word	0x08018db1
 8018d50:	08018db1 	.word	0x08018db1
 8018d54:	08018db1 	.word	0x08018db1
 8018d58:	08018db1 	.word	0x08018db1
 8018d5c:	08018da1 	.word	0x08018da1
 8018d60:	08018db1 	.word	0x08018db1
 8018d64:	08018db1 	.word	0x08018db1
 8018d68:	08018db1 	.word	0x08018db1
 8018d6c:	08018db1 	.word	0x08018db1
 8018d70:	08018db1 	.word	0x08018db1
 8018d74:	08018db1 	.word	0x08018db1
 8018d78:	08018db1 	.word	0x08018db1
 8018d7c:	08018da9 	.word	0x08018da9
 8018d80:	2301      	movs	r3, #1
 8018d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d86:	e1c0      	b.n	801910a <UART_SetConfig+0x7ae>
 8018d88:	2304      	movs	r3, #4
 8018d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d8e:	e1bc      	b.n	801910a <UART_SetConfig+0x7ae>
 8018d90:	2308      	movs	r3, #8
 8018d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d96:	e1b8      	b.n	801910a <UART_SetConfig+0x7ae>
 8018d98:	2310      	movs	r3, #16
 8018d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018d9e:	e1b4      	b.n	801910a <UART_SetConfig+0x7ae>
 8018da0:	2320      	movs	r3, #32
 8018da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018da6:	e1b0      	b.n	801910a <UART_SetConfig+0x7ae>
 8018da8:	2340      	movs	r3, #64	@ 0x40
 8018daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dae:	e1ac      	b.n	801910a <UART_SetConfig+0x7ae>
 8018db0:	2380      	movs	r3, #128	@ 0x80
 8018db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018db6:	e1a8      	b.n	801910a <UART_SetConfig+0x7ae>
 8018db8:	697b      	ldr	r3, [r7, #20]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	4a75      	ldr	r2, [pc, #468]	@ (8018f94 <UART_SetConfig+0x638>)
 8018dbe:	4293      	cmp	r3, r2
 8018dc0:	d130      	bne.n	8018e24 <UART_SetConfig+0x4c8>
 8018dc2:	4b73      	ldr	r3, [pc, #460]	@ (8018f90 <UART_SetConfig+0x634>)
 8018dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018dc6:	f003 0307 	and.w	r3, r3, #7
 8018dca:	2b05      	cmp	r3, #5
 8018dcc:	d826      	bhi.n	8018e1c <UART_SetConfig+0x4c0>
 8018dce:	a201      	add	r2, pc, #4	@ (adr r2, 8018dd4 <UART_SetConfig+0x478>)
 8018dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dd4:	08018ded 	.word	0x08018ded
 8018dd8:	08018df5 	.word	0x08018df5
 8018ddc:	08018dfd 	.word	0x08018dfd
 8018de0:	08018e05 	.word	0x08018e05
 8018de4:	08018e0d 	.word	0x08018e0d
 8018de8:	08018e15 	.word	0x08018e15
 8018dec:	2300      	movs	r3, #0
 8018dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018df2:	e18a      	b.n	801910a <UART_SetConfig+0x7ae>
 8018df4:	2304      	movs	r3, #4
 8018df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018dfa:	e186      	b.n	801910a <UART_SetConfig+0x7ae>
 8018dfc:	2308      	movs	r3, #8
 8018dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e02:	e182      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e04:	2310      	movs	r3, #16
 8018e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e0a:	e17e      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e0c:	2320      	movs	r3, #32
 8018e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e12:	e17a      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e14:	2340      	movs	r3, #64	@ 0x40
 8018e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e1a:	e176      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e1c:	2380      	movs	r3, #128	@ 0x80
 8018e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e22:	e172      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e24:	697b      	ldr	r3, [r7, #20]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	4a5b      	ldr	r2, [pc, #364]	@ (8018f98 <UART_SetConfig+0x63c>)
 8018e2a:	4293      	cmp	r3, r2
 8018e2c:	d130      	bne.n	8018e90 <UART_SetConfig+0x534>
 8018e2e:	4b58      	ldr	r3, [pc, #352]	@ (8018f90 <UART_SetConfig+0x634>)
 8018e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018e32:	f003 0307 	and.w	r3, r3, #7
 8018e36:	2b05      	cmp	r3, #5
 8018e38:	d826      	bhi.n	8018e88 <UART_SetConfig+0x52c>
 8018e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8018e40 <UART_SetConfig+0x4e4>)
 8018e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e40:	08018e59 	.word	0x08018e59
 8018e44:	08018e61 	.word	0x08018e61
 8018e48:	08018e69 	.word	0x08018e69
 8018e4c:	08018e71 	.word	0x08018e71
 8018e50:	08018e79 	.word	0x08018e79
 8018e54:	08018e81 	.word	0x08018e81
 8018e58:	2300      	movs	r3, #0
 8018e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e5e:	e154      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e60:	2304      	movs	r3, #4
 8018e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e66:	e150      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e68:	2308      	movs	r3, #8
 8018e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e6e:	e14c      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e70:	2310      	movs	r3, #16
 8018e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e76:	e148      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e78:	2320      	movs	r3, #32
 8018e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e7e:	e144      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e80:	2340      	movs	r3, #64	@ 0x40
 8018e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e86:	e140      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e88:	2380      	movs	r3, #128	@ 0x80
 8018e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018e8e:	e13c      	b.n	801910a <UART_SetConfig+0x7ae>
 8018e90:	697b      	ldr	r3, [r7, #20]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	4a41      	ldr	r2, [pc, #260]	@ (8018f9c <UART_SetConfig+0x640>)
 8018e96:	4293      	cmp	r3, r2
 8018e98:	f040 8082 	bne.w	8018fa0 <UART_SetConfig+0x644>
 8018e9c:	4b3c      	ldr	r3, [pc, #240]	@ (8018f90 <UART_SetConfig+0x634>)
 8018e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ea0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018ea4:	2b28      	cmp	r3, #40	@ 0x28
 8018ea6:	d86d      	bhi.n	8018f84 <UART_SetConfig+0x628>
 8018ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8018eb0 <UART_SetConfig+0x554>)
 8018eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018eae:	bf00      	nop
 8018eb0:	08018f55 	.word	0x08018f55
 8018eb4:	08018f85 	.word	0x08018f85
 8018eb8:	08018f85 	.word	0x08018f85
 8018ebc:	08018f85 	.word	0x08018f85
 8018ec0:	08018f85 	.word	0x08018f85
 8018ec4:	08018f85 	.word	0x08018f85
 8018ec8:	08018f85 	.word	0x08018f85
 8018ecc:	08018f85 	.word	0x08018f85
 8018ed0:	08018f5d 	.word	0x08018f5d
 8018ed4:	08018f85 	.word	0x08018f85
 8018ed8:	08018f85 	.word	0x08018f85
 8018edc:	08018f85 	.word	0x08018f85
 8018ee0:	08018f85 	.word	0x08018f85
 8018ee4:	08018f85 	.word	0x08018f85
 8018ee8:	08018f85 	.word	0x08018f85
 8018eec:	08018f85 	.word	0x08018f85
 8018ef0:	08018f65 	.word	0x08018f65
 8018ef4:	08018f85 	.word	0x08018f85
 8018ef8:	08018f85 	.word	0x08018f85
 8018efc:	08018f85 	.word	0x08018f85
 8018f00:	08018f85 	.word	0x08018f85
 8018f04:	08018f85 	.word	0x08018f85
 8018f08:	08018f85 	.word	0x08018f85
 8018f0c:	08018f85 	.word	0x08018f85
 8018f10:	08018f6d 	.word	0x08018f6d
 8018f14:	08018f85 	.word	0x08018f85
 8018f18:	08018f85 	.word	0x08018f85
 8018f1c:	08018f85 	.word	0x08018f85
 8018f20:	08018f85 	.word	0x08018f85
 8018f24:	08018f85 	.word	0x08018f85
 8018f28:	08018f85 	.word	0x08018f85
 8018f2c:	08018f85 	.word	0x08018f85
 8018f30:	08018f75 	.word	0x08018f75
 8018f34:	08018f85 	.word	0x08018f85
 8018f38:	08018f85 	.word	0x08018f85
 8018f3c:	08018f85 	.word	0x08018f85
 8018f40:	08018f85 	.word	0x08018f85
 8018f44:	08018f85 	.word	0x08018f85
 8018f48:	08018f85 	.word	0x08018f85
 8018f4c:	08018f85 	.word	0x08018f85
 8018f50:	08018f7d 	.word	0x08018f7d
 8018f54:	2301      	movs	r3, #1
 8018f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f5a:	e0d6      	b.n	801910a <UART_SetConfig+0x7ae>
 8018f5c:	2304      	movs	r3, #4
 8018f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f62:	e0d2      	b.n	801910a <UART_SetConfig+0x7ae>
 8018f64:	2308      	movs	r3, #8
 8018f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f6a:	e0ce      	b.n	801910a <UART_SetConfig+0x7ae>
 8018f6c:	2310      	movs	r3, #16
 8018f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f72:	e0ca      	b.n	801910a <UART_SetConfig+0x7ae>
 8018f74:	2320      	movs	r3, #32
 8018f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f7a:	e0c6      	b.n	801910a <UART_SetConfig+0x7ae>
 8018f7c:	2340      	movs	r3, #64	@ 0x40
 8018f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f82:	e0c2      	b.n	801910a <UART_SetConfig+0x7ae>
 8018f84:	2380      	movs	r3, #128	@ 0x80
 8018f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018f8a:	e0be      	b.n	801910a <UART_SetConfig+0x7ae>
 8018f8c:	40011400 	.word	0x40011400
 8018f90:	58024400 	.word	0x58024400
 8018f94:	40007800 	.word	0x40007800
 8018f98:	40007c00 	.word	0x40007c00
 8018f9c:	40011800 	.word	0x40011800
 8018fa0:	697b      	ldr	r3, [r7, #20]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	4aad      	ldr	r2, [pc, #692]	@ (801925c <UART_SetConfig+0x900>)
 8018fa6:	4293      	cmp	r3, r2
 8018fa8:	d176      	bne.n	8019098 <UART_SetConfig+0x73c>
 8018faa:	4bad      	ldr	r3, [pc, #692]	@ (8019260 <UART_SetConfig+0x904>)
 8018fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018fae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018fb2:	2b28      	cmp	r3, #40	@ 0x28
 8018fb4:	d86c      	bhi.n	8019090 <UART_SetConfig+0x734>
 8018fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8018fbc <UART_SetConfig+0x660>)
 8018fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fbc:	08019061 	.word	0x08019061
 8018fc0:	08019091 	.word	0x08019091
 8018fc4:	08019091 	.word	0x08019091
 8018fc8:	08019091 	.word	0x08019091
 8018fcc:	08019091 	.word	0x08019091
 8018fd0:	08019091 	.word	0x08019091
 8018fd4:	08019091 	.word	0x08019091
 8018fd8:	08019091 	.word	0x08019091
 8018fdc:	08019069 	.word	0x08019069
 8018fe0:	08019091 	.word	0x08019091
 8018fe4:	08019091 	.word	0x08019091
 8018fe8:	08019091 	.word	0x08019091
 8018fec:	08019091 	.word	0x08019091
 8018ff0:	08019091 	.word	0x08019091
 8018ff4:	08019091 	.word	0x08019091
 8018ff8:	08019091 	.word	0x08019091
 8018ffc:	08019071 	.word	0x08019071
 8019000:	08019091 	.word	0x08019091
 8019004:	08019091 	.word	0x08019091
 8019008:	08019091 	.word	0x08019091
 801900c:	08019091 	.word	0x08019091
 8019010:	08019091 	.word	0x08019091
 8019014:	08019091 	.word	0x08019091
 8019018:	08019091 	.word	0x08019091
 801901c:	08019079 	.word	0x08019079
 8019020:	08019091 	.word	0x08019091
 8019024:	08019091 	.word	0x08019091
 8019028:	08019091 	.word	0x08019091
 801902c:	08019091 	.word	0x08019091
 8019030:	08019091 	.word	0x08019091
 8019034:	08019091 	.word	0x08019091
 8019038:	08019091 	.word	0x08019091
 801903c:	08019081 	.word	0x08019081
 8019040:	08019091 	.word	0x08019091
 8019044:	08019091 	.word	0x08019091
 8019048:	08019091 	.word	0x08019091
 801904c:	08019091 	.word	0x08019091
 8019050:	08019091 	.word	0x08019091
 8019054:	08019091 	.word	0x08019091
 8019058:	08019091 	.word	0x08019091
 801905c:	08019089 	.word	0x08019089
 8019060:	2301      	movs	r3, #1
 8019062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019066:	e050      	b.n	801910a <UART_SetConfig+0x7ae>
 8019068:	2304      	movs	r3, #4
 801906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801906e:	e04c      	b.n	801910a <UART_SetConfig+0x7ae>
 8019070:	2308      	movs	r3, #8
 8019072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019076:	e048      	b.n	801910a <UART_SetConfig+0x7ae>
 8019078:	2310      	movs	r3, #16
 801907a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801907e:	e044      	b.n	801910a <UART_SetConfig+0x7ae>
 8019080:	2320      	movs	r3, #32
 8019082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019086:	e040      	b.n	801910a <UART_SetConfig+0x7ae>
 8019088:	2340      	movs	r3, #64	@ 0x40
 801908a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801908e:	e03c      	b.n	801910a <UART_SetConfig+0x7ae>
 8019090:	2380      	movs	r3, #128	@ 0x80
 8019092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019096:	e038      	b.n	801910a <UART_SetConfig+0x7ae>
 8019098:	697b      	ldr	r3, [r7, #20]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	4a71      	ldr	r2, [pc, #452]	@ (8019264 <UART_SetConfig+0x908>)
 801909e:	4293      	cmp	r3, r2
 80190a0:	d130      	bne.n	8019104 <UART_SetConfig+0x7a8>
 80190a2:	4b6f      	ldr	r3, [pc, #444]	@ (8019260 <UART_SetConfig+0x904>)
 80190a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80190a6:	f003 0307 	and.w	r3, r3, #7
 80190aa:	2b05      	cmp	r3, #5
 80190ac:	d826      	bhi.n	80190fc <UART_SetConfig+0x7a0>
 80190ae:	a201      	add	r2, pc, #4	@ (adr r2, 80190b4 <UART_SetConfig+0x758>)
 80190b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190b4:	080190cd 	.word	0x080190cd
 80190b8:	080190d5 	.word	0x080190d5
 80190bc:	080190dd 	.word	0x080190dd
 80190c0:	080190e5 	.word	0x080190e5
 80190c4:	080190ed 	.word	0x080190ed
 80190c8:	080190f5 	.word	0x080190f5
 80190cc:	2302      	movs	r3, #2
 80190ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190d2:	e01a      	b.n	801910a <UART_SetConfig+0x7ae>
 80190d4:	2304      	movs	r3, #4
 80190d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190da:	e016      	b.n	801910a <UART_SetConfig+0x7ae>
 80190dc:	2308      	movs	r3, #8
 80190de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190e2:	e012      	b.n	801910a <UART_SetConfig+0x7ae>
 80190e4:	2310      	movs	r3, #16
 80190e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190ea:	e00e      	b.n	801910a <UART_SetConfig+0x7ae>
 80190ec:	2320      	movs	r3, #32
 80190ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190f2:	e00a      	b.n	801910a <UART_SetConfig+0x7ae>
 80190f4:	2340      	movs	r3, #64	@ 0x40
 80190f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80190fa:	e006      	b.n	801910a <UART_SetConfig+0x7ae>
 80190fc:	2380      	movs	r3, #128	@ 0x80
 80190fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019102:	e002      	b.n	801910a <UART_SetConfig+0x7ae>
 8019104:	2380      	movs	r3, #128	@ 0x80
 8019106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801910a:	697b      	ldr	r3, [r7, #20]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	4a55      	ldr	r2, [pc, #340]	@ (8019264 <UART_SetConfig+0x908>)
 8019110:	4293      	cmp	r3, r2
 8019112:	f040 80f8 	bne.w	8019306 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8019116:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801911a:	2b20      	cmp	r3, #32
 801911c:	dc46      	bgt.n	80191ac <UART_SetConfig+0x850>
 801911e:	2b02      	cmp	r3, #2
 8019120:	db75      	blt.n	801920e <UART_SetConfig+0x8b2>
 8019122:	3b02      	subs	r3, #2
 8019124:	2b1e      	cmp	r3, #30
 8019126:	d872      	bhi.n	801920e <UART_SetConfig+0x8b2>
 8019128:	a201      	add	r2, pc, #4	@ (adr r2, 8019130 <UART_SetConfig+0x7d4>)
 801912a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801912e:	bf00      	nop
 8019130:	080191b3 	.word	0x080191b3
 8019134:	0801920f 	.word	0x0801920f
 8019138:	080191bb 	.word	0x080191bb
 801913c:	0801920f 	.word	0x0801920f
 8019140:	0801920f 	.word	0x0801920f
 8019144:	0801920f 	.word	0x0801920f
 8019148:	080191cb 	.word	0x080191cb
 801914c:	0801920f 	.word	0x0801920f
 8019150:	0801920f 	.word	0x0801920f
 8019154:	0801920f 	.word	0x0801920f
 8019158:	0801920f 	.word	0x0801920f
 801915c:	0801920f 	.word	0x0801920f
 8019160:	0801920f 	.word	0x0801920f
 8019164:	0801920f 	.word	0x0801920f
 8019168:	080191db 	.word	0x080191db
 801916c:	0801920f 	.word	0x0801920f
 8019170:	0801920f 	.word	0x0801920f
 8019174:	0801920f 	.word	0x0801920f
 8019178:	0801920f 	.word	0x0801920f
 801917c:	0801920f 	.word	0x0801920f
 8019180:	0801920f 	.word	0x0801920f
 8019184:	0801920f 	.word	0x0801920f
 8019188:	0801920f 	.word	0x0801920f
 801918c:	0801920f 	.word	0x0801920f
 8019190:	0801920f 	.word	0x0801920f
 8019194:	0801920f 	.word	0x0801920f
 8019198:	0801920f 	.word	0x0801920f
 801919c:	0801920f 	.word	0x0801920f
 80191a0:	0801920f 	.word	0x0801920f
 80191a4:	0801920f 	.word	0x0801920f
 80191a8:	08019201 	.word	0x08019201
 80191ac:	2b40      	cmp	r3, #64	@ 0x40
 80191ae:	d02a      	beq.n	8019206 <UART_SetConfig+0x8aa>
 80191b0:	e02d      	b.n	801920e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80191b2:	f7fa fd8b 	bl	8013ccc <HAL_RCCEx_GetD3PCLK1Freq>
 80191b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80191b8:	e02f      	b.n	801921a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80191ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80191be:	4618      	mov	r0, r3
 80191c0:	f7fa fd9a 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80191c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80191c8:	e027      	b.n	801921a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80191ca:	f107 0318 	add.w	r3, r7, #24
 80191ce:	4618      	mov	r0, r3
 80191d0:	f7fa fee6 	bl	8013fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80191d4:	69fb      	ldr	r3, [r7, #28]
 80191d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80191d8:	e01f      	b.n	801921a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80191da:	4b21      	ldr	r3, [pc, #132]	@ (8019260 <UART_SetConfig+0x904>)
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	f003 0320 	and.w	r3, r3, #32
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d009      	beq.n	80191fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80191e6:	4b1e      	ldr	r3, [pc, #120]	@ (8019260 <UART_SetConfig+0x904>)
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	08db      	lsrs	r3, r3, #3
 80191ec:	f003 0303 	and.w	r3, r3, #3
 80191f0:	4a1d      	ldr	r2, [pc, #116]	@ (8019268 <UART_SetConfig+0x90c>)
 80191f2:	fa22 f303 	lsr.w	r3, r2, r3
 80191f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80191f8:	e00f      	b.n	801921a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80191fa:	4b1b      	ldr	r3, [pc, #108]	@ (8019268 <UART_SetConfig+0x90c>)
 80191fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80191fe:	e00c      	b.n	801921a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019200:	4b1a      	ldr	r3, [pc, #104]	@ (801926c <UART_SetConfig+0x910>)
 8019202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019204:	e009      	b.n	801921a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801920a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801920c:	e005      	b.n	801921a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801920e:	2300      	movs	r3, #0
 8019210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8019212:	2301      	movs	r3, #1
 8019214:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019218:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801921a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801921c:	2b00      	cmp	r3, #0
 801921e:	f000 81ee 	beq.w	80195fe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8019222:	697b      	ldr	r3, [r7, #20]
 8019224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019226:	4a12      	ldr	r2, [pc, #72]	@ (8019270 <UART_SetConfig+0x914>)
 8019228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801922c:	461a      	mov	r2, r3
 801922e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019230:	fbb3 f3f2 	udiv	r3, r3, r2
 8019234:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019236:	697b      	ldr	r3, [r7, #20]
 8019238:	685a      	ldr	r2, [r3, #4]
 801923a:	4613      	mov	r3, r2
 801923c:	005b      	lsls	r3, r3, #1
 801923e:	4413      	add	r3, r2
 8019240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019242:	429a      	cmp	r2, r3
 8019244:	d305      	bcc.n	8019252 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8019246:	697b      	ldr	r3, [r7, #20]
 8019248:	685b      	ldr	r3, [r3, #4]
 801924a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801924c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801924e:	429a      	cmp	r2, r3
 8019250:	d910      	bls.n	8019274 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8019252:	2301      	movs	r3, #1
 8019254:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019258:	e1d1      	b.n	80195fe <UART_SetConfig+0xca2>
 801925a:	bf00      	nop
 801925c:	40011c00 	.word	0x40011c00
 8019260:	58024400 	.word	0x58024400
 8019264:	58000c00 	.word	0x58000c00
 8019268:	03d09000 	.word	0x03d09000
 801926c:	003d0900 	.word	0x003d0900
 8019270:	0801eb44 	.word	0x0801eb44
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019276:	2200      	movs	r2, #0
 8019278:	60bb      	str	r3, [r7, #8]
 801927a:	60fa      	str	r2, [r7, #12]
 801927c:	697b      	ldr	r3, [r7, #20]
 801927e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019280:	4ac0      	ldr	r2, [pc, #768]	@ (8019584 <UART_SetConfig+0xc28>)
 8019282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019286:	b29b      	uxth	r3, r3
 8019288:	2200      	movs	r2, #0
 801928a:	603b      	str	r3, [r7, #0]
 801928c:	607a      	str	r2, [r7, #4]
 801928e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8019296:	f7e7 f88b 	bl	80003b0 <__aeabi_uldivmod>
 801929a:	4602      	mov	r2, r0
 801929c:	460b      	mov	r3, r1
 801929e:	4610      	mov	r0, r2
 80192a0:	4619      	mov	r1, r3
 80192a2:	f04f 0200 	mov.w	r2, #0
 80192a6:	f04f 0300 	mov.w	r3, #0
 80192aa:	020b      	lsls	r3, r1, #8
 80192ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80192b0:	0202      	lsls	r2, r0, #8
 80192b2:	6979      	ldr	r1, [r7, #20]
 80192b4:	6849      	ldr	r1, [r1, #4]
 80192b6:	0849      	lsrs	r1, r1, #1
 80192b8:	2000      	movs	r0, #0
 80192ba:	460c      	mov	r4, r1
 80192bc:	4605      	mov	r5, r0
 80192be:	eb12 0804 	adds.w	r8, r2, r4
 80192c2:	eb43 0905 	adc.w	r9, r3, r5
 80192c6:	697b      	ldr	r3, [r7, #20]
 80192c8:	685b      	ldr	r3, [r3, #4]
 80192ca:	2200      	movs	r2, #0
 80192cc:	469a      	mov	sl, r3
 80192ce:	4693      	mov	fp, r2
 80192d0:	4652      	mov	r2, sl
 80192d2:	465b      	mov	r3, fp
 80192d4:	4640      	mov	r0, r8
 80192d6:	4649      	mov	r1, r9
 80192d8:	f7e7 f86a 	bl	80003b0 <__aeabi_uldivmod>
 80192dc:	4602      	mov	r2, r0
 80192de:	460b      	mov	r3, r1
 80192e0:	4613      	mov	r3, r2
 80192e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80192e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80192ea:	d308      	bcc.n	80192fe <UART_SetConfig+0x9a2>
 80192ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80192f2:	d204      	bcs.n	80192fe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80192f4:	697b      	ldr	r3, [r7, #20]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80192fa:	60da      	str	r2, [r3, #12]
 80192fc:	e17f      	b.n	80195fe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80192fe:	2301      	movs	r3, #1
 8019300:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8019304:	e17b      	b.n	80195fe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019306:	697b      	ldr	r3, [r7, #20]
 8019308:	69db      	ldr	r3, [r3, #28]
 801930a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801930e:	f040 80bd 	bne.w	801948c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8019312:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019316:	2b20      	cmp	r3, #32
 8019318:	dc48      	bgt.n	80193ac <UART_SetConfig+0xa50>
 801931a:	2b00      	cmp	r3, #0
 801931c:	db7b      	blt.n	8019416 <UART_SetConfig+0xaba>
 801931e:	2b20      	cmp	r3, #32
 8019320:	d879      	bhi.n	8019416 <UART_SetConfig+0xaba>
 8019322:	a201      	add	r2, pc, #4	@ (adr r2, 8019328 <UART_SetConfig+0x9cc>)
 8019324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019328:	080193b3 	.word	0x080193b3
 801932c:	080193bb 	.word	0x080193bb
 8019330:	08019417 	.word	0x08019417
 8019334:	08019417 	.word	0x08019417
 8019338:	080193c3 	.word	0x080193c3
 801933c:	08019417 	.word	0x08019417
 8019340:	08019417 	.word	0x08019417
 8019344:	08019417 	.word	0x08019417
 8019348:	080193d3 	.word	0x080193d3
 801934c:	08019417 	.word	0x08019417
 8019350:	08019417 	.word	0x08019417
 8019354:	08019417 	.word	0x08019417
 8019358:	08019417 	.word	0x08019417
 801935c:	08019417 	.word	0x08019417
 8019360:	08019417 	.word	0x08019417
 8019364:	08019417 	.word	0x08019417
 8019368:	080193e3 	.word	0x080193e3
 801936c:	08019417 	.word	0x08019417
 8019370:	08019417 	.word	0x08019417
 8019374:	08019417 	.word	0x08019417
 8019378:	08019417 	.word	0x08019417
 801937c:	08019417 	.word	0x08019417
 8019380:	08019417 	.word	0x08019417
 8019384:	08019417 	.word	0x08019417
 8019388:	08019417 	.word	0x08019417
 801938c:	08019417 	.word	0x08019417
 8019390:	08019417 	.word	0x08019417
 8019394:	08019417 	.word	0x08019417
 8019398:	08019417 	.word	0x08019417
 801939c:	08019417 	.word	0x08019417
 80193a0:	08019417 	.word	0x08019417
 80193a4:	08019417 	.word	0x08019417
 80193a8:	08019409 	.word	0x08019409
 80193ac:	2b40      	cmp	r3, #64	@ 0x40
 80193ae:	d02e      	beq.n	801940e <UART_SetConfig+0xab2>
 80193b0:	e031      	b.n	8019416 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80193b2:	f7f8 fded 	bl	8011f90 <HAL_RCC_GetPCLK1Freq>
 80193b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80193b8:	e033      	b.n	8019422 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80193ba:	f7f8 fdff 	bl	8011fbc <HAL_RCC_GetPCLK2Freq>
 80193be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80193c0:	e02f      	b.n	8019422 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80193c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80193c6:	4618      	mov	r0, r3
 80193c8:	f7fa fc96 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80193cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80193d0:	e027      	b.n	8019422 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80193d2:	f107 0318 	add.w	r3, r7, #24
 80193d6:	4618      	mov	r0, r3
 80193d8:	f7fa fde2 	bl	8013fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80193dc:	69fb      	ldr	r3, [r7, #28]
 80193de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80193e0:	e01f      	b.n	8019422 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80193e2:	4b69      	ldr	r3, [pc, #420]	@ (8019588 <UART_SetConfig+0xc2c>)
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	f003 0320 	and.w	r3, r3, #32
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d009      	beq.n	8019402 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80193ee:	4b66      	ldr	r3, [pc, #408]	@ (8019588 <UART_SetConfig+0xc2c>)
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	08db      	lsrs	r3, r3, #3
 80193f4:	f003 0303 	and.w	r3, r3, #3
 80193f8:	4a64      	ldr	r2, [pc, #400]	@ (801958c <UART_SetConfig+0xc30>)
 80193fa:	fa22 f303 	lsr.w	r3, r2, r3
 80193fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019400:	e00f      	b.n	8019422 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8019402:	4b62      	ldr	r3, [pc, #392]	@ (801958c <UART_SetConfig+0xc30>)
 8019404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019406:	e00c      	b.n	8019422 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8019408:	4b61      	ldr	r3, [pc, #388]	@ (8019590 <UART_SetConfig+0xc34>)
 801940a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801940c:	e009      	b.n	8019422 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801940e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019414:	e005      	b.n	8019422 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8019416:	2300      	movs	r3, #0
 8019418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801941a:	2301      	movs	r3, #1
 801941c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8019420:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019424:	2b00      	cmp	r3, #0
 8019426:	f000 80ea 	beq.w	80195fe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801942a:	697b      	ldr	r3, [r7, #20]
 801942c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801942e:	4a55      	ldr	r2, [pc, #340]	@ (8019584 <UART_SetConfig+0xc28>)
 8019430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019434:	461a      	mov	r2, r3
 8019436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019438:	fbb3 f3f2 	udiv	r3, r3, r2
 801943c:	005a      	lsls	r2, r3, #1
 801943e:	697b      	ldr	r3, [r7, #20]
 8019440:	685b      	ldr	r3, [r3, #4]
 8019442:	085b      	lsrs	r3, r3, #1
 8019444:	441a      	add	r2, r3
 8019446:	697b      	ldr	r3, [r7, #20]
 8019448:	685b      	ldr	r3, [r3, #4]
 801944a:	fbb2 f3f3 	udiv	r3, r2, r3
 801944e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019452:	2b0f      	cmp	r3, #15
 8019454:	d916      	bls.n	8019484 <UART_SetConfig+0xb28>
 8019456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801945c:	d212      	bcs.n	8019484 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801945e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019460:	b29b      	uxth	r3, r3
 8019462:	f023 030f 	bic.w	r3, r3, #15
 8019466:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801946a:	085b      	lsrs	r3, r3, #1
 801946c:	b29b      	uxth	r3, r3
 801946e:	f003 0307 	and.w	r3, r3, #7
 8019472:	b29a      	uxth	r2, r3
 8019474:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019476:	4313      	orrs	r3, r2
 8019478:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801947a:	697b      	ldr	r3, [r7, #20]
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019480:	60da      	str	r2, [r3, #12]
 8019482:	e0bc      	b.n	80195fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8019484:	2301      	movs	r3, #1
 8019486:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801948a:	e0b8      	b.n	80195fe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801948c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8019490:	2b20      	cmp	r3, #32
 8019492:	dc4b      	bgt.n	801952c <UART_SetConfig+0xbd0>
 8019494:	2b00      	cmp	r3, #0
 8019496:	f2c0 8087 	blt.w	80195a8 <UART_SetConfig+0xc4c>
 801949a:	2b20      	cmp	r3, #32
 801949c:	f200 8084 	bhi.w	80195a8 <UART_SetConfig+0xc4c>
 80194a0:	a201      	add	r2, pc, #4	@ (adr r2, 80194a8 <UART_SetConfig+0xb4c>)
 80194a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194a6:	bf00      	nop
 80194a8:	08019533 	.word	0x08019533
 80194ac:	0801953b 	.word	0x0801953b
 80194b0:	080195a9 	.word	0x080195a9
 80194b4:	080195a9 	.word	0x080195a9
 80194b8:	08019543 	.word	0x08019543
 80194bc:	080195a9 	.word	0x080195a9
 80194c0:	080195a9 	.word	0x080195a9
 80194c4:	080195a9 	.word	0x080195a9
 80194c8:	08019553 	.word	0x08019553
 80194cc:	080195a9 	.word	0x080195a9
 80194d0:	080195a9 	.word	0x080195a9
 80194d4:	080195a9 	.word	0x080195a9
 80194d8:	080195a9 	.word	0x080195a9
 80194dc:	080195a9 	.word	0x080195a9
 80194e0:	080195a9 	.word	0x080195a9
 80194e4:	080195a9 	.word	0x080195a9
 80194e8:	08019563 	.word	0x08019563
 80194ec:	080195a9 	.word	0x080195a9
 80194f0:	080195a9 	.word	0x080195a9
 80194f4:	080195a9 	.word	0x080195a9
 80194f8:	080195a9 	.word	0x080195a9
 80194fc:	080195a9 	.word	0x080195a9
 8019500:	080195a9 	.word	0x080195a9
 8019504:	080195a9 	.word	0x080195a9
 8019508:	080195a9 	.word	0x080195a9
 801950c:	080195a9 	.word	0x080195a9
 8019510:	080195a9 	.word	0x080195a9
 8019514:	080195a9 	.word	0x080195a9
 8019518:	080195a9 	.word	0x080195a9
 801951c:	080195a9 	.word	0x080195a9
 8019520:	080195a9 	.word	0x080195a9
 8019524:	080195a9 	.word	0x080195a9
 8019528:	0801959b 	.word	0x0801959b
 801952c:	2b40      	cmp	r3, #64	@ 0x40
 801952e:	d037      	beq.n	80195a0 <UART_SetConfig+0xc44>
 8019530:	e03a      	b.n	80195a8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019532:	f7f8 fd2d 	bl	8011f90 <HAL_RCC_GetPCLK1Freq>
 8019536:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019538:	e03c      	b.n	80195b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801953a:	f7f8 fd3f 	bl	8011fbc <HAL_RCC_GetPCLK2Freq>
 801953e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8019540:	e038      	b.n	80195b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8019546:	4618      	mov	r0, r3
 8019548:	f7fa fbd6 	bl	8013cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801954e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019550:	e030      	b.n	80195b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019552:	f107 0318 	add.w	r3, r7, #24
 8019556:	4618      	mov	r0, r3
 8019558:	f7fa fd22 	bl	8013fa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801955c:	69fb      	ldr	r3, [r7, #28]
 801955e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019560:	e028      	b.n	80195b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019562:	4b09      	ldr	r3, [pc, #36]	@ (8019588 <UART_SetConfig+0xc2c>)
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	f003 0320 	and.w	r3, r3, #32
 801956a:	2b00      	cmp	r3, #0
 801956c:	d012      	beq.n	8019594 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801956e:	4b06      	ldr	r3, [pc, #24]	@ (8019588 <UART_SetConfig+0xc2c>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	08db      	lsrs	r3, r3, #3
 8019574:	f003 0303 	and.w	r3, r3, #3
 8019578:	4a04      	ldr	r2, [pc, #16]	@ (801958c <UART_SetConfig+0xc30>)
 801957a:	fa22 f303 	lsr.w	r3, r2, r3
 801957e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8019580:	e018      	b.n	80195b4 <UART_SetConfig+0xc58>
 8019582:	bf00      	nop
 8019584:	0801eb44 	.word	0x0801eb44
 8019588:	58024400 	.word	0x58024400
 801958c:	03d09000 	.word	0x03d09000
 8019590:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8019594:	4b24      	ldr	r3, [pc, #144]	@ (8019628 <UART_SetConfig+0xccc>)
 8019596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8019598:	e00c      	b.n	80195b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801959a:	4b24      	ldr	r3, [pc, #144]	@ (801962c <UART_SetConfig+0xcd0>)
 801959c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801959e:	e009      	b.n	80195b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80195a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80195a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80195a6:	e005      	b.n	80195b4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80195a8:	2300      	movs	r3, #0
 80195aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80195ac:	2301      	movs	r3, #1
 80195ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80195b2:	bf00      	nop
    }

    if (pclk != 0U)
 80195b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d021      	beq.n	80195fe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80195ba:	697b      	ldr	r3, [r7, #20]
 80195bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195be:	4a1c      	ldr	r2, [pc, #112]	@ (8019630 <UART_SetConfig+0xcd4>)
 80195c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80195c4:	461a      	mov	r2, r3
 80195c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80195cc:	697b      	ldr	r3, [r7, #20]
 80195ce:	685b      	ldr	r3, [r3, #4]
 80195d0:	085b      	lsrs	r3, r3, #1
 80195d2:	441a      	add	r2, r3
 80195d4:	697b      	ldr	r3, [r7, #20]
 80195d6:	685b      	ldr	r3, [r3, #4]
 80195d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80195dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80195de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195e0:	2b0f      	cmp	r3, #15
 80195e2:	d909      	bls.n	80195f8 <UART_SetConfig+0xc9c>
 80195e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80195ea:	d205      	bcs.n	80195f8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80195ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80195ee:	b29a      	uxth	r2, r3
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	60da      	str	r2, [r3, #12]
 80195f6:	e002      	b.n	80195fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80195f8:	2301      	movs	r3, #1
 80195fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80195fe:	697b      	ldr	r3, [r7, #20]
 8019600:	2201      	movs	r2, #1
 8019602:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8019606:	697b      	ldr	r3, [r7, #20]
 8019608:	2201      	movs	r2, #1
 801960a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801960e:	697b      	ldr	r3, [r7, #20]
 8019610:	2200      	movs	r2, #0
 8019612:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8019614:	697b      	ldr	r3, [r7, #20]
 8019616:	2200      	movs	r2, #0
 8019618:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801961a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801961e:	4618      	mov	r0, r3
 8019620:	3748      	adds	r7, #72	@ 0x48
 8019622:	46bd      	mov	sp, r7
 8019624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019628:	03d09000 	.word	0x03d09000
 801962c:	003d0900 	.word	0x003d0900
 8019630:	0801eb44 	.word	0x0801eb44

08019634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019634:	b480      	push	{r7}
 8019636:	b083      	sub	sp, #12
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019640:	f003 0308 	and.w	r3, r3, #8
 8019644:	2b00      	cmp	r3, #0
 8019646:	d00a      	beq.n	801965e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	685b      	ldr	r3, [r3, #4]
 801964e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	430a      	orrs	r2, r1
 801965c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019662:	f003 0301 	and.w	r3, r3, #1
 8019666:	2b00      	cmp	r3, #0
 8019668:	d00a      	beq.n	8019680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	685b      	ldr	r3, [r3, #4]
 8019670:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	430a      	orrs	r2, r1
 801967e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019684:	f003 0302 	and.w	r3, r3, #2
 8019688:	2b00      	cmp	r3, #0
 801968a:	d00a      	beq.n	80196a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	685b      	ldr	r3, [r3, #4]
 8019692:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	430a      	orrs	r2, r1
 80196a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196a6:	f003 0304 	and.w	r3, r3, #4
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d00a      	beq.n	80196c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	685b      	ldr	r3, [r3, #4]
 80196b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	430a      	orrs	r2, r1
 80196c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196c8:	f003 0310 	and.w	r3, r3, #16
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d00a      	beq.n	80196e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	689b      	ldr	r3, [r3, #8]
 80196d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	430a      	orrs	r2, r1
 80196e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196ea:	f003 0320 	and.w	r3, r3, #32
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d00a      	beq.n	8019708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	689b      	ldr	r3, [r3, #8]
 80196f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	430a      	orrs	r2, r1
 8019706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801970c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019710:	2b00      	cmp	r3, #0
 8019712:	d01a      	beq.n	801974a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	685b      	ldr	r3, [r3, #4]
 801971a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	430a      	orrs	r2, r1
 8019728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801972e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019732:	d10a      	bne.n	801974a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	685b      	ldr	r3, [r3, #4]
 801973a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	430a      	orrs	r2, r1
 8019748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801974e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019752:	2b00      	cmp	r3, #0
 8019754:	d00a      	beq.n	801976c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	685b      	ldr	r3, [r3, #4]
 801975c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	430a      	orrs	r2, r1
 801976a:	605a      	str	r2, [r3, #4]
  }
}
 801976c:	bf00      	nop
 801976e:	370c      	adds	r7, #12
 8019770:	46bd      	mov	sp, r7
 8019772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019776:	4770      	bx	lr

08019778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019778:	b580      	push	{r7, lr}
 801977a:	b098      	sub	sp, #96	@ 0x60
 801977c:	af02      	add	r7, sp, #8
 801977e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	2200      	movs	r2, #0
 8019784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019788:	f7ef fe94 	bl	80094b4 <HAL_GetTick>
 801978c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	f003 0308 	and.w	r3, r3, #8
 8019798:	2b08      	cmp	r3, #8
 801979a:	d12f      	bne.n	80197fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801979c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80197a0:	9300      	str	r3, [sp, #0]
 80197a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80197a4:	2200      	movs	r2, #0
 80197a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80197aa:	6878      	ldr	r0, [r7, #4]
 80197ac:	f000 f88e 	bl	80198cc <UART_WaitOnFlagUntilTimeout>
 80197b0:	4603      	mov	r3, r0
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d022      	beq.n	80197fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197be:	e853 3f00 	ldrex	r3, [r3]
 80197c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80197c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80197ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	461a      	mov	r2, r3
 80197d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80197d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80197d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80197d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80197da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80197dc:	e841 2300 	strex	r3, r2, [r1]
 80197e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80197e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d1e6      	bne.n	80197b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	2220      	movs	r2, #32
 80197ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	2200      	movs	r2, #0
 80197f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80197f8:	2303      	movs	r3, #3
 80197fa:	e063      	b.n	80198c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	f003 0304 	and.w	r3, r3, #4
 8019806:	2b04      	cmp	r3, #4
 8019808:	d149      	bne.n	801989e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801980a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801980e:	9300      	str	r3, [sp, #0]
 8019810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019812:	2200      	movs	r2, #0
 8019814:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019818:	6878      	ldr	r0, [r7, #4]
 801981a:	f000 f857 	bl	80198cc <UART_WaitOnFlagUntilTimeout>
 801981e:	4603      	mov	r3, r0
 8019820:	2b00      	cmp	r3, #0
 8019822:	d03c      	beq.n	801989e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801982c:	e853 3f00 	ldrex	r3, [r3]
 8019830:	623b      	str	r3, [r7, #32]
   return(result);
 8019832:	6a3b      	ldr	r3, [r7, #32]
 8019834:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019838:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	461a      	mov	r2, r3
 8019840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019842:	633b      	str	r3, [r7, #48]	@ 0x30
 8019844:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801984a:	e841 2300 	strex	r3, r2, [r1]
 801984e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019852:	2b00      	cmp	r3, #0
 8019854:	d1e6      	bne.n	8019824 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	3308      	adds	r3, #8
 801985c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801985e:	693b      	ldr	r3, [r7, #16]
 8019860:	e853 3f00 	ldrex	r3, [r3]
 8019864:	60fb      	str	r3, [r7, #12]
   return(result);
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	f023 0301 	bic.w	r3, r3, #1
 801986c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	3308      	adds	r3, #8
 8019874:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019876:	61fa      	str	r2, [r7, #28]
 8019878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801987a:	69b9      	ldr	r1, [r7, #24]
 801987c:	69fa      	ldr	r2, [r7, #28]
 801987e:	e841 2300 	strex	r3, r2, [r1]
 8019882:	617b      	str	r3, [r7, #20]
   return(result);
 8019884:	697b      	ldr	r3, [r7, #20]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d1e5      	bne.n	8019856 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	2220      	movs	r2, #32
 801988e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	2200      	movs	r2, #0
 8019896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801989a:	2303      	movs	r3, #3
 801989c:	e012      	b.n	80198c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	2220      	movs	r2, #32
 80198a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	2220      	movs	r2, #32
 80198aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	2200      	movs	r2, #0
 80198b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	2200      	movs	r2, #0
 80198b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2200      	movs	r2, #0
 80198be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80198c2:	2300      	movs	r3, #0
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	3758      	adds	r7, #88	@ 0x58
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}

080198cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b084      	sub	sp, #16
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	60f8      	str	r0, [r7, #12]
 80198d4:	60b9      	str	r1, [r7, #8]
 80198d6:	603b      	str	r3, [r7, #0]
 80198d8:	4613      	mov	r3, r2
 80198da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80198dc:	e04f      	b.n	801997e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80198de:	69bb      	ldr	r3, [r7, #24]
 80198e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198e4:	d04b      	beq.n	801997e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80198e6:	f7ef fde5 	bl	80094b4 <HAL_GetTick>
 80198ea:	4602      	mov	r2, r0
 80198ec:	683b      	ldr	r3, [r7, #0]
 80198ee:	1ad3      	subs	r3, r2, r3
 80198f0:	69ba      	ldr	r2, [r7, #24]
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d302      	bcc.n	80198fc <UART_WaitOnFlagUntilTimeout+0x30>
 80198f6:	69bb      	ldr	r3, [r7, #24]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d101      	bne.n	8019900 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80198fc:	2303      	movs	r3, #3
 80198fe:	e04e      	b.n	801999e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	f003 0304 	and.w	r3, r3, #4
 801990a:	2b00      	cmp	r3, #0
 801990c:	d037      	beq.n	801997e <UART_WaitOnFlagUntilTimeout+0xb2>
 801990e:	68bb      	ldr	r3, [r7, #8]
 8019910:	2b80      	cmp	r3, #128	@ 0x80
 8019912:	d034      	beq.n	801997e <UART_WaitOnFlagUntilTimeout+0xb2>
 8019914:	68bb      	ldr	r3, [r7, #8]
 8019916:	2b40      	cmp	r3, #64	@ 0x40
 8019918:	d031      	beq.n	801997e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	69db      	ldr	r3, [r3, #28]
 8019920:	f003 0308 	and.w	r3, r3, #8
 8019924:	2b08      	cmp	r3, #8
 8019926:	d110      	bne.n	801994a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	2208      	movs	r2, #8
 801992e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019930:	68f8      	ldr	r0, [r7, #12]
 8019932:	f000 f95b 	bl	8019bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	2208      	movs	r2, #8
 801993a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	2200      	movs	r2, #0
 8019942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8019946:	2301      	movs	r3, #1
 8019948:	e029      	b.n	801999e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	69db      	ldr	r3, [r3, #28]
 8019950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019958:	d111      	bne.n	801997e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801995a:	68fb      	ldr	r3, [r7, #12]
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019964:	68f8      	ldr	r0, [r7, #12]
 8019966:	f000 f941 	bl	8019bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	2220      	movs	r2, #32
 801996e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	2200      	movs	r2, #0
 8019976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801997a:	2303      	movs	r3, #3
 801997c:	e00f      	b.n	801999e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	69da      	ldr	r2, [r3, #28]
 8019984:	68bb      	ldr	r3, [r7, #8]
 8019986:	4013      	ands	r3, r2
 8019988:	68ba      	ldr	r2, [r7, #8]
 801998a:	429a      	cmp	r2, r3
 801998c:	bf0c      	ite	eq
 801998e:	2301      	moveq	r3, #1
 8019990:	2300      	movne	r3, #0
 8019992:	b2db      	uxtb	r3, r3
 8019994:	461a      	mov	r2, r3
 8019996:	79fb      	ldrb	r3, [r7, #7]
 8019998:	429a      	cmp	r2, r3
 801999a:	d0a0      	beq.n	80198de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801999c:	2300      	movs	r3, #0
}
 801999e:	4618      	mov	r0, r3
 80199a0:	3710      	adds	r7, #16
 80199a2:	46bd      	mov	sp, r7
 80199a4:	bd80      	pop	{r7, pc}
	...

080199a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80199a8:	b480      	push	{r7}
 80199aa:	b0a3      	sub	sp, #140	@ 0x8c
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	60f8      	str	r0, [r7, #12]
 80199b0:	60b9      	str	r1, [r7, #8]
 80199b2:	4613      	mov	r3, r2
 80199b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	68ba      	ldr	r2, [r7, #8]
 80199ba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	88fa      	ldrh	r2, [r7, #6]
 80199c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	88fa      	ldrh	r2, [r7, #6]
 80199c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80199cc:	68fb      	ldr	r3, [r7, #12]
 80199ce:	2200      	movs	r2, #0
 80199d0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	689b      	ldr	r3, [r3, #8]
 80199d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80199da:	d10e      	bne.n	80199fa <UART_Start_Receive_IT+0x52>
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	691b      	ldr	r3, [r3, #16]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d105      	bne.n	80199f0 <UART_Start_Receive_IT+0x48>
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80199ea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80199ee:	e02d      	b.n	8019a4c <UART_Start_Receive_IT+0xa4>
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	22ff      	movs	r2, #255	@ 0xff
 80199f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80199f8:	e028      	b.n	8019a4c <UART_Start_Receive_IT+0xa4>
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	689b      	ldr	r3, [r3, #8]
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d10d      	bne.n	8019a1e <UART_Start_Receive_IT+0x76>
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	691b      	ldr	r3, [r3, #16]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d104      	bne.n	8019a14 <UART_Start_Receive_IT+0x6c>
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	22ff      	movs	r2, #255	@ 0xff
 8019a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a12:	e01b      	b.n	8019a4c <UART_Start_Receive_IT+0xa4>
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	227f      	movs	r2, #127	@ 0x7f
 8019a18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a1c:	e016      	b.n	8019a4c <UART_Start_Receive_IT+0xa4>
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	689b      	ldr	r3, [r3, #8]
 8019a22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019a26:	d10d      	bne.n	8019a44 <UART_Start_Receive_IT+0x9c>
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	691b      	ldr	r3, [r3, #16]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d104      	bne.n	8019a3a <UART_Start_Receive_IT+0x92>
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	227f      	movs	r2, #127	@ 0x7f
 8019a34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a38:	e008      	b.n	8019a4c <UART_Start_Receive_IT+0xa4>
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	223f      	movs	r2, #63	@ 0x3f
 8019a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019a42:	e003      	b.n	8019a4c <UART_Start_Receive_IT+0xa4>
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	2200      	movs	r2, #0
 8019a48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	2200      	movs	r2, #0
 8019a50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	2222      	movs	r2, #34	@ 0x22
 8019a58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	3308      	adds	r3, #8
 8019a62:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a66:	e853 3f00 	ldrex	r3, [r3]
 8019a6a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019a6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019a6e:	f043 0301 	orr.w	r3, r3, #1
 8019a72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	3308      	adds	r3, #8
 8019a7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019a80:	673a      	str	r2, [r7, #112]	@ 0x70
 8019a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a84:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8019a86:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019a88:	e841 2300 	strex	r3, r2, [r1]
 8019a8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8019a8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d1e3      	bne.n	8019a5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019a9c:	d14f      	bne.n	8019b3e <UART_Start_Receive_IT+0x196>
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019aa4:	88fa      	ldrh	r2, [r7, #6]
 8019aa6:	429a      	cmp	r2, r3
 8019aa8:	d349      	bcc.n	8019b3e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	689b      	ldr	r3, [r3, #8]
 8019aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019ab2:	d107      	bne.n	8019ac4 <UART_Start_Receive_IT+0x11c>
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	691b      	ldr	r3, [r3, #16]
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d103      	bne.n	8019ac4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	4a47      	ldr	r2, [pc, #284]	@ (8019bdc <UART_Start_Receive_IT+0x234>)
 8019ac0:	675a      	str	r2, [r3, #116]	@ 0x74
 8019ac2:	e002      	b.n	8019aca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	4a46      	ldr	r2, [pc, #280]	@ (8019be0 <UART_Start_Receive_IT+0x238>)
 8019ac8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	691b      	ldr	r3, [r3, #16]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d01a      	beq.n	8019b08 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ada:	e853 3f00 	ldrex	r3, [r3]
 8019ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019ae6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	461a      	mov	r2, r3
 8019af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019af6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019af8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8019afa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8019afc:	e841 2300 	strex	r3, r2, [r1]
 8019b00:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d1e4      	bne.n	8019ad2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	3308      	adds	r3, #8
 8019b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b12:	e853 3f00 	ldrex	r3, [r3]
 8019b16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8019b1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	3308      	adds	r3, #8
 8019b26:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019b28:	64ba      	str	r2, [r7, #72]	@ 0x48
 8019b2a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019b2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019b30:	e841 2300 	strex	r3, r2, [r1]
 8019b34:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d1e5      	bne.n	8019b08 <UART_Start_Receive_IT+0x160>
 8019b3c:	e046      	b.n	8019bcc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	689b      	ldr	r3, [r3, #8]
 8019b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019b46:	d107      	bne.n	8019b58 <UART_Start_Receive_IT+0x1b0>
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	691b      	ldr	r3, [r3, #16]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d103      	bne.n	8019b58 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	4a24      	ldr	r2, [pc, #144]	@ (8019be4 <UART_Start_Receive_IT+0x23c>)
 8019b54:	675a      	str	r2, [r3, #116]	@ 0x74
 8019b56:	e002      	b.n	8019b5e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	4a23      	ldr	r2, [pc, #140]	@ (8019be8 <UART_Start_Receive_IT+0x240>)
 8019b5c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	691b      	ldr	r3, [r3, #16]
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d019      	beq.n	8019b9a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b6e:	e853 3f00 	ldrex	r3, [r3]
 8019b72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b76:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8019b7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	461a      	mov	r2, r3
 8019b82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8019b86:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019b8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019b8c:	e841 2300 	strex	r3, r2, [r1]
 8019b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8019b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d1e6      	bne.n	8019b66 <UART_Start_Receive_IT+0x1be>
 8019b98:	e018      	b.n	8019bcc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ba0:	697b      	ldr	r3, [r7, #20]
 8019ba2:	e853 3f00 	ldrex	r3, [r3]
 8019ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8019ba8:	693b      	ldr	r3, [r7, #16]
 8019baa:	f043 0320 	orr.w	r3, r3, #32
 8019bae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	461a      	mov	r2, r3
 8019bb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019bb8:	623b      	str	r3, [r7, #32]
 8019bba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019bbc:	69f9      	ldr	r1, [r7, #28]
 8019bbe:	6a3a      	ldr	r2, [r7, #32]
 8019bc0:	e841 2300 	strex	r3, r2, [r1]
 8019bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8019bc6:	69bb      	ldr	r3, [r7, #24]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d1e6      	bne.n	8019b9a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8019bcc:	2300      	movs	r3, #0
}
 8019bce:	4618      	mov	r0, r3
 8019bd0:	378c      	adds	r7, #140	@ 0x8c
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd8:	4770      	bx	lr
 8019bda:	bf00      	nop
 8019bdc:	0801a74d 	.word	0x0801a74d
 8019be0:	0801a3e9 	.word	0x0801a3e9
 8019be4:	0801a231 	.word	0x0801a231
 8019be8:	0801a079 	.word	0x0801a079

08019bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019bec:	b480      	push	{r7}
 8019bee:	b095      	sub	sp, #84	@ 0x54
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019bfc:	e853 3f00 	ldrex	r3, [r3]
 8019c00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	461a      	mov	r2, r3
 8019c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019c12:	643b      	str	r3, [r7, #64]	@ 0x40
 8019c14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019c18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019c1a:	e841 2300 	strex	r3, r2, [r1]
 8019c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d1e6      	bne.n	8019bf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	3308      	adds	r3, #8
 8019c2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c2e:	6a3b      	ldr	r3, [r7, #32]
 8019c30:	e853 3f00 	ldrex	r3, [r3]
 8019c34:	61fb      	str	r3, [r7, #28]
   return(result);
 8019c36:	69fa      	ldr	r2, [r7, #28]
 8019c38:	4b1e      	ldr	r3, [pc, #120]	@ (8019cb4 <UART_EndRxTransfer+0xc8>)
 8019c3a:	4013      	ands	r3, r2
 8019c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	3308      	adds	r3, #8
 8019c44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019c48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019c4e:	e841 2300 	strex	r3, r2, [r1]
 8019c52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d1e5      	bne.n	8019c26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019c5e:	2b01      	cmp	r3, #1
 8019c60:	d118      	bne.n	8019c94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	e853 3f00 	ldrex	r3, [r3]
 8019c6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019c70:	68bb      	ldr	r3, [r7, #8]
 8019c72:	f023 0310 	bic.w	r3, r3, #16
 8019c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	461a      	mov	r2, r3
 8019c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019c80:	61bb      	str	r3, [r7, #24]
 8019c82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019c84:	6979      	ldr	r1, [r7, #20]
 8019c86:	69ba      	ldr	r2, [r7, #24]
 8019c88:	e841 2300 	strex	r3, r2, [r1]
 8019c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8019c8e:	693b      	ldr	r3, [r7, #16]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d1e6      	bne.n	8019c62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	2220      	movs	r2, #32
 8019c98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	2200      	movs	r2, #0
 8019ca0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8019ca8:	bf00      	nop
 8019caa:	3754      	adds	r7, #84	@ 0x54
 8019cac:	46bd      	mov	sp, r7
 8019cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cb2:	4770      	bx	lr
 8019cb4:	effffffe 	.word	0xeffffffe

08019cb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b084      	sub	sp, #16
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019cc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	2200      	movs	r2, #0
 8019cca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019cce:	68f8      	ldr	r0, [r7, #12]
 8019cd0:	f7fe fe2e 	bl	8018930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019cd4:	bf00      	nop
 8019cd6:	3710      	adds	r7, #16
 8019cd8:	46bd      	mov	sp, r7
 8019cda:	bd80      	pop	{r7, pc}

08019cdc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019cdc:	b480      	push	{r7}
 8019cde:	b08f      	sub	sp, #60	@ 0x3c
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019cea:	2b21      	cmp	r3, #33	@ 0x21
 8019cec:	d14c      	bne.n	8019d88 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019cf4:	b29b      	uxth	r3, r3
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d132      	bne.n	8019d60 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d00:	6a3b      	ldr	r3, [r7, #32]
 8019d02:	e853 3f00 	ldrex	r3, [r3]
 8019d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8019d08:	69fb      	ldr	r3, [r7, #28]
 8019d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	461a      	mov	r2, r3
 8019d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d1a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d20:	e841 2300 	strex	r3, r2, [r1]
 8019d24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d1e6      	bne.n	8019cfa <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	e853 3f00 	ldrex	r3, [r3]
 8019d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d3a:	68bb      	ldr	r3, [r7, #8]
 8019d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	461a      	mov	r2, r3
 8019d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d4a:	61bb      	str	r3, [r7, #24]
 8019d4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d4e:	6979      	ldr	r1, [r7, #20]
 8019d50:	69ba      	ldr	r2, [r7, #24]
 8019d52:	e841 2300 	strex	r3, r2, [r1]
 8019d56:	613b      	str	r3, [r7, #16]
   return(result);
 8019d58:	693b      	ldr	r3, [r7, #16]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d1e6      	bne.n	8019d2c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8019d5e:	e013      	b.n	8019d88 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019d64:	781a      	ldrb	r2, [r3, #0]
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019d70:	1c5a      	adds	r2, r3, #1
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	3b01      	subs	r3, #1
 8019d80:	b29a      	uxth	r2, r3
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019d88:	bf00      	nop
 8019d8a:	373c      	adds	r7, #60	@ 0x3c
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d92:	4770      	bx	lr

08019d94 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019d94:	b480      	push	{r7}
 8019d96:	b091      	sub	sp, #68	@ 0x44
 8019d98:	af00      	add	r7, sp, #0
 8019d9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019da2:	2b21      	cmp	r3, #33	@ 0x21
 8019da4:	d151      	bne.n	8019e4a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019dac:	b29b      	uxth	r3, r3
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d132      	bne.n	8019e18 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dba:	e853 3f00 	ldrex	r3, [r3]
 8019dbe:	623b      	str	r3, [r7, #32]
   return(result);
 8019dc0:	6a3b      	ldr	r3, [r7, #32]
 8019dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	461a      	mov	r2, r3
 8019dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8019dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019dd8:	e841 2300 	strex	r3, r2, [r1]
 8019ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d1e6      	bne.n	8019db2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019dea:	693b      	ldr	r3, [r7, #16]
 8019dec:	e853 3f00 	ldrex	r3, [r3]
 8019df0:	60fb      	str	r3, [r7, #12]
   return(result);
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	461a      	mov	r2, r3
 8019e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e02:	61fb      	str	r3, [r7, #28]
 8019e04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e06:	69b9      	ldr	r1, [r7, #24]
 8019e08:	69fa      	ldr	r2, [r7, #28]
 8019e0a:	e841 2300 	strex	r3, r2, [r1]
 8019e0e:	617b      	str	r3, [r7, #20]
   return(result);
 8019e10:	697b      	ldr	r3, [r7, #20]
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d1e6      	bne.n	8019de4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8019e16:	e018      	b.n	8019e4a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019e20:	881b      	ldrh	r3, [r3, #0]
 8019e22:	461a      	mov	r2, r3
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019e2c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019e32:	1c9a      	adds	r2, r3, #2
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e3e:	b29b      	uxth	r3, r3
 8019e40:	3b01      	subs	r3, #1
 8019e42:	b29a      	uxth	r2, r3
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8019e4a:	bf00      	nop
 8019e4c:	3744      	adds	r7, #68	@ 0x44
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e54:	4770      	bx	lr

08019e56 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019e56:	b480      	push	{r7}
 8019e58:	b091      	sub	sp, #68	@ 0x44
 8019e5a:	af00      	add	r7, sp, #0
 8019e5c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019e64:	2b21      	cmp	r3, #33	@ 0x21
 8019e66:	d160      	bne.n	8019f2a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019e6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019e70:	e057      	b.n	8019f22 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019e78:	b29b      	uxth	r3, r3
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d133      	bne.n	8019ee6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	3308      	adds	r3, #8
 8019e84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e88:	e853 3f00 	ldrex	r3, [r3]
 8019e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8019e8e:	6a3b      	ldr	r3, [r7, #32]
 8019e90:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019e94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	3308      	adds	r3, #8
 8019e9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019e9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8019ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ea6:	e841 2300 	strex	r3, r2, [r1]
 8019eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d1e5      	bne.n	8019e7e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019eb8:	693b      	ldr	r3, [r7, #16]
 8019eba:	e853 3f00 	ldrex	r3, [r3]
 8019ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	461a      	mov	r2, r3
 8019ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ed0:	61fb      	str	r3, [r7, #28]
 8019ed2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ed4:	69b9      	ldr	r1, [r7, #24]
 8019ed6:	69fa      	ldr	r2, [r7, #28]
 8019ed8:	e841 2300 	strex	r3, r2, [r1]
 8019edc:	617b      	str	r3, [r7, #20]
   return(result);
 8019ede:	697b      	ldr	r3, [r7, #20]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d1e6      	bne.n	8019eb2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019ee4:	e021      	b.n	8019f2a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	69db      	ldr	r3, [r3, #28]
 8019eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d013      	beq.n	8019f1c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019ef8:	781a      	ldrb	r2, [r3, #0]
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f04:	1c5a      	adds	r2, r3, #1
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	3b01      	subs	r3, #1
 8019f14:	b29a      	uxth	r2, r3
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019f1c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019f1e:	3b01      	subs	r3, #1
 8019f20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019f22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d1a4      	bne.n	8019e72 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019f28:	e7ff      	b.n	8019f2a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019f2a:	bf00      	nop
 8019f2c:	3744      	adds	r7, #68	@ 0x44
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f34:	4770      	bx	lr

08019f36 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019f36:	b480      	push	{r7}
 8019f38:	b091      	sub	sp, #68	@ 0x44
 8019f3a:	af00      	add	r7, sp, #0
 8019f3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019f44:	2b21      	cmp	r3, #33	@ 0x21
 8019f46:	d165      	bne.n	801a014 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019f4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019f50:	e05c      	b.n	801a00c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019f58:	b29b      	uxth	r3, r3
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d133      	bne.n	8019fc6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	3308      	adds	r3, #8
 8019f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f66:	6a3b      	ldr	r3, [r7, #32]
 8019f68:	e853 3f00 	ldrex	r3, [r3]
 8019f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8019f6e:	69fb      	ldr	r3, [r7, #28]
 8019f70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8019f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	3308      	adds	r3, #8
 8019f7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019f86:	e841 2300 	strex	r3, r2, [r1]
 8019f8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d1e5      	bne.n	8019f5e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	e853 3f00 	ldrex	r3, [r3]
 8019f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019fa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	461a      	mov	r2, r3
 8019fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fb0:	61bb      	str	r3, [r7, #24]
 8019fb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fb4:	6979      	ldr	r1, [r7, #20]
 8019fb6:	69ba      	ldr	r2, [r7, #24]
 8019fb8:	e841 2300 	strex	r3, r2, [r1]
 8019fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8019fbe:	693b      	ldr	r3, [r7, #16]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d1e6      	bne.n	8019f92 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8019fc4:	e026      	b.n	801a014 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	69db      	ldr	r3, [r3, #28]
 8019fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d018      	beq.n	801a006 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019fdc:	881b      	ldrh	r3, [r3, #0]
 8019fde:	461a      	mov	r2, r3
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019fe8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019fee:	1c9a      	adds	r2, r3, #2
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019ffa:	b29b      	uxth	r3, r3
 8019ffc:	3b01      	subs	r3, #1
 8019ffe:	b29a      	uxth	r2, r3
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801a006:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a008:	3b01      	subs	r3, #1
 801a00a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801a00c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d19f      	bne.n	8019f52 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801a012:	e7ff      	b.n	801a014 <UART_TxISR_16BIT_FIFOEN+0xde>
 801a014:	bf00      	nop
 801a016:	3744      	adds	r7, #68	@ 0x44
 801a018:	46bd      	mov	sp, r7
 801a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a01e:	4770      	bx	lr

0801a020 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b088      	sub	sp, #32
 801a024:	af00      	add	r7, sp, #0
 801a026:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	e853 3f00 	ldrex	r3, [r3]
 801a034:	60bb      	str	r3, [r7, #8]
   return(result);
 801a036:	68bb      	ldr	r3, [r7, #8]
 801a038:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a03c:	61fb      	str	r3, [r7, #28]
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	461a      	mov	r2, r3
 801a044:	69fb      	ldr	r3, [r7, #28]
 801a046:	61bb      	str	r3, [r7, #24]
 801a048:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a04a:	6979      	ldr	r1, [r7, #20]
 801a04c:	69ba      	ldr	r2, [r7, #24]
 801a04e:	e841 2300 	strex	r3, r2, [r1]
 801a052:	613b      	str	r3, [r7, #16]
   return(result);
 801a054:	693b      	ldr	r3, [r7, #16]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d1e6      	bne.n	801a028 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	2220      	movs	r2, #32
 801a05e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	2200      	movs	r2, #0
 801a066:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a068:	6878      	ldr	r0, [r7, #4]
 801a06a:	f7fe fc57 	bl	801891c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a06e:	bf00      	nop
 801a070:	3720      	adds	r7, #32
 801a072:	46bd      	mov	sp, r7
 801a074:	bd80      	pop	{r7, pc}
	...

0801a078 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a078:	b580      	push	{r7, lr}
 801a07a:	b09c      	sub	sp, #112	@ 0x70
 801a07c:	af00      	add	r7, sp, #0
 801a07e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a086:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a090:	2b22      	cmp	r3, #34	@ 0x22
 801a092:	f040 80be 	bne.w	801a212 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a09c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a0a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801a0a4:	b2d9      	uxtb	r1, r3
 801a0a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a0aa:	b2da      	uxtb	r2, r3
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0b0:	400a      	ands	r2, r1
 801a0b2:	b2d2      	uxtb	r2, r2
 801a0b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a0ba:	1c5a      	adds	r2, r3, #1
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a0c6:	b29b      	uxth	r3, r3
 801a0c8:	3b01      	subs	r3, #1
 801a0ca:	b29a      	uxth	r2, r3
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a0d8:	b29b      	uxth	r3, r3
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	f040 80a1 	bne.w	801a222 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a0e8:	e853 3f00 	ldrex	r3, [r3]
 801a0ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a0ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a0f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a0f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	461a      	mov	r2, r3
 801a0fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a0fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a100:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a102:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a104:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a106:	e841 2300 	strex	r3, r2, [r1]
 801a10a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a10c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d1e6      	bne.n	801a0e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	3308      	adds	r3, #8
 801a118:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a11c:	e853 3f00 	ldrex	r3, [r3]
 801a120:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a124:	f023 0301 	bic.w	r3, r3, #1
 801a128:	667b      	str	r3, [r7, #100]	@ 0x64
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	3308      	adds	r3, #8
 801a130:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a132:	647a      	str	r2, [r7, #68]	@ 0x44
 801a134:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a136:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a13a:	e841 2300 	strex	r3, r2, [r1]
 801a13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a142:	2b00      	cmp	r3, #0
 801a144:	d1e5      	bne.n	801a112 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	2220      	movs	r2, #32
 801a14a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	2200      	movs	r2, #0
 801a152:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	2200      	movs	r2, #0
 801a158:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	4a33      	ldr	r2, [pc, #204]	@ (801a22c <UART_RxISR_8BIT+0x1b4>)
 801a160:	4293      	cmp	r3, r2
 801a162:	d01f      	beq.n	801a1a4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	685b      	ldr	r3, [r3, #4]
 801a16a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d018      	beq.n	801a1a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a17a:	e853 3f00 	ldrex	r3, [r3]
 801a17e:	623b      	str	r3, [r7, #32]
   return(result);
 801a180:	6a3b      	ldr	r3, [r7, #32]
 801a182:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a186:	663b      	str	r3, [r7, #96]	@ 0x60
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	461a      	mov	r2, r3
 801a18e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a190:	633b      	str	r3, [r7, #48]	@ 0x30
 801a192:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a194:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a198:	e841 2300 	strex	r3, r2, [r1]
 801a19c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d1e6      	bne.n	801a172 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a1a8:	2b01      	cmp	r3, #1
 801a1aa:	d12e      	bne.n	801a20a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1b8:	693b      	ldr	r3, [r7, #16]
 801a1ba:	e853 3f00 	ldrex	r3, [r3]
 801a1be:	60fb      	str	r3, [r7, #12]
   return(result);
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	f023 0310 	bic.w	r3, r3, #16
 801a1c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	461a      	mov	r2, r3
 801a1ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a1d0:	61fb      	str	r3, [r7, #28]
 801a1d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1d4:	69b9      	ldr	r1, [r7, #24]
 801a1d6:	69fa      	ldr	r2, [r7, #28]
 801a1d8:	e841 2300 	strex	r3, r2, [r1]
 801a1dc:	617b      	str	r3, [r7, #20]
   return(result);
 801a1de:	697b      	ldr	r3, [r7, #20]
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d1e6      	bne.n	801a1b2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	69db      	ldr	r3, [r3, #28]
 801a1ea:	f003 0310 	and.w	r3, r3, #16
 801a1ee:	2b10      	cmp	r3, #16
 801a1f0:	d103      	bne.n	801a1fa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	2210      	movs	r2, #16
 801a1f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a200:	4619      	mov	r1, r3
 801a202:	6878      	ldr	r0, [r7, #4]
 801a204:	f7fe fb9e 	bl	8018944 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a208:	e00b      	b.n	801a222 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a20a:	6878      	ldr	r0, [r7, #4]
 801a20c:	f7ec f996 	bl	800653c <HAL_UART_RxCpltCallback>
}
 801a210:	e007      	b.n	801a222 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	699a      	ldr	r2, [r3, #24]
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	f042 0208 	orr.w	r2, r2, #8
 801a220:	619a      	str	r2, [r3, #24]
}
 801a222:	bf00      	nop
 801a224:	3770      	adds	r7, #112	@ 0x70
 801a226:	46bd      	mov	sp, r7
 801a228:	bd80      	pop	{r7, pc}
 801a22a:	bf00      	nop
 801a22c:	58000c00 	.word	0x58000c00

0801a230 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a230:	b580      	push	{r7, lr}
 801a232:	b09c      	sub	sp, #112	@ 0x70
 801a234:	af00      	add	r7, sp, #0
 801a236:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a23e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a248:	2b22      	cmp	r3, #34	@ 0x22
 801a24a:	f040 80be 	bne.w	801a3ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a254:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a25c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801a25e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a262:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a266:	4013      	ands	r3, r2
 801a268:	b29a      	uxth	r2, r3
 801a26a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a26c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a272:	1c9a      	adds	r2, r3, #2
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a27e:	b29b      	uxth	r3, r3
 801a280:	3b01      	subs	r3, #1
 801a282:	b29a      	uxth	r2, r3
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a290:	b29b      	uxth	r3, r3
 801a292:	2b00      	cmp	r3, #0
 801a294:	f040 80a1 	bne.w	801a3da <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a29e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a2a0:	e853 3f00 	ldrex	r3, [r3]
 801a2a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a2a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a2a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a2ac:	667b      	str	r3, [r7, #100]	@ 0x64
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	461a      	mov	r2, r3
 801a2b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2b6:	657b      	str	r3, [r7, #84]	@ 0x54
 801a2b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a2bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a2be:	e841 2300 	strex	r3, r2, [r1]
 801a2c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a2c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d1e6      	bne.n	801a298 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	3308      	adds	r3, #8
 801a2d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2d4:	e853 3f00 	ldrex	r3, [r3]
 801a2d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2dc:	f023 0301 	bic.w	r3, r3, #1
 801a2e0:	663b      	str	r3, [r7, #96]	@ 0x60
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	681b      	ldr	r3, [r3, #0]
 801a2e6:	3308      	adds	r3, #8
 801a2e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a2ea:	643a      	str	r2, [r7, #64]	@ 0x40
 801a2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a2f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a2f2:	e841 2300 	strex	r3, r2, [r1]
 801a2f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d1e5      	bne.n	801a2ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	2220      	movs	r2, #32
 801a302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	2200      	movs	r2, #0
 801a30a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	2200      	movs	r2, #0
 801a310:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	4a33      	ldr	r2, [pc, #204]	@ (801a3e4 <UART_RxISR_16BIT+0x1b4>)
 801a318:	4293      	cmp	r3, r2
 801a31a:	d01f      	beq.n	801a35c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	685b      	ldr	r3, [r3, #4]
 801a322:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a326:	2b00      	cmp	r3, #0
 801a328:	d018      	beq.n	801a35c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a330:	6a3b      	ldr	r3, [r7, #32]
 801a332:	e853 3f00 	ldrex	r3, [r3]
 801a336:	61fb      	str	r3, [r7, #28]
   return(result);
 801a338:	69fb      	ldr	r3, [r7, #28]
 801a33a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a33e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	461a      	mov	r2, r3
 801a346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a34a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a34c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a34e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a350:	e841 2300 	strex	r3, r2, [r1]
 801a354:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a358:	2b00      	cmp	r3, #0
 801a35a:	d1e6      	bne.n	801a32a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a360:	2b01      	cmp	r3, #1
 801a362:	d12e      	bne.n	801a3c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	2200      	movs	r2, #0
 801a368:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	e853 3f00 	ldrex	r3, [r3]
 801a376:	60bb      	str	r3, [r7, #8]
   return(result);
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	f023 0310 	bic.w	r3, r3, #16
 801a37e:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	461a      	mov	r2, r3
 801a386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a388:	61bb      	str	r3, [r7, #24]
 801a38a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a38c:	6979      	ldr	r1, [r7, #20]
 801a38e:	69ba      	ldr	r2, [r7, #24]
 801a390:	e841 2300 	strex	r3, r2, [r1]
 801a394:	613b      	str	r3, [r7, #16]
   return(result);
 801a396:	693b      	ldr	r3, [r7, #16]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d1e6      	bne.n	801a36a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	69db      	ldr	r3, [r3, #28]
 801a3a2:	f003 0310 	and.w	r3, r3, #16
 801a3a6:	2b10      	cmp	r3, #16
 801a3a8:	d103      	bne.n	801a3b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	2210      	movs	r2, #16
 801a3b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a3b8:	4619      	mov	r1, r3
 801a3ba:	6878      	ldr	r0, [r7, #4]
 801a3bc:	f7fe fac2 	bl	8018944 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a3c0:	e00b      	b.n	801a3da <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a3c2:	6878      	ldr	r0, [r7, #4]
 801a3c4:	f7ec f8ba 	bl	800653c <HAL_UART_RxCpltCallback>
}
 801a3c8:	e007      	b.n	801a3da <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	699a      	ldr	r2, [r3, #24]
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	f042 0208 	orr.w	r2, r2, #8
 801a3d8:	619a      	str	r2, [r3, #24]
}
 801a3da:	bf00      	nop
 801a3dc:	3770      	adds	r7, #112	@ 0x70
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	bd80      	pop	{r7, pc}
 801a3e2:	bf00      	nop
 801a3e4:	58000c00 	.word	0x58000c00

0801a3e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	b0ac      	sub	sp, #176	@ 0xb0
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a3f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	69db      	ldr	r3, [r3, #28]
 801a400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	689b      	ldr	r3, [r3, #8]
 801a414:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a41e:	2b22      	cmp	r3, #34	@ 0x22
 801a420:	f040 8181 	bne.w	801a726 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a42a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a42e:	e124      	b.n	801a67a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a436:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a43a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a43e:	b2d9      	uxtb	r1, r3
 801a440:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a444:	b2da      	uxtb	r2, r3
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a44a:	400a      	ands	r2, r1
 801a44c:	b2d2      	uxtb	r2, r2
 801a44e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a454:	1c5a      	adds	r2, r3, #1
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a460:	b29b      	uxth	r3, r3
 801a462:	3b01      	subs	r3, #1
 801a464:	b29a      	uxth	r2, r3
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	69db      	ldr	r3, [r3, #28]
 801a472:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a47a:	f003 0307 	and.w	r3, r3, #7
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d053      	beq.n	801a52a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a486:	f003 0301 	and.w	r3, r3, #1
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d011      	beq.n	801a4b2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801a48e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a496:	2b00      	cmp	r3, #0
 801a498:	d00b      	beq.n	801a4b2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	2201      	movs	r2, #1
 801a4a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a4a8:	f043 0201 	orr.w	r2, r3, #1
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a4b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a4b6:	f003 0302 	and.w	r3, r3, #2
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d011      	beq.n	801a4e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a4be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a4c2:	f003 0301 	and.w	r3, r3, #1
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d00b      	beq.n	801a4e2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	2202      	movs	r2, #2
 801a4d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a4d8:	f043 0204 	orr.w	r2, r3, #4
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a4e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a4e6:	f003 0304 	and.w	r3, r3, #4
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d011      	beq.n	801a512 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a4ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a4f2:	f003 0301 	and.w	r3, r3, #1
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d00b      	beq.n	801a512 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	2204      	movs	r2, #4
 801a500:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a508:	f043 0202 	orr.w	r2, r3, #2
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d006      	beq.n	801a52a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a51c:	6878      	ldr	r0, [r7, #4]
 801a51e:	f7fe fa07 	bl	8018930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	2200      	movs	r2, #0
 801a526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a530:	b29b      	uxth	r3, r3
 801a532:	2b00      	cmp	r3, #0
 801a534:	f040 80a1 	bne.w	801a67a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a53e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a540:	e853 3f00 	ldrex	r3, [r3]
 801a544:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a54c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	461a      	mov	r2, r3
 801a556:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a55a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a55c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a55e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a560:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a562:	e841 2300 	strex	r3, r2, [r1]
 801a566:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a568:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d1e4      	bne.n	801a538 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	3308      	adds	r3, #8
 801a574:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a578:	e853 3f00 	ldrex	r3, [r3]
 801a57c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a57e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a580:	4b6f      	ldr	r3, [pc, #444]	@ (801a740 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801a582:	4013      	ands	r3, r2
 801a584:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	3308      	adds	r3, #8
 801a58e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a592:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a594:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a596:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801a598:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a59a:	e841 2300 	strex	r3, r2, [r1]
 801a59e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a5a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d1e3      	bne.n	801a56e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	2220      	movs	r2, #32
 801a5aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	2200      	movs	r2, #0
 801a5b2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	2200      	movs	r2, #0
 801a5b8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	4a61      	ldr	r2, [pc, #388]	@ (801a744 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801a5c0:	4293      	cmp	r3, r2
 801a5c2:	d021      	beq.n	801a608 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	685b      	ldr	r3, [r3, #4]
 801a5ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d01a      	beq.n	801a608 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	681b      	ldr	r3, [r3, #0]
 801a5d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a5da:	e853 3f00 	ldrex	r3, [r3]
 801a5de:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a5e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a5e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a5e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	461a      	mov	r2, r3
 801a5f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a5f4:	657b      	str	r3, [r7, #84]	@ 0x54
 801a5f6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a5f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a5fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a5fc:	e841 2300 	strex	r3, r2, [r1]
 801a600:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a604:	2b00      	cmp	r3, #0
 801a606:	d1e4      	bne.n	801a5d2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a60c:	2b01      	cmp	r3, #1
 801a60e:	d130      	bne.n	801a672 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	2200      	movs	r2, #0
 801a614:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a61e:	e853 3f00 	ldrex	r3, [r3]
 801a622:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a626:	f023 0310 	bic.w	r3, r3, #16
 801a62a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	461a      	mov	r2, r3
 801a634:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a638:	643b      	str	r3, [r7, #64]	@ 0x40
 801a63a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a63c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a63e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a640:	e841 2300 	strex	r3, r2, [r1]
 801a644:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d1e4      	bne.n	801a616 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	69db      	ldr	r3, [r3, #28]
 801a652:	f003 0310 	and.w	r3, r3, #16
 801a656:	2b10      	cmp	r3, #16
 801a658:	d103      	bne.n	801a662 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	2210      	movs	r2, #16
 801a660:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a668:	4619      	mov	r1, r3
 801a66a:	6878      	ldr	r0, [r7, #4]
 801a66c:	f7fe f96a 	bl	8018944 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a670:	e00e      	b.n	801a690 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 801a672:	6878      	ldr	r0, [r7, #4]
 801a674:	f7eb ff62 	bl	800653c <HAL_UART_RxCpltCallback>
        break;
 801a678:	e00a      	b.n	801a690 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a67a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d006      	beq.n	801a690 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 801a682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a686:	f003 0320 	and.w	r3, r3, #32
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	f47f aed0 	bne.w	801a430 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a696:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a69a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d049      	beq.n	801a736 <UART_RxISR_8BIT_FIFOEN+0x34e>
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a6a8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801a6ac:	429a      	cmp	r2, r3
 801a6ae:	d242      	bcs.n	801a736 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	3308      	adds	r3, #8
 801a6b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6b8:	6a3b      	ldr	r3, [r7, #32]
 801a6ba:	e853 3f00 	ldrex	r3, [r3]
 801a6be:	61fb      	str	r3, [r7, #28]
   return(result);
 801a6c0:	69fb      	ldr	r3, [r7, #28]
 801a6c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a6c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	3308      	adds	r3, #8
 801a6d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a6d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a6d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a6d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a6da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a6dc:	e841 2300 	strex	r3, r2, [r1]
 801a6e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d1e3      	bne.n	801a6b0 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	4a17      	ldr	r2, [pc, #92]	@ (801a748 <UART_RxISR_8BIT_FIFOEN+0x360>)
 801a6ec:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a6f4:	68fb      	ldr	r3, [r7, #12]
 801a6f6:	e853 3f00 	ldrex	r3, [r3]
 801a6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 801a6fc:	68bb      	ldr	r3, [r7, #8]
 801a6fe:	f043 0320 	orr.w	r3, r3, #32
 801a702:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	461a      	mov	r2, r3
 801a70c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a710:	61bb      	str	r3, [r7, #24]
 801a712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a714:	6979      	ldr	r1, [r7, #20]
 801a716:	69ba      	ldr	r2, [r7, #24]
 801a718:	e841 2300 	strex	r3, r2, [r1]
 801a71c:	613b      	str	r3, [r7, #16]
   return(result);
 801a71e:	693b      	ldr	r3, [r7, #16]
 801a720:	2b00      	cmp	r3, #0
 801a722:	d1e4      	bne.n	801a6ee <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a724:	e007      	b.n	801a736 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	699a      	ldr	r2, [r3, #24]
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	f042 0208 	orr.w	r2, r2, #8
 801a734:	619a      	str	r2, [r3, #24]
}
 801a736:	bf00      	nop
 801a738:	37b0      	adds	r7, #176	@ 0xb0
 801a73a:	46bd      	mov	sp, r7
 801a73c:	bd80      	pop	{r7, pc}
 801a73e:	bf00      	nop
 801a740:	effffffe 	.word	0xeffffffe
 801a744:	58000c00 	.word	0x58000c00
 801a748:	0801a079 	.word	0x0801a079

0801a74c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b0ae      	sub	sp, #184	@ 0xb8
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a75a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	69db      	ldr	r3, [r3, #28]
 801a764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	689b      	ldr	r3, [r3, #8]
 801a778:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a782:	2b22      	cmp	r3, #34	@ 0x22
 801a784:	f040 8185 	bne.w	801aa92 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a78e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a792:	e128      	b.n	801a9e6 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a79a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a7a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801a7a6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801a7aa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a7ae:	4013      	ands	r3, r2
 801a7b0:	b29a      	uxth	r2, r3
 801a7b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a7b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a7bc:	1c9a      	adds	r2, r3, #2
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a7c8:	b29b      	uxth	r3, r3
 801a7ca:	3b01      	subs	r3, #1
 801a7cc:	b29a      	uxth	r2, r3
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	69db      	ldr	r3, [r3, #28]
 801a7da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a7de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a7e2:	f003 0307 	and.w	r3, r3, #7
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d053      	beq.n	801a892 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a7ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a7ee:	f003 0301 	and.w	r3, r3, #1
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d011      	beq.n	801a81a <UART_RxISR_16BIT_FIFOEN+0xce>
 801a7f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a7fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d00b      	beq.n	801a81a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	2201      	movs	r2, #1
 801a808:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a810:	f043 0201 	orr.w	r2, r3, #1
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a81a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a81e:	f003 0302 	and.w	r3, r3, #2
 801a822:	2b00      	cmp	r3, #0
 801a824:	d011      	beq.n	801a84a <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a82a:	f003 0301 	and.w	r3, r3, #1
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d00b      	beq.n	801a84a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	2202      	movs	r2, #2
 801a838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a840:	f043 0204 	orr.w	r2, r3, #4
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a84a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a84e:	f003 0304 	and.w	r3, r3, #4
 801a852:	2b00      	cmp	r3, #0
 801a854:	d011      	beq.n	801a87a <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a85a:	f003 0301 	and.w	r3, r3, #1
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d00b      	beq.n	801a87a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	2204      	movs	r2, #4
 801a868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a870:	f043 0202 	orr.w	r2, r3, #2
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a880:	2b00      	cmp	r3, #0
 801a882:	d006      	beq.n	801a892 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a884:	6878      	ldr	r0, [r7, #4]
 801a886:	f7fe f853 	bl	8018930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	2200      	movs	r2, #0
 801a88e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a898:	b29b      	uxth	r3, r3
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	f040 80a3 	bne.w	801a9e6 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a8a8:	e853 3f00 	ldrex	r3, [r3]
 801a8ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a8ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a8b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a8b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	461a      	mov	r2, r3
 801a8be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a8c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a8c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a8c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a8ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a8ce:	e841 2300 	strex	r3, r2, [r1]
 801a8d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a8d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d1e2      	bne.n	801a8a0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	3308      	adds	r3, #8
 801a8e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a8e4:	e853 3f00 	ldrex	r3, [r3]
 801a8e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a8ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a8ec:	4b6f      	ldr	r3, [pc, #444]	@ (801aaac <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a8ee:	4013      	ands	r3, r2
 801a8f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	3308      	adds	r3, #8
 801a8fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a8fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a900:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a902:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a904:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a906:	e841 2300 	strex	r3, r2, [r1]
 801a90a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a90c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d1e3      	bne.n	801a8da <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	2220      	movs	r2, #32
 801a916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	2200      	movs	r2, #0
 801a91e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	2200      	movs	r2, #0
 801a924:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	4a61      	ldr	r2, [pc, #388]	@ (801aab0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a92c:	4293      	cmp	r3, r2
 801a92e:	d021      	beq.n	801a974 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	685b      	ldr	r3, [r3, #4]
 801a936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d01a      	beq.n	801a974 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a946:	e853 3f00 	ldrex	r3, [r3]
 801a94a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a94c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a94e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	461a      	mov	r2, r3
 801a95c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a960:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a962:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a964:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a966:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a968:	e841 2300 	strex	r3, r2, [r1]
 801a96c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a96e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a970:	2b00      	cmp	r3, #0
 801a972:	d1e4      	bne.n	801a93e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a978:	2b01      	cmp	r3, #1
 801a97a:	d130      	bne.n	801a9de <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	2200      	movs	r2, #0
 801a980:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a98a:	e853 3f00 	ldrex	r3, [r3]
 801a98e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a992:	f023 0310 	bic.w	r3, r3, #16
 801a996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	461a      	mov	r2, r3
 801a9a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a9a4:	647b      	str	r3, [r7, #68]	@ 0x44
 801a9a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a9aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a9ac:	e841 2300 	strex	r3, r2, [r1]
 801a9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a9b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d1e4      	bne.n	801a982 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	69db      	ldr	r3, [r3, #28]
 801a9be:	f003 0310 	and.w	r3, r3, #16
 801a9c2:	2b10      	cmp	r3, #16
 801a9c4:	d103      	bne.n	801a9ce <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	2210      	movs	r2, #16
 801a9cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a9d4:	4619      	mov	r1, r3
 801a9d6:	6878      	ldr	r0, [r7, #4]
 801a9d8:	f7fd ffb4 	bl	8018944 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 801a9dc:	e00e      	b.n	801a9fc <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 801a9de:	6878      	ldr	r0, [r7, #4]
 801a9e0:	f7eb fdac 	bl	800653c <HAL_UART_RxCpltCallback>
        break;
 801a9e4:	e00a      	b.n	801a9fc <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a9e6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d006      	beq.n	801a9fc <UART_RxISR_16BIT_FIFOEN+0x2b0>
 801a9ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a9f2:	f003 0320 	and.w	r3, r3, #32
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	f47f aecc 	bne.w	801a794 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801aa02:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801aa06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d049      	beq.n	801aaa2 <UART_RxISR_16BIT_FIFOEN+0x356>
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801aa14:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801aa18:	429a      	cmp	r2, r3
 801aa1a:	d242      	bcs.n	801aaa2 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	3308      	adds	r3, #8
 801aa22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa26:	e853 3f00 	ldrex	r3, [r3]
 801aa2a:	623b      	str	r3, [r7, #32]
   return(result);
 801aa2c:	6a3b      	ldr	r3, [r7, #32]
 801aa2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801aa32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	3308      	adds	r3, #8
 801aa3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801aa40:	633a      	str	r2, [r7, #48]	@ 0x30
 801aa42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aa46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aa48:	e841 2300 	strex	r3, r2, [r1]
 801aa4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801aa4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d1e3      	bne.n	801aa1c <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	4a17      	ldr	r2, [pc, #92]	@ (801aab4 <UART_RxISR_16BIT_FIFOEN+0x368>)
 801aa58:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa60:	693b      	ldr	r3, [r7, #16]
 801aa62:	e853 3f00 	ldrex	r3, [r3]
 801aa66:	60fb      	str	r3, [r7, #12]
   return(result);
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	f043 0320 	orr.w	r3, r3, #32
 801aa6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	461a      	mov	r2, r3
 801aa78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801aa7c:	61fb      	str	r3, [r7, #28]
 801aa7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa80:	69b9      	ldr	r1, [r7, #24]
 801aa82:	69fa      	ldr	r2, [r7, #28]
 801aa84:	e841 2300 	strex	r3, r2, [r1]
 801aa88:	617b      	str	r3, [r7, #20]
   return(result);
 801aa8a:	697b      	ldr	r3, [r7, #20]
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d1e4      	bne.n	801aa5a <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801aa90:	e007      	b.n	801aaa2 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	699a      	ldr	r2, [r3, #24]
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	f042 0208 	orr.w	r2, r2, #8
 801aaa0:	619a      	str	r2, [r3, #24]
}
 801aaa2:	bf00      	nop
 801aaa4:	37b8      	adds	r7, #184	@ 0xb8
 801aaa6:	46bd      	mov	sp, r7
 801aaa8:	bd80      	pop	{r7, pc}
 801aaaa:	bf00      	nop
 801aaac:	effffffe 	.word	0xeffffffe
 801aab0:	58000c00 	.word	0x58000c00
 801aab4:	0801a231 	.word	0x0801a231

0801aab8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801aab8:	b480      	push	{r7}
 801aaba:	b083      	sub	sp, #12
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801aac0:	bf00      	nop
 801aac2:	370c      	adds	r7, #12
 801aac4:	46bd      	mov	sp, r7
 801aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaca:	4770      	bx	lr

0801aacc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801aacc:	b480      	push	{r7}
 801aace:	b083      	sub	sp, #12
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801aad4:	bf00      	nop
 801aad6:	370c      	adds	r7, #12
 801aad8:	46bd      	mov	sp, r7
 801aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aade:	4770      	bx	lr

0801aae0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801aae0:	b480      	push	{r7}
 801aae2:	b083      	sub	sp, #12
 801aae4:	af00      	add	r7, sp, #0
 801aae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801aae8:	bf00      	nop
 801aaea:	370c      	adds	r7, #12
 801aaec:	46bd      	mov	sp, r7
 801aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf2:	4770      	bx	lr

0801aaf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801aaf4:	b480      	push	{r7}
 801aaf6:	b085      	sub	sp, #20
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ab02:	2b01      	cmp	r3, #1
 801ab04:	d101      	bne.n	801ab0a <HAL_UARTEx_DisableFifoMode+0x16>
 801ab06:	2302      	movs	r3, #2
 801ab08:	e027      	b.n	801ab5a <HAL_UARTEx_DisableFifoMode+0x66>
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	2201      	movs	r2, #1
 801ab0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	2224      	movs	r2, #36	@ 0x24
 801ab16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	681a      	ldr	r2, [r3, #0]
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	f022 0201 	bic.w	r2, r2, #1
 801ab30:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801ab38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	2200      	movs	r2, #0
 801ab3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	68fa      	ldr	r2, [r7, #12]
 801ab46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	2220      	movs	r2, #32
 801ab4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	2200      	movs	r2, #0
 801ab54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ab58:	2300      	movs	r3, #0
}
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	3714      	adds	r7, #20
 801ab5e:	46bd      	mov	sp, r7
 801ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab64:	4770      	bx	lr

0801ab66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ab66:	b580      	push	{r7, lr}
 801ab68:	b084      	sub	sp, #16
 801ab6a:	af00      	add	r7, sp, #0
 801ab6c:	6078      	str	r0, [r7, #4]
 801ab6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ab76:	2b01      	cmp	r3, #1
 801ab78:	d101      	bne.n	801ab7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ab7a:	2302      	movs	r3, #2
 801ab7c:	e02d      	b.n	801abda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	2201      	movs	r2, #1
 801ab82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	2224      	movs	r2, #36	@ 0x24
 801ab8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	681a      	ldr	r2, [r3, #0]
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	f022 0201 	bic.w	r2, r2, #1
 801aba4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	689b      	ldr	r3, [r3, #8]
 801abac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	683a      	ldr	r2, [r7, #0]
 801abb6:	430a      	orrs	r2, r1
 801abb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801abba:	6878      	ldr	r0, [r7, #4]
 801abbc:	f000 f850 	bl	801ac60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	68fa      	ldr	r2, [r7, #12]
 801abc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	2220      	movs	r2, #32
 801abcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	2200      	movs	r2, #0
 801abd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801abd8:	2300      	movs	r3, #0
}
 801abda:	4618      	mov	r0, r3
 801abdc:	3710      	adds	r7, #16
 801abde:	46bd      	mov	sp, r7
 801abe0:	bd80      	pop	{r7, pc}

0801abe2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801abe2:	b580      	push	{r7, lr}
 801abe4:	b084      	sub	sp, #16
 801abe6:	af00      	add	r7, sp, #0
 801abe8:	6078      	str	r0, [r7, #4]
 801abea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801abf2:	2b01      	cmp	r3, #1
 801abf4:	d101      	bne.n	801abfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801abf6:	2302      	movs	r3, #2
 801abf8:	e02d      	b.n	801ac56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	2201      	movs	r2, #1
 801abfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	2224      	movs	r2, #36	@ 0x24
 801ac06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	681a      	ldr	r2, [r3, #0]
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	f022 0201 	bic.w	r2, r2, #1
 801ac20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	689b      	ldr	r3, [r3, #8]
 801ac28:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	683a      	ldr	r2, [r7, #0]
 801ac32:	430a      	orrs	r2, r1
 801ac34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac36:	6878      	ldr	r0, [r7, #4]
 801ac38:	f000 f812 	bl	801ac60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	68fa      	ldr	r2, [r7, #12]
 801ac42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	2220      	movs	r2, #32
 801ac48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	2200      	movs	r2, #0
 801ac50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac54:	2300      	movs	r3, #0
}
 801ac56:	4618      	mov	r0, r3
 801ac58:	3710      	adds	r7, #16
 801ac5a:	46bd      	mov	sp, r7
 801ac5c:	bd80      	pop	{r7, pc}
	...

0801ac60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ac60:	b480      	push	{r7}
 801ac62:	b085      	sub	sp, #20
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d108      	bne.n	801ac82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	2201      	movs	r2, #1
 801ac74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	2201      	movs	r2, #1
 801ac7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ac80:	e031      	b.n	801ace6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ac82:	2310      	movs	r3, #16
 801ac84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ac86:	2310      	movs	r3, #16
 801ac88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	689b      	ldr	r3, [r3, #8]
 801ac90:	0e5b      	lsrs	r3, r3, #25
 801ac92:	b2db      	uxtb	r3, r3
 801ac94:	f003 0307 	and.w	r3, r3, #7
 801ac98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	689b      	ldr	r3, [r3, #8]
 801aca0:	0f5b      	lsrs	r3, r3, #29
 801aca2:	b2db      	uxtb	r3, r3
 801aca4:	f003 0307 	and.w	r3, r3, #7
 801aca8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801acaa:	7bbb      	ldrb	r3, [r7, #14]
 801acac:	7b3a      	ldrb	r2, [r7, #12]
 801acae:	4911      	ldr	r1, [pc, #68]	@ (801acf4 <UARTEx_SetNbDataToProcess+0x94>)
 801acb0:	5c8a      	ldrb	r2, [r1, r2]
 801acb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801acb6:	7b3a      	ldrb	r2, [r7, #12]
 801acb8:	490f      	ldr	r1, [pc, #60]	@ (801acf8 <UARTEx_SetNbDataToProcess+0x98>)
 801acba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801acbc:	fb93 f3f2 	sdiv	r3, r3, r2
 801acc0:	b29a      	uxth	r2, r3
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801acc8:	7bfb      	ldrb	r3, [r7, #15]
 801acca:	7b7a      	ldrb	r2, [r7, #13]
 801accc:	4909      	ldr	r1, [pc, #36]	@ (801acf4 <UARTEx_SetNbDataToProcess+0x94>)
 801acce:	5c8a      	ldrb	r2, [r1, r2]
 801acd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801acd4:	7b7a      	ldrb	r2, [r7, #13]
 801acd6:	4908      	ldr	r1, [pc, #32]	@ (801acf8 <UARTEx_SetNbDataToProcess+0x98>)
 801acd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801acda:	fb93 f3f2 	sdiv	r3, r3, r2
 801acde:	b29a      	uxth	r2, r3
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801ace6:	bf00      	nop
 801ace8:	3714      	adds	r7, #20
 801acea:	46bd      	mov	sp, r7
 801acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acf0:	4770      	bx	lr
 801acf2:	bf00      	nop
 801acf4:	0801eb5c 	.word	0x0801eb5c
 801acf8:	0801eb64 	.word	0x0801eb64

0801acfc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801acfc:	b580      	push	{r7, lr}
 801acfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801ad00:	4904      	ldr	r1, [pc, #16]	@ (801ad14 <MX_FATFS_Init+0x18>)
 801ad02:	4805      	ldr	r0, [pc, #20]	@ (801ad18 <MX_FATFS_Init+0x1c>)
 801ad04:	f003 f8d8 	bl	801deb8 <FATFS_LinkDriver>
 801ad08:	4603      	mov	r3, r0
 801ad0a:	461a      	mov	r2, r3
 801ad0c:	4b03      	ldr	r3, [pc, #12]	@ (801ad1c <MX_FATFS_Init+0x20>)
 801ad0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801ad10:	bf00      	nop
 801ad12:	bd80      	pop	{r7, pc}
 801ad14:	2400054c 	.word	0x2400054c
 801ad18:	24000014 	.word	0x24000014
 801ad1c:	24000548 	.word	0x24000548

0801ad20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801ad20:	b480      	push	{r7}
 801ad22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801ad24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801ad26:	4618      	mov	r0, r3
 801ad28:	46bd      	mov	sp, r7
 801ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad2e:	4770      	bx	lr

0801ad30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801ad30:	b580      	push	{r7, lr}
 801ad32:	b082      	sub	sp, #8
 801ad34:	af00      	add	r7, sp, #0
 801ad36:	4603      	mov	r3, r0
 801ad38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801ad3a:	79fb      	ldrb	r3, [r7, #7]
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	f7e9 fc11 	bl	8004564 <SD_disk_initialize>
 801ad42:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801ad44:	4618      	mov	r0, r3
 801ad46:	3708      	adds	r7, #8
 801ad48:	46bd      	mov	sp, r7
 801ad4a:	bd80      	pop	{r7, pc}

0801ad4c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801ad4c:	b580      	push	{r7, lr}
 801ad4e:	b082      	sub	sp, #8
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	4603      	mov	r3, r0
 801ad54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801ad56:	79fb      	ldrb	r3, [r7, #7]
 801ad58:	4618      	mov	r0, r3
 801ad5a:	f7e9 fcef 	bl	800473c <SD_disk_status>
 801ad5e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801ad60:	4618      	mov	r0, r3
 801ad62:	3708      	adds	r7, #8
 801ad64:	46bd      	mov	sp, r7
 801ad66:	bd80      	pop	{r7, pc}

0801ad68 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b084      	sub	sp, #16
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	60b9      	str	r1, [r7, #8]
 801ad70:	607a      	str	r2, [r7, #4]
 801ad72:	603b      	str	r3, [r7, #0]
 801ad74:	4603      	mov	r3, r0
 801ad76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801ad78:	7bf8      	ldrb	r0, [r7, #15]
 801ad7a:	683b      	ldr	r3, [r7, #0]
 801ad7c:	687a      	ldr	r2, [r7, #4]
 801ad7e:	68b9      	ldr	r1, [r7, #8]
 801ad80:	f7e9 fcf2 	bl	8004768 <SD_disk_read>
 801ad84:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801ad86:	4618      	mov	r0, r3
 801ad88:	3710      	adds	r7, #16
 801ad8a:	46bd      	mov	sp, r7
 801ad8c:	bd80      	pop	{r7, pc}

0801ad8e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801ad8e:	b580      	push	{r7, lr}
 801ad90:	b084      	sub	sp, #16
 801ad92:	af00      	add	r7, sp, #0
 801ad94:	60b9      	str	r1, [r7, #8]
 801ad96:	607a      	str	r2, [r7, #4]
 801ad98:	603b      	str	r3, [r7, #0]
 801ad9a:	4603      	mov	r3, r0
 801ad9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801ad9e:	7bf8      	ldrb	r0, [r7, #15]
 801ada0:	683b      	ldr	r3, [r7, #0]
 801ada2:	687a      	ldr	r2, [r7, #4]
 801ada4:	68b9      	ldr	r1, [r7, #8]
 801ada6:	f7e9 fd49 	bl	800483c <SD_disk_write>
 801adaa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801adac:	4618      	mov	r0, r3
 801adae:	3710      	adds	r7, #16
 801adb0:	46bd      	mov	sp, r7
 801adb2:	bd80      	pop	{r7, pc}

0801adb4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801adb4:	b580      	push	{r7, lr}
 801adb6:	b082      	sub	sp, #8
 801adb8:	af00      	add	r7, sp, #0
 801adba:	4603      	mov	r3, r0
 801adbc:	603a      	str	r2, [r7, #0]
 801adbe:	71fb      	strb	r3, [r7, #7]
 801adc0:	460b      	mov	r3, r1
 801adc2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801adc4:	79b9      	ldrb	r1, [r7, #6]
 801adc6:	79fb      	ldrb	r3, [r7, #7]
 801adc8:	683a      	ldr	r2, [r7, #0]
 801adca:	4618      	mov	r0, r3
 801adcc:	f7e9 fdba 	bl	8004944 <SD_disk_ioctl>
 801add0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801add2:	4618      	mov	r0, r3
 801add4:	3708      	adds	r7, #8
 801add6:	46bd      	mov	sp, r7
 801add8:	bd80      	pop	{r7, pc}
	...

0801addc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801addc:	b580      	push	{r7, lr}
 801adde:	b084      	sub	sp, #16
 801ade0:	af00      	add	r7, sp, #0
 801ade2:	4603      	mov	r3, r0
 801ade4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801ade6:	79fb      	ldrb	r3, [r7, #7]
 801ade8:	4a08      	ldr	r2, [pc, #32]	@ (801ae0c <disk_status+0x30>)
 801adea:	009b      	lsls	r3, r3, #2
 801adec:	4413      	add	r3, r2
 801adee:	685b      	ldr	r3, [r3, #4]
 801adf0:	685b      	ldr	r3, [r3, #4]
 801adf2:	79fa      	ldrb	r2, [r7, #7]
 801adf4:	4905      	ldr	r1, [pc, #20]	@ (801ae0c <disk_status+0x30>)
 801adf6:	440a      	add	r2, r1
 801adf8:	7a12      	ldrb	r2, [r2, #8]
 801adfa:	4610      	mov	r0, r2
 801adfc:	4798      	blx	r3
 801adfe:	4603      	mov	r3, r0
 801ae00:	73fb      	strb	r3, [r7, #15]
  return stat;
 801ae02:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae04:	4618      	mov	r0, r3
 801ae06:	3710      	adds	r7, #16
 801ae08:	46bd      	mov	sp, r7
 801ae0a:	bd80      	pop	{r7, pc}
 801ae0c:	24000768 	.word	0x24000768

0801ae10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b084      	sub	sp, #16
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	4603      	mov	r3, r0
 801ae18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801ae1a:	2300      	movs	r3, #0
 801ae1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801ae1e:	79fb      	ldrb	r3, [r7, #7]
 801ae20:	4a0e      	ldr	r2, [pc, #56]	@ (801ae5c <disk_initialize+0x4c>)
 801ae22:	5cd3      	ldrb	r3, [r2, r3]
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d114      	bne.n	801ae52 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801ae28:	79fb      	ldrb	r3, [r7, #7]
 801ae2a:	4a0c      	ldr	r2, [pc, #48]	@ (801ae5c <disk_initialize+0x4c>)
 801ae2c:	009b      	lsls	r3, r3, #2
 801ae2e:	4413      	add	r3, r2
 801ae30:	685b      	ldr	r3, [r3, #4]
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	79fa      	ldrb	r2, [r7, #7]
 801ae36:	4909      	ldr	r1, [pc, #36]	@ (801ae5c <disk_initialize+0x4c>)
 801ae38:	440a      	add	r2, r1
 801ae3a:	7a12      	ldrb	r2, [r2, #8]
 801ae3c:	4610      	mov	r0, r2
 801ae3e:	4798      	blx	r3
 801ae40:	4603      	mov	r3, r0
 801ae42:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801ae44:	7bfb      	ldrb	r3, [r7, #15]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d103      	bne.n	801ae52 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801ae4a:	79fb      	ldrb	r3, [r7, #7]
 801ae4c:	4a03      	ldr	r2, [pc, #12]	@ (801ae5c <disk_initialize+0x4c>)
 801ae4e:	2101      	movs	r1, #1
 801ae50:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801ae52:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae54:	4618      	mov	r0, r3
 801ae56:	3710      	adds	r7, #16
 801ae58:	46bd      	mov	sp, r7
 801ae5a:	bd80      	pop	{r7, pc}
 801ae5c:	24000768 	.word	0x24000768

0801ae60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801ae60:	b590      	push	{r4, r7, lr}
 801ae62:	b087      	sub	sp, #28
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	60b9      	str	r1, [r7, #8]
 801ae68:	607a      	str	r2, [r7, #4]
 801ae6a:	603b      	str	r3, [r7, #0]
 801ae6c:	4603      	mov	r3, r0
 801ae6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801ae70:	7bfb      	ldrb	r3, [r7, #15]
 801ae72:	4a0a      	ldr	r2, [pc, #40]	@ (801ae9c <disk_read+0x3c>)
 801ae74:	009b      	lsls	r3, r3, #2
 801ae76:	4413      	add	r3, r2
 801ae78:	685b      	ldr	r3, [r3, #4]
 801ae7a:	689c      	ldr	r4, [r3, #8]
 801ae7c:	7bfb      	ldrb	r3, [r7, #15]
 801ae7e:	4a07      	ldr	r2, [pc, #28]	@ (801ae9c <disk_read+0x3c>)
 801ae80:	4413      	add	r3, r2
 801ae82:	7a18      	ldrb	r0, [r3, #8]
 801ae84:	683b      	ldr	r3, [r7, #0]
 801ae86:	687a      	ldr	r2, [r7, #4]
 801ae88:	68b9      	ldr	r1, [r7, #8]
 801ae8a:	47a0      	blx	r4
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	75fb      	strb	r3, [r7, #23]
  return res;
 801ae90:	7dfb      	ldrb	r3, [r7, #23]
}
 801ae92:	4618      	mov	r0, r3
 801ae94:	371c      	adds	r7, #28
 801ae96:	46bd      	mov	sp, r7
 801ae98:	bd90      	pop	{r4, r7, pc}
 801ae9a:	bf00      	nop
 801ae9c:	24000768 	.word	0x24000768

0801aea0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801aea0:	b590      	push	{r4, r7, lr}
 801aea2:	b087      	sub	sp, #28
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	60b9      	str	r1, [r7, #8]
 801aea8:	607a      	str	r2, [r7, #4]
 801aeaa:	603b      	str	r3, [r7, #0]
 801aeac:	4603      	mov	r3, r0
 801aeae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801aeb0:	7bfb      	ldrb	r3, [r7, #15]
 801aeb2:	4a0a      	ldr	r2, [pc, #40]	@ (801aedc <disk_write+0x3c>)
 801aeb4:	009b      	lsls	r3, r3, #2
 801aeb6:	4413      	add	r3, r2
 801aeb8:	685b      	ldr	r3, [r3, #4]
 801aeba:	68dc      	ldr	r4, [r3, #12]
 801aebc:	7bfb      	ldrb	r3, [r7, #15]
 801aebe:	4a07      	ldr	r2, [pc, #28]	@ (801aedc <disk_write+0x3c>)
 801aec0:	4413      	add	r3, r2
 801aec2:	7a18      	ldrb	r0, [r3, #8]
 801aec4:	683b      	ldr	r3, [r7, #0]
 801aec6:	687a      	ldr	r2, [r7, #4]
 801aec8:	68b9      	ldr	r1, [r7, #8]
 801aeca:	47a0      	blx	r4
 801aecc:	4603      	mov	r3, r0
 801aece:	75fb      	strb	r3, [r7, #23]
  return res;
 801aed0:	7dfb      	ldrb	r3, [r7, #23]
}
 801aed2:	4618      	mov	r0, r3
 801aed4:	371c      	adds	r7, #28
 801aed6:	46bd      	mov	sp, r7
 801aed8:	bd90      	pop	{r4, r7, pc}
 801aeda:	bf00      	nop
 801aedc:	24000768 	.word	0x24000768

0801aee0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801aee0:	b580      	push	{r7, lr}
 801aee2:	b084      	sub	sp, #16
 801aee4:	af00      	add	r7, sp, #0
 801aee6:	4603      	mov	r3, r0
 801aee8:	603a      	str	r2, [r7, #0]
 801aeea:	71fb      	strb	r3, [r7, #7]
 801aeec:	460b      	mov	r3, r1
 801aeee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801aef0:	79fb      	ldrb	r3, [r7, #7]
 801aef2:	4a09      	ldr	r2, [pc, #36]	@ (801af18 <disk_ioctl+0x38>)
 801aef4:	009b      	lsls	r3, r3, #2
 801aef6:	4413      	add	r3, r2
 801aef8:	685b      	ldr	r3, [r3, #4]
 801aefa:	691b      	ldr	r3, [r3, #16]
 801aefc:	79fa      	ldrb	r2, [r7, #7]
 801aefe:	4906      	ldr	r1, [pc, #24]	@ (801af18 <disk_ioctl+0x38>)
 801af00:	440a      	add	r2, r1
 801af02:	7a10      	ldrb	r0, [r2, #8]
 801af04:	79b9      	ldrb	r1, [r7, #6]
 801af06:	683a      	ldr	r2, [r7, #0]
 801af08:	4798      	blx	r3
 801af0a:	4603      	mov	r3, r0
 801af0c:	73fb      	strb	r3, [r7, #15]
  return res;
 801af0e:	7bfb      	ldrb	r3, [r7, #15]
}
 801af10:	4618      	mov	r0, r3
 801af12:	3710      	adds	r7, #16
 801af14:	46bd      	mov	sp, r7
 801af16:	bd80      	pop	{r7, pc}
 801af18:	24000768 	.word	0x24000768

0801af1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801af1c:	b480      	push	{r7}
 801af1e:	b085      	sub	sp, #20
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	3301      	adds	r3, #1
 801af28:	781b      	ldrb	r3, [r3, #0]
 801af2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801af2c:	89fb      	ldrh	r3, [r7, #14]
 801af2e:	021b      	lsls	r3, r3, #8
 801af30:	b21a      	sxth	r2, r3
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	781b      	ldrb	r3, [r3, #0]
 801af36:	b21b      	sxth	r3, r3
 801af38:	4313      	orrs	r3, r2
 801af3a:	b21b      	sxth	r3, r3
 801af3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801af3e:	89fb      	ldrh	r3, [r7, #14]
}
 801af40:	4618      	mov	r0, r3
 801af42:	3714      	adds	r7, #20
 801af44:	46bd      	mov	sp, r7
 801af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af4a:	4770      	bx	lr

0801af4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801af4c:	b480      	push	{r7}
 801af4e:	b085      	sub	sp, #20
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	3303      	adds	r3, #3
 801af58:	781b      	ldrb	r3, [r3, #0]
 801af5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	021b      	lsls	r3, r3, #8
 801af60:	687a      	ldr	r2, [r7, #4]
 801af62:	3202      	adds	r2, #2
 801af64:	7812      	ldrb	r2, [r2, #0]
 801af66:	4313      	orrs	r3, r2
 801af68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801af6a:	68fb      	ldr	r3, [r7, #12]
 801af6c:	021b      	lsls	r3, r3, #8
 801af6e:	687a      	ldr	r2, [r7, #4]
 801af70:	3201      	adds	r2, #1
 801af72:	7812      	ldrb	r2, [r2, #0]
 801af74:	4313      	orrs	r3, r2
 801af76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	021b      	lsls	r3, r3, #8
 801af7c:	687a      	ldr	r2, [r7, #4]
 801af7e:	7812      	ldrb	r2, [r2, #0]
 801af80:	4313      	orrs	r3, r2
 801af82:	60fb      	str	r3, [r7, #12]
	return rv;
 801af84:	68fb      	ldr	r3, [r7, #12]
}
 801af86:	4618      	mov	r0, r3
 801af88:	3714      	adds	r7, #20
 801af8a:	46bd      	mov	sp, r7
 801af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af90:	4770      	bx	lr

0801af92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801af92:	b480      	push	{r7}
 801af94:	b083      	sub	sp, #12
 801af96:	af00      	add	r7, sp, #0
 801af98:	6078      	str	r0, [r7, #4]
 801af9a:	460b      	mov	r3, r1
 801af9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	1c5a      	adds	r2, r3, #1
 801afa2:	607a      	str	r2, [r7, #4]
 801afa4:	887a      	ldrh	r2, [r7, #2]
 801afa6:	b2d2      	uxtb	r2, r2
 801afa8:	701a      	strb	r2, [r3, #0]
 801afaa:	887b      	ldrh	r3, [r7, #2]
 801afac:	0a1b      	lsrs	r3, r3, #8
 801afae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	1c5a      	adds	r2, r3, #1
 801afb4:	607a      	str	r2, [r7, #4]
 801afb6:	887a      	ldrh	r2, [r7, #2]
 801afb8:	b2d2      	uxtb	r2, r2
 801afba:	701a      	strb	r2, [r3, #0]
}
 801afbc:	bf00      	nop
 801afbe:	370c      	adds	r7, #12
 801afc0:	46bd      	mov	sp, r7
 801afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afc6:	4770      	bx	lr

0801afc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801afc8:	b480      	push	{r7}
 801afca:	b083      	sub	sp, #12
 801afcc:	af00      	add	r7, sp, #0
 801afce:	6078      	str	r0, [r7, #4]
 801afd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	1c5a      	adds	r2, r3, #1
 801afd6:	607a      	str	r2, [r7, #4]
 801afd8:	683a      	ldr	r2, [r7, #0]
 801afda:	b2d2      	uxtb	r2, r2
 801afdc:	701a      	strb	r2, [r3, #0]
 801afde:	683b      	ldr	r3, [r7, #0]
 801afe0:	0a1b      	lsrs	r3, r3, #8
 801afe2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	1c5a      	adds	r2, r3, #1
 801afe8:	607a      	str	r2, [r7, #4]
 801afea:	683a      	ldr	r2, [r7, #0]
 801afec:	b2d2      	uxtb	r2, r2
 801afee:	701a      	strb	r2, [r3, #0]
 801aff0:	683b      	ldr	r3, [r7, #0]
 801aff2:	0a1b      	lsrs	r3, r3, #8
 801aff4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	1c5a      	adds	r2, r3, #1
 801affa:	607a      	str	r2, [r7, #4]
 801affc:	683a      	ldr	r2, [r7, #0]
 801affe:	b2d2      	uxtb	r2, r2
 801b000:	701a      	strb	r2, [r3, #0]
 801b002:	683b      	ldr	r3, [r7, #0]
 801b004:	0a1b      	lsrs	r3, r3, #8
 801b006:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	1c5a      	adds	r2, r3, #1
 801b00c:	607a      	str	r2, [r7, #4]
 801b00e:	683a      	ldr	r2, [r7, #0]
 801b010:	b2d2      	uxtb	r2, r2
 801b012:	701a      	strb	r2, [r3, #0]
}
 801b014:	bf00      	nop
 801b016:	370c      	adds	r7, #12
 801b018:	46bd      	mov	sp, r7
 801b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b01e:	4770      	bx	lr

0801b020 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801b020:	b480      	push	{r7}
 801b022:	b087      	sub	sp, #28
 801b024:	af00      	add	r7, sp, #0
 801b026:	60f8      	str	r0, [r7, #12]
 801b028:	60b9      	str	r1, [r7, #8]
 801b02a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801b030:	68bb      	ldr	r3, [r7, #8]
 801b032:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	2b00      	cmp	r3, #0
 801b038:	d00d      	beq.n	801b056 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801b03a:	693a      	ldr	r2, [r7, #16]
 801b03c:	1c53      	adds	r3, r2, #1
 801b03e:	613b      	str	r3, [r7, #16]
 801b040:	697b      	ldr	r3, [r7, #20]
 801b042:	1c59      	adds	r1, r3, #1
 801b044:	6179      	str	r1, [r7, #20]
 801b046:	7812      	ldrb	r2, [r2, #0]
 801b048:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	3b01      	subs	r3, #1
 801b04e:	607b      	str	r3, [r7, #4]
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d1f1      	bne.n	801b03a <mem_cpy+0x1a>
	}
}
 801b056:	bf00      	nop
 801b058:	371c      	adds	r7, #28
 801b05a:	46bd      	mov	sp, r7
 801b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b060:	4770      	bx	lr

0801b062 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801b062:	b480      	push	{r7}
 801b064:	b087      	sub	sp, #28
 801b066:	af00      	add	r7, sp, #0
 801b068:	60f8      	str	r0, [r7, #12]
 801b06a:	60b9      	str	r1, [r7, #8]
 801b06c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801b06e:	68fb      	ldr	r3, [r7, #12]
 801b070:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801b072:	697b      	ldr	r3, [r7, #20]
 801b074:	1c5a      	adds	r2, r3, #1
 801b076:	617a      	str	r2, [r7, #20]
 801b078:	68ba      	ldr	r2, [r7, #8]
 801b07a:	b2d2      	uxtb	r2, r2
 801b07c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	3b01      	subs	r3, #1
 801b082:	607b      	str	r3, [r7, #4]
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	2b00      	cmp	r3, #0
 801b088:	d1f3      	bne.n	801b072 <mem_set+0x10>
}
 801b08a:	bf00      	nop
 801b08c:	bf00      	nop
 801b08e:	371c      	adds	r7, #28
 801b090:	46bd      	mov	sp, r7
 801b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b096:	4770      	bx	lr

0801b098 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801b098:	b480      	push	{r7}
 801b09a:	b089      	sub	sp, #36	@ 0x24
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	60f8      	str	r0, [r7, #12]
 801b0a0:	60b9      	str	r1, [r7, #8]
 801b0a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801b0a4:	68fb      	ldr	r3, [r7, #12]
 801b0a6:	61fb      	str	r3, [r7, #28]
 801b0a8:	68bb      	ldr	r3, [r7, #8]
 801b0aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801b0ac:	2300      	movs	r3, #0
 801b0ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801b0b0:	69fb      	ldr	r3, [r7, #28]
 801b0b2:	1c5a      	adds	r2, r3, #1
 801b0b4:	61fa      	str	r2, [r7, #28]
 801b0b6:	781b      	ldrb	r3, [r3, #0]
 801b0b8:	4619      	mov	r1, r3
 801b0ba:	69bb      	ldr	r3, [r7, #24]
 801b0bc:	1c5a      	adds	r2, r3, #1
 801b0be:	61ba      	str	r2, [r7, #24]
 801b0c0:	781b      	ldrb	r3, [r3, #0]
 801b0c2:	1acb      	subs	r3, r1, r3
 801b0c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	3b01      	subs	r3, #1
 801b0ca:	607b      	str	r3, [r7, #4]
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d002      	beq.n	801b0d8 <mem_cmp+0x40>
 801b0d2:	697b      	ldr	r3, [r7, #20]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d0eb      	beq.n	801b0b0 <mem_cmp+0x18>

	return r;
 801b0d8:	697b      	ldr	r3, [r7, #20]
}
 801b0da:	4618      	mov	r0, r3
 801b0dc:	3724      	adds	r7, #36	@ 0x24
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0e4:	4770      	bx	lr

0801b0e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801b0e6:	b480      	push	{r7}
 801b0e8:	b083      	sub	sp, #12
 801b0ea:	af00      	add	r7, sp, #0
 801b0ec:	6078      	str	r0, [r7, #4]
 801b0ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801b0f0:	e002      	b.n	801b0f8 <chk_chr+0x12>
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	3301      	adds	r3, #1
 801b0f6:	607b      	str	r3, [r7, #4]
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	781b      	ldrb	r3, [r3, #0]
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d005      	beq.n	801b10c <chk_chr+0x26>
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	781b      	ldrb	r3, [r3, #0]
 801b104:	461a      	mov	r2, r3
 801b106:	683b      	ldr	r3, [r7, #0]
 801b108:	4293      	cmp	r3, r2
 801b10a:	d1f2      	bne.n	801b0f2 <chk_chr+0xc>
	return *str;
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	781b      	ldrb	r3, [r3, #0]
}
 801b110:	4618      	mov	r0, r3
 801b112:	370c      	adds	r7, #12
 801b114:	46bd      	mov	sp, r7
 801b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b11a:	4770      	bx	lr

0801b11c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b11c:	b480      	push	{r7}
 801b11e:	b085      	sub	sp, #20
 801b120:	af00      	add	r7, sp, #0
 801b122:	6078      	str	r0, [r7, #4]
 801b124:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b126:	2300      	movs	r3, #0
 801b128:	60bb      	str	r3, [r7, #8]
 801b12a:	68bb      	ldr	r3, [r7, #8]
 801b12c:	60fb      	str	r3, [r7, #12]
 801b12e:	e029      	b.n	801b184 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801b130:	4a27      	ldr	r2, [pc, #156]	@ (801b1d0 <chk_lock+0xb4>)
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	011b      	lsls	r3, r3, #4
 801b136:	4413      	add	r3, r2
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d01d      	beq.n	801b17a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b13e:	4a24      	ldr	r2, [pc, #144]	@ (801b1d0 <chk_lock+0xb4>)
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	011b      	lsls	r3, r3, #4
 801b144:	4413      	add	r3, r2
 801b146:	681a      	ldr	r2, [r3, #0]
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	429a      	cmp	r2, r3
 801b14e:	d116      	bne.n	801b17e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801b150:	4a1f      	ldr	r2, [pc, #124]	@ (801b1d0 <chk_lock+0xb4>)
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	011b      	lsls	r3, r3, #4
 801b156:	4413      	add	r3, r2
 801b158:	3304      	adds	r3, #4
 801b15a:	681a      	ldr	r2, [r3, #0]
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801b160:	429a      	cmp	r2, r3
 801b162:	d10c      	bne.n	801b17e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b164:	4a1a      	ldr	r2, [pc, #104]	@ (801b1d0 <chk_lock+0xb4>)
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	011b      	lsls	r3, r3, #4
 801b16a:	4413      	add	r3, r2
 801b16c:	3308      	adds	r3, #8
 801b16e:	681a      	ldr	r2, [r3, #0]
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801b174:	429a      	cmp	r2, r3
 801b176:	d102      	bne.n	801b17e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801b178:	e007      	b.n	801b18a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801b17a:	2301      	movs	r3, #1
 801b17c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	3301      	adds	r3, #1
 801b182:	60fb      	str	r3, [r7, #12]
 801b184:	68fb      	ldr	r3, [r7, #12]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d0d2      	beq.n	801b130 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801b18a:	68fb      	ldr	r3, [r7, #12]
 801b18c:	2b01      	cmp	r3, #1
 801b18e:	d109      	bne.n	801b1a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801b190:	68bb      	ldr	r3, [r7, #8]
 801b192:	2b00      	cmp	r3, #0
 801b194:	d102      	bne.n	801b19c <chk_lock+0x80>
 801b196:	683b      	ldr	r3, [r7, #0]
 801b198:	2b02      	cmp	r3, #2
 801b19a:	d101      	bne.n	801b1a0 <chk_lock+0x84>
 801b19c:	2300      	movs	r3, #0
 801b19e:	e010      	b.n	801b1c2 <chk_lock+0xa6>
 801b1a0:	2312      	movs	r3, #18
 801b1a2:	e00e      	b.n	801b1c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801b1a4:	683b      	ldr	r3, [r7, #0]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d108      	bne.n	801b1bc <chk_lock+0xa0>
 801b1aa:	4a09      	ldr	r2, [pc, #36]	@ (801b1d0 <chk_lock+0xb4>)
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	011b      	lsls	r3, r3, #4
 801b1b0:	4413      	add	r3, r2
 801b1b2:	330c      	adds	r3, #12
 801b1b4:	881b      	ldrh	r3, [r3, #0]
 801b1b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b1ba:	d101      	bne.n	801b1c0 <chk_lock+0xa4>
 801b1bc:	2310      	movs	r3, #16
 801b1be:	e000      	b.n	801b1c2 <chk_lock+0xa6>
 801b1c0:	2300      	movs	r3, #0
}
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	3714      	adds	r7, #20
 801b1c6:	46bd      	mov	sp, r7
 801b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1cc:	4770      	bx	lr
 801b1ce:	bf00      	nop
 801b1d0:	24000558 	.word	0x24000558

0801b1d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801b1d4:	b480      	push	{r7}
 801b1d6:	b083      	sub	sp, #12
 801b1d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b1da:	2300      	movs	r3, #0
 801b1dc:	607b      	str	r3, [r7, #4]
 801b1de:	e002      	b.n	801b1e6 <enq_lock+0x12>
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	3301      	adds	r3, #1
 801b1e4:	607b      	str	r3, [r7, #4]
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d106      	bne.n	801b1fa <enq_lock+0x26>
 801b1ec:	4a09      	ldr	r2, [pc, #36]	@ (801b214 <enq_lock+0x40>)
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	011b      	lsls	r3, r3, #4
 801b1f2:	4413      	add	r3, r2
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d1f2      	bne.n	801b1e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	2b01      	cmp	r3, #1
 801b1fe:	bf14      	ite	ne
 801b200:	2301      	movne	r3, #1
 801b202:	2300      	moveq	r3, #0
 801b204:	b2db      	uxtb	r3, r3
}
 801b206:	4618      	mov	r0, r3
 801b208:	370c      	adds	r7, #12
 801b20a:	46bd      	mov	sp, r7
 801b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b210:	4770      	bx	lr
 801b212:	bf00      	nop
 801b214:	24000558 	.word	0x24000558

0801b218 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801b218:	b480      	push	{r7}
 801b21a:	b085      	sub	sp, #20
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	6078      	str	r0, [r7, #4]
 801b220:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b222:	2300      	movs	r3, #0
 801b224:	60fb      	str	r3, [r7, #12]
 801b226:	e01f      	b.n	801b268 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801b228:	4a41      	ldr	r2, [pc, #260]	@ (801b330 <inc_lock+0x118>)
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	011b      	lsls	r3, r3, #4
 801b22e:	4413      	add	r3, r2
 801b230:	681a      	ldr	r2, [r3, #0]
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	429a      	cmp	r2, r3
 801b238:	d113      	bne.n	801b262 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801b23a:	4a3d      	ldr	r2, [pc, #244]	@ (801b330 <inc_lock+0x118>)
 801b23c:	68fb      	ldr	r3, [r7, #12]
 801b23e:	011b      	lsls	r3, r3, #4
 801b240:	4413      	add	r3, r2
 801b242:	3304      	adds	r3, #4
 801b244:	681a      	ldr	r2, [r3, #0]
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801b24a:	429a      	cmp	r2, r3
 801b24c:	d109      	bne.n	801b262 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801b24e:	4a38      	ldr	r2, [pc, #224]	@ (801b330 <inc_lock+0x118>)
 801b250:	68fb      	ldr	r3, [r7, #12]
 801b252:	011b      	lsls	r3, r3, #4
 801b254:	4413      	add	r3, r2
 801b256:	3308      	adds	r3, #8
 801b258:	681a      	ldr	r2, [r3, #0]
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801b25e:	429a      	cmp	r2, r3
 801b260:	d006      	beq.n	801b270 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	3301      	adds	r3, #1
 801b266:	60fb      	str	r3, [r7, #12]
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d0dc      	beq.n	801b228 <inc_lock+0x10>
 801b26e:	e000      	b.n	801b272 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801b270:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	2b01      	cmp	r3, #1
 801b276:	d132      	bne.n	801b2de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b278:	2300      	movs	r3, #0
 801b27a:	60fb      	str	r3, [r7, #12]
 801b27c:	e002      	b.n	801b284 <inc_lock+0x6c>
 801b27e:	68fb      	ldr	r3, [r7, #12]
 801b280:	3301      	adds	r3, #1
 801b282:	60fb      	str	r3, [r7, #12]
 801b284:	68fb      	ldr	r3, [r7, #12]
 801b286:	2b00      	cmp	r3, #0
 801b288:	d106      	bne.n	801b298 <inc_lock+0x80>
 801b28a:	4a29      	ldr	r2, [pc, #164]	@ (801b330 <inc_lock+0x118>)
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	011b      	lsls	r3, r3, #4
 801b290:	4413      	add	r3, r2
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d1f2      	bne.n	801b27e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	2b01      	cmp	r3, #1
 801b29c:	d101      	bne.n	801b2a2 <inc_lock+0x8a>
 801b29e:	2300      	movs	r3, #0
 801b2a0:	e040      	b.n	801b324 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	681a      	ldr	r2, [r3, #0]
 801b2a6:	4922      	ldr	r1, [pc, #136]	@ (801b330 <inc_lock+0x118>)
 801b2a8:	68fb      	ldr	r3, [r7, #12]
 801b2aa:	011b      	lsls	r3, r3, #4
 801b2ac:	440b      	add	r3, r1
 801b2ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	689a      	ldr	r2, [r3, #8]
 801b2b4:	491e      	ldr	r1, [pc, #120]	@ (801b330 <inc_lock+0x118>)
 801b2b6:	68fb      	ldr	r3, [r7, #12]
 801b2b8:	011b      	lsls	r3, r3, #4
 801b2ba:	440b      	add	r3, r1
 801b2bc:	3304      	adds	r3, #4
 801b2be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	695a      	ldr	r2, [r3, #20]
 801b2c4:	491a      	ldr	r1, [pc, #104]	@ (801b330 <inc_lock+0x118>)
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	011b      	lsls	r3, r3, #4
 801b2ca:	440b      	add	r3, r1
 801b2cc:	3308      	adds	r3, #8
 801b2ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801b2d0:	4a17      	ldr	r2, [pc, #92]	@ (801b330 <inc_lock+0x118>)
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	011b      	lsls	r3, r3, #4
 801b2d6:	4413      	add	r3, r2
 801b2d8:	330c      	adds	r3, #12
 801b2da:	2200      	movs	r2, #0
 801b2dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801b2de:	683b      	ldr	r3, [r7, #0]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d009      	beq.n	801b2f8 <inc_lock+0xe0>
 801b2e4:	4a12      	ldr	r2, [pc, #72]	@ (801b330 <inc_lock+0x118>)
 801b2e6:	68fb      	ldr	r3, [r7, #12]
 801b2e8:	011b      	lsls	r3, r3, #4
 801b2ea:	4413      	add	r3, r2
 801b2ec:	330c      	adds	r3, #12
 801b2ee:	881b      	ldrh	r3, [r3, #0]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d001      	beq.n	801b2f8 <inc_lock+0xe0>
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	e015      	b.n	801b324 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b2f8:	683b      	ldr	r3, [r7, #0]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d108      	bne.n	801b310 <inc_lock+0xf8>
 801b2fe:	4a0c      	ldr	r2, [pc, #48]	@ (801b330 <inc_lock+0x118>)
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	011b      	lsls	r3, r3, #4
 801b304:	4413      	add	r3, r2
 801b306:	330c      	adds	r3, #12
 801b308:	881b      	ldrh	r3, [r3, #0]
 801b30a:	3301      	adds	r3, #1
 801b30c:	b29a      	uxth	r2, r3
 801b30e:	e001      	b.n	801b314 <inc_lock+0xfc>
 801b310:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b314:	4906      	ldr	r1, [pc, #24]	@ (801b330 <inc_lock+0x118>)
 801b316:	68fb      	ldr	r3, [r7, #12]
 801b318:	011b      	lsls	r3, r3, #4
 801b31a:	440b      	add	r3, r1
 801b31c:	330c      	adds	r3, #12
 801b31e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801b320:	68fb      	ldr	r3, [r7, #12]
 801b322:	3301      	adds	r3, #1
}
 801b324:	4618      	mov	r0, r3
 801b326:	3714      	adds	r7, #20
 801b328:	46bd      	mov	sp, r7
 801b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b32e:	4770      	bx	lr
 801b330:	24000558 	.word	0x24000558

0801b334 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801b334:	b480      	push	{r7}
 801b336:	b085      	sub	sp, #20
 801b338:	af00      	add	r7, sp, #0
 801b33a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	3b01      	subs	r3, #1
 801b340:	607b      	str	r3, [r7, #4]
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	2b00      	cmp	r3, #0
 801b346:	d125      	bne.n	801b394 <dec_lock+0x60>
		n = Files[i].ctr;
 801b348:	4a17      	ldr	r2, [pc, #92]	@ (801b3a8 <dec_lock+0x74>)
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	011b      	lsls	r3, r3, #4
 801b34e:	4413      	add	r3, r2
 801b350:	330c      	adds	r3, #12
 801b352:	881b      	ldrh	r3, [r3, #0]
 801b354:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b356:	89fb      	ldrh	r3, [r7, #14]
 801b358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b35c:	d101      	bne.n	801b362 <dec_lock+0x2e>
 801b35e:	2300      	movs	r3, #0
 801b360:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801b362:	89fb      	ldrh	r3, [r7, #14]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d002      	beq.n	801b36e <dec_lock+0x3a>
 801b368:	89fb      	ldrh	r3, [r7, #14]
 801b36a:	3b01      	subs	r3, #1
 801b36c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801b36e:	4a0e      	ldr	r2, [pc, #56]	@ (801b3a8 <dec_lock+0x74>)
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	011b      	lsls	r3, r3, #4
 801b374:	4413      	add	r3, r2
 801b376:	330c      	adds	r3, #12
 801b378:	89fa      	ldrh	r2, [r7, #14]
 801b37a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b37c:	89fb      	ldrh	r3, [r7, #14]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d105      	bne.n	801b38e <dec_lock+0x5a>
 801b382:	4a09      	ldr	r2, [pc, #36]	@ (801b3a8 <dec_lock+0x74>)
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	011b      	lsls	r3, r3, #4
 801b388:	4413      	add	r3, r2
 801b38a:	2200      	movs	r2, #0
 801b38c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801b38e:	2300      	movs	r3, #0
 801b390:	737b      	strb	r3, [r7, #13]
 801b392:	e001      	b.n	801b398 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b394:	2302      	movs	r3, #2
 801b396:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801b398:	7b7b      	ldrb	r3, [r7, #13]
}
 801b39a:	4618      	mov	r0, r3
 801b39c:	3714      	adds	r7, #20
 801b39e:	46bd      	mov	sp, r7
 801b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3a4:	4770      	bx	lr
 801b3a6:	bf00      	nop
 801b3a8:	24000558 	.word	0x24000558

0801b3ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801b3ac:	b480      	push	{r7}
 801b3ae:	b085      	sub	sp, #20
 801b3b0:	af00      	add	r7, sp, #0
 801b3b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801b3b4:	2300      	movs	r3, #0
 801b3b6:	60fb      	str	r3, [r7, #12]
 801b3b8:	e010      	b.n	801b3dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801b3ba:	4a0d      	ldr	r2, [pc, #52]	@ (801b3f0 <clear_lock+0x44>)
 801b3bc:	68fb      	ldr	r3, [r7, #12]
 801b3be:	011b      	lsls	r3, r3, #4
 801b3c0:	4413      	add	r3, r2
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	687a      	ldr	r2, [r7, #4]
 801b3c6:	429a      	cmp	r2, r3
 801b3c8:	d105      	bne.n	801b3d6 <clear_lock+0x2a>
 801b3ca:	4a09      	ldr	r2, [pc, #36]	@ (801b3f0 <clear_lock+0x44>)
 801b3cc:	68fb      	ldr	r3, [r7, #12]
 801b3ce:	011b      	lsls	r3, r3, #4
 801b3d0:	4413      	add	r3, r2
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801b3d6:	68fb      	ldr	r3, [r7, #12]
 801b3d8:	3301      	adds	r3, #1
 801b3da:	60fb      	str	r3, [r7, #12]
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d0eb      	beq.n	801b3ba <clear_lock+0xe>
	}
}
 801b3e2:	bf00      	nop
 801b3e4:	bf00      	nop
 801b3e6:	3714      	adds	r7, #20
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ee:	4770      	bx	lr
 801b3f0:	24000558 	.word	0x24000558

0801b3f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b086      	sub	sp, #24
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	78db      	ldrb	r3, [r3, #3]
 801b404:	2b00      	cmp	r3, #0
 801b406:	d034      	beq.n	801b472 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b40c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	7858      	ldrb	r0, [r3, #1]
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b418:	2301      	movs	r3, #1
 801b41a:	697a      	ldr	r2, [r7, #20]
 801b41c:	f7ff fd40 	bl	801aea0 <disk_write>
 801b420:	4603      	mov	r3, r0
 801b422:	2b00      	cmp	r3, #0
 801b424:	d002      	beq.n	801b42c <sync_window+0x38>
			res = FR_DISK_ERR;
 801b426:	2301      	movs	r3, #1
 801b428:	73fb      	strb	r3, [r7, #15]
 801b42a:	e022      	b.n	801b472 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	2200      	movs	r2, #0
 801b430:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b436:	697a      	ldr	r2, [r7, #20]
 801b438:	1ad2      	subs	r2, r2, r3
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	6a1b      	ldr	r3, [r3, #32]
 801b43e:	429a      	cmp	r2, r3
 801b440:	d217      	bcs.n	801b472 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	789b      	ldrb	r3, [r3, #2]
 801b446:	613b      	str	r3, [r7, #16]
 801b448:	e010      	b.n	801b46c <sync_window+0x78>
					wsect += fs->fsize;
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	6a1b      	ldr	r3, [r3, #32]
 801b44e:	697a      	ldr	r2, [r7, #20]
 801b450:	4413      	add	r3, r2
 801b452:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	7858      	ldrb	r0, [r3, #1]
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b45e:	2301      	movs	r3, #1
 801b460:	697a      	ldr	r2, [r7, #20]
 801b462:	f7ff fd1d 	bl	801aea0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b466:	693b      	ldr	r3, [r7, #16]
 801b468:	3b01      	subs	r3, #1
 801b46a:	613b      	str	r3, [r7, #16]
 801b46c:	693b      	ldr	r3, [r7, #16]
 801b46e:	2b01      	cmp	r3, #1
 801b470:	d8eb      	bhi.n	801b44a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801b472:	7bfb      	ldrb	r3, [r7, #15]
}
 801b474:	4618      	mov	r0, r3
 801b476:	3718      	adds	r7, #24
 801b478:	46bd      	mov	sp, r7
 801b47a:	bd80      	pop	{r7, pc}

0801b47c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801b47c:	b580      	push	{r7, lr}
 801b47e:	b084      	sub	sp, #16
 801b480:	af00      	add	r7, sp, #0
 801b482:	6078      	str	r0, [r7, #4]
 801b484:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801b486:	2300      	movs	r3, #0
 801b488:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b48e:	683a      	ldr	r2, [r7, #0]
 801b490:	429a      	cmp	r2, r3
 801b492:	d01b      	beq.n	801b4cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801b494:	6878      	ldr	r0, [r7, #4]
 801b496:	f7ff ffad 	bl	801b3f4 <sync_window>
 801b49a:	4603      	mov	r3, r0
 801b49c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801b49e:	7bfb      	ldrb	r3, [r7, #15]
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	d113      	bne.n	801b4cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	7858      	ldrb	r0, [r3, #1]
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b4ae:	2301      	movs	r3, #1
 801b4b0:	683a      	ldr	r2, [r7, #0]
 801b4b2:	f7ff fcd5 	bl	801ae60 <disk_read>
 801b4b6:	4603      	mov	r3, r0
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d004      	beq.n	801b4c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801b4bc:	f04f 33ff 	mov.w	r3, #4294967295
 801b4c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801b4c2:	2301      	movs	r3, #1
 801b4c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	683a      	ldr	r2, [r7, #0]
 801b4ca:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801b4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	3710      	adds	r7, #16
 801b4d2:	46bd      	mov	sp, r7
 801b4d4:	bd80      	pop	{r7, pc}
	...

0801b4d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b084      	sub	sp, #16
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801b4e0:	6878      	ldr	r0, [r7, #4]
 801b4e2:	f7ff ff87 	bl	801b3f4 <sync_window>
 801b4e6:	4603      	mov	r3, r0
 801b4e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801b4ea:	7bfb      	ldrb	r3, [r7, #15]
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d159      	bne.n	801b5a4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	781b      	ldrb	r3, [r3, #0]
 801b4f4:	2b03      	cmp	r3, #3
 801b4f6:	d149      	bne.n	801b58c <sync_fs+0xb4>
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	791b      	ldrb	r3, [r3, #4]
 801b4fc:	2b01      	cmp	r3, #1
 801b4fe:	d145      	bne.n	801b58c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	899b      	ldrh	r3, [r3, #12]
 801b50a:	461a      	mov	r2, r3
 801b50c:	2100      	movs	r1, #0
 801b50e:	f7ff fda8 	bl	801b062 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	3338      	adds	r3, #56	@ 0x38
 801b516:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801b51a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801b51e:	4618      	mov	r0, r3
 801b520:	f7ff fd37 	bl	801af92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	3338      	adds	r3, #56	@ 0x38
 801b528:	4921      	ldr	r1, [pc, #132]	@ (801b5b0 <sync_fs+0xd8>)
 801b52a:	4618      	mov	r0, r3
 801b52c:	f7ff fd4c 	bl	801afc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	3338      	adds	r3, #56	@ 0x38
 801b534:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801b538:	491e      	ldr	r1, [pc, #120]	@ (801b5b4 <sync_fs+0xdc>)
 801b53a:	4618      	mov	r0, r3
 801b53c:	f7ff fd44 	bl	801afc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	3338      	adds	r3, #56	@ 0x38
 801b544:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	699b      	ldr	r3, [r3, #24]
 801b54c:	4619      	mov	r1, r3
 801b54e:	4610      	mov	r0, r2
 801b550:	f7ff fd3a 	bl	801afc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	3338      	adds	r3, #56	@ 0x38
 801b558:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	695b      	ldr	r3, [r3, #20]
 801b560:	4619      	mov	r1, r3
 801b562:	4610      	mov	r0, r2
 801b564:	f7ff fd30 	bl	801afc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b56c:	1c5a      	adds	r2, r3, #1
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	7858      	ldrb	r0, [r3, #1]
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b580:	2301      	movs	r3, #1
 801b582:	f7ff fc8d 	bl	801aea0 <disk_write>
			fs->fsi_flag = 0;
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	2200      	movs	r2, #0
 801b58a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	785b      	ldrb	r3, [r3, #1]
 801b590:	2200      	movs	r2, #0
 801b592:	2100      	movs	r1, #0
 801b594:	4618      	mov	r0, r3
 801b596:	f7ff fca3 	bl	801aee0 <disk_ioctl>
 801b59a:	4603      	mov	r3, r0
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d001      	beq.n	801b5a4 <sync_fs+0xcc>
 801b5a0:	2301      	movs	r3, #1
 801b5a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 801b5a6:	4618      	mov	r0, r3
 801b5a8:	3710      	adds	r7, #16
 801b5aa:	46bd      	mov	sp, r7
 801b5ac:	bd80      	pop	{r7, pc}
 801b5ae:	bf00      	nop
 801b5b0:	41615252 	.word	0x41615252
 801b5b4:	61417272 	.word	0x61417272

0801b5b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b5b8:	b480      	push	{r7}
 801b5ba:	b083      	sub	sp, #12
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]
 801b5c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b5c2:	683b      	ldr	r3, [r7, #0]
 801b5c4:	3b02      	subs	r3, #2
 801b5c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	69db      	ldr	r3, [r3, #28]
 801b5cc:	3b02      	subs	r3, #2
 801b5ce:	683a      	ldr	r2, [r7, #0]
 801b5d0:	429a      	cmp	r2, r3
 801b5d2:	d301      	bcc.n	801b5d8 <clust2sect+0x20>
 801b5d4:	2300      	movs	r3, #0
 801b5d6:	e008      	b.n	801b5ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	895b      	ldrh	r3, [r3, #10]
 801b5dc:	461a      	mov	r2, r3
 801b5de:	683b      	ldr	r3, [r7, #0]
 801b5e0:	fb03 f202 	mul.w	r2, r3, r2
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b5e8:	4413      	add	r3, r2
}
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	370c      	adds	r7, #12
 801b5ee:	46bd      	mov	sp, r7
 801b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5f4:	4770      	bx	lr

0801b5f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b5f6:	b580      	push	{r7, lr}
 801b5f8:	b086      	sub	sp, #24
 801b5fa:	af00      	add	r7, sp, #0
 801b5fc:	6078      	str	r0, [r7, #4]
 801b5fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b606:	683b      	ldr	r3, [r7, #0]
 801b608:	2b01      	cmp	r3, #1
 801b60a:	d904      	bls.n	801b616 <get_fat+0x20>
 801b60c:	693b      	ldr	r3, [r7, #16]
 801b60e:	69db      	ldr	r3, [r3, #28]
 801b610:	683a      	ldr	r2, [r7, #0]
 801b612:	429a      	cmp	r2, r3
 801b614:	d302      	bcc.n	801b61c <get_fat+0x26>
		val = 1;	/* Internal error */
 801b616:	2301      	movs	r3, #1
 801b618:	617b      	str	r3, [r7, #20]
 801b61a:	e0ba      	b.n	801b792 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b61c:	f04f 33ff 	mov.w	r3, #4294967295
 801b620:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b622:	693b      	ldr	r3, [r7, #16]
 801b624:	781b      	ldrb	r3, [r3, #0]
 801b626:	2b03      	cmp	r3, #3
 801b628:	f000 8082 	beq.w	801b730 <get_fat+0x13a>
 801b62c:	2b03      	cmp	r3, #3
 801b62e:	f300 80a6 	bgt.w	801b77e <get_fat+0x188>
 801b632:	2b01      	cmp	r3, #1
 801b634:	d002      	beq.n	801b63c <get_fat+0x46>
 801b636:	2b02      	cmp	r3, #2
 801b638:	d055      	beq.n	801b6e6 <get_fat+0xf0>
 801b63a:	e0a0      	b.n	801b77e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b63c:	683b      	ldr	r3, [r7, #0]
 801b63e:	60fb      	str	r3, [r7, #12]
 801b640:	68fb      	ldr	r3, [r7, #12]
 801b642:	085b      	lsrs	r3, r3, #1
 801b644:	68fa      	ldr	r2, [r7, #12]
 801b646:	4413      	add	r3, r2
 801b648:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b64a:	693b      	ldr	r3, [r7, #16]
 801b64c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b64e:	693b      	ldr	r3, [r7, #16]
 801b650:	899b      	ldrh	r3, [r3, #12]
 801b652:	4619      	mov	r1, r3
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	fbb3 f3f1 	udiv	r3, r3, r1
 801b65a:	4413      	add	r3, r2
 801b65c:	4619      	mov	r1, r3
 801b65e:	6938      	ldr	r0, [r7, #16]
 801b660:	f7ff ff0c 	bl	801b47c <move_window>
 801b664:	4603      	mov	r3, r0
 801b666:	2b00      	cmp	r3, #0
 801b668:	f040 808c 	bne.w	801b784 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	1c5a      	adds	r2, r3, #1
 801b670:	60fa      	str	r2, [r7, #12]
 801b672:	693a      	ldr	r2, [r7, #16]
 801b674:	8992      	ldrh	r2, [r2, #12]
 801b676:	fbb3 f1f2 	udiv	r1, r3, r2
 801b67a:	fb01 f202 	mul.w	r2, r1, r2
 801b67e:	1a9b      	subs	r3, r3, r2
 801b680:	693a      	ldr	r2, [r7, #16]
 801b682:	4413      	add	r3, r2
 801b684:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b688:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b68a:	693b      	ldr	r3, [r7, #16]
 801b68c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b68e:	693b      	ldr	r3, [r7, #16]
 801b690:	899b      	ldrh	r3, [r3, #12]
 801b692:	4619      	mov	r1, r3
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	fbb3 f3f1 	udiv	r3, r3, r1
 801b69a:	4413      	add	r3, r2
 801b69c:	4619      	mov	r1, r3
 801b69e:	6938      	ldr	r0, [r7, #16]
 801b6a0:	f7ff feec 	bl	801b47c <move_window>
 801b6a4:	4603      	mov	r3, r0
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d16e      	bne.n	801b788 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b6aa:	693b      	ldr	r3, [r7, #16]
 801b6ac:	899b      	ldrh	r3, [r3, #12]
 801b6ae:	461a      	mov	r2, r3
 801b6b0:	68fb      	ldr	r3, [r7, #12]
 801b6b2:	fbb3 f1f2 	udiv	r1, r3, r2
 801b6b6:	fb01 f202 	mul.w	r2, r1, r2
 801b6ba:	1a9b      	subs	r3, r3, r2
 801b6bc:	693a      	ldr	r2, [r7, #16]
 801b6be:	4413      	add	r3, r2
 801b6c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801b6c4:	021b      	lsls	r3, r3, #8
 801b6c6:	68ba      	ldr	r2, [r7, #8]
 801b6c8:	4313      	orrs	r3, r2
 801b6ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b6cc:	683b      	ldr	r3, [r7, #0]
 801b6ce:	f003 0301 	and.w	r3, r3, #1
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d002      	beq.n	801b6dc <get_fat+0xe6>
 801b6d6:	68bb      	ldr	r3, [r7, #8]
 801b6d8:	091b      	lsrs	r3, r3, #4
 801b6da:	e002      	b.n	801b6e2 <get_fat+0xec>
 801b6dc:	68bb      	ldr	r3, [r7, #8]
 801b6de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b6e2:	617b      	str	r3, [r7, #20]
			break;
 801b6e4:	e055      	b.n	801b792 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b6e6:	693b      	ldr	r3, [r7, #16]
 801b6e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b6ea:	693b      	ldr	r3, [r7, #16]
 801b6ec:	899b      	ldrh	r3, [r3, #12]
 801b6ee:	085b      	lsrs	r3, r3, #1
 801b6f0:	b29b      	uxth	r3, r3
 801b6f2:	4619      	mov	r1, r3
 801b6f4:	683b      	ldr	r3, [r7, #0]
 801b6f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b6fa:	4413      	add	r3, r2
 801b6fc:	4619      	mov	r1, r3
 801b6fe:	6938      	ldr	r0, [r7, #16]
 801b700:	f7ff febc 	bl	801b47c <move_window>
 801b704:	4603      	mov	r3, r0
 801b706:	2b00      	cmp	r3, #0
 801b708:	d140      	bne.n	801b78c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b70a:	693b      	ldr	r3, [r7, #16]
 801b70c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b710:	683b      	ldr	r3, [r7, #0]
 801b712:	005b      	lsls	r3, r3, #1
 801b714:	693a      	ldr	r2, [r7, #16]
 801b716:	8992      	ldrh	r2, [r2, #12]
 801b718:	fbb3 f0f2 	udiv	r0, r3, r2
 801b71c:	fb00 f202 	mul.w	r2, r0, r2
 801b720:	1a9b      	subs	r3, r3, r2
 801b722:	440b      	add	r3, r1
 801b724:	4618      	mov	r0, r3
 801b726:	f7ff fbf9 	bl	801af1c <ld_word>
 801b72a:	4603      	mov	r3, r0
 801b72c:	617b      	str	r3, [r7, #20]
			break;
 801b72e:	e030      	b.n	801b792 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b730:	693b      	ldr	r3, [r7, #16]
 801b732:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b734:	693b      	ldr	r3, [r7, #16]
 801b736:	899b      	ldrh	r3, [r3, #12]
 801b738:	089b      	lsrs	r3, r3, #2
 801b73a:	b29b      	uxth	r3, r3
 801b73c:	4619      	mov	r1, r3
 801b73e:	683b      	ldr	r3, [r7, #0]
 801b740:	fbb3 f3f1 	udiv	r3, r3, r1
 801b744:	4413      	add	r3, r2
 801b746:	4619      	mov	r1, r3
 801b748:	6938      	ldr	r0, [r7, #16]
 801b74a:	f7ff fe97 	bl	801b47c <move_window>
 801b74e:	4603      	mov	r3, r0
 801b750:	2b00      	cmp	r3, #0
 801b752:	d11d      	bne.n	801b790 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b754:	693b      	ldr	r3, [r7, #16]
 801b756:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b75a:	683b      	ldr	r3, [r7, #0]
 801b75c:	009b      	lsls	r3, r3, #2
 801b75e:	693a      	ldr	r2, [r7, #16]
 801b760:	8992      	ldrh	r2, [r2, #12]
 801b762:	fbb3 f0f2 	udiv	r0, r3, r2
 801b766:	fb00 f202 	mul.w	r2, r0, r2
 801b76a:	1a9b      	subs	r3, r3, r2
 801b76c:	440b      	add	r3, r1
 801b76e:	4618      	mov	r0, r3
 801b770:	f7ff fbec 	bl	801af4c <ld_dword>
 801b774:	4603      	mov	r3, r0
 801b776:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801b77a:	617b      	str	r3, [r7, #20]
			break;
 801b77c:	e009      	b.n	801b792 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b77e:	2301      	movs	r3, #1
 801b780:	617b      	str	r3, [r7, #20]
 801b782:	e006      	b.n	801b792 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b784:	bf00      	nop
 801b786:	e004      	b.n	801b792 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b788:	bf00      	nop
 801b78a:	e002      	b.n	801b792 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b78c:	bf00      	nop
 801b78e:	e000      	b.n	801b792 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b790:	bf00      	nop
		}
	}

	return val;
 801b792:	697b      	ldr	r3, [r7, #20]
}
 801b794:	4618      	mov	r0, r3
 801b796:	3718      	adds	r7, #24
 801b798:	46bd      	mov	sp, r7
 801b79a:	bd80      	pop	{r7, pc}

0801b79c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b79c:	b590      	push	{r4, r7, lr}
 801b79e:	b089      	sub	sp, #36	@ 0x24
 801b7a0:	af00      	add	r7, sp, #0
 801b7a2:	60f8      	str	r0, [r7, #12]
 801b7a4:	60b9      	str	r1, [r7, #8]
 801b7a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b7a8:	2302      	movs	r3, #2
 801b7aa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b7ac:	68bb      	ldr	r3, [r7, #8]
 801b7ae:	2b01      	cmp	r3, #1
 801b7b0:	f240 8109 	bls.w	801b9c6 <put_fat+0x22a>
 801b7b4:	68fb      	ldr	r3, [r7, #12]
 801b7b6:	69db      	ldr	r3, [r3, #28]
 801b7b8:	68ba      	ldr	r2, [r7, #8]
 801b7ba:	429a      	cmp	r2, r3
 801b7bc:	f080 8103 	bcs.w	801b9c6 <put_fat+0x22a>
		switch (fs->fs_type) {
 801b7c0:	68fb      	ldr	r3, [r7, #12]
 801b7c2:	781b      	ldrb	r3, [r3, #0]
 801b7c4:	2b03      	cmp	r3, #3
 801b7c6:	f000 80b6 	beq.w	801b936 <put_fat+0x19a>
 801b7ca:	2b03      	cmp	r3, #3
 801b7cc:	f300 80fb 	bgt.w	801b9c6 <put_fat+0x22a>
 801b7d0:	2b01      	cmp	r3, #1
 801b7d2:	d003      	beq.n	801b7dc <put_fat+0x40>
 801b7d4:	2b02      	cmp	r3, #2
 801b7d6:	f000 8083 	beq.w	801b8e0 <put_fat+0x144>
 801b7da:	e0f4      	b.n	801b9c6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b7dc:	68bb      	ldr	r3, [r7, #8]
 801b7de:	61bb      	str	r3, [r7, #24]
 801b7e0:	69bb      	ldr	r3, [r7, #24]
 801b7e2:	085b      	lsrs	r3, r3, #1
 801b7e4:	69ba      	ldr	r2, [r7, #24]
 801b7e6:	4413      	add	r3, r2
 801b7e8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b7ee:	68fb      	ldr	r3, [r7, #12]
 801b7f0:	899b      	ldrh	r3, [r3, #12]
 801b7f2:	4619      	mov	r1, r3
 801b7f4:	69bb      	ldr	r3, [r7, #24]
 801b7f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7fa:	4413      	add	r3, r2
 801b7fc:	4619      	mov	r1, r3
 801b7fe:	68f8      	ldr	r0, [r7, #12]
 801b800:	f7ff fe3c 	bl	801b47c <move_window>
 801b804:	4603      	mov	r3, r0
 801b806:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b808:	7ffb      	ldrb	r3, [r7, #31]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	f040 80d4 	bne.w	801b9b8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b816:	69bb      	ldr	r3, [r7, #24]
 801b818:	1c5a      	adds	r2, r3, #1
 801b81a:	61ba      	str	r2, [r7, #24]
 801b81c:	68fa      	ldr	r2, [r7, #12]
 801b81e:	8992      	ldrh	r2, [r2, #12]
 801b820:	fbb3 f0f2 	udiv	r0, r3, r2
 801b824:	fb00 f202 	mul.w	r2, r0, r2
 801b828:	1a9b      	subs	r3, r3, r2
 801b82a:	440b      	add	r3, r1
 801b82c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b82e:	68bb      	ldr	r3, [r7, #8]
 801b830:	f003 0301 	and.w	r3, r3, #1
 801b834:	2b00      	cmp	r3, #0
 801b836:	d00d      	beq.n	801b854 <put_fat+0xb8>
 801b838:	697b      	ldr	r3, [r7, #20]
 801b83a:	781b      	ldrb	r3, [r3, #0]
 801b83c:	b25b      	sxtb	r3, r3
 801b83e:	f003 030f 	and.w	r3, r3, #15
 801b842:	b25a      	sxtb	r2, r3
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	b2db      	uxtb	r3, r3
 801b848:	011b      	lsls	r3, r3, #4
 801b84a:	b25b      	sxtb	r3, r3
 801b84c:	4313      	orrs	r3, r2
 801b84e:	b25b      	sxtb	r3, r3
 801b850:	b2db      	uxtb	r3, r3
 801b852:	e001      	b.n	801b858 <put_fat+0xbc>
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	b2db      	uxtb	r3, r3
 801b858:	697a      	ldr	r2, [r7, #20]
 801b85a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	2201      	movs	r2, #1
 801b860:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	899b      	ldrh	r3, [r3, #12]
 801b86a:	4619      	mov	r1, r3
 801b86c:	69bb      	ldr	r3, [r7, #24]
 801b86e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b872:	4413      	add	r3, r2
 801b874:	4619      	mov	r1, r3
 801b876:	68f8      	ldr	r0, [r7, #12]
 801b878:	f7ff fe00 	bl	801b47c <move_window>
 801b87c:	4603      	mov	r3, r0
 801b87e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b880:	7ffb      	ldrb	r3, [r7, #31]
 801b882:	2b00      	cmp	r3, #0
 801b884:	f040 809a 	bne.w	801b9bc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b888:	68fb      	ldr	r3, [r7, #12]
 801b88a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	899b      	ldrh	r3, [r3, #12]
 801b892:	461a      	mov	r2, r3
 801b894:	69bb      	ldr	r3, [r7, #24]
 801b896:	fbb3 f0f2 	udiv	r0, r3, r2
 801b89a:	fb00 f202 	mul.w	r2, r0, r2
 801b89e:	1a9b      	subs	r3, r3, r2
 801b8a0:	440b      	add	r3, r1
 801b8a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b8a4:	68bb      	ldr	r3, [r7, #8]
 801b8a6:	f003 0301 	and.w	r3, r3, #1
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d003      	beq.n	801b8b6 <put_fat+0x11a>
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	091b      	lsrs	r3, r3, #4
 801b8b2:	b2db      	uxtb	r3, r3
 801b8b4:	e00e      	b.n	801b8d4 <put_fat+0x138>
 801b8b6:	697b      	ldr	r3, [r7, #20]
 801b8b8:	781b      	ldrb	r3, [r3, #0]
 801b8ba:	b25b      	sxtb	r3, r3
 801b8bc:	f023 030f 	bic.w	r3, r3, #15
 801b8c0:	b25a      	sxtb	r2, r3
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	0a1b      	lsrs	r3, r3, #8
 801b8c6:	b25b      	sxtb	r3, r3
 801b8c8:	f003 030f 	and.w	r3, r3, #15
 801b8cc:	b25b      	sxtb	r3, r3
 801b8ce:	4313      	orrs	r3, r2
 801b8d0:	b25b      	sxtb	r3, r3
 801b8d2:	b2db      	uxtb	r3, r3
 801b8d4:	697a      	ldr	r2, [r7, #20]
 801b8d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	2201      	movs	r2, #1
 801b8dc:	70da      	strb	r2, [r3, #3]
			break;
 801b8de:	e072      	b.n	801b9c6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	899b      	ldrh	r3, [r3, #12]
 801b8e8:	085b      	lsrs	r3, r3, #1
 801b8ea:	b29b      	uxth	r3, r3
 801b8ec:	4619      	mov	r1, r3
 801b8ee:	68bb      	ldr	r3, [r7, #8]
 801b8f0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8f4:	4413      	add	r3, r2
 801b8f6:	4619      	mov	r1, r3
 801b8f8:	68f8      	ldr	r0, [r7, #12]
 801b8fa:	f7ff fdbf 	bl	801b47c <move_window>
 801b8fe:	4603      	mov	r3, r0
 801b900:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b902:	7ffb      	ldrb	r3, [r7, #31]
 801b904:	2b00      	cmp	r3, #0
 801b906:	d15b      	bne.n	801b9c0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b908:	68fb      	ldr	r3, [r7, #12]
 801b90a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b90e:	68bb      	ldr	r3, [r7, #8]
 801b910:	005b      	lsls	r3, r3, #1
 801b912:	68fa      	ldr	r2, [r7, #12]
 801b914:	8992      	ldrh	r2, [r2, #12]
 801b916:	fbb3 f0f2 	udiv	r0, r3, r2
 801b91a:	fb00 f202 	mul.w	r2, r0, r2
 801b91e:	1a9b      	subs	r3, r3, r2
 801b920:	440b      	add	r3, r1
 801b922:	687a      	ldr	r2, [r7, #4]
 801b924:	b292      	uxth	r2, r2
 801b926:	4611      	mov	r1, r2
 801b928:	4618      	mov	r0, r3
 801b92a:	f7ff fb32 	bl	801af92 <st_word>
			fs->wflag = 1;
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	2201      	movs	r2, #1
 801b932:	70da      	strb	r2, [r3, #3]
			break;
 801b934:	e047      	b.n	801b9c6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b936:	68fb      	ldr	r3, [r7, #12]
 801b938:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	899b      	ldrh	r3, [r3, #12]
 801b93e:	089b      	lsrs	r3, r3, #2
 801b940:	b29b      	uxth	r3, r3
 801b942:	4619      	mov	r1, r3
 801b944:	68bb      	ldr	r3, [r7, #8]
 801b946:	fbb3 f3f1 	udiv	r3, r3, r1
 801b94a:	4413      	add	r3, r2
 801b94c:	4619      	mov	r1, r3
 801b94e:	68f8      	ldr	r0, [r7, #12]
 801b950:	f7ff fd94 	bl	801b47c <move_window>
 801b954:	4603      	mov	r3, r0
 801b956:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b958:	7ffb      	ldrb	r3, [r7, #31]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d132      	bne.n	801b9c4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b964:	68fb      	ldr	r3, [r7, #12]
 801b966:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b96a:	68bb      	ldr	r3, [r7, #8]
 801b96c:	009b      	lsls	r3, r3, #2
 801b96e:	68fa      	ldr	r2, [r7, #12]
 801b970:	8992      	ldrh	r2, [r2, #12]
 801b972:	fbb3 f0f2 	udiv	r0, r3, r2
 801b976:	fb00 f202 	mul.w	r2, r0, r2
 801b97a:	1a9b      	subs	r3, r3, r2
 801b97c:	440b      	add	r3, r1
 801b97e:	4618      	mov	r0, r3
 801b980:	f7ff fae4 	bl	801af4c <ld_dword>
 801b984:	4603      	mov	r3, r0
 801b986:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b98a:	4323      	orrs	r3, r4
 801b98c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b98e:	68fb      	ldr	r3, [r7, #12]
 801b990:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b994:	68bb      	ldr	r3, [r7, #8]
 801b996:	009b      	lsls	r3, r3, #2
 801b998:	68fa      	ldr	r2, [r7, #12]
 801b99a:	8992      	ldrh	r2, [r2, #12]
 801b99c:	fbb3 f0f2 	udiv	r0, r3, r2
 801b9a0:	fb00 f202 	mul.w	r2, r0, r2
 801b9a4:	1a9b      	subs	r3, r3, r2
 801b9a6:	440b      	add	r3, r1
 801b9a8:	6879      	ldr	r1, [r7, #4]
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	f7ff fb0c 	bl	801afc8 <st_dword>
			fs->wflag = 1;
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	2201      	movs	r2, #1
 801b9b4:	70da      	strb	r2, [r3, #3]
			break;
 801b9b6:	e006      	b.n	801b9c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b9b8:	bf00      	nop
 801b9ba:	e004      	b.n	801b9c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b9bc:	bf00      	nop
 801b9be:	e002      	b.n	801b9c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b9c0:	bf00      	nop
 801b9c2:	e000      	b.n	801b9c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b9c4:	bf00      	nop
		}
	}
	return res;
 801b9c6:	7ffb      	ldrb	r3, [r7, #31]
}
 801b9c8:	4618      	mov	r0, r3
 801b9ca:	3724      	adds	r7, #36	@ 0x24
 801b9cc:	46bd      	mov	sp, r7
 801b9ce:	bd90      	pop	{r4, r7, pc}

0801b9d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b088      	sub	sp, #32
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	60f8      	str	r0, [r7, #12]
 801b9d8:	60b9      	str	r1, [r7, #8]
 801b9da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b9dc:	2300      	movs	r3, #0
 801b9de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b9e6:	68bb      	ldr	r3, [r7, #8]
 801b9e8:	2b01      	cmp	r3, #1
 801b9ea:	d904      	bls.n	801b9f6 <remove_chain+0x26>
 801b9ec:	69bb      	ldr	r3, [r7, #24]
 801b9ee:	69db      	ldr	r3, [r3, #28]
 801b9f0:	68ba      	ldr	r2, [r7, #8]
 801b9f2:	429a      	cmp	r2, r3
 801b9f4:	d301      	bcc.n	801b9fa <remove_chain+0x2a>
 801b9f6:	2302      	movs	r3, #2
 801b9f8:	e04b      	b.n	801ba92 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d00c      	beq.n	801ba1a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801ba00:	f04f 32ff 	mov.w	r2, #4294967295
 801ba04:	6879      	ldr	r1, [r7, #4]
 801ba06:	69b8      	ldr	r0, [r7, #24]
 801ba08:	f7ff fec8 	bl	801b79c <put_fat>
 801ba0c:	4603      	mov	r3, r0
 801ba0e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801ba10:	7ffb      	ldrb	r3, [r7, #31]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d001      	beq.n	801ba1a <remove_chain+0x4a>
 801ba16:	7ffb      	ldrb	r3, [r7, #31]
 801ba18:	e03b      	b.n	801ba92 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801ba1a:	68b9      	ldr	r1, [r7, #8]
 801ba1c:	68f8      	ldr	r0, [r7, #12]
 801ba1e:	f7ff fdea 	bl	801b5f6 <get_fat>
 801ba22:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801ba24:	697b      	ldr	r3, [r7, #20]
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d031      	beq.n	801ba8e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801ba2a:	697b      	ldr	r3, [r7, #20]
 801ba2c:	2b01      	cmp	r3, #1
 801ba2e:	d101      	bne.n	801ba34 <remove_chain+0x64>
 801ba30:	2302      	movs	r3, #2
 801ba32:	e02e      	b.n	801ba92 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801ba34:	697b      	ldr	r3, [r7, #20]
 801ba36:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba3a:	d101      	bne.n	801ba40 <remove_chain+0x70>
 801ba3c:	2301      	movs	r3, #1
 801ba3e:	e028      	b.n	801ba92 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801ba40:	2200      	movs	r2, #0
 801ba42:	68b9      	ldr	r1, [r7, #8]
 801ba44:	69b8      	ldr	r0, [r7, #24]
 801ba46:	f7ff fea9 	bl	801b79c <put_fat>
 801ba4a:	4603      	mov	r3, r0
 801ba4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801ba4e:	7ffb      	ldrb	r3, [r7, #31]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d001      	beq.n	801ba58 <remove_chain+0x88>
 801ba54:	7ffb      	ldrb	r3, [r7, #31]
 801ba56:	e01c      	b.n	801ba92 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801ba58:	69bb      	ldr	r3, [r7, #24]
 801ba5a:	699a      	ldr	r2, [r3, #24]
 801ba5c:	69bb      	ldr	r3, [r7, #24]
 801ba5e:	69db      	ldr	r3, [r3, #28]
 801ba60:	3b02      	subs	r3, #2
 801ba62:	429a      	cmp	r2, r3
 801ba64:	d20b      	bcs.n	801ba7e <remove_chain+0xae>
			fs->free_clst++;
 801ba66:	69bb      	ldr	r3, [r7, #24]
 801ba68:	699b      	ldr	r3, [r3, #24]
 801ba6a:	1c5a      	adds	r2, r3, #1
 801ba6c:	69bb      	ldr	r3, [r7, #24]
 801ba6e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801ba70:	69bb      	ldr	r3, [r7, #24]
 801ba72:	791b      	ldrb	r3, [r3, #4]
 801ba74:	f043 0301 	orr.w	r3, r3, #1
 801ba78:	b2da      	uxtb	r2, r3
 801ba7a:	69bb      	ldr	r3, [r7, #24]
 801ba7c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801ba7e:	697b      	ldr	r3, [r7, #20]
 801ba80:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801ba82:	69bb      	ldr	r3, [r7, #24]
 801ba84:	69db      	ldr	r3, [r3, #28]
 801ba86:	68ba      	ldr	r2, [r7, #8]
 801ba88:	429a      	cmp	r2, r3
 801ba8a:	d3c6      	bcc.n	801ba1a <remove_chain+0x4a>
 801ba8c:	e000      	b.n	801ba90 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801ba8e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801ba90:	2300      	movs	r3, #0
}
 801ba92:	4618      	mov	r0, r3
 801ba94:	3720      	adds	r7, #32
 801ba96:	46bd      	mov	sp, r7
 801ba98:	bd80      	pop	{r7, pc}

0801ba9a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801ba9a:	b580      	push	{r7, lr}
 801ba9c:	b088      	sub	sp, #32
 801ba9e:	af00      	add	r7, sp, #0
 801baa0:	6078      	str	r0, [r7, #4]
 801baa2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801baaa:	683b      	ldr	r3, [r7, #0]
 801baac:	2b00      	cmp	r3, #0
 801baae:	d10d      	bne.n	801bacc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801bab0:	693b      	ldr	r3, [r7, #16]
 801bab2:	695b      	ldr	r3, [r3, #20]
 801bab4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801bab6:	69bb      	ldr	r3, [r7, #24]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d004      	beq.n	801bac6 <create_chain+0x2c>
 801babc:	693b      	ldr	r3, [r7, #16]
 801babe:	69db      	ldr	r3, [r3, #28]
 801bac0:	69ba      	ldr	r2, [r7, #24]
 801bac2:	429a      	cmp	r2, r3
 801bac4:	d31b      	bcc.n	801bafe <create_chain+0x64>
 801bac6:	2301      	movs	r3, #1
 801bac8:	61bb      	str	r3, [r7, #24]
 801baca:	e018      	b.n	801bafe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801bacc:	6839      	ldr	r1, [r7, #0]
 801bace:	6878      	ldr	r0, [r7, #4]
 801bad0:	f7ff fd91 	bl	801b5f6 <get_fat>
 801bad4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	2b01      	cmp	r3, #1
 801bada:	d801      	bhi.n	801bae0 <create_chain+0x46>
 801badc:	2301      	movs	r3, #1
 801bade:	e070      	b.n	801bbc2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bae6:	d101      	bne.n	801baec <create_chain+0x52>
 801bae8:	68fb      	ldr	r3, [r7, #12]
 801baea:	e06a      	b.n	801bbc2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801baec:	693b      	ldr	r3, [r7, #16]
 801baee:	69db      	ldr	r3, [r3, #28]
 801baf0:	68fa      	ldr	r2, [r7, #12]
 801baf2:	429a      	cmp	r2, r3
 801baf4:	d201      	bcs.n	801bafa <create_chain+0x60>
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	e063      	b.n	801bbc2 <create_chain+0x128>
		scl = clst;
 801bafa:	683b      	ldr	r3, [r7, #0]
 801bafc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801bafe:	69bb      	ldr	r3, [r7, #24]
 801bb00:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801bb02:	69fb      	ldr	r3, [r7, #28]
 801bb04:	3301      	adds	r3, #1
 801bb06:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801bb08:	693b      	ldr	r3, [r7, #16]
 801bb0a:	69db      	ldr	r3, [r3, #28]
 801bb0c:	69fa      	ldr	r2, [r7, #28]
 801bb0e:	429a      	cmp	r2, r3
 801bb10:	d307      	bcc.n	801bb22 <create_chain+0x88>
				ncl = 2;
 801bb12:	2302      	movs	r3, #2
 801bb14:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801bb16:	69fa      	ldr	r2, [r7, #28]
 801bb18:	69bb      	ldr	r3, [r7, #24]
 801bb1a:	429a      	cmp	r2, r3
 801bb1c:	d901      	bls.n	801bb22 <create_chain+0x88>
 801bb1e:	2300      	movs	r3, #0
 801bb20:	e04f      	b.n	801bbc2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801bb22:	69f9      	ldr	r1, [r7, #28]
 801bb24:	6878      	ldr	r0, [r7, #4]
 801bb26:	f7ff fd66 	bl	801b5f6 <get_fat>
 801bb2a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	d00e      	beq.n	801bb50 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801bb32:	68fb      	ldr	r3, [r7, #12]
 801bb34:	2b01      	cmp	r3, #1
 801bb36:	d003      	beq.n	801bb40 <create_chain+0xa6>
 801bb38:	68fb      	ldr	r3, [r7, #12]
 801bb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb3e:	d101      	bne.n	801bb44 <create_chain+0xaa>
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	e03e      	b.n	801bbc2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801bb44:	69fa      	ldr	r2, [r7, #28]
 801bb46:	69bb      	ldr	r3, [r7, #24]
 801bb48:	429a      	cmp	r2, r3
 801bb4a:	d1da      	bne.n	801bb02 <create_chain+0x68>
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	e038      	b.n	801bbc2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801bb50:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801bb52:	f04f 32ff 	mov.w	r2, #4294967295
 801bb56:	69f9      	ldr	r1, [r7, #28]
 801bb58:	6938      	ldr	r0, [r7, #16]
 801bb5a:	f7ff fe1f 	bl	801b79c <put_fat>
 801bb5e:	4603      	mov	r3, r0
 801bb60:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801bb62:	7dfb      	ldrb	r3, [r7, #23]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d109      	bne.n	801bb7c <create_chain+0xe2>
 801bb68:	683b      	ldr	r3, [r7, #0]
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d006      	beq.n	801bb7c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801bb6e:	69fa      	ldr	r2, [r7, #28]
 801bb70:	6839      	ldr	r1, [r7, #0]
 801bb72:	6938      	ldr	r0, [r7, #16]
 801bb74:	f7ff fe12 	bl	801b79c <put_fat>
 801bb78:	4603      	mov	r3, r0
 801bb7a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801bb7c:	7dfb      	ldrb	r3, [r7, #23]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d116      	bne.n	801bbb0 <create_chain+0x116>
		fs->last_clst = ncl;
 801bb82:	693b      	ldr	r3, [r7, #16]
 801bb84:	69fa      	ldr	r2, [r7, #28]
 801bb86:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801bb88:	693b      	ldr	r3, [r7, #16]
 801bb8a:	699a      	ldr	r2, [r3, #24]
 801bb8c:	693b      	ldr	r3, [r7, #16]
 801bb8e:	69db      	ldr	r3, [r3, #28]
 801bb90:	3b02      	subs	r3, #2
 801bb92:	429a      	cmp	r2, r3
 801bb94:	d804      	bhi.n	801bba0 <create_chain+0x106>
 801bb96:	693b      	ldr	r3, [r7, #16]
 801bb98:	699b      	ldr	r3, [r3, #24]
 801bb9a:	1e5a      	subs	r2, r3, #1
 801bb9c:	693b      	ldr	r3, [r7, #16]
 801bb9e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801bba0:	693b      	ldr	r3, [r7, #16]
 801bba2:	791b      	ldrb	r3, [r3, #4]
 801bba4:	f043 0301 	orr.w	r3, r3, #1
 801bba8:	b2da      	uxtb	r2, r3
 801bbaa:	693b      	ldr	r3, [r7, #16]
 801bbac:	711a      	strb	r2, [r3, #4]
 801bbae:	e007      	b.n	801bbc0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801bbb0:	7dfb      	ldrb	r3, [r7, #23]
 801bbb2:	2b01      	cmp	r3, #1
 801bbb4:	d102      	bne.n	801bbbc <create_chain+0x122>
 801bbb6:	f04f 33ff 	mov.w	r3, #4294967295
 801bbba:	e000      	b.n	801bbbe <create_chain+0x124>
 801bbbc:	2301      	movs	r3, #1
 801bbbe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801bbc0:	69fb      	ldr	r3, [r7, #28]
}
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	3720      	adds	r7, #32
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	bd80      	pop	{r7, pc}

0801bbca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801bbca:	b480      	push	{r7}
 801bbcc:	b087      	sub	sp, #28
 801bbce:	af00      	add	r7, sp, #0
 801bbd0:	6078      	str	r0, [r7, #4]
 801bbd2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	681b      	ldr	r3, [r3, #0]
 801bbd8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbde:	3304      	adds	r3, #4
 801bbe0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	899b      	ldrh	r3, [r3, #12]
 801bbe6:	461a      	mov	r2, r3
 801bbe8:	683b      	ldr	r3, [r7, #0]
 801bbea:	fbb3 f3f2 	udiv	r3, r3, r2
 801bbee:	68fa      	ldr	r2, [r7, #12]
 801bbf0:	8952      	ldrh	r2, [r2, #10]
 801bbf2:	fbb3 f3f2 	udiv	r3, r3, r2
 801bbf6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bbf8:	693b      	ldr	r3, [r7, #16]
 801bbfa:	1d1a      	adds	r2, r3, #4
 801bbfc:	613a      	str	r2, [r7, #16]
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801bc02:	68bb      	ldr	r3, [r7, #8]
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d101      	bne.n	801bc0c <clmt_clust+0x42>
 801bc08:	2300      	movs	r3, #0
 801bc0a:	e010      	b.n	801bc2e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801bc0c:	697a      	ldr	r2, [r7, #20]
 801bc0e:	68bb      	ldr	r3, [r7, #8]
 801bc10:	429a      	cmp	r2, r3
 801bc12:	d307      	bcc.n	801bc24 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801bc14:	697a      	ldr	r2, [r7, #20]
 801bc16:	68bb      	ldr	r3, [r7, #8]
 801bc18:	1ad3      	subs	r3, r2, r3
 801bc1a:	617b      	str	r3, [r7, #20]
 801bc1c:	693b      	ldr	r3, [r7, #16]
 801bc1e:	3304      	adds	r3, #4
 801bc20:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801bc22:	e7e9      	b.n	801bbf8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801bc24:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801bc26:	693b      	ldr	r3, [r7, #16]
 801bc28:	681a      	ldr	r2, [r3, #0]
 801bc2a:	697b      	ldr	r3, [r7, #20]
 801bc2c:	4413      	add	r3, r2
}
 801bc2e:	4618      	mov	r0, r3
 801bc30:	371c      	adds	r7, #28
 801bc32:	46bd      	mov	sp, r7
 801bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc38:	4770      	bx	lr

0801bc3a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801bc3a:	b580      	push	{r7, lr}
 801bc3c:	b086      	sub	sp, #24
 801bc3e:	af00      	add	r7, sp, #0
 801bc40:	6078      	str	r0, [r7, #4]
 801bc42:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	681b      	ldr	r3, [r3, #0]
 801bc48:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801bc4a:	683b      	ldr	r3, [r7, #0]
 801bc4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bc50:	d204      	bcs.n	801bc5c <dir_sdi+0x22>
 801bc52:	683b      	ldr	r3, [r7, #0]
 801bc54:	f003 031f 	and.w	r3, r3, #31
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d001      	beq.n	801bc60 <dir_sdi+0x26>
		return FR_INT_ERR;
 801bc5c:	2302      	movs	r3, #2
 801bc5e:	e071      	b.n	801bd44 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	683a      	ldr	r2, [r7, #0]
 801bc64:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	689b      	ldr	r3, [r3, #8]
 801bc6a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801bc6c:	697b      	ldr	r3, [r7, #20]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d106      	bne.n	801bc80 <dir_sdi+0x46>
 801bc72:	693b      	ldr	r3, [r7, #16]
 801bc74:	781b      	ldrb	r3, [r3, #0]
 801bc76:	2b02      	cmp	r3, #2
 801bc78:	d902      	bls.n	801bc80 <dir_sdi+0x46>
		clst = fs->dirbase;
 801bc7a:	693b      	ldr	r3, [r7, #16]
 801bc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bc7e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801bc80:	697b      	ldr	r3, [r7, #20]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d10c      	bne.n	801bca0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801bc86:	683b      	ldr	r3, [r7, #0]
 801bc88:	095b      	lsrs	r3, r3, #5
 801bc8a:	693a      	ldr	r2, [r7, #16]
 801bc8c:	8912      	ldrh	r2, [r2, #8]
 801bc8e:	4293      	cmp	r3, r2
 801bc90:	d301      	bcc.n	801bc96 <dir_sdi+0x5c>
 801bc92:	2302      	movs	r3, #2
 801bc94:	e056      	b.n	801bd44 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801bc96:	693b      	ldr	r3, [r7, #16]
 801bc98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	61da      	str	r2, [r3, #28]
 801bc9e:	e02d      	b.n	801bcfc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801bca0:	693b      	ldr	r3, [r7, #16]
 801bca2:	895b      	ldrh	r3, [r3, #10]
 801bca4:	461a      	mov	r2, r3
 801bca6:	693b      	ldr	r3, [r7, #16]
 801bca8:	899b      	ldrh	r3, [r3, #12]
 801bcaa:	fb02 f303 	mul.w	r3, r2, r3
 801bcae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bcb0:	e019      	b.n	801bce6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	6979      	ldr	r1, [r7, #20]
 801bcb6:	4618      	mov	r0, r3
 801bcb8:	f7ff fc9d 	bl	801b5f6 <get_fat>
 801bcbc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801bcbe:	697b      	ldr	r3, [r7, #20]
 801bcc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bcc4:	d101      	bne.n	801bcca <dir_sdi+0x90>
 801bcc6:	2301      	movs	r3, #1
 801bcc8:	e03c      	b.n	801bd44 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801bcca:	697b      	ldr	r3, [r7, #20]
 801bccc:	2b01      	cmp	r3, #1
 801bcce:	d904      	bls.n	801bcda <dir_sdi+0xa0>
 801bcd0:	693b      	ldr	r3, [r7, #16]
 801bcd2:	69db      	ldr	r3, [r3, #28]
 801bcd4:	697a      	ldr	r2, [r7, #20]
 801bcd6:	429a      	cmp	r2, r3
 801bcd8:	d301      	bcc.n	801bcde <dir_sdi+0xa4>
 801bcda:	2302      	movs	r3, #2
 801bcdc:	e032      	b.n	801bd44 <dir_sdi+0x10a>
			ofs -= csz;
 801bcde:	683a      	ldr	r2, [r7, #0]
 801bce0:	68fb      	ldr	r3, [r7, #12]
 801bce2:	1ad3      	subs	r3, r2, r3
 801bce4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801bce6:	683a      	ldr	r2, [r7, #0]
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	429a      	cmp	r2, r3
 801bcec:	d2e1      	bcs.n	801bcb2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801bcee:	6979      	ldr	r1, [r7, #20]
 801bcf0:	6938      	ldr	r0, [r7, #16]
 801bcf2:	f7ff fc61 	bl	801b5b8 <clust2sect>
 801bcf6:	4602      	mov	r2, r0
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	697a      	ldr	r2, [r7, #20]
 801bd00:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	69db      	ldr	r3, [r3, #28]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d101      	bne.n	801bd0e <dir_sdi+0xd4>
 801bd0a:	2302      	movs	r3, #2
 801bd0c:	e01a      	b.n	801bd44 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	69da      	ldr	r2, [r3, #28]
 801bd12:	693b      	ldr	r3, [r7, #16]
 801bd14:	899b      	ldrh	r3, [r3, #12]
 801bd16:	4619      	mov	r1, r3
 801bd18:	683b      	ldr	r3, [r7, #0]
 801bd1a:	fbb3 f3f1 	udiv	r3, r3, r1
 801bd1e:	441a      	add	r2, r3
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801bd24:	693b      	ldr	r3, [r7, #16]
 801bd26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bd2a:	693b      	ldr	r3, [r7, #16]
 801bd2c:	899b      	ldrh	r3, [r3, #12]
 801bd2e:	461a      	mov	r2, r3
 801bd30:	683b      	ldr	r3, [r7, #0]
 801bd32:	fbb3 f0f2 	udiv	r0, r3, r2
 801bd36:	fb00 f202 	mul.w	r2, r0, r2
 801bd3a:	1a9b      	subs	r3, r3, r2
 801bd3c:	18ca      	adds	r2, r1, r3
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801bd42:	2300      	movs	r3, #0
}
 801bd44:	4618      	mov	r0, r3
 801bd46:	3718      	adds	r7, #24
 801bd48:	46bd      	mov	sp, r7
 801bd4a:	bd80      	pop	{r7, pc}

0801bd4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b086      	sub	sp, #24
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	6078      	str	r0, [r7, #4]
 801bd54:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	695b      	ldr	r3, [r3, #20]
 801bd60:	3320      	adds	r3, #32
 801bd62:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	69db      	ldr	r3, [r3, #28]
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d003      	beq.n	801bd74 <dir_next+0x28>
 801bd6c:	68bb      	ldr	r3, [r7, #8]
 801bd6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801bd72:	d301      	bcc.n	801bd78 <dir_next+0x2c>
 801bd74:	2304      	movs	r3, #4
 801bd76:	e0bb      	b.n	801bef0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	899b      	ldrh	r3, [r3, #12]
 801bd7c:	461a      	mov	r2, r3
 801bd7e:	68bb      	ldr	r3, [r7, #8]
 801bd80:	fbb3 f1f2 	udiv	r1, r3, r2
 801bd84:	fb01 f202 	mul.w	r2, r1, r2
 801bd88:	1a9b      	subs	r3, r3, r2
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	f040 809d 	bne.w	801beca <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	69db      	ldr	r3, [r3, #28]
 801bd94:	1c5a      	adds	r2, r3, #1
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	699b      	ldr	r3, [r3, #24]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d10b      	bne.n	801bdba <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801bda2:	68bb      	ldr	r3, [r7, #8]
 801bda4:	095b      	lsrs	r3, r3, #5
 801bda6:	68fa      	ldr	r2, [r7, #12]
 801bda8:	8912      	ldrh	r2, [r2, #8]
 801bdaa:	4293      	cmp	r3, r2
 801bdac:	f0c0 808d 	bcc.w	801beca <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	2200      	movs	r2, #0
 801bdb4:	61da      	str	r2, [r3, #28]
 801bdb6:	2304      	movs	r3, #4
 801bdb8:	e09a      	b.n	801bef0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	899b      	ldrh	r3, [r3, #12]
 801bdbe:	461a      	mov	r2, r3
 801bdc0:	68bb      	ldr	r3, [r7, #8]
 801bdc2:	fbb3 f3f2 	udiv	r3, r3, r2
 801bdc6:	68fa      	ldr	r2, [r7, #12]
 801bdc8:	8952      	ldrh	r2, [r2, #10]
 801bdca:	3a01      	subs	r2, #1
 801bdcc:	4013      	ands	r3, r2
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d17b      	bne.n	801beca <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801bdd2:	687a      	ldr	r2, [r7, #4]
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	699b      	ldr	r3, [r3, #24]
 801bdd8:	4619      	mov	r1, r3
 801bdda:	4610      	mov	r0, r2
 801bddc:	f7ff fc0b 	bl	801b5f6 <get_fat>
 801bde0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801bde2:	697b      	ldr	r3, [r7, #20]
 801bde4:	2b01      	cmp	r3, #1
 801bde6:	d801      	bhi.n	801bdec <dir_next+0xa0>
 801bde8:	2302      	movs	r3, #2
 801bdea:	e081      	b.n	801bef0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801bdec:	697b      	ldr	r3, [r7, #20]
 801bdee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bdf2:	d101      	bne.n	801bdf8 <dir_next+0xac>
 801bdf4:	2301      	movs	r3, #1
 801bdf6:	e07b      	b.n	801bef0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	69db      	ldr	r3, [r3, #28]
 801bdfc:	697a      	ldr	r2, [r7, #20]
 801bdfe:	429a      	cmp	r2, r3
 801be00:	d359      	bcc.n	801beb6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801be02:	683b      	ldr	r3, [r7, #0]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d104      	bne.n	801be12 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	2200      	movs	r2, #0
 801be0c:	61da      	str	r2, [r3, #28]
 801be0e:	2304      	movs	r3, #4
 801be10:	e06e      	b.n	801bef0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801be12:	687a      	ldr	r2, [r7, #4]
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	699b      	ldr	r3, [r3, #24]
 801be18:	4619      	mov	r1, r3
 801be1a:	4610      	mov	r0, r2
 801be1c:	f7ff fe3d 	bl	801ba9a <create_chain>
 801be20:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801be22:	697b      	ldr	r3, [r7, #20]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d101      	bne.n	801be2c <dir_next+0xe0>
 801be28:	2307      	movs	r3, #7
 801be2a:	e061      	b.n	801bef0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801be2c:	697b      	ldr	r3, [r7, #20]
 801be2e:	2b01      	cmp	r3, #1
 801be30:	d101      	bne.n	801be36 <dir_next+0xea>
 801be32:	2302      	movs	r3, #2
 801be34:	e05c      	b.n	801bef0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801be36:	697b      	ldr	r3, [r7, #20]
 801be38:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be3c:	d101      	bne.n	801be42 <dir_next+0xf6>
 801be3e:	2301      	movs	r3, #1
 801be40:	e056      	b.n	801bef0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801be42:	68f8      	ldr	r0, [r7, #12]
 801be44:	f7ff fad6 	bl	801b3f4 <sync_window>
 801be48:	4603      	mov	r3, r0
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d001      	beq.n	801be52 <dir_next+0x106>
 801be4e:	2301      	movs	r3, #1
 801be50:	e04e      	b.n	801bef0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801be52:	68fb      	ldr	r3, [r7, #12]
 801be54:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	899b      	ldrh	r3, [r3, #12]
 801be5c:	461a      	mov	r2, r3
 801be5e:	2100      	movs	r1, #0
 801be60:	f7ff f8ff 	bl	801b062 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801be64:	2300      	movs	r3, #0
 801be66:	613b      	str	r3, [r7, #16]
 801be68:	6979      	ldr	r1, [r7, #20]
 801be6a:	68f8      	ldr	r0, [r7, #12]
 801be6c:	f7ff fba4 	bl	801b5b8 <clust2sect>
 801be70:	4602      	mov	r2, r0
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	635a      	str	r2, [r3, #52]	@ 0x34
 801be76:	e012      	b.n	801be9e <dir_next+0x152>
						fs->wflag = 1;
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	2201      	movs	r2, #1
 801be7c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801be7e:	68f8      	ldr	r0, [r7, #12]
 801be80:	f7ff fab8 	bl	801b3f4 <sync_window>
 801be84:	4603      	mov	r3, r0
 801be86:	2b00      	cmp	r3, #0
 801be88:	d001      	beq.n	801be8e <dir_next+0x142>
 801be8a:	2301      	movs	r3, #1
 801be8c:	e030      	b.n	801bef0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801be8e:	693b      	ldr	r3, [r7, #16]
 801be90:	3301      	adds	r3, #1
 801be92:	613b      	str	r3, [r7, #16]
 801be94:	68fb      	ldr	r3, [r7, #12]
 801be96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801be98:	1c5a      	adds	r2, r3, #1
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	635a      	str	r2, [r3, #52]	@ 0x34
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	895b      	ldrh	r3, [r3, #10]
 801bea2:	461a      	mov	r2, r3
 801bea4:	693b      	ldr	r3, [r7, #16]
 801bea6:	4293      	cmp	r3, r2
 801bea8:	d3e6      	bcc.n	801be78 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801beaa:	68fb      	ldr	r3, [r7, #12]
 801beac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801beae:	693b      	ldr	r3, [r7, #16]
 801beb0:	1ad2      	subs	r2, r2, r3
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	697a      	ldr	r2, [r7, #20]
 801beba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801bebc:	6979      	ldr	r1, [r7, #20]
 801bebe:	68f8      	ldr	r0, [r7, #12]
 801bec0:	f7ff fb7a 	bl	801b5b8 <clust2sect>
 801bec4:	4602      	mov	r2, r0
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	68ba      	ldr	r2, [r7, #8]
 801bece:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801bed0:	68fb      	ldr	r3, [r7, #12]
 801bed2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	899b      	ldrh	r3, [r3, #12]
 801beda:	461a      	mov	r2, r3
 801bedc:	68bb      	ldr	r3, [r7, #8]
 801bede:	fbb3 f0f2 	udiv	r0, r3, r2
 801bee2:	fb00 f202 	mul.w	r2, r0, r2
 801bee6:	1a9b      	subs	r3, r3, r2
 801bee8:	18ca      	adds	r2, r1, r3
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801beee:	2300      	movs	r3, #0
}
 801bef0:	4618      	mov	r0, r3
 801bef2:	3718      	adds	r7, #24
 801bef4:	46bd      	mov	sp, r7
 801bef6:	bd80      	pop	{r7, pc}

0801bef8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801bef8:	b580      	push	{r7, lr}
 801befa:	b086      	sub	sp, #24
 801befc:	af00      	add	r7, sp, #0
 801befe:	6078      	str	r0, [r7, #4]
 801bf00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	681b      	ldr	r3, [r3, #0]
 801bf06:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801bf08:	2100      	movs	r1, #0
 801bf0a:	6878      	ldr	r0, [r7, #4]
 801bf0c:	f7ff fe95 	bl	801bc3a <dir_sdi>
 801bf10:	4603      	mov	r3, r0
 801bf12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801bf14:	7dfb      	ldrb	r3, [r7, #23]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	d12b      	bne.n	801bf72 <dir_alloc+0x7a>
		n = 0;
 801bf1a:	2300      	movs	r3, #0
 801bf1c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	69db      	ldr	r3, [r3, #28]
 801bf22:	4619      	mov	r1, r3
 801bf24:	68f8      	ldr	r0, [r7, #12]
 801bf26:	f7ff faa9 	bl	801b47c <move_window>
 801bf2a:	4603      	mov	r3, r0
 801bf2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bf2e:	7dfb      	ldrb	r3, [r7, #23]
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d11d      	bne.n	801bf70 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	6a1b      	ldr	r3, [r3, #32]
 801bf38:	781b      	ldrb	r3, [r3, #0]
 801bf3a:	2be5      	cmp	r3, #229	@ 0xe5
 801bf3c:	d004      	beq.n	801bf48 <dir_alloc+0x50>
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	6a1b      	ldr	r3, [r3, #32]
 801bf42:	781b      	ldrb	r3, [r3, #0]
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	d107      	bne.n	801bf58 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801bf48:	693b      	ldr	r3, [r7, #16]
 801bf4a:	3301      	adds	r3, #1
 801bf4c:	613b      	str	r3, [r7, #16]
 801bf4e:	693a      	ldr	r2, [r7, #16]
 801bf50:	683b      	ldr	r3, [r7, #0]
 801bf52:	429a      	cmp	r2, r3
 801bf54:	d102      	bne.n	801bf5c <dir_alloc+0x64>
 801bf56:	e00c      	b.n	801bf72 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801bf58:	2300      	movs	r3, #0
 801bf5a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801bf5c:	2101      	movs	r1, #1
 801bf5e:	6878      	ldr	r0, [r7, #4]
 801bf60:	f7ff fef4 	bl	801bd4c <dir_next>
 801bf64:	4603      	mov	r3, r0
 801bf66:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801bf68:	7dfb      	ldrb	r3, [r7, #23]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d0d7      	beq.n	801bf1e <dir_alloc+0x26>
 801bf6e:	e000      	b.n	801bf72 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801bf70:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801bf72:	7dfb      	ldrb	r3, [r7, #23]
 801bf74:	2b04      	cmp	r3, #4
 801bf76:	d101      	bne.n	801bf7c <dir_alloc+0x84>
 801bf78:	2307      	movs	r3, #7
 801bf7a:	75fb      	strb	r3, [r7, #23]
	return res;
 801bf7c:	7dfb      	ldrb	r3, [r7, #23]
}
 801bf7e:	4618      	mov	r0, r3
 801bf80:	3718      	adds	r7, #24
 801bf82:	46bd      	mov	sp, r7
 801bf84:	bd80      	pop	{r7, pc}

0801bf86 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801bf86:	b580      	push	{r7, lr}
 801bf88:	b084      	sub	sp, #16
 801bf8a:	af00      	add	r7, sp, #0
 801bf8c:	6078      	str	r0, [r7, #4]
 801bf8e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801bf90:	683b      	ldr	r3, [r7, #0]
 801bf92:	331a      	adds	r3, #26
 801bf94:	4618      	mov	r0, r3
 801bf96:	f7fe ffc1 	bl	801af1c <ld_word>
 801bf9a:	4603      	mov	r3, r0
 801bf9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	781b      	ldrb	r3, [r3, #0]
 801bfa2:	2b03      	cmp	r3, #3
 801bfa4:	d109      	bne.n	801bfba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801bfa6:	683b      	ldr	r3, [r7, #0]
 801bfa8:	3314      	adds	r3, #20
 801bfaa:	4618      	mov	r0, r3
 801bfac:	f7fe ffb6 	bl	801af1c <ld_word>
 801bfb0:	4603      	mov	r3, r0
 801bfb2:	041b      	lsls	r3, r3, #16
 801bfb4:	68fa      	ldr	r2, [r7, #12]
 801bfb6:	4313      	orrs	r3, r2
 801bfb8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801bfba:	68fb      	ldr	r3, [r7, #12]
}
 801bfbc:	4618      	mov	r0, r3
 801bfbe:	3710      	adds	r7, #16
 801bfc0:	46bd      	mov	sp, r7
 801bfc2:	bd80      	pop	{r7, pc}

0801bfc4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801bfc4:	b580      	push	{r7, lr}
 801bfc6:	b084      	sub	sp, #16
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	60f8      	str	r0, [r7, #12]
 801bfcc:	60b9      	str	r1, [r7, #8]
 801bfce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801bfd0:	68bb      	ldr	r3, [r7, #8]
 801bfd2:	331a      	adds	r3, #26
 801bfd4:	687a      	ldr	r2, [r7, #4]
 801bfd6:	b292      	uxth	r2, r2
 801bfd8:	4611      	mov	r1, r2
 801bfda:	4618      	mov	r0, r3
 801bfdc:	f7fe ffd9 	bl	801af92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801bfe0:	68fb      	ldr	r3, [r7, #12]
 801bfe2:	781b      	ldrb	r3, [r3, #0]
 801bfe4:	2b03      	cmp	r3, #3
 801bfe6:	d109      	bne.n	801bffc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801bfe8:	68bb      	ldr	r3, [r7, #8]
 801bfea:	f103 0214 	add.w	r2, r3, #20
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	0c1b      	lsrs	r3, r3, #16
 801bff2:	b29b      	uxth	r3, r3
 801bff4:	4619      	mov	r1, r3
 801bff6:	4610      	mov	r0, r2
 801bff8:	f7fe ffcb 	bl	801af92 <st_word>
	}
}
 801bffc:	bf00      	nop
 801bffe:	3710      	adds	r7, #16
 801c000:	46bd      	mov	sp, r7
 801c002:	bd80      	pop	{r7, pc}

0801c004 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801c004:	b590      	push	{r4, r7, lr}
 801c006:	b087      	sub	sp, #28
 801c008:	af00      	add	r7, sp, #0
 801c00a:	6078      	str	r0, [r7, #4]
 801c00c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801c00e:	683b      	ldr	r3, [r7, #0]
 801c010:	331a      	adds	r3, #26
 801c012:	4618      	mov	r0, r3
 801c014:	f7fe ff82 	bl	801af1c <ld_word>
 801c018:	4603      	mov	r3, r0
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d001      	beq.n	801c022 <cmp_lfn+0x1e>
 801c01e:	2300      	movs	r3, #0
 801c020:	e059      	b.n	801c0d6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801c022:	683b      	ldr	r3, [r7, #0]
 801c024:	781b      	ldrb	r3, [r3, #0]
 801c026:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c02a:	1e5a      	subs	r2, r3, #1
 801c02c:	4613      	mov	r3, r2
 801c02e:	005b      	lsls	r3, r3, #1
 801c030:	4413      	add	r3, r2
 801c032:	009b      	lsls	r3, r3, #2
 801c034:	4413      	add	r3, r2
 801c036:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c038:	2301      	movs	r3, #1
 801c03a:	81fb      	strh	r3, [r7, #14]
 801c03c:	2300      	movs	r3, #0
 801c03e:	613b      	str	r3, [r7, #16]
 801c040:	e033      	b.n	801c0aa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c042:	4a27      	ldr	r2, [pc, #156]	@ (801c0e0 <cmp_lfn+0xdc>)
 801c044:	693b      	ldr	r3, [r7, #16]
 801c046:	4413      	add	r3, r2
 801c048:	781b      	ldrb	r3, [r3, #0]
 801c04a:	461a      	mov	r2, r3
 801c04c:	683b      	ldr	r3, [r7, #0]
 801c04e:	4413      	add	r3, r2
 801c050:	4618      	mov	r0, r3
 801c052:	f7fe ff63 	bl	801af1c <ld_word>
 801c056:	4603      	mov	r3, r0
 801c058:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c05a:	89fb      	ldrh	r3, [r7, #14]
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d01a      	beq.n	801c096 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801c060:	697b      	ldr	r3, [r7, #20]
 801c062:	2bfe      	cmp	r3, #254	@ 0xfe
 801c064:	d812      	bhi.n	801c08c <cmp_lfn+0x88>
 801c066:	89bb      	ldrh	r3, [r7, #12]
 801c068:	4618      	mov	r0, r3
 801c06a:	f001 ff71 	bl	801df50 <ff_wtoupper>
 801c06e:	4603      	mov	r3, r0
 801c070:	461c      	mov	r4, r3
 801c072:	697b      	ldr	r3, [r7, #20]
 801c074:	1c5a      	adds	r2, r3, #1
 801c076:	617a      	str	r2, [r7, #20]
 801c078:	005b      	lsls	r3, r3, #1
 801c07a:	687a      	ldr	r2, [r7, #4]
 801c07c:	4413      	add	r3, r2
 801c07e:	881b      	ldrh	r3, [r3, #0]
 801c080:	4618      	mov	r0, r3
 801c082:	f001 ff65 	bl	801df50 <ff_wtoupper>
 801c086:	4603      	mov	r3, r0
 801c088:	429c      	cmp	r4, r3
 801c08a:	d001      	beq.n	801c090 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801c08c:	2300      	movs	r3, #0
 801c08e:	e022      	b.n	801c0d6 <cmp_lfn+0xd2>
			}
			wc = uc;
 801c090:	89bb      	ldrh	r3, [r7, #12]
 801c092:	81fb      	strh	r3, [r7, #14]
 801c094:	e006      	b.n	801c0a4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c096:	89bb      	ldrh	r3, [r7, #12]
 801c098:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c09c:	4293      	cmp	r3, r2
 801c09e:	d001      	beq.n	801c0a4 <cmp_lfn+0xa0>
 801c0a0:	2300      	movs	r3, #0
 801c0a2:	e018      	b.n	801c0d6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c0a4:	693b      	ldr	r3, [r7, #16]
 801c0a6:	3301      	adds	r3, #1
 801c0a8:	613b      	str	r3, [r7, #16]
 801c0aa:	693b      	ldr	r3, [r7, #16]
 801c0ac:	2b0c      	cmp	r3, #12
 801c0ae:	d9c8      	bls.n	801c042 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801c0b0:	683b      	ldr	r3, [r7, #0]
 801c0b2:	781b      	ldrb	r3, [r3, #0]
 801c0b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d00b      	beq.n	801c0d4 <cmp_lfn+0xd0>
 801c0bc:	89fb      	ldrh	r3, [r7, #14]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d008      	beq.n	801c0d4 <cmp_lfn+0xd0>
 801c0c2:	697b      	ldr	r3, [r7, #20]
 801c0c4:	005b      	lsls	r3, r3, #1
 801c0c6:	687a      	ldr	r2, [r7, #4]
 801c0c8:	4413      	add	r3, r2
 801c0ca:	881b      	ldrh	r3, [r3, #0]
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d001      	beq.n	801c0d4 <cmp_lfn+0xd0>
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	e000      	b.n	801c0d6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801c0d4:	2301      	movs	r3, #1
}
 801c0d6:	4618      	mov	r0, r3
 801c0d8:	371c      	adds	r7, #28
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	bd90      	pop	{r4, r7, pc}
 801c0de:	bf00      	nop
 801c0e0:	0801ebec 	.word	0x0801ebec

0801c0e4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801c0e4:	b580      	push	{r7, lr}
 801c0e6:	b086      	sub	sp, #24
 801c0e8:	af00      	add	r7, sp, #0
 801c0ea:	6078      	str	r0, [r7, #4]
 801c0ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801c0ee:	683b      	ldr	r3, [r7, #0]
 801c0f0:	331a      	adds	r3, #26
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	f7fe ff12 	bl	801af1c <ld_word>
 801c0f8:	4603      	mov	r3, r0
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d001      	beq.n	801c102 <pick_lfn+0x1e>
 801c0fe:	2300      	movs	r3, #0
 801c100:	e04d      	b.n	801c19e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801c102:	683b      	ldr	r3, [r7, #0]
 801c104:	781b      	ldrb	r3, [r3, #0]
 801c106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c10a:	1e5a      	subs	r2, r3, #1
 801c10c:	4613      	mov	r3, r2
 801c10e:	005b      	lsls	r3, r3, #1
 801c110:	4413      	add	r3, r2
 801c112:	009b      	lsls	r3, r3, #2
 801c114:	4413      	add	r3, r2
 801c116:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c118:	2301      	movs	r3, #1
 801c11a:	81fb      	strh	r3, [r7, #14]
 801c11c:	2300      	movs	r3, #0
 801c11e:	613b      	str	r3, [r7, #16]
 801c120:	e028      	b.n	801c174 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801c122:	4a21      	ldr	r2, [pc, #132]	@ (801c1a8 <pick_lfn+0xc4>)
 801c124:	693b      	ldr	r3, [r7, #16]
 801c126:	4413      	add	r3, r2
 801c128:	781b      	ldrb	r3, [r3, #0]
 801c12a:	461a      	mov	r2, r3
 801c12c:	683b      	ldr	r3, [r7, #0]
 801c12e:	4413      	add	r3, r2
 801c130:	4618      	mov	r0, r3
 801c132:	f7fe fef3 	bl	801af1c <ld_word>
 801c136:	4603      	mov	r3, r0
 801c138:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801c13a:	89fb      	ldrh	r3, [r7, #14]
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d00f      	beq.n	801c160 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801c140:	697b      	ldr	r3, [r7, #20]
 801c142:	2bfe      	cmp	r3, #254	@ 0xfe
 801c144:	d901      	bls.n	801c14a <pick_lfn+0x66>
 801c146:	2300      	movs	r3, #0
 801c148:	e029      	b.n	801c19e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801c14a:	89bb      	ldrh	r3, [r7, #12]
 801c14c:	81fb      	strh	r3, [r7, #14]
 801c14e:	697b      	ldr	r3, [r7, #20]
 801c150:	1c5a      	adds	r2, r3, #1
 801c152:	617a      	str	r2, [r7, #20]
 801c154:	005b      	lsls	r3, r3, #1
 801c156:	687a      	ldr	r2, [r7, #4]
 801c158:	4413      	add	r3, r2
 801c15a:	89fa      	ldrh	r2, [r7, #14]
 801c15c:	801a      	strh	r2, [r3, #0]
 801c15e:	e006      	b.n	801c16e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801c160:	89bb      	ldrh	r3, [r7, #12]
 801c162:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c166:	4293      	cmp	r3, r2
 801c168:	d001      	beq.n	801c16e <pick_lfn+0x8a>
 801c16a:	2300      	movs	r3, #0
 801c16c:	e017      	b.n	801c19e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801c16e:	693b      	ldr	r3, [r7, #16]
 801c170:	3301      	adds	r3, #1
 801c172:	613b      	str	r3, [r7, #16]
 801c174:	693b      	ldr	r3, [r7, #16]
 801c176:	2b0c      	cmp	r3, #12
 801c178:	d9d3      	bls.n	801c122 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801c17a:	683b      	ldr	r3, [r7, #0]
 801c17c:	781b      	ldrb	r3, [r3, #0]
 801c17e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c182:	2b00      	cmp	r3, #0
 801c184:	d00a      	beq.n	801c19c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801c186:	697b      	ldr	r3, [r7, #20]
 801c188:	2bfe      	cmp	r3, #254	@ 0xfe
 801c18a:	d901      	bls.n	801c190 <pick_lfn+0xac>
 801c18c:	2300      	movs	r3, #0
 801c18e:	e006      	b.n	801c19e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801c190:	697b      	ldr	r3, [r7, #20]
 801c192:	005b      	lsls	r3, r3, #1
 801c194:	687a      	ldr	r2, [r7, #4]
 801c196:	4413      	add	r3, r2
 801c198:	2200      	movs	r2, #0
 801c19a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801c19c:	2301      	movs	r3, #1
}
 801c19e:	4618      	mov	r0, r3
 801c1a0:	3718      	adds	r7, #24
 801c1a2:	46bd      	mov	sp, r7
 801c1a4:	bd80      	pop	{r7, pc}
 801c1a6:	bf00      	nop
 801c1a8:	0801ebec 	.word	0x0801ebec

0801c1ac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801c1ac:	b580      	push	{r7, lr}
 801c1ae:	b088      	sub	sp, #32
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	60f8      	str	r0, [r7, #12]
 801c1b4:	60b9      	str	r1, [r7, #8]
 801c1b6:	4611      	mov	r1, r2
 801c1b8:	461a      	mov	r2, r3
 801c1ba:	460b      	mov	r3, r1
 801c1bc:	71fb      	strb	r3, [r7, #7]
 801c1be:	4613      	mov	r3, r2
 801c1c0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801c1c2:	68bb      	ldr	r3, [r7, #8]
 801c1c4:	330d      	adds	r3, #13
 801c1c6:	79ba      	ldrb	r2, [r7, #6]
 801c1c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801c1ca:	68bb      	ldr	r3, [r7, #8]
 801c1cc:	330b      	adds	r3, #11
 801c1ce:	220f      	movs	r2, #15
 801c1d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801c1d2:	68bb      	ldr	r3, [r7, #8]
 801c1d4:	330c      	adds	r3, #12
 801c1d6:	2200      	movs	r2, #0
 801c1d8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801c1da:	68bb      	ldr	r3, [r7, #8]
 801c1dc:	331a      	adds	r3, #26
 801c1de:	2100      	movs	r1, #0
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	f7fe fed6 	bl	801af92 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801c1e6:	79fb      	ldrb	r3, [r7, #7]
 801c1e8:	1e5a      	subs	r2, r3, #1
 801c1ea:	4613      	mov	r3, r2
 801c1ec:	005b      	lsls	r3, r3, #1
 801c1ee:	4413      	add	r3, r2
 801c1f0:	009b      	lsls	r3, r3, #2
 801c1f2:	4413      	add	r3, r2
 801c1f4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	82fb      	strh	r3, [r7, #22]
 801c1fa:	2300      	movs	r3, #0
 801c1fc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801c1fe:	8afb      	ldrh	r3, [r7, #22]
 801c200:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c204:	4293      	cmp	r3, r2
 801c206:	d007      	beq.n	801c218 <put_lfn+0x6c>
 801c208:	69fb      	ldr	r3, [r7, #28]
 801c20a:	1c5a      	adds	r2, r3, #1
 801c20c:	61fa      	str	r2, [r7, #28]
 801c20e:	005b      	lsls	r3, r3, #1
 801c210:	68fa      	ldr	r2, [r7, #12]
 801c212:	4413      	add	r3, r2
 801c214:	881b      	ldrh	r3, [r3, #0]
 801c216:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801c218:	4a17      	ldr	r2, [pc, #92]	@ (801c278 <put_lfn+0xcc>)
 801c21a:	69bb      	ldr	r3, [r7, #24]
 801c21c:	4413      	add	r3, r2
 801c21e:	781b      	ldrb	r3, [r3, #0]
 801c220:	461a      	mov	r2, r3
 801c222:	68bb      	ldr	r3, [r7, #8]
 801c224:	4413      	add	r3, r2
 801c226:	8afa      	ldrh	r2, [r7, #22]
 801c228:	4611      	mov	r1, r2
 801c22a:	4618      	mov	r0, r3
 801c22c:	f7fe feb1 	bl	801af92 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801c230:	8afb      	ldrh	r3, [r7, #22]
 801c232:	2b00      	cmp	r3, #0
 801c234:	d102      	bne.n	801c23c <put_lfn+0x90>
 801c236:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c23a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801c23c:	69bb      	ldr	r3, [r7, #24]
 801c23e:	3301      	adds	r3, #1
 801c240:	61bb      	str	r3, [r7, #24]
 801c242:	69bb      	ldr	r3, [r7, #24]
 801c244:	2b0c      	cmp	r3, #12
 801c246:	d9da      	bls.n	801c1fe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801c248:	8afb      	ldrh	r3, [r7, #22]
 801c24a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c24e:	4293      	cmp	r3, r2
 801c250:	d006      	beq.n	801c260 <put_lfn+0xb4>
 801c252:	69fb      	ldr	r3, [r7, #28]
 801c254:	005b      	lsls	r3, r3, #1
 801c256:	68fa      	ldr	r2, [r7, #12]
 801c258:	4413      	add	r3, r2
 801c25a:	881b      	ldrh	r3, [r3, #0]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	d103      	bne.n	801c268 <put_lfn+0xbc>
 801c260:	79fb      	ldrb	r3, [r7, #7]
 801c262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c266:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801c268:	68bb      	ldr	r3, [r7, #8]
 801c26a:	79fa      	ldrb	r2, [r7, #7]
 801c26c:	701a      	strb	r2, [r3, #0]
}
 801c26e:	bf00      	nop
 801c270:	3720      	adds	r7, #32
 801c272:	46bd      	mov	sp, r7
 801c274:	bd80      	pop	{r7, pc}
 801c276:	bf00      	nop
 801c278:	0801ebec 	.word	0x0801ebec

0801c27c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801c27c:	b580      	push	{r7, lr}
 801c27e:	b08c      	sub	sp, #48	@ 0x30
 801c280:	af00      	add	r7, sp, #0
 801c282:	60f8      	str	r0, [r7, #12]
 801c284:	60b9      	str	r1, [r7, #8]
 801c286:	607a      	str	r2, [r7, #4]
 801c288:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801c28a:	220b      	movs	r2, #11
 801c28c:	68b9      	ldr	r1, [r7, #8]
 801c28e:	68f8      	ldr	r0, [r7, #12]
 801c290:	f7fe fec6 	bl	801b020 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801c294:	683b      	ldr	r3, [r7, #0]
 801c296:	2b05      	cmp	r3, #5
 801c298:	d929      	bls.n	801c2ee <gen_numname+0x72>
		sr = seq;
 801c29a:	683b      	ldr	r3, [r7, #0]
 801c29c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801c29e:	e020      	b.n	801c2e2 <gen_numname+0x66>
			wc = *lfn++;
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	1c9a      	adds	r2, r3, #2
 801c2a4:	607a      	str	r2, [r7, #4]
 801c2a6:	881b      	ldrh	r3, [r3, #0]
 801c2a8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c2ae:	e015      	b.n	801c2dc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801c2b0:	69fb      	ldr	r3, [r7, #28]
 801c2b2:	005a      	lsls	r2, r3, #1
 801c2b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c2b6:	f003 0301 	and.w	r3, r3, #1
 801c2ba:	4413      	add	r3, r2
 801c2bc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801c2be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c2c0:	085b      	lsrs	r3, r3, #1
 801c2c2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801c2c4:	69fb      	ldr	r3, [r7, #28]
 801c2c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d003      	beq.n	801c2d6 <gen_numname+0x5a>
 801c2ce:	69fa      	ldr	r2, [r7, #28]
 801c2d0:	4b30      	ldr	r3, [pc, #192]	@ (801c394 <gen_numname+0x118>)
 801c2d2:	4053      	eors	r3, r2
 801c2d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801c2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2d8:	3301      	adds	r3, #1
 801c2da:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2de:	2b0f      	cmp	r3, #15
 801c2e0:	d9e6      	bls.n	801c2b0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	881b      	ldrh	r3, [r3, #0]
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d1da      	bne.n	801c2a0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801c2ea:	69fb      	ldr	r3, [r7, #28]
 801c2ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801c2ee:	2307      	movs	r3, #7
 801c2f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801c2f2:	683b      	ldr	r3, [r7, #0]
 801c2f4:	b2db      	uxtb	r3, r3
 801c2f6:	f003 030f 	and.w	r3, r3, #15
 801c2fa:	b2db      	uxtb	r3, r3
 801c2fc:	3330      	adds	r3, #48	@ 0x30
 801c2fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801c302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c306:	2b39      	cmp	r3, #57	@ 0x39
 801c308:	d904      	bls.n	801c314 <gen_numname+0x98>
 801c30a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c30e:	3307      	adds	r3, #7
 801c310:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801c314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c316:	1e5a      	subs	r2, r3, #1
 801c318:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c31a:	3330      	adds	r3, #48	@ 0x30
 801c31c:	443b      	add	r3, r7
 801c31e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801c322:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801c326:	683b      	ldr	r3, [r7, #0]
 801c328:	091b      	lsrs	r3, r3, #4
 801c32a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801c32c:	683b      	ldr	r3, [r7, #0]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d1df      	bne.n	801c2f2 <gen_numname+0x76>
	ns[i] = '~';
 801c332:	f107 0214 	add.w	r2, r7, #20
 801c336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c338:	4413      	add	r3, r2
 801c33a:	227e      	movs	r2, #126	@ 0x7e
 801c33c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801c33e:	2300      	movs	r3, #0
 801c340:	627b      	str	r3, [r7, #36]	@ 0x24
 801c342:	e002      	b.n	801c34a <gen_numname+0xce>
 801c344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c346:	3301      	adds	r3, #1
 801c348:	627b      	str	r3, [r7, #36]	@ 0x24
 801c34a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c34e:	429a      	cmp	r2, r3
 801c350:	d205      	bcs.n	801c35e <gen_numname+0xe2>
 801c352:	68fa      	ldr	r2, [r7, #12]
 801c354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c356:	4413      	add	r3, r2
 801c358:	781b      	ldrb	r3, [r3, #0]
 801c35a:	2b20      	cmp	r3, #32
 801c35c:	d1f2      	bne.n	801c344 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801c35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c360:	2b07      	cmp	r3, #7
 801c362:	d807      	bhi.n	801c374 <gen_numname+0xf8>
 801c364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c366:	1c5a      	adds	r2, r3, #1
 801c368:	62ba      	str	r2, [r7, #40]	@ 0x28
 801c36a:	3330      	adds	r3, #48	@ 0x30
 801c36c:	443b      	add	r3, r7
 801c36e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801c372:	e000      	b.n	801c376 <gen_numname+0xfa>
 801c374:	2120      	movs	r1, #32
 801c376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c378:	1c5a      	adds	r2, r3, #1
 801c37a:	627a      	str	r2, [r7, #36]	@ 0x24
 801c37c:	68fa      	ldr	r2, [r7, #12]
 801c37e:	4413      	add	r3, r2
 801c380:	460a      	mov	r2, r1
 801c382:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801c384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c386:	2b07      	cmp	r3, #7
 801c388:	d9e9      	bls.n	801c35e <gen_numname+0xe2>
}
 801c38a:	bf00      	nop
 801c38c:	bf00      	nop
 801c38e:	3730      	adds	r7, #48	@ 0x30
 801c390:	46bd      	mov	sp, r7
 801c392:	bd80      	pop	{r7, pc}
 801c394:	00011021 	.word	0x00011021

0801c398 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801c398:	b480      	push	{r7}
 801c39a:	b085      	sub	sp, #20
 801c39c:	af00      	add	r7, sp, #0
 801c39e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801c3a0:	2300      	movs	r3, #0
 801c3a2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801c3a4:	230b      	movs	r3, #11
 801c3a6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801c3a8:	7bfb      	ldrb	r3, [r7, #15]
 801c3aa:	b2da      	uxtb	r2, r3
 801c3ac:	0852      	lsrs	r2, r2, #1
 801c3ae:	01db      	lsls	r3, r3, #7
 801c3b0:	4313      	orrs	r3, r2
 801c3b2:	b2da      	uxtb	r2, r3
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	1c59      	adds	r1, r3, #1
 801c3b8:	6079      	str	r1, [r7, #4]
 801c3ba:	781b      	ldrb	r3, [r3, #0]
 801c3bc:	4413      	add	r3, r2
 801c3be:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801c3c0:	68bb      	ldr	r3, [r7, #8]
 801c3c2:	3b01      	subs	r3, #1
 801c3c4:	60bb      	str	r3, [r7, #8]
 801c3c6:	68bb      	ldr	r3, [r7, #8]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d1ed      	bne.n	801c3a8 <sum_sfn+0x10>
	return sum;
 801c3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c3ce:	4618      	mov	r0, r3
 801c3d0:	3714      	adds	r7, #20
 801c3d2:	46bd      	mov	sp, r7
 801c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3d8:	4770      	bx	lr

0801c3da <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801c3da:	b580      	push	{r7, lr}
 801c3dc:	b086      	sub	sp, #24
 801c3de:	af00      	add	r7, sp, #0
 801c3e0:	6078      	str	r0, [r7, #4]
 801c3e2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801c3e4:	2304      	movs	r3, #4
 801c3e6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801c3ee:	23ff      	movs	r3, #255	@ 0xff
 801c3f0:	757b      	strb	r3, [r7, #21]
 801c3f2:	23ff      	movs	r3, #255	@ 0xff
 801c3f4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801c3f6:	e081      	b.n	801c4fc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	69db      	ldr	r3, [r3, #28]
 801c3fc:	4619      	mov	r1, r3
 801c3fe:	6938      	ldr	r0, [r7, #16]
 801c400:	f7ff f83c 	bl	801b47c <move_window>
 801c404:	4603      	mov	r3, r0
 801c406:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c408:	7dfb      	ldrb	r3, [r7, #23]
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d17c      	bne.n	801c508 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	6a1b      	ldr	r3, [r3, #32]
 801c412:	781b      	ldrb	r3, [r3, #0]
 801c414:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801c416:	7dbb      	ldrb	r3, [r7, #22]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d102      	bne.n	801c422 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801c41c:	2304      	movs	r3, #4
 801c41e:	75fb      	strb	r3, [r7, #23]
 801c420:	e077      	b.n	801c512 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	6a1b      	ldr	r3, [r3, #32]
 801c426:	330b      	adds	r3, #11
 801c428:	781b      	ldrb	r3, [r3, #0]
 801c42a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c42e:	73fb      	strb	r3, [r7, #15]
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	7bfa      	ldrb	r2, [r7, #15]
 801c434:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801c436:	7dbb      	ldrb	r3, [r7, #22]
 801c438:	2be5      	cmp	r3, #229	@ 0xe5
 801c43a:	d00e      	beq.n	801c45a <dir_read+0x80>
 801c43c:	7dbb      	ldrb	r3, [r7, #22]
 801c43e:	2b2e      	cmp	r3, #46	@ 0x2e
 801c440:	d00b      	beq.n	801c45a <dir_read+0x80>
 801c442:	7bfb      	ldrb	r3, [r7, #15]
 801c444:	f023 0320 	bic.w	r3, r3, #32
 801c448:	2b08      	cmp	r3, #8
 801c44a:	bf0c      	ite	eq
 801c44c:	2301      	moveq	r3, #1
 801c44e:	2300      	movne	r3, #0
 801c450:	b2db      	uxtb	r3, r3
 801c452:	461a      	mov	r2, r3
 801c454:	683b      	ldr	r3, [r7, #0]
 801c456:	4293      	cmp	r3, r2
 801c458:	d002      	beq.n	801c460 <dir_read+0x86>
				ord = 0xFF;
 801c45a:	23ff      	movs	r3, #255	@ 0xff
 801c45c:	757b      	strb	r3, [r7, #21]
 801c45e:	e044      	b.n	801c4ea <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801c460:	7bfb      	ldrb	r3, [r7, #15]
 801c462:	2b0f      	cmp	r3, #15
 801c464:	d12f      	bne.n	801c4c6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801c466:	7dbb      	ldrb	r3, [r7, #22]
 801c468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d00d      	beq.n	801c48c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	6a1b      	ldr	r3, [r3, #32]
 801c474:	7b5b      	ldrb	r3, [r3, #13]
 801c476:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801c478:	7dbb      	ldrb	r3, [r7, #22]
 801c47a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c47e:	75bb      	strb	r3, [r7, #22]
 801c480:	7dbb      	ldrb	r3, [r7, #22]
 801c482:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	695a      	ldr	r2, [r3, #20]
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c48c:	7dba      	ldrb	r2, [r7, #22]
 801c48e:	7d7b      	ldrb	r3, [r7, #21]
 801c490:	429a      	cmp	r2, r3
 801c492:	d115      	bne.n	801c4c0 <dir_read+0xe6>
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	6a1b      	ldr	r3, [r3, #32]
 801c498:	330d      	adds	r3, #13
 801c49a:	781b      	ldrb	r3, [r3, #0]
 801c49c:	7d3a      	ldrb	r2, [r7, #20]
 801c49e:	429a      	cmp	r2, r3
 801c4a0:	d10e      	bne.n	801c4c0 <dir_read+0xe6>
 801c4a2:	693b      	ldr	r3, [r7, #16]
 801c4a4:	691a      	ldr	r2, [r3, #16]
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	6a1b      	ldr	r3, [r3, #32]
 801c4aa:	4619      	mov	r1, r3
 801c4ac:	4610      	mov	r0, r2
 801c4ae:	f7ff fe19 	bl	801c0e4 <pick_lfn>
 801c4b2:	4603      	mov	r3, r0
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d003      	beq.n	801c4c0 <dir_read+0xe6>
 801c4b8:	7d7b      	ldrb	r3, [r7, #21]
 801c4ba:	3b01      	subs	r3, #1
 801c4bc:	b2db      	uxtb	r3, r3
 801c4be:	e000      	b.n	801c4c2 <dir_read+0xe8>
 801c4c0:	23ff      	movs	r3, #255	@ 0xff
 801c4c2:	757b      	strb	r3, [r7, #21]
 801c4c4:	e011      	b.n	801c4ea <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801c4c6:	7d7b      	ldrb	r3, [r7, #21]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d109      	bne.n	801c4e0 <dir_read+0x106>
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	6a1b      	ldr	r3, [r3, #32]
 801c4d0:	4618      	mov	r0, r3
 801c4d2:	f7ff ff61 	bl	801c398 <sum_sfn>
 801c4d6:	4603      	mov	r3, r0
 801c4d8:	461a      	mov	r2, r3
 801c4da:	7d3b      	ldrb	r3, [r7, #20]
 801c4dc:	4293      	cmp	r3, r2
 801c4de:	d015      	beq.n	801c50c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	f04f 32ff 	mov.w	r2, #4294967295
 801c4e6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801c4e8:	e010      	b.n	801c50c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801c4ea:	2100      	movs	r1, #0
 801c4ec:	6878      	ldr	r0, [r7, #4]
 801c4ee:	f7ff fc2d 	bl	801bd4c <dir_next>
 801c4f2:	4603      	mov	r3, r0
 801c4f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c4f6:	7dfb      	ldrb	r3, [r7, #23]
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d109      	bne.n	801c510 <dir_read+0x136>
	while (dp->sect) {
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	69db      	ldr	r3, [r3, #28]
 801c500:	2b00      	cmp	r3, #0
 801c502:	f47f af79 	bne.w	801c3f8 <dir_read+0x1e>
 801c506:	e004      	b.n	801c512 <dir_read+0x138>
		if (res != FR_OK) break;
 801c508:	bf00      	nop
 801c50a:	e002      	b.n	801c512 <dir_read+0x138>
					break;
 801c50c:	bf00      	nop
 801c50e:	e000      	b.n	801c512 <dir_read+0x138>
		if (res != FR_OK) break;
 801c510:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801c512:	7dfb      	ldrb	r3, [r7, #23]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d002      	beq.n	801c51e <dir_read+0x144>
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	2200      	movs	r2, #0
 801c51c:	61da      	str	r2, [r3, #28]
	return res;
 801c51e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c520:	4618      	mov	r0, r3
 801c522:	3718      	adds	r7, #24
 801c524:	46bd      	mov	sp, r7
 801c526:	bd80      	pop	{r7, pc}

0801c528 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801c528:	b580      	push	{r7, lr}
 801c52a:	b086      	sub	sp, #24
 801c52c:	af00      	add	r7, sp, #0
 801c52e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801c536:	2100      	movs	r1, #0
 801c538:	6878      	ldr	r0, [r7, #4]
 801c53a:	f7ff fb7e 	bl	801bc3a <dir_sdi>
 801c53e:	4603      	mov	r3, r0
 801c540:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801c542:	7dfb      	ldrb	r3, [r7, #23]
 801c544:	2b00      	cmp	r3, #0
 801c546:	d001      	beq.n	801c54c <dir_find+0x24>
 801c548:	7dfb      	ldrb	r3, [r7, #23]
 801c54a:	e0a9      	b.n	801c6a0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c54c:	23ff      	movs	r3, #255	@ 0xff
 801c54e:	753b      	strb	r3, [r7, #20]
 801c550:	7d3b      	ldrb	r3, [r7, #20]
 801c552:	757b      	strb	r3, [r7, #21]
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	f04f 32ff 	mov.w	r2, #4294967295
 801c55a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	69db      	ldr	r3, [r3, #28]
 801c560:	4619      	mov	r1, r3
 801c562:	6938      	ldr	r0, [r7, #16]
 801c564:	f7fe ff8a 	bl	801b47c <move_window>
 801c568:	4603      	mov	r3, r0
 801c56a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801c56c:	7dfb      	ldrb	r3, [r7, #23]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	f040 8090 	bne.w	801c694 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	6a1b      	ldr	r3, [r3, #32]
 801c578:	781b      	ldrb	r3, [r3, #0]
 801c57a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801c57c:	7dbb      	ldrb	r3, [r7, #22]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d102      	bne.n	801c588 <dir_find+0x60>
 801c582:	2304      	movs	r3, #4
 801c584:	75fb      	strb	r3, [r7, #23]
 801c586:	e08a      	b.n	801c69e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	6a1b      	ldr	r3, [r3, #32]
 801c58c:	330b      	adds	r3, #11
 801c58e:	781b      	ldrb	r3, [r3, #0]
 801c590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c594:	73fb      	strb	r3, [r7, #15]
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	7bfa      	ldrb	r2, [r7, #15]
 801c59a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801c59c:	7dbb      	ldrb	r3, [r7, #22]
 801c59e:	2be5      	cmp	r3, #229	@ 0xe5
 801c5a0:	d007      	beq.n	801c5b2 <dir_find+0x8a>
 801c5a2:	7bfb      	ldrb	r3, [r7, #15]
 801c5a4:	f003 0308 	and.w	r3, r3, #8
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d009      	beq.n	801c5c0 <dir_find+0x98>
 801c5ac:	7bfb      	ldrb	r3, [r7, #15]
 801c5ae:	2b0f      	cmp	r3, #15
 801c5b0:	d006      	beq.n	801c5c0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c5b2:	23ff      	movs	r3, #255	@ 0xff
 801c5b4:	757b      	strb	r3, [r7, #21]
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	f04f 32ff 	mov.w	r2, #4294967295
 801c5bc:	631a      	str	r2, [r3, #48]	@ 0x30
 801c5be:	e05e      	b.n	801c67e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801c5c0:	7bfb      	ldrb	r3, [r7, #15]
 801c5c2:	2b0f      	cmp	r3, #15
 801c5c4:	d136      	bne.n	801c634 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c5cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d154      	bne.n	801c67e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801c5d4:	7dbb      	ldrb	r3, [r7, #22]
 801c5d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d00d      	beq.n	801c5fa <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	6a1b      	ldr	r3, [r3, #32]
 801c5e2:	7b5b      	ldrb	r3, [r3, #13]
 801c5e4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801c5e6:	7dbb      	ldrb	r3, [r7, #22]
 801c5e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801c5ec:	75bb      	strb	r3, [r7, #22]
 801c5ee:	7dbb      	ldrb	r3, [r7, #22]
 801c5f0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	695a      	ldr	r2, [r3, #20]
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801c5fa:	7dba      	ldrb	r2, [r7, #22]
 801c5fc:	7d7b      	ldrb	r3, [r7, #21]
 801c5fe:	429a      	cmp	r2, r3
 801c600:	d115      	bne.n	801c62e <dir_find+0x106>
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	6a1b      	ldr	r3, [r3, #32]
 801c606:	330d      	adds	r3, #13
 801c608:	781b      	ldrb	r3, [r3, #0]
 801c60a:	7d3a      	ldrb	r2, [r7, #20]
 801c60c:	429a      	cmp	r2, r3
 801c60e:	d10e      	bne.n	801c62e <dir_find+0x106>
 801c610:	693b      	ldr	r3, [r7, #16]
 801c612:	691a      	ldr	r2, [r3, #16]
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	6a1b      	ldr	r3, [r3, #32]
 801c618:	4619      	mov	r1, r3
 801c61a:	4610      	mov	r0, r2
 801c61c:	f7ff fcf2 	bl	801c004 <cmp_lfn>
 801c620:	4603      	mov	r3, r0
 801c622:	2b00      	cmp	r3, #0
 801c624:	d003      	beq.n	801c62e <dir_find+0x106>
 801c626:	7d7b      	ldrb	r3, [r7, #21]
 801c628:	3b01      	subs	r3, #1
 801c62a:	b2db      	uxtb	r3, r3
 801c62c:	e000      	b.n	801c630 <dir_find+0x108>
 801c62e:	23ff      	movs	r3, #255	@ 0xff
 801c630:	757b      	strb	r3, [r7, #21]
 801c632:	e024      	b.n	801c67e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c634:	7d7b      	ldrb	r3, [r7, #21]
 801c636:	2b00      	cmp	r3, #0
 801c638:	d109      	bne.n	801c64e <dir_find+0x126>
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	6a1b      	ldr	r3, [r3, #32]
 801c63e:	4618      	mov	r0, r3
 801c640:	f7ff feaa 	bl	801c398 <sum_sfn>
 801c644:	4603      	mov	r3, r0
 801c646:	461a      	mov	r2, r3
 801c648:	7d3b      	ldrb	r3, [r7, #20]
 801c64a:	4293      	cmp	r3, r2
 801c64c:	d024      	beq.n	801c698 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c654:	f003 0301 	and.w	r3, r3, #1
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d10a      	bne.n	801c672 <dir_find+0x14a>
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	6a18      	ldr	r0, [r3, #32]
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	3324      	adds	r3, #36	@ 0x24
 801c664:	220b      	movs	r2, #11
 801c666:	4619      	mov	r1, r3
 801c668:	f7fe fd16 	bl	801b098 <mem_cmp>
 801c66c:	4603      	mov	r3, r0
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d014      	beq.n	801c69c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801c672:	23ff      	movs	r3, #255	@ 0xff
 801c674:	757b      	strb	r3, [r7, #21]
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	f04f 32ff 	mov.w	r2, #4294967295
 801c67c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801c67e:	2100      	movs	r1, #0
 801c680:	6878      	ldr	r0, [r7, #4]
 801c682:	f7ff fb63 	bl	801bd4c <dir_next>
 801c686:	4603      	mov	r3, r0
 801c688:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801c68a:	7dfb      	ldrb	r3, [r7, #23]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	f43f af65 	beq.w	801c55c <dir_find+0x34>
 801c692:	e004      	b.n	801c69e <dir_find+0x176>
		if (res != FR_OK) break;
 801c694:	bf00      	nop
 801c696:	e002      	b.n	801c69e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801c698:	bf00      	nop
 801c69a:	e000      	b.n	801c69e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801c69c:	bf00      	nop

	return res;
 801c69e:	7dfb      	ldrb	r3, [r7, #23]
}
 801c6a0:	4618      	mov	r0, r3
 801c6a2:	3718      	adds	r7, #24
 801c6a4:	46bd      	mov	sp, r7
 801c6a6:	bd80      	pop	{r7, pc}

0801c6a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801c6a8:	b580      	push	{r7, lr}
 801c6aa:	b08c      	sub	sp, #48	@ 0x30
 801c6ac:	af00      	add	r7, sp, #0
 801c6ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c6bc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	d001      	beq.n	801c6c8 <dir_register+0x20>
 801c6c4:	2306      	movs	r3, #6
 801c6c6:	e0e0      	b.n	801c88a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	627b      	str	r3, [r7, #36]	@ 0x24
 801c6cc:	e002      	b.n	801c6d4 <dir_register+0x2c>
 801c6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6d0:	3301      	adds	r3, #1
 801c6d2:	627b      	str	r3, [r7, #36]	@ 0x24
 801c6d4:	69fb      	ldr	r3, [r7, #28]
 801c6d6:	691a      	ldr	r2, [r3, #16]
 801c6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6da:	005b      	lsls	r3, r3, #1
 801c6dc:	4413      	add	r3, r2
 801c6de:	881b      	ldrh	r3, [r3, #0]
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d1f4      	bne.n	801c6ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801c6ea:	f107 030c 	add.w	r3, r7, #12
 801c6ee:	220c      	movs	r2, #12
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	f7fe fc95 	bl	801b020 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801c6f6:	7dfb      	ldrb	r3, [r7, #23]
 801c6f8:	f003 0301 	and.w	r3, r3, #1
 801c6fc:	2b00      	cmp	r3, #0
 801c6fe:	d032      	beq.n	801c766 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	2240      	movs	r2, #64	@ 0x40
 801c704:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801c708:	2301      	movs	r3, #1
 801c70a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c70c:	e016      	b.n	801c73c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801c714:	69fb      	ldr	r3, [r7, #28]
 801c716:	691a      	ldr	r2, [r3, #16]
 801c718:	f107 010c 	add.w	r1, r7, #12
 801c71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c71e:	f7ff fdad 	bl	801c27c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801c722:	6878      	ldr	r0, [r7, #4]
 801c724:	f7ff ff00 	bl	801c528 <dir_find>
 801c728:	4603      	mov	r3, r0
 801c72a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801c72e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c732:	2b00      	cmp	r3, #0
 801c734:	d106      	bne.n	801c744 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801c736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c738:	3301      	adds	r3, #1
 801c73a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c73c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c73e:	2b63      	cmp	r3, #99	@ 0x63
 801c740:	d9e5      	bls.n	801c70e <dir_register+0x66>
 801c742:	e000      	b.n	801c746 <dir_register+0x9e>
			if (res != FR_OK) break;
 801c744:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801c746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c748:	2b64      	cmp	r3, #100	@ 0x64
 801c74a:	d101      	bne.n	801c750 <dir_register+0xa8>
 801c74c:	2307      	movs	r3, #7
 801c74e:	e09c      	b.n	801c88a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801c750:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c754:	2b04      	cmp	r3, #4
 801c756:	d002      	beq.n	801c75e <dir_register+0xb6>
 801c758:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c75c:	e095      	b.n	801c88a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801c75e:	7dfa      	ldrb	r2, [r7, #23]
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801c766:	7dfb      	ldrb	r3, [r7, #23]
 801c768:	f003 0302 	and.w	r3, r3, #2
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d007      	beq.n	801c780 <dir_register+0xd8>
 801c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c772:	330c      	adds	r3, #12
 801c774:	4a47      	ldr	r2, [pc, #284]	@ (801c894 <dir_register+0x1ec>)
 801c776:	fba2 2303 	umull	r2, r3, r2, r3
 801c77a:	089b      	lsrs	r3, r3, #2
 801c77c:	3301      	adds	r3, #1
 801c77e:	e000      	b.n	801c782 <dir_register+0xda>
 801c780:	2301      	movs	r3, #1
 801c782:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801c784:	6a39      	ldr	r1, [r7, #32]
 801c786:	6878      	ldr	r0, [r7, #4]
 801c788:	f7ff fbb6 	bl	801bef8 <dir_alloc>
 801c78c:	4603      	mov	r3, r0
 801c78e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801c792:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c796:	2b00      	cmp	r3, #0
 801c798:	d148      	bne.n	801c82c <dir_register+0x184>
 801c79a:	6a3b      	ldr	r3, [r7, #32]
 801c79c:	3b01      	subs	r3, #1
 801c79e:	623b      	str	r3, [r7, #32]
 801c7a0:	6a3b      	ldr	r3, [r7, #32]
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d042      	beq.n	801c82c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	695a      	ldr	r2, [r3, #20]
 801c7aa:	6a3b      	ldr	r3, [r7, #32]
 801c7ac:	015b      	lsls	r3, r3, #5
 801c7ae:	1ad3      	subs	r3, r2, r3
 801c7b0:	4619      	mov	r1, r3
 801c7b2:	6878      	ldr	r0, [r7, #4]
 801c7b4:	f7ff fa41 	bl	801bc3a <dir_sdi>
 801c7b8:	4603      	mov	r3, r0
 801c7ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c7be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d132      	bne.n	801c82c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	3324      	adds	r3, #36	@ 0x24
 801c7ca:	4618      	mov	r0, r3
 801c7cc:	f7ff fde4 	bl	801c398 <sum_sfn>
 801c7d0:	4603      	mov	r3, r0
 801c7d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	69db      	ldr	r3, [r3, #28]
 801c7d8:	4619      	mov	r1, r3
 801c7da:	69f8      	ldr	r0, [r7, #28]
 801c7dc:	f7fe fe4e 	bl	801b47c <move_window>
 801c7e0:	4603      	mov	r3, r0
 801c7e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c7e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	d11d      	bne.n	801c82a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c7ee:	69fb      	ldr	r3, [r7, #28]
 801c7f0:	6918      	ldr	r0, [r3, #16]
 801c7f2:	687b      	ldr	r3, [r7, #4]
 801c7f4:	6a19      	ldr	r1, [r3, #32]
 801c7f6:	6a3b      	ldr	r3, [r7, #32]
 801c7f8:	b2da      	uxtb	r2, r3
 801c7fa:	7efb      	ldrb	r3, [r7, #27]
 801c7fc:	f7ff fcd6 	bl	801c1ac <put_lfn>
				fs->wflag = 1;
 801c800:	69fb      	ldr	r3, [r7, #28]
 801c802:	2201      	movs	r2, #1
 801c804:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c806:	2100      	movs	r1, #0
 801c808:	6878      	ldr	r0, [r7, #4]
 801c80a:	f7ff fa9f 	bl	801bd4c <dir_next>
 801c80e:	4603      	mov	r3, r0
 801c810:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c814:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d107      	bne.n	801c82c <dir_register+0x184>
 801c81c:	6a3b      	ldr	r3, [r7, #32]
 801c81e:	3b01      	subs	r3, #1
 801c820:	623b      	str	r3, [r7, #32]
 801c822:	6a3b      	ldr	r3, [r7, #32]
 801c824:	2b00      	cmp	r3, #0
 801c826:	d1d5      	bne.n	801c7d4 <dir_register+0x12c>
 801c828:	e000      	b.n	801c82c <dir_register+0x184>
				if (res != FR_OK) break;
 801c82a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c82c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c830:	2b00      	cmp	r3, #0
 801c832:	d128      	bne.n	801c886 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	69db      	ldr	r3, [r3, #28]
 801c838:	4619      	mov	r1, r3
 801c83a:	69f8      	ldr	r0, [r7, #28]
 801c83c:	f7fe fe1e 	bl	801b47c <move_window>
 801c840:	4603      	mov	r3, r0
 801c842:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c846:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d11b      	bne.n	801c886 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	6a1b      	ldr	r3, [r3, #32]
 801c852:	2220      	movs	r2, #32
 801c854:	2100      	movs	r1, #0
 801c856:	4618      	mov	r0, r3
 801c858:	f7fe fc03 	bl	801b062 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	6a18      	ldr	r0, [r3, #32]
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	3324      	adds	r3, #36	@ 0x24
 801c864:	220b      	movs	r2, #11
 801c866:	4619      	mov	r1, r3
 801c868:	f7fe fbda 	bl	801b020 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	6a1b      	ldr	r3, [r3, #32]
 801c876:	330c      	adds	r3, #12
 801c878:	f002 0218 	and.w	r2, r2, #24
 801c87c:	b2d2      	uxtb	r2, r2
 801c87e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c880:	69fb      	ldr	r3, [r7, #28]
 801c882:	2201      	movs	r2, #1
 801c884:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c886:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c88a:	4618      	mov	r0, r3
 801c88c:	3730      	adds	r7, #48	@ 0x30
 801c88e:	46bd      	mov	sp, r7
 801c890:	bd80      	pop	{r7, pc}
 801c892:	bf00      	nop
 801c894:	4ec4ec4f 	.word	0x4ec4ec4f

0801c898 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c898:	b580      	push	{r7, lr}
 801c89a:	b086      	sub	sp, #24
 801c89c:	af00      	add	r7, sp, #0
 801c89e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	695b      	ldr	r3, [r3, #20]
 801c8aa:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c8b4:	d007      	beq.n	801c8c6 <dir_remove+0x2e>
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c8ba:	4619      	mov	r1, r3
 801c8bc:	6878      	ldr	r0, [r7, #4]
 801c8be:	f7ff f9bc 	bl	801bc3a <dir_sdi>
 801c8c2:	4603      	mov	r3, r0
 801c8c4:	e000      	b.n	801c8c8 <dir_remove+0x30>
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c8ca:	7dfb      	ldrb	r3, [r7, #23]
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	d128      	bne.n	801c922 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	69db      	ldr	r3, [r3, #28]
 801c8d4:	4619      	mov	r1, r3
 801c8d6:	6938      	ldr	r0, [r7, #16]
 801c8d8:	f7fe fdd0 	bl	801b47c <move_window>
 801c8dc:	4603      	mov	r3, r0
 801c8de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c8e0:	7dfb      	ldrb	r3, [r7, #23]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d115      	bne.n	801c912 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	6a1b      	ldr	r3, [r3, #32]
 801c8ea:	22e5      	movs	r2, #229	@ 0xe5
 801c8ec:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c8ee:	693b      	ldr	r3, [r7, #16]
 801c8f0:	2201      	movs	r2, #1
 801c8f2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	695b      	ldr	r3, [r3, #20]
 801c8f8:	68fa      	ldr	r2, [r7, #12]
 801c8fa:	429a      	cmp	r2, r3
 801c8fc:	d90b      	bls.n	801c916 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c8fe:	2100      	movs	r1, #0
 801c900:	6878      	ldr	r0, [r7, #4]
 801c902:	f7ff fa23 	bl	801bd4c <dir_next>
 801c906:	4603      	mov	r3, r0
 801c908:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c90a:	7dfb      	ldrb	r3, [r7, #23]
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d0df      	beq.n	801c8d0 <dir_remove+0x38>
 801c910:	e002      	b.n	801c918 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c912:	bf00      	nop
 801c914:	e000      	b.n	801c918 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c916:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c918:	7dfb      	ldrb	r3, [r7, #23]
 801c91a:	2b04      	cmp	r3, #4
 801c91c:	d101      	bne.n	801c922 <dir_remove+0x8a>
 801c91e:	2302      	movs	r3, #2
 801c920:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c922:	7dfb      	ldrb	r3, [r7, #23]
}
 801c924:	4618      	mov	r0, r3
 801c926:	3718      	adds	r7, #24
 801c928:	46bd      	mov	sp, r7
 801c92a:	bd80      	pop	{r7, pc}

0801c92c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c92c:	b580      	push	{r7, lr}
 801c92e:	b08a      	sub	sp, #40	@ 0x28
 801c930:	af00      	add	r7, sp, #0
 801c932:	6078      	str	r0, [r7, #4]
 801c934:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c936:	683b      	ldr	r3, [r7, #0]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	613b      	str	r3, [r7, #16]
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	691b      	ldr	r3, [r3, #16]
 801c942:	60fb      	str	r3, [r7, #12]
 801c944:	2300      	movs	r3, #0
 801c946:	617b      	str	r3, [r7, #20]
 801c948:	697b      	ldr	r3, [r7, #20]
 801c94a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c94c:	69bb      	ldr	r3, [r7, #24]
 801c94e:	1c5a      	adds	r2, r3, #1
 801c950:	61ba      	str	r2, [r7, #24]
 801c952:	693a      	ldr	r2, [r7, #16]
 801c954:	4413      	add	r3, r2
 801c956:	781b      	ldrb	r3, [r3, #0]
 801c958:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c95a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c95c:	2b1f      	cmp	r3, #31
 801c95e:	d940      	bls.n	801c9e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c960:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c962:	2b2f      	cmp	r3, #47	@ 0x2f
 801c964:	d006      	beq.n	801c974 <create_name+0x48>
 801c966:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c968:	2b5c      	cmp	r3, #92	@ 0x5c
 801c96a:	d110      	bne.n	801c98e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c96c:	e002      	b.n	801c974 <create_name+0x48>
 801c96e:	69bb      	ldr	r3, [r7, #24]
 801c970:	3301      	adds	r3, #1
 801c972:	61bb      	str	r3, [r7, #24]
 801c974:	693a      	ldr	r2, [r7, #16]
 801c976:	69bb      	ldr	r3, [r7, #24]
 801c978:	4413      	add	r3, r2
 801c97a:	781b      	ldrb	r3, [r3, #0]
 801c97c:	2b2f      	cmp	r3, #47	@ 0x2f
 801c97e:	d0f6      	beq.n	801c96e <create_name+0x42>
 801c980:	693a      	ldr	r2, [r7, #16]
 801c982:	69bb      	ldr	r3, [r7, #24]
 801c984:	4413      	add	r3, r2
 801c986:	781b      	ldrb	r3, [r3, #0]
 801c988:	2b5c      	cmp	r3, #92	@ 0x5c
 801c98a:	d0f0      	beq.n	801c96e <create_name+0x42>
			break;
 801c98c:	e02a      	b.n	801c9e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c98e:	697b      	ldr	r3, [r7, #20]
 801c990:	2bfe      	cmp	r3, #254	@ 0xfe
 801c992:	d901      	bls.n	801c998 <create_name+0x6c>
 801c994:	2306      	movs	r3, #6
 801c996:	e17d      	b.n	801cc94 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c998:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c99a:	b2db      	uxtb	r3, r3
 801c99c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c99e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9a0:	2101      	movs	r1, #1
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	f001 fa98 	bl	801ded8 <ff_convert>
 801c9a8:	4603      	mov	r3, r0
 801c9aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c9ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	d101      	bne.n	801c9b6 <create_name+0x8a>
 801c9b2:	2306      	movs	r3, #6
 801c9b4:	e16e      	b.n	801cc94 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c9b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9b8:	2b7f      	cmp	r3, #127	@ 0x7f
 801c9ba:	d809      	bhi.n	801c9d0 <create_name+0xa4>
 801c9bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9be:	4619      	mov	r1, r3
 801c9c0:	488d      	ldr	r0, [pc, #564]	@ (801cbf8 <create_name+0x2cc>)
 801c9c2:	f7fe fb90 	bl	801b0e6 <chk_chr>
 801c9c6:	4603      	mov	r3, r0
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d001      	beq.n	801c9d0 <create_name+0xa4>
 801c9cc:	2306      	movs	r3, #6
 801c9ce:	e161      	b.n	801cc94 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801c9d0:	697b      	ldr	r3, [r7, #20]
 801c9d2:	1c5a      	adds	r2, r3, #1
 801c9d4:	617a      	str	r2, [r7, #20]
 801c9d6:	005b      	lsls	r3, r3, #1
 801c9d8:	68fa      	ldr	r2, [r7, #12]
 801c9da:	4413      	add	r3, r2
 801c9dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c9de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801c9e0:	e7b4      	b.n	801c94c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801c9e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801c9e4:	693a      	ldr	r2, [r7, #16]
 801c9e6:	69bb      	ldr	r3, [r7, #24]
 801c9e8:	441a      	add	r2, r3
 801c9ea:	683b      	ldr	r3, [r7, #0]
 801c9ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c9ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c9f0:	2b1f      	cmp	r3, #31
 801c9f2:	d801      	bhi.n	801c9f8 <create_name+0xcc>
 801c9f4:	2304      	movs	r3, #4
 801c9f6:	e000      	b.n	801c9fa <create_name+0xce>
 801c9f8:	2300      	movs	r3, #0
 801c9fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c9fe:	e011      	b.n	801ca24 <create_name+0xf8>
		w = lfn[di - 1];
 801ca00:	697a      	ldr	r2, [r7, #20]
 801ca02:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ca06:	4413      	add	r3, r2
 801ca08:	005b      	lsls	r3, r3, #1
 801ca0a:	68fa      	ldr	r2, [r7, #12]
 801ca0c:	4413      	add	r3, r2
 801ca0e:	881b      	ldrh	r3, [r3, #0]
 801ca10:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801ca12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca14:	2b20      	cmp	r3, #32
 801ca16:	d002      	beq.n	801ca1e <create_name+0xf2>
 801ca18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ca1a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ca1c:	d106      	bne.n	801ca2c <create_name+0x100>
		di--;
 801ca1e:	697b      	ldr	r3, [r7, #20]
 801ca20:	3b01      	subs	r3, #1
 801ca22:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801ca24:	697b      	ldr	r3, [r7, #20]
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	d1ea      	bne.n	801ca00 <create_name+0xd4>
 801ca2a:	e000      	b.n	801ca2e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801ca2c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801ca2e:	697b      	ldr	r3, [r7, #20]
 801ca30:	005b      	lsls	r3, r3, #1
 801ca32:	68fa      	ldr	r2, [r7, #12]
 801ca34:	4413      	add	r3, r2
 801ca36:	2200      	movs	r2, #0
 801ca38:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801ca3a:	697b      	ldr	r3, [r7, #20]
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d101      	bne.n	801ca44 <create_name+0x118>
 801ca40:	2306      	movs	r3, #6
 801ca42:	e127      	b.n	801cc94 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	3324      	adds	r3, #36	@ 0x24
 801ca48:	220b      	movs	r2, #11
 801ca4a:	2120      	movs	r1, #32
 801ca4c:	4618      	mov	r0, r3
 801ca4e:	f7fe fb08 	bl	801b062 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801ca52:	2300      	movs	r3, #0
 801ca54:	61bb      	str	r3, [r7, #24]
 801ca56:	e002      	b.n	801ca5e <create_name+0x132>
 801ca58:	69bb      	ldr	r3, [r7, #24]
 801ca5a:	3301      	adds	r3, #1
 801ca5c:	61bb      	str	r3, [r7, #24]
 801ca5e:	69bb      	ldr	r3, [r7, #24]
 801ca60:	005b      	lsls	r3, r3, #1
 801ca62:	68fa      	ldr	r2, [r7, #12]
 801ca64:	4413      	add	r3, r2
 801ca66:	881b      	ldrh	r3, [r3, #0]
 801ca68:	2b20      	cmp	r3, #32
 801ca6a:	d0f5      	beq.n	801ca58 <create_name+0x12c>
 801ca6c:	69bb      	ldr	r3, [r7, #24]
 801ca6e:	005b      	lsls	r3, r3, #1
 801ca70:	68fa      	ldr	r2, [r7, #12]
 801ca72:	4413      	add	r3, r2
 801ca74:	881b      	ldrh	r3, [r3, #0]
 801ca76:	2b2e      	cmp	r3, #46	@ 0x2e
 801ca78:	d0ee      	beq.n	801ca58 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801ca7a:	69bb      	ldr	r3, [r7, #24]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d009      	beq.n	801ca94 <create_name+0x168>
 801ca80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ca84:	f043 0303 	orr.w	r3, r3, #3
 801ca88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801ca8c:	e002      	b.n	801ca94 <create_name+0x168>
 801ca8e:	697b      	ldr	r3, [r7, #20]
 801ca90:	3b01      	subs	r3, #1
 801ca92:	617b      	str	r3, [r7, #20]
 801ca94:	697b      	ldr	r3, [r7, #20]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d009      	beq.n	801caae <create_name+0x182>
 801ca9a:	697a      	ldr	r2, [r7, #20]
 801ca9c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801caa0:	4413      	add	r3, r2
 801caa2:	005b      	lsls	r3, r3, #1
 801caa4:	68fa      	ldr	r2, [r7, #12]
 801caa6:	4413      	add	r3, r2
 801caa8:	881b      	ldrh	r3, [r3, #0]
 801caaa:	2b2e      	cmp	r3, #46	@ 0x2e
 801caac:	d1ef      	bne.n	801ca8e <create_name+0x162>

	i = b = 0; ni = 8;
 801caae:	2300      	movs	r3, #0
 801cab0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cab4:	2300      	movs	r3, #0
 801cab6:	623b      	str	r3, [r7, #32]
 801cab8:	2308      	movs	r3, #8
 801caba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801cabc:	69bb      	ldr	r3, [r7, #24]
 801cabe:	1c5a      	adds	r2, r3, #1
 801cac0:	61ba      	str	r2, [r7, #24]
 801cac2:	005b      	lsls	r3, r3, #1
 801cac4:	68fa      	ldr	r2, [r7, #12]
 801cac6:	4413      	add	r3, r2
 801cac8:	881b      	ldrh	r3, [r3, #0]
 801caca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801cacc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cace:	2b00      	cmp	r3, #0
 801cad0:	f000 8090 	beq.w	801cbf4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801cad4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cad6:	2b20      	cmp	r3, #32
 801cad8:	d006      	beq.n	801cae8 <create_name+0x1bc>
 801cada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cadc:	2b2e      	cmp	r3, #46	@ 0x2e
 801cade:	d10a      	bne.n	801caf6 <create_name+0x1ca>
 801cae0:	69ba      	ldr	r2, [r7, #24]
 801cae2:	697b      	ldr	r3, [r7, #20]
 801cae4:	429a      	cmp	r2, r3
 801cae6:	d006      	beq.n	801caf6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801cae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801caec:	f043 0303 	orr.w	r3, r3, #3
 801caf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801caf4:	e07d      	b.n	801cbf2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801caf6:	6a3a      	ldr	r2, [r7, #32]
 801caf8:	69fb      	ldr	r3, [r7, #28]
 801cafa:	429a      	cmp	r2, r3
 801cafc:	d203      	bcs.n	801cb06 <create_name+0x1da>
 801cafe:	69ba      	ldr	r2, [r7, #24]
 801cb00:	697b      	ldr	r3, [r7, #20]
 801cb02:	429a      	cmp	r2, r3
 801cb04:	d123      	bne.n	801cb4e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801cb06:	69fb      	ldr	r3, [r7, #28]
 801cb08:	2b0b      	cmp	r3, #11
 801cb0a:	d106      	bne.n	801cb1a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801cb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb10:	f043 0303 	orr.w	r3, r3, #3
 801cb14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cb18:	e075      	b.n	801cc06 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801cb1a:	69ba      	ldr	r2, [r7, #24]
 801cb1c:	697b      	ldr	r3, [r7, #20]
 801cb1e:	429a      	cmp	r2, r3
 801cb20:	d005      	beq.n	801cb2e <create_name+0x202>
 801cb22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb26:	f043 0303 	orr.w	r3, r3, #3
 801cb2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801cb2e:	69ba      	ldr	r2, [r7, #24]
 801cb30:	697b      	ldr	r3, [r7, #20]
 801cb32:	429a      	cmp	r2, r3
 801cb34:	d866      	bhi.n	801cc04 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801cb36:	697b      	ldr	r3, [r7, #20]
 801cb38:	61bb      	str	r3, [r7, #24]
 801cb3a:	2308      	movs	r3, #8
 801cb3c:	623b      	str	r3, [r7, #32]
 801cb3e:	230b      	movs	r3, #11
 801cb40:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801cb42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cb46:	009b      	lsls	r3, r3, #2
 801cb48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cb4c:	e051      	b.n	801cbf2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801cb4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb50:	2b7f      	cmp	r3, #127	@ 0x7f
 801cb52:	d914      	bls.n	801cb7e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801cb54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb56:	2100      	movs	r1, #0
 801cb58:	4618      	mov	r0, r3
 801cb5a:	f001 f9bd 	bl	801ded8 <ff_convert>
 801cb5e:	4603      	mov	r3, r0
 801cb60:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801cb62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d004      	beq.n	801cb72 <create_name+0x246>
 801cb68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb6a:	3b80      	subs	r3, #128	@ 0x80
 801cb6c:	4a23      	ldr	r2, [pc, #140]	@ (801cbfc <create_name+0x2d0>)
 801cb6e:	5cd3      	ldrb	r3, [r2, r3]
 801cb70:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801cb72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb76:	f043 0302 	orr.w	r3, r3, #2
 801cb7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801cb7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d007      	beq.n	801cb94 <create_name+0x268>
 801cb84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb86:	4619      	mov	r1, r3
 801cb88:	481d      	ldr	r0, [pc, #116]	@ (801cc00 <create_name+0x2d4>)
 801cb8a:	f7fe faac 	bl	801b0e6 <chk_chr>
 801cb8e:	4603      	mov	r3, r0
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d008      	beq.n	801cba6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801cb94:	235f      	movs	r3, #95	@ 0x5f
 801cb96:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801cb98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cb9c:	f043 0303 	orr.w	r3, r3, #3
 801cba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cba4:	e01b      	b.n	801cbde <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801cba6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cba8:	2b40      	cmp	r3, #64	@ 0x40
 801cbaa:	d909      	bls.n	801cbc0 <create_name+0x294>
 801cbac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbae:	2b5a      	cmp	r3, #90	@ 0x5a
 801cbb0:	d806      	bhi.n	801cbc0 <create_name+0x294>
					b |= 2;
 801cbb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cbb6:	f043 0302 	orr.w	r3, r3, #2
 801cbba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cbbe:	e00e      	b.n	801cbde <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801cbc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbc2:	2b60      	cmp	r3, #96	@ 0x60
 801cbc4:	d90b      	bls.n	801cbde <create_name+0x2b2>
 801cbc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbc8:	2b7a      	cmp	r3, #122	@ 0x7a
 801cbca:	d808      	bhi.n	801cbde <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801cbcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cbd0:	f043 0301 	orr.w	r3, r3, #1
 801cbd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801cbd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cbda:	3b20      	subs	r3, #32
 801cbdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801cbde:	6a3b      	ldr	r3, [r7, #32]
 801cbe0:	1c5a      	adds	r2, r3, #1
 801cbe2:	623a      	str	r2, [r7, #32]
 801cbe4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801cbe6:	b2d1      	uxtb	r1, r2
 801cbe8:	687a      	ldr	r2, [r7, #4]
 801cbea:	4413      	add	r3, r2
 801cbec:	460a      	mov	r2, r1
 801cbee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801cbf2:	e763      	b.n	801cabc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801cbf4:	bf00      	nop
 801cbf6:	e006      	b.n	801cc06 <create_name+0x2da>
 801cbf8:	0801ead4 	.word	0x0801ead4
 801cbfc:	0801eb6c 	.word	0x0801eb6c
 801cc00:	0801eae0 	.word	0x0801eae0
			if (si > di) break;			/* No extension */
 801cc04:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801cc0c:	2be5      	cmp	r3, #229	@ 0xe5
 801cc0e:	d103      	bne.n	801cc18 <create_name+0x2ec>
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	2205      	movs	r2, #5
 801cc14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801cc18:	69fb      	ldr	r3, [r7, #28]
 801cc1a:	2b08      	cmp	r3, #8
 801cc1c:	d104      	bne.n	801cc28 <create_name+0x2fc>
 801cc1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc22:	009b      	lsls	r3, r3, #2
 801cc24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801cc28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc2c:	f003 030c 	and.w	r3, r3, #12
 801cc30:	2b0c      	cmp	r3, #12
 801cc32:	d005      	beq.n	801cc40 <create_name+0x314>
 801cc34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc38:	f003 0303 	and.w	r3, r3, #3
 801cc3c:	2b03      	cmp	r3, #3
 801cc3e:	d105      	bne.n	801cc4c <create_name+0x320>
 801cc40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc44:	f043 0302 	orr.w	r3, r3, #2
 801cc48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801cc4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc50:	f003 0302 	and.w	r3, r3, #2
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d117      	bne.n	801cc88 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801cc58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc5c:	f003 0303 	and.w	r3, r3, #3
 801cc60:	2b01      	cmp	r3, #1
 801cc62:	d105      	bne.n	801cc70 <create_name+0x344>
 801cc64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc68:	f043 0310 	orr.w	r3, r3, #16
 801cc6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801cc70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cc74:	f003 030c 	and.w	r3, r3, #12
 801cc78:	2b04      	cmp	r3, #4
 801cc7a:	d105      	bne.n	801cc88 <create_name+0x35c>
 801cc7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cc80:	f043 0308 	orr.w	r3, r3, #8
 801cc84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801cc8e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801cc92:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801cc94:	4618      	mov	r0, r3
 801cc96:	3728      	adds	r7, #40	@ 0x28
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	bd80      	pop	{r7, pc}

0801cc9c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b086      	sub	sp, #24
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
 801cca4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801ccaa:	693b      	ldr	r3, [r7, #16]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801ccb0:	e002      	b.n	801ccb8 <follow_path+0x1c>
 801ccb2:	683b      	ldr	r3, [r7, #0]
 801ccb4:	3301      	adds	r3, #1
 801ccb6:	603b      	str	r3, [r7, #0]
 801ccb8:	683b      	ldr	r3, [r7, #0]
 801ccba:	781b      	ldrb	r3, [r3, #0]
 801ccbc:	2b2f      	cmp	r3, #47	@ 0x2f
 801ccbe:	d0f8      	beq.n	801ccb2 <follow_path+0x16>
 801ccc0:	683b      	ldr	r3, [r7, #0]
 801ccc2:	781b      	ldrb	r3, [r3, #0]
 801ccc4:	2b5c      	cmp	r3, #92	@ 0x5c
 801ccc6:	d0f4      	beq.n	801ccb2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801ccc8:	693b      	ldr	r3, [r7, #16]
 801ccca:	2200      	movs	r2, #0
 801cccc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801ccce:	683b      	ldr	r3, [r7, #0]
 801ccd0:	781b      	ldrb	r3, [r3, #0]
 801ccd2:	2b1f      	cmp	r3, #31
 801ccd4:	d80a      	bhi.n	801ccec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	2280      	movs	r2, #128	@ 0x80
 801ccda:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801ccde:	2100      	movs	r1, #0
 801cce0:	6878      	ldr	r0, [r7, #4]
 801cce2:	f7fe ffaa 	bl	801bc3a <dir_sdi>
 801cce6:	4603      	mov	r3, r0
 801cce8:	75fb      	strb	r3, [r7, #23]
 801ccea:	e048      	b.n	801cd7e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801ccec:	463b      	mov	r3, r7
 801ccee:	4619      	mov	r1, r3
 801ccf0:	6878      	ldr	r0, [r7, #4]
 801ccf2:	f7ff fe1b 	bl	801c92c <create_name>
 801ccf6:	4603      	mov	r3, r0
 801ccf8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801ccfa:	7dfb      	ldrb	r3, [r7, #23]
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	d139      	bne.n	801cd74 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801cd00:	6878      	ldr	r0, [r7, #4]
 801cd02:	f7ff fc11 	bl	801c528 <dir_find>
 801cd06:	4603      	mov	r3, r0
 801cd08:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801cd10:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801cd12:	7dfb      	ldrb	r3, [r7, #23]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d00a      	beq.n	801cd2e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801cd18:	7dfb      	ldrb	r3, [r7, #23]
 801cd1a:	2b04      	cmp	r3, #4
 801cd1c:	d12c      	bne.n	801cd78 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801cd1e:	7afb      	ldrb	r3, [r7, #11]
 801cd20:	f003 0304 	and.w	r3, r3, #4
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	d127      	bne.n	801cd78 <follow_path+0xdc>
 801cd28:	2305      	movs	r3, #5
 801cd2a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801cd2c:	e024      	b.n	801cd78 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cd2e:	7afb      	ldrb	r3, [r7, #11]
 801cd30:	f003 0304 	and.w	r3, r3, #4
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d121      	bne.n	801cd7c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801cd38:	693b      	ldr	r3, [r7, #16]
 801cd3a:	799b      	ldrb	r3, [r3, #6]
 801cd3c:	f003 0310 	and.w	r3, r3, #16
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	d102      	bne.n	801cd4a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801cd44:	2305      	movs	r3, #5
 801cd46:	75fb      	strb	r3, [r7, #23]
 801cd48:	e019      	b.n	801cd7e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801cd4a:	68fb      	ldr	r3, [r7, #12]
 801cd4c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	695b      	ldr	r3, [r3, #20]
 801cd54:	68fa      	ldr	r2, [r7, #12]
 801cd56:	8992      	ldrh	r2, [r2, #12]
 801cd58:	fbb3 f0f2 	udiv	r0, r3, r2
 801cd5c:	fb00 f202 	mul.w	r2, r0, r2
 801cd60:	1a9b      	subs	r3, r3, r2
 801cd62:	440b      	add	r3, r1
 801cd64:	4619      	mov	r1, r3
 801cd66:	68f8      	ldr	r0, [r7, #12]
 801cd68:	f7ff f90d 	bl	801bf86 <ld_clust>
 801cd6c:	4602      	mov	r2, r0
 801cd6e:	693b      	ldr	r3, [r7, #16]
 801cd70:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801cd72:	e7bb      	b.n	801ccec <follow_path+0x50>
			if (res != FR_OK) break;
 801cd74:	bf00      	nop
 801cd76:	e002      	b.n	801cd7e <follow_path+0xe2>
				break;
 801cd78:	bf00      	nop
 801cd7a:	e000      	b.n	801cd7e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801cd7c:	bf00      	nop
			}
		}
	}

	return res;
 801cd7e:	7dfb      	ldrb	r3, [r7, #23]
}
 801cd80:	4618      	mov	r0, r3
 801cd82:	3718      	adds	r7, #24
 801cd84:	46bd      	mov	sp, r7
 801cd86:	bd80      	pop	{r7, pc}

0801cd88 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801cd88:	b480      	push	{r7}
 801cd8a:	b087      	sub	sp, #28
 801cd8c:	af00      	add	r7, sp, #0
 801cd8e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801cd90:	f04f 33ff 	mov.w	r3, #4294967295
 801cd94:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d031      	beq.n	801ce02 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	681b      	ldr	r3, [r3, #0]
 801cda2:	617b      	str	r3, [r7, #20]
 801cda4:	e002      	b.n	801cdac <get_ldnumber+0x24>
 801cda6:	697b      	ldr	r3, [r7, #20]
 801cda8:	3301      	adds	r3, #1
 801cdaa:	617b      	str	r3, [r7, #20]
 801cdac:	697b      	ldr	r3, [r7, #20]
 801cdae:	781b      	ldrb	r3, [r3, #0]
 801cdb0:	2b1f      	cmp	r3, #31
 801cdb2:	d903      	bls.n	801cdbc <get_ldnumber+0x34>
 801cdb4:	697b      	ldr	r3, [r7, #20]
 801cdb6:	781b      	ldrb	r3, [r3, #0]
 801cdb8:	2b3a      	cmp	r3, #58	@ 0x3a
 801cdba:	d1f4      	bne.n	801cda6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801cdbc:	697b      	ldr	r3, [r7, #20]
 801cdbe:	781b      	ldrb	r3, [r3, #0]
 801cdc0:	2b3a      	cmp	r3, #58	@ 0x3a
 801cdc2:	d11c      	bne.n	801cdfe <get_ldnumber+0x76>
			tp = *path;
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	681b      	ldr	r3, [r3, #0]
 801cdc8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801cdca:	68fb      	ldr	r3, [r7, #12]
 801cdcc:	1c5a      	adds	r2, r3, #1
 801cdce:	60fa      	str	r2, [r7, #12]
 801cdd0:	781b      	ldrb	r3, [r3, #0]
 801cdd2:	3b30      	subs	r3, #48	@ 0x30
 801cdd4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801cdd6:	68bb      	ldr	r3, [r7, #8]
 801cdd8:	2b09      	cmp	r3, #9
 801cdda:	d80e      	bhi.n	801cdfa <get_ldnumber+0x72>
 801cddc:	68fa      	ldr	r2, [r7, #12]
 801cdde:	697b      	ldr	r3, [r7, #20]
 801cde0:	429a      	cmp	r2, r3
 801cde2:	d10a      	bne.n	801cdfa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801cde4:	68bb      	ldr	r3, [r7, #8]
 801cde6:	2b00      	cmp	r3, #0
 801cde8:	d107      	bne.n	801cdfa <get_ldnumber+0x72>
					vol = (int)i;
 801cdea:	68bb      	ldr	r3, [r7, #8]
 801cdec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801cdee:	697b      	ldr	r3, [r7, #20]
 801cdf0:	3301      	adds	r3, #1
 801cdf2:	617b      	str	r3, [r7, #20]
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	697a      	ldr	r2, [r7, #20]
 801cdf8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801cdfa:	693b      	ldr	r3, [r7, #16]
 801cdfc:	e002      	b.n	801ce04 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801cdfe:	2300      	movs	r3, #0
 801ce00:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801ce02:	693b      	ldr	r3, [r7, #16]
}
 801ce04:	4618      	mov	r0, r3
 801ce06:	371c      	adds	r7, #28
 801ce08:	46bd      	mov	sp, r7
 801ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce0e:	4770      	bx	lr

0801ce10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b082      	sub	sp, #8
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	6078      	str	r0, [r7, #4]
 801ce18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	2200      	movs	r2, #0
 801ce1e:	70da      	strb	r2, [r3, #3]
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	f04f 32ff 	mov.w	r2, #4294967295
 801ce26:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801ce28:	6839      	ldr	r1, [r7, #0]
 801ce2a:	6878      	ldr	r0, [r7, #4]
 801ce2c:	f7fe fb26 	bl	801b47c <move_window>
 801ce30:	4603      	mov	r3, r0
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d001      	beq.n	801ce3a <check_fs+0x2a>
 801ce36:	2304      	movs	r3, #4
 801ce38:	e038      	b.n	801ceac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	3338      	adds	r3, #56	@ 0x38
 801ce3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801ce42:	4618      	mov	r0, r3
 801ce44:	f7fe f86a 	bl	801af1c <ld_word>
 801ce48:	4603      	mov	r3, r0
 801ce4a:	461a      	mov	r2, r3
 801ce4c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801ce50:	429a      	cmp	r2, r3
 801ce52:	d001      	beq.n	801ce58 <check_fs+0x48>
 801ce54:	2303      	movs	r3, #3
 801ce56:	e029      	b.n	801ceac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801ce5e:	2be9      	cmp	r3, #233	@ 0xe9
 801ce60:	d009      	beq.n	801ce76 <check_fs+0x66>
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801ce68:	2beb      	cmp	r3, #235	@ 0xeb
 801ce6a:	d11e      	bne.n	801ceaa <check_fs+0x9a>
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801ce72:	2b90      	cmp	r3, #144	@ 0x90
 801ce74:	d119      	bne.n	801ceaa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	3338      	adds	r3, #56	@ 0x38
 801ce7a:	3336      	adds	r3, #54	@ 0x36
 801ce7c:	4618      	mov	r0, r3
 801ce7e:	f7fe f865 	bl	801af4c <ld_dword>
 801ce82:	4603      	mov	r3, r0
 801ce84:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801ce88:	4a0a      	ldr	r2, [pc, #40]	@ (801ceb4 <check_fs+0xa4>)
 801ce8a:	4293      	cmp	r3, r2
 801ce8c:	d101      	bne.n	801ce92 <check_fs+0x82>
 801ce8e:	2300      	movs	r3, #0
 801ce90:	e00c      	b.n	801ceac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	3338      	adds	r3, #56	@ 0x38
 801ce96:	3352      	adds	r3, #82	@ 0x52
 801ce98:	4618      	mov	r0, r3
 801ce9a:	f7fe f857 	bl	801af4c <ld_dword>
 801ce9e:	4603      	mov	r3, r0
 801cea0:	4a05      	ldr	r2, [pc, #20]	@ (801ceb8 <check_fs+0xa8>)
 801cea2:	4293      	cmp	r3, r2
 801cea4:	d101      	bne.n	801ceaa <check_fs+0x9a>
 801cea6:	2300      	movs	r3, #0
 801cea8:	e000      	b.n	801ceac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801ceaa:	2302      	movs	r3, #2
}
 801ceac:	4618      	mov	r0, r3
 801ceae:	3708      	adds	r7, #8
 801ceb0:	46bd      	mov	sp, r7
 801ceb2:	bd80      	pop	{r7, pc}
 801ceb4:	00544146 	.word	0x00544146
 801ceb8:	33544146 	.word	0x33544146

0801cebc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801cebc:	b580      	push	{r7, lr}
 801cebe:	b096      	sub	sp, #88	@ 0x58
 801cec0:	af00      	add	r7, sp, #0
 801cec2:	60f8      	str	r0, [r7, #12]
 801cec4:	60b9      	str	r1, [r7, #8]
 801cec6:	4613      	mov	r3, r2
 801cec8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801ceca:	68bb      	ldr	r3, [r7, #8]
 801cecc:	2200      	movs	r2, #0
 801cece:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801ced0:	68f8      	ldr	r0, [r7, #12]
 801ced2:	f7ff ff59 	bl	801cd88 <get_ldnumber>
 801ced6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801ced8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	da01      	bge.n	801cee2 <find_volume+0x26>
 801cede:	230b      	movs	r3, #11
 801cee0:	e265      	b.n	801d3ae <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801cee2:	4a9f      	ldr	r2, [pc, #636]	@ (801d160 <find_volume+0x2a4>)
 801cee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ceea:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801ceec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	d101      	bne.n	801cef6 <find_volume+0x3a>
 801cef2:	230c      	movs	r3, #12
 801cef4:	e25b      	b.n	801d3ae <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801cef6:	68bb      	ldr	r3, [r7, #8]
 801cef8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cefa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801cefc:	79fb      	ldrb	r3, [r7, #7]
 801cefe:	f023 0301 	bic.w	r3, r3, #1
 801cf02:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801cf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf06:	781b      	ldrb	r3, [r3, #0]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d01a      	beq.n	801cf42 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801cf0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf0e:	785b      	ldrb	r3, [r3, #1]
 801cf10:	4618      	mov	r0, r3
 801cf12:	f7fd ff63 	bl	801addc <disk_status>
 801cf16:	4603      	mov	r3, r0
 801cf18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801cf1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cf20:	f003 0301 	and.w	r3, r3, #1
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d10c      	bne.n	801cf42 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801cf28:	79fb      	ldrb	r3, [r7, #7]
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d007      	beq.n	801cf3e <find_volume+0x82>
 801cf2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cf32:	f003 0304 	and.w	r3, r3, #4
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d001      	beq.n	801cf3e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801cf3a:	230a      	movs	r3, #10
 801cf3c:	e237      	b.n	801d3ae <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801cf3e:	2300      	movs	r3, #0
 801cf40:	e235      	b.n	801d3ae <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801cf42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf44:	2200      	movs	r2, #0
 801cf46:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801cf48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cf4a:	b2da      	uxtb	r2, r3
 801cf4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801cf50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf52:	785b      	ldrb	r3, [r3, #1]
 801cf54:	4618      	mov	r0, r3
 801cf56:	f7fd ff5b 	bl	801ae10 <disk_initialize>
 801cf5a:	4603      	mov	r3, r0
 801cf5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801cf60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cf64:	f003 0301 	and.w	r3, r3, #1
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	d001      	beq.n	801cf70 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801cf6c:	2303      	movs	r3, #3
 801cf6e:	e21e      	b.n	801d3ae <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801cf70:	79fb      	ldrb	r3, [r7, #7]
 801cf72:	2b00      	cmp	r3, #0
 801cf74:	d007      	beq.n	801cf86 <find_volume+0xca>
 801cf76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801cf7a:	f003 0304 	and.w	r3, r3, #4
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d001      	beq.n	801cf86 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801cf82:	230a      	movs	r3, #10
 801cf84:	e213      	b.n	801d3ae <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801cf86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf88:	7858      	ldrb	r0, [r3, #1]
 801cf8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf8c:	330c      	adds	r3, #12
 801cf8e:	461a      	mov	r2, r3
 801cf90:	2102      	movs	r1, #2
 801cf92:	f7fd ffa5 	bl	801aee0 <disk_ioctl>
 801cf96:	4603      	mov	r3, r0
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d001      	beq.n	801cfa0 <find_volume+0xe4>
 801cf9c:	2301      	movs	r3, #1
 801cf9e:	e206      	b.n	801d3ae <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801cfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfa2:	899b      	ldrh	r3, [r3, #12]
 801cfa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801cfa8:	d80d      	bhi.n	801cfc6 <find_volume+0x10a>
 801cfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfac:	899b      	ldrh	r3, [r3, #12]
 801cfae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cfb2:	d308      	bcc.n	801cfc6 <find_volume+0x10a>
 801cfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb6:	899b      	ldrh	r3, [r3, #12]
 801cfb8:	461a      	mov	r2, r3
 801cfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfbc:	899b      	ldrh	r3, [r3, #12]
 801cfbe:	3b01      	subs	r3, #1
 801cfc0:	4013      	ands	r3, r2
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d001      	beq.n	801cfca <find_volume+0x10e>
 801cfc6:	2301      	movs	r3, #1
 801cfc8:	e1f1      	b.n	801d3ae <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801cfca:	2300      	movs	r3, #0
 801cfcc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801cfce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801cfd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cfd2:	f7ff ff1d 	bl	801ce10 <check_fs>
 801cfd6:	4603      	mov	r3, r0
 801cfd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801cfdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cfe0:	2b02      	cmp	r3, #2
 801cfe2:	d149      	bne.n	801d078 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801cfe4:	2300      	movs	r3, #0
 801cfe6:	643b      	str	r3, [r7, #64]	@ 0x40
 801cfe8:	e01e      	b.n	801d028 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801cfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801cff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cff2:	011b      	lsls	r3, r3, #4
 801cff4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801cff8:	4413      	add	r3, r2
 801cffa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801cffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cffe:	3304      	adds	r3, #4
 801d000:	781b      	ldrb	r3, [r3, #0]
 801d002:	2b00      	cmp	r3, #0
 801d004:	d006      	beq.n	801d014 <find_volume+0x158>
 801d006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d008:	3308      	adds	r3, #8
 801d00a:	4618      	mov	r0, r3
 801d00c:	f7fd ff9e 	bl	801af4c <ld_dword>
 801d010:	4602      	mov	r2, r0
 801d012:	e000      	b.n	801d016 <find_volume+0x15a>
 801d014:	2200      	movs	r2, #0
 801d016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d018:	009b      	lsls	r3, r3, #2
 801d01a:	3358      	adds	r3, #88	@ 0x58
 801d01c:	443b      	add	r3, r7
 801d01e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d024:	3301      	adds	r3, #1
 801d026:	643b      	str	r3, [r7, #64]	@ 0x40
 801d028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d02a:	2b03      	cmp	r3, #3
 801d02c:	d9dd      	bls.n	801cfea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801d02e:	2300      	movs	r3, #0
 801d030:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801d032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d034:	2b00      	cmp	r3, #0
 801d036:	d002      	beq.n	801d03e <find_volume+0x182>
 801d038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d03a:	3b01      	subs	r3, #1
 801d03c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801d03e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d040:	009b      	lsls	r3, r3, #2
 801d042:	3358      	adds	r3, #88	@ 0x58
 801d044:	443b      	add	r3, r7
 801d046:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801d04a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801d04c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d005      	beq.n	801d05e <find_volume+0x1a2>
 801d052:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d054:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d056:	f7ff fedb 	bl	801ce10 <check_fs>
 801d05a:	4603      	mov	r3, r0
 801d05c:	e000      	b.n	801d060 <find_volume+0x1a4>
 801d05e:	2303      	movs	r3, #3
 801d060:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801d064:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d068:	2b01      	cmp	r3, #1
 801d06a:	d905      	bls.n	801d078 <find_volume+0x1bc>
 801d06c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d06e:	3301      	adds	r3, #1
 801d070:	643b      	str	r3, [r7, #64]	@ 0x40
 801d072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d074:	2b03      	cmp	r3, #3
 801d076:	d9e2      	bls.n	801d03e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801d078:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d07c:	2b04      	cmp	r3, #4
 801d07e:	d101      	bne.n	801d084 <find_volume+0x1c8>
 801d080:	2301      	movs	r3, #1
 801d082:	e194      	b.n	801d3ae <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801d084:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d088:	2b01      	cmp	r3, #1
 801d08a:	d901      	bls.n	801d090 <find_volume+0x1d4>
 801d08c:	230d      	movs	r3, #13
 801d08e:	e18e      	b.n	801d3ae <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801d090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d092:	3338      	adds	r3, #56	@ 0x38
 801d094:	330b      	adds	r3, #11
 801d096:	4618      	mov	r0, r3
 801d098:	f7fd ff40 	bl	801af1c <ld_word>
 801d09c:	4603      	mov	r3, r0
 801d09e:	461a      	mov	r2, r3
 801d0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0a2:	899b      	ldrh	r3, [r3, #12]
 801d0a4:	429a      	cmp	r2, r3
 801d0a6:	d001      	beq.n	801d0ac <find_volume+0x1f0>
 801d0a8:	230d      	movs	r3, #13
 801d0aa:	e180      	b.n	801d3ae <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801d0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0ae:	3338      	adds	r3, #56	@ 0x38
 801d0b0:	3316      	adds	r3, #22
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	f7fd ff32 	bl	801af1c <ld_word>
 801d0b8:	4603      	mov	r3, r0
 801d0ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801d0bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d106      	bne.n	801d0d0 <find_volume+0x214>
 801d0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0c4:	3338      	adds	r3, #56	@ 0x38
 801d0c6:	3324      	adds	r3, #36	@ 0x24
 801d0c8:	4618      	mov	r0, r3
 801d0ca:	f7fd ff3f 	bl	801af4c <ld_dword>
 801d0ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801d0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d0d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801d0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0d8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801d0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801d0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0e2:	789b      	ldrb	r3, [r3, #2]
 801d0e4:	2b01      	cmp	r3, #1
 801d0e6:	d005      	beq.n	801d0f4 <find_volume+0x238>
 801d0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0ea:	789b      	ldrb	r3, [r3, #2]
 801d0ec:	2b02      	cmp	r3, #2
 801d0ee:	d001      	beq.n	801d0f4 <find_volume+0x238>
 801d0f0:	230d      	movs	r3, #13
 801d0f2:	e15c      	b.n	801d3ae <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801d0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0f6:	789b      	ldrb	r3, [r3, #2]
 801d0f8:	461a      	mov	r2, r3
 801d0fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d0fc:	fb02 f303 	mul.w	r3, r2, r3
 801d100:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801d102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d104:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801d108:	461a      	mov	r2, r3
 801d10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d10c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801d10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d110:	895b      	ldrh	r3, [r3, #10]
 801d112:	2b00      	cmp	r3, #0
 801d114:	d008      	beq.n	801d128 <find_volume+0x26c>
 801d116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d118:	895b      	ldrh	r3, [r3, #10]
 801d11a:	461a      	mov	r2, r3
 801d11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d11e:	895b      	ldrh	r3, [r3, #10]
 801d120:	3b01      	subs	r3, #1
 801d122:	4013      	ands	r3, r2
 801d124:	2b00      	cmp	r3, #0
 801d126:	d001      	beq.n	801d12c <find_volume+0x270>
 801d128:	230d      	movs	r3, #13
 801d12a:	e140      	b.n	801d3ae <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801d12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d12e:	3338      	adds	r3, #56	@ 0x38
 801d130:	3311      	adds	r3, #17
 801d132:	4618      	mov	r0, r3
 801d134:	f7fd fef2 	bl	801af1c <ld_word>
 801d138:	4603      	mov	r3, r0
 801d13a:	461a      	mov	r2, r3
 801d13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d13e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801d140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d142:	891b      	ldrh	r3, [r3, #8]
 801d144:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d146:	8992      	ldrh	r2, [r2, #12]
 801d148:	0952      	lsrs	r2, r2, #5
 801d14a:	b292      	uxth	r2, r2
 801d14c:	fbb3 f1f2 	udiv	r1, r3, r2
 801d150:	fb01 f202 	mul.w	r2, r1, r2
 801d154:	1a9b      	subs	r3, r3, r2
 801d156:	b29b      	uxth	r3, r3
 801d158:	2b00      	cmp	r3, #0
 801d15a:	d003      	beq.n	801d164 <find_volume+0x2a8>
 801d15c:	230d      	movs	r3, #13
 801d15e:	e126      	b.n	801d3ae <find_volume+0x4f2>
 801d160:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801d164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d166:	3338      	adds	r3, #56	@ 0x38
 801d168:	3313      	adds	r3, #19
 801d16a:	4618      	mov	r0, r3
 801d16c:	f7fd fed6 	bl	801af1c <ld_word>
 801d170:	4603      	mov	r3, r0
 801d172:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801d174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d176:	2b00      	cmp	r3, #0
 801d178:	d106      	bne.n	801d188 <find_volume+0x2cc>
 801d17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d17c:	3338      	adds	r3, #56	@ 0x38
 801d17e:	3320      	adds	r3, #32
 801d180:	4618      	mov	r0, r3
 801d182:	f7fd fee3 	bl	801af4c <ld_dword>
 801d186:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801d188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d18a:	3338      	adds	r3, #56	@ 0x38
 801d18c:	330e      	adds	r3, #14
 801d18e:	4618      	mov	r0, r3
 801d190:	f7fd fec4 	bl	801af1c <ld_word>
 801d194:	4603      	mov	r3, r0
 801d196:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801d198:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d101      	bne.n	801d1a2 <find_volume+0x2e6>
 801d19e:	230d      	movs	r3, #13
 801d1a0:	e105      	b.n	801d3ae <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801d1a2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d1a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1a6:	4413      	add	r3, r2
 801d1a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d1aa:	8911      	ldrh	r1, [r2, #8]
 801d1ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d1ae:	8992      	ldrh	r2, [r2, #12]
 801d1b0:	0952      	lsrs	r2, r2, #5
 801d1b2:	b292      	uxth	r2, r2
 801d1b4:	fbb1 f2f2 	udiv	r2, r1, r2
 801d1b8:	b292      	uxth	r2, r2
 801d1ba:	4413      	add	r3, r2
 801d1bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801d1be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1c2:	429a      	cmp	r2, r3
 801d1c4:	d201      	bcs.n	801d1ca <find_volume+0x30e>
 801d1c6:	230d      	movs	r3, #13
 801d1c8:	e0f1      	b.n	801d3ae <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801d1ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1ce:	1ad3      	subs	r3, r2, r3
 801d1d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d1d2:	8952      	ldrh	r2, [r2, #10]
 801d1d4:	fbb3 f3f2 	udiv	r3, r3, r2
 801d1d8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	d101      	bne.n	801d1e4 <find_volume+0x328>
 801d1e0:	230d      	movs	r3, #13
 801d1e2:	e0e4      	b.n	801d3ae <find_volume+0x4f2>
		fmt = FS_FAT32;
 801d1e4:	2303      	movs	r3, #3
 801d1e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801d1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1ec:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801d1f0:	4293      	cmp	r3, r2
 801d1f2:	d802      	bhi.n	801d1fa <find_volume+0x33e>
 801d1f4:	2302      	movs	r3, #2
 801d1f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801d1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1fc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801d200:	4293      	cmp	r3, r2
 801d202:	d802      	bhi.n	801d20a <find_volume+0x34e>
 801d204:	2301      	movs	r3, #1
 801d206:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801d20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d20c:	1c9a      	adds	r2, r3, #2
 801d20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d210:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801d212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d214:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d216:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801d218:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d21a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d21c:	441a      	add	r2, r3
 801d21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d220:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801d222:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d226:	441a      	add	r2, r3
 801d228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d22a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801d22c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d230:	2b03      	cmp	r3, #3
 801d232:	d11e      	bne.n	801d272 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801d234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d236:	3338      	adds	r3, #56	@ 0x38
 801d238:	332a      	adds	r3, #42	@ 0x2a
 801d23a:	4618      	mov	r0, r3
 801d23c:	f7fd fe6e 	bl	801af1c <ld_word>
 801d240:	4603      	mov	r3, r0
 801d242:	2b00      	cmp	r3, #0
 801d244:	d001      	beq.n	801d24a <find_volume+0x38e>
 801d246:	230d      	movs	r3, #13
 801d248:	e0b1      	b.n	801d3ae <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801d24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d24c:	891b      	ldrh	r3, [r3, #8]
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d001      	beq.n	801d256 <find_volume+0x39a>
 801d252:	230d      	movs	r3, #13
 801d254:	e0ab      	b.n	801d3ae <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801d256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d258:	3338      	adds	r3, #56	@ 0x38
 801d25a:	332c      	adds	r3, #44	@ 0x2c
 801d25c:	4618      	mov	r0, r3
 801d25e:	f7fd fe75 	bl	801af4c <ld_dword>
 801d262:	4602      	mov	r2, r0
 801d264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d266:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d26a:	69db      	ldr	r3, [r3, #28]
 801d26c:	009b      	lsls	r3, r3, #2
 801d26e:	647b      	str	r3, [r7, #68]	@ 0x44
 801d270:	e01f      	b.n	801d2b2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d274:	891b      	ldrh	r3, [r3, #8]
 801d276:	2b00      	cmp	r3, #0
 801d278:	d101      	bne.n	801d27e <find_volume+0x3c2>
 801d27a:	230d      	movs	r3, #13
 801d27c:	e097      	b.n	801d3ae <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d280:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d284:	441a      	add	r2, r3
 801d286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d288:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d28a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d28e:	2b02      	cmp	r3, #2
 801d290:	d103      	bne.n	801d29a <find_volume+0x3de>
 801d292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d294:	69db      	ldr	r3, [r3, #28]
 801d296:	005b      	lsls	r3, r3, #1
 801d298:	e00a      	b.n	801d2b0 <find_volume+0x3f4>
 801d29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d29c:	69da      	ldr	r2, [r3, #28]
 801d29e:	4613      	mov	r3, r2
 801d2a0:	005b      	lsls	r3, r3, #1
 801d2a2:	4413      	add	r3, r2
 801d2a4:	085a      	lsrs	r2, r3, #1
 801d2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2a8:	69db      	ldr	r3, [r3, #28]
 801d2aa:	f003 0301 	and.w	r3, r3, #1
 801d2ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d2b0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2b4:	6a1a      	ldr	r2, [r3, #32]
 801d2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2b8:	899b      	ldrh	r3, [r3, #12]
 801d2ba:	4619      	mov	r1, r3
 801d2bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d2be:	440b      	add	r3, r1
 801d2c0:	3b01      	subs	r3, #1
 801d2c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d2c4:	8989      	ldrh	r1, [r1, #12]
 801d2c6:	fbb3 f3f1 	udiv	r3, r3, r1
 801d2ca:	429a      	cmp	r2, r3
 801d2cc:	d201      	bcs.n	801d2d2 <find_volume+0x416>
 801d2ce:	230d      	movs	r3, #13
 801d2d0:	e06d      	b.n	801d3ae <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2d4:	f04f 32ff 	mov.w	r2, #4294967295
 801d2d8:	619a      	str	r2, [r3, #24]
 801d2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2dc:	699a      	ldr	r2, [r3, #24]
 801d2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2e0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801d2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2e4:	2280      	movs	r2, #128	@ 0x80
 801d2e6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d2e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d2ec:	2b03      	cmp	r3, #3
 801d2ee:	d149      	bne.n	801d384 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d2f2:	3338      	adds	r3, #56	@ 0x38
 801d2f4:	3330      	adds	r3, #48	@ 0x30
 801d2f6:	4618      	mov	r0, r3
 801d2f8:	f7fd fe10 	bl	801af1c <ld_word>
 801d2fc:	4603      	mov	r3, r0
 801d2fe:	2b01      	cmp	r3, #1
 801d300:	d140      	bne.n	801d384 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d304:	3301      	adds	r3, #1
 801d306:	4619      	mov	r1, r3
 801d308:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d30a:	f7fe f8b7 	bl	801b47c <move_window>
 801d30e:	4603      	mov	r3, r0
 801d310:	2b00      	cmp	r3, #0
 801d312:	d137      	bne.n	801d384 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801d314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d316:	2200      	movs	r2, #0
 801d318:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d31c:	3338      	adds	r3, #56	@ 0x38
 801d31e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d322:	4618      	mov	r0, r3
 801d324:	f7fd fdfa 	bl	801af1c <ld_word>
 801d328:	4603      	mov	r3, r0
 801d32a:	461a      	mov	r2, r3
 801d32c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d330:	429a      	cmp	r2, r3
 801d332:	d127      	bne.n	801d384 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d336:	3338      	adds	r3, #56	@ 0x38
 801d338:	4618      	mov	r0, r3
 801d33a:	f7fd fe07 	bl	801af4c <ld_dword>
 801d33e:	4603      	mov	r3, r0
 801d340:	4a1d      	ldr	r2, [pc, #116]	@ (801d3b8 <find_volume+0x4fc>)
 801d342:	4293      	cmp	r3, r2
 801d344:	d11e      	bne.n	801d384 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d348:	3338      	adds	r3, #56	@ 0x38
 801d34a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d34e:	4618      	mov	r0, r3
 801d350:	f7fd fdfc 	bl	801af4c <ld_dword>
 801d354:	4603      	mov	r3, r0
 801d356:	4a19      	ldr	r2, [pc, #100]	@ (801d3bc <find_volume+0x500>)
 801d358:	4293      	cmp	r3, r2
 801d35a:	d113      	bne.n	801d384 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d35e:	3338      	adds	r3, #56	@ 0x38
 801d360:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d364:	4618      	mov	r0, r3
 801d366:	f7fd fdf1 	bl	801af4c <ld_dword>
 801d36a:	4602      	mov	r2, r0
 801d36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d36e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d372:	3338      	adds	r3, #56	@ 0x38
 801d374:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d378:	4618      	mov	r0, r3
 801d37a:	f7fd fde7 	bl	801af4c <ld_dword>
 801d37e:	4602      	mov	r2, r0
 801d380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d382:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d386:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d38a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d38c:	4b0c      	ldr	r3, [pc, #48]	@ (801d3c0 <find_volume+0x504>)
 801d38e:	881b      	ldrh	r3, [r3, #0]
 801d390:	3301      	adds	r3, #1
 801d392:	b29a      	uxth	r2, r3
 801d394:	4b0a      	ldr	r3, [pc, #40]	@ (801d3c0 <find_volume+0x504>)
 801d396:	801a      	strh	r2, [r3, #0]
 801d398:	4b09      	ldr	r3, [pc, #36]	@ (801d3c0 <find_volume+0x504>)
 801d39a:	881a      	ldrh	r2, [r3, #0]
 801d39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d39e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801d3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d3a2:	4a08      	ldr	r2, [pc, #32]	@ (801d3c4 <find_volume+0x508>)
 801d3a4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d3a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d3a8:	f7fe f800 	bl	801b3ac <clear_lock>
#endif
	return FR_OK;
 801d3ac:	2300      	movs	r3, #0
}
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	3758      	adds	r7, #88	@ 0x58
 801d3b2:	46bd      	mov	sp, r7
 801d3b4:	bd80      	pop	{r7, pc}
 801d3b6:	bf00      	nop
 801d3b8:	41615252 	.word	0x41615252
 801d3bc:	61417272 	.word	0x61417272
 801d3c0:	24000554 	.word	0x24000554
 801d3c4:	24000568 	.word	0x24000568

0801d3c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d3c8:	b580      	push	{r7, lr}
 801d3ca:	b084      	sub	sp, #16
 801d3cc:	af00      	add	r7, sp, #0
 801d3ce:	6078      	str	r0, [r7, #4]
 801d3d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d3d2:	2309      	movs	r3, #9
 801d3d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d3d6:	687b      	ldr	r3, [r7, #4]
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d01c      	beq.n	801d416 <validate+0x4e>
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	681b      	ldr	r3, [r3, #0]
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d018      	beq.n	801d416 <validate+0x4e>
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	781b      	ldrb	r3, [r3, #0]
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d013      	beq.n	801d416 <validate+0x4e>
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	889a      	ldrh	r2, [r3, #4]
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	88db      	ldrh	r3, [r3, #6]
 801d3f8:	429a      	cmp	r2, r3
 801d3fa:	d10c      	bne.n	801d416 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	785b      	ldrb	r3, [r3, #1]
 801d402:	4618      	mov	r0, r3
 801d404:	f7fd fcea 	bl	801addc <disk_status>
 801d408:	4603      	mov	r3, r0
 801d40a:	f003 0301 	and.w	r3, r3, #1
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d101      	bne.n	801d416 <validate+0x4e>
			res = FR_OK;
 801d412:	2300      	movs	r3, #0
 801d414:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d416:	7bfb      	ldrb	r3, [r7, #15]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d102      	bne.n	801d422 <validate+0x5a>
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	e000      	b.n	801d424 <validate+0x5c>
 801d422:	2300      	movs	r3, #0
 801d424:	683a      	ldr	r2, [r7, #0]
 801d426:	6013      	str	r3, [r2, #0]
	return res;
 801d428:	7bfb      	ldrb	r3, [r7, #15]
}
 801d42a:	4618      	mov	r0, r3
 801d42c:	3710      	adds	r7, #16
 801d42e:	46bd      	mov	sp, r7
 801d430:	bd80      	pop	{r7, pc}
	...

0801d434 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d434:	b580      	push	{r7, lr}
 801d436:	b088      	sub	sp, #32
 801d438:	af00      	add	r7, sp, #0
 801d43a:	60f8      	str	r0, [r7, #12]
 801d43c:	60b9      	str	r1, [r7, #8]
 801d43e:	4613      	mov	r3, r2
 801d440:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d442:	68bb      	ldr	r3, [r7, #8]
 801d444:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d446:	f107 0310 	add.w	r3, r7, #16
 801d44a:	4618      	mov	r0, r3
 801d44c:	f7ff fc9c 	bl	801cd88 <get_ldnumber>
 801d450:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d452:	69fb      	ldr	r3, [r7, #28]
 801d454:	2b00      	cmp	r3, #0
 801d456:	da01      	bge.n	801d45c <f_mount+0x28>
 801d458:	230b      	movs	r3, #11
 801d45a:	e02b      	b.n	801d4b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d45c:	4a17      	ldr	r2, [pc, #92]	@ (801d4bc <f_mount+0x88>)
 801d45e:	69fb      	ldr	r3, [r7, #28]
 801d460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d464:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d466:	69bb      	ldr	r3, [r7, #24]
 801d468:	2b00      	cmp	r3, #0
 801d46a:	d005      	beq.n	801d478 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d46c:	69b8      	ldr	r0, [r7, #24]
 801d46e:	f7fd ff9d 	bl	801b3ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d472:	69bb      	ldr	r3, [r7, #24]
 801d474:	2200      	movs	r2, #0
 801d476:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	2b00      	cmp	r3, #0
 801d47c:	d002      	beq.n	801d484 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d47e:	68fb      	ldr	r3, [r7, #12]
 801d480:	2200      	movs	r2, #0
 801d482:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d484:	68fa      	ldr	r2, [r7, #12]
 801d486:	490d      	ldr	r1, [pc, #52]	@ (801d4bc <f_mount+0x88>)
 801d488:	69fb      	ldr	r3, [r7, #28]
 801d48a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	2b00      	cmp	r3, #0
 801d492:	d002      	beq.n	801d49a <f_mount+0x66>
 801d494:	79fb      	ldrb	r3, [r7, #7]
 801d496:	2b01      	cmp	r3, #1
 801d498:	d001      	beq.n	801d49e <f_mount+0x6a>
 801d49a:	2300      	movs	r3, #0
 801d49c:	e00a      	b.n	801d4b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d49e:	f107 010c 	add.w	r1, r7, #12
 801d4a2:	f107 0308 	add.w	r3, r7, #8
 801d4a6:	2200      	movs	r2, #0
 801d4a8:	4618      	mov	r0, r3
 801d4aa:	f7ff fd07 	bl	801cebc <find_volume>
 801d4ae:	4603      	mov	r3, r0
 801d4b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d4b2:	7dfb      	ldrb	r3, [r7, #23]
}
 801d4b4:	4618      	mov	r0, r3
 801d4b6:	3720      	adds	r7, #32
 801d4b8:	46bd      	mov	sp, r7
 801d4ba:	bd80      	pop	{r7, pc}
 801d4bc:	24000550 	.word	0x24000550

0801d4c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d4c0:	b580      	push	{r7, lr}
 801d4c2:	b09a      	sub	sp, #104	@ 0x68
 801d4c4:	af00      	add	r7, sp, #0
 801d4c6:	60f8      	str	r0, [r7, #12]
 801d4c8:	60b9      	str	r1, [r7, #8]
 801d4ca:	4613      	mov	r3, r2
 801d4cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d101      	bne.n	801d4d8 <f_open+0x18>
 801d4d4:	2309      	movs	r3, #9
 801d4d6:	e1b7      	b.n	801d848 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d4d8:	79fb      	ldrb	r3, [r7, #7]
 801d4da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d4de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d4e0:	79fa      	ldrb	r2, [r7, #7]
 801d4e2:	f107 0114 	add.w	r1, r7, #20
 801d4e6:	f107 0308 	add.w	r3, r7, #8
 801d4ea:	4618      	mov	r0, r3
 801d4ec:	f7ff fce6 	bl	801cebc <find_volume>
 801d4f0:	4603      	mov	r3, r0
 801d4f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801d4f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	f040 819b 	bne.w	801d836 <f_open+0x376>
		dj.obj.fs = fs;
 801d500:	697b      	ldr	r3, [r7, #20]
 801d502:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d504:	68ba      	ldr	r2, [r7, #8]
 801d506:	f107 0318 	add.w	r3, r7, #24
 801d50a:	4611      	mov	r1, r2
 801d50c:	4618      	mov	r0, r3
 801d50e:	f7ff fbc5 	bl	801cc9c <follow_path>
 801d512:	4603      	mov	r3, r0
 801d514:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d518:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	d118      	bne.n	801d552 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d520:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801d524:	b25b      	sxtb	r3, r3
 801d526:	2b00      	cmp	r3, #0
 801d528:	da03      	bge.n	801d532 <f_open+0x72>
				res = FR_INVALID_NAME;
 801d52a:	2306      	movs	r3, #6
 801d52c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d530:	e00f      	b.n	801d552 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d532:	79fb      	ldrb	r3, [r7, #7]
 801d534:	2b01      	cmp	r3, #1
 801d536:	bf8c      	ite	hi
 801d538:	2301      	movhi	r3, #1
 801d53a:	2300      	movls	r3, #0
 801d53c:	b2db      	uxtb	r3, r3
 801d53e:	461a      	mov	r2, r3
 801d540:	f107 0318 	add.w	r3, r7, #24
 801d544:	4611      	mov	r1, r2
 801d546:	4618      	mov	r0, r3
 801d548:	f7fd fde8 	bl	801b11c <chk_lock>
 801d54c:	4603      	mov	r3, r0
 801d54e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801d552:	79fb      	ldrb	r3, [r7, #7]
 801d554:	f003 031c 	and.w	r3, r3, #28
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d07f      	beq.n	801d65c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801d55c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d560:	2b00      	cmp	r3, #0
 801d562:	d017      	beq.n	801d594 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801d564:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d568:	2b04      	cmp	r3, #4
 801d56a:	d10e      	bne.n	801d58a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801d56c:	f7fd fe32 	bl	801b1d4 <enq_lock>
 801d570:	4603      	mov	r3, r0
 801d572:	2b00      	cmp	r3, #0
 801d574:	d006      	beq.n	801d584 <f_open+0xc4>
 801d576:	f107 0318 	add.w	r3, r7, #24
 801d57a:	4618      	mov	r0, r3
 801d57c:	f7ff f894 	bl	801c6a8 <dir_register>
 801d580:	4603      	mov	r3, r0
 801d582:	e000      	b.n	801d586 <f_open+0xc6>
 801d584:	2312      	movs	r3, #18
 801d586:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801d58a:	79fb      	ldrb	r3, [r7, #7]
 801d58c:	f043 0308 	orr.w	r3, r3, #8
 801d590:	71fb      	strb	r3, [r7, #7]
 801d592:	e010      	b.n	801d5b6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801d594:	7fbb      	ldrb	r3, [r7, #30]
 801d596:	f003 0311 	and.w	r3, r3, #17
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	d003      	beq.n	801d5a6 <f_open+0xe6>
					res = FR_DENIED;
 801d59e:	2307      	movs	r3, #7
 801d5a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d5a4:	e007      	b.n	801d5b6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801d5a6:	79fb      	ldrb	r3, [r7, #7]
 801d5a8:	f003 0304 	and.w	r3, r3, #4
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	d002      	beq.n	801d5b6 <f_open+0xf6>
 801d5b0:	2308      	movs	r3, #8
 801d5b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801d5b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d168      	bne.n	801d690 <f_open+0x1d0>
 801d5be:	79fb      	ldrb	r3, [r7, #7]
 801d5c0:	f003 0308 	and.w	r3, r3, #8
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d063      	beq.n	801d690 <f_open+0x1d0>
				dw = GET_FATTIME();
 801d5c8:	f7fd fbaa 	bl	801ad20 <get_fattime>
 801d5cc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801d5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5d0:	330e      	adds	r3, #14
 801d5d2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d5d4:	4618      	mov	r0, r3
 801d5d6:	f7fd fcf7 	bl	801afc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801d5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5dc:	3316      	adds	r3, #22
 801d5de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d5e0:	4618      	mov	r0, r3
 801d5e2:	f7fd fcf1 	bl	801afc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801d5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5e8:	330b      	adds	r3, #11
 801d5ea:	2220      	movs	r2, #32
 801d5ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801d5ee:	697b      	ldr	r3, [r7, #20]
 801d5f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d5f2:	4611      	mov	r1, r2
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	f7fe fcc6 	bl	801bf86 <ld_clust>
 801d5fa:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801d5fc:	697b      	ldr	r3, [r7, #20]
 801d5fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d600:	2200      	movs	r2, #0
 801d602:	4618      	mov	r0, r3
 801d604:	f7fe fcde 	bl	801bfc4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801d608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d60a:	331c      	adds	r3, #28
 801d60c:	2100      	movs	r1, #0
 801d60e:	4618      	mov	r0, r3
 801d610:	f7fd fcda 	bl	801afc8 <st_dword>
					fs->wflag = 1;
 801d614:	697b      	ldr	r3, [r7, #20]
 801d616:	2201      	movs	r2, #1
 801d618:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801d61a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	d037      	beq.n	801d690 <f_open+0x1d0>
						dw = fs->winsect;
 801d620:	697b      	ldr	r3, [r7, #20]
 801d622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d624:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801d626:	f107 0318 	add.w	r3, r7, #24
 801d62a:	2200      	movs	r2, #0
 801d62c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801d62e:	4618      	mov	r0, r3
 801d630:	f7fe f9ce 	bl	801b9d0 <remove_chain>
 801d634:	4603      	mov	r3, r0
 801d636:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801d63a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d126      	bne.n	801d690 <f_open+0x1d0>
							res = move_window(fs, dw);
 801d642:	697b      	ldr	r3, [r7, #20]
 801d644:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801d646:	4618      	mov	r0, r3
 801d648:	f7fd ff18 	bl	801b47c <move_window>
 801d64c:	4603      	mov	r3, r0
 801d64e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801d652:	697b      	ldr	r3, [r7, #20]
 801d654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801d656:	3a01      	subs	r2, #1
 801d658:	615a      	str	r2, [r3, #20]
 801d65a:	e019      	b.n	801d690 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801d65c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d660:	2b00      	cmp	r3, #0
 801d662:	d115      	bne.n	801d690 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801d664:	7fbb      	ldrb	r3, [r7, #30]
 801d666:	f003 0310 	and.w	r3, r3, #16
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d003      	beq.n	801d676 <f_open+0x1b6>
					res = FR_NO_FILE;
 801d66e:	2304      	movs	r3, #4
 801d670:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d674:	e00c      	b.n	801d690 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801d676:	79fb      	ldrb	r3, [r7, #7]
 801d678:	f003 0302 	and.w	r3, r3, #2
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	d007      	beq.n	801d690 <f_open+0x1d0>
 801d680:	7fbb      	ldrb	r3, [r7, #30]
 801d682:	f003 0301 	and.w	r3, r3, #1
 801d686:	2b00      	cmp	r3, #0
 801d688:	d002      	beq.n	801d690 <f_open+0x1d0>
						res = FR_DENIED;
 801d68a:	2307      	movs	r3, #7
 801d68c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801d690:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d694:	2b00      	cmp	r3, #0
 801d696:	d126      	bne.n	801d6e6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801d698:	79fb      	ldrb	r3, [r7, #7]
 801d69a:	f003 0308 	and.w	r3, r3, #8
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	d003      	beq.n	801d6aa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801d6a2:	79fb      	ldrb	r3, [r7, #7]
 801d6a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d6a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801d6aa:	697b      	ldr	r3, [r7, #20]
 801d6ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801d6b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d6b8:	79fb      	ldrb	r3, [r7, #7]
 801d6ba:	2b01      	cmp	r3, #1
 801d6bc:	bf8c      	ite	hi
 801d6be:	2301      	movhi	r3, #1
 801d6c0:	2300      	movls	r3, #0
 801d6c2:	b2db      	uxtb	r3, r3
 801d6c4:	461a      	mov	r2, r3
 801d6c6:	f107 0318 	add.w	r3, r7, #24
 801d6ca:	4611      	mov	r1, r2
 801d6cc:	4618      	mov	r0, r3
 801d6ce:	f7fd fda3 	bl	801b218 <inc_lock>
 801d6d2:	4602      	mov	r2, r0
 801d6d4:	68fb      	ldr	r3, [r7, #12]
 801d6d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	691b      	ldr	r3, [r3, #16]
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	d102      	bne.n	801d6e6 <f_open+0x226>
 801d6e0:	2302      	movs	r3, #2
 801d6e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801d6e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	f040 80a3 	bne.w	801d836 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801d6f0:	697b      	ldr	r3, [r7, #20]
 801d6f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d6f4:	4611      	mov	r1, r2
 801d6f6:	4618      	mov	r0, r3
 801d6f8:	f7fe fc45 	bl	801bf86 <ld_clust>
 801d6fc:	4602      	mov	r2, r0
 801d6fe:	68fb      	ldr	r3, [r7, #12]
 801d700:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801d702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d704:	331c      	adds	r3, #28
 801d706:	4618      	mov	r0, r3
 801d708:	f7fd fc20 	bl	801af4c <ld_dword>
 801d70c:	4602      	mov	r2, r0
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801d712:	68fb      	ldr	r3, [r7, #12]
 801d714:	2200      	movs	r2, #0
 801d716:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801d718:	697a      	ldr	r2, [r7, #20]
 801d71a:	68fb      	ldr	r3, [r7, #12]
 801d71c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801d71e:	697b      	ldr	r3, [r7, #20]
 801d720:	88da      	ldrh	r2, [r3, #6]
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801d726:	68fb      	ldr	r3, [r7, #12]
 801d728:	79fa      	ldrb	r2, [r7, #7]
 801d72a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801d72c:	68fb      	ldr	r3, [r7, #12]
 801d72e:	2200      	movs	r2, #0
 801d730:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801d732:	68fb      	ldr	r3, [r7, #12]
 801d734:	2200      	movs	r2, #0
 801d736:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	2200      	movs	r2, #0
 801d73c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	3330      	adds	r3, #48	@ 0x30
 801d742:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801d746:	2100      	movs	r1, #0
 801d748:	4618      	mov	r0, r3
 801d74a:	f7fd fc8a 	bl	801b062 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801d74e:	79fb      	ldrb	r3, [r7, #7]
 801d750:	f003 0320 	and.w	r3, r3, #32
 801d754:	2b00      	cmp	r3, #0
 801d756:	d06e      	beq.n	801d836 <f_open+0x376>
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	68db      	ldr	r3, [r3, #12]
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	d06a      	beq.n	801d836 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801d760:	68fb      	ldr	r3, [r7, #12]
 801d762:	68da      	ldr	r2, [r3, #12]
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801d768:	697b      	ldr	r3, [r7, #20]
 801d76a:	895b      	ldrh	r3, [r3, #10]
 801d76c:	461a      	mov	r2, r3
 801d76e:	697b      	ldr	r3, [r7, #20]
 801d770:	899b      	ldrh	r3, [r3, #12]
 801d772:	fb02 f303 	mul.w	r3, r2, r3
 801d776:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801d778:	68fb      	ldr	r3, [r7, #12]
 801d77a:	689b      	ldr	r3, [r3, #8]
 801d77c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	68db      	ldr	r3, [r3, #12]
 801d782:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d784:	e016      	b.n	801d7b4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d78a:	4618      	mov	r0, r3
 801d78c:	f7fd ff33 	bl	801b5f6 <get_fat>
 801d790:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801d792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d794:	2b01      	cmp	r3, #1
 801d796:	d802      	bhi.n	801d79e <f_open+0x2de>
 801d798:	2302      	movs	r3, #2
 801d79a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801d79e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d7a4:	d102      	bne.n	801d7ac <f_open+0x2ec>
 801d7a6:	2301      	movs	r3, #1
 801d7a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801d7ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d7ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d7b0:	1ad3      	subs	r3, r2, r3
 801d7b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d7b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d7b8:	2b00      	cmp	r3, #0
 801d7ba:	d103      	bne.n	801d7c4 <f_open+0x304>
 801d7bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d7be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d7c0:	429a      	cmp	r2, r3
 801d7c2:	d8e0      	bhi.n	801d786 <f_open+0x2c6>
				}
				fp->clust = clst;
 801d7c4:	68fb      	ldr	r3, [r7, #12]
 801d7c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d7c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d7ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d131      	bne.n	801d836 <f_open+0x376>
 801d7d2:	697b      	ldr	r3, [r7, #20]
 801d7d4:	899b      	ldrh	r3, [r3, #12]
 801d7d6:	461a      	mov	r2, r3
 801d7d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d7da:	fbb3 f1f2 	udiv	r1, r3, r2
 801d7de:	fb01 f202 	mul.w	r2, r1, r2
 801d7e2:	1a9b      	subs	r3, r3, r2
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d026      	beq.n	801d836 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d7e8:	697b      	ldr	r3, [r7, #20]
 801d7ea:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d7ec:	4618      	mov	r0, r3
 801d7ee:	f7fd fee3 	bl	801b5b8 <clust2sect>
 801d7f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d7f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d103      	bne.n	801d802 <f_open+0x342>
						res = FR_INT_ERR;
 801d7fa:	2302      	movs	r3, #2
 801d7fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d800:	e019      	b.n	801d836 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d802:	697b      	ldr	r3, [r7, #20]
 801d804:	899b      	ldrh	r3, [r3, #12]
 801d806:	461a      	mov	r2, r3
 801d808:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d80a:	fbb3 f2f2 	udiv	r2, r3, r2
 801d80e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d810:	441a      	add	r2, r3
 801d812:	68fb      	ldr	r3, [r7, #12]
 801d814:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d816:	697b      	ldr	r3, [r7, #20]
 801d818:	7858      	ldrb	r0, [r3, #1]
 801d81a:	68fb      	ldr	r3, [r7, #12]
 801d81c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d820:	68fb      	ldr	r3, [r7, #12]
 801d822:	6a1a      	ldr	r2, [r3, #32]
 801d824:	2301      	movs	r3, #1
 801d826:	f7fd fb1b 	bl	801ae60 <disk_read>
 801d82a:	4603      	mov	r3, r0
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d002      	beq.n	801d836 <f_open+0x376>
 801d830:	2301      	movs	r3, #1
 801d832:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d836:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d002      	beq.n	801d844 <f_open+0x384>
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	2200      	movs	r2, #0
 801d842:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d844:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d848:	4618      	mov	r0, r3
 801d84a:	3768      	adds	r7, #104	@ 0x68
 801d84c:	46bd      	mov	sp, r7
 801d84e:	bd80      	pop	{r7, pc}

0801d850 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d850:	b580      	push	{r7, lr}
 801d852:	b08c      	sub	sp, #48	@ 0x30
 801d854:	af00      	add	r7, sp, #0
 801d856:	60f8      	str	r0, [r7, #12]
 801d858:	60b9      	str	r1, [r7, #8]
 801d85a:	607a      	str	r2, [r7, #4]
 801d85c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d85e:	68bb      	ldr	r3, [r7, #8]
 801d860:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d862:	683b      	ldr	r3, [r7, #0]
 801d864:	2200      	movs	r2, #0
 801d866:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d868:	68fb      	ldr	r3, [r7, #12]
 801d86a:	f107 0210 	add.w	r2, r7, #16
 801d86e:	4611      	mov	r1, r2
 801d870:	4618      	mov	r0, r3
 801d872:	f7ff fda9 	bl	801d3c8 <validate>
 801d876:	4603      	mov	r3, r0
 801d878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d87c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d880:	2b00      	cmp	r3, #0
 801d882:	d107      	bne.n	801d894 <f_write+0x44>
 801d884:	68fb      	ldr	r3, [r7, #12]
 801d886:	7d5b      	ldrb	r3, [r3, #21]
 801d888:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d88c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d890:	2b00      	cmp	r3, #0
 801d892:	d002      	beq.n	801d89a <f_write+0x4a>
 801d894:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d898:	e16a      	b.n	801db70 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d89a:	68fb      	ldr	r3, [r7, #12]
 801d89c:	7d1b      	ldrb	r3, [r3, #20]
 801d89e:	f003 0302 	and.w	r3, r3, #2
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d101      	bne.n	801d8aa <f_write+0x5a>
 801d8a6:	2307      	movs	r3, #7
 801d8a8:	e162      	b.n	801db70 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d8aa:	68fb      	ldr	r3, [r7, #12]
 801d8ac:	699a      	ldr	r2, [r3, #24]
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	441a      	add	r2, r3
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	699b      	ldr	r3, [r3, #24]
 801d8b6:	429a      	cmp	r2, r3
 801d8b8:	f080 814c 	bcs.w	801db54 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	699b      	ldr	r3, [r3, #24]
 801d8c0:	43db      	mvns	r3, r3
 801d8c2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d8c4:	e146      	b.n	801db54 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d8c6:	68fb      	ldr	r3, [r7, #12]
 801d8c8:	699b      	ldr	r3, [r3, #24]
 801d8ca:	693a      	ldr	r2, [r7, #16]
 801d8cc:	8992      	ldrh	r2, [r2, #12]
 801d8ce:	fbb3 f1f2 	udiv	r1, r3, r2
 801d8d2:	fb01 f202 	mul.w	r2, r1, r2
 801d8d6:	1a9b      	subs	r3, r3, r2
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	f040 80f1 	bne.w	801dac0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	699b      	ldr	r3, [r3, #24]
 801d8e2:	693a      	ldr	r2, [r7, #16]
 801d8e4:	8992      	ldrh	r2, [r2, #12]
 801d8e6:	fbb3 f3f2 	udiv	r3, r3, r2
 801d8ea:	693a      	ldr	r2, [r7, #16]
 801d8ec:	8952      	ldrh	r2, [r2, #10]
 801d8ee:	3a01      	subs	r2, #1
 801d8f0:	4013      	ands	r3, r2
 801d8f2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d8f4:	69bb      	ldr	r3, [r7, #24]
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	d143      	bne.n	801d982 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d8fa:	68fb      	ldr	r3, [r7, #12]
 801d8fc:	699b      	ldr	r3, [r3, #24]
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d10c      	bne.n	801d91c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d902:	68fb      	ldr	r3, [r7, #12]
 801d904:	689b      	ldr	r3, [r3, #8]
 801d906:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d90a:	2b00      	cmp	r3, #0
 801d90c:	d11a      	bne.n	801d944 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d90e:	68fb      	ldr	r3, [r7, #12]
 801d910:	2100      	movs	r1, #0
 801d912:	4618      	mov	r0, r3
 801d914:	f7fe f8c1 	bl	801ba9a <create_chain>
 801d918:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d91a:	e013      	b.n	801d944 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d91c:	68fb      	ldr	r3, [r7, #12]
 801d91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d920:	2b00      	cmp	r3, #0
 801d922:	d007      	beq.n	801d934 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	699b      	ldr	r3, [r3, #24]
 801d928:	4619      	mov	r1, r3
 801d92a:	68f8      	ldr	r0, [r7, #12]
 801d92c:	f7fe f94d 	bl	801bbca <clmt_clust>
 801d930:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d932:	e007      	b.n	801d944 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d934:	68fa      	ldr	r2, [r7, #12]
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	69db      	ldr	r3, [r3, #28]
 801d93a:	4619      	mov	r1, r3
 801d93c:	4610      	mov	r0, r2
 801d93e:	f7fe f8ac 	bl	801ba9a <create_chain>
 801d942:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d946:	2b00      	cmp	r3, #0
 801d948:	f000 8109 	beq.w	801db5e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d94e:	2b01      	cmp	r3, #1
 801d950:	d104      	bne.n	801d95c <f_write+0x10c>
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	2202      	movs	r2, #2
 801d956:	755a      	strb	r2, [r3, #21]
 801d958:	2302      	movs	r3, #2
 801d95a:	e109      	b.n	801db70 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d962:	d104      	bne.n	801d96e <f_write+0x11e>
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	2201      	movs	r2, #1
 801d968:	755a      	strb	r2, [r3, #21]
 801d96a:	2301      	movs	r3, #1
 801d96c:	e100      	b.n	801db70 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d96e:	68fb      	ldr	r3, [r7, #12]
 801d970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d972:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	689b      	ldr	r3, [r3, #8]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	d102      	bne.n	801d982 <f_write+0x132>
 801d97c:	68fb      	ldr	r3, [r7, #12]
 801d97e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d980:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d982:	68fb      	ldr	r3, [r7, #12]
 801d984:	7d1b      	ldrb	r3, [r3, #20]
 801d986:	b25b      	sxtb	r3, r3
 801d988:	2b00      	cmp	r3, #0
 801d98a:	da18      	bge.n	801d9be <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d98c:	693b      	ldr	r3, [r7, #16]
 801d98e:	7858      	ldrb	r0, [r3, #1]
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	6a1a      	ldr	r2, [r3, #32]
 801d99a:	2301      	movs	r3, #1
 801d99c:	f7fd fa80 	bl	801aea0 <disk_write>
 801d9a0:	4603      	mov	r3, r0
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d004      	beq.n	801d9b0 <f_write+0x160>
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	2201      	movs	r2, #1
 801d9aa:	755a      	strb	r2, [r3, #21]
 801d9ac:	2301      	movs	r3, #1
 801d9ae:	e0df      	b.n	801db70 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	7d1b      	ldrb	r3, [r3, #20]
 801d9b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d9b8:	b2da      	uxtb	r2, r3
 801d9ba:	68fb      	ldr	r3, [r7, #12]
 801d9bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d9be:	693a      	ldr	r2, [r7, #16]
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	69db      	ldr	r3, [r3, #28]
 801d9c4:	4619      	mov	r1, r3
 801d9c6:	4610      	mov	r0, r2
 801d9c8:	f7fd fdf6 	bl	801b5b8 <clust2sect>
 801d9cc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d9ce:	697b      	ldr	r3, [r7, #20]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	d104      	bne.n	801d9de <f_write+0x18e>
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	2202      	movs	r2, #2
 801d9d8:	755a      	strb	r2, [r3, #21]
 801d9da:	2302      	movs	r3, #2
 801d9dc:	e0c8      	b.n	801db70 <f_write+0x320>
			sect += csect;
 801d9de:	697a      	ldr	r2, [r7, #20]
 801d9e0:	69bb      	ldr	r3, [r7, #24]
 801d9e2:	4413      	add	r3, r2
 801d9e4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d9e6:	693b      	ldr	r3, [r7, #16]
 801d9e8:	899b      	ldrh	r3, [r3, #12]
 801d9ea:	461a      	mov	r2, r3
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	fbb3 f3f2 	udiv	r3, r3, r2
 801d9f2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d9f4:	6a3b      	ldr	r3, [r7, #32]
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d043      	beq.n	801da82 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d9fa:	69ba      	ldr	r2, [r7, #24]
 801d9fc:	6a3b      	ldr	r3, [r7, #32]
 801d9fe:	4413      	add	r3, r2
 801da00:	693a      	ldr	r2, [r7, #16]
 801da02:	8952      	ldrh	r2, [r2, #10]
 801da04:	4293      	cmp	r3, r2
 801da06:	d905      	bls.n	801da14 <f_write+0x1c4>
					cc = fs->csize - csect;
 801da08:	693b      	ldr	r3, [r7, #16]
 801da0a:	895b      	ldrh	r3, [r3, #10]
 801da0c:	461a      	mov	r2, r3
 801da0e:	69bb      	ldr	r3, [r7, #24]
 801da10:	1ad3      	subs	r3, r2, r3
 801da12:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801da14:	693b      	ldr	r3, [r7, #16]
 801da16:	7858      	ldrb	r0, [r3, #1]
 801da18:	6a3b      	ldr	r3, [r7, #32]
 801da1a:	697a      	ldr	r2, [r7, #20]
 801da1c:	69f9      	ldr	r1, [r7, #28]
 801da1e:	f7fd fa3f 	bl	801aea0 <disk_write>
 801da22:	4603      	mov	r3, r0
 801da24:	2b00      	cmp	r3, #0
 801da26:	d004      	beq.n	801da32 <f_write+0x1e2>
 801da28:	68fb      	ldr	r3, [r7, #12]
 801da2a:	2201      	movs	r2, #1
 801da2c:	755a      	strb	r2, [r3, #21]
 801da2e:	2301      	movs	r3, #1
 801da30:	e09e      	b.n	801db70 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	6a1a      	ldr	r2, [r3, #32]
 801da36:	697b      	ldr	r3, [r7, #20]
 801da38:	1ad3      	subs	r3, r2, r3
 801da3a:	6a3a      	ldr	r2, [r7, #32]
 801da3c:	429a      	cmp	r2, r3
 801da3e:	d918      	bls.n	801da72 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801da40:	68fb      	ldr	r3, [r7, #12]
 801da42:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801da46:	68fb      	ldr	r3, [r7, #12]
 801da48:	6a1a      	ldr	r2, [r3, #32]
 801da4a:	697b      	ldr	r3, [r7, #20]
 801da4c:	1ad3      	subs	r3, r2, r3
 801da4e:	693a      	ldr	r2, [r7, #16]
 801da50:	8992      	ldrh	r2, [r2, #12]
 801da52:	fb02 f303 	mul.w	r3, r2, r3
 801da56:	69fa      	ldr	r2, [r7, #28]
 801da58:	18d1      	adds	r1, r2, r3
 801da5a:	693b      	ldr	r3, [r7, #16]
 801da5c:	899b      	ldrh	r3, [r3, #12]
 801da5e:	461a      	mov	r2, r3
 801da60:	f7fd fade 	bl	801b020 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	7d1b      	ldrb	r3, [r3, #20]
 801da68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801da6c:	b2da      	uxtb	r2, r3
 801da6e:	68fb      	ldr	r3, [r7, #12]
 801da70:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801da72:	693b      	ldr	r3, [r7, #16]
 801da74:	899b      	ldrh	r3, [r3, #12]
 801da76:	461a      	mov	r2, r3
 801da78:	6a3b      	ldr	r3, [r7, #32]
 801da7a:	fb02 f303 	mul.w	r3, r2, r3
 801da7e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801da80:	e04b      	b.n	801db1a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	6a1b      	ldr	r3, [r3, #32]
 801da86:	697a      	ldr	r2, [r7, #20]
 801da88:	429a      	cmp	r2, r3
 801da8a:	d016      	beq.n	801daba <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801da8c:	68fb      	ldr	r3, [r7, #12]
 801da8e:	699a      	ldr	r2, [r3, #24]
 801da90:	68fb      	ldr	r3, [r7, #12]
 801da92:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801da94:	429a      	cmp	r2, r3
 801da96:	d210      	bcs.n	801daba <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801da98:	693b      	ldr	r3, [r7, #16]
 801da9a:	7858      	ldrb	r0, [r3, #1]
 801da9c:	68fb      	ldr	r3, [r7, #12]
 801da9e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801daa2:	2301      	movs	r3, #1
 801daa4:	697a      	ldr	r2, [r7, #20]
 801daa6:	f7fd f9db 	bl	801ae60 <disk_read>
 801daaa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801daac:	2b00      	cmp	r3, #0
 801daae:	d004      	beq.n	801daba <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801dab0:	68fb      	ldr	r3, [r7, #12]
 801dab2:	2201      	movs	r2, #1
 801dab4:	755a      	strb	r2, [r3, #21]
 801dab6:	2301      	movs	r3, #1
 801dab8:	e05a      	b.n	801db70 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801daba:	68fb      	ldr	r3, [r7, #12]
 801dabc:	697a      	ldr	r2, [r7, #20]
 801dabe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801dac0:	693b      	ldr	r3, [r7, #16]
 801dac2:	899b      	ldrh	r3, [r3, #12]
 801dac4:	4618      	mov	r0, r3
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	699b      	ldr	r3, [r3, #24]
 801daca:	693a      	ldr	r2, [r7, #16]
 801dacc:	8992      	ldrh	r2, [r2, #12]
 801dace:	fbb3 f1f2 	udiv	r1, r3, r2
 801dad2:	fb01 f202 	mul.w	r2, r1, r2
 801dad6:	1a9b      	subs	r3, r3, r2
 801dad8:	1ac3      	subs	r3, r0, r3
 801dada:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801dadc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	429a      	cmp	r2, r3
 801dae2:	d901      	bls.n	801dae8 <f_write+0x298>
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801dae8:	68fb      	ldr	r3, [r7, #12]
 801daea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801daee:	68fb      	ldr	r3, [r7, #12]
 801daf0:	699b      	ldr	r3, [r3, #24]
 801daf2:	693a      	ldr	r2, [r7, #16]
 801daf4:	8992      	ldrh	r2, [r2, #12]
 801daf6:	fbb3 f0f2 	udiv	r0, r3, r2
 801dafa:	fb00 f202 	mul.w	r2, r0, r2
 801dafe:	1a9b      	subs	r3, r3, r2
 801db00:	440b      	add	r3, r1
 801db02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801db04:	69f9      	ldr	r1, [r7, #28]
 801db06:	4618      	mov	r0, r3
 801db08:	f7fd fa8a 	bl	801b020 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	7d1b      	ldrb	r3, [r3, #20]
 801db10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801db14:	b2da      	uxtb	r2, r3
 801db16:	68fb      	ldr	r3, [r7, #12]
 801db18:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801db1a:	69fa      	ldr	r2, [r7, #28]
 801db1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db1e:	4413      	add	r3, r2
 801db20:	61fb      	str	r3, [r7, #28]
 801db22:	68fb      	ldr	r3, [r7, #12]
 801db24:	699a      	ldr	r2, [r3, #24]
 801db26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db28:	441a      	add	r2, r3
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	619a      	str	r2, [r3, #24]
 801db2e:	68fb      	ldr	r3, [r7, #12]
 801db30:	68da      	ldr	r2, [r3, #12]
 801db32:	68fb      	ldr	r3, [r7, #12]
 801db34:	699b      	ldr	r3, [r3, #24]
 801db36:	429a      	cmp	r2, r3
 801db38:	bf38      	it	cc
 801db3a:	461a      	movcc	r2, r3
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	60da      	str	r2, [r3, #12]
 801db40:	683b      	ldr	r3, [r7, #0]
 801db42:	681a      	ldr	r2, [r3, #0]
 801db44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db46:	441a      	add	r2, r3
 801db48:	683b      	ldr	r3, [r7, #0]
 801db4a:	601a      	str	r2, [r3, #0]
 801db4c:	687a      	ldr	r2, [r7, #4]
 801db4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db50:	1ad3      	subs	r3, r2, r3
 801db52:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	2b00      	cmp	r3, #0
 801db58:	f47f aeb5 	bne.w	801d8c6 <f_write+0x76>
 801db5c:	e000      	b.n	801db60 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801db5e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	7d1b      	ldrb	r3, [r3, #20]
 801db64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801db68:	b2da      	uxtb	r2, r3
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801db6e:	2300      	movs	r3, #0
}
 801db70:	4618      	mov	r0, r3
 801db72:	3730      	adds	r7, #48	@ 0x30
 801db74:	46bd      	mov	sp, r7
 801db76:	bd80      	pop	{r7, pc}

0801db78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801db78:	b580      	push	{r7, lr}
 801db7a:	b086      	sub	sp, #24
 801db7c:	af00      	add	r7, sp, #0
 801db7e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	f107 0208 	add.w	r2, r7, #8
 801db86:	4611      	mov	r1, r2
 801db88:	4618      	mov	r0, r3
 801db8a:	f7ff fc1d 	bl	801d3c8 <validate>
 801db8e:	4603      	mov	r3, r0
 801db90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801db92:	7dfb      	ldrb	r3, [r7, #23]
 801db94:	2b00      	cmp	r3, #0
 801db96:	d168      	bne.n	801dc6a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	7d1b      	ldrb	r3, [r3, #20]
 801db9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d062      	beq.n	801dc6a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	7d1b      	ldrb	r3, [r3, #20]
 801dba8:	b25b      	sxtb	r3, r3
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	da15      	bge.n	801dbda <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801dbae:	68bb      	ldr	r3, [r7, #8]
 801dbb0:	7858      	ldrb	r0, [r3, #1]
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dbb8:	687b      	ldr	r3, [r7, #4]
 801dbba:	6a1a      	ldr	r2, [r3, #32]
 801dbbc:	2301      	movs	r3, #1
 801dbbe:	f7fd f96f 	bl	801aea0 <disk_write>
 801dbc2:	4603      	mov	r3, r0
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	d001      	beq.n	801dbcc <f_sync+0x54>
 801dbc8:	2301      	movs	r3, #1
 801dbca:	e04f      	b.n	801dc6c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	7d1b      	ldrb	r3, [r3, #20]
 801dbd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dbd4:	b2da      	uxtb	r2, r3
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801dbda:	f7fd f8a1 	bl	801ad20 <get_fattime>
 801dbde:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801dbe0:	68ba      	ldr	r2, [r7, #8]
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dbe6:	4619      	mov	r1, r3
 801dbe8:	4610      	mov	r0, r2
 801dbea:	f7fd fc47 	bl	801b47c <move_window>
 801dbee:	4603      	mov	r3, r0
 801dbf0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801dbf2:	7dfb      	ldrb	r3, [r7, #23]
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d138      	bne.n	801dc6a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dbfc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801dbfe:	68fb      	ldr	r3, [r7, #12]
 801dc00:	330b      	adds	r3, #11
 801dc02:	781a      	ldrb	r2, [r3, #0]
 801dc04:	68fb      	ldr	r3, [r7, #12]
 801dc06:	330b      	adds	r3, #11
 801dc08:	f042 0220 	orr.w	r2, r2, #32
 801dc0c:	b2d2      	uxtb	r2, r2
 801dc0e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	6818      	ldr	r0, [r3, #0]
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	689b      	ldr	r3, [r3, #8]
 801dc18:	461a      	mov	r2, r3
 801dc1a:	68f9      	ldr	r1, [r7, #12]
 801dc1c:	f7fe f9d2 	bl	801bfc4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801dc20:	68fb      	ldr	r3, [r7, #12]
 801dc22:	f103 021c 	add.w	r2, r3, #28
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	68db      	ldr	r3, [r3, #12]
 801dc2a:	4619      	mov	r1, r3
 801dc2c:	4610      	mov	r0, r2
 801dc2e:	f7fd f9cb 	bl	801afc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801dc32:	68fb      	ldr	r3, [r7, #12]
 801dc34:	3316      	adds	r3, #22
 801dc36:	6939      	ldr	r1, [r7, #16]
 801dc38:	4618      	mov	r0, r3
 801dc3a:	f7fd f9c5 	bl	801afc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801dc3e:	68fb      	ldr	r3, [r7, #12]
 801dc40:	3312      	adds	r3, #18
 801dc42:	2100      	movs	r1, #0
 801dc44:	4618      	mov	r0, r3
 801dc46:	f7fd f9a4 	bl	801af92 <st_word>
					fs->wflag = 1;
 801dc4a:	68bb      	ldr	r3, [r7, #8]
 801dc4c:	2201      	movs	r2, #1
 801dc4e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801dc50:	68bb      	ldr	r3, [r7, #8]
 801dc52:	4618      	mov	r0, r3
 801dc54:	f7fd fc40 	bl	801b4d8 <sync_fs>
 801dc58:	4603      	mov	r3, r0
 801dc5a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	7d1b      	ldrb	r3, [r3, #20]
 801dc60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801dc64:	b2da      	uxtb	r2, r3
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801dc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 801dc6c:	4618      	mov	r0, r3
 801dc6e:	3718      	adds	r7, #24
 801dc70:	46bd      	mov	sp, r7
 801dc72:	bd80      	pop	{r7, pc}

0801dc74 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801dc74:	b580      	push	{r7, lr}
 801dc76:	b084      	sub	sp, #16
 801dc78:	af00      	add	r7, sp, #0
 801dc7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801dc7c:	6878      	ldr	r0, [r7, #4]
 801dc7e:	f7ff ff7b 	bl	801db78 <f_sync>
 801dc82:	4603      	mov	r3, r0
 801dc84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801dc86:	7bfb      	ldrb	r3, [r7, #15]
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d118      	bne.n	801dcbe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	f107 0208 	add.w	r2, r7, #8
 801dc92:	4611      	mov	r1, r2
 801dc94:	4618      	mov	r0, r3
 801dc96:	f7ff fb97 	bl	801d3c8 <validate>
 801dc9a:	4603      	mov	r3, r0
 801dc9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801dc9e:	7bfb      	ldrb	r3, [r7, #15]
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	d10c      	bne.n	801dcbe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	691b      	ldr	r3, [r3, #16]
 801dca8:	4618      	mov	r0, r3
 801dcaa:	f7fd fb43 	bl	801b334 <dec_lock>
 801dcae:	4603      	mov	r3, r0
 801dcb0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801dcb2:	7bfb      	ldrb	r3, [r7, #15]
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d102      	bne.n	801dcbe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	2200      	movs	r2, #0
 801dcbc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801dcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 801dcc0:	4618      	mov	r0, r3
 801dcc2:	3710      	adds	r7, #16
 801dcc4:	46bd      	mov	sp, r7
 801dcc6:	bd80      	pop	{r7, pc}

0801dcc8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801dcc8:	b580      	push	{r7, lr}
 801dcca:	b0a0      	sub	sp, #128	@ 0x80
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801dcd0:	2300      	movs	r3, #0
 801dcd2:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801dcd4:	f107 010c 	add.w	r1, r7, #12
 801dcd8:	1d3b      	adds	r3, r7, #4
 801dcda:	2202      	movs	r2, #2
 801dcdc:	4618      	mov	r0, r3
 801dcde:	f7ff f8ed 	bl	801cebc <find_volume>
 801dce2:	4603      	mov	r3, r0
 801dce4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801dcec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dcf0:	2b00      	cmp	r3, #0
 801dcf2:	f040 808e 	bne.w	801de12 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801dcf6:	687a      	ldr	r2, [r7, #4]
 801dcf8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801dcfc:	4611      	mov	r1, r2
 801dcfe:	4618      	mov	r0, r3
 801dd00:	f7fe ffcc 	bl	801cc9c <follow_path>
 801dd04:	4603      	mov	r3, r0
 801dd06:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801dd0a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d108      	bne.n	801dd24 <f_unlink+0x5c>
 801dd12:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801dd16:	2102      	movs	r1, #2
 801dd18:	4618      	mov	r0, r3
 801dd1a:	f7fd f9ff 	bl	801b11c <chk_lock>
 801dd1e:	4603      	mov	r3, r0
 801dd20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801dd24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d172      	bne.n	801de12 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801dd2c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801dd30:	b25b      	sxtb	r3, r3
 801dd32:	2b00      	cmp	r3, #0
 801dd34:	da03      	bge.n	801dd3e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801dd36:	2306      	movs	r3, #6
 801dd38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801dd3c:	e008      	b.n	801dd50 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801dd3e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801dd42:	f003 0301 	and.w	r3, r3, #1
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d002      	beq.n	801dd50 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801dd4a:	2307      	movs	r3, #7
 801dd4c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801dd50:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d134      	bne.n	801ddc2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801dd5c:	4611      	mov	r1, r2
 801dd5e:	4618      	mov	r0, r3
 801dd60:	f7fe f911 	bl	801bf86 <ld_clust>
 801dd64:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801dd66:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801dd6a:	f003 0310 	and.w	r3, r3, #16
 801dd6e:	2b00      	cmp	r3, #0
 801dd70:	d027      	beq.n	801ddc2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801dd72:	68fb      	ldr	r3, [r7, #12]
 801dd74:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801dd76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd78:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801dd7a:	f107 0310 	add.w	r3, r7, #16
 801dd7e:	2100      	movs	r1, #0
 801dd80:	4618      	mov	r0, r3
 801dd82:	f7fd ff5a 	bl	801bc3a <dir_sdi>
 801dd86:	4603      	mov	r3, r0
 801dd88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801dd8c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	d116      	bne.n	801ddc2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801dd94:	f107 0310 	add.w	r3, r7, #16
 801dd98:	2100      	movs	r1, #0
 801dd9a:	4618      	mov	r0, r3
 801dd9c:	f7fe fb1d 	bl	801c3da <dir_read>
 801dda0:	4603      	mov	r3, r0
 801dda2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801dda6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	d102      	bne.n	801ddb4 <f_unlink+0xec>
 801ddae:	2307      	movs	r3, #7
 801ddb0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801ddb4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddb8:	2b04      	cmp	r3, #4
 801ddba:	d102      	bne.n	801ddc2 <f_unlink+0xfa>
 801ddbc:	2300      	movs	r3, #0
 801ddbe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801ddc2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddc6:	2b00      	cmp	r3, #0
 801ddc8:	d123      	bne.n	801de12 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801ddca:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddce:	4618      	mov	r0, r3
 801ddd0:	f7fe fd62 	bl	801c898 <dir_remove>
 801ddd4:	4603      	mov	r3, r0
 801ddd6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801ddda:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d10c      	bne.n	801ddfc <f_unlink+0x134>
 801dde2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dde4:	2b00      	cmp	r3, #0
 801dde6:	d009      	beq.n	801ddfc <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801dde8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801ddec:	2200      	movs	r2, #0
 801ddee:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	f7fd fded 	bl	801b9d0 <remove_chain>
 801ddf6:	4603      	mov	r3, r0
 801ddf8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801ddfc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801de00:	2b00      	cmp	r3, #0
 801de02:	d106      	bne.n	801de12 <f_unlink+0x14a>
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	4618      	mov	r0, r3
 801de08:	f7fd fb66 	bl	801b4d8 <sync_fs>
 801de0c:	4603      	mov	r3, r0
 801de0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801de12:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801de16:	4618      	mov	r0, r3
 801de18:	3780      	adds	r7, #128	@ 0x80
 801de1a:	46bd      	mov	sp, r7
 801de1c:	bd80      	pop	{r7, pc}
	...

0801de20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801de20:	b480      	push	{r7}
 801de22:	b087      	sub	sp, #28
 801de24:	af00      	add	r7, sp, #0
 801de26:	60f8      	str	r0, [r7, #12]
 801de28:	60b9      	str	r1, [r7, #8]
 801de2a:	4613      	mov	r3, r2
 801de2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801de2e:	2301      	movs	r3, #1
 801de30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801de32:	2300      	movs	r3, #0
 801de34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801de36:	4b1f      	ldr	r3, [pc, #124]	@ (801deb4 <FATFS_LinkDriverEx+0x94>)
 801de38:	7a5b      	ldrb	r3, [r3, #9]
 801de3a:	b2db      	uxtb	r3, r3
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d131      	bne.n	801dea4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801de40:	4b1c      	ldr	r3, [pc, #112]	@ (801deb4 <FATFS_LinkDriverEx+0x94>)
 801de42:	7a5b      	ldrb	r3, [r3, #9]
 801de44:	b2db      	uxtb	r3, r3
 801de46:	461a      	mov	r2, r3
 801de48:	4b1a      	ldr	r3, [pc, #104]	@ (801deb4 <FATFS_LinkDriverEx+0x94>)
 801de4a:	2100      	movs	r1, #0
 801de4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801de4e:	4b19      	ldr	r3, [pc, #100]	@ (801deb4 <FATFS_LinkDriverEx+0x94>)
 801de50:	7a5b      	ldrb	r3, [r3, #9]
 801de52:	b2db      	uxtb	r3, r3
 801de54:	4a17      	ldr	r2, [pc, #92]	@ (801deb4 <FATFS_LinkDriverEx+0x94>)
 801de56:	009b      	lsls	r3, r3, #2
 801de58:	4413      	add	r3, r2
 801de5a:	68fa      	ldr	r2, [r7, #12]
 801de5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801de5e:	4b15      	ldr	r3, [pc, #84]	@ (801deb4 <FATFS_LinkDriverEx+0x94>)
 801de60:	7a5b      	ldrb	r3, [r3, #9]
 801de62:	b2db      	uxtb	r3, r3
 801de64:	461a      	mov	r2, r3
 801de66:	4b13      	ldr	r3, [pc, #76]	@ (801deb4 <FATFS_LinkDriverEx+0x94>)
 801de68:	4413      	add	r3, r2
 801de6a:	79fa      	ldrb	r2, [r7, #7]
 801de6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801de6e:	4b11      	ldr	r3, [pc, #68]	@ (801deb4 <FATFS_LinkDriverEx+0x94>)
 801de70:	7a5b      	ldrb	r3, [r3, #9]
 801de72:	b2db      	uxtb	r3, r3
 801de74:	1c5a      	adds	r2, r3, #1
 801de76:	b2d1      	uxtb	r1, r2
 801de78:	4a0e      	ldr	r2, [pc, #56]	@ (801deb4 <FATFS_LinkDriverEx+0x94>)
 801de7a:	7251      	strb	r1, [r2, #9]
 801de7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801de7e:	7dbb      	ldrb	r3, [r7, #22]
 801de80:	3330      	adds	r3, #48	@ 0x30
 801de82:	b2da      	uxtb	r2, r3
 801de84:	68bb      	ldr	r3, [r7, #8]
 801de86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801de88:	68bb      	ldr	r3, [r7, #8]
 801de8a:	3301      	adds	r3, #1
 801de8c:	223a      	movs	r2, #58	@ 0x3a
 801de8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801de90:	68bb      	ldr	r3, [r7, #8]
 801de92:	3302      	adds	r3, #2
 801de94:	222f      	movs	r2, #47	@ 0x2f
 801de96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801de98:	68bb      	ldr	r3, [r7, #8]
 801de9a:	3303      	adds	r3, #3
 801de9c:	2200      	movs	r2, #0
 801de9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801dea0:	2300      	movs	r3, #0
 801dea2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801dea4:	7dfb      	ldrb	r3, [r7, #23]
}
 801dea6:	4618      	mov	r0, r3
 801dea8:	371c      	adds	r7, #28
 801deaa:	46bd      	mov	sp, r7
 801deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deb0:	4770      	bx	lr
 801deb2:	bf00      	nop
 801deb4:	24000768 	.word	0x24000768

0801deb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801deb8:	b580      	push	{r7, lr}
 801deba:	b082      	sub	sp, #8
 801debc:	af00      	add	r7, sp, #0
 801debe:	6078      	str	r0, [r7, #4]
 801dec0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801dec2:	2200      	movs	r2, #0
 801dec4:	6839      	ldr	r1, [r7, #0]
 801dec6:	6878      	ldr	r0, [r7, #4]
 801dec8:	f7ff ffaa 	bl	801de20 <FATFS_LinkDriverEx>
 801decc:	4603      	mov	r3, r0
}
 801dece:	4618      	mov	r0, r3
 801ded0:	3708      	adds	r7, #8
 801ded2:	46bd      	mov	sp, r7
 801ded4:	bd80      	pop	{r7, pc}
	...

0801ded8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801ded8:	b480      	push	{r7}
 801deda:	b085      	sub	sp, #20
 801dedc:	af00      	add	r7, sp, #0
 801dede:	4603      	mov	r3, r0
 801dee0:	6039      	str	r1, [r7, #0]
 801dee2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801dee4:	88fb      	ldrh	r3, [r7, #6]
 801dee6:	2b7f      	cmp	r3, #127	@ 0x7f
 801dee8:	d802      	bhi.n	801def0 <ff_convert+0x18>
		c = chr;
 801deea:	88fb      	ldrh	r3, [r7, #6]
 801deec:	81fb      	strh	r3, [r7, #14]
 801deee:	e025      	b.n	801df3c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801def0:	683b      	ldr	r3, [r7, #0]
 801def2:	2b00      	cmp	r3, #0
 801def4:	d00b      	beq.n	801df0e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801def6:	88fb      	ldrh	r3, [r7, #6]
 801def8:	2bff      	cmp	r3, #255	@ 0xff
 801defa:	d805      	bhi.n	801df08 <ff_convert+0x30>
 801defc:	88fb      	ldrh	r3, [r7, #6]
 801defe:	3b80      	subs	r3, #128	@ 0x80
 801df00:	4a12      	ldr	r2, [pc, #72]	@ (801df4c <ff_convert+0x74>)
 801df02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801df06:	e000      	b.n	801df0a <ff_convert+0x32>
 801df08:	2300      	movs	r3, #0
 801df0a:	81fb      	strh	r3, [r7, #14]
 801df0c:	e016      	b.n	801df3c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801df0e:	2300      	movs	r3, #0
 801df10:	81fb      	strh	r3, [r7, #14]
 801df12:	e009      	b.n	801df28 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801df14:	89fb      	ldrh	r3, [r7, #14]
 801df16:	4a0d      	ldr	r2, [pc, #52]	@ (801df4c <ff_convert+0x74>)
 801df18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801df1c:	88fa      	ldrh	r2, [r7, #6]
 801df1e:	429a      	cmp	r2, r3
 801df20:	d006      	beq.n	801df30 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801df22:	89fb      	ldrh	r3, [r7, #14]
 801df24:	3301      	adds	r3, #1
 801df26:	81fb      	strh	r3, [r7, #14]
 801df28:	89fb      	ldrh	r3, [r7, #14]
 801df2a:	2b7f      	cmp	r3, #127	@ 0x7f
 801df2c:	d9f2      	bls.n	801df14 <ff_convert+0x3c>
 801df2e:	e000      	b.n	801df32 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801df30:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801df32:	89fb      	ldrh	r3, [r7, #14]
 801df34:	3380      	adds	r3, #128	@ 0x80
 801df36:	b29b      	uxth	r3, r3
 801df38:	b2db      	uxtb	r3, r3
 801df3a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801df3c:	89fb      	ldrh	r3, [r7, #14]
}
 801df3e:	4618      	mov	r0, r3
 801df40:	3714      	adds	r7, #20
 801df42:	46bd      	mov	sp, r7
 801df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df48:	4770      	bx	lr
 801df4a:	bf00      	nop
 801df4c:	0801ebfc 	.word	0x0801ebfc

0801df50 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801df50:	b480      	push	{r7}
 801df52:	b087      	sub	sp, #28
 801df54:	af00      	add	r7, sp, #0
 801df56:	4603      	mov	r3, r0
 801df58:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801df5a:	88fb      	ldrh	r3, [r7, #6]
 801df5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801df60:	d201      	bcs.n	801df66 <ff_wtoupper+0x16>
 801df62:	4b3e      	ldr	r3, [pc, #248]	@ (801e05c <ff_wtoupper+0x10c>)
 801df64:	e000      	b.n	801df68 <ff_wtoupper+0x18>
 801df66:	4b3e      	ldr	r3, [pc, #248]	@ (801e060 <ff_wtoupper+0x110>)
 801df68:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801df6a:	697b      	ldr	r3, [r7, #20]
 801df6c:	1c9a      	adds	r2, r3, #2
 801df6e:	617a      	str	r2, [r7, #20]
 801df70:	881b      	ldrh	r3, [r3, #0]
 801df72:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801df74:	8a7b      	ldrh	r3, [r7, #18]
 801df76:	2b00      	cmp	r3, #0
 801df78:	d068      	beq.n	801e04c <ff_wtoupper+0xfc>
 801df7a:	88fa      	ldrh	r2, [r7, #6]
 801df7c:	8a7b      	ldrh	r3, [r7, #18]
 801df7e:	429a      	cmp	r2, r3
 801df80:	d364      	bcc.n	801e04c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801df82:	697b      	ldr	r3, [r7, #20]
 801df84:	1c9a      	adds	r2, r3, #2
 801df86:	617a      	str	r2, [r7, #20]
 801df88:	881b      	ldrh	r3, [r3, #0]
 801df8a:	823b      	strh	r3, [r7, #16]
 801df8c:	8a3b      	ldrh	r3, [r7, #16]
 801df8e:	0a1b      	lsrs	r3, r3, #8
 801df90:	81fb      	strh	r3, [r7, #14]
 801df92:	8a3b      	ldrh	r3, [r7, #16]
 801df94:	b2db      	uxtb	r3, r3
 801df96:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801df98:	88fa      	ldrh	r2, [r7, #6]
 801df9a:	8a79      	ldrh	r1, [r7, #18]
 801df9c:	8a3b      	ldrh	r3, [r7, #16]
 801df9e:	440b      	add	r3, r1
 801dfa0:	429a      	cmp	r2, r3
 801dfa2:	da49      	bge.n	801e038 <ff_wtoupper+0xe8>
			switch (cmd) {
 801dfa4:	89fb      	ldrh	r3, [r7, #14]
 801dfa6:	2b08      	cmp	r3, #8
 801dfa8:	d84f      	bhi.n	801e04a <ff_wtoupper+0xfa>
 801dfaa:	a201      	add	r2, pc, #4	@ (adr r2, 801dfb0 <ff_wtoupper+0x60>)
 801dfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dfb0:	0801dfd5 	.word	0x0801dfd5
 801dfb4:	0801dfe7 	.word	0x0801dfe7
 801dfb8:	0801dffd 	.word	0x0801dffd
 801dfbc:	0801e005 	.word	0x0801e005
 801dfc0:	0801e00d 	.word	0x0801e00d
 801dfc4:	0801e015 	.word	0x0801e015
 801dfc8:	0801e01d 	.word	0x0801e01d
 801dfcc:	0801e025 	.word	0x0801e025
 801dfd0:	0801e02d 	.word	0x0801e02d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801dfd4:	88fa      	ldrh	r2, [r7, #6]
 801dfd6:	8a7b      	ldrh	r3, [r7, #18]
 801dfd8:	1ad3      	subs	r3, r2, r3
 801dfda:	005b      	lsls	r3, r3, #1
 801dfdc:	697a      	ldr	r2, [r7, #20]
 801dfde:	4413      	add	r3, r2
 801dfe0:	881b      	ldrh	r3, [r3, #0]
 801dfe2:	80fb      	strh	r3, [r7, #6]
 801dfe4:	e027      	b.n	801e036 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801dfe6:	88fa      	ldrh	r2, [r7, #6]
 801dfe8:	8a7b      	ldrh	r3, [r7, #18]
 801dfea:	1ad3      	subs	r3, r2, r3
 801dfec:	b29b      	uxth	r3, r3
 801dfee:	f003 0301 	and.w	r3, r3, #1
 801dff2:	b29b      	uxth	r3, r3
 801dff4:	88fa      	ldrh	r2, [r7, #6]
 801dff6:	1ad3      	subs	r3, r2, r3
 801dff8:	80fb      	strh	r3, [r7, #6]
 801dffa:	e01c      	b.n	801e036 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801dffc:	88fb      	ldrh	r3, [r7, #6]
 801dffe:	3b10      	subs	r3, #16
 801e000:	80fb      	strh	r3, [r7, #6]
 801e002:	e018      	b.n	801e036 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801e004:	88fb      	ldrh	r3, [r7, #6]
 801e006:	3b20      	subs	r3, #32
 801e008:	80fb      	strh	r3, [r7, #6]
 801e00a:	e014      	b.n	801e036 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801e00c:	88fb      	ldrh	r3, [r7, #6]
 801e00e:	3b30      	subs	r3, #48	@ 0x30
 801e010:	80fb      	strh	r3, [r7, #6]
 801e012:	e010      	b.n	801e036 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801e014:	88fb      	ldrh	r3, [r7, #6]
 801e016:	3b1a      	subs	r3, #26
 801e018:	80fb      	strh	r3, [r7, #6]
 801e01a:	e00c      	b.n	801e036 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801e01c:	88fb      	ldrh	r3, [r7, #6]
 801e01e:	3308      	adds	r3, #8
 801e020:	80fb      	strh	r3, [r7, #6]
 801e022:	e008      	b.n	801e036 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801e024:	88fb      	ldrh	r3, [r7, #6]
 801e026:	3b50      	subs	r3, #80	@ 0x50
 801e028:	80fb      	strh	r3, [r7, #6]
 801e02a:	e004      	b.n	801e036 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801e02c:	88fb      	ldrh	r3, [r7, #6]
 801e02e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801e032:	80fb      	strh	r3, [r7, #6]
 801e034:	bf00      	nop
			}
			break;
 801e036:	e008      	b.n	801e04a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801e038:	89fb      	ldrh	r3, [r7, #14]
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d195      	bne.n	801df6a <ff_wtoupper+0x1a>
 801e03e:	8a3b      	ldrh	r3, [r7, #16]
 801e040:	005b      	lsls	r3, r3, #1
 801e042:	697a      	ldr	r2, [r7, #20]
 801e044:	4413      	add	r3, r2
 801e046:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801e048:	e78f      	b.n	801df6a <ff_wtoupper+0x1a>
			break;
 801e04a:	bf00      	nop
	}

	return chr;
 801e04c:	88fb      	ldrh	r3, [r7, #6]
}
 801e04e:	4618      	mov	r0, r3
 801e050:	371c      	adds	r7, #28
 801e052:	46bd      	mov	sp, r7
 801e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e058:	4770      	bx	lr
 801e05a:	bf00      	nop
 801e05c:	0801ecfc 	.word	0x0801ecfc
 801e060:	0801eef0 	.word	0x0801eef0

0801e064 <memset>:
 801e064:	4402      	add	r2, r0
 801e066:	4603      	mov	r3, r0
 801e068:	4293      	cmp	r3, r2
 801e06a:	d100      	bne.n	801e06e <memset+0xa>
 801e06c:	4770      	bx	lr
 801e06e:	f803 1b01 	strb.w	r1, [r3], #1
 801e072:	e7f9      	b.n	801e068 <memset+0x4>

0801e074 <__errno>:
 801e074:	4b01      	ldr	r3, [pc, #4]	@ (801e07c <__errno+0x8>)
 801e076:	6818      	ldr	r0, [r3, #0]
 801e078:	4770      	bx	lr
 801e07a:	bf00      	nop
 801e07c:	24000028 	.word	0x24000028

0801e080 <__libc_init_array>:
 801e080:	b570      	push	{r4, r5, r6, lr}
 801e082:	4d0d      	ldr	r5, [pc, #52]	@ (801e0b8 <__libc_init_array+0x38>)
 801e084:	4c0d      	ldr	r4, [pc, #52]	@ (801e0bc <__libc_init_array+0x3c>)
 801e086:	1b64      	subs	r4, r4, r5
 801e088:	10a4      	asrs	r4, r4, #2
 801e08a:	2600      	movs	r6, #0
 801e08c:	42a6      	cmp	r6, r4
 801e08e:	d109      	bne.n	801e0a4 <__libc_init_array+0x24>
 801e090:	4d0b      	ldr	r5, [pc, #44]	@ (801e0c0 <__libc_init_array+0x40>)
 801e092:	4c0c      	ldr	r4, [pc, #48]	@ (801e0c4 <__libc_init_array+0x44>)
 801e094:	f000 fd00 	bl	801ea98 <_init>
 801e098:	1b64      	subs	r4, r4, r5
 801e09a:	10a4      	asrs	r4, r4, #2
 801e09c:	2600      	movs	r6, #0
 801e09e:	42a6      	cmp	r6, r4
 801e0a0:	d105      	bne.n	801e0ae <__libc_init_array+0x2e>
 801e0a2:	bd70      	pop	{r4, r5, r6, pc}
 801e0a4:	f855 3b04 	ldr.w	r3, [r5], #4
 801e0a8:	4798      	blx	r3
 801e0aa:	3601      	adds	r6, #1
 801e0ac:	e7ee      	b.n	801e08c <__libc_init_array+0xc>
 801e0ae:	f855 3b04 	ldr.w	r3, [r5], #4
 801e0b2:	4798      	blx	r3
 801e0b4:	3601      	adds	r6, #1
 801e0b6:	e7f2      	b.n	801e09e <__libc_init_array+0x1e>
 801e0b8:	080208e0 	.word	0x080208e0
 801e0bc:	080208e0 	.word	0x080208e0
 801e0c0:	080208e0 	.word	0x080208e0
 801e0c4:	080208e4 	.word	0x080208e4

0801e0c8 <atan2>:
 801e0c8:	f000 baaa 	b.w	801e620 <__ieee754_atan2>
 801e0cc:	0000      	movs	r0, r0
	...

0801e0d0 <sqrt>:
 801e0d0:	b508      	push	{r3, lr}
 801e0d2:	ed2d 8b04 	vpush	{d8-d9}
 801e0d6:	eeb0 8b40 	vmov.f64	d8, d0
 801e0da:	f000 fa9d 	bl	801e618 <__ieee754_sqrt>
 801e0de:	eeb4 8b48 	vcmp.f64	d8, d8
 801e0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0e6:	d60c      	bvs.n	801e102 <sqrt+0x32>
 801e0e8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801e108 <sqrt+0x38>
 801e0ec:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801e0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0f4:	d505      	bpl.n	801e102 <sqrt+0x32>
 801e0f6:	f7ff ffbd 	bl	801e074 <__errno>
 801e0fa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801e0fe:	2321      	movs	r3, #33	@ 0x21
 801e100:	6003      	str	r3, [r0, #0]
 801e102:	ecbd 8b04 	vpop	{d8-d9}
 801e106:	bd08      	pop	{r3, pc}
	...

0801e110 <checkint>:
 801e110:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e114:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801e118:	429a      	cmp	r2, r3
 801e11a:	b570      	push	{r4, r5, r6, lr}
 801e11c:	dd2a      	ble.n	801e174 <checkint+0x64>
 801e11e:	f240 4333 	movw	r3, #1075	@ 0x433
 801e122:	429a      	cmp	r2, r3
 801e124:	dc24      	bgt.n	801e170 <checkint+0x60>
 801e126:	1a9b      	subs	r3, r3, r2
 801e128:	f1a3 0620 	sub.w	r6, r3, #32
 801e12c:	f04f 32ff 	mov.w	r2, #4294967295
 801e130:	fa02 f403 	lsl.w	r4, r2, r3
 801e134:	fa02 f606 	lsl.w	r6, r2, r6
 801e138:	f1c3 0520 	rsb	r5, r3, #32
 801e13c:	fa22 f505 	lsr.w	r5, r2, r5
 801e140:	4334      	orrs	r4, r6
 801e142:	432c      	orrs	r4, r5
 801e144:	409a      	lsls	r2, r3
 801e146:	ea20 0202 	bic.w	r2, r0, r2
 801e14a:	ea21 0404 	bic.w	r4, r1, r4
 801e14e:	4322      	orrs	r2, r4
 801e150:	f1a3 0420 	sub.w	r4, r3, #32
 801e154:	f1c3 0220 	rsb	r2, r3, #32
 801e158:	d10c      	bne.n	801e174 <checkint+0x64>
 801e15a:	40d8      	lsrs	r0, r3
 801e15c:	fa01 f302 	lsl.w	r3, r1, r2
 801e160:	4318      	orrs	r0, r3
 801e162:	40e1      	lsrs	r1, r4
 801e164:	4308      	orrs	r0, r1
 801e166:	f000 0001 	and.w	r0, r0, #1
 801e16a:	f1d0 0002 	rsbs	r0, r0, #2
 801e16e:	bd70      	pop	{r4, r5, r6, pc}
 801e170:	2002      	movs	r0, #2
 801e172:	e7fc      	b.n	801e16e <checkint+0x5e>
 801e174:	2000      	movs	r0, #0
 801e176:	e7fa      	b.n	801e16e <checkint+0x5e>

0801e178 <pow>:
 801e178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e17c:	ee10 4a90 	vmov	r4, s1
 801e180:	ed2d 8b0a 	vpush	{d8-d12}
 801e184:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801e188:	ee11 aa90 	vmov	sl, s3
 801e18c:	f108 32ff 	add.w	r2, r8, #4294967295
 801e190:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801e194:	429a      	cmp	r2, r3
 801e196:	ee10 5a10 	vmov	r5, s0
 801e19a:	ee11 0a10 	vmov	r0, s2
 801e19e:	b087      	sub	sp, #28
 801e1a0:	46c4      	mov	ip, r8
 801e1a2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801e1a6:	d806      	bhi.n	801e1b6 <pow+0x3e>
 801e1a8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801e1ac:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801e1b0:	2b7f      	cmp	r3, #127	@ 0x7f
 801e1b2:	f240 8157 	bls.w	801e464 <pow+0x2ec>
 801e1b6:	1802      	adds	r2, r0, r0
 801e1b8:	eb4a 010a 	adc.w	r1, sl, sl
 801e1bc:	f06f 0b01 	mvn.w	fp, #1
 801e1c0:	1e57      	subs	r7, r2, #1
 801e1c2:	f141 33ff 	adc.w	r3, r1, #4294967295
 801e1c6:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801e1ca:	45bb      	cmp	fp, r7
 801e1cc:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e1d0:	d242      	bcs.n	801e258 <pow+0xe0>
 801e1d2:	ea52 0301 	orrs.w	r3, r2, r1
 801e1d6:	f04f 0300 	mov.w	r3, #0
 801e1da:	d10c      	bne.n	801e1f6 <pow+0x7e>
 801e1dc:	196d      	adds	r5, r5, r5
 801e1de:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801e1e2:	4164      	adcs	r4, r4
 801e1e4:	42ab      	cmp	r3, r5
 801e1e6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801e1ea:	41a3      	sbcs	r3, r4
 801e1ec:	f0c0 808f 	bcc.w	801e30e <pow+0x196>
 801e1f0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e1f4:	e02b      	b.n	801e24e <pow+0xd6>
 801e1f6:	4ed4      	ldr	r6, [pc, #848]	@ (801e548 <pow+0x3d0>)
 801e1f8:	42b4      	cmp	r4, r6
 801e1fa:	bf08      	it	eq
 801e1fc:	429d      	cmpeq	r5, r3
 801e1fe:	d109      	bne.n	801e214 <pow+0x9c>
 801e200:	1800      	adds	r0, r0, r0
 801e202:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801e206:	eb4a 0a0a 	adc.w	sl, sl, sl
 801e20a:	4283      	cmp	r3, r0
 801e20c:	4bcf      	ldr	r3, [pc, #828]	@ (801e54c <pow+0x3d4>)
 801e20e:	eb73 030a 	sbcs.w	r3, r3, sl
 801e212:	e7eb      	b.n	801e1ec <pow+0x74>
 801e214:	196d      	adds	r5, r5, r5
 801e216:	48ce      	ldr	r0, [pc, #824]	@ (801e550 <pow+0x3d8>)
 801e218:	4164      	adcs	r4, r4
 801e21a:	42ab      	cmp	r3, r5
 801e21c:	eb70 0604 	sbcs.w	r6, r0, r4
 801e220:	d375      	bcc.n	801e30e <pow+0x196>
 801e222:	4281      	cmp	r1, r0
 801e224:	bf08      	it	eq
 801e226:	429a      	cmpeq	r2, r3
 801e228:	d171      	bne.n	801e30e <pow+0x196>
 801e22a:	4aca      	ldr	r2, [pc, #808]	@ (801e554 <pow+0x3dc>)
 801e22c:	4294      	cmp	r4, r2
 801e22e:	bf08      	it	eq
 801e230:	429d      	cmpeq	r5, r3
 801e232:	d0dd      	beq.n	801e1f0 <pow+0x78>
 801e234:	4294      	cmp	r4, r2
 801e236:	ea6f 0a0a 	mvn.w	sl, sl
 801e23a:	bf34      	ite	cc
 801e23c:	2400      	movcc	r4, #0
 801e23e:	2401      	movcs	r4, #1
 801e240:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801e244:	4554      	cmp	r4, sl
 801e246:	f040 81dc 	bne.w	801e602 <pow+0x48a>
 801e24a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801e24e:	b007      	add	sp, #28
 801e250:	ecbd 8b0a 	vpop	{d8-d12}
 801e254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e258:	196f      	adds	r7, r5, r5
 801e25a:	eb44 0904 	adc.w	r9, r4, r4
 801e25e:	1e7a      	subs	r2, r7, #1
 801e260:	f169 0300 	sbc.w	r3, r9, #0
 801e264:	4593      	cmp	fp, r2
 801e266:	eb7e 0303 	sbcs.w	r3, lr, r3
 801e26a:	d225      	bcs.n	801e2b8 <pow+0x140>
 801e26c:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e270:	2c00      	cmp	r4, #0
 801e272:	da13      	bge.n	801e29c <pow+0x124>
 801e274:	4651      	mov	r1, sl
 801e276:	f7ff ff4b 	bl	801e110 <checkint>
 801e27a:	2801      	cmp	r0, #1
 801e27c:	d10e      	bne.n	801e29c <pow+0x124>
 801e27e:	eeb1 0b40 	vneg.f64	d0, d0
 801e282:	ea57 0909 	orrs.w	r9, r7, r9
 801e286:	d10b      	bne.n	801e2a0 <pow+0x128>
 801e288:	f1ba 0f00 	cmp.w	sl, #0
 801e28c:	dadf      	bge.n	801e24e <pow+0xd6>
 801e28e:	b007      	add	sp, #28
 801e290:	ecbd 8b0a 	vpop	{d8-d12}
 801e294:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e298:	f000 bbba 	b.w	801ea10 <__math_divzero>
 801e29c:	2000      	movs	r0, #0
 801e29e:	e7f0      	b.n	801e282 <pow+0x10a>
 801e2a0:	f1ba 0f00 	cmp.w	sl, #0
 801e2a4:	dad3      	bge.n	801e24e <pow+0xd6>
 801e2a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e2aa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e2ae:	ed8d 7b00 	vstr	d7, [sp]
 801e2b2:	ed9d 0b00 	vldr	d0, [sp]
 801e2b6:	e7ca      	b.n	801e24e <pow+0xd6>
 801e2b8:	2c00      	cmp	r4, #0
 801e2ba:	da2b      	bge.n	801e314 <pow+0x19c>
 801e2bc:	4651      	mov	r1, sl
 801e2be:	f7ff ff27 	bl	801e110 <checkint>
 801e2c2:	b930      	cbnz	r0, 801e2d2 <pow+0x15a>
 801e2c4:	b007      	add	sp, #28
 801e2c6:	ecbd 8b0a 	vpop	{d8-d12}
 801e2ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2ce:	f000 bbb7 	b.w	801ea40 <__math_invalid>
 801e2d2:	1e41      	subs	r1, r0, #1
 801e2d4:	4248      	negs	r0, r1
 801e2d6:	4148      	adcs	r0, r1
 801e2d8:	0480      	lsls	r0, r0, #18
 801e2da:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e2de:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801e2e2:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801e2e6:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801e2ea:	2b7f      	cmp	r3, #127	@ 0x7f
 801e2ec:	d92d      	bls.n	801e34a <pow+0x1d2>
 801e2ee:	4b96      	ldr	r3, [pc, #600]	@ (801e548 <pow+0x3d0>)
 801e2f0:	2000      	movs	r0, #0
 801e2f2:	429c      	cmp	r4, r3
 801e2f4:	bf08      	it	eq
 801e2f6:	4285      	cmpeq	r5, r0
 801e2f8:	f43f af7a 	beq.w	801e1f0 <pow+0x78>
 801e2fc:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801e300:	428a      	cmp	r2, r1
 801e302:	d80c      	bhi.n	801e31e <pow+0x1a6>
 801e304:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e308:	42a8      	cmp	r0, r5
 801e30a:	41a3      	sbcs	r3, r4
 801e30c:	d204      	bcs.n	801e318 <pow+0x1a0>
 801e30e:	ee31 0b00 	vadd.f64	d0, d1, d0
 801e312:	e79c      	b.n	801e24e <pow+0xd6>
 801e314:	2000      	movs	r0, #0
 801e316:	e7e4      	b.n	801e2e2 <pow+0x16a>
 801e318:	ee30 0b41 	vsub.f64	d0, d0, d1
 801e31c:	e797      	b.n	801e24e <pow+0xd6>
 801e31e:	2d01      	cmp	r5, #1
 801e320:	eb74 0303 	sbcs.w	r3, r4, r3
 801e324:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801e328:	bf34      	ite	cc
 801e32a:	2301      	movcc	r3, #1
 801e32c:	2300      	movcs	r3, #0
 801e32e:	4296      	cmp	r6, r2
 801e330:	bf8c      	ite	hi
 801e332:	2600      	movhi	r6, #0
 801e334:	2601      	movls	r6, #1
 801e336:	42b3      	cmp	r3, r6
 801e338:	f000 809c 	beq.w	801e474 <pow+0x2fc>
 801e33c:	b007      	add	sp, #28
 801e33e:	ecbd 8b0a 	vpop	{d8-d12}
 801e342:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e346:	f000 bb5b 	b.w	801ea00 <__math_oflow>
 801e34a:	f1bc 0f00 	cmp.w	ip, #0
 801e34e:	d10a      	bne.n	801e366 <pow+0x1ee>
 801e350:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801e538 <pow+0x3c0>
 801e354:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e358:	ec53 2b17 	vmov	r2, r3, d7
 801e35c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801e360:	4615      	mov	r5, r2
 801e362:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801e366:	4a7c      	ldr	r2, [pc, #496]	@ (801e558 <pow+0x3e0>)
 801e368:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e36c:	4422      	add	r2, r4
 801e36e:	1513      	asrs	r3, r2, #20
 801e370:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801e374:	ee03 3a10 	vmov	s6, r3
 801e378:	0d12      	lsrs	r2, r2, #20
 801e37a:	4b78      	ldr	r3, [pc, #480]	@ (801e55c <pow+0x3e4>)
 801e37c:	0512      	lsls	r2, r2, #20
 801e37e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801e382:	1aa7      	subs	r7, r4, r2
 801e384:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801e388:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801e38c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801e390:	1e2e      	subs	r6, r5, #0
 801e392:	ec47 6b14 	vmov	d4, r6, r7
 801e396:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801e39a:	eea4 6b05 	vfma.f64	d6, d4, d5
 801e39e:	ed93 5b00 	vldr	d5, [r3]
 801e3a2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801e3a6:	eea3 2b05 	vfma.f64	d2, d3, d5
 801e3aa:	ed93 5b02 	vldr	d5, [r3, #8]
 801e3ae:	ee36 4b02 	vadd.f64	d4, d6, d2
 801e3b2:	ee32 2b44 	vsub.f64	d2, d2, d4
 801e3b6:	eea3 7b05 	vfma.f64	d7, d3, d5
 801e3ba:	ed93 5b04 	vldr	d5, [r3, #16]
 801e3be:	ee32 2b06 	vadd.f64	d2, d2, d6
 801e3c2:	ee37 7b02 	vadd.f64	d7, d7, d2
 801e3c6:	ee26 5b05 	vmul.f64	d5, d6, d5
 801e3ca:	ee26 0b05 	vmul.f64	d0, d6, d5
 801e3ce:	ee34 8b00 	vadd.f64	d8, d4, d0
 801e3d2:	eeb0 9b40 	vmov.f64	d9, d0
 801e3d6:	ee34 4b48 	vsub.f64	d4, d4, d8
 801e3da:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801e3de:	ee34 ab00 	vadd.f64	d10, d4, d0
 801e3e2:	ed93 5b06 	vldr	d5, [r3, #24]
 801e3e6:	ee26 bb00 	vmul.f64	d11, d6, d0
 801e3ea:	ee37 7b09 	vadd.f64	d7, d7, d9
 801e3ee:	ed93 4b08 	vldr	d4, [r3, #32]
 801e3f2:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801e3f6:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801e3fa:	eea6 5b04 	vfma.f64	d5, d6, d4
 801e3fe:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801e402:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801e406:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e40a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801e40e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801e412:	eea0 4b03 	vfma.f64	d4, d0, d3
 801e416:	eea0 5b04 	vfma.f64	d5, d0, d4
 801e41a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801e41e:	ee38 4b07 	vadd.f64	d4, d8, d7
 801e422:	ee21 6b04 	vmul.f64	d6, d1, d4
 801e426:	ee16 3a90 	vmov	r3, s13
 801e42a:	eeb0 5b46 	vmov.f64	d5, d6
 801e42e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801e432:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801e436:	18b2      	adds	r2, r6, r2
 801e438:	2a3e      	cmp	r2, #62	@ 0x3e
 801e43a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801e43e:	ee38 8b44 	vsub.f64	d8, d8, d4
 801e442:	ee38 8b07 	vadd.f64	d8, d8, d7
 801e446:	eea1 5b08 	vfma.f64	d5, d1, d8
 801e44a:	d91b      	bls.n	801e484 <pow+0x30c>
 801e44c:	2a00      	cmp	r2, #0
 801e44e:	da0b      	bge.n	801e468 <pow+0x2f0>
 801e450:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801e454:	ee36 0b00 	vadd.f64	d0, d6, d0
 801e458:	2800      	cmp	r0, #0
 801e45a:	f43f aef8 	beq.w	801e24e <pow+0xd6>
 801e45e:	eeb1 0b40 	vneg.f64	d0, d0
 801e462:	e6f4      	b.n	801e24e <pow+0xd6>
 801e464:	2000      	movs	r0, #0
 801e466:	e77e      	b.n	801e366 <pow+0x1ee>
 801e468:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801e46c:	d909      	bls.n	801e482 <pow+0x30a>
 801e46e:	2b00      	cmp	r3, #0
 801e470:	f6bf af64 	bge.w	801e33c <pow+0x1c4>
 801e474:	b007      	add	sp, #28
 801e476:	ecbd 8b0a 	vpop	{d8-d12}
 801e47a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e47e:	f000 bab7 	b.w	801e9f0 <__math_uflow>
 801e482:	2600      	movs	r6, #0
 801e484:	4936      	ldr	r1, [pc, #216]	@ (801e560 <pow+0x3e8>)
 801e486:	ed91 4b02 	vldr	d4, [r1, #8]
 801e48a:	ed91 3b00 	vldr	d3, [r1]
 801e48e:	eeb0 7b44 	vmov.f64	d7, d4
 801e492:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e496:	ee17 5a10 	vmov	r5, s14
 801e49a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e49e:	ed91 4b04 	vldr	d4, [r1, #16]
 801e4a2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801e4a6:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e4aa:	ed91 4b06 	vldr	d4, [r1, #24]
 801e4ae:	18dc      	adds	r4, r3, r3
 801e4b0:	f104 030f 	add.w	r3, r4, #15
 801e4b4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801e4b8:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e4bc:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801e4c0:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e4c4:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e4c8:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801e4cc:	ed91 4b08 	vldr	d4, [r1, #32]
 801e4d0:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e4d4:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801e4d8:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e4dc:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801e4e0:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e4e4:	ee26 6b06 	vmul.f64	d6, d6, d6
 801e4e8:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801e4ec:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801e4f0:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801e4f4:	eea5 4b03 	vfma.f64	d4, d5, d3
 801e4f8:	1940      	adds	r0, r0, r5
 801e4fa:	2700      	movs	r7, #0
 801e4fc:	eb17 020c 	adds.w	r2, r7, ip
 801e500:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801e504:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e508:	2e00      	cmp	r6, #0
 801e50a:	d175      	bne.n	801e5f8 <pow+0x480>
 801e50c:	42bd      	cmp	r5, r7
 801e50e:	db29      	blt.n	801e564 <pow+0x3ec>
 801e510:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801e514:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801e518:	4610      	mov	r0, r2
 801e51a:	ec41 0b10 	vmov	d0, r0, r1
 801e51e:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e522:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801e540 <pow+0x3c8>
 801e526:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e52a:	b007      	add	sp, #28
 801e52c:	ecbd 8b0a 	vpop	{d8-d12}
 801e530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e534:	f000 ba9c 	b.w	801ea70 <__math_check_oflow>
 801e538:	00000000 	.word	0x00000000
 801e53c:	43300000 	.word	0x43300000
 801e540:	00000000 	.word	0x00000000
 801e544:	7f000000 	.word	0x7f000000
 801e548:	3ff00000 	.word	0x3ff00000
 801e54c:	fff00000 	.word	0xfff00000
 801e550:	ffe00000 	.word	0xffe00000
 801e554:	7fe00000 	.word	0x7fe00000
 801e558:	c0196aab 	.word	0xc0196aab
 801e55c:	0801efb0 	.word	0x0801efb0
 801e560:	08020068 	.word	0x08020068
 801e564:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801e568:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801e56c:	4610      	mov	r0, r2
 801e56e:	ec41 0b15 	vmov	d5, r0, r1
 801e572:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801e576:	ee27 6b05 	vmul.f64	d6, d7, d5
 801e57a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801e57e:	eeb0 4bc7 	vabs.f64	d4, d7
 801e582:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801e586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e58a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801e608 <pow+0x490>
 801e58e:	d52a      	bpl.n	801e5e6 <pow+0x46e>
 801e590:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e594:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e59c:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e5a0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801e5a4:	bf58      	it	pl
 801e5a6:	eeb0 4b43 	vmovpl.f64	d4, d3
 801e5aa:	ee37 3b04 	vadd.f64	d3, d7, d4
 801e5ae:	ee34 6b43 	vsub.f64	d6, d4, d3
 801e5b2:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e5b6:	ee36 6b05 	vadd.f64	d6, d6, d5
 801e5ba:	ee36 6b03 	vadd.f64	d6, d6, d3
 801e5be:	ee36 7b44 	vsub.f64	d7, d6, d4
 801e5c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5ca:	d104      	bne.n	801e5d6 <pow+0x45e>
 801e5cc:	4632      	mov	r2, r6
 801e5ce:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801e5d2:	ec43 2b17 	vmov	d7, r2, r3
 801e5d6:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e5da:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e5de:	ee26 6b00 	vmul.f64	d6, d6, d0
 801e5e2:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e5e6:	ee27 0b00 	vmul.f64	d0, d7, d0
 801e5ea:	b007      	add	sp, #28
 801e5ec:	ecbd 8b0a 	vpop	{d8-d12}
 801e5f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5f4:	f000 ba33 	b.w	801ea5e <__math_check_uflow>
 801e5f8:	ec43 2b10 	vmov	d0, r2, r3
 801e5fc:	eea7 0b00 	vfma.f64	d0, d7, d0
 801e600:	e625      	b.n	801e24e <pow+0xd6>
 801e602:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801e610 <pow+0x498>
 801e606:	e622      	b.n	801e24e <pow+0xd6>
 801e608:	00000000 	.word	0x00000000
 801e60c:	00100000 	.word	0x00100000
	...

0801e618 <__ieee754_sqrt>:
 801e618:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801e61c:	4770      	bx	lr
	...

0801e620 <__ieee754_atan2>:
 801e620:	ee11 1a10 	vmov	r1, s2
 801e624:	eeb0 7b40 	vmov.f64	d7, d0
 801e628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e62a:	ee11 5a90 	vmov	r5, s3
 801e62e:	424b      	negs	r3, r1
 801e630:	4f59      	ldr	r7, [pc, #356]	@ (801e798 <__ieee754_atan2+0x178>)
 801e632:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801e636:	430b      	orrs	r3, r1
 801e638:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801e63c:	42bb      	cmp	r3, r7
 801e63e:	d80d      	bhi.n	801e65c <__ieee754_atan2+0x3c>
 801e640:	ee10 ca10 	vmov	ip, s0
 801e644:	ee17 6a90 	vmov	r6, s15
 801e648:	f1cc 0000 	rsb	r0, ip, #0
 801e64c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801e650:	ea40 000c 	orr.w	r0, r0, ip
 801e654:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801e658:	42b8      	cmp	r0, r7
 801e65a:	d904      	bls.n	801e666 <__ieee754_atan2+0x46>
 801e65c:	ee37 7b01 	vadd.f64	d7, d7, d1
 801e660:	eeb0 0b47 	vmov.f64	d0, d7
 801e664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e666:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801e66a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801e66e:	4308      	orrs	r0, r1
 801e670:	d103      	bne.n	801e67a <__ieee754_atan2+0x5a>
 801e672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e676:	f000 b897 	b.w	801e7a8 <atan>
 801e67a:	17ac      	asrs	r4, r5, #30
 801e67c:	f004 0402 	and.w	r4, r4, #2
 801e680:	ea53 0c0c 	orrs.w	ip, r3, ip
 801e684:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801e688:	d107      	bne.n	801e69a <__ieee754_atan2+0x7a>
 801e68a:	2c02      	cmp	r4, #2
 801e68c:	d05c      	beq.n	801e748 <__ieee754_atan2+0x128>
 801e68e:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801e760 <__ieee754_atan2+0x140>
 801e692:	2c03      	cmp	r4, #3
 801e694:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801e698:	e7e2      	b.n	801e660 <__ieee754_atan2+0x40>
 801e69a:	4311      	orrs	r1, r2
 801e69c:	d107      	bne.n	801e6ae <__ieee754_atan2+0x8e>
 801e69e:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801e768 <__ieee754_atan2+0x148>
 801e6a2:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801e770 <__ieee754_atan2+0x150>
 801e6a6:	2e00      	cmp	r6, #0
 801e6a8:	fe27 7b06 	vselge.f64	d7, d7, d6
 801e6ac:	e7d8      	b.n	801e660 <__ieee754_atan2+0x40>
 801e6ae:	42ba      	cmp	r2, r7
 801e6b0:	d10f      	bne.n	801e6d2 <__ieee754_atan2+0xb2>
 801e6b2:	4293      	cmp	r3, r2
 801e6b4:	f104 34ff 	add.w	r4, r4, #4294967295
 801e6b8:	d107      	bne.n	801e6ca <__ieee754_atan2+0xaa>
 801e6ba:	2c02      	cmp	r4, #2
 801e6bc:	d847      	bhi.n	801e74e <__ieee754_atan2+0x12e>
 801e6be:	4b37      	ldr	r3, [pc, #220]	@ (801e79c <__ieee754_atan2+0x17c>)
 801e6c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e6c4:	ed93 7b00 	vldr	d7, [r3]
 801e6c8:	e7ca      	b.n	801e660 <__ieee754_atan2+0x40>
 801e6ca:	2c02      	cmp	r4, #2
 801e6cc:	d842      	bhi.n	801e754 <__ieee754_atan2+0x134>
 801e6ce:	4b34      	ldr	r3, [pc, #208]	@ (801e7a0 <__ieee754_atan2+0x180>)
 801e6d0:	e7f6      	b.n	801e6c0 <__ieee754_atan2+0xa0>
 801e6d2:	42bb      	cmp	r3, r7
 801e6d4:	d0e3      	beq.n	801e69e <__ieee754_atan2+0x7e>
 801e6d6:	1a9b      	subs	r3, r3, r2
 801e6d8:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801e6dc:	ea4f 5223 	mov.w	r2, r3, asr #20
 801e6e0:	da1a      	bge.n	801e718 <__ieee754_atan2+0xf8>
 801e6e2:	2d00      	cmp	r5, #0
 801e6e4:	da01      	bge.n	801e6ea <__ieee754_atan2+0xca>
 801e6e6:	323c      	adds	r2, #60	@ 0x3c
 801e6e8:	db19      	blt.n	801e71e <__ieee754_atan2+0xfe>
 801e6ea:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801e6ee:	f000 f955 	bl	801e99c <fabs>
 801e6f2:	f000 f859 	bl	801e7a8 <atan>
 801e6f6:	eeb0 7b40 	vmov.f64	d7, d0
 801e6fa:	2c01      	cmp	r4, #1
 801e6fc:	d012      	beq.n	801e724 <__ieee754_atan2+0x104>
 801e6fe:	2c02      	cmp	r4, #2
 801e700:	d019      	beq.n	801e736 <__ieee754_atan2+0x116>
 801e702:	2c00      	cmp	r4, #0
 801e704:	d0ac      	beq.n	801e660 <__ieee754_atan2+0x40>
 801e706:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e778 <__ieee754_atan2+0x158>
 801e70a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e70e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801e780 <__ieee754_atan2+0x160>
 801e712:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e716:	e7a3      	b.n	801e660 <__ieee754_atan2+0x40>
 801e718:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801e768 <__ieee754_atan2+0x148>
 801e71c:	e7ed      	b.n	801e6fa <__ieee754_atan2+0xda>
 801e71e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801e788 <__ieee754_atan2+0x168>
 801e722:	e7ea      	b.n	801e6fa <__ieee754_atan2+0xda>
 801e724:	ee17 1a90 	vmov	r1, s15
 801e728:	ec53 2b17 	vmov	r2, r3, d7
 801e72c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e730:	ec43 2b17 	vmov	d7, r2, r3
 801e734:	e794      	b.n	801e660 <__ieee754_atan2+0x40>
 801e736:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e778 <__ieee754_atan2+0x158>
 801e73a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e73e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801e780 <__ieee754_atan2+0x160>
 801e742:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e746:	e78b      	b.n	801e660 <__ieee754_atan2+0x40>
 801e748:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801e780 <__ieee754_atan2+0x160>
 801e74c:	e788      	b.n	801e660 <__ieee754_atan2+0x40>
 801e74e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801e790 <__ieee754_atan2+0x170>
 801e752:	e785      	b.n	801e660 <__ieee754_atan2+0x40>
 801e754:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801e788 <__ieee754_atan2+0x168>
 801e758:	e782      	b.n	801e660 <__ieee754_atan2+0x40>
 801e75a:	bf00      	nop
 801e75c:	f3af 8000 	nop.w
 801e760:	54442d18 	.word	0x54442d18
 801e764:	c00921fb 	.word	0xc00921fb
 801e768:	54442d18 	.word	0x54442d18
 801e76c:	3ff921fb 	.word	0x3ff921fb
 801e770:	54442d18 	.word	0x54442d18
 801e774:	bff921fb 	.word	0xbff921fb
 801e778:	33145c07 	.word	0x33145c07
 801e77c:	3ca1a626 	.word	0x3ca1a626
 801e780:	54442d18 	.word	0x54442d18
 801e784:	400921fb 	.word	0x400921fb
	...
 801e790:	54442d18 	.word	0x54442d18
 801e794:	3fe921fb 	.word	0x3fe921fb
 801e798:	7ff00000 	.word	0x7ff00000
 801e79c:	08020010 	.word	0x08020010
 801e7a0:	0801fff8 	.word	0x0801fff8
 801e7a4:	00000000 	.word	0x00000000

0801e7a8 <atan>:
 801e7a8:	b538      	push	{r3, r4, r5, lr}
 801e7aa:	eeb0 7b40 	vmov.f64	d7, d0
 801e7ae:	ee17 5a90 	vmov	r5, s15
 801e7b2:	4b73      	ldr	r3, [pc, #460]	@ (801e980 <atan+0x1d8>)
 801e7b4:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e7b8:	429c      	cmp	r4, r3
 801e7ba:	d913      	bls.n	801e7e4 <atan+0x3c>
 801e7bc:	4b71      	ldr	r3, [pc, #452]	@ (801e984 <atan+0x1dc>)
 801e7be:	429c      	cmp	r4, r3
 801e7c0:	d803      	bhi.n	801e7ca <atan+0x22>
 801e7c2:	d107      	bne.n	801e7d4 <atan+0x2c>
 801e7c4:	ee10 3a10 	vmov	r3, s0
 801e7c8:	b123      	cbz	r3, 801e7d4 <atan+0x2c>
 801e7ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e7ce:	eeb0 0b47 	vmov.f64	d0, d7
 801e7d2:	bd38      	pop	{r3, r4, r5, pc}
 801e7d4:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e910 <atan+0x168>
 801e7d8:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e918 <atan+0x170>
 801e7dc:	2d00      	cmp	r5, #0
 801e7de:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e7e2:	e7f4      	b.n	801e7ce <atan+0x26>
 801e7e4:	4b68      	ldr	r3, [pc, #416]	@ (801e988 <atan+0x1e0>)
 801e7e6:	429c      	cmp	r4, r3
 801e7e8:	d811      	bhi.n	801e80e <atan+0x66>
 801e7ea:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e7ee:	429c      	cmp	r4, r3
 801e7f0:	d80a      	bhi.n	801e808 <atan+0x60>
 801e7f2:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e7f6:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e920 <atan+0x178>
 801e7fa:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e7fe:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e806:	dce2      	bgt.n	801e7ce <atan+0x26>
 801e808:	f04f 33ff 	mov.w	r3, #4294967295
 801e80c:	e013      	b.n	801e836 <atan+0x8e>
 801e80e:	f000 f8c5 	bl	801e99c <fabs>
 801e812:	4b5e      	ldr	r3, [pc, #376]	@ (801e98c <atan+0x1e4>)
 801e814:	429c      	cmp	r4, r3
 801e816:	d84f      	bhi.n	801e8b8 <atan+0x110>
 801e818:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e81c:	429c      	cmp	r4, r3
 801e81e:	d841      	bhi.n	801e8a4 <atan+0xfc>
 801e820:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e824:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e828:	2300      	movs	r3, #0
 801e82a:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e82e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e832:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e836:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e928 <atan+0x180>
 801e83a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e83e:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e842:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e930 <atan+0x188>
 801e846:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e84a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e938 <atan+0x190>
 801e84e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e852:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e940 <atan+0x198>
 801e856:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e85a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e948 <atan+0x1a0>
 801e85e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e862:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e950 <atan+0x1a8>
 801e866:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e958 <atan+0x1b0>
 801e86a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e86e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e960 <atan+0x1b8>
 801e872:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e876:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e968 <atan+0x1c0>
 801e87a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e87e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e970 <atan+0x1c8>
 801e882:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e886:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e978 <atan+0x1d0>
 801e88a:	1c5a      	adds	r2, r3, #1
 801e88c:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e890:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e894:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e898:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e89c:	d121      	bne.n	801e8e2 <atan+0x13a>
 801e89e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e8a2:	e794      	b.n	801e7ce <atan+0x26>
 801e8a4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e8a8:	2301      	movs	r3, #1
 801e8aa:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e8ae:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e8b2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e8b6:	e7be      	b.n	801e836 <atan+0x8e>
 801e8b8:	4b35      	ldr	r3, [pc, #212]	@ (801e990 <atan+0x1e8>)
 801e8ba:	429c      	cmp	r4, r3
 801e8bc:	d20b      	bcs.n	801e8d6 <atan+0x12e>
 801e8be:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e8c2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e8c6:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e8ca:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e8ce:	2302      	movs	r3, #2
 801e8d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e8d4:	e7af      	b.n	801e836 <atan+0x8e>
 801e8d6:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e8da:	2303      	movs	r3, #3
 801e8dc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e8e0:	e7a9      	b.n	801e836 <atan+0x8e>
 801e8e2:	4a2c      	ldr	r2, [pc, #176]	@ (801e994 <atan+0x1ec>)
 801e8e4:	492c      	ldr	r1, [pc, #176]	@ (801e998 <atan+0x1f0>)
 801e8e6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e8ea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e8ee:	ed93 5b00 	vldr	d5, [r3]
 801e8f2:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e8f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e8fa:	ed92 7b00 	vldr	d7, [r2]
 801e8fe:	2d00      	cmp	r5, #0
 801e900:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e904:	bfb8      	it	lt
 801e906:	eeb1 7b47 	vneglt.f64	d7, d7
 801e90a:	e760      	b.n	801e7ce <atan+0x26>
 801e90c:	f3af 8000 	nop.w
 801e910:	54442d18 	.word	0x54442d18
 801e914:	bff921fb 	.word	0xbff921fb
 801e918:	54442d18 	.word	0x54442d18
 801e91c:	3ff921fb 	.word	0x3ff921fb
 801e920:	8800759c 	.word	0x8800759c
 801e924:	7e37e43c 	.word	0x7e37e43c
 801e928:	e322da11 	.word	0xe322da11
 801e92c:	3f90ad3a 	.word	0x3f90ad3a
 801e930:	24760deb 	.word	0x24760deb
 801e934:	3fa97b4b 	.word	0x3fa97b4b
 801e938:	a0d03d51 	.word	0xa0d03d51
 801e93c:	3fb10d66 	.word	0x3fb10d66
 801e940:	c54c206e 	.word	0xc54c206e
 801e944:	3fb745cd 	.word	0x3fb745cd
 801e948:	920083ff 	.word	0x920083ff
 801e94c:	3fc24924 	.word	0x3fc24924
 801e950:	5555550d 	.word	0x5555550d
 801e954:	3fd55555 	.word	0x3fd55555
 801e958:	52defd9a 	.word	0x52defd9a
 801e95c:	bfadde2d 	.word	0xbfadde2d
 801e960:	2c6a6c2f 	.word	0x2c6a6c2f
 801e964:	bfa2b444 	.word	0xbfa2b444
 801e968:	af749a6d 	.word	0xaf749a6d
 801e96c:	bfb3b0f2 	.word	0xbfb3b0f2
 801e970:	fe231671 	.word	0xfe231671
 801e974:	bfbc71c6 	.word	0xbfbc71c6
 801e978:	9998ebc4 	.word	0x9998ebc4
 801e97c:	bfc99999 	.word	0xbfc99999
 801e980:	440fffff 	.word	0x440fffff
 801e984:	7ff00000 	.word	0x7ff00000
 801e988:	3fdbffff 	.word	0x3fdbffff
 801e98c:	3ff2ffff 	.word	0x3ff2ffff
 801e990:	40038000 	.word	0x40038000
 801e994:	08020048 	.word	0x08020048
 801e998:	08020028 	.word	0x08020028

0801e99c <fabs>:
 801e99c:	ec51 0b10 	vmov	r0, r1, d0
 801e9a0:	4602      	mov	r2, r0
 801e9a2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e9a6:	ec43 2b10 	vmov	d0, r2, r3
 801e9aa:	4770      	bx	lr

0801e9ac <with_errno>:
 801e9ac:	b510      	push	{r4, lr}
 801e9ae:	ed2d 8b02 	vpush	{d8}
 801e9b2:	eeb0 8b40 	vmov.f64	d8, d0
 801e9b6:	4604      	mov	r4, r0
 801e9b8:	f7ff fb5c 	bl	801e074 <__errno>
 801e9bc:	eeb0 0b48 	vmov.f64	d0, d8
 801e9c0:	ecbd 8b02 	vpop	{d8}
 801e9c4:	6004      	str	r4, [r0, #0]
 801e9c6:	bd10      	pop	{r4, pc}

0801e9c8 <xflow>:
 801e9c8:	b082      	sub	sp, #8
 801e9ca:	b158      	cbz	r0, 801e9e4 <xflow+0x1c>
 801e9cc:	eeb1 7b40 	vneg.f64	d7, d0
 801e9d0:	ed8d 7b00 	vstr	d7, [sp]
 801e9d4:	ed9d 7b00 	vldr	d7, [sp]
 801e9d8:	2022      	movs	r0, #34	@ 0x22
 801e9da:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e9de:	b002      	add	sp, #8
 801e9e0:	f7ff bfe4 	b.w	801e9ac <with_errno>
 801e9e4:	eeb0 7b40 	vmov.f64	d7, d0
 801e9e8:	e7f2      	b.n	801e9d0 <xflow+0x8>
 801e9ea:	0000      	movs	r0, r0
 801e9ec:	0000      	movs	r0, r0
	...

0801e9f0 <__math_uflow>:
 801e9f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e9f8 <__math_uflow+0x8>
 801e9f4:	f7ff bfe8 	b.w	801e9c8 <xflow>
 801e9f8:	00000000 	.word	0x00000000
 801e9fc:	10000000 	.word	0x10000000

0801ea00 <__math_oflow>:
 801ea00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ea08 <__math_oflow+0x8>
 801ea04:	f7ff bfe0 	b.w	801e9c8 <xflow>
 801ea08:	00000000 	.word	0x00000000
 801ea0c:	70000000 	.word	0x70000000

0801ea10 <__math_divzero>:
 801ea10:	b082      	sub	sp, #8
 801ea12:	2800      	cmp	r0, #0
 801ea14:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801ea18:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801ea1c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801ea20:	ed8d 7b00 	vstr	d7, [sp]
 801ea24:	ed9d 0b00 	vldr	d0, [sp]
 801ea28:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801ea38 <__math_divzero+0x28>
 801ea2c:	2022      	movs	r0, #34	@ 0x22
 801ea2e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801ea32:	b002      	add	sp, #8
 801ea34:	f7ff bfba 	b.w	801e9ac <with_errno>
	...

0801ea40 <__math_invalid>:
 801ea40:	eeb0 7b40 	vmov.f64	d7, d0
 801ea44:	eeb4 7b47 	vcmp.f64	d7, d7
 801ea48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea4c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801ea50:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801ea54:	d602      	bvs.n	801ea5c <__math_invalid+0x1c>
 801ea56:	2021      	movs	r0, #33	@ 0x21
 801ea58:	f7ff bfa8 	b.w	801e9ac <with_errno>
 801ea5c:	4770      	bx	lr

0801ea5e <__math_check_uflow>:
 801ea5e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801ea62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea66:	d102      	bne.n	801ea6e <__math_check_uflow+0x10>
 801ea68:	2022      	movs	r0, #34	@ 0x22
 801ea6a:	f7ff bf9f 	b.w	801e9ac <with_errno>
 801ea6e:	4770      	bx	lr

0801ea70 <__math_check_oflow>:
 801ea70:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801ea90 <__math_check_oflow+0x20>
 801ea74:	eeb0 7bc0 	vabs.f64	d7, d0
 801ea78:	eeb4 7b46 	vcmp.f64	d7, d6
 801ea7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea80:	dd02      	ble.n	801ea88 <__math_check_oflow+0x18>
 801ea82:	2022      	movs	r0, #34	@ 0x22
 801ea84:	f7ff bf92 	b.w	801e9ac <with_errno>
 801ea88:	4770      	bx	lr
 801ea8a:	bf00      	nop
 801ea8c:	f3af 8000 	nop.w
 801ea90:	ffffffff 	.word	0xffffffff
 801ea94:	7fefffff 	.word	0x7fefffff

0801ea98 <_init>:
 801ea98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea9a:	bf00      	nop
 801ea9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea9e:	bc08      	pop	{r3}
 801eaa0:	469e      	mov	lr, r3
 801eaa2:	4770      	bx	lr

0801eaa4 <_fini>:
 801eaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eaa6:	bf00      	nop
 801eaa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eaaa:	bc08      	pop	{r3}
 801eaac:	469e      	mov	lr, r3
 801eaae:	4770      	bx	lr
