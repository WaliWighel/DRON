
DRON_2.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00006000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e030  080002d0  080002d0  000062d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e28  0801e300  0801e300  00024300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020128  08020128  00026128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020130  08020130  00026130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08020134  08020134  00026134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000078  24000000  08020138  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000834  24000078  080201b0  00027078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240008ac  080201b0  000278ac  2**0
                  ALLOC
  9 .IRAM         000041ce  00000000  00000000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .DRAM         00000000  20000000  20000000  00049730  2**0
                  CONTENTS
 11 .RAM1         00021880  24000eb0  24000eb0  00027eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  00049730  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031fa1  00000000  00000000  0004975e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ed7  00000000  00000000  0007b6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002410  00000000  00000000  000815d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bf2  00000000  00000000  000839e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c716  00000000  00000000  000855da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000380fa  00000000  00000000  000c1cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016cc5a  00000000  00000000  000f9dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00266a44  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009e54  00000000  00000000  00266a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  002708dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801e2e8 	.word	0x0801e2e8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0801e2e8 	.word	0x0801e2e8

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b5 	b.w	800069c <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <BMP180_read_ID>:

static I2C_HandleTypeDef *hi2c_BMP180;
extern uint8_t BMP180_Press_IT[3], BMP180_Temp_IT[2];
extern uint8_t BMP180_IRQ;

uint8_t BMP180_read_ID(void){// comunication = 0x55
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, id_register, 1, &data, 1, 100);
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BMP180_read_ID+0x2c>)
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	2301      	movs	r3, #1
 80006b8:	22d0      	movs	r2, #208	@ 0xd0
 80006ba:	21ee      	movs	r1, #238	@ 0xee
 80006bc:	f00d fe64 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	24000094 	.word	0x24000094

080006d0 <BMP180_init>:

uint8_t BMP180_init(I2C_HandleTypeDef*hi2c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	hi2c_BMP180 = hi2c;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <BMP180_init+0x38>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
	BMP180_read_calliberation_data();
 80006de:	f000 f8dd 	bl	800089c <BMP180_read_calliberation_data>

	uint8_t status = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	status = BMP180_read_ID();
 80006e6:	f7ff ffdb 	bl	80006a0 <BMP180_read_ID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]

	if(status != 0x55){
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	2b55      	cmp	r3, #85	@ 0x55
 80006f2:	d002      	beq.n	80006fa <BMP180_init+0x2a>
		status = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e001      	b.n	80006fe <BMP180_init+0x2e>
	}
	else{
		status = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000094 	.word	0x24000094

0800070c <BMP180_READ_temp>:

uint16_t BMP180_READ_temp(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 2, 100);
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <BMP180_READ_temp+0x3c>)
 8000714:	6818      	ldr	r0, [r3, #0]
 8000716:	2364      	movs	r3, #100	@ 0x64
 8000718:	9302      	str	r3, [sp, #8]
 800071a:	2302      	movs	r3, #2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2301      	movs	r3, #1
 8000724:	22f6      	movs	r2, #246	@ 0xf6
 8000726:	21ee      	movs	r1, #238	@ 0xee
 8000728:	f00d fe2e 	bl	800e388 <HAL_I2C_Mem_Read>
	UT = ((data[0]<<8) | data[1]);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	797a      	ldrb	r2, [r7, #5]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <BMP180_READ_temp+0x40>)
 8000736:	6013      	str	r3, [r2, #0]
	return UT;
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <BMP180_READ_temp+0x40>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	24000094 	.word	0x24000094
 800074c:	000000a8 	.word	0x000000a8

08000750 <BMP180_READ_pres>:

uint32_t BMP180_READ_pres(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af04      	add	r7, sp, #16
	uint8_t data[3];
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, data, 3, 1000);
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <BMP180_READ_pres+0x3c>)
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2303      	movs	r3, #3
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	22f6      	movs	r2, #246	@ 0xf6
 800076c:	21ee      	movs	r1, #238	@ 0xee
 800076e:	f00d fe0b 	bl	800e388 <HAL_I2C_Mem_Read>
	return (((data[0]<<16)|(data[1]<<8)|data[2]) >> 5);
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	797b      	ldrb	r3, [r7, #5]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	4313      	orrs	r3, r2
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	4313      	orrs	r3, r2
 8000780:	115b      	asrs	r3, r3, #5
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000094 	.word	0x24000094

08000790 <BMP180_GET_temp_IT>:
void BMP180_READ_pres_IT(void){
	HAL_I2C_Mem_Read_IT(hi2c_BMP180, BMP180_ADDRES, out_msb, 1, (uint8_t *)BMP180_Press_IT, 3);
	BMP180_IRQ = 2;
}

uint16_t BMP180_GET_temp_IT(void){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	UT = ((BMP180_Temp_IT[0]<<8) | BMP180_Temp_IT[1]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <BMP180_GET_temp_IT+0x24>)
 800079c:	7852      	ldrb	r2, [r2, #1]
 800079e:	4313      	orrs	r3, r2
 80007a0:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a2:	6013      	str	r3, [r2, #0]
	return UT;
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <BMP180_GET_temp_IT+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	24000ecc 	.word	0x24000ecc
 80007b8:	000000a8 	.word	0x000000a8

080007bc <BMP180_GET_pres_IT>:

uint32_t BMP180_GET_pres_IT(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return (((BMP180_Press_IT[0]<<16)|(BMP180_Press_IT[1]<<8)|BMP180_Press_IT[2]) >> 5);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	021b      	lsls	r3, r3, #8
 80007cc:	4313      	orrs	r3, r2
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <BMP180_GET_pres_IT+0x24>)
 80007d0:	7892      	ldrb	r2, [r2, #2]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	115b      	asrs	r3, r3, #5
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	24000ec8 	.word	0x24000ec8

080007e4 <BMP180_start_measurment_temp>:
//	BMP180_start_measurment_pres();
//	//HAL_Delay(26);
//	pressure = BMP180_READ_pres();
//}

void BMP180_start_measurment_temp(void){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af04      	add	r7, sp, #16
	uint8_t data = 0x2E;
 80007ea:	232e      	movs	r3, #46	@ 0x2e
 80007ec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <BMP180_start_measurment_temp+0x2c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	2364      	movs	r3, #100	@ 0x64
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	2301      	movs	r3, #1
 8000800:	22f4      	movs	r2, #244	@ 0xf4
 8000802:	21ee      	movs	r1, #238	@ 0xee
 8000804:	f00d fcac 	bl	800e160 <HAL_I2C_Mem_Write>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000094 	.word	0x24000094

08000814 <BMP180_start_measurment_pres>:

void BMP180_start_measurment_pres(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af04      	add	r7, sp, #16
	uint8_t data = 0xF4;
 800081a:	23f4      	movs	r3, #244	@ 0xf4
 800081c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1, 100);
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <BMP180_start_measurment_pres+0x2c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	2364      	movs	r3, #100	@ 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	22f4      	movs	r2, #244	@ 0xf4
 8000832:	21ee      	movs	r1, #238	@ 0xee
 8000834:	f00d fc94 	bl	800e160 <HAL_I2C_Mem_Write>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	24000094 	.word	0x24000094

08000844 <BMP180_start_measurment_pres_IT>:

void BMP180_start_measurment_pres_IT(void){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
	uint8_t data = 0xF4;
 800084a:	23f4      	movs	r3, #244	@ 0xf4
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <BMP180_start_measurment_pres_IT+0x28>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	22f4      	movs	r2, #244	@ 0xf4
 800085e:	21ee      	movs	r1, #238	@ 0xee
 8000860:	f00d feac 	bl	800e5bc <HAL_I2C_Mem_Write_IT>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	24000094 	.word	0x24000094

08000870 <BMP180_start_measurment_temp_IT>:

void BMP180_start_measurment_temp_IT(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af02      	add	r7, sp, #8
	uint8_t data = 0x2E;
 8000876:	232e      	movs	r3, #46	@ 0x2e
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write_IT(hi2c_BMP180, BMP180_ADDRES, ctrl_meas, 1, &data, 1);
 800087a:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <BMP180_start_measurment_temp_IT+0x28>)
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	22f4      	movs	r2, #244	@ 0xf4
 800088a:	21ee      	movs	r1, #238	@ 0xee
 800088c:	f00d fe96 	bl	800e5bc <HAL_I2C_Mem_Write_IT>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000094 	.word	0x24000094

0800089c <BMP180_read_calliberation_data>:

void BMP180_read_calliberation_data(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af04      	add	r7, sp, #16

	uint8_t Callib_Data[22] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 80008b4:	23aa      	movs	r3, #170	@ 0xaa
 80008b6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(hi2c_BMP180, BMP180_ADDRES, Callib_Start, 1, Callib_Data, 22, 100);
 80008b8:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <BMP180_read_calliberation_data+0x10c>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	8afa      	ldrh	r2, [r7, #22]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	9302      	str	r3, [sp, #8]
 80008c2:	2316      	movs	r3, #22
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	463b      	mov	r3, r7
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2301      	movs	r3, #1
 80008cc:	21ee      	movs	r1, #238	@ 0xee
 80008ce:	f00d fd5b 	bl	800e388 <HAL_I2C_Mem_Read>

	AC1 = (int16_t)((Callib_Data[0] << 8) | Callib_Data[1]);
 80008d2:	783b      	ldrb	r3, [r7, #0]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	787b      	ldrb	r3, [r7, #1]
 80008da:	b21b      	sxth	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b21a      	sxth	r2, r3
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <BMP180_read_calliberation_data+0x110>)
 80008e2:	801a      	strh	r2, [r3, #0]
	AC2 = (int16_t)((Callib_Data[2] << 8) | Callib_Data[3]);
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	4b2f      	ldr	r3, [pc, #188]	@ (80009b0 <BMP180_read_calliberation_data+0x114>)
 80008f4:	801a      	strh	r2, [r3, #0]
	AC3 = (int16_t)((Callib_Data[4] << 8) | Callib_Data[5]);
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	797b      	ldrb	r3, [r7, #5]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <BMP180_read_calliberation_data+0x118>)
 8000906:	801a      	strh	r2, [r3, #0]
	AC4 = (int16_t)((Callib_Data[6] << 8) | Callib_Data[7]);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	b21b      	sxth	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b21b      	sxth	r3, r3
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <BMP180_read_calliberation_data+0x11c>)
 800091a:	801a      	strh	r2, [r3, #0]
	AC5 = (int16_t)((Callib_Data[8] << 8) | Callib_Data[9]);
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7a7b      	ldrb	r3, [r7, #9]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <BMP180_read_calliberation_data+0x120>)
 800092e:	801a      	strh	r2, [r3, #0]
	AC6 = (int16_t)((Callib_Data[10] << 8) | Callib_Data[11]);
 8000930:	7abb      	ldrb	r3, [r7, #10]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	b21a      	sxth	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	b21b      	sxth	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b21b      	sxth	r3, r3
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <BMP180_read_calliberation_data+0x124>)
 8000942:	801a      	strh	r2, [r3, #0]
	B1 = (int16_t)((Callib_Data[12] << 8) | Callib_Data[13]);
 8000944:	7b3b      	ldrb	r3, [r7, #12]
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	7b7b      	ldrb	r3, [r7, #13]
 800094c:	b21b      	sxth	r3, r3
 800094e:	4313      	orrs	r3, r2
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <BMP180_read_calliberation_data+0x128>)
 8000954:	801a      	strh	r2, [r3, #0]
	B2 = (int16_t)((Callib_Data[14] << 8) | Callib_Data[15]);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <BMP180_read_calliberation_data+0x12c>)
 8000966:	801a      	strh	r2, [r3, #0]
	MB = (int16_t)((Callib_Data[16] << 8) | Callib_Data[17]);
 8000968:	7c3b      	ldrb	r3, [r7, #16]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	7c7b      	ldrb	r3, [r7, #17]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <BMP180_read_calliberation_data+0x130>)
 8000978:	801a      	strh	r2, [r3, #0]
	MC = (int16_t)((Callib_Data[18] << 8) | Callib_Data[19]);
 800097a:	7cbb      	ldrb	r3, [r7, #18]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	7cfb      	ldrb	r3, [r7, #19]
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <BMP180_read_calliberation_data+0x134>)
 800098a:	801a      	strh	r2, [r3, #0]
	MD = (int16_t)((Callib_Data[20] << 8) | Callib_Data[21]);
 800098c:	7d3b      	ldrb	r3, [r7, #20]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	7d7b      	ldrb	r3, [r7, #21]
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <BMP180_read_calliberation_data+0x138>)
 800099c:	801a      	strh	r2, [r3, #0]
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000094 	.word	0x24000094
 80009ac:	00000082 	.word	0x00000082
 80009b0:	00000084 	.word	0x00000084
 80009b4:	00000086 	.word	0x00000086
 80009b8:	0000007c 	.word	0x0000007c
 80009bc:	0000007e 	.word	0x0000007e
 80009c0:	00000080 	.word	0x00000080
 80009c4:	00000088 	.word	0x00000088
 80009c8:	0000008a 	.word	0x0000008a
 80009cc:	0000008c 	.word	0x0000008c
 80009d0:	0000008e 	.word	0x0000008e
 80009d4:	00000090 	.word	0x00000090

080009d8 <BMP180_GET_temp>:

float BMP180_GET_temp(uint16_t temperature){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]

	X1 = ((temperature - AC6) * AC5)/32768;
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <BMP180_GET_temp+0x98>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
 80009ea:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <BMP180_GET_temp+0x9c>)
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	da03      	bge.n	80009fe <BMP180_GET_temp+0x26>
 80009f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80009fa:	441a      	add	r2, r3
 80009fc:	4613      	mov	r3, r2
 80009fe:	13db      	asrs	r3, r3, #15
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a04:	601a      	str	r2, [r3, #0]
	X2 = (MC * 2048)/(X1 + MD);
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <BMP180_GET_temp+0xa4>)
 8000a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a0c:	02da      	lsls	r2, r3, #11
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <BMP180_GET_temp+0xa8>)
 8000a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	440b      	add	r3, r1
 8000a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a20:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a22:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <BMP180_GET_temp+0xa0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <BMP180_GET_temp+0xac>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a30:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8)/16;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <BMP180_GET_temp+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3308      	adds	r3, #8
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da00      	bge.n	8000a3e <BMP180_GET_temp+0x66>
 8000a3c:	330f      	adds	r3, #15
 8000a3e:	111b      	asrs	r3, r3, #4
 8000a40:	ee07 3a90 	vmov	s15, r3
 8000a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	return temp/10.0;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <BMP180_GET_temp+0xb4>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000a5c:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	00000080 	.word	0x00000080
 8000a74:	0000007e 	.word	0x0000007e
 8000a78:	000000ac 	.word	0x000000ac
 8000a7c:	0000008e 	.word	0x0000008e
 8000a80:	00000090 	.word	0x00000090
 8000a84:	000000b0 	.word	0x000000b0
 8000a88:	000000b4 	.word	0x000000b4
 8000a8c:	000000c4 	.word	0x000000c4

08000a90 <BMP180_GET_pres>:

float BMP180_GET_pres(uint16_t pressure){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]

	UP = BMP180_READ_pres();
 8000a9a:	f7ff fe59 	bl	8000750 <BMP180_READ_pres>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a9c      	ldr	r2, [pc, #624]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000aa2:	6013      	str	r3, [r2, #0]
	X1 = (((UT-AC6) * AC5)/32768);//
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	@ (8000d18 <BMP180_GET_pres+0x288>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a9c      	ldr	r2, [pc, #624]	@ (8000d1c <BMP180_GET_pres+0x28c>)
 8000aaa:	8812      	ldrh	r2, [r2, #0]
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	4a9c      	ldr	r2, [pc, #624]	@ (8000d20 <BMP180_GET_pres+0x290>)
 8000ab0:	8812      	ldrh	r2, [r2, #0]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da03      	bge.n	8000ac2 <BMP180_GET_pres+0x32>
 8000aba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000abe:	441a      	add	r2, r3
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	13db      	asrs	r3, r3, #15
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ac8:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(2048)) / (X1+MD));
 8000aca:	4b97      	ldr	r3, [pc, #604]	@ (8000d28 <BMP180_GET_pres+0x298>)
 8000acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad0:	02da      	lsls	r2, r3, #11
 8000ad2:	4b96      	ldr	r3, [pc, #600]	@ (8000d2c <BMP180_GET_pres+0x29c>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b92      	ldr	r3, [pc, #584]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	440b      	add	r3, r1
 8000ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ae4:	4a92      	ldr	r2, [pc, #584]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000ae6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8000ae8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a90      	ldr	r2, [pc, #576]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8000af6:	4b8f      	ldr	r3, [pc, #572]	@ (8000d34 <BMP180_GET_pres+0x2a4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000afe:	4a8e      	ldr	r2, [pc, #568]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b00:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(4096)))/(2048);
 8000b02:	4b8e      	ldr	r3, [pc, #568]	@ (8000d3c <BMP180_GET_pres+0x2ac>)
 8000b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a8a      	ldr	r2, [pc, #552]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b10:	6812      	ldr	r2, [r2, #0]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da01      	bge.n	8000b1e <BMP180_GET_pres+0x8e>
 8000b1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	fb01 f303 	mul.w	r3, r1, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da01      	bge.n	8000b2c <BMP180_GET_pres+0x9c>
 8000b28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b2c:	12db      	asrs	r3, r3, #11
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b7c      	ldr	r3, [pc, #496]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b32:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(2048);
 8000b34:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <BMP180_GET_pres+0x2b0>)
 8000b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da01      	bge.n	8000b4c <BMP180_GET_pres+0xbc>
 8000b48:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000b4c:	12db      	asrs	r3, r3, #11
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b77      	ldr	r3, [pc, #476]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b52:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8000b54:	4b73      	ldr	r3, [pc, #460]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b75      	ldr	r3, [pc, #468]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a79      	ldr	r2, [pc, #484]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b60:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<3)+2)/4;
 8000b62:	4b79      	ldr	r3, [pc, #484]	@ (8000d48 <BMP180_GET_pres+0x2b8>)
 8000b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4b76      	ldr	r3, [pc, #472]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	3302      	adds	r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <BMP180_GET_pres+0xea>
 8000b78:	3303      	adds	r3, #3
 8000b7a:	109b      	asrs	r3, r3, #2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b73      	ldr	r3, [pc, #460]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000b80:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/8192;
 8000b82:	4b73      	ldr	r3, [pc, #460]	@ (8000d50 <BMP180_GET_pres+0x2c0>)
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da03      	bge.n	8000b9e <BMP180_GET_pres+0x10e>
 8000b96:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8000b9a:	441a      	add	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	135b      	asrs	r3, r3, #13
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b60      	ldr	r3, [pc, #384]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000ba4:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(4096)))/(65536);
 8000ba6:	4b6b      	ldr	r3, [pc, #428]	@ (8000d54 <BMP180_GET_pres+0x2c4>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4b62      	ldr	r3, [pc, #392]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a61      	ldr	r2, [pc, #388]	@ (8000d38 <BMP180_GET_pres+0x2a8>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fb02 f303 	mul.w	r3, r2, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <BMP180_GET_pres+0x132>
 8000bbe:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000bc2:	131b      	asrs	r3, r3, #12
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da03      	bge.n	8000bd4 <BMP180_GET_pres+0x144>
 8000bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd0:	441a      	add	r2, r3
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	141b      	asrs	r3, r3, #16
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b55      	ldr	r3, [pc, #340]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000bda:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/4;
 8000bdc:	4b51      	ldr	r3, [pc, #324]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b53      	ldr	r3, [pc, #332]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	3302      	adds	r3, #2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da00      	bge.n	8000bee <BMP180_GET_pres+0x15e>
 8000bec:	3303      	adds	r3, #3
 8000bee:	109b      	asrs	r3, r3, #2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bf4:	601a      	str	r2, [r3, #0]
	B4 = AC4* (uint32_t)(X3+32768)/(32768);
 8000bf6:	4b58      	ldr	r3, [pc, #352]	@ (8000d58 <BMP180_GET_pres+0x2c8>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <BMP180_GET_pres+0x2b4>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000c04:	fb02 f303 	mul.w	r3, r2, r3
 8000c08:	0bdb      	lsrs	r3, r3, #15
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c0c:	6013      	str	r3, [r2, #0]
	B7 = ((uint32_t)UP-B3)*(50000>>3);
 8000c0e:	4b41      	ldr	r3, [pc, #260]	@ (8000d14 <BMP180_GET_pres+0x284>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a4e      	ldr	r2, [pc, #312]	@ (8000d4c <BMP180_GET_pres+0x2bc>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	f641 026a 	movw	r2, #6250	@ 0x186a
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c22:	6013      	str	r3, [r2, #0]
	if (B7 < 0x80000000){
 8000c24:	4b4e      	ldr	r3, [pc, #312]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0e      	blt.n	8000c4a <BMP180_GET_pres+0x1ba>
		pres = (B7*2)/B4;
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	005a      	lsls	r2, r3, #1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c44:	edc3 7a00 	vstr	s15, [r3]
 8000c48:	e00d      	b.n	8000c66 <BMP180_GET_pres+0x1d6>
	}
	else{
		pres = (B7/B4)*2;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	@ (8000d60 <BMP180_GET_pres+0x2d0>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <BMP180_GET_pres+0x2cc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	4b40      	ldr	r3, [pc, #256]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c62:	edc3 7a00 	vstr	s15, [r3]
	}
	X1 = (pres/(256))*(pres/(256));
 8000c66:	4b3f      	ldr	r3, [pc, #252]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000c76:	edd3 6a00 	vldr	s13, [r3]
 8000c7a:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 8000d68 <BMP180_GET_pres+0x2d8>
 8000c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8a:	ee17 2a90 	vmov	r2, s15
 8000c8e:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c90:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(65536);
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da03      	bge.n	8000caa <BMP180_GET_pres+0x21a>
 8000ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ca6:	441a      	add	r2, r3
 8000ca8:	4613      	mov	r3, r2
 8000caa:	141b      	asrs	r3, r3, #16
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cb0:	601a      	str	r2, [r3, #0]
	X2 = (-7357*pres)/(65536);
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cb4:	edd3 7a00 	vldr	s15, [r3]
 8000cb8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000d6c <BMP180_GET_pres+0x2dc>
 8000cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8000d70 <BMP180_GET_pres+0x2e0>
 8000cc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ccc:	ee17 2a90 	vmov	r2, s15
 8000cd0:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cd2:	601a      	str	r2, [r3, #0]
	pres = pres + (X1+X2+3791)/(16);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <BMP180_GET_pres+0x294>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <BMP180_GET_pres+0x2a0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da00      	bge.n	8000ce8 <BMP180_GET_pres+0x258>
 8000ce6:	330f      	adds	r3, #15
 8000ce8:	111b      	asrs	r3, r3, #4
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000cfe:	edc3 7a00 	vstr	s15, [r3]
	return pres;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <BMP180_GET_pres+0x2d4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	ee07 3a90 	vmov	s15, r3
}
 8000d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0000009c 	.word	0x0000009c
 8000d18:	000000a8 	.word	0x000000a8
 8000d1c:	00000080 	.word	0x00000080
 8000d20:	0000007e 	.word	0x0000007e
 8000d24:	000000ac 	.word	0x000000ac
 8000d28:	0000008e 	.word	0x0000008e
 8000d2c:	00000090 	.word	0x00000090
 8000d30:	000000b0 	.word	0x000000b0
 8000d34:	000000b4 	.word	0x000000b4
 8000d38:	000000b8 	.word	0x000000b8
 8000d3c:	0000008a 	.word	0x0000008a
 8000d40:	00000084 	.word	0x00000084
 8000d44:	000000c0 	.word	0x000000c0
 8000d48:	00000082 	.word	0x00000082
 8000d4c:	000000bc 	.word	0x000000bc
 8000d50:	00000086 	.word	0x00000086
 8000d54:	00000088 	.word	0x00000088
 8000d58:	0000007c 	.word	0x0000007c
 8000d5c:	00000094 	.word	0x00000094
 8000d60:	00000098 	.word	0x00000098
 8000d64:	000000c8 	.word	0x000000c8
 8000d68:	43800000 	.word	0x43800000
 8000d6c:	c5e5e800 	.word	0xc5e5e800
 8000d70:	47800000 	.word	0x47800000

08000d74 <BMP180_CALIBRATION>:

void BMP180_CALIBRATION(float *firstpres){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

	//for(int i = 0; i < 30; i++){
	BMP180_start_measurment_temp();
 8000d7c:	f7ff fd32 	bl	80007e4 <BMP180_start_measurment_temp>
	HAL_Delay(10); // 9
 8000d80:	200a      	movs	r0, #10
 8000d82:	f007 ffbf 	bl	8008d04 <HAL_Delay>
	temperature = BMP180_READ_temp();
 8000d86:	f7ff fcc1 	bl	800070c <BMP180_READ_temp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d90:	601a      	str	r2, [r3, #0]
	temp = BMP180_GET_temp(temperature);
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <BMP180_CALIBRATION+0x70>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fe1d 	bl	80009d8 <BMP180_GET_temp>
 8000d9e:	eef0 7a40 	vmov.f32	s15, s0
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <BMP180_CALIBRATION+0x74>)
 8000da4:	edc3 7a00 	vstr	s15, [r3]
	BMP180_start_measurment_pres();
 8000da8:	f7ff fd34 	bl	8000814 <BMP180_start_measurment_pres>
	HAL_Delay(30); // 30
 8000dac:	201e      	movs	r0, #30
 8000dae:	f007 ffa9 	bl	8008d04 <HAL_Delay>
	pressure = BMP180_READ_pres();
 8000db2:	f7ff fccd 	bl	8000750 <BMP180_READ_pres>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
	pres = BMP180_GET_pres(pressure);
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <BMP180_CALIBRATION+0x78>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fe63 	bl	8000a90 <BMP180_GET_pres>
 8000dca:	eef0 7a40 	vmov.f32	s15, s0
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd0:	edc3 7a00 	vstr	s15, [r3]
	//}
	*firstpres = pres;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <BMP180_CALIBRATION+0x7c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	000000a0 	.word	0x000000a0
 8000de8:	000000c4 	.word	0x000000c4
 8000dec:	000000a4 	.word	0x000000a4
 8000df0:	000000c8 	.word	0x000000c8

08000df4 <BMP180_GET_height>:

float BMP180_GET_height(void){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	float height = 0, factor; // metry
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
	factor = 11.3; // na 1m cisnienie spada o 11,3 pa
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <BMP180_GET_height+0x38>)
 8000e02:	603b      	str	r3, [r7, #0]
	height = (ampritude/factor);
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <BMP180_GET_height+0x3c>)
 8000e06:	edd3 6a00 	vldr	s13, [r3]
 8000e0a:	ed97 7a00 	vldr	s14, [r7]
 8000e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e12:	edc7 7a01 	vstr	s15, [r7, #4]
	return height;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	ee07 3a90 	vmov	s15, r3
}
 8000e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	4134cccd 	.word	0x4134cccd
 8000e30:	000000d0 	.word	0x000000d0

08000e34 <ESC_1_SPEED>:
static TIM_HandleTypeDef *htim_ESC; //450Hz



void ESC_1_SPEED(uint16_t a)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed)
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d802      	bhi.n	8000e4e <ESC_1_SPEED+0x1a>
	  {
		  a = min_speed;
 8000e48:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e4c:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed)
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d902      	bls.n	8000e5e <ESC_1_SPEED+0x2a>
	  {
		  a =  max_speed;
 8000e58:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000e5c:	80fb      	strh	r3, [r7, #6]
	  }
	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, a);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <ESC_1_SPEED+0x40>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	24000098 	.word	0x24000098

08000e78 <ESC_2_SPEED>:

void ESC_2_SPEED(uint16_t a)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine2_balance)
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d802      	bhi.n	8000e92 <ESC_2_SPEED+0x1a>
	  {
		  a = min_speed - Engine2_balance;
 8000e8c:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000e90:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed - Engine2_balance)
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d902      	bls.n	8000ea2 <ESC_2_SPEED+0x2a>
	  {
		  a =  max_speed - Engine2_balance;
 8000e9c:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ea0:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, a - Engine2_balance);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ESC_2_SPEED+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	88fa      	ldrh	r2, [r7, #6]
 8000eaa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	24000098 	.word	0x24000098

08000ebc <ESC_3_SPEED>:

void ESC_3_SPEED(uint16_t a)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine3_balance)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d802      	bhi.n	8000ed6 <ESC_3_SPEED+0x1a>
	  {
		  a = min_speed - Engine3_balance;
 8000ed0:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000ed4:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a >  max_speed - Engine3_balance)
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d902      	bls.n	8000ee6 <ESC_3_SPEED+0x2a>
	  {
		  a =  max_speed - Engine3_balance;
 8000ee0:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000ee4:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, a - Engine3_balance);
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <ESC_3_SPEED+0x40>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	88fa      	ldrh	r2, [r7, #6]
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	24000098 	.word	0x24000098

08000f00 <ESC_4_SPEED>:

void ESC_4_SPEED(uint16_t a)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	80fb      	strh	r3, [r7, #6]
	  if(a < min_speed - Engine4_balance)
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f642 1203 	movw	r2, #10499	@ 0x2903
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d802      	bhi.n	8000f1a <ESC_4_SPEED+0x1a>
	  {
		  a = min_speed - Engine4_balance;
 8000f14:	f642 1304 	movw	r3, #10500	@ 0x2904
 8000f18:	80fb      	strh	r3, [r7, #6]
	  }
	  if(a > max_speed - Engine4_balance)
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	f644 422c 	movw	r2, #19500	@ 0x4c2c
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d902      	bls.n	8000f2a <ESC_4_SPEED+0x2a>
	  {
		  a = max_speed - Engine4_balance;
 8000f24:	f644 432c 	movw	r3, #19500	@ 0x4c2c
 8000f28:	80fb      	strh	r3, [r7, #6]
	  }

	  __HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, a - Engine4_balance);
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <ESC_4_SPEED+0x40>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	24000098 	.word	0x24000098

08000f44 <ESC_INT>:
 *
 * najpierw wlonczamy PWM a dopiero potem zasilanie do silników, w przeciwnym razie ESC mogą włączyć się w trybie programowania.
 *
 */
void ESC_INT(TIM_HandleTypeDef *htim)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	htim_ESC = htim;
 8000f4c:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]


	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_1);
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f014 ff7d 	bl	8015e58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_2);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2104      	movs	r1, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f014 ff77 	bl	8015e58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_3);
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f014 ff71 	bl	8015e58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim_ESC, TIM_CHANNEL_4);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	210c      	movs	r1, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f014 ff6b 	bl	8015e58 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_4, 10000);
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f8c:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_3, 10000);
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000f98:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_2, 10000);
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <ESC_INT+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fa4:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim_ESC, TIM_CHANNEL_1, 10000);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <ESC_INT+0x8c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
	ESC_POWER_0;
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <ESC_INT+0x90>)
 8000fba:	f00d f801 	bl	800dfc0 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000fc2:	f007 fe9f 	bl	8008d04 <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000098 	.word	0x24000098
 8000fd4:	58021800 	.word	0x58021800

08000fd8 <HMC5883L_Init>:
static I2C_HandleTypeDef *hi2c_HMC5883L;

extern uint8_t HMC5883L_Data_IT[6];
extern uint8_t HMC583L_IRQ;

uint8_t HMC5883L_Init(I2C_HandleTypeDef*hi2c){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	6078      	str	r0, [r7, #4]

	hi2c_HMC5883L = hi2c;
 8000fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HMC5883L_Init+0xb4>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]

	uint8_t data = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	 * bit3 = 0			30 HzOutput rate
	 * bit2 = 0		}
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0xF0;
 8000fea:	23f0      	movs	r3, #240	@ 0xf0
 8000fec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_A, 1, &data, 1, 1);
 8000fee:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HMC5883L_Init+0xb4>)
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030f 	add.w	r3, r7, #15
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	213c      	movs	r1, #60	@ 0x3c
 8001006:	f00d f8ab 	bl	800e160 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0
	 * bit0 = 0
	 */
	data = 0x32;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Configuration_Register_B, 1, &data, 1, 1);
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HMC5883L_Init+0xb4>)
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	2301      	movs	r3, #1
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	f107 030f 	add.w	r3, r7, #15
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	f00d f89b 	bl	800e160 <HAL_I2C_Mem_Write>
	 * bit3 = 0
	 * bit2 = 0
	 * bit1 = 0	{ Continuous-Measurement Mode
	 * bit0 = 0 }
	 */
	data = 0x80;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Mode_Register, 1, &data, 1, 1);
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HMC5883L_Init+0xb4>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2202      	movs	r2, #2
 8001044:	213c      	movs	r1, #60	@ 0x3c
 8001046:	f00d f88b 	bl	800e160 <HAL_I2C_Mem_Write>


	uint8_t status = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Identifaction_Register_A, 1, &status, 1, 1);
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HMC5883L_Init+0xb4>)
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030e 	add.w	r3, r7, #14
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	220a      	movs	r2, #10
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	f00d f98f 	bl	800e388 <HAL_I2C_Mem_Read>

	if(status != 0x48){
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b48      	cmp	r3, #72	@ 0x48
 800106e:	d002      	beq.n	8001076 <HMC5883L_Init+0x9e>
		status = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	73bb      	strb	r3, [r7, #14]
 8001074:	e001      	b.n	800107a <HMC5883L_Init+0xa2>
	}
	else{
		status = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
	}
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f007 fe42 	bl	8008d04 <HAL_Delay>

	return status;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400009c 	.word	0x2400009c

08001090 <HMC5883L_Get_Z_Start>:


int16_t HMC5883L_Get_Z_Start(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	int16_t fulldata = 182;
 8001096:	23b6      	movs	r3, #182	@ 0xb6
 8001098:	80fb      	strh	r3, [r7, #6]
	uint8_t data[6];

	HAL_I2C_Mem_Read(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, data, 6, 1);
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <HMC5883L_Get_Z_Start+0x40>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2306      	movs	r3, #6
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	463b      	mov	r3, r7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2205      	movs	r2, #5
 80010ae:	213c      	movs	r1, #60	@ 0x3c
 80010b0:	f00d f96a 	bl	800e388 <HAL_I2C_Mem_Read>

	fulldata = ((int16_t)data[4]<<8) | data[5];
 80010b4:	793b      	ldrb	r3, [r7, #4]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2400009c 	.word	0x2400009c

080010d4 <HMC5883L_Get_Z_Start_IT>:

void HMC5883L_Get_Z_Start_IT(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(hi2c_HMC5883L, HMC5883L_I2C_Address<<1, HMC5883L_Data_Output_Z_MSB_Register, 1, (uint8_t *)HMC5883L_Data_IT, 6);
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HMC5883L_Get_Z_Start_IT+0x28>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	2306      	movs	r3, #6
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <HMC5883L_Get_Z_Start_IT+0x2c>)
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2205      	movs	r2, #5
 80010ea:	213c      	movs	r1, #60	@ 0x3c
 80010ec:	f00d faf0 	bl	800e6d0 <HAL_I2C_Mem_Read_IT>
	HMC583L_IRQ = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <HMC5883L_Get_Z_Start_IT+0x30>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2400009c 	.word	0x2400009c
 8001100:	24000ec0 	.word	0x24000ec0
 8001104:	000041bd 	.word	0x000041bd

08001108 <HMC5883L_Get_Z_End_IT>:

int16_t HMC5883L_Get_Z_End_IT(void){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	int16_t fulldata = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	80fb      	strh	r3, [r7, #6]

	fulldata = ((int16_t)HMC5883L_Data_IT[4]<<8) | HMC5883L_Data_IT[5];
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HMC5883L_Get_Z_End_IT+0x2c>)
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	80fb      	strh	r3, [r7, #6]

	return fulldata;
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	24000ec0 	.word	0x24000ec0

08001138 <HMC5883L_Calibration>:


int16_t HMC5883L_Calibration(void){
 8001138:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
	int64_t mes_data = 0;
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i = 0; i < 10; i++){
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e014      	b.n	800117c <HMC5883L_Calibration+0x44>
		mes_data += HMC5883L_Get_Z_Start();
 8001152:	f7ff ff9d 	bl	8001090 <HMC5883L_Get_Z_Start>
 8001156:	4603      	mov	r3, r0
 8001158:	b21b      	sxth	r3, r3
 800115a:	17da      	asrs	r2, r3, #31
 800115c:	461c      	mov	r4, r3
 800115e:	4615      	mov	r5, r2
 8001160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001164:	eb12 0804 	adds.w	r8, r2, r4
 8001168:	eb43 0905 	adc.w	r9, r3, r5
 800116c:	e9c7 8902 	strd	r8, r9, [r7, #8]
		HAL_Delay(100); //Output = 30Hz
 8001170:	2064      	movs	r0, #100	@ 0x64
 8001172:	f007 fdc7 	bl	8008d04 <HAL_Delay>
	for(int i = 0; i < 10; i++){
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b09      	cmp	r3, #9
 8001180:	dde7      	ble.n	8001152 <HMC5883L_Calibration+0x1a>
	}

	return (mes_data/10);
 8001182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001186:	f04f 020a 	mov.w	r2, #10
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	f7ff f8bf 	bl	8000310 <__aeabi_ldivmod>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	b213      	sxth	r3, r2
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011a4 <MPU6050_INIT>:
//extern float xval;
//extern float yval;
//extern float zval;


uint8_t MPU6050_INIT(I2C_HandleTypeDef*hi2c){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	hi2c_mpu6050 = hi2c;
 80011ac:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <MPU6050_INIT+0x58>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
	MPU6050_RESET();
 80011b2:	f000 f825 	bl	8001200 <MPU6050_RESET>
	MPU6050_CONFIG_SAMPLE_RATE();
 80011b6:	f000 f88f 	bl	80012d8 <MPU6050_CONFIG_SAMPLE_RATE>
	MPU6050_CONFIG_DLPF(0x05);// //05
 80011ba:	2005      	movs	r0, #5
 80011bc:	f000 f838 	bl	8001230 <MPU6050_CONFIG_DLPF>
	/*
	 *  0 - 250 o/s
	 *  0x08 - 500 o/s
	 */
	MPU6050_CONFIG_GYRO(0x08);//+-500 o/s
 80011c0:	2008      	movs	r0, #8
 80011c2:	f000 f851 	bl	8001268 <MPU6050_CONFIG_GYRO>
	MPU6050_CONFIG_ACCEL(0x08); // +-4g
 80011c6:	2008      	movs	r0, #8
 80011c8:	f000 f86a 	bl	80012a0 <MPU6050_CONFIG_ACCEL>

	MPU6050_Enable_I2C_Bypass();
 80011cc:	f000 fd34 	bl	8001c38 <MPU6050_Enable_I2C_Bypass>
	MPU6050_CONFIG_USER_CONTROL();
 80011d0:	f000 f89a 	bl	8001308 <MPU6050_CONFIG_USER_CONTROL>

	HAL_Delay(10);
 80011d4:	200a      	movs	r0, #10
 80011d6:	f007 fd95 	bl	8008d04 <HAL_Delay>

	uint8_t status;
	status = MPU6050_READ_ID();
 80011da:	f000 fd15 	bl	8001c08 <MPU6050_READ_ID>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]

	if(status != 104){
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	2b68      	cmp	r3, #104	@ 0x68
 80011e6:	d002      	beq.n	80011ee <MPU6050_INIT+0x4a>
		status = 0;//error
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <MPU6050_INIT+0x4e>
	}
	else{
		status = 1;//ok
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
//	int x = MPU6050_GET_ACCEL_FULLVALUE_X();
//	x = MPU6050_READ_CONFIG_SAMPLE_RATE();
//	x = MPU6050_READ_CONFIG_DLPF();//1kHz;
//	x = MPU6050_READ_CONFIG_GYRO();//+-500 o/s;
//	x = MPU6050_READ_CONFIG_ACCEL(); // +-8g;;
	return status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	240000a0 	.word	0x240000a0

08001200 <MPU6050_RESET>:


void MPU6050_RESET(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;//0x80
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_1, 1, &data, 1, 1);
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MPU6050_RESET+0x2c>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	226b      	movs	r2, #107	@ 0x6b
 800121e:	21d0      	movs	r1, #208	@ 0xd0
 8001220:	f00c ff9e 	bl	800e160 <HAL_I2C_Mem_Write>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	240000a0 	.word	0x240000a0

08001230 <MPU6050_CONFIG_DLPF>:

void MPU6050_CONFIG_DLPF(uint8_t DLPF_CFG){
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint8_t data = DLPF_CFG;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_CONFIG, 1, &data, 1, 1);
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MPU6050_CONFIG_DLPF+0x34>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	221a      	movs	r2, #26
 8001254:	21d0      	movs	r1, #208	@ 0xd0
 8001256:	f00c ff83 	bl	800e160 <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	240000a0 	.word	0x240000a0

08001268 <MPU6050_CONFIG_GYRO>:

void MPU6050_CONFIG_GYRO(uint8_t GYRO_CFG/*konfiguracja gyroskopy*/){
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	uint8_t data = GYRO_CFG;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_CONFIG, 1, &data, 1, 1);
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MPU6050_CONFIG_GYRO+0x34>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	2301      	movs	r3, #1
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	221b      	movs	r2, #27
 800128c:	21d0      	movs	r1, #208	@ 0xd0
 800128e:	f00c ff67 	bl	800e160 <HAL_I2C_Mem_Write>
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240000a0 	.word	0x240000a0

080012a0 <MPU6050_CONFIG_ACCEL>:

void MPU6050_CONFIG_ACCEL(uint8_t ACCEL_CFG/*konfiguracja akcelorometru*/){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ACCEL_CFG;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_CONFIG, 1, &data, 1, 1);
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MPU6050_CONFIG_ACCEL+0x34>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 030f 	add.w	r3, r7, #15
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	221c      	movs	r2, #28
 80012c4:	21d0      	movs	r1, #208	@ 0xd0
 80012c6:	f00c ff4b 	bl	800e160 <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	240000a0 	.word	0x240000a0

080012d8 <MPU6050_CONFIG_SAMPLE_RATE>:
void MPU6050_CONFIG_INT(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_ENABLE, 1, &data, 1, 1);
}

void MPU6050_CONFIG_SAMPLE_RATE(void){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af04      	add	r7, sp, #16
	uint8_t data = 0x00; // Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)                 Gyroscope Output Rate = 1kHz
 80012de:	2300      	movs	r3, #0
 80012e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_SMPLRT_DIV, 1, &data, 1, 1);
 80012e2:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <MPU6050_CONFIG_SAMPLE_RATE+0x2c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2219      	movs	r2, #25
 80012f6:	21d0      	movs	r1, #208	@ 0xd0
 80012f8:	f00c ff32 	bl	800e160 <HAL_I2C_Mem_Write>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240000a0 	.word	0x240000a0

08001308 <MPU6050_CONFIG_USER_CONTROL>:
void MPU6050_CONFIG_INTERRUPT_ENABLE(void){
	uint8_t data = 0x00;
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_PWR_MGMT_2, 1, &data, 1, 1);
}

void MPU6050_CONFIG_USER_CONTROL(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af04      	add	r7, sp, #16
	uint8_t data = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MPU6050_CONFIG_USER_CONTROL+0x2c>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	226a      	movs	r2, #106	@ 0x6a
 8001326:	21d0      	movs	r1, #208	@ 0xd0
 8001328:	f00c ff1a 	bl	800e160 <HAL_I2C_Mem_Write>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	240000a0 	.word	0x240000a0

08001338 <MPU6050_CALIBRATION>:


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void MPU6050_CALIBRATION(float *accelx_cal,float *accely_cal,float*accelz_cal,float *gyrox_cal,float *gyroy_cal,
		float *gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6178      	str	r0, [r7, #20]
 8001340:	6139      	str	r1, [r7, #16]
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
 800134a:	edc7 0a00 	vstr	s1, [r7]

	float accelx = 0, accely = 0, accelz = 0, gyrox = 0, gyroy = 0, gyroz = 0;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 1000; i++){ //5 sec
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e06b      	b.n	8001450 <MPU6050_CALIBRATION+0x118>
		  accelx = accelx + MPU6050_GET_ACCEL_FULLVALUE_X()/Acc_Scale;
 8001378:	f000 fbc2 	bl	8001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>
 800137c:	4603      	mov	r3, r0
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001386:	ed97 7a00 	vldr	s14, [r7]
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		  accely = accely + MPU6050_GET_ACCEL_FULLVALUE_Y()/Acc_Scale;
 800139a:	f000 fbd1 	bl	8001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>
 800139e:	4603      	mov	r3, r0
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a8:	ed97 7a00 	vldr	s14, [r7]
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  accelz = accelz + MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale;
 80013bc:	f000 fbd4 	bl	8001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>
 80013c0:	4603      	mov	r3, r0
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ca:	ed97 7a00 	vldr	s14, [r7]
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80013d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013da:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  gyrox = gyrox + MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale;
 80013de:	f000 fbd7 	bl	8001b90 <MPU6050_GET_GYRO_FULLVALUE_X>
 80013e2:	4603      	mov	r3, r0
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  gyroy = gyroy + MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale;
 8001400:	f000 fbda 	bl	8001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>
 8001404:	4603      	mov	r3, r0
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  gyroz = gyroz + MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale;
 8001422:	f000 fbdd 	bl	8001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>
 8001426:	4603      	mov	r3, r0
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001430:	ed97 7a01 	vldr	s14, [r7, #4]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	ed97 7a08 	vldr	s14, [r7, #32]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	edc7 7a08 	vstr	s15, [r7, #32]
		  HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f007 fc5d 	bl	8008d04 <HAL_Delay>
	for(int i = 0; i < 1000; i++){ //5 sec
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001456:	db8f      	blt.n	8001378 <MPU6050_CALIBRATION+0x40>
	}
	*accelx_cal = accelx/1000;
 8001458:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800145c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	edc3 7a00 	vstr	s15, [r3]
	*accely_cal = accely/1000;
 800146a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800146e:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	edc3 7a00 	vstr	s15, [r3]
	*accelz_cal = accelz/1000;
 800147c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001480:	eddf 6a17 	vldr	s13, [pc, #92]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 8001484:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edc3 7a00 	vstr	s15, [r3]

	*accelz_cal = 1 - *accelz_cal;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a00 	vstr	s15, [r3]

	*gyrox_cal = gyrox/1000;
 80014a2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	edc3 7a00 	vstr	s15, [r3]
	*gyroy_cal = gyroy/1000;
 80014b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80014b8:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	*gyroz_cal = gyroz/1000;
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80014e0 <MPU6050_CALIBRATION+0x1a8>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	edc3 7a00 	vstr	s15, [r3]
}
 80014d8:	bf00      	nop
 80014da:	3738      	adds	r7, #56	@ 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	447a0000 	.word	0x447a0000
 80014e4:	00000000 	.word	0x00000000

080014e8 <MPU6050_GET_ACCEL_TO_ANGLE>:

void MPU6050_GET_ACCEL_TO_ANGLE(float ax, float ay, float az, float *ax_ang, float *ay_ang/*, float *az_ang*/){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b090      	sub	sp, #64	@ 0x40
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80014f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014fa:	60b8      	str	r0, [r7, #8]
 80014fc:	6079      	str	r1, [r7, #4]
	double i = 0-1,axan,ayan;
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <MPU6050_GET_ACCEL_TO_ANGLE+0xf8>)
 8001504:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double ang1 = sqrt((ax*ax)+(az*az));
 8001508:	edd7 7a05 	vldr	s15, [r7, #20]
 800150c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001510:	edd7 7a03 	vldr	s15, [r7, #12]
 8001514:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001520:	eeb0 0b47 	vmov.f64	d0, d7
 8001524:	f01c f9fc 	bl	801d920 <sqrt>
 8001528:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	double ang2 = sqrt((ay*ay)+(az*az));
 800152c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001530:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001544:	eeb0 0b47 	vmov.f64	d0, d7
 8001548:	f01c f9ea 	bl	801d920 <sqrt>
 800154c:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	axan = atan2((ay*i), ang1);
 8001550:	edd7 7a04 	vldr	s15, [r7, #16]
 8001554:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001558:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800155c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001560:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001564:	eeb0 0b47 	vmov.f64	d0, d7
 8001568:	f01c f9d6 	bl	801d918 <atan2>
 800156c:	ed87 0b08 	vstr	d0, [r7, #32]
	ayan= atan2(ax, ang2);
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	ed97 1b0a 	vldr	d1, [r7, #40]	@ 0x28
 800157c:	eeb0 0b47 	vmov.f64	d0, d7
 8001580:	f01c f9ca 	bl	801d918 <atan2>
 8001584:	ed87 0b06 	vstr	d0, [r7, #24]

	*ax_ang = (axan*180)/M_PI;
 8001588:	ed97 7b08 	vldr	d7, [r7, #32]
 800158c:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 8001590:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001594:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 8001598:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800159c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	edc3 7a00 	vstr	s15, [r3]
	*ay_ang = (ayan*180)/M_PI;
 80015a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80015aa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80015d0 <MPU6050_GET_ACCEL_TO_ANGLE+0xe8>
 80015ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b2:	ed9f 5b09 	vldr	d5, [pc, #36]	@ 80015d8 <MPU6050_GET_ACCEL_TO_ANGLE+0xf0>
 80015b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a00 	vstr	s15, [r3]
}
 80015c4:	bf00      	nop
 80015c6:	3740      	adds	r7, #64	@ 0x40
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40668000 	.word	0x40668000
 80015d8:	54442d18 	.word	0x54442d18
 80015dc:	400921fb 	.word	0x400921fb
 80015e0:	bff00000 	.word	0xbff00000

080015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>:
	*gy_ang = (gy/1000) + *gy_ang;
	*gz_ang = (gz/1000) + *gz_ang;
}

void MPU6050_GET_ACCANDGYR_CALANDSCL(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,
		float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af04      	add	r7, sp, #16
 80015ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80015ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	ed87 0a07 	vstr	s0, [r7, #28]
 80015f6:	edc7 0a06 	vstr	s1, [r7, #24]
 80015fa:	ed87 1a05 	vstr	s2, [r7, #20]
 80015fe:	edc7 1a04 	vstr	s3, [r7, #16]
 8001602:	ed87 2a03 	vstr	s4, [r7, #12]
 8001606:	edc7 2a02 	vstr	s5, [r7, #8]
 800160a:	ed87 3a01 	vstr	s6, [r7, #4]
 800160e:	edc7 3a00 	vstr	s7, [r7]

	uint8_t pdata[14];
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14, 1); // szybesz o ~1ms
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <MPU6050_GET_ACCANDGYR_CALANDSCL+0x168>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	230e      	movs	r3, #14
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	223b      	movs	r2, #59	@ 0x3b
 8001628:	21d0      	movs	r1, #208	@ 0xd0
 800162a:	f00c fead 	bl	800e388 <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 14);

	*ax = (((int16_t)(pdata[0]<<8) | pdata[1])/Acc_Scale) - accelx_cal;
 800162e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800163c:	4313      	orrs	r3, r2
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001646:	edd7 7a00 	vldr	s15, [r7]
 800164a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800164e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001658:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(pdata[2]<<8) | pdata[3])/Acc_Scale) - accely_cal;
 800165c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	b21b      	sxth	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800166a:	4313      	orrs	r3, r2
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001686:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(pdata[4]<<8) | pdata[5])/Acc_Scale) + accelz_cal;
 800168a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21b      	sxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001698:	4313      	orrs	r3, r2
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a2:	edd7 7a00 	vldr	s15, [r7]
 80016a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(pdata[8]<<8) | pdata[9])/Gyr_Scale) - gyrox_cal;
 80016b8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21b      	sxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80016c6:	4313      	orrs	r3, r2
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(pdata[10]<<8) | pdata[11])/Gyr_Scale) - gyroy_cal;
 80016e6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80016f4:	4313      	orrs	r3, r2
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001706:	edd7 7a03 	vldr	s15, [r7, #12]
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001710:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(pdata[12]<<8) | pdata[13])/Gyr_Scale) - gyroz_cal;
 8001714:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b21b      	sxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001722:	4313      	orrs	r3, r2
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800172c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001734:	edd7 7a02 	vldr	s15, [r7, #8]
 8001738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800173e:	edc3 7a00 	vstr	s15, [r3]
//	  *az = (MPU6050_GET_ACCEL_FULLVALUE_Z()/Acc_Scale) + accelz_cal;
//
//	  *gx = (MPU6050_GET_GYRO_FULLVALUE_X()/Gyr_Scale) - gyrox_cal;
//	  *gy = (MPU6050_GET_GYRO_FULLVALUE_Y()/Gyr_Scale) - gyroy_cal;
//	  *gz = (MPU6050_GET_GYRO_FULLVALUE_Z()/Gyr_Scale) - gyroz_cal;
}
 8001742:	bf00      	nop
 8001744:	3740      	adds	r7, #64	@ 0x40
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	240000a0 	.word	0x240000a0

08001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>:

void MPU6050_GET_ACCANDGYR_CALANDSCL_IT(void){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af02      	add	r7, sp, #8


	HAL_I2C_Mem_Read_IT(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, (uint8_t *)MPU6050_IT_DATA, 14);
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x28>)
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	230e      	movs	r3, #14
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x2c>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2301      	movs	r3, #1
 8001764:	223b      	movs	r2, #59	@ 0x3b
 8001766:	21d0      	movs	r1, #208	@ 0xd0
 8001768:	f00c ffb2 	bl	800e6d0 <HAL_I2C_Mem_Read_IT>
	MPU6050_IRQ = 1;
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT+0x30>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]


}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	240000a0 	.word	0x240000a0
 800177c:	24000eb0 	.word	0x24000eb0
 8001780:	000041bc 	.word	0x000041bc

08001784 <MPU6050_GET_CALANDSCL_IT>:

void MPU6050_GET_CALANDSCL_IT(float *ax, float*ay, float*az, float*gx, float*gy, float*gz, float accelx_cal,float accely_cal,float accelz_cal,float gyrox_cal,float gyroy_cal,float gyroz_cal, float Gyr_Scale, float Acc_Scale){
 8001784:	b480      	push	{r7}
 8001786:	b08d      	sub	sp, #52	@ 0x34
 8001788:	af00      	add	r7, sp, #0
 800178a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800178c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800178e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	ed87 0a07 	vstr	s0, [r7, #28]
 8001796:	edc7 0a06 	vstr	s1, [r7, #24]
 800179a:	ed87 1a05 	vstr	s2, [r7, #20]
 800179e:	edc7 1a04 	vstr	s3, [r7, #16]
 80017a2:	ed87 2a03 	vstr	s4, [r7, #12]
 80017a6:	edc7 2a02 	vstr	s5, [r7, #8]
 80017aa:	ed87 3a01 	vstr	s6, [r7, #4]
 80017ae:	edc7 3a00 	vstr	s7, [r7]
	*ax = (((int16_t)(MPU6050_IT_DATA[0]<<8) | MPU6050_IT_DATA[1])/Acc_Scale) - accelx_cal;
 80017b2:	4b48      	ldr	r3, [pc, #288]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ca:	edd7 7a00 	vldr	s15, [r7]
 80017ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80017d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	edc3 7a00 	vstr	s15, [r3]
	*ay = (((int16_t)(MPU6050_IT_DATA[2]<<8) | MPU6050_IT_DATA[3])/Acc_Scale) - accely_cal;
 80017e0:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017f8:	edd7 7a00 	vldr	s15, [r7]
 80017fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001800:	edd7 7a06 	vldr	s15, [r7, #24]
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180a:	edc3 7a00 	vstr	s15, [r3]
	*az = (((int16_t)(MPU6050_IT_DATA[4]<<8) | MPU6050_IT_DATA[5])/Acc_Scale) + accelz_cal;
 800180e:	4b31      	ldr	r3, [pc, #196]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	b21b      	sxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800181a:	795b      	ldrb	r3, [r3, #5]
 800181c:	4313      	orrs	r3, r2
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001826:	edd7 7a00 	vldr	s15, [r7]
 800182a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800182e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	edc3 7a00 	vstr	s15, [r3]

	*gx = (((int16_t)(MPU6050_IT_DATA[8]<<8) | MPU6050_IT_DATA[9])/Gyr_Scale) - gyrox_cal;
 800183c:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800183e:	7a1b      	ldrb	r3, [r3, #8]
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21b      	sxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001848:	7a5b      	ldrb	r3, [r3, #9]
 800184a:	4313      	orrs	r3, r2
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001854:	edd7 7a01 	vldr	s15, [r7, #4]
 8001858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	edc3 7a00 	vstr	s15, [r3]
	*gy = (((int16_t)(MPU6050_IT_DATA[10]<<8) | MPU6050_IT_DATA[11])/Gyr_Scale) - gyroy_cal;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800186c:	7a9b      	ldrb	r3, [r3, #10]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21b      	sxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 8001876:	7adb      	ldrb	r3, [r3, #11]
 8001878:	4313      	orrs	r3, r2
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001882:	edd7 7a01 	vldr	s15, [r7, #4]
 8001886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001894:	edc3 7a00 	vstr	s15, [r3]
	*gz = (((int16_t)(MPU6050_IT_DATA[12]<<8) | MPU6050_IT_DATA[13])/Gyr_Scale) - gyroz_cal;
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b21b      	sxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MPU6050_GET_CALANDSCL_IT+0x150>)
 80018a4:	7b5b      	ldrb	r3, [r3, #13]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018c2:	edc3 7a00 	vstr	s15, [r3]
}
 80018c6:	bf00      	nop
 80018c8:	3734      	adds	r7, #52	@ 0x34
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	24000eb0 	.word	0x24000eb0

080018d8 <MPU6050_GET_ACCANDGYR_FILTRED>:

void MPU6050_GET_ACCANDGYR_FILTRED(Complementary_Filter *Complementary_Filter_st, float ax_ang, float ay_ang, float megz_ang, float gx_ang,
		float gy_ang, float gz_ang){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	61f8      	str	r0, [r7, #28]
 80018e0:	ed87 0a06 	vstr	s0, [r7, #24]
 80018e4:	edc7 0a05 	vstr	s1, [r7, #20]
 80018e8:	ed87 1a04 	vstr	s2, [r7, #16]
 80018ec:	edc7 1a03 	vstr	s3, [r7, #12]
 80018f0:	ed87 2a02 	vstr	s4, [r7, #8]
 80018f4:	edc7 2a01 	vstr	s5, [r7, #4]
	Complementary_getFilter(Complementary_Filter_st, ax_ang, ay_ang, megz_ang, gx_ang, gy_ang, gz_ang);
 80018f8:	edd7 2a01 	vldr	s5, [r7, #4]
 80018fc:	ed97 2a02 	vldr	s4, [r7, #8]
 8001900:	edd7 1a03 	vldr	s3, [r7, #12]
 8001904:	ed97 1a04 	vldr	s2, [r7, #16]
 8001908:	edd7 0a05 	vldr	s1, [r7, #20]
 800190c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001910:	69f8      	ldr	r0, [r7, #28]
 8001912:	f000 f9a9 	bl	8001c68 <Complementary_getFilter>
	//W_Filter(Complementary_Filter_st);
}
 8001916:	bf00      	nop
 8001918:	3720      	adds	r7, #32
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <MPU6050_GET_ACCEL_YH>:
uint8_t MPU6050_GET_ACCEL_XL(void){
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, 1, &data, 1, 1);
	return data;
}
uint8_t MPU6050_GET_ACCEL_YH(void){
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, 1, &data, 1, 1);
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MPU6050_GET_ACCEL_YH+0x2c>)
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	2301      	movs	r3, #1
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2301      	movs	r3, #1
 8001938:	223d      	movs	r2, #61	@ 0x3d
 800193a:	21d0      	movs	r1, #208	@ 0xd0
 800193c:	f00c fd24 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 8001940:	79fb      	ldrb	r3, [r7, #7]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	240000a0 	.word	0x240000a0

08001950 <MPU6050_GET_ACCEL_YL>:
uint8_t MPU6050_GET_ACCEL_YL(void){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_YOUT_L, 1, &data, 1, 1);
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MPU6050_GET_ACCEL_YL+0x2c>)
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	2301      	movs	r3, #1
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	223e      	movs	r2, #62	@ 0x3e
 800196a:	21d0      	movs	r1, #208	@ 0xd0
 800196c:	f00c fd0c 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 8001970:	79fb      	ldrb	r3, [r7, #7]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	240000a0 	.word	0x240000a0

08001980 <MPU6050_GET_ACCEL_ZH>:
uint8_t MPU6050_GET_ACCEL_ZH(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, 1, &data, 1, 1);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <MPU6050_GET_ACCEL_ZH+0x2c>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2301      	movs	r3, #1
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2301      	movs	r3, #1
 8001998:	223f      	movs	r2, #63	@ 0x3f
 800199a:	21d0      	movs	r1, #208	@ 0xd0
 800199c:	f00c fcf4 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	240000a0 	.word	0x240000a0

080019b0 <MPU6050_GET_ACCEL_ZL>:
uint8_t MPU6050_GET_ACCEL_ZL(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, 1, &data, 1, 1);
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MPU6050_GET_ACCEL_ZL+0x2c>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	2301      	movs	r3, #1
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	21d0      	movs	r1, #208	@ 0xd0
 80019cc:	f00c fcdc 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	240000a0 	.word	0x240000a0

080019e0 <MPU6050_GET_GYRO_XH>:

uint8_t MPU6050_GET_GYRO_XH(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_H, 1, &data, 1, 1);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MPU6050_GET_GYRO_XH+0x2c>)
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2301      	movs	r3, #1
 80019f8:	2243      	movs	r2, #67	@ 0x43
 80019fa:	21d0      	movs	r1, #208	@ 0xd0
 80019fc:	f00c fcc4 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	240000a0 	.word	0x240000a0

08001a10 <MPU6050_GET_GYRO_XL>:
uint8_t MPU6050_GET_GYRO_XL(void){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_XOUT_L, 1, &data, 1, 1);
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <MPU6050_GET_GYRO_XL+0x2c>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2244      	movs	r2, #68	@ 0x44
 8001a2a:	21d0      	movs	r1, #208	@ 0xd0
 8001a2c:	f00c fcac 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 8001a30:	79fb      	ldrb	r3, [r7, #7]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	240000a0 	.word	0x240000a0

08001a40 <MPU6050_GET_GYRO_YH>:
uint8_t MPU6050_GET_GYRO_YH(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_H, 1, &data, 1, 1);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <MPU6050_GET_GYRO_YH+0x2c>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	2245      	movs	r2, #69	@ 0x45
 8001a5a:	21d0      	movs	r1, #208	@ 0xd0
 8001a5c:	f00c fc94 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 8001a60:	79fb      	ldrb	r3, [r7, #7]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	240000a0 	.word	0x240000a0

08001a70 <MPU6050_GET_GYRO_YL>:
uint8_t MPU6050_GET_GYRO_YL(void){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_YOUT_L, 1, &data, 1, 1);
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <MPU6050_GET_GYRO_YL+0x2c>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2246      	movs	r2, #70	@ 0x46
 8001a8a:	21d0      	movs	r1, #208	@ 0xd0
 8001a8c:	f00c fc7c 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 8001a90:	79fb      	ldrb	r3, [r7, #7]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	240000a0 	.word	0x240000a0

08001aa0 <MPU6050_GET_GYRO_ZH>:
uint8_t MPU6050_GET_GYRO_ZH(void){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, 1, &data, 1, 1);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <MPU6050_GET_GYRO_ZH+0x2c>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2247      	movs	r2, #71	@ 0x47
 8001aba:	21d0      	movs	r1, #208	@ 0xd0
 8001abc:	f00c fc64 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	240000a0 	.word	0x240000a0

08001ad0 <MPU6050_GET_GYRO_ZL>:
uint8_t MPU6050_GET_GYRO_ZL(void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, 1, &data, 1, 1);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MPU6050_GET_GYRO_ZL+0x2c>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	1dfb      	adds	r3, r7, #7
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2248      	movs	r2, #72	@ 0x48
 8001aea:	21d0      	movs	r1, #208	@ 0xd0
 8001aec:	f00c fc4c 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	240000a0 	.word	0x240000a0

08001b00 <MPU6050_GET_ACCEL_FULLVALUE_X>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_X(void){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af04      	add	r7, sp, #16
	int16_t data;
	uint8_t pdata[2];

	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, 1, pdata, 2, 1);
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <MPU6050_GET_ACCEL_FULLVALUE_X+0x3c>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9302      	str	r3, [sp, #8]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2301      	movs	r3, #1
 8001b18:	223b      	movs	r2, #59	@ 0x3b
 8001b1a:	21d0      	movs	r1, #208	@ 0xd0
 8001b1c:	f00c fc34 	bl	800e388 <HAL_I2C_Mem_Read>

	data = (pdata[0]<<8)|pdata[1];
 8001b20:	793b      	ldrb	r3, [r7, #4]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	797b      	ldrb	r3, [r7, #5]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	240000a0 	.word	0x240000a0

08001b40 <MPU6050_GET_ACCEL_FULLVALUE_Y>:

int16_t MPU6050_GET_ACCEL_FULLVALUE_Y(void){
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_YH()<<8)|MPU6050_GET_ACCEL_YL();
 8001b46:	f7ff feeb 	bl	8001920 <MPU6050_GET_ACCEL_YH>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21c      	sxth	r4, r3
 8001b50:	f7ff fefe 	bl	8001950 <MPU6050_GET_ACCEL_YL>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4323      	orrs	r3, r4
 8001b5a:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <MPU6050_GET_ACCEL_FULLVALUE_Z>:
int16_t MPU6050_GET_ACCEL_FULLVALUE_Z(void){
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_ACCEL_ZH()<<8)|MPU6050_GET_ACCEL_ZL();
 8001b6e:	f7ff ff07 	bl	8001980 <MPU6050_GET_ACCEL_ZH>
 8001b72:	4603      	mov	r3, r0
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21c      	sxth	r4, r3
 8001b78:	f7ff ff1a 	bl	80019b0 <MPU6050_GET_ACCEL_ZL>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4323      	orrs	r3, r4
 8001b82:	80fb      	strh	r3, [r7, #6]
	return data;
 8001b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <MPU6050_GET_GYRO_FULLVALUE_X>:

int16_t MPU6050_GET_GYRO_FULLVALUE_X(void){
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_XH()<<8)|MPU6050_GET_GYRO_XL();
 8001b96:	f7ff ff23 	bl	80019e0 <MPU6050_GET_GYRO_XH>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21c      	sxth	r4, r3
 8001ba0:	f7ff ff36 	bl	8001a10 <MPU6050_GET_GYRO_XL>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4323      	orrs	r3, r4
 8001baa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <MPU6050_GET_GYRO_FULLVALUE_Y>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Y(void){
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_YH()<<8)|MPU6050_GET_GYRO_YL();
 8001bbe:	f7ff ff3f 	bl	8001a40 <MPU6050_GET_GYRO_YH>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	b21c      	sxth	r4, r3
 8001bc8:	f7ff ff52 	bl	8001a70 <MPU6050_GET_GYRO_YL>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd90      	pop	{r4, r7, pc}

08001be0 <MPU6050_GET_GYRO_FULLVALUE_Z>:
int16_t MPU6050_GET_GYRO_FULLVALUE_Z(void){
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
	int16_t data;
	data = (MPU6050_GET_GYRO_ZH()<<8)|MPU6050_GET_GYRO_ZL();
 8001be6:	f7ff ff5b 	bl	8001aa0 <MPU6050_GET_GYRO_ZH>
 8001bea:	4603      	mov	r3, r0
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21c      	sxth	r4, r3
 8001bf0:	f7ff ff6e 	bl	8001ad0 <MPU6050_GET_GYRO_ZL>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	80fb      	strh	r3, [r7, #6]
	return data;
 8001bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <MPU6050_READ_ID>:

int8_t MPU6050_READ_ID(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_WHO_AM_I, 1, &data, 1, 1);
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MPU6050_READ_ID+0x2c>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	2275      	movs	r2, #117	@ 0x75
 8001c22:	21d0      	movs	r1, #208	@ 0xd0
 8001c24:	f00c fbb0 	bl	800e388 <HAL_I2C_Mem_Read>
	return data;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	b25b      	sxtb	r3, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	240000a0 	.word	0x240000a0

08001c38 <MPU6050_Enable_I2C_Bypass>:
	HAL_I2C_Mem_Read(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_USER_CTRL, 1, &data, 1, 1);
	return data;
}


void MPU6050_Enable_I2C_Bypass(void){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af04      	add	r7, sp, #16
	uint8_t data = 0x02;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(hi2c_mpu6050, MPU6050_ADDRESS, MPU6050_RA_INT_PIN_CFG, 1, &data, 1, 1);
 8001c42:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <MPU6050_Enable_I2C_Bypass+0x2c>)
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	2237      	movs	r2, #55	@ 0x37
 8001c56:	21d0      	movs	r1, #208	@ 0xd0
 8001c58:	f00c fa82 	bl	800e160 <HAL_I2C_Mem_Write>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	240000a0 	.word	0x240000a0

08001c68 <Complementary_getFilter>:

    return Kalman->angle;
};


void Complementary_getFilter(Complementary_Filter *Complementary_Filter_st,float ax_ang, float ay_ang, float magz_ang, float gx_ang, float gy_ang, float gz_ang){
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	61f8      	str	r0, [r7, #28]
 8001c70:	ed87 0a06 	vstr	s0, [r7, #24]
 8001c74:	edc7 0a05 	vstr	s1, [r7, #20]
 8001c78:	ed87 1a04 	vstr	s2, [r7, #16]
 8001c7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001c80:	ed87 2a02 	vstr	s4, [r7, #8]
 8001c84:	edc7 2a01 	vstr	s5, [r7, #4]

		Complementary_Filter_st->x = (0.02*ax_ang*(-1))+(0.98*((gx_ang*looptime)+Complementary_Filter_st->ox));// mnozenie X-1 poniewaz akcelerometr miezy w drugą strone niz zyroskop
 8001c88:	4b35      	ldr	r3, [pc, #212]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001ca8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb4:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	edc3 7a00 	vstr	s15, [r3]
		Complementary_Filter_st->y = (0.02*ay_ang*(-1))+(0.98*((gy_ang*looptime)+Complementary_Filter_st->oy));
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001ccc:	ed93 7a00 	vldr	s14, [r3]
 8001cd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce6:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8001d50 <Complementary_getFilter+0xe8>
 8001cea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf6:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001d58 <Complementary_getFilter+0xf0>
 8001cfa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001cfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	edc3 7a01 	vstr	s15, [r3, #4]
		Complementary_Filter_st->z = (1*((gz_ang*looptime)+Complementary_Filter_st->oz));
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <Complementary_getFilter+0xf8>)
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	edc3 7a02 	vstr	s15, [r3, #8]

		Complementary_Filter_st->ox = Complementary_Filter_st->x;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	60da      	str	r2, [r3, #12]
		Complementary_Filter_st->oy = Complementary_Filter_st->y;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	611a      	str	r2, [r3, #16]
		Complementary_Filter_st->oz = Complementary_Filter_st->z;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	615a      	str	r2, [r3, #20]
//
//	for(int i = 1; i < 15; i++){
//		OldZs[i] = OldZs[i-1];
//	}
//	OldZs[0] = Complementary_Filter_st->oz;
}
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	@ 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	f5c28f5c 	.word	0xf5c28f5c
 8001d54:	3fef5c28 	.word	0x3fef5c28
 8001d58:	47ae147b 	.word	0x47ae147b
 8001d5c:	3f947ae1 	.word	0x3f947ae1
 8001d60:	0801e374 	.word	0x0801e374

08001d64 <nRF24_Delay>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay(uint8_t Time)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f006 ffc8 	bl	8008d04 <HAL_Delay>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <nRF24_SendSpi+0x28>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f012 fa6f 	bl	8014278 <HAL_SPI_Transmit>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	240000a4 	.word	0x240000a4

08001da8 <nRF24_ReadSpi>:

static void nRF24_ReadSpi(uint8_t *Data, uint8_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <nRF24_ReadSpi+0x28>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	f012 fc47 	bl	8014654 <HAL_SPI_Receive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	240000a4 	.word	0x240000a4

08001dd4 <nRF24_ReadRegister>:
//
// END OF BASIC READ/WRITE FUNCTIONS
//

static uint8_t nRF24_ReadRegister(uint8_t reg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	uint8_t result;

	reg = NRF24_CMD_R_REGISTER | reg;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001de2:	2200      	movs	r2, #0
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001de8:	f00c f8ea 	bl	800dfc0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&reg, 1);
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	2101      	movs	r1, #1
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ffc3 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8001df6:	f107 030f 	add.w	r3, r7, #15
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ffd3 	bl	8001da8 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8001e02:	2201      	movs	r2, #1
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	4804      	ldr	r0, [pc, #16]	@ (8001e18 <nRF24_ReadRegister+0x44>)
 8001e08:	f00c f8da 	bl	800dfc0 <HAL_GPIO_WritePin>

	return result;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	58020400 	.word	0x58020400

08001e1c <nRF24_ReadRegisters>:

static void nRF24_ReadRegisters(uint8_t reg, uint8_t* ret, uint8_t len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_R_REGISTER | reg;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001e30:	2200      	movs	r2, #0
 8001e32:	2180      	movs	r1, #128	@ 0x80
 8001e34:	480a      	ldr	r0, [pc, #40]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e36:	f00c f8c3 	bl	800dfc0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff9c 	bl	8001d7c <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	4619      	mov	r1, r3
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f7ff ffad 	bl	8001da8 <nRF24_ReadSpi>

	NRF24_CSN_HIGH;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <nRF24_ReadRegisters+0x44>)
 8001e54:	f00c f8b4 	bl	800dfc0 <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	58020400 	.word	0x58020400

08001e64 <nRF24_WriteRegister>:

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	733b      	strb	r3, [r7, #12]
	tmp[1] = val;
 8001e7e:	79bb      	ldrb	r3, [r7, #6]
 8001e80:	737b      	strb	r3, [r7, #13]

	NRF24_CSN_LOW;
 8001e82:	2200      	movs	r2, #0
 8001e84:	2180      	movs	r1, #128	@ 0x80
 8001e86:	4809      	ldr	r0, [pc, #36]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e88:	f00c f89a 	bl	800dfc0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(tmp, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff72 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	4803      	ldr	r0, [pc, #12]	@ (8001eac <nRF24_WriteRegister+0x48>)
 8001e9e:	f00c f88f 	bl	800dfc0 <HAL_GPIO_WritePin>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	58020400 	.word	0x58020400

08001eb0 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	71bb      	strb	r3, [r7, #6]
	reg = NRF24_CMD_W_REGISTER | reg;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	480b      	ldr	r0, [pc, #44]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001ed0:	f00c f876 	bl	800dfc0 <HAL_GPIO_WritePin>

	nRF24_SendSpi(&reg, 1);
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff4f 	bl	8001d7c <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8001ede:	79bb      	ldrb	r3, [r7, #6]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f7ff ff4a 	bl	8001d7c <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2180      	movs	r1, #128	@ 0x80
 8001eec:	4803      	ldr	r0, [pc, #12]	@ (8001efc <nRF24_WriteRegisters+0x4c>)
 8001eee:	f00c f867 	bl	800dfc0 <HAL_GPIO_WritePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	58020400 	.word	0x58020400

08001f00 <nRF24_RX_Mode>:

void nRF24_RX_Mode(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
	uint8_t config = nRF24_ReadConfig();
 8001f06:	f000 f84d 	bl	8001fa4 <nRF24_ReadConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	// Restore pipe 0 adress after comeback from TX mode
	nRF24_SetRXAddress(0, addr_p0_backup);
 8001f0e:	4910      	ldr	r1, [pc, #64]	@ (8001f50 <nRF24_RX_Mode+0x50>)
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 f9f6 	bl	8002302 <nRF24_SetRXAddress>
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit set
	config |= (1<<NRF24_PRIM_RX);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f843 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f2e:	2070      	movs	r0, #112	@ 0x70
 8001f30:	f000 f89b 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f34:	f000 f8a8 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f38:	f000 f8c0 	bl	80020bc <nRF24_FlushTX>

	NRF24_CE_HIGH;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2140      	movs	r1, #64	@ 0x40
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <nRF24_RX_Mode+0x54>)
 8001f42:	f00c f83d 	bl	800dfc0 <HAL_GPIO_WritePin>
	//nRF24_Delay(1);
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	240000a8 	.word	0x240000a8
 8001f54:	58020400 	.word	0x58020400

08001f58 <nRF24_TX_Mode>:

void nRF24_TX_Mode(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	NRF24_CE_LOW;
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2140      	movs	r1, #64	@ 0x40
 8001f62:	480f      	ldr	r0, [pc, #60]	@ (8001fa0 <nRF24_TX_Mode+0x48>)
 8001f64:	f00c f82c 	bl	800dfc0 <HAL_GPIO_WritePin>

	uint8_t config = nRF24_ReadConfig();
 8001f68:	f000 f81c 	bl	8001fa4 <nRF24_ReadConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	71fb      	strb	r3, [r7, #7]
	// PWR_UP bit set
	config |= (1<<NRF24_PWR_UP);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	71fb      	strb	r3, [r7, #7]
	// PRIM_RX bit low
	config &= ~(1<<NRF24_PRIM_RX);
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteConfig(config);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f816 	bl	8001fb4 <nRF24_WriteConfig>
	// Reset status
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8001f88:	2070      	movs	r0, #112	@ 0x70
 8001f8a:	f000 f86e 	bl	800206a <nRF24_WriteStatus>
	// Flush RX
	nRF24_FlushRX();
 8001f8e:	f000 f87b 	bl	8002088 <nRF24_FlushRX>
	// Flush TX
	nRF24_FlushTX();
 8001f92:	f000 f893 	bl	80020bc <nRF24_FlushTX>

	//nRF24_Delay(1);
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	58020400 	.word	0x58020400

08001fa4 <nRF24_ReadConfig>:



uint8_t nRF24_ReadConfig(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ff13 	bl	8001dd4 <nRF24_ReadRegister>
 8001fae:	4603      	mov	r3, r0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f7ff ff4e 	bl	8001e64 <nRF24_WriteRegister>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8001fda:	2006      	movs	r0, #6
 8001fdc:	f7ff fefa 	bl	8001dd4 <nRF24_ReadRegister>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xF8; // Clear PWR bits
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	f023 0307 	bic.w	r3, r3, #7
 8001fea:	73fb      	strb	r3, [r7, #15]
	rf_setup |= (lev<<1);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4619      	mov	r1, r3
 8002000:	2006      	movs	r0, #6
 8002002:	f7ff ff2f 	bl	8001e64 <nRF24_WriteRegister>
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8002018:	2006      	movs	r0, #6
 800201a:	f7ff fedb 	bl	8001dd4 <nRF24_ReadRegister>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002028:	73fb      	strb	r3, [r7, #15]
	if(dr == NRF24_RF_DR_250KBPS)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d104      	bne.n	800203a <nRF24_SetDataRate+0x2c>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e006      	b.n	8002048 <nRF24_SetDataRate+0x3a>
	else if(dr == NRF24_RF_DR_2MBPS)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d103      	bne.n	8002048 <nRF24_SetDataRate+0x3a>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	4619      	mov	r1, r3
 800204c:	2006      	movs	r0, #6
 800204e:	f7ff ff09 	bl	8001e64 <nRF24_WriteRegister>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_STATUS));
 800205e:	2007      	movs	r0, #7
 8002060:	f7ff feb8 	bl	8001dd4 <nRF24_ReadRegister>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	bd80      	pop	{r7, pc}

0800206a <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_STATUS, st);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4619      	mov	r1, r3
 8002078:	2007      	movs	r0, #7
 800207a:	f7ff fef3 	bl	8001e64 <nRF24_WriteRegister>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_RX;
 800208e:	23e2      	movs	r3, #226	@ 0xe2
 8002090:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	@ 0x80
 8002096:	4808      	ldr	r0, [pc, #32]	@ (80020b8 <nRF24_FlushRX+0x30>)
 8002098:	f00b ff92 	bl	800dfc0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe6b 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020a6:	2201      	movs	r2, #1
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	4803      	ldr	r0, [pc, #12]	@ (80020b8 <nRF24_FlushRX+0x30>)
 80020ac:	f00b ff88 	bl	800dfc0 <HAL_GPIO_WritePin>
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	58020400 	.word	0x58020400

080020bc <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	uint8_t command = NRF24_CMD_FLUSH_TX;
 80020c2:	23e1      	movs	r3, #225	@ 0xe1
 80020c4:	71fb      	strb	r3, [r7, #7]

	NRF24_CSN_LOW;
 80020c6:	2200      	movs	r2, #0
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	4808      	ldr	r0, [pc, #32]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020cc:	f00b ff78 	bl	800dfc0 <HAL_GPIO_WritePin>
	nRF24_SendSpi(&command, 1);
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	2101      	movs	r1, #1
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fe51 	bl	8001d7c <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 80020da:	2201      	movs	r2, #1
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	4803      	ldr	r0, [pc, #12]	@ (80020ec <nRF24_FlushTX+0x30>)
 80020e0:	f00b ff6e 	bl	800dfc0 <HAL_GPIO_WritePin>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	58020400 	.word	0x58020400

080020f0 <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80020fa:	f7ff ff53 	bl	8001fa4 <nRF24_ReadConfig>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]

	if(onoff)
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <nRF24_EnableCRC+0x22>
		config |= (1<<NRF24_EN_CRC);
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e003      	b.n	800211a <nRF24_EnableCRC+0x2a>
	else
		config &= ~(1<<NRF24_EN_CRC);
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f023 0308 	bic.w	r3, r3, #8
 8002118:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff49 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002134:	f7ff ff36 	bl	8001fa4 <nRF24_ReadConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
	if(crcl == NRF24_CRC_WIDTH_2B)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d104      	bne.n	800214c <nRF24_SetCRCLength+0x22>
		config |= (1<<NRF24_CRCO);
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e003      	b.n	8002154 <nRF24_SetCRCLength+0x2a>
	else
		config &= ~(1<<NRF24_CRCO);
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteConfig(config);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff2c 	bl	8001fb4 <nRF24_WriteConfig>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	71bb      	strb	r3, [r7, #6]
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	b25a      	sxtb	r2, r3
 800217a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b25b      	sxtb	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4619      	mov	r1, r3
 800218c:	2004      	movs	r0, #4
 800218e:	f7ff fe69 	bl	8001e64 <nRF24_WriteRegister>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	2005      	movs	r0, #5
 80021b0:	f7ff fe58 	bl	8001e64 <nRF24_WriteRegister>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <nRF24_SetPayloadSize>:

void nRF24_SetPayloadSize(uint8_t pipe, uint8_t size)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d901      	bls.n	80021d6 <nRF24_SetPayloadSize+0x1a>
		pipe = 5; // Block too high pipe number
 80021d2:	2305      	movs	r3, #5
 80021d4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	3311      	adds	r3, #17
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f7ff fe3c 	bl	8001e64 <nRF24_WriteRegister>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <nRF24_EnablePipe>:

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	460a      	mov	r2, r1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d901      	bls.n	800220e <nRF24_EnablePipe+0x1a>
		pipe = 5; // Block too high pipe number
 800220a:	2305      	movs	r3, #5
 800220c:	71fb      	strb	r3, [r7, #7]
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff fde0 	bl	8001dd4 <nRF24_ReadRegister>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d10a      	bne.n	8002234 <nRF24_EnablePipe+0x40>
		enable_pipe |= (1<<pipe);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2201      	movs	r2, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	b25a      	sxtb	r2, r3
 8002228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222c:	4313      	orrs	r3, r2
 800222e:	b25b      	sxtb	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	e00b      	b.n	800224c <nRF24_EnablePipe+0x58>
	else
		enable_pipe &= ~(1<<pipe);
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	b25b      	sxtb	r3, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	b25a      	sxtb	r2, r3
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4013      	ands	r3, r2
 8002248:	b25b      	sxtb	r3, r3
 800224a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	4619      	mov	r1, r3
 8002250:	2002      	movs	r0, #2
 8002252:	f7ff fe07 	bl	8001e64 <nRF24_WriteRegister>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	460a      	mov	r2, r1
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	4613      	mov	r3, r2
 800226c:	71bb      	strb	r3, [r7, #6]
	if(pipe > 5)
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d901      	bls.n	8002278 <nRF24_AutoACK+0x1a>
		pipe = 5; // Block too high pipe number
 8002274:	2305      	movs	r3, #5
 8002276:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8002278:	2001      	movs	r0, #1
 800227a:	f7ff fdab 	bl	8001dd4 <nRF24_ReadRegister>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
	if(onoff == 1)
 8002282:	79bb      	ldrb	r3, [r7, #6]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10a      	bne.n	800229e <nRF24_AutoACK+0x40>
		enaa |= (1<<pipe);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	b25a      	sxtb	r2, r3
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	b25b      	sxtb	r3, r3
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	e00b      	b.n	80022b6 <nRF24_AutoACK+0x58>
	else
		enaa &= ~(1<<pipe);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2201      	movs	r2, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	b25a      	sxtb	r2, r3
 80022ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	4619      	mov	r1, r3
 80022ba:	2001      	movs	r0, #1
 80022bc:	f7ff fdd2 	bl	8001e64 <nRF24_WriteRegister>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
	if(size > 5)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d901      	bls.n	80022dc <nRF24_SetAddressWidth+0x14>
		size = 5; // Maximum are 5 bytes
 80022d8:	2305      	movs	r3, #5
 80022da:	71fb      	strb	r3, [r7, #7]
	if(size < 3)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d801      	bhi.n	80022e6 <nRF24_SetAddressWidth+0x1e>
		size = 3; // Minimum are 3 bytes
 80022e2:	2303      	movs	r3, #3
 80022e4:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	3b02      	subs	r3, #2
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4619      	mov	r1, r3
 80022f4:	2003      	movs	r0, #3
 80022f6:	f7ff fdb5 	bl	8001e64 <nRF24_WriteRegister>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	6039      	str	r1, [r7, #0]
 800230c:	71fb      	strb	r3, [r7, #7]
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <nRF24_SetRXAddress+0x18>
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d11d      	bne.n	8002356 <nRF24_SetRXAddress+0x54>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	e00d      	b.n	800233c <nRF24_SetRXAddress+0x3a>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	441a      	add	r2, r3
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	f1c3 0302 	rsb	r3, r3, #2
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	3310      	adds	r3, #16
 8002330:	443b      	add	r3, r7
 8002332:	f803 2c04 	strb.w	r2, [r3, #-4]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d9ee      	bls.n	8002320 <nRF24_SetRXAddress+0x1e>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	330a      	adds	r3, #10
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	2203      	movs	r2, #3
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fdae 	bl	8001eb0 <nRF24_WriteRegisters>
	{
 8002354:	e00a      	b.n	800236c <nRF24_SetRXAddress+0x6a>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	330a      	adds	r3, #10
 800235a:	b2da      	uxtb	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3302      	adds	r3, #2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7ff fd7d 	bl	8001e64 <nRF24_WriteRegister>
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <nRF24_SetTXAddress>:

void nRF24_SetTXAddress(uint8_t* address)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	// TX address is storaged similar to RX pipe 0 - LSByte first
	uint8_t i;
	uint8_t address_rev[NRF24_ADDR_SIZE];

	nRF24_ReadRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Backup P0 address
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2203      	movs	r2, #3
 8002382:	4619      	mov	r1, r3
 8002384:	200a      	movs	r0, #10
 8002386:	f7ff fd49 	bl	8001e1c <nRF24_ReadRegisters>
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e00c      	b.n	80023aa <nRF24_SetTXAddress+0x36>
		addr_p0_backup[NRF24_ADDR_SIZE - 1 - i] = address_rev[i]; //Reverse P0 address
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	f1c3 0302 	rsb	r3, r3, #2
 8002398:	3210      	adds	r2, #16
 800239a:	443a      	add	r2, r7
 800239c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
 80023a0:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <nRF24_SetTXAddress+0x88>)
 80023a2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3301      	adds	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d9ef      	bls.n	8002390 <nRF24_SetTXAddress+0x1c>

	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00d      	b.n	80023d2 <nRF24_SetTXAddress+0x5e>
		address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	441a      	add	r2, r3
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	f1c3 0302 	rsb	r3, r3, #2
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	3310      	adds	r3, #16
 80023c6:	443b      	add	r3, r7
 80023c8:	f803 2c04 	strb.w	r2, [r3, #-4]
	for(i = 0; i<NRF24_ADDR_SIZE; i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d9ee      	bls.n	80023b6 <nRF24_SetTXAddress+0x42>
	//make pipe 0 address backup;

	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
 80023d8:	f107 030c 	add.w	r3, r7, #12
 80023dc:	2203      	movs	r2, #3
 80023de:	4619      	mov	r1, r3
 80023e0:	200a      	movs	r0, #10
 80023e2:	f7ff fd65 	bl	8001eb0 <nRF24_WriteRegisters>
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2203      	movs	r2, #3
 80023ec:	4619      	mov	r1, r3
 80023ee:	2010      	movs	r0, #16
 80023f0:	f7ff fd5e 	bl	8001eb0 <nRF24_WriteRegisters>

}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	240000a8 	.word	0x240000a8

08002400 <nRF24_ClearInterrupts>:

void nRF24_ClearInterrupts(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	uint8_t status = nRF24_ReadStatus();
 8002406:	f7ff fe28 	bl	800205a <nRF24_ReadStatus>
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	status |= (7<<4); // Clear bits 4, 5, 6.
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002414:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteStatus(status);
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fe26 	bl	800206a <nRF24_WriteStatus>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 8002430:	f7ff fdb8 	bl	8001fa4 <nRF24_ReadConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <nRF24_EnableRXDataReadyIRQ+0x22>
		config |= (1<<NRF24_RX_DR);
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e003      	b.n	8002450 <nRF24_EnableRXDataReadyIRQ+0x2a>
	else
		config &= ~(1<<NRF24_RX_DR);
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800244e:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fdae 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 800246a:	f7ff fd9b 	bl	8001fa4 <nRF24_ReadConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d104      	bne.n	8002482 <nRF24_EnableTXDataSentIRQ+0x22>
		config |= (1<<NRF24_TX_DS);
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	73fb      	strb	r3, [r7, #15]
 8002480:	e003      	b.n	800248a <nRF24_EnableTXDataSentIRQ+0x2a>
	else
		config &= ~(1<<NRF24_TX_DS);
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f023 0320 	bic.w	r3, r3, #32
 8002488:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fd91 	bl	8001fb4 <nRF24_WriteConfig>
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
	uint8_t config = nRF24_ReadConfig();
 80024a4:	f7ff fd7e 	bl	8001fa4 <nRF24_ReadConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]

	if(!onoff)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <nRF24_EnableMaxRetransmitIRQ+0x22>
		config |= (1<<NRF24_MAX_RT);
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	e003      	b.n	80024c4 <nRF24_EnableMaxRetransmitIRQ+0x2a>
	else
		config &= ~(1<<NRF24_MAX_RT);
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	f023 0310 	bic.w	r3, r3, #16
 80024c2:	73fb      	strb	r3, [r7, #15]

	nRF24_WriteConfig(config);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd74 	bl	8001fb4 <nRF24_WriteConfig>
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data/*, uint8_t size*/)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 80024dc:	2220      	movs	r2, #32
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	20a0      	movs	r0, #160	@ 0xa0
 80024e2:	f7ff fce5 	bl	8001eb0 <nRF24_WriteRegisters>
	//nRF24_WaitTX();
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <nRF24_WaitTX>:

void nRF24_WaitTX()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	uint8_t status;
	NRF24_CE_HIGH;
 80024f6:	2201      	movs	r2, #1
 80024f8:	2140      	movs	r1, #64	@ 0x40
 80024fa:	4810      	ldr	r0, [pc, #64]	@ (800253c <nRF24_WaitTX+0x4c>)
 80024fc:	f00b fd60 	bl	800dfc0 <HAL_GPIO_WritePin>
	nRF24_Delay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff fc2f 	bl	8001d64 <nRF24_Delay>
	NRF24_CE_LOW;
 8002506:	2200      	movs	r2, #0
 8002508:	2140      	movs	r1, #64	@ 0x40
 800250a:	480c      	ldr	r0, [pc, #48]	@ (800253c <nRF24_WaitTX+0x4c>)
 800250c:	f00b fd58 	bl	800dfc0 <HAL_GPIO_WritePin>
	do
	{
		nRF24_Delay(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff fc27 	bl	8001d64 <nRF24_Delay>
		status = nRF24_ReadStatus();
 8002516:	f7ff fda0 	bl	800205a <nRF24_ReadStatus>
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <nRF24_WaitTX+0x42>
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0ee      	beq.n	8002510 <nRF24_WaitTX+0x20>

}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	58020400 	.word	0x58020400

08002540 <nRF24_ReadRXPaylaod>:

void nRF24_ReadRXPaylaod(uint8_t *data/*, uint8_t *size*/)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
 8002548:	2220      	movs	r2, #32
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	2061      	movs	r0, #97	@ 0x61
 800254e:	f7ff fc65 	bl	8001e1c <nRF24_ReadRegisters>
	nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_RX_DR));
 8002552:	2140      	movs	r1, #64	@ 0x40
 8002554:	2007      	movs	r0, #7
 8002556:	f7ff fc85 	bl	8001e64 <nRF24_WriteRegister>

	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS)){
 800255a:	f7ff fd7e 	bl	800205a <nRF24_ReadStatus>
 800255e:	4603      	mov	r3, r0
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <nRF24_ReadRXPaylaod+0x30>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8002568:	2120      	movs	r1, #32
 800256a:	2007      	movs	r0, #7
 800256c:	f7ff fc7a 	bl	8001e64 <nRF24_WriteRegister>
//	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
//
//	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
//	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
//		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <nRF24_IsBitSetInFifoStatus>:

	return 0;
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8002582:	f000 f811 	bl	80025a8 <nRF24_ReadFifoStatus>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

	if(FifoStatus & (1<<Bit))
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	fa42 f303 	asr.w	r3, r2, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <nRF24_IsBitSetInFifoStatus+0x26>
	{
		return 1;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <nRF24_IsBitSetInFifoStatus+0x28>
	}

	return 0;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <nRF24_ReadFifoStatus>:

uint8_t nRF24_ReadFifoStatus(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 80025ac:	2017      	movs	r0, #23
 80025ae:	f7ff fc11 	bl	8001dd4 <nRF24_ReadRegister>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <nRF24_Init>:



void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	hspi_nrf = hspi;
 80025c0:	4a25      	ldr	r2, [pc, #148]	@ (8002658 <nRF24_Init+0xa0>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6013      	str	r3, [r2, #0]

	NRF24_CE_LOW;
 80025c6:	2200      	movs	r2, #0
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	4824      	ldr	r0, [pc, #144]	@ (800265c <nRF24_Init+0xa4>)
 80025cc:	f00b fcf8 	bl	800dfc0 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 80025d0:	2201      	movs	r2, #1
 80025d2:	2180      	movs	r1, #128	@ 0x80
 80025d4:	4821      	ldr	r0, [pc, #132]	@ (800265c <nRF24_Init+0xa4>)
 80025d6:	f00b fcf3 	bl	800dfc0 <HAL_GPIO_WritePin>

	HAL_Delay(10); // Wait for radio power up
 80025da:	200a      	movs	r0, #10
 80025dc:	f006 fb92 	bl	8008d04 <HAL_Delay>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 80025e0:	2003      	movs	r0, #3
 80025e2:	f7ff fcf5 	bl	8001fd0 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_2MBPS); // Data Rate
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7ff fd11 	bl	800200e <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff fd7f 	bl	80020f0 <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7ff fd99 	bl	800212a <nRF24_SetCRCLength>
	nRF24_SetRetries(0x00, 0x00); // 1000us, 0 times
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fdb2 	bl	8002164 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
 8002600:	2100      	movs	r1, #0
 8002602:	201c      	movs	r0, #28
 8002604:	f7ff fc2e 	bl	8001e64 <nRF24_WriteRegister>
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
 8002608:	2120      	movs	r1, #32
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fdd6 	bl	80021bc <nRF24_SetPayloadSize>
#endif
	nRF24_SetRFChannel(15); // Set RF channel for transmission
 8002610:	200f      	movs	r0, #15
 8002612:	f7ff fdc2 	bl	800219a <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 8002616:	2101      	movs	r1, #1
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fdeb 	bl	80021f4 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 800261e:	2101      	movs	r1, #1
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff fe1c 	bl	800225e <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 8002626:	2003      	movs	r0, #3
 8002628:	f7ff fe4e 	bl	80022c8 <nRF24_SetAddressWidth>

	HAL_Delay(1);
 800262c:	2001      	movs	r0, #1
 800262e:	f006 fb69 	bl	8008d04 <HAL_Delay>

	nRF24_EnableRXDataReadyIRQ(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff fef7 	bl	8002426 <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(0);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ff11 	bl	8002460 <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff ff2b 	bl	800249a <nRF24_EnableMaxRetransmitIRQ>

	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f006 fb5d 	bl	8008d04 <HAL_Delay>

	nRF24_ClearInterrupts();
 800264a:	f7ff fed9 	bl	8002400 <nRF24_ClearInterrupts>


}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	240000a4 	.word	0x240000a4
 800265c:	58020400 	.word	0x58020400

08002660 <nRF24_Inittest>:
void nRF24_Inittest(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	xz[0] = nRF24_ReadRegister(NRF24_RF_SETUP); // Radio power
 8002664:	2006      	movs	r0, #6
 8002666:	f7ff fbb5 	bl	8001dd4 <nRF24_ReadRegister>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <nRF24_Inittest+0x84>)
 8002670:	701a      	strb	r2, [r3, #0]
	//z = nRF24_ReadRegister(NRF24_RF_SETUP); // Data Rate
	xz[1] = nRF24_ReadConfig(); // Enable CRC //
 8002672:	f7ff fc97 	bl	8001fa4 <nRF24_ReadConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <nRF24_Inittest+0x84>)
 800267c:	705a      	strb	r2, [r3, #1]
	//z = nRF24_SetCRCLength(NRF24_CRC_WIDTH_1B); // CRC Length 1 byte
	xz[2] = nRF24_ReadRegister(NRF24_SETUP_RETR); // 1000us, 7 times
 800267e:	2004      	movs	r0, #4
 8002680:	f7ff fba8 	bl	8001dd4 <nRF24_ReadRegister>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <nRF24_Inittest+0x84>)
 800268a:	709a      	strb	r2, [r3, #2]
	xz[3] = nRF24_ReadRegister(NRF24_RF_CH);
 800268c:	2005      	movs	r0, #5
 800268e:	f7ff fba1 	bl	8001dd4 <nRF24_ReadRegister>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <nRF24_Inittest+0x84>)
 8002698:	70da      	strb	r2, [r3, #3]
	z = nRF24_ReadRegister(NRF24_FEATURE); // Enable dynamic payload feature
	z = nRF24_ReadRegister(NRF24_DYNPD); // Enable dynamic payloads for all pipes
#else
	//nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	//nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
	xz[4] = nRF24_ReadRegister(NRF24_RX_PW_P0);
 800269a:	2011      	movs	r0, #17
 800269c:	f7ff fb9a 	bl	8001dd4 <nRF24_ReadRegister>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026a6:	711a      	strb	r2, [r3, #4]
#endif
	xz[5] = nRF24_ReadRegister(NRF24_EN_RXADDR);
 80026a8:	2002      	movs	r0, #2
 80026aa:	f7ff fb93 	bl	8001dd4 <nRF24_ReadRegister>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026b4:	715a      	strb	r2, [r3, #5]
	xz[6] = nRF24_ReadRegister(NRF24_EN_AA);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff fb8c 	bl	8001dd4 <nRF24_ReadRegister>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026c2:	719a      	strb	r2, [r3, #6]
	xz[7] = nRF24_ReadRegister(NRF24_SETUP_AW);
 80026c4:	2003      	movs	r0, #3
 80026c6:	f7ff fb85 	bl	8001dd4 <nRF24_ReadRegister>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026d0:	71da      	strb	r2, [r3, #7]
	xz[8] = nRF24_ReadConfig();
 80026d2:	f7ff fc67 	bl	8001fa4 <nRF24_ReadConfig>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	4b02      	ldr	r3, [pc, #8]	@ (80026e4 <nRF24_Inittest+0x84>)
 80026dc:	721a      	strb	r2, [r3, #8]

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	00000154 	.word	0x00000154

080026e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026ec:	f3bf 8f4f 	dsb	sy
}
 80026f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80026f2:	4b06      	ldr	r3, [pc, #24]	@ (800270c <__NVIC_SystemReset+0x24>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80026fa:	4904      	ldr	r1, [pc, #16]	@ (800270c <__NVIC_SystemReset+0x24>)
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <__NVIC_SystemReset+0x28>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002702:	f3bf 8f4f 	dsb	sy
}
 8002706:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <__NVIC_SystemReset+0x20>
 800270c:	e000ed00 	.word	0xe000ed00
 8002710:	05fa0004 	.word	0x05fa0004

08002714 <interpretcommand>:
#include "main.h"

void interpretcommand(void){
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0

	uint8_t vcount = 0, J1 = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]
 800271e:	2300      	movs	r3, #0
 8002720:	75bb      	strb	r3, [r7, #22]
	char value1[10];


	commandready = 0;
 8002722:	4b1f      	ldr	r3, [pc, #124]	@ (80027a0 <interpretcommand+0x8c>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]

	for(int j = 0; j < 80; j++){
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e02e      	b.n	800278c <interpretcommand+0x78>

		if(words[j] == ' '){
 800272e:	4a1d      	ldr	r2, [pc, #116]	@ (80027a4 <interpretcommand+0x90>)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b20      	cmp	r3, #32
 8002738:	d102      	bne.n	8002740 <interpretcommand+0x2c>
			vcount++;
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	3301      	adds	r3, #1
 800273e:	75fb      	strb	r3, [r7, #23]
		}
		if(vcount == 0){
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d108      	bne.n	8002758 <interpretcommand+0x44>
			command[j] = words[j];
 8002746:	4a17      	ldr	r2, [pc, #92]	@ (80027a4 <interpretcommand+0x90>)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	7819      	ldrb	r1, [r3, #0]
 800274e:	4a16      	ldr	r2, [pc, #88]	@ (80027a8 <interpretcommand+0x94>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4413      	add	r3, r2
 8002754:	460a      	mov	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
		}
		if(vcount == 1){
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d113      	bne.n	8002786 <interpretcommand+0x72>
			value1[J1] = words[j];
 800275e:	7dbb      	ldrb	r3, [r7, #22]
 8002760:	4910      	ldr	r1, [pc, #64]	@ (80027a4 <interpretcommand+0x90>)
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	440a      	add	r2, r1
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	3318      	adds	r3, #24
 800276a:	443b      	add	r3, r7
 800276c:	f803 2c14 	strb.w	r2, [r3, #-20]
			UASRT_PID_VAL[J1] = (int)value1[J1];//;printf("%d", value11[i]);
 8002770:	7dba      	ldrb	r2, [r7, #22]
 8002772:	7dbb      	ldrb	r3, [r7, #22]
 8002774:	3218      	adds	r2, #24
 8002776:	443a      	add	r2, r7
 8002778:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800277c:	4a0b      	ldr	r2, [pc, #44]	@ (80027ac <interpretcommand+0x98>)
 800277e:	54d1      	strb	r1, [r2, r3]
			J1++;
 8002780:	7dbb      	ldrb	r3, [r7, #22]
 8002782:	3301      	adds	r3, #1
 8002784:	75bb      	strb	r3, [r7, #22]
	for(int j = 0; j < 80; j++){
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	3301      	adds	r3, #1
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002790:	ddcd      	ble.n	800272e <interpretcommand+0x1a>
		}
	}
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	000041a6 	.word	0x000041a6
 80027a4:	0000419c 	.word	0x0000419c
 80027a8:	00004198 	.word	0x00004198
 80027ac:	00004188 	.word	0x00004188

080027b0 <executecommand>:

void executecommand(char command[], uint8_t value1[]){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]

	if(command[0] == 'P')
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b50      	cmp	r3, #80	@ 0x50
 80027c0:	d14c      	bne.n	800285c <executecommand+0xac>
	{
		p_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80027c2:	4bd5      	ldr	r3, [pc, #852]	@ (8002b18 <executecommand+0x368>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ce:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8002b1c <executecommand+0x36c>
 80027d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027d6:	ed9f 7ad2 	vldr	s14, [pc, #840]	@ 8002b20 <executecommand+0x370>
 80027da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027de:	4bce      	ldr	r3, [pc, #824]	@ (8002b18 <executecommand+0x368>)
 80027e0:	789b      	ldrb	r3, [r3, #2]
 80027e2:	ee07 3a90 	vmov	s15, r3
 80027e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ea:	eddf 6acc 	vldr	s13, [pc, #816]	@ 8002b1c <executecommand+0x36c>
 80027ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80027f2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80027f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027fe:	4bc6      	ldr	r3, [pc, #792]	@ (8002b18 <executecommand+0x368>)
 8002800:	78db      	ldrb	r3, [r3, #3]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280a:	eddf 6ac4 	vldr	s13, [pc, #784]	@ 8002b1c <executecommand+0x36c>
 800280e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002816:	4bc0      	ldr	r3, [pc, #768]	@ (8002b18 <executecommand+0x368>)
 8002818:	791b      	ldrb	r3, [r3, #4]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002822:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8002b1c <executecommand+0x36c>
 8002826:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800282a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800282e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002836:	4bb8      	ldr	r3, [pc, #736]	@ (8002b18 <executecommand+0x368>)
 8002838:	795b      	ldrb	r3, [r3, #5]
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002842:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8002b1c <executecommand+0x36c>
 8002846:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800284a:	ed9f 6ab5 	vldr	s12, [pc, #724]	@ 8002b20 <executecommand+0x370>
 800284e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002856:	4bb3      	ldr	r3, [pc, #716]	@ (8002b24 <executecommand+0x374>)
 8002858:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'I')
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b49      	cmp	r3, #73	@ 0x49
 8002862:	d14f      	bne.n	8002904 <executecommand+0x154>
	{
		i_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002864:	4bac      	ldr	r3, [pc, #688]	@ (8002b18 <executecommand+0x368>)
 8002866:	785b      	ldrb	r3, [r3, #1]
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002870:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8002b1c <executecommand+0x36c>
 8002874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002878:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8002b20 <executecommand+0x370>
 800287c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002880:	4ba5      	ldr	r3, [pc, #660]	@ (8002b18 <executecommand+0x368>)
 8002882:	789b      	ldrb	r3, [r3, #2]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288c:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8002b1c <executecommand+0x36c>
 8002890:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002894:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002898:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800289c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a0:	4b9d      	ldr	r3, [pc, #628]	@ (8002b18 <executecommand+0x368>)
 80028a2:	78db      	ldrb	r3, [r3, #3]
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ac:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8002b1c <executecommand+0x36c>
 80028b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b8:	4b97      	ldr	r3, [pc, #604]	@ (8002b18 <executecommand+0x368>)
 80028ba:	791b      	ldrb	r3, [r3, #4]
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c4:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002b1c <executecommand+0x36c>
 80028c8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028cc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80028d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002b18 <executecommand+0x368>)
 80028da:	795b      	ldrb	r3, [r3, #5]
 80028dc:	ee07 3a90 	vmov	s15, r3
 80028e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e4:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8002b1c <executecommand+0x36c>
 80028e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80028ec:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8002b20 <executecommand+0x370>
 80028f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f8:	4b8b      	ldr	r3, [pc, #556]	@ (8002b28 <executecommand+0x378>)
 80028fa:	edc3 7a00 	vstr	s15, [r3]
		error_sum_pitch = 0;
 80028fe:	4b8b      	ldr	r3, [pc, #556]	@ (8002b2c <executecommand+0x37c>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'D')
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b44      	cmp	r3, #68	@ 0x44
 800290a:	d14c      	bne.n	80029a6 <executecommand+0x1f6>
	{
		d_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 800290c:	4b82      	ldr	r3, [pc, #520]	@ (8002b18 <executecommand+0x368>)
 800290e:	785b      	ldrb	r3, [r3, #1]
 8002910:	ee07 3a90 	vmov	s15, r3
 8002914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002918:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002b1c <executecommand+0x36c>
 800291c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002920:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002b30 <executecommand+0x380>
 8002924:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002928:	4b7b      	ldr	r3, [pc, #492]	@ (8002b18 <executecommand+0x368>)
 800292a:	789b      	ldrb	r3, [r3, #2]
 800292c:	ee07 3a90 	vmov	s15, r3
 8002930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002934:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8002b1c <executecommand+0x36c>
 8002938:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800293c:	eddf 6a78 	vldr	s13, [pc, #480]	@ 8002b20 <executecommand+0x370>
 8002940:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	4b73      	ldr	r3, [pc, #460]	@ (8002b18 <executecommand+0x368>)
 800294a:	78db      	ldrb	r3, [r3, #3]
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002954:	eddf 6a71 	vldr	s13, [pc, #452]	@ 8002b1c <executecommand+0x36c>
 8002958:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800295c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002960:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002968:	4b6b      	ldr	r3, [pc, #428]	@ (8002b18 <executecommand+0x368>)
 800296a:	791b      	ldrb	r3, [r3, #4]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002974:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002b1c <executecommand+0x36c>
 8002978:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800297c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002980:	4b65      	ldr	r3, [pc, #404]	@ (8002b18 <executecommand+0x368>)
 8002982:	795b      	ldrb	r3, [r3, #5]
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298c:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8002b1c <executecommand+0x36c>
 8002990:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002994:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002998:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800299c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a0:	4b64      	ldr	r3, [pc, #400]	@ (8002b34 <executecommand+0x384>)
 80029a2:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'p')
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b70      	cmp	r3, #112	@ 0x70
 80029ac:	d14c      	bne.n	8002a48 <executecommand+0x298>
	{
		p_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80029ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002b18 <executecommand+0x368>)
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ba:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002b1c <executecommand+0x36c>
 80029be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029c2:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002b20 <executecommand+0x370>
 80029c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ca:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <executecommand+0x368>)
 80029cc:	789b      	ldrb	r3, [r3, #2]
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d6:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002b1c <executecommand+0x36c>
 80029da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029de:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80029e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <executecommand+0x368>)
 80029ec:	78db      	ldrb	r3, [r3, #3]
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f6:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002b1c <executecommand+0x36c>
 80029fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a02:	4b45      	ldr	r3, [pc, #276]	@ (8002b18 <executecommand+0x368>)
 8002a04:	791b      	ldrb	r3, [r3, #4]
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002b1c <executecommand+0x36c>
 8002a12:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a16:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002a1a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a22:	4b3d      	ldr	r3, [pc, #244]	@ (8002b18 <executecommand+0x368>)
 8002a24:	795b      	ldrb	r3, [r3, #5]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002b1c <executecommand+0x36c>
 8002a32:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002a36:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002b20 <executecommand+0x370>
 8002a3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a42:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <executecommand+0x388>)
 8002a44:	edc3 7a00 	vstr	s15, [r3]
	}

	if(command[0] == 'i')
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b69      	cmp	r3, #105	@ 0x69
 8002a4e:	d14f      	bne.n	8002af0 <executecommand+0x340>
	{
		i_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002a50:	4b31      	ldr	r3, [pc, #196]	@ (8002b18 <executecommand+0x368>)
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	ee07 3a90 	vmov	s15, r3
 8002a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002b1c <executecommand+0x36c>
 8002a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a64:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002b20 <executecommand+0x370>
 8002a68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b18 <executecommand+0x368>)
 8002a6e:	789b      	ldrb	r3, [r3, #2]
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a78:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002b1c <executecommand+0x36c>
 8002a7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a80:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002a84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a8c:	4b22      	ldr	r3, [pc, #136]	@ (8002b18 <executecommand+0x368>)
 8002a8e:	78db      	ldrb	r3, [r3, #3]
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a98:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002b1c <executecommand+0x36c>
 8002a9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b18 <executecommand+0x368>)
 8002aa6:	791b      	ldrb	r3, [r3, #4]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab0:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8002b1c <executecommand+0x36c>
 8002ab4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ab8:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002abc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac4:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <executecommand+0x368>)
 8002ac6:	795b      	ldrb	r3, [r3, #5]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002b1c <executecommand+0x36c>
 8002ad4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002ad8:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8002b20 <executecommand+0x370>
 8002adc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae4:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <executecommand+0x38c>)
 8002ae6:	edc3 7a00 	vstr	s15, [r3]
		error_sum_angular_rate_pitch = 0;
 8002aea:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <executecommand+0x390>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
	}

	if(command[0] == 'd')
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b64      	cmp	r3, #100	@ 0x64
 8002af6:	d164      	bne.n	8002bc2 <executecommand+0x412>
	{
		d_angular_rate_pitchfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002af8:	4b07      	ldr	r3, [pc, #28]	@ (8002b18 <executecommand+0x368>)
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b04:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002b1c <executecommand+0x36c>
 8002b08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b0c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002b30 <executecommand+0x380>
 8002b10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b14:	e016      	b.n	8002b44 <executecommand+0x394>
 8002b16:	bf00      	nop
 8002b18:	00004188 	.word	0x00004188
 8002b1c:	42400000 	.word	0x42400000
 8002b20:	42c80000 	.word	0x42c80000
 8002b24:	000040b4 	.word	0x000040b4
 8002b28:	000040c0 	.word	0x000040c0
 8002b2c:	00004084 	.word	0x00004084
 8002b30:	447a0000 	.word	0x447a0000
 8002b34:	000040cc 	.word	0x000040cc
 8002b38:	00004114 	.word	0x00004114
 8002b3c:	00004120 	.word	0x00004120
 8002b40:	00004090 	.word	0x00004090
 8002b44:	4bd3      	ldr	r3, [pc, #844]	@ (8002e94 <executecommand+0x6e4>)
 8002b46:	789b      	ldrb	r3, [r3, #2]
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b50:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002e98 <executecommand+0x6e8>
 8002b54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b58:	eddf 6ad0 	vldr	s13, [pc, #832]	@ 8002e9c <executecommand+0x6ec>
 8002b5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b64:	4bcb      	ldr	r3, [pc, #812]	@ (8002e94 <executecommand+0x6e4>)
 8002b66:	78db      	ldrb	r3, [r3, #3]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b70:	eddf 6ac9 	vldr	s13, [pc, #804]	@ 8002e98 <executecommand+0x6e8>
 8002b74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b78:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002b7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b84:	4bc3      	ldr	r3, [pc, #780]	@ (8002e94 <executecommand+0x6e4>)
 8002b86:	791b      	ldrb	r3, [r3, #4]
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b90:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 8002e98 <executecommand+0x6e8>
 8002b94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b9c:	4bbd      	ldr	r3, [pc, #756]	@ (8002e94 <executecommand+0x6e4>)
 8002b9e:	795b      	ldrb	r3, [r3, #5]
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba8:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002e98 <executecommand+0x6e8>
 8002bac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002bb0:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002bb4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbc:	4bb8      	ldr	r3, [pc, #736]	@ (8002ea0 <executecommand+0x6f0>)
 8002bbe:	edc3 7a00 	vstr	s15, [r3]
	}
	if(command[0] == 'F')
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b46      	cmp	r3, #70	@ 0x46
 8002bc8:	d150      	bne.n	8002c6c <executecommand+0x4bc>
	{
		FDP_D_Gain_AR = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002bca:	4bb2      	ldr	r3, [pc, #712]	@ (8002e94 <executecommand+0x6e4>)
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd6:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8002e98 <executecommand+0x6e8>
 8002bda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bde:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8002ea4 <executecommand+0x6f4>
 8002be2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002be6:	4bab      	ldr	r3, [pc, #684]	@ (8002e94 <executecommand+0x6e4>)
 8002be8:	789b      	ldrb	r3, [r3, #2]
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf2:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8002e98 <executecommand+0x6e8>
 8002bf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bfa:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002e9c <executecommand+0x6ec>
 8002bfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c06:	4ba3      	ldr	r3, [pc, #652]	@ (8002e94 <executecommand+0x6e4>)
 8002c08:	78db      	ldrb	r3, [r3, #3]
 8002c0a:	ee07 3a90 	vmov	s15, r3
 8002c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c12:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8002e98 <executecommand+0x6e8>
 8002c16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c1a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002c1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c26:	4b9b      	ldr	r3, [pc, #620]	@ (8002e94 <executecommand+0x6e4>)
 8002c28:	791b      	ldrb	r3, [r3, #4]
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c32:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002e98 <executecommand+0x6e8>
 8002c36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c3e:	4b95      	ldr	r3, [pc, #596]	@ (8002e94 <executecommand+0x6e4>)
 8002c40:	795b      	ldrb	r3, [r3, #5]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8002e98 <executecommand+0x6e8>
 8002c4e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002c52:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002c56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c62:	ee17 3a90 	vmov	r3, s15
 8002c66:	b21a      	sxth	r2, r3
 8002c68:	4b8f      	ldr	r3, [pc, #572]	@ (8002ea8 <executecommand+0x6f8>)
 8002c6a:	801a      	strh	r2, [r3, #0]
	}
	if(command[0] == 'f')
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b66      	cmp	r3, #102	@ 0x66
 8002c72:	d150      	bne.n	8002d16 <executecommand+0x566>
	{
		FDP_D_Gain = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002c74:	4b87      	ldr	r3, [pc, #540]	@ (8002e94 <executecommand+0x6e4>)
 8002c76:	785b      	ldrb	r3, [r3, #1]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c80:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002e98 <executecommand+0x6e8>
 8002c84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c88:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002ea4 <executecommand+0x6f4>
 8002c8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c90:	4b80      	ldr	r3, [pc, #512]	@ (8002e94 <executecommand+0x6e4>)
 8002c92:	789b      	ldrb	r3, [r3, #2]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002e98 <executecommand+0x6e8>
 8002ca0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ca4:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8002e9c <executecommand+0x6ec>
 8002ca8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb0:	4b78      	ldr	r3, [pc, #480]	@ (8002e94 <executecommand+0x6e4>)
 8002cb2:	78db      	ldrb	r3, [r3, #3]
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cbc:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8002e98 <executecommand+0x6e8>
 8002cc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002cc4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002cc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cd0:	4b70      	ldr	r3, [pc, #448]	@ (8002e94 <executecommand+0x6e4>)
 8002cd2:	791b      	ldrb	r3, [r3, #4]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cdc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8002e98 <executecommand+0x6e8>
 8002ce0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e94 <executecommand+0x6e4>)
 8002cea:	795b      	ldrb	r3, [r3, #5]
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf4:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8002e98 <executecommand+0x6e8>
 8002cf8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002cfc:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d0c:	ee17 3a90 	vmov	r3, s15
 8002d10:	b21a      	sxth	r2, r3
 8002d12:	4b66      	ldr	r3, [pc, #408]	@ (8002eac <executecommand+0x6fc>)
 8002d14:	801a      	strh	r2, [r3, #0]




//rool
	if(command[0] == 'a')
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b61      	cmp	r3, #97	@ 0x61
 8002d1c:	d14c      	bne.n	8002db8 <executecommand+0x608>
		{
			p_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002e94 <executecommand+0x6e4>)
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2a:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002e98 <executecommand+0x6e8>
 8002d2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d32:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002e9c <executecommand+0x6ec>
 8002d36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d3a:	4b56      	ldr	r3, [pc, #344]	@ (8002e94 <executecommand+0x6e4>)
 8002d3c:	789b      	ldrb	r3, [r3, #2]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d46:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8002e98 <executecommand+0x6e8>
 8002d4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d4e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002d52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e94 <executecommand+0x6e4>)
 8002d5c:	78db      	ldrb	r3, [r3, #3]
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d66:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002e98 <executecommand+0x6e8>
 8002d6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d72:	4b48      	ldr	r3, [pc, #288]	@ (8002e94 <executecommand+0x6e4>)
 8002d74:	791b      	ldrb	r3, [r3, #4]
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7e:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002e98 <executecommand+0x6e8>
 8002d82:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002d86:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002d8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002d8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d92:	4b40      	ldr	r3, [pc, #256]	@ (8002e94 <executecommand+0x6e4>)
 8002d94:	795b      	ldrb	r3, [r3, #5]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9e:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002e98 <executecommand+0x6e8>
 8002da2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002da6:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8002e9c <executecommand+0x6ec>
 8002daa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db2:	4b3f      	ldr	r3, [pc, #252]	@ (8002eb0 <executecommand+0x700>)
 8002db4:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'b')
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b62      	cmp	r3, #98	@ 0x62
 8002dbe:	d14f      	bne.n	8002e60 <executecommand+0x6b0>
		{
			i_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002dc0:	4b34      	ldr	r3, [pc, #208]	@ (8002e94 <executecommand+0x6e4>)
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	ee07 3a90 	vmov	s15, r3
 8002dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dcc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002e98 <executecommand+0x6e8>
 8002dd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dd4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002e9c <executecommand+0x6ec>
 8002dd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e94 <executecommand+0x6e4>)
 8002dde:	789b      	ldrb	r3, [r3, #2]
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de8:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002e98 <executecommand+0x6e8>
 8002dec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002df0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002df4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dfc:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <executecommand+0x6e4>)
 8002dfe:	78db      	ldrb	r3, [r3, #3]
 8002e00:	ee07 3a90 	vmov	s15, r3
 8002e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e08:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002e98 <executecommand+0x6e8>
 8002e0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e14:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <executecommand+0x6e4>)
 8002e16:	791b      	ldrb	r3, [r3, #4]
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e20:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002e98 <executecommand+0x6e8>
 8002e24:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e28:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002e2c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e34:	4b17      	ldr	r3, [pc, #92]	@ (8002e94 <executecommand+0x6e4>)
 8002e36:	795b      	ldrb	r3, [r3, #5]
 8002e38:	ee07 3a90 	vmov	s15, r3
 8002e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e40:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002e98 <executecommand+0x6e8>
 8002e44:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002e48:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8002e9c <executecommand+0x6ec>
 8002e4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e54:	4b17      	ldr	r3, [pc, #92]	@ (8002eb4 <executecommand+0x704>)
 8002e56:	edc3 7a00 	vstr	s15, [r3]
			error_sum_rool = 0;
 8002e5a:	4b17      	ldr	r3, [pc, #92]	@ (8002eb8 <executecommand+0x708>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'c')
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b63      	cmp	r3, #99	@ 0x63
 8002e66:	d166      	bne.n	8002f36 <executecommand+0x786>
		{
			d_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8002e68:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <executecommand+0x6e4>)
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e74:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002e98 <executecommand+0x6e8>
 8002e78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e7c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8002ea4 <executecommand+0x6f4>
 8002e80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e84:	4b03      	ldr	r3, [pc, #12]	@ (8002e94 <executecommand+0x6e4>)
 8002e86:	789b      	ldrb	r3, [r3, #2]
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e90:	e018      	b.n	8002ec4 <executecommand+0x714>
 8002e92:	bf00      	nop
 8002e94:	00004188 	.word	0x00004188
 8002e98:	42400000 	.word	0x42400000
 8002e9c:	42c80000 	.word	0x42c80000
 8002ea0:	0000412c 	.word	0x0000412c
 8002ea4:	447a0000 	.word	0x447a0000
 8002ea8:	0000405c 	.word	0x0000405c
 8002eac:	0000405e 	.word	0x0000405e
 8002eb0:	000040b8 	.word	0x000040b8
 8002eb4:	000040c4 	.word	0x000040c4
 8002eb8:	00004088 	.word	0x00004088
 8002ebc:	42400000 	.word	0x42400000
 8002ec0:	42c80000 	.word	0x42c80000
 8002ec4:	ed5f 6a03 	vldr	s13, [pc, #-12]	@ 8002ebc <executecommand+0x70c>
 8002ec8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ecc:	ed5f 6a04 	vldr	s13, [pc, #-16]	@ 8002ec0 <executecommand+0x710>
 8002ed0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed8:	4bd5      	ldr	r3, [pc, #852]	@ (8003230 <executecommand+0xa80>)
 8002eda:	78db      	ldrb	r3, [r3, #3]
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee4:	eddf 6ad3 	vldr	s13, [pc, #844]	@ 8003234 <executecommand+0xa84>
 8002ee8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002eec:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002ef0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ef8:	4bcd      	ldr	r3, [pc, #820]	@ (8003230 <executecommand+0xa80>)
 8002efa:	791b      	ldrb	r3, [r3, #4]
 8002efc:	ee07 3a90 	vmov	s15, r3
 8002f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f04:	eddf 6acb 	vldr	s13, [pc, #812]	@ 8003234 <executecommand+0xa84>
 8002f08:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f10:	4bc7      	ldr	r3, [pc, #796]	@ (8003230 <executecommand+0xa80>)
 8002f12:	795b      	ldrb	r3, [r3, #5]
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f1c:	eddf 6ac5 	vldr	s13, [pc, #788]	@ 8003234 <executecommand+0xa84>
 8002f20:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002f24:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002f28:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f30:	4bc1      	ldr	r3, [pc, #772]	@ (8003238 <executecommand+0xa88>)
 8002f32:	edc3 7a00 	vstr	s15, [r3]
		}
		if(command[0] == 'e')
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b65      	cmp	r3, #101	@ 0x65
 8002f3c:	d14c      	bne.n	8002fd8 <executecommand+0x828>
		{
			p_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002f3e:	4bbc      	ldr	r3, [pc, #752]	@ (8003230 <executecommand+0xa80>)
 8002f40:	785b      	ldrb	r3, [r3, #1]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8003234 <executecommand+0xa84>
 8002f4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f52:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 800323c <executecommand+0xa8c>
 8002f56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f5a:	4bb5      	ldr	r3, [pc, #724]	@ (8003230 <executecommand+0xa80>)
 8002f5c:	789b      	ldrb	r3, [r3, #2]
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f66:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8003234 <executecommand+0xa84>
 8002f6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f6e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002f72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f7a:	4bad      	ldr	r3, [pc, #692]	@ (8003230 <executecommand+0xa80>)
 8002f7c:	78db      	ldrb	r3, [r3, #3]
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f86:	eddf 6aab 	vldr	s13, [pc, #684]	@ 8003234 <executecommand+0xa84>
 8002f8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f92:	4ba7      	ldr	r3, [pc, #668]	@ (8003230 <executecommand+0xa80>)
 8002f94:	791b      	ldrb	r3, [r3, #4]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9e:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 8003234 <executecommand+0xa84>
 8002fa2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fa6:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8002faa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb2:	4b9f      	ldr	r3, [pc, #636]	@ (8003230 <executecommand+0xa80>)
 8002fb4:	795b      	ldrb	r3, [r3, #5]
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbe:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8003234 <executecommand+0xa84>
 8002fc2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8002fc6:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 800323c <executecommand+0xa8c>
 8002fca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd2:	4b9b      	ldr	r3, [pc, #620]	@ (8003240 <executecommand+0xa90>)
 8002fd4:	edc3 7a00 	vstr	s15, [r3]
		}

		if(command[0] == 'g')
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b67      	cmp	r3, #103	@ 0x67
 8002fde:	d14f      	bne.n	8003080 <executecommand+0x8d0>
		{
			i_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8002fe0:	4b93      	ldr	r3, [pc, #588]	@ (8003230 <executecommand+0xa80>)
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	ee07 3a90 	vmov	s15, r3
 8002fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fec:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003234 <executecommand+0xa84>
 8002ff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ff4:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800323c <executecommand+0xa8c>
 8002ff8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ffc:	4b8c      	ldr	r3, [pc, #560]	@ (8003230 <executecommand+0xa80>)
 8002ffe:	789b      	ldrb	r3, [r3, #2]
 8003000:	ee07 3a90 	vmov	s15, r3
 8003004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003008:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003234 <executecommand+0xa84>
 800300c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003010:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003014:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800301c:	4b84      	ldr	r3, [pc, #528]	@ (8003230 <executecommand+0xa80>)
 800301e:	78db      	ldrb	r3, [r3, #3]
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003028:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003234 <executecommand+0xa84>
 800302c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003034:	4b7e      	ldr	r3, [pc, #504]	@ (8003230 <executecommand+0xa80>)
 8003036:	791b      	ldrb	r3, [r3, #4]
 8003038:	ee07 3a90 	vmov	s15, r3
 800303c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003040:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003234 <executecommand+0xa84>
 8003044:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003048:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800304c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003054:	4b76      	ldr	r3, [pc, #472]	@ (8003230 <executecommand+0xa80>)
 8003056:	795b      	ldrb	r3, [r3, #5]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003060:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003234 <executecommand+0xa84>
 8003064:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003068:	ed9f 6a74 	vldr	s12, [pc, #464]	@ 800323c <executecommand+0xa8c>
 800306c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003074:	4b73      	ldr	r3, [pc, #460]	@ (8003244 <executecommand+0xa94>)
 8003076:	edc3 7a00 	vstr	s15, [r3]
			error_sum_angular_rate_rool = 0;
 800307a:	4b73      	ldr	r3, [pc, #460]	@ (8003248 <executecommand+0xa98>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
		}

		if(command[0] == 'h')
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b68      	cmp	r3, #104	@ 0x68
 8003086:	d14c      	bne.n	8003122 <executecommand+0x972>
		{
			d_angular_rate_roolfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003088:	4b69      	ldr	r3, [pc, #420]	@ (8003230 <executecommand+0xa80>)
 800308a:	785b      	ldrb	r3, [r3, #1]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003094:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8003234 <executecommand+0xa84>
 8003098:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800309c:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800324c <executecommand+0xa9c>
 80030a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030a4:	4b62      	ldr	r3, [pc, #392]	@ (8003230 <executecommand+0xa80>)
 80030a6:	789b      	ldrb	r3, [r3, #2]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b0:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8003234 <executecommand+0xa84>
 80030b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030b8:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800323c <executecommand+0xa8c>
 80030bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003230 <executecommand+0xa80>)
 80030c6:	78db      	ldrb	r3, [r3, #3]
 80030c8:	ee07 3a90 	vmov	s15, r3
 80030cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d0:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003234 <executecommand+0xa84>
 80030d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030d8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80030dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e4:	4b52      	ldr	r3, [pc, #328]	@ (8003230 <executecommand+0xa80>)
 80030e6:	791b      	ldrb	r3, [r3, #4]
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f0:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8003234 <executecommand+0xa84>
 80030f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80030f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003230 <executecommand+0xa80>)
 80030fe:	795b      	ldrb	r3, [r3, #5]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003108:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8003234 <executecommand+0xa84>
 800310c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003110:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003114:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311c:	4b4c      	ldr	r3, [pc, #304]	@ (8003250 <executecommand+0xaa0>)
 800311e:	edc3 7a00 	vstr	s15, [r3]





		if(command[0] == 'j')
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b6a      	cmp	r3, #106	@ 0x6a
 8003128:	d14c      	bne.n	80031c4 <executecommand+0xa14>
			{
				p_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 800312a:	4b41      	ldr	r3, [pc, #260]	@ (8003230 <executecommand+0xa80>)
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003136:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003234 <executecommand+0xa84>
 800313a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800313e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800323c <executecommand+0xa8c>
 8003142:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003146:	4b3a      	ldr	r3, [pc, #232]	@ (8003230 <executecommand+0xa80>)
 8003148:	789b      	ldrb	r3, [r3, #2]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003234 <executecommand+0xa84>
 8003156:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800315a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800315e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003166:	4b32      	ldr	r3, [pc, #200]	@ (8003230 <executecommand+0xa80>)
 8003168:	78db      	ldrb	r3, [r3, #3]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003172:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8003234 <executecommand+0xa84>
 8003176:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800317a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800317e:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <executecommand+0xa80>)
 8003180:	791b      	ldrb	r3, [r3, #4]
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003234 <executecommand+0xa84>
 800318e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003192:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003196:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800319a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800319e:	4b24      	ldr	r3, [pc, #144]	@ (8003230 <executecommand+0xa80>)
 80031a0:	795b      	ldrb	r3, [r3, #5]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8003234 <executecommand+0xa84>
 80031ae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80031b2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800323c <executecommand+0xa8c>
 80031b6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031be:	4b25      	ldr	r3, [pc, #148]	@ (8003254 <executecommand+0xaa4>)
 80031c0:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'k')
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b6b      	cmp	r3, #107	@ 0x6b
 80031ca:	d167      	bne.n	800329c <executecommand+0xaec>
			{
				i_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80031cc:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <executecommand+0xa80>)
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003234 <executecommand+0xa84>
 80031dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031e0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800323c <executecommand+0xa8c>
 80031e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031e8:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <executecommand+0xa80>)
 80031ea:	789b      	ldrb	r3, [r3, #2]
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f4:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8003234 <executecommand+0xa84>
 80031f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80031fc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <executecommand+0xa80>)
 800320a:	78db      	ldrb	r3, [r3, #3]
 800320c:	ee07 3a90 	vmov	s15, r3
 8003210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003214:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8003234 <executecommand+0xa84>
 8003218:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800321c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003220:	4b03      	ldr	r3, [pc, #12]	@ (8003230 <executecommand+0xa80>)
 8003222:	791b      	ldrb	r3, [r3, #4]
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322c:	e016      	b.n	800325c <executecommand+0xaac>
 800322e:	bf00      	nop
 8003230:	00004188 	.word	0x00004188
 8003234:	42400000 	.word	0x42400000
 8003238:	000040d0 	.word	0x000040d0
 800323c:	42c80000 	.word	0x42c80000
 8003240:	00004118 	.word	0x00004118
 8003244:	00004124 	.word	0x00004124
 8003248:	00004094 	.word	0x00004094
 800324c:	447a0000 	.word	0x447a0000
 8003250:	00004130 	.word	0x00004130
 8003254:	000040bc 	.word	0x000040bc
 8003258:	42400000 	.word	0x42400000
 800325c:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 8003258 <executecommand+0xaa8>
 8003260:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003264:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003268:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800326c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003270:	4bba      	ldr	r3, [pc, #744]	@ (800355c <executecommand+0xdac>)
 8003272:	795b      	ldrb	r3, [r3, #5]
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327c:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 8003560 <executecommand+0xdb0>
 8003280:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003284:	ed9f 6ab7 	vldr	s12, [pc, #732]	@ 8003564 <executecommand+0xdb4>
 8003288:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	4bb5      	ldr	r3, [pc, #724]	@ (8003568 <executecommand+0xdb8>)
 8003292:	edc3 7a00 	vstr	s15, [r3]
				error_sum_yaw = 0;
 8003296:	4bb5      	ldr	r3, [pc, #724]	@ (800356c <executecommand+0xdbc>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'l')
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b6c      	cmp	r3, #108	@ 0x6c
 80032a2:	d14c      	bne.n	800333e <executecommand+0xb8e>
			{
				d_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 80032a4:	4bad      	ldr	r3, [pc, #692]	@ (800355c <executecommand+0xdac>)
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b0:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8003560 <executecommand+0xdb0>
 80032b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032b8:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8003570 <executecommand+0xdc0>
 80032bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032c0:	4ba6      	ldr	r3, [pc, #664]	@ (800355c <executecommand+0xdac>)
 80032c2:	789b      	ldrb	r3, [r3, #2]
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032cc:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 8003560 <executecommand+0xdb0>
 80032d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032d4:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8003564 <executecommand+0xdb4>
 80032d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e0:	4b9e      	ldr	r3, [pc, #632]	@ (800355c <executecommand+0xdac>)
 80032e2:	78db      	ldrb	r3, [r3, #3]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ec:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8003560 <executecommand+0xdb0>
 80032f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032f4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80032f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003300:	4b96      	ldr	r3, [pc, #600]	@ (800355c <executecommand+0xdac>)
 8003302:	791b      	ldrb	r3, [r3, #4]
 8003304:	ee07 3a90 	vmov	s15, r3
 8003308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330c:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8003560 <executecommand+0xdb0>
 8003310:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003318:	4b90      	ldr	r3, [pc, #576]	@ (800355c <executecommand+0xdac>)
 800331a:	795b      	ldrb	r3, [r3, #5]
 800331c:	ee07 3a90 	vmov	s15, r3
 8003320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003324:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8003560 <executecommand+0xdb0>
 8003328:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800332c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003330:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003338:	4b8e      	ldr	r3, [pc, #568]	@ (8003574 <executecommand+0xdc4>)
 800333a:	edc3 7a00 	vstr	s15, [r3]
			}
			if(command[0] == 'm')
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b6d      	cmp	r3, #109	@ 0x6d
 8003344:	d14c      	bne.n	80033e0 <executecommand+0xc30>
			{
				p_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 8003346:	4b85      	ldr	r3, [pc, #532]	@ (800355c <executecommand+0xdac>)
 8003348:	785b      	ldrb	r3, [r3, #1]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003560 <executecommand+0xdb0>
 8003356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800335a:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8003564 <executecommand+0xdb4>
 800335e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003362:	4b7e      	ldr	r3, [pc, #504]	@ (800355c <executecommand+0xdac>)
 8003364:	789b      	ldrb	r3, [r3, #2]
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336e:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003560 <executecommand+0xdb0>
 8003372:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003376:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800337a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800337e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003382:	4b76      	ldr	r3, [pc, #472]	@ (800355c <executecommand+0xdac>)
 8003384:	78db      	ldrb	r3, [r3, #3]
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338e:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003560 <executecommand+0xdb0>
 8003392:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003396:	ee37 7a27 	vadd.f32	s14, s14, s15
 800339a:	4b70      	ldr	r3, [pc, #448]	@ (800355c <executecommand+0xdac>)
 800339c:	791b      	ldrb	r3, [r3, #4]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a6:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8003560 <executecommand+0xdb0>
 80033aa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033ae:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80033b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ba:	4b68      	ldr	r3, [pc, #416]	@ (800355c <executecommand+0xdac>)
 80033bc:	795b      	ldrb	r3, [r3, #5]
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c6:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8003560 <executecommand+0xdb0>
 80033ca:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80033ce:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 8003564 <executecommand+0xdb4>
 80033d2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033da:	4b67      	ldr	r3, [pc, #412]	@ (8003578 <executecommand+0xdc8>)
 80033dc:	edc3 7a00 	vstr	s15, [r3]
			}

			if(command[0] == 'n')
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80033e6:	d14f      	bne.n	8003488 <executecommand+0xcd8>
			{
				i_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*100) + ((((float)UASRT_PID_VAL[2])-48)*10) + ((((float)UASRT_PID_VAL[3])-48)) + ((((float)UASRT_PID_VAL[4])-48)/10) + ((((float)UASRT_PID_VAL[5])-48)/100);
 80033e8:	4b5c      	ldr	r3, [pc, #368]	@ (800355c <executecommand+0xdac>)
 80033ea:	785b      	ldrb	r3, [r3, #1]
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f4:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003560 <executecommand+0xdb0>
 80033f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033fc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003564 <executecommand+0xdb4>
 8003400:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003404:	4b55      	ldr	r3, [pc, #340]	@ (800355c <executecommand+0xdac>)
 8003406:	789b      	ldrb	r3, [r3, #2]
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003410:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8003560 <executecommand+0xdb0>
 8003414:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003418:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800341c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003420:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003424:	4b4d      	ldr	r3, [pc, #308]	@ (800355c <executecommand+0xdac>)
 8003426:	78db      	ldrb	r3, [r3, #3]
 8003428:	ee07 3a90 	vmov	s15, r3
 800342c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003430:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003560 <executecommand+0xdb0>
 8003434:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800343c:	4b47      	ldr	r3, [pc, #284]	@ (800355c <executecommand+0xdac>)
 800343e:	791b      	ldrb	r3, [r3, #4]
 8003440:	ee07 3a90 	vmov	s15, r3
 8003444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003448:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8003560 <executecommand+0xdb0>
 800344c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003450:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8003454:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800345c:	4b3f      	ldr	r3, [pc, #252]	@ (800355c <executecommand+0xdac>)
 800345e:	795b      	ldrb	r3, [r3, #5]
 8003460:	ee07 3a90 	vmov	s15, r3
 8003464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003468:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003560 <executecommand+0xdb0>
 800346c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003470:	ed9f 6a3c 	vldr	s12, [pc, #240]	@ 8003564 <executecommand+0xdb4>
 8003474:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800347c:	4b3f      	ldr	r3, [pc, #252]	@ (800357c <executecommand+0xdcc>)
 800347e:	edc3 7a00 	vstr	s15, [r3]
				error_sum_angular_rate_yaw = 0;
 8003482:	4b3f      	ldr	r3, [pc, #252]	@ (8003580 <executecommand+0xdd0>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
			}

			if(command[0] == 'o')
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b6f      	cmp	r3, #111	@ 0x6f
 800348e:	d14c      	bne.n	800352a <executecommand+0xd7a>
			{
				d_angular_rate_yawfactor = ((((float)UASRT_PID_VAL[1])-48)*1000) + ((((float)UASRT_PID_VAL[2])-48)*100) + ((((float)UASRT_PID_VAL[3])-48)*10) + ((((float)UASRT_PID_VAL[4])-48)) + ((((float)UASRT_PID_VAL[5])-48)/10);
 8003490:	4b32      	ldr	r3, [pc, #200]	@ (800355c <executecommand+0xdac>)
 8003492:	785b      	ldrb	r3, [r3, #1]
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800349c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003560 <executecommand+0xdb0>
 80034a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034a4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003570 <executecommand+0xdc0>
 80034a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034ac:	4b2b      	ldr	r3, [pc, #172]	@ (800355c <executecommand+0xdac>)
 80034ae:	789b      	ldrb	r3, [r3, #2]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b8:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003560 <executecommand+0xdb0>
 80034bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034c0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8003564 <executecommand+0xdb4>
 80034c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034cc:	4b23      	ldr	r3, [pc, #140]	@ (800355c <executecommand+0xdac>)
 80034ce:	78db      	ldrb	r3, [r3, #3]
 80034d0:	ee07 3a90 	vmov	s15, r3
 80034d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8003560 <executecommand+0xdb0>
 80034dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80034e0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80034e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034ec:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <executecommand+0xdac>)
 80034ee:	791b      	ldrb	r3, [r3, #4]
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f8:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8003560 <executecommand+0xdb0>
 80034fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003504:	4b15      	ldr	r3, [pc, #84]	@ (800355c <executecommand+0xdac>)
 8003506:	795b      	ldrb	r3, [r3, #5]
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003510:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003560 <executecommand+0xdb0>
 8003514:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003518:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800351c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003524:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <executecommand+0xdd4>)
 8003526:	edc3 7a00 	vstr	s15, [r3]
			}

	if(command[0] == 'r'){
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b72      	cmp	r3, #114	@ 0x72
 8003530:	d101      	bne.n	8003536 <executecommand+0xd86>
		NVIC_SystemReset();
 8003532:	f7ff f8d9 	bl	80026e8 <__NVIC_SystemReset>
	}

	for(int i = 0; i < 15; i++){
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e007      	b.n	800354c <executecommand+0xd9c>
		UASRT_PID_VAL[i] = 0;
 800353c:	4a07      	ldr	r2, [pc, #28]	@ (800355c <executecommand+0xdac>)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4413      	add	r3, r2
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 15; i++){
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3301      	adds	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b0e      	cmp	r3, #14
 8003550:	ddf4      	ble.n	800353c <executecommand+0xd8c>
	}
//	for(int i = 0; i < 10; i++){
//		words[i] = 0;
//	}

}
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	00004188 	.word	0x00004188
 8003560:	42400000 	.word	0x42400000
 8003564:	42c80000 	.word	0x42c80000
 8003568:	000040c8 	.word	0x000040c8
 800356c:	0000408c 	.word	0x0000408c
 8003570:	447a0000 	.word	0x447a0000
 8003574:	000040d4 	.word	0x000040d4
 8003578:	0000411c 	.word	0x0000411c
 800357c:	00004128 	.word	0x00004128
 8003580:	00004098 	.word	0x00004098
 8003584:	00004134 	.word	0x00004134

08003588 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	@ 0x28
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	2224      	movs	r2, #36	@ 0x24
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f01a f98d 	bl	801d8b4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800359a:	4b2e      	ldr	r3, [pc, #184]	@ (8003654 <MX_ADC2_Init+0xcc>)
 800359c:	4a2e      	ldr	r2, [pc, #184]	@ (8003658 <MX_ADC2_Init+0xd0>)
 800359e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80035a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035a6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80035a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035aa:	2208      	movs	r2, #8
 80035ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035ae:	4b29      	ldr	r3, [pc, #164]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80035b4:	4b27      	ldr	r3, [pc, #156]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035b6:	2204      	movs	r2, #4
 80035b8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80035ba:	4b26      	ldr	r3, [pc, #152]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035bc:	2200      	movs	r2, #0
 80035be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80035c0:	4b24      	ldr	r3, [pc, #144]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80035c6:	4b23      	ldr	r3, [pc, #140]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80035cc:	4b21      	ldr	r3, [pc, #132]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 80035d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035d6:	f44f 629c 	mov.w	r2, #1248	@ 0x4e0
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80035e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035e6:	2203      	movs	r2, #3
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80035ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80035f2:	4b18      	ldr	r3, [pc, #96]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80035f8:	4b16      	ldr	r3, [pc, #88]	@ (8003654 <MX_ADC2_Init+0xcc>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8003600:	4b14      	ldr	r3, [pc, #80]	@ (8003654 <MX_ADC2_Init+0xcc>)
 8003602:	2201      	movs	r2, #1
 8003604:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003606:	4813      	ldr	r0, [pc, #76]	@ (8003654 <MX_ADC2_Init+0xcc>)
 8003608:	f005 fe8c 	bl	8009324 <HAL_ADC_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8003612:	f004 f80d 	bl	8007630 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003616:	4b11      	ldr	r3, [pc, #68]	@ (800365c <MX_ADC2_Init+0xd4>)
 8003618:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800361a:	2306      	movs	r3, #6
 800361c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800361e:	2307      	movs	r3, #7
 8003620:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003622:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003626:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003628:	2304      	movs	r3, #4
 800362a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003636:	1d3b      	adds	r3, r7, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4806      	ldr	r0, [pc, #24]	@ (8003654 <MX_ADC2_Init+0xcc>)
 800363c:	f006 fbb8 	bl	8009db0 <HAL_ADC_ConfigChannel>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 8003646:	f003 fff3 	bl	8007630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800364a:	bf00      	nop
 800364c:	3728      	adds	r7, #40	@ 0x28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	240000ac 	.word	0x240000ac
 8003658:	40022100 	.word	0x40022100
 800365c:	19200040 	.word	0x19200040

08003660 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	@ 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a34      	ldr	r2, [pc, #208]	@ (8003750 <HAL_ADC_MspInit+0xf0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d162      	bne.n	8003748 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003682:	4b34      	ldr	r3, [pc, #208]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 8003684:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003688:	4a32      	ldr	r2, [pc, #200]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 800368a:	f043 0320 	orr.w	r3, r3, #32
 800368e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003692:	4b30      	ldr	r3, [pc, #192]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 8003694:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 80036a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 80036a8:	f043 0320 	orr.w	r3, r3, #32
 80036ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036b0:	4b28      	ldr	r3, [pc, #160]	@ (8003754 <HAL_ADC_MspInit+0xf4>)
 80036b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PF14     ------> ADC2_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80036be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036c4:	2303      	movs	r3, #3
 80036c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	4619      	mov	r1, r3
 80036d2:	4821      	ldr	r0, [pc, #132]	@ (8003758 <HAL_ADC_MspInit+0xf8>)
 80036d4:	f00a fab4 	bl	800dc40 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream0;
 80036d8:	4b20      	ldr	r3, [pc, #128]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036da:	4a21      	ldr	r2, [pc, #132]	@ (8003760 <HAL_ADC_MspInit+0x100>)
 80036dc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80036de:	4b1f      	ldr	r3, [pc, #124]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036e0:	220a      	movs	r2, #10
 80036e2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036e4:	4b1d      	ldr	r3, [pc, #116]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ea:	4b1c      	ldr	r3, [pc, #112]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80036f0:	4b1a      	ldr	r3, [pc, #104]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036f6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036f8:	4b18      	ldr	r3, [pc, #96]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 80036fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036fe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003700:	4b16      	ldr	r3, [pc, #88]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003702:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003706:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003708:	4b14      	ldr	r3, [pc, #80]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 800370a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800370e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003710:	4b12      	ldr	r3, [pc, #72]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003712:	2200      	movs	r2, #0
 8003714:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003716:	4b11      	ldr	r3, [pc, #68]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003718:	2200      	movs	r2, #0
 800371a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800371c:	480f      	ldr	r0, [pc, #60]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 800371e:	f007 fc3d 	bl	800af9c <HAL_DMA_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8003728:	f003 ff82 	bl	8007630 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a0b      	ldr	r2, [pc, #44]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003730:	659a      	str	r2, [r3, #88]	@ 0x58
 8003732:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <HAL_ADC_MspInit+0xfc>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003738:	2200      	movs	r2, #0
 800373a:	2100      	movs	r1, #0
 800373c:	2012      	movs	r0, #18
 800373e:	f007 fb80 	bl	800ae42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003742:	2012      	movs	r0, #18
 8003744:	f007 fb97 	bl	800ae76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003748:	bf00      	nop
 800374a:	3728      	adds	r7, #40	@ 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40022100 	.word	0x40022100
 8003754:	58024400 	.word	0x58024400
 8003758:	58021400 	.word	0x58021400
 800375c:	2400011c 	.word	0x2400011c
 8003760:	40020410 	.word	0x40020410

08003764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800376a:	4b19      	ldr	r3, [pc, #100]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800376c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003770:	4a17      	ldr	r2, [pc, #92]	@ (80037d0 <MX_DMA_Init+0x6c>)
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800377a:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800377c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003788:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800378a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800378e:	4a10      	ldr	r2, [pc, #64]	@ (80037d0 <MX_DMA_Init+0x6c>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003798:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <MX_DMA_Init+0x6c>)
 800379a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80037a6:	2200      	movs	r2, #0
 80037a8:	2100      	movs	r1, #0
 80037aa:	200b      	movs	r0, #11
 80037ac:	f007 fb49 	bl	800ae42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80037b0:	200b      	movs	r0, #11
 80037b2:	f007 fb60 	bl	800ae76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2100      	movs	r1, #0
 80037ba:	2038      	movs	r0, #56	@ 0x38
 80037bc:	f007 fb41 	bl	800ae42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80037c0:	2038      	movs	r0, #56	@ 0x38
 80037c2:	f007 fb58 	bl	800ae76 <HAL_NVIC_EnableIRQ>

}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	58024400 	.word	0x58024400
 80037d4:	00000000 	.word	0x00000000

080037d8 <Thrust_filter>:
 * Thrust_filter
 *
 * niepozwala zwiększac ani znimiejszac ciągu jezeli error wychylenia jest zbyt duzy
 *
 */
void Thrust_filter(double factor){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08e      	sub	sp, #56	@ 0x38
 80037dc:	af00      	add	r7, sp, #0
 80037de:	ed87 0b00 	vstr	d0, [r7]
	double error_pitch, error_rool, error_sum;
	double thrust_add = 0;
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	int16_t thrust_error;
	double thrust_function;
	uint8_t negflag = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	error_pitch = (float)(wanted_pitch - now_pitch);
 80037f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003a28 <Thrust_filter+0x250>)
 80037f6:	ed93 7a00 	vldr	s14, [r3]
 80037fa:	4b8c      	ldr	r3, [pc, #560]	@ (8003a2c <Thrust_filter+0x254>)
 80037fc:	edd3 7a00 	vldr	s15, [r3]
 8003800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003808:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= (float)(wanted_rool - now_rool);
 800380c:	4b88      	ldr	r3, [pc, #544]	@ (8003a30 <Thrust_filter+0x258>)
 800380e:	ed93 7a00 	vldr	s14, [r3]
 8003812:	4b88      	ldr	r3, [pc, #544]	@ (8003a34 <Thrust_filter+0x25c>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003820:	ed87 7b06 	vstr	d7, [r7, #24]

	error_pitch = WartoscBezwgledna(error_pitch);
 8003824:	ed97 7b08 	vldr	d7, [r7, #32]
 8003828:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800382c:	eeb0 0a67 	vmov.f32	s0, s15
 8003830:	f003 fae2 	bl	8006df8 <WartoscBezwgledna>
 8003834:	eef0 7a40 	vmov.f32	s15, s0
 8003838:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800383c:	ed87 7b08 	vstr	d7, [r7, #32]
	error_rool 	= WartoscBezwgledna(error_rool);
 8003840:	ed97 7b06 	vldr	d7, [r7, #24]
 8003844:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003848:	eeb0 0a67 	vmov.f32	s0, s15
 800384c:	f003 fad4 	bl	8006df8 <WartoscBezwgledna>
 8003850:	eef0 7a40 	vmov.f32	s15, s0
 8003854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003858:	ed87 7b06 	vstr	d7, [r7, #24]

	error_sum = pow(error_pitch + error_rool + 1, 5);
 800385c:	ed97 6b08 	vldr	d6, [r7, #32]
 8003860:	ed97 7b06 	vldr	d7, [r7, #24]
 8003864:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003868:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800386c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003870:	eeb1 1b04 	vmov.f64	d1, #20	@ 0x40a00000  5.0
 8003874:	eeb0 0b47 	vmov.f64	d0, d7
 8003878:	f01a f8a6 	bl	801d9c8 <pow>
 800387c:	ed87 0b04 	vstr	d0, [r7, #16]
	if(wanted_thrust > 10500){
 8003880:	4b6d      	ldr	r3, [pc, #436]	@ (8003a38 <Thrust_filter+0x260>)
 8003882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003886:	f642 1204 	movw	r2, #10500	@ 0x2904
 800388a:	4293      	cmp	r3, r2
 800388c:	dd03      	ble.n	8003896 <Thrust_filter+0xbe>
		wanted_thrust = 10500;
 800388e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a38 <Thrust_filter+0x260>)
 8003890:	f642 1204 	movw	r2, #10500	@ 0x2904
 8003894:	801a      	strh	r2, [r3, #0]
	}

	thrust_error = wanted_thrust - MYDRON.THRUST;
 8003896:	4b68      	ldr	r3, [pc, #416]	@ (8003a38 <Thrust_filter+0x260>)
 8003898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800389c:	b29a      	uxth	r2, r3
 800389e:	4b67      	ldr	r3, [pc, #412]	@ (8003a3c <Thrust_filter+0x264>)
 80038a0:	885b      	ldrh	r3, [r3, #2]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if(thrust_error < 0){
 80038a8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da13      	bge.n	80038d8 <Thrust_filter+0x100>
		thrust_error = WartoscBezwgledna(thrust_error);
 80038b0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038bc:	eeb0 0a67 	vmov.f32	s0, s15
 80038c0:	f003 fa9a 	bl	8006df8 <WartoscBezwgledna>
 80038c4:	eef0 7a40 	vmov.f32	s15, s0
 80038c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038cc:	ee17 3a90 	vmov	r3, s15
 80038d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		negflag = 1;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}


	if((thrust_error) != 0){
 80038d8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8097 	beq.w	8003a10 <Thrust_filter+0x238>
		thrust_function = 2000*(sqrt(sqrt((double)(thrust_error))));
 80038e2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80038ee:	eeb0 0b47 	vmov.f64	d0, d7
 80038f2:	f01a f815 	bl	801d920 <sqrt>
 80038f6:	eeb0 7b40 	vmov.f64	d7, d0
 80038fa:	eeb0 0b47 	vmov.f64	d0, d7
 80038fe:	f01a f80f 	bl	801d920 <sqrt>
 8003902:	eeb0 7b40 	vmov.f64	d7, d0
 8003906:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8003a18 <Thrust_filter+0x240>
 800390a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800390e:	ed87 7b02 	vstr	d7, [r7, #8]

		thrust_add = ((double)(factor * thrust_increse_factor * thrust_function/error_sum));
 8003912:	ed97 7b00 	vldr	d7, [r7]
 8003916:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 8003a20 <Thrust_filter+0x248>
 800391a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800391e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003922:	ee26 5b07 	vmul.f64	d5, d6, d7
 8003926:	ed97 6b04 	vldr	d6, [r7, #16]
 800392a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800392e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		if(negflag == 1){
 8003932:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003936:	2b01      	cmp	r3, #1
 8003938:	d105      	bne.n	8003946 <Thrust_filter+0x16e>
			thrust_add = thrust_add*(-1);
 800393a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800393e:	eeb1 7b47 	vneg.f64	d7, d7
 8003942:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
		}


		if(thrust_add < 1 && thrust_add > -1){
 8003946:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800394a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800394e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003956:	d513      	bpl.n	8003980 <Thrust_filter+0x1a8>
 8003958:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800395c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8003960:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	dd0a      	ble.n	8003980 <Thrust_filter+0x1a8>
			thrust_values = thrust_values + thrust_add;
 800396a:	4b35      	ldr	r3, [pc, #212]	@ (8003a40 <Thrust_filter+0x268>)
 800396c:	ed93 6b00 	vldr	d6, [r3]
 8003970:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003974:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003978:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <Thrust_filter+0x268>)
 800397a:	ed83 7b00 	vstr	d7, [r3]
 800397e:	e010      	b.n	80039a2 <Thrust_filter+0x1ca>
		}
		else{
			MYDRON.THRUST = MYDRON.THRUST + thrust_add;
 8003980:	4b2e      	ldr	r3, [pc, #184]	@ (8003a3c <Thrust_filter+0x264>)
 8003982:	885b      	ldrh	r3, [r3, #2]
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800398c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8003990:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003994:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003998:	ee17 3a90 	vmov	r3, s15
 800399c:	b29a      	uxth	r2, r3
 800399e:	4b27      	ldr	r3, [pc, #156]	@ (8003a3c <Thrust_filter+0x264>)
 80039a0:	805a      	strh	r2, [r3, #2]
		}

		if(thrust_values >= 1 || thrust_values <= -1){
 80039a2:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <Thrust_filter+0x268>)
 80039a4:	ed93 7b00 	vldr	d7, [r3]
 80039a8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80039ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b4:	da09      	bge.n	80039ca <Thrust_filter+0x1f2>
 80039b6:	4b22      	ldr	r3, [pc, #136]	@ (8003a40 <Thrust_filter+0x268>)
 80039b8:	ed93 7b00 	vldr	d7, [r3]
 80039bc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80039c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	d818      	bhi.n	80039fc <Thrust_filter+0x224>
			MYDRON.THRUST = MYDRON.THRUST + thrust_values;
 80039ca:	4b1c      	ldr	r3, [pc, #112]	@ (8003a3c <Thrust_filter+0x264>)
 80039cc:	885b      	ldrh	r3, [r3, #2]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <Thrust_filter+0x268>)
 80039d8:	ed93 7b00 	vldr	d7, [r3]
 80039dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80039e4:	ee17 3a90 	vmov	r3, s15
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	4b14      	ldr	r3, [pc, #80]	@ (8003a3c <Thrust_filter+0x264>)
 80039ec:	805a      	strh	r2, [r3, #2]
			thrust_values = 0;
 80039ee:	4914      	ldr	r1, [pc, #80]	@ (8003a40 <Thrust_filter+0x268>)
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(MYDRON.THRUST > 10000){//ograniczenie THRUST
 80039fc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <Thrust_filter+0x264>)
 80039fe:	885b      	ldrh	r3, [r3, #2]
 8003a00:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d903      	bls.n	8003a10 <Thrust_filter+0x238>
			MYDRON.THRUST = 10000;
 8003a08:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <Thrust_filter+0x264>)
 8003a0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a0e:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8003a10:	bf00      	nop
 8003a12:	3738      	adds	r7, #56	@ 0x38
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	00000000 	.word	0x00000000
 8003a1c:	409f4000 	.word	0x409f4000
 8003a20:	30553261 	.word	0x30553261
 8003a24:	3f33a92a 	.word	0x3f33a92a
 8003a28:	00004050 	.word	0x00004050
 8003a2c:	00004060 	.word	0x00004060
 8003a30:	00004054 	.word	0x00004054
 8003a34:	00004064 	.word	0x00004064
 8003a38:	00004044 	.word	0x00004044
 8003a3c:	00000160 	.word	0x00000160
 8003a40:	00004048 	.word	0x00004048

08003a44 <PID_cal>:

	*g_ax = *g_ax + PID_FAC[2]*((wanted_pitch - *g_ax) - old_error_pitch);

}

void PID_cal(float *PID_var, float *PID_FAC, uint8_t pry){//pitch = 1, rool = 2, yaw = 3
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	71fb      	strb	r3, [r7, #7]
	switch(pry){
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	f200 8270 	bhi.w	8003f3c <PID_cal+0x4f8>
 8003a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <PID_cal+0x20>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	08003a7d 	.word	0x08003a7d
 8003a68:	08003b57 	.word	0x08003b57
 8003a6c:	08003c31 	.word	0x08003c31
 8003a70:	08003d51 	.word	0x08003d51
 8003a74:	08003df5 	.word	0x08003df5
 8003a78:	08003e99 	.word	0x08003e99
		case 1://pitch

			*PID_var = PID_FAC[0]*(wanted_pitch - now_pitch);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	ed93 7a00 	vldr	s14, [r3]
 8003a82:	4ba2      	ldr	r3, [pc, #648]	@ (8003d0c <PID_cal+0x2c8>)
 8003a84:	edd3 6a00 	vldr	s13, [r3]
 8003a88:	4ba1      	ldr	r3, [pc, #644]	@ (8003d10 <PID_cal+0x2cc>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_pitch*looptime;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	ed93 7a00 	vldr	s14, [r3]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	edd3 6a00 	vldr	s13, [r3]
 8003aaa:	4b9a      	ldr	r3, [pc, #616]	@ (8003d14 <PID_cal+0x2d0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003aba:	4b97      	ldr	r3, [pc, #604]	@ (8003d18 <PID_cal+0x2d4>)
 8003abc:	edd3 7a00 	vldr	s15, [r3]
 8003ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_pitch - now_pitch) - old_error_pitch);//policzenie częsci D
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	ed93 7a00 	vldr	s14, [r3]
 8003ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8003d0c <PID_cal+0x2c8>)
 8003ad8:	edd3 6a00 	vldr	s13, [r3]
 8003adc:	4b8c      	ldr	r3, [pc, #560]	@ (8003d10 <PID_cal+0x2cc>)
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8003d1c <PID_cal+0x2d8>)
 8003ae8:	edd3 7a00 	vldr	s15, [r3]
 8003aec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	330c      	adds	r3, #12
 8003af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af8:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	3310      	adds	r3, #16
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	68d2      	ldr	r2, [r2, #12]
 8003b04:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	ed93 7a00 	vldr	s14, [r3]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	edc3 7a00 	vstr	s15, [r3]

				if(*PID_var > 400){//PID_var jest w o/s, jezeli bendzei chcailo sie obracac szybciej niz.. przekroczy zakres pomiarowy akcelerometru
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	edd3 7a00 	vldr	s15, [r3]
 8003b24:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8003d20 <PID_cal+0x2dc>
 8003b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b30:	dd02      	ble.n	8003b38 <PID_cal+0xf4>
					*PID_var = 400;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a7b      	ldr	r2, [pc, #492]	@ (8003d24 <PID_cal+0x2e0>)
 8003b36:	601a      	str	r2, [r3, #0]
				}
				if(*PID_var < -400){
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	edd3 7a00 	vldr	s15, [r3]
 8003b3e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003d28 <PID_cal+0x2e4>
 8003b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4a:	d400      	bmi.n	8003b4e <PID_cal+0x10a>
					*PID_var = -400;
				}
			break;
 8003b4c:	e1f7      	b.n	8003f3e <PID_cal+0x4fa>
					*PID_var = -400;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a76      	ldr	r2, [pc, #472]	@ (8003d2c <PID_cal+0x2e8>)
 8003b52:	601a      	str	r2, [r3, #0]
			break;
 8003b54:	e1f3      	b.n	8003f3e <PID_cal+0x4fa>

		case 2://rool

			*PID_var = PID_FAC[0]*(wanted_rool - now_rool);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	ed93 7a00 	vldr	s14, [r3]
 8003b5c:	4b74      	ldr	r3, [pc, #464]	@ (8003d30 <PID_cal+0x2ec>)
 8003b5e:	edd3 6a00 	vldr	s13, [r3]
 8003b62:	4b74      	ldr	r3, [pc, #464]	@ (8003d34 <PID_cal+0x2f0>)
 8003b64:	edd3 7a00 	vldr	s15, [r3]
 8003b68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_rool*looptime;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	ed93 7a00 	vldr	s14, [r3]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	edd3 6a00 	vldr	s13, [r3]
 8003b84:	4b6c      	ldr	r3, [pc, #432]	@ (8003d38 <PID_cal+0x2f4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b94:	4b60      	ldr	r3, [pc, #384]	@ (8003d18 <PID_cal+0x2d4>)
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((wanted_rool - now_rool) - old_error_rool);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	3308      	adds	r3, #8
 8003bac:	ed93 7a00 	vldr	s14, [r3]
 8003bb0:	4b5f      	ldr	r3, [pc, #380]	@ (8003d30 <PID_cal+0x2ec>)
 8003bb2:	edd3 6a00 	vldr	s13, [r3]
 8003bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d34 <PID_cal+0x2f0>)
 8003bb8:	edd3 7a00 	vldr	s15, [r3]
 8003bbc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d3c <PID_cal+0x2f8>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	330c      	adds	r3, #12
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3310      	adds	r3, #16
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	68d2      	ldr	r2, [r2, #12]
 8003bde:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	ed93 7a00 	vldr	s14, [r3]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	330c      	adds	r3, #12
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	edc3 7a00 	vstr	s15, [r3]

			if(*PID_var > 400){
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	edd3 7a00 	vldr	s15, [r3]
 8003bfe:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003d20 <PID_cal+0x2dc>
 8003c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0a:	dd02      	ble.n	8003c12 <PID_cal+0x1ce>
				*PID_var = 400;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a45      	ldr	r2, [pc, #276]	@ (8003d24 <PID_cal+0x2e0>)
 8003c10:	601a      	str	r2, [r3, #0]
			}
			if(*PID_var < -400){
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	edd3 7a00 	vldr	s15, [r3]
 8003c18:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003d28 <PID_cal+0x2e4>
 8003c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c24:	d400      	bmi.n	8003c28 <PID_cal+0x1e4>
				*PID_var = -400;
			}
			break;
 8003c26:	e18a      	b.n	8003f3e <PID_cal+0x4fa>
				*PID_var = -400;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a40      	ldr	r2, [pc, #256]	@ (8003d2c <PID_cal+0x2e8>)
 8003c2c:	601a      	str	r2, [r3, #0]
			break;
 8003c2e:	e186      	b.n	8003f3e <PID_cal+0x4fa>

		case 3:

			*PID_var = PID_FAC[0]*(wanted_yaw - now_yaw);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	ed93 7a00 	vldr	s14, [r3]
 8003c36:	4b42      	ldr	r3, [pc, #264]	@ (8003d40 <PID_cal+0x2fc>)
 8003c38:	edd3 6a00 	vldr	s13, [r3]
 8003c3c:	4b41      	ldr	r3, [pc, #260]	@ (8003d44 <PID_cal+0x300>)
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_yaw*looptime;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	ed93 7a00 	vldr	s14, [r3]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	edd3 6a00 	vldr	s13, [r3]
 8003c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d48 <PID_cal+0x304>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d18 <PID_cal+0x2d4>)
 8003c70:	edd3 7a00 	vldr	s15, [r3]
 8003c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((wanted_yaw - now_yaw) - old_error_yaw);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	3308      	adds	r3, #8
 8003c86:	ed93 7a00 	vldr	s14, [r3]
 8003c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d40 <PID_cal+0x2fc>)
 8003c8c:	edd3 6a00 	vldr	s13, [r3]
 8003c90:	4b2c      	ldr	r3, [pc, #176]	@ (8003d44 <PID_cal+0x300>)
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003d4c <PID_cal+0x308>)
 8003c9c:	edd3 7a00 	vldr	s15, [r3]
 8003ca0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cac:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain * looptime) / (1 + (FDP_D_Gain * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	3310      	adds	r3, #16
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	68d2      	ldr	r2, [r2, #12]
 8003cb8:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	ed93 7a00 	vldr	s14, [r3]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	edd3 7a00 	vldr	s15, [r3]
 8003cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	edc3 7a00 	vstr	s15, [r3]

			if(*PID_var > 400){
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003d20 <PID_cal+0x2dc>
 8003cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce4:	dd02      	ble.n	8003cec <PID_cal+0x2a8>
				*PID_var = 400;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8003d24 <PID_cal+0x2e0>)
 8003cea:	601a      	str	r2, [r3, #0]
			}
			if(*PID_var < -400){
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	edd3 7a00 	vldr	s15, [r3]
 8003cf2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003d28 <PID_cal+0x2e4>
 8003cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfe:	d400      	bmi.n	8003d02 <PID_cal+0x2be>
				*PID_var = -400;
			}
			break;
 8003d00:	e11d      	b.n	8003f3e <PID_cal+0x4fa>
				*PID_var = -400;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4a09      	ldr	r2, [pc, #36]	@ (8003d2c <PID_cal+0x2e8>)
 8003d06:	601a      	str	r2, [r3, #0]
			break;
 8003d08:	e119      	b.n	8003f3e <PID_cal+0x4fa>
 8003d0a:	bf00      	nop
 8003d0c:	00004050 	.word	0x00004050
 8003d10:	00004060 	.word	0x00004060
 8003d14:	00004084 	.word	0x00004084
 8003d18:	0801e374 	.word	0x0801e374
 8003d1c:	0000406c 	.word	0x0000406c
 8003d20:	43c80000 	.word	0x43c80000
 8003d24:	43c80000 	.word	0x43c80000
 8003d28:	c3c80000 	.word	0xc3c80000
 8003d2c:	c3c80000 	.word	0xc3c80000
 8003d30:	00004054 	.word	0x00004054
 8003d34:	00004064 	.word	0x00004064
 8003d38:	00004088 	.word	0x00004088
 8003d3c:	00004070 	.word	0x00004070
 8003d40:	00004058 	.word	0x00004058
 8003d44:	00004068 	.word	0x00004068
 8003d48:	0000408c 	.word	0x0000408c
 8003d4c:	00004074 	.word	0x00004074

		case 4:// angular rates pitch

			*PID_var = PID_FAC[0]*(pid_pitch - gx);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	ed93 7a00 	vldr	s14, [r3]
 8003d56:	4b7d      	ldr	r3, [pc, #500]	@ (8003f4c <PID_cal+0x508>)
 8003d58:	edd3 6a00 	vldr	s13, [r3]
 8003d5c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f50 <PID_cal+0x50c>)
 8003d5e:	edd3 7a00 	vldr	s15, [r3]
 8003d62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_pitch*looptime;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	ed93 7a00 	vldr	s14, [r3]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	edd3 6a00 	vldr	s13, [r3]
 8003d7e:	4b75      	ldr	r3, [pc, #468]	@ (8003f54 <PID_cal+0x510>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d8e:	4b72      	ldr	r3, [pc, #456]	@ (8003f58 <PID_cal+0x514>)
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	edc3 7a00 	vstr	s15, [r3]


			PID_FAC[3] = PID_FAC[2]*((pid_pitch - gx) - old_error_angular_rate_pitch);//policzenie częsci D
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3308      	adds	r3, #8
 8003da6:	ed93 7a00 	vldr	s14, [r3]
 8003daa:	4b68      	ldr	r3, [pc, #416]	@ (8003f4c <PID_cal+0x508>)
 8003dac:	edd3 6a00 	vldr	s13, [r3]
 8003db0:	4b67      	ldr	r3, [pc, #412]	@ (8003f50 <PID_cal+0x50c>)
 8003db2:	edd3 7a00 	vldr	s15, [r3]
 8003db6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003dba:	4b68      	ldr	r3, [pc, #416]	@ (8003f5c <PID_cal+0x518>)
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dcc:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3310      	adds	r3, #16
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	68d2      	ldr	r2, [r2, #12]
 8003dd8:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	ed93 7a00 	vldr	s14, [r3]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	330c      	adds	r3, #12
 8003de4:	edd3 7a00 	vldr	s15, [r3]
 8003de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	edc3 7a00 	vstr	s15, [r3]

			break;
 8003df2:	e0a4      	b.n	8003f3e <PID_cal+0x4fa>

		case 5:// angular rates rool

			*PID_var = PID_FAC[0]*(pid_rool - gy);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	ed93 7a00 	vldr	s14, [r3]
 8003dfa:	4b59      	ldr	r3, [pc, #356]	@ (8003f60 <PID_cal+0x51c>)
 8003dfc:	edd3 6a00 	vldr	s13, [r3]
 8003e00:	4b58      	ldr	r3, [pc, #352]	@ (8003f64 <PID_cal+0x520>)
 8003e02:	edd3 7a00 	vldr	s15, [r3]
 8003e06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_rool*looptime;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	ed93 7a00 	vldr	s14, [r3]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	edd3 6a00 	vldr	s13, [r3]
 8003e22:	4b51      	ldr	r3, [pc, #324]	@ (8003f68 <PID_cal+0x524>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e32:	4b49      	ldr	r3, [pc, #292]	@ (8003f58 <PID_cal+0x514>)
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] =  PID_FAC[2]*((pid_rool - gy) - old_error_angular_rate_rool);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3308      	adds	r3, #8
 8003e4a:	ed93 7a00 	vldr	s14, [r3]
 8003e4e:	4b44      	ldr	r3, [pc, #272]	@ (8003f60 <PID_cal+0x51c>)
 8003e50:	edd3 6a00 	vldr	s13, [r3]
 8003e54:	4b43      	ldr	r3, [pc, #268]	@ (8003f64 <PID_cal+0x520>)
 8003e56:	edd3 7a00 	vldr	s15, [r3]
 8003e5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e5e:	4b43      	ldr	r3, [pc, #268]	@ (8003f6c <PID_cal+0x528>)
 8003e60:	edd3 7a00 	vldr	s15, [r3]
 8003e64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e70:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	3310      	adds	r3, #16
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	68d2      	ldr	r2, [r2, #12]
 8003e7c:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	ed93 7a00 	vldr	s14, [r3]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	330c      	adds	r3, #12
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003e96:	e052      	b.n	8003f3e <PID_cal+0x4fa>

		case 6:// angular rates yaw

			*PID_var = PID_FAC[0]*(pid_yaw - gz);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	ed93 7a00 	vldr	s14, [r3]
 8003e9e:	4b34      	ldr	r3, [pc, #208]	@ (8003f70 <PID_cal+0x52c>)
 8003ea0:	edd3 6a00 	vldr	s13, [r3]
 8003ea4:	4b33      	ldr	r3, [pc, #204]	@ (8003f74 <PID_cal+0x530>)
 8003ea6:	edd3 7a00 	vldr	s15, [r3]
 8003eaa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	edc3 7a00 	vstr	s15, [r3]

			*PID_var = *PID_var + PID_FAC[1]*error_sum_angular_rate_yaw*looptime;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	ed93 7a00 	vldr	s14, [r3]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	edd3 6a00 	vldr	s13, [r3]
 8003ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f78 <PID_cal+0x534>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ed6:	4b20      	ldr	r3, [pc, #128]	@ (8003f58 <PID_cal+0x514>)
 8003ed8:	edd3 7a00 	vldr	s15, [r3]
 8003edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	edc3 7a00 	vstr	s15, [r3]

			PID_FAC[3] = PID_FAC[2]*((pid_yaw - gz) - old_error_angular_rate_yaw);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	3308      	adds	r3, #8
 8003eee:	ed93 7a00 	vldr	s14, [r3]
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f70 <PID_cal+0x52c>)
 8003ef4:	edd3 6a00 	vldr	s13, [r3]
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <PID_cal+0x530>)
 8003efa:	edd3 7a00 	vldr	s15, [r3]
 8003efe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f02:	4b1e      	ldr	r3, [pc, #120]	@ (8003f7c <PID_cal+0x538>)
 8003f04:	edd3 7a00 	vldr	s15, [r3]
 8003f08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f14:	edc3 7a00 	vstr	s15, [r3]

			//FDP
			//PID_FAC[4] = (PID_FAC[4] * (FDP_D_Gain_AR * looptime) / (1 + (FDP_D_Gain_AR * looptime))) + (PID_FAC[5] * (1 / (1 + (FDP_D_Gain_AR * looptime))));
			PID_FAC[4] = PID_FAC[3];//old d_fac
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	3310      	adds	r3, #16
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	68d2      	ldr	r2, [r2, #12]
 8003f20:	601a      	str	r2, [r3, #0]

			*PID_var = *PID_var + PID_FAC[3];
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	ed93 7a00 	vldr	s14, [r3]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	edd3 7a00 	vldr	s15, [r3]
 8003f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003f3a:	e000      	b.n	8003f3e <PID_cal+0x4fa>
		default:
			break;
 8003f3c:	bf00      	nop
	}
}
 8003f3e:	bf00      	nop
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	0000409c 	.word	0x0000409c
 8003f50:	0000000c 	.word	0x0000000c
 8003f54:	00004090 	.word	0x00004090
 8003f58:	0801e374 	.word	0x0801e374
 8003f5c:	00004078 	.word	0x00004078
 8003f60:	000040a4 	.word	0x000040a4
 8003f64:	00000010 	.word	0x00000010
 8003f68:	00004094 	.word	0x00004094
 8003f6c:	0000407c 	.word	0x0000407c
 8003f70:	000040a0 	.word	0x000040a0
 8003f74:	00000014 	.word	0x00000014
 8003f78:	00004098 	.word	0x00004098
 8003f7c:	00004080 	.word	0x00004080

08003f80 <Get_batteryvalue>:

void Get_batteryvalue(void){
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
	 * 10V musi byc czyli 2,7027V
	 *	2,7027V to 3353
	 *	3400
	*/

	MYDRON.batterysize = (analogmess - 3353)/7.42;
 8003f84:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff8 <Get_batteryvalue+0x78>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f6a3 5319 	subw	r3, r3, #3353	@ 0xd19
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8003f94:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8003ff0 <Get_batteryvalue+0x70>
 8003f98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003f9c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003fa0:	ee17 3a90 	vmov	r3, s15
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fa8:	801a      	strh	r2, [r3, #0]
	if(MYDRON.batterysize >= 100){
 8003faa:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	2b63      	cmp	r3, #99	@ 0x63
 8003fb0:	d902      	bls.n	8003fb8 <Get_batteryvalue+0x38>
		MYDRON.batterysize = 100;
 8003fb2:	4b12      	ldr	r3, [pc, #72]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fb4:	2264      	movs	r2, #100	@ 0x64
 8003fb6:	801a      	strh	r2, [r3, #0]
	}

	if(MYDRON.batterysize < 25){
 8003fb8:	4b10      	ldr	r3, [pc, #64]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	2b18      	cmp	r3, #24
 8003fbe:	d802      	bhi.n	8003fc6 <Get_batteryvalue+0x46>
		MYDRON.dron_status.Battery = DRON_BATTERY_RUN_OUT;
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fc2:	2207      	movs	r2, #7
 8003fc4:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize <= 10){
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	2b0a      	cmp	r3, #10
 8003fcc:	d802      	bhi.n	8003fd4 <Get_batteryvalue+0x54>
		MYDRON.dron_status.Battery = DRON_BATTERY_CRIT_VAL;
 8003fce:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fd0:	2209      	movs	r2, #9
 8003fd2:	829a      	strh	r2, [r3, #20]
	}
	if(MYDRON.batterysize >= 25){
 8003fd4:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	2b18      	cmp	r3, #24
 8003fda:	d902      	bls.n	8003fe2 <Get_batteryvalue+0x62>
		MYDRON.dron_status.Battery = DRON_BATTERY_OK;
 8003fdc:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <Get_batteryvalue+0x7c>)
 8003fde:	2208      	movs	r2, #8
 8003fe0:	829a      	strh	r2, [r3, #20]
	}
}
 8003fe2:	bf00      	nop
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	f3af 8000 	nop.w
 8003ff0:	7ae147ae 	.word	0x7ae147ae
 8003ff4:	401dae14 	.word	0x401dae14
 8003ff8:	24000ed0 	.word	0x24000ed0
 8003ffc:	00000160 	.word	0x00000160

08004000 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8004004:	2200      	movs	r2, #0
 8004006:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800400a:	4802      	ldr	r0, [pc, #8]	@ (8004014 <SELECT+0x14>)
 800400c:	f009 ffd8 	bl	800dfc0 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}
 8004014:	58020c00 	.word	0x58020c00

08004018 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800401c:	2201      	movs	r2, #1
 800401e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004022:	4802      	ldr	r0, [pc, #8]	@ (800402c <DESELECT+0x14>)
 8004024:	f009 ffcc 	bl	800dfc0 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}
 800402c:	58020c00 	.word	0x58020c00

08004030 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 800403a:	bf00      	nop
 800403c:	4b07      	ldr	r3, [pc, #28]	@ (800405c <SPI_TxByte+0x2c>)
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004044:	2b20      	cmp	r3, #32
 8004046:	d1f9      	bne.n	800403c <SPI_TxByte+0xc>


	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8004048:	1df9      	adds	r1, r7, #7
 800404a:	2364      	movs	r3, #100	@ 0x64
 800404c:	2201      	movs	r2, #1
 800404e:	4804      	ldr	r0, [pc, #16]	@ (8004060 <SPI_TxByte+0x30>)
 8004050:	f010 f912 	bl	8014278 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(HSPI_SDCARD, &data, 1);
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40020010 	.word	0x40020010
 8004060:	240001ec 	.word	0x240001ec

08004064 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));//czekanie na zakonczenie tramnsmisji DMA?
	while((DMA1_Stream0->FCR&0x38) != 32){}
 8004070:	bf00      	nop
 8004072:	4b08      	ldr	r3, [pc, #32]	@ (8004094 <SPI_TxBuffer+0x30>)
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800407a:	2b20      	cmp	r3, #32
 800407c:	d1f9      	bne.n	8004072 <SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
	HAL_SPI_Transmit_DMA(HSPI_SDCARD, buffer, len);
 800407e:	887b      	ldrh	r3, [r7, #2]
 8004080:	461a      	mov	r2, r3
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4804      	ldr	r0, [pc, #16]	@ (8004098 <SPI_TxBuffer+0x34>)
 8004086:	f011 f891 	bl	80151ac <HAL_SPI_Transmit_DMA>
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40020010 	.word	0x40020010
 8004098:	240001ec 	.word	0x240001ec

0800409c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80040a2:	23ff      	movs	r3, #255	@ 0xff
 80040a4:	71fb      	strb	r3, [r7, #7]

	//while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	while((DMA1_Stream0->FCR&0x38) != 32){}
 80040a6:	bf00      	nop
 80040a8:	4b09      	ldr	r3, [pc, #36]	@ (80040d0 <SPI_RxByte+0x34>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d1f9      	bne.n	80040a8 <SPI_RxByte+0xc>

	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80040b4:	1dba      	adds	r2, r7, #6
 80040b6:	1df9      	adds	r1, r7, #7
 80040b8:	2364      	movs	r3, #100	@ 0x64
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2301      	movs	r3, #1
 80040be:	4805      	ldr	r0, [pc, #20]	@ (80040d4 <SPI_RxByte+0x38>)
 80040c0:	f010 fd3a 	bl	8014b38 <HAL_SPI_TransmitReceive>

	return data;
 80040c4:	79bb      	ldrb	r3, [r7, #6]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40020010 	.word	0x40020010
 80040d4:	240001ec 	.word	0x240001ec

080040d8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80040e0:	f7ff ffdc 	bl	800409c <SPI_RxByte>
 80040e4:	4603      	mov	r3, r0
 80040e6:	461a      	mov	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	701a      	strb	r2, [r3, #0]
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80040fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004124 <SD_ReadyWait+0x30>)
 80040fc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004100:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8004102:	f7ff ffcb 	bl	800409c <SPI_RxByte>
 8004106:	4603      	mov	r3, r0
 8004108:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	2bff      	cmp	r3, #255	@ 0xff
 800410e:	d004      	beq.n	800411a <SD_ReadyWait+0x26>
 8004110:	4b04      	ldr	r3, [pc, #16]	@ (8004124 <SD_ReadyWait+0x30>)
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f3      	bne.n	8004102 <SD_ReadyWait+0xe>

	return res;
 800411a:	79fb      	ldrb	r3, [r7, #7]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	2400037c 	.word	0x2400037c

08004128 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800412e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8004132:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8004134:	f7ff ff70 	bl	8004018 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	e005      	b.n	800414a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800413e:	20ff      	movs	r0, #255	@ 0xff
 8004140:	f7ff ff76 	bl	8004030 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3301      	adds	r3, #1
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b09      	cmp	r3, #9
 800414e:	ddf6      	ble.n	800413e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8004150:	f7ff ff56 	bl	8004000 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8004154:	2340      	movs	r3, #64	@ 0x40
 8004156:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004168:	2395      	movs	r3, #149	@ 0x95
 800416a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800416c:	463b      	mov	r3, r7
 800416e:	2106      	movs	r1, #6
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff77 	bl	8004064 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8004176:	e002      	b.n	800417e <SD_PowerOn+0x56>
	{
		cnt--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3b01      	subs	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800417e:	f7ff ff8d 	bl	800409c <SPI_RxByte>
 8004182:	4603      	mov	r3, r0
 8004184:	2b01      	cmp	r3, #1
 8004186:	d002      	beq.n	800418e <SD_PowerOn+0x66>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f4      	bne.n	8004178 <SD_PowerOn+0x50>
	}

	DESELECT();
 800418e:	f7ff ff43 	bl	8004018 <DESELECT>
	SPI_TxByte(0XFF);
 8004192:	20ff      	movs	r0, #255	@ 0xff
 8004194:	f7ff ff4c 	bl	8004030 <SPI_TxByte>

	PowerFlag = 1;
 8004198:	4b03      	ldr	r3, [pc, #12]	@ (80041a8 <SD_PowerOn+0x80>)
 800419a:	2201      	movs	r2, #1
 800419c:	701a      	strb	r2, [r3, #0]
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	24000195 	.word	0x24000195

080041ac <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80041b0:	4b03      	ldr	r3, [pc, #12]	@ (80041c0 <SD_PowerOff+0x14>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	24000195 	.word	0x24000195

080041c4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80041c8:	4b03      	ldr	r3, [pc, #12]	@ (80041d8 <SD_CheckPower+0x14>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	24000195 	.word	0x24000195

080041dc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 10;
 80041e6:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <SD_RxDataBlock+0x5c>)
 80041e8:	220a      	movs	r2, #10
 80041ea:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80041ec:	f7ff ff56 	bl	800409c <SPI_RxByte>
 80041f0:	4603      	mov	r3, r0
 80041f2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	2bff      	cmp	r3, #255	@ 0xff
 80041f8:	d104      	bne.n	8004204 <SD_RxDataBlock+0x28>
 80041fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004238 <SD_RxDataBlock+0x5c>)
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f3      	bne.n	80041ec <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2bfe      	cmp	r3, #254	@ 0xfe
 8004208:	d001      	beq.n	800420e <SD_RxDataBlock+0x32>
 800420a:	2300      	movs	r3, #0
 800420c:	e00f      	b.n	800422e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff ff5f 	bl	80040d8 <SPI_RxBytePtr>
	} while(len--);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	1e5a      	subs	r2, r3, #1
 800421e:	603a      	str	r2, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f4      	bne.n	800420e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8004224:	f7ff ff3a 	bl	800409c <SPI_RxByte>
	SPI_RxByte();
 8004228:	f7ff ff38 	bl	800409c <SPI_RxByte>

	return TRUE;
 800422c:	2301      	movs	r3, #1
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	24000378 	.word	0x24000378

0800423c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800424c:	f7ff ff52 	bl	80040f4 <SD_ReadyWait>
 8004250:	4603      	mov	r3, r0
 8004252:	2bff      	cmp	r3, #255	@ 0xff
 8004254:	d001      	beq.n	800425a <SD_TxDataBlock+0x1e>
 8004256:	2300      	movs	r3, #0
 8004258:	e02f      	b.n	80042ba <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff fee7 	bl	8004030 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	2bfd      	cmp	r3, #253	@ 0xfd
 8004266:	d020      	beq.n	80042aa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004268:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff fef9 	bl	8004064 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8004272:	f7ff ff13 	bl	800409c <SPI_RxByte>
		SPI_RxByte();
 8004276:	f7ff ff11 	bl	800409c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800427a:	e00b      	b.n	8004294 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800427c:	f7ff ff0e 	bl	800409c <SPI_RxByte>
 8004280:	4603      	mov	r3, r0
 8004282:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	f003 031f 	and.w	r3, r3, #31
 800428a:	2b05      	cmp	r3, #5
 800428c:	d006      	beq.n	800429c <SD_TxDataBlock+0x60>
			i++;
 800428e:	7bbb      	ldrb	r3, [r7, #14]
 8004290:	3301      	adds	r3, #1
 8004292:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8004294:	7bbb      	ldrb	r3, [r7, #14]
 8004296:	2b40      	cmp	r3, #64	@ 0x40
 8004298:	d9f0      	bls.n	800427c <SD_TxDataBlock+0x40>
 800429a:	e000      	b.n	800429e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800429c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800429e:	bf00      	nop
 80042a0:	f7ff fefc 	bl	800409c <SPI_RxByte>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0fa      	beq.n	80042a0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d101      	bne.n	80042b8 <SD_TxDataBlock+0x7c>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <SD_TxDataBlock+0x7e>

	return FALSE;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	4603      	mov	r3, r0
 80042ca:	6039      	str	r1, [r7, #0]
 80042cc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80042ce:	f7ff ff11 	bl	80040f4 <SD_ReadyWait>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2bff      	cmp	r3, #255	@ 0xff
 80042d6:	d001      	beq.n	80042dc <SD_SendCmd+0x1a>
 80042d8:	23ff      	movs	r3, #255	@ 0xff
 80042da:	e042      	b.n	8004362 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fea6 	bl	8004030 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	0e1b      	lsrs	r3, r3, #24
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fea0 	bl	8004030 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	0c1b      	lsrs	r3, r3, #16
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fe9a 	bl	8004030 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	b2db      	uxtb	r3, r3
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fe94 	bl	8004030 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fe8f 	bl	8004030 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b40      	cmp	r3, #64	@ 0x40
 8004316:	d102      	bne.n	800431e <SD_SendCmd+0x5c>
 8004318:	2395      	movs	r3, #149	@ 0x95
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e007      	b.n	800432e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	2b48      	cmp	r3, #72	@ 0x48
 8004322:	d102      	bne.n	800432a <SD_SendCmd+0x68>
 8004324:	2387      	movs	r3, #135	@ 0x87
 8004326:	73fb      	strb	r3, [r7, #15]
 8004328:	e001      	b.n	800432e <SD_SendCmd+0x6c>
	else crc = 1;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fe7d 	bl	8004030 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	2b4c      	cmp	r3, #76	@ 0x4c
 800433a:	d101      	bne.n	8004340 <SD_SendCmd+0x7e>
 800433c:	f7ff feae 	bl	800409c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004340:	230a      	movs	r3, #10
 8004342:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8004344:	f7ff feaa 	bl	800409c <SPI_RxByte>
 8004348:	4603      	mov	r3, r0
 800434a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800434c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004350:	2b00      	cmp	r3, #0
 8004352:	da05      	bge.n	8004360 <SD_SendCmd+0x9e>
 8004354:	7bbb      	ldrb	r3, [r7, #14]
 8004356:	3b01      	subs	r3, #1
 8004358:	73bb      	strb	r3, [r7, #14]
 800435a:	7bbb      	ldrb	r3, [r7, #14]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f1      	bne.n	8004344 <SD_SendCmd+0x82>

	return res;
 8004360:	7b7b      	ldrb	r3, [r7, #13]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <SD_disk_initialize+0x14>
 800437c:	2301      	movs	r3, #1
 800437e:	e0d6      	b.n	800452e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004380:	4b6d      	ldr	r3, [pc, #436]	@ (8004538 <SD_disk_initialize+0x1cc>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <SD_disk_initialize+0x2a>
 800438e:	4b6a      	ldr	r3, [pc, #424]	@ (8004538 <SD_disk_initialize+0x1cc>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	e0cb      	b.n	800452e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8004396:	f7ff fec7 	bl	8004128 <SD_PowerOn>

	/* slave select */
	SELECT();
 800439a:	f7ff fe31 	bl	8004000 <SELECT>

	/* check disk type */
	type = 0;
 800439e:	2300      	movs	r3, #0
 80043a0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80043a2:	2100      	movs	r1, #0
 80043a4:	2040      	movs	r0, #64	@ 0x40
 80043a6:	f7ff ff8c 	bl	80042c2 <SD_SendCmd>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f040 80a6 	bne.w	80044fe <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80043b2:	4b62      	ldr	r3, [pc, #392]	@ (800453c <SD_disk_initialize+0x1d0>)
 80043b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043b8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80043ba:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80043be:	2048      	movs	r0, #72	@ 0x48
 80043c0:	f7ff ff7f 	bl	80042c2 <SD_SendCmd>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d158      	bne.n	800447c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
 80043ce:	e00c      	b.n	80043ea <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80043d0:	7bfc      	ldrb	r4, [r7, #15]
 80043d2:	f7ff fe63 	bl	800409c <SPI_RxByte>
 80043d6:	4603      	mov	r3, r0
 80043d8:	461a      	mov	r2, r3
 80043da:	f104 0310 	add.w	r3, r4, #16
 80043de:	443b      	add	r3, r7
 80043e0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	3301      	adds	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d9ef      	bls.n	80043d0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80043f0:	7abb      	ldrb	r3, [r7, #10]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	f040 8083 	bne.w	80044fe <SD_disk_initialize+0x192>
 80043f8:	7afb      	ldrb	r3, [r7, #11]
 80043fa:	2baa      	cmp	r3, #170	@ 0xaa
 80043fc:	d17f      	bne.n	80044fe <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80043fe:	2100      	movs	r1, #0
 8004400:	2077      	movs	r0, #119	@ 0x77
 8004402:	f7ff ff5e 	bl	80042c2 <SD_SendCmd>
 8004406:	4603      	mov	r3, r0
 8004408:	2b01      	cmp	r3, #1
 800440a:	d807      	bhi.n	800441c <SD_disk_initialize+0xb0>
 800440c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004410:	2069      	movs	r0, #105	@ 0x69
 8004412:	f7ff ff56 	bl	80042c2 <SD_SendCmd>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800441c:	4b47      	ldr	r3, [pc, #284]	@ (800453c <SD_disk_initialize+0x1d0>)
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1eb      	bne.n	80043fe <SD_disk_initialize+0x92>
 8004426:	e000      	b.n	800442a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004428:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800442a:	4b44      	ldr	r3, [pc, #272]	@ (800453c <SD_disk_initialize+0x1d0>)
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d064      	beq.n	80044fe <SD_disk_initialize+0x192>
 8004434:	2100      	movs	r1, #0
 8004436:	207a      	movs	r0, #122	@ 0x7a
 8004438:	f7ff ff43 	bl	80042c2 <SD_SendCmd>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d15d      	bne.n	80044fe <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
 8004446:	e00c      	b.n	8004462 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004448:	7bfc      	ldrb	r4, [r7, #15]
 800444a:	f7ff fe27 	bl	800409c <SPI_RxByte>
 800444e:	4603      	mov	r3, r0
 8004450:	461a      	mov	r2, r3
 8004452:	f104 0310 	add.w	r3, r4, #16
 8004456:	443b      	add	r3, r7
 8004458:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	3301      	adds	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d9ef      	bls.n	8004448 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004468:	7a3b      	ldrb	r3, [r7, #8]
 800446a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <SD_disk_initialize+0x10a>
 8004472:	230c      	movs	r3, #12
 8004474:	e000      	b.n	8004478 <SD_disk_initialize+0x10c>
 8004476:	2304      	movs	r3, #4
 8004478:	73bb      	strb	r3, [r7, #14]
 800447a:	e040      	b.n	80044fe <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800447c:	2100      	movs	r1, #0
 800447e:	2077      	movs	r0, #119	@ 0x77
 8004480:	f7ff ff1f 	bl	80042c2 <SD_SendCmd>
 8004484:	4603      	mov	r3, r0
 8004486:	2b01      	cmp	r3, #1
 8004488:	d808      	bhi.n	800449c <SD_disk_initialize+0x130>
 800448a:	2100      	movs	r1, #0
 800448c:	2069      	movs	r0, #105	@ 0x69
 800448e:	f7ff ff18 	bl	80042c2 <SD_SendCmd>
 8004492:	4603      	mov	r3, r0
 8004494:	2b01      	cmp	r3, #1
 8004496:	d801      	bhi.n	800449c <SD_disk_initialize+0x130>
 8004498:	2302      	movs	r3, #2
 800449a:	e000      	b.n	800449e <SD_disk_initialize+0x132>
 800449c:	2301      	movs	r3, #1
 800449e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80044a0:	7bbb      	ldrb	r3, [r7, #14]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d10e      	bne.n	80044c4 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80044a6:	2100      	movs	r1, #0
 80044a8:	2077      	movs	r0, #119	@ 0x77
 80044aa:	f7ff ff0a 	bl	80042c2 <SD_SendCmd>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d80e      	bhi.n	80044d2 <SD_disk_initialize+0x166>
 80044b4:	2100      	movs	r1, #0
 80044b6:	2069      	movs	r0, #105	@ 0x69
 80044b8:	f7ff ff03 	bl	80042c2 <SD_SendCmd>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d107      	bne.n	80044d2 <SD_disk_initialize+0x166>
 80044c2:	e00d      	b.n	80044e0 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80044c4:	2100      	movs	r1, #0
 80044c6:	2041      	movs	r0, #65	@ 0x41
 80044c8:	f7ff fefb 	bl	80042c2 <SD_SendCmd>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <SD_disk_initialize+0x1d0>)
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e1      	bne.n	80044a0 <SD_disk_initialize+0x134>
 80044dc:	e000      	b.n	80044e0 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80044de:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80044e0:	4b16      	ldr	r3, [pc, #88]	@ (800453c <SD_disk_initialize+0x1d0>)
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <SD_disk_initialize+0x18e>
 80044ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044ee:	2050      	movs	r0, #80	@ 0x50
 80044f0:	f7ff fee7 	bl	80042c2 <SD_SendCmd>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <SD_disk_initialize+0x192>
 80044fa:	2300      	movs	r3, #0
 80044fc:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80044fe:	4a10      	ldr	r2, [pc, #64]	@ (8004540 <SD_disk_initialize+0x1d4>)
 8004500:	7bbb      	ldrb	r3, [r7, #14]
 8004502:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8004504:	f7ff fd88 	bl	8004018 <DESELECT>
	SPI_RxByte();
 8004508:	f7ff fdc8 	bl	800409c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800450c:	7bbb      	ldrb	r3, [r7, #14]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8004512:	4b09      	ldr	r3, [pc, #36]	@ (8004538 <SD_disk_initialize+0x1cc>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4b06      	ldr	r3, [pc, #24]	@ (8004538 <SD_disk_initialize+0x1cc>)
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e001      	b.n	8004528 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8004524:	f7ff fe42 	bl	80041ac <SD_PowerOff>
	}

	return Stat;
 8004528:	4b03      	ldr	r3, [pc, #12]	@ (8004538 <SD_disk_initialize+0x1cc>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bd90      	pop	{r4, r7, pc}
 8004536:	bf00      	nop
 8004538:	24000000 	.word	0x24000000
 800453c:	24000378 	.word	0x24000378
 8004540:	24000194 	.word	0x24000194

08004544 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <SD_disk_status+0x14>
 8004554:	2301      	movs	r3, #1
 8004556:	e002      	b.n	800455e <SD_disk_status+0x1a>
	return Stat;
 8004558:	4b04      	ldr	r3, [pc, #16]	@ (800456c <SD_disk_status+0x28>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2db      	uxtb	r3, r3
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	24000000 	.word	0x24000000

08004570 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4603      	mov	r3, r0
 800457e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <SD_disk_read+0x1c>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <SD_disk_read+0x20>
 800458c:	2304      	movs	r3, #4
 800458e:	e051      	b.n	8004634 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004590:	4b2a      	ldr	r3, [pc, #168]	@ (800463c <SD_disk_read+0xcc>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <SD_disk_read+0x32>
 800459e:	2303      	movs	r3, #3
 80045a0:	e048      	b.n	8004634 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80045a2:	4b27      	ldr	r3, [pc, #156]	@ (8004640 <SD_disk_read+0xd0>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <SD_disk_read+0x44>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	025b      	lsls	r3, r3, #9
 80045b2:	607b      	str	r3, [r7, #4]

	SELECT();
 80045b4:	f7ff fd24 	bl	8004000 <SELECT>

	if (count == 1)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d111      	bne.n	80045e2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	2051      	movs	r0, #81	@ 0x51
 80045c2:	f7ff fe7e 	bl	80042c2 <SD_SendCmd>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d129      	bne.n	8004620 <SD_disk_read+0xb0>
 80045cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045d0:	68b8      	ldr	r0, [r7, #8]
 80045d2:	f7ff fe03 	bl	80041dc <SD_RxDataBlock>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d021      	beq.n	8004620 <SD_disk_read+0xb0>
 80045dc:	2300      	movs	r3, #0
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	e01e      	b.n	8004620 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	2052      	movs	r0, #82	@ 0x52
 80045e6:	f7ff fe6c 	bl	80042c2 <SD_SendCmd>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d117      	bne.n	8004620 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80045f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80045f4:	68b8      	ldr	r0, [r7, #8]
 80045f6:	f7ff fdf1 	bl	80041dc <SD_RxDataBlock>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <SD_disk_read+0xa6>
				buff += 512;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004606:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	3b01      	subs	r3, #1
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ed      	bne.n	80045f0 <SD_disk_read+0x80>
 8004614:	e000      	b.n	8004618 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8004616:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004618:	2100      	movs	r1, #0
 800461a:	204c      	movs	r0, #76	@ 0x4c
 800461c:	f7ff fe51 	bl	80042c2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004620:	f7ff fcfa 	bl	8004018 <DESELECT>
	SPI_RxByte();
 8004624:	f7ff fd3a 	bl	800409c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	24000000 	.word	0x24000000
 8004640:	24000194 	.word	0x24000194

08004644 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <SD_disk_write+0x1c>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <SD_disk_write+0x20>
 8004660:	2304      	movs	r3, #4
 8004662:	e06b      	b.n	800473c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004664:	4b37      	ldr	r3, [pc, #220]	@ (8004744 <SD_disk_write+0x100>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <SD_disk_write+0x32>
 8004672:	2303      	movs	r3, #3
 8004674:	e062      	b.n	800473c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004676:	4b33      	ldr	r3, [pc, #204]	@ (8004744 <SD_disk_write+0x100>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <SD_disk_write+0x44>
 8004684:	2302      	movs	r3, #2
 8004686:	e059      	b.n	800473c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004688:	4b2f      	ldr	r3, [pc, #188]	@ (8004748 <SD_disk_write+0x104>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d102      	bne.n	800469a <SD_disk_write+0x56>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	025b      	lsls	r3, r3, #9
 8004698:	607b      	str	r3, [r7, #4]

	SELECT();
 800469a:	f7ff fcb1 	bl	8004000 <SELECT>

	if (count == 1)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d110      	bne.n	80046c6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	2058      	movs	r0, #88	@ 0x58
 80046a8:	f7ff fe0b 	bl	80042c2 <SD_SendCmd>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d13a      	bne.n	8004728 <SD_disk_write+0xe4>
 80046b2:	21fe      	movs	r1, #254	@ 0xfe
 80046b4:	68b8      	ldr	r0, [r7, #8]
 80046b6:	f7ff fdc1 	bl	800423c <SD_TxDataBlock>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d033      	beq.n	8004728 <SD_disk_write+0xe4>
			count = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	e030      	b.n	8004728 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80046c6:	4b20      	ldr	r3, [pc, #128]	@ (8004748 <SD_disk_write+0x104>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80046d2:	2100      	movs	r1, #0
 80046d4:	2077      	movs	r0, #119	@ 0x77
 80046d6:	f7ff fdf4 	bl	80042c2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	2057      	movs	r0, #87	@ 0x57
 80046de:	f7ff fdf0 	bl	80042c2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	2059      	movs	r0, #89	@ 0x59
 80046e6:	f7ff fdec 	bl	80042c2 <SD_SendCmd>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d11b      	bne.n	8004728 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80046f0:	21fc      	movs	r1, #252	@ 0xfc
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f7ff fda2 	bl	800423c <SD_TxDataBlock>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <SD_disk_write+0xd0>
				buff += 512;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004704:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	3b01      	subs	r3, #1
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ee      	bne.n	80046f0 <SD_disk_write+0xac>
 8004712:	e000      	b.n	8004716 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004714:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004716:	21fd      	movs	r1, #253	@ 0xfd
 8004718:	2000      	movs	r0, #0
 800471a:	f7ff fd8f 	bl	800423c <SD_TxDataBlock>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <SD_disk_write+0xe4>
			{
				count = 1;
 8004724:	2301      	movs	r3, #1
 8004726:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004728:	f7ff fc76 	bl	8004018 <DESELECT>
	SPI_RxByte();
 800472c:	f7ff fcb6 	bl	800409c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	24000000 	.word	0x24000000
 8004748:	24000194 	.word	0x24000194

0800474c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800474c:	b590      	push	{r4, r7, lr}
 800474e:	b08b      	sub	sp, #44	@ 0x2c
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	603a      	str	r2, [r7, #0]
 8004756:	71fb      	strb	r3, [r7, #7]
 8004758:	460b      	mov	r3, r1
 800475a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <SD_disk_ioctl+0x1e>
 8004766:	2304      	movs	r3, #4
 8004768:	e113      	b.n	8004992 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8004770:	79bb      	ldrb	r3, [r7, #6]
 8004772:	2b05      	cmp	r3, #5
 8004774:	d124      	bne.n	80047c0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d012      	beq.n	80047a4 <SD_disk_ioctl+0x58>
 800477e:	2b02      	cmp	r3, #2
 8004780:	dc1a      	bgt.n	80047b8 <SD_disk_ioctl+0x6c>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <SD_disk_ioctl+0x40>
 8004786:	2b01      	cmp	r3, #1
 8004788:	d006      	beq.n	8004798 <SD_disk_ioctl+0x4c>
 800478a:	e015      	b.n	80047b8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800478c:	f7ff fd0e 	bl	80041ac <SD_PowerOff>
			res = RES_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004796:	e0fa      	b.n	800498e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8004798:	f7ff fcc6 	bl	8004128 <SD_PowerOn>
			res = RES_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80047a2:	e0f4      	b.n	800498e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	1c5c      	adds	r4, r3, #1
 80047a8:	f7ff fd0c 	bl	80041c4 <SD_CheckPower>
 80047ac:	4603      	mov	r3, r0
 80047ae:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80047b6:	e0ea      	b.n	800498e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80047b8:	2304      	movs	r3, #4
 80047ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80047be:	e0e6      	b.n	800498e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80047c0:	4b76      	ldr	r3, [pc, #472]	@ (800499c <SD_disk_ioctl+0x250>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <SD_disk_ioctl+0x86>
 80047ce:	2303      	movs	r3, #3
 80047d0:	e0df      	b.n	8004992 <SD_disk_ioctl+0x246>

		SELECT();
 80047d2:	f7ff fc15 	bl	8004000 <SELECT>

		switch (ctrl)
 80047d6:	79bb      	ldrb	r3, [r7, #6]
 80047d8:	2b0d      	cmp	r3, #13
 80047da:	f200 80c9 	bhi.w	8004970 <SD_disk_ioctl+0x224>
 80047de:	a201      	add	r2, pc, #4	@ (adr r2, 80047e4 <SD_disk_ioctl+0x98>)
 80047e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e4:	080048db 	.word	0x080048db
 80047e8:	0800481d 	.word	0x0800481d
 80047ec:	080048cb 	.word	0x080048cb
 80047f0:	08004971 	.word	0x08004971
 80047f4:	08004971 	.word	0x08004971
 80047f8:	08004971 	.word	0x08004971
 80047fc:	08004971 	.word	0x08004971
 8004800:	08004971 	.word	0x08004971
 8004804:	08004971 	.word	0x08004971
 8004808:	08004971 	.word	0x08004971
 800480c:	08004971 	.word	0x08004971
 8004810:	080048ed 	.word	0x080048ed
 8004814:	08004911 	.word	0x08004911
 8004818:	08004935 	.word	0x08004935
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800481c:	2100      	movs	r1, #0
 800481e:	2049      	movs	r0, #73	@ 0x49
 8004820:	f7ff fd4f 	bl	80042c2 <SD_SendCmd>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 80a6 	bne.w	8004978 <SD_disk_ioctl+0x22c>
 800482c:	f107 030c 	add.w	r3, r7, #12
 8004830:	2110      	movs	r1, #16
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fcd2 	bl	80041dc <SD_RxDataBlock>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 809c 	beq.w	8004978 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8004840:	7b3b      	ldrb	r3, [r7, #12]
 8004842:	099b      	lsrs	r3, r3, #6
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b01      	cmp	r3, #1
 8004848:	d10d      	bne.n	8004866 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800484a:	7d7b      	ldrb	r3, [r7, #21]
 800484c:	461a      	mov	r2, r3
 800484e:	7d3b      	ldrb	r3, [r7, #20]
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	b29b      	uxth	r3, r3
 8004854:	4413      	add	r3, r2
 8004856:	b29b      	uxth	r3, r3
 8004858:	3301      	adds	r3, #1
 800485a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800485c:	8bfb      	ldrh	r3, [r7, #30]
 800485e:	029a      	lsls	r2, r3, #10
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e02d      	b.n	80048c2 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004866:	7c7b      	ldrb	r3, [r7, #17]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	b2da      	uxtb	r2, r3
 800486e:	7dbb      	ldrb	r3, [r7, #22]
 8004870:	09db      	lsrs	r3, r3, #7
 8004872:	b2db      	uxtb	r3, r3
 8004874:	4413      	add	r3, r2
 8004876:	b2da      	uxtb	r2, r3
 8004878:	7d7b      	ldrb	r3, [r7, #21]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f003 0306 	and.w	r3, r3, #6
 8004882:	b2db      	uxtb	r3, r3
 8004884:	4413      	add	r3, r2
 8004886:	b2db      	uxtb	r3, r3
 8004888:	3302      	adds	r3, #2
 800488a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800488e:	7d3b      	ldrb	r3, [r7, #20]
 8004890:	099b      	lsrs	r3, r3, #6
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	b29b      	uxth	r3, r3
 800489c:	4413      	add	r3, r2
 800489e:	b29a      	uxth	r2, r3
 80048a0:	7cbb      	ldrb	r3, [r7, #18]
 80048a2:	029b      	lsls	r3, r3, #10
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3301      	adds	r3, #1
 80048b2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80048b4:	8bfa      	ldrh	r2, [r7, #30]
 80048b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048ba:	3b09      	subs	r3, #9
 80048bc:	409a      	lsls	r2, r3
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80048c8:	e056      	b.n	8004978 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048d0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80048d8:	e055      	b.n	8004986 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80048da:	f7ff fc0b 	bl	80040f4 <SD_ReadyWait>
 80048de:	4603      	mov	r3, r0
 80048e0:	2bff      	cmp	r3, #255	@ 0xff
 80048e2:	d14b      	bne.n	800497c <SD_disk_ioctl+0x230>
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80048ea:	e047      	b.n	800497c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80048ec:	2100      	movs	r1, #0
 80048ee:	2049      	movs	r0, #73	@ 0x49
 80048f0:	f7ff fce7 	bl	80042c2 <SD_SendCmd>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d142      	bne.n	8004980 <SD_disk_ioctl+0x234>
 80048fa:	2110      	movs	r1, #16
 80048fc:	6a38      	ldr	r0, [r7, #32]
 80048fe:	f7ff fc6d 	bl	80041dc <SD_RxDataBlock>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d03b      	beq.n	8004980 <SD_disk_ioctl+0x234>
 8004908:	2300      	movs	r3, #0
 800490a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800490e:	e037      	b.n	8004980 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004910:	2100      	movs	r1, #0
 8004912:	204a      	movs	r0, #74	@ 0x4a
 8004914:	f7ff fcd5 	bl	80042c2 <SD_SendCmd>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d132      	bne.n	8004984 <SD_disk_ioctl+0x238>
 800491e:	2110      	movs	r1, #16
 8004920:	6a38      	ldr	r0, [r7, #32]
 8004922:	f7ff fc5b 	bl	80041dc <SD_RxDataBlock>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02b      	beq.n	8004984 <SD_disk_ioctl+0x238>
 800492c:	2300      	movs	r3, #0
 800492e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8004932:	e027      	b.n	8004984 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004934:	2100      	movs	r1, #0
 8004936:	207a      	movs	r0, #122	@ 0x7a
 8004938:	f7ff fcc3 	bl	80042c2 <SD_SendCmd>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d116      	bne.n	8004970 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8004942:	2300      	movs	r3, #0
 8004944:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004948:	e00b      	b.n	8004962 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800494a:	6a3c      	ldr	r4, [r7, #32]
 800494c:	1c63      	adds	r3, r4, #1
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	f7ff fba4 	bl	800409c <SPI_RxByte>
 8004954:	4603      	mov	r3, r0
 8004956:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004958:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800495c:	3301      	adds	r3, #1
 800495e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004962:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004966:	2b03      	cmp	r3, #3
 8004968:	d9ef      	bls.n	800494a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8004970:	2304      	movs	r3, #4
 8004972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004976:	e006      	b.n	8004986 <SD_disk_ioctl+0x23a>
			break;
 8004978:	bf00      	nop
 800497a:	e004      	b.n	8004986 <SD_disk_ioctl+0x23a>
			break;
 800497c:	bf00      	nop
 800497e:	e002      	b.n	8004986 <SD_disk_ioctl+0x23a>
			break;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <SD_disk_ioctl+0x23a>
			break;
 8004984:	bf00      	nop
		}

		DESELECT();
 8004986:	f7ff fb47 	bl	8004018 <DESELECT>
		SPI_RxByte();
 800498a:	f7ff fb87 	bl	800409c <SPI_RxByte>
	}

	return res;
 800498e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004992:	4618      	mov	r0, r3
 8004994:	372c      	adds	r7, #44	@ 0x2c
 8004996:	46bd      	mov	sp, r7
 8004998:	bd90      	pop	{r4, r7, pc}
 800499a:	bf00      	nop
 800499c:	24000000 	.word	0x24000000

080049a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08e      	sub	sp, #56	@ 0x38
 80049a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	609a      	str	r2, [r3, #8]
 80049b2:	60da      	str	r2, [r3, #12]
 80049b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049b6:	4b8b      	ldr	r3, [pc, #556]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049bc:	4a89      	ldr	r2, [pc, #548]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049be:	f043 0310 	orr.w	r3, r3, #16
 80049c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049c6:	4b87      	ldr	r3, [pc, #540]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049d4:	4b83      	ldr	r3, [pc, #524]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049da:	4a82      	ldr	r2, [pc, #520]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049e4:	4b7f      	ldr	r3, [pc, #508]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f2:	4b7c      	ldr	r3, [pc, #496]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049f8:	4a7a      	ldr	r2, [pc, #488]	@ (8004be4 <MX_GPIO_Init+0x244>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a02:	4b78      	ldr	r3, [pc, #480]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a10:	4b74      	ldr	r3, [pc, #464]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a16:	4a73      	ldr	r2, [pc, #460]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a18:	f043 0320 	orr.w	r3, r3, #32
 8004a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a20:	4b70      	ldr	r3, [pc, #448]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a34:	4a6b      	ldr	r2, [pc, #428]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a36:	f043 0302 	orr.w	r3, r3, #2
 8004a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a3e:	4b69      	ldr	r3, [pc, #420]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a4c:	4b65      	ldr	r3, [pc, #404]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a52:	4a64      	ldr	r2, [pc, #400]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a54:	f043 0308 	orr.w	r3, r3, #8
 8004a58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a5c:	4b61      	ldr	r3, [pc, #388]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004a6a:	4b5e      	ldr	r3, [pc, #376]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a70:	4a5c      	ldr	r2, [pc, #368]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a88:	4b56      	ldr	r3, [pc, #344]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a8e:	4a55      	ldr	r2, [pc, #340]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a90:	f043 0304 	orr.w	r3, r3, #4
 8004a94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a98:	4b52      	ldr	r3, [pc, #328]	@ (8004be4 <MX_GPIO_Init+0x244>)
 8004a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_6_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f248 0108 	movw	r1, #32776	@ 0x8008
 8004aac:	484e      	ldr	r0, [pc, #312]	@ (8004be8 <MX_GPIO_Init+0x248>)
 8004aae:	f009 fa87 	bl	800dfc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8004ab8:	484c      	ldr	r0, [pc, #304]	@ (8004bec <MX_GPIO_Init+0x24c>)
 8004aba:	f009 fa81 	bl	800dfc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, uSD_LED_Pin|uSD_SC_Pin, GPIO_PIN_RESET);
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8004ac4:	484a      	ldr	r0, [pc, #296]	@ (8004bf0 <MX_GPIO_Init+0x250>)
 8004ac6:	f009 fa7b 	bl	800dfc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_Power_GPIO_Port, ESC_Power_Pin, GPIO_PIN_RESET);
 8004aca:	2200      	movs	r2, #0
 8004acc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ad0:	4848      	ldr	r0, [pc, #288]	@ (8004bf4 <MX_GPIO_Init+0x254>)
 8004ad2:	f009 fa75 	bl	800dfc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_7_Pin|LED_5_Pin, GPIO_PIN_RESET);
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004adc:	4846      	ldr	r0, [pc, #280]	@ (8004bf8 <MX_GPIO_Init+0x258>)
 8004ade:	f009 fa6f 	bl	800dfc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_6_Pin|LED_G_Pin;
 8004ae2:	f248 0308 	movw	r3, #32776	@ 0x8008
 8004ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af0:	2300      	movs	r3, #0
 8004af2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004af8:	4619      	mov	r1, r3
 8004afa:	483b      	ldr	r0, [pc, #236]	@ (8004be8 <MX_GPIO_Init+0x248>)
 8004afc:	f009 f8a0 	bl	800dc40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_R_Pin|NRF24_CE_Pin|NRF24_CSN_Pin;
 8004b00:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b06:	2301      	movs	r3, #1
 8004b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b16:	4619      	mov	r1, r3
 8004b18:	4834      	ldr	r0, [pc, #208]	@ (8004bec <MX_GPIO_Init+0x24c>)
 8004b1a:	f009 f891 	bl	800dc40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detection_Pin;
 8004b1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b24:	2300      	movs	r3, #0
 8004b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detection_GPIO_Port, &GPIO_InitStruct);
 8004b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b30:	4619      	mov	r1, r3
 8004b32:	482e      	ldr	r0, [pc, #184]	@ (8004bec <MX_GPIO_Init+0x24c>)
 8004b34:	f009 f884 	bl	800dc40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_LED_Pin;
 8004b38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b46:	2300      	movs	r3, #0
 8004b48:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_LED_GPIO_Port, &GPIO_InitStruct);
 8004b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4827      	ldr	r0, [pc, #156]	@ (8004bf0 <MX_GPIO_Init+0x250>)
 8004b52:	f009 f875 	bl	800dc40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_SC_Pin;
 8004b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004b64:	2301      	movs	r3, #1
 8004b66:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(uSD_SC_GPIO_Port, &GPIO_InitStruct);
 8004b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4820      	ldr	r0, [pc, #128]	@ (8004bf0 <MX_GPIO_Init+0x250>)
 8004b70:	f009 f866 	bl	800dc40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESC_Power_Pin;
 8004b74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b82:	2300      	movs	r3, #0
 8004b84:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESC_Power_GPIO_Port, &GPIO_InitStruct);
 8004b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4819      	ldr	r0, [pc, #100]	@ (8004bf4 <MX_GPIO_Init+0x254>)
 8004b8e:	f009 f857 	bl	800dc40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_5_Pin;
 8004b92:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4813      	ldr	r0, [pc, #76]	@ (8004bf8 <MX_GPIO_Init+0x258>)
 8004bac:	f009 f848 	bl	800dc40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8004bb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004bb6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8004bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	480b      	ldr	r0, [pc, #44]	@ (8004bf4 <MX_GPIO_Init+0x254>)
 8004bc8:	f009 f83a 	bl	800dc40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2100      	movs	r1, #0
 8004bd0:	2028      	movs	r0, #40	@ 0x28
 8004bd2:	f006 f936 	bl	800ae42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004bd6:	2028      	movs	r0, #40	@ 0x28
 8004bd8:	f006 f94d 	bl	800ae76 <HAL_NVIC_EnableIRQ>

}
 8004bdc:	bf00      	nop
 8004bde:	3738      	adds	r7, #56	@ 0x38
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	58024400 	.word	0x58024400
 8004be8:	58021000 	.word	0x58021000
 8004bec:	58020400 	.word	0x58020400
 8004bf0:	58020c00 	.word	0x58020c00
 8004bf4:	58021800 	.word	0x58021800
 8004bf8:	58020000 	.word	0x58020000

08004bfc <MX_I2C5_Init>:

I2C_HandleTypeDef hi2c5;

/* I2C5 init function */
void MX_I2C5_Init(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8004c00:	4b1d      	ldr	r3, [pc, #116]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c02:	4a1e      	ldr	r2, [pc, #120]	@ (8004c7c <MX_I2C5_Init+0x80>)
 8004c04:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00000000;
 8004c06:	4b1c      	ldr	r3, [pc, #112]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8004c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c12:	4b19      	ldr	r3, [pc, #100]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c18:	4b17      	ldr	r3, [pc, #92]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8004c1e:	4b16      	ldr	r3, [pc, #88]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c24:	4b14      	ldr	r3, [pc, #80]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c2a:	4b13      	ldr	r3, [pc, #76]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c30:	4b11      	ldr	r3, [pc, #68]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8004c36:	4810      	ldr	r0, [pc, #64]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c38:	f009 f9f6 	bl	800e028 <HAL_I2C_Init>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8004c42:	f002 fcf5 	bl	8007630 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c46:	2100      	movs	r1, #0
 8004c48:	480b      	ldr	r0, [pc, #44]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c4a:	f00b fdaf 	bl	80107ac <HAL_I2CEx_ConfigAnalogFilter>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8004c54:	f002 fcec 	bl	8007630 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4807      	ldr	r0, [pc, #28]	@ (8004c78 <MX_I2C5_Init+0x7c>)
 8004c5c:	f00b fdf1 	bl	8010842 <HAL_I2CEx_ConfigDigitalFilter>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8004c66:	f002 fce3 	bl	8007630 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C5);
 8004c6a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004c6e:	f00b fe35 	bl	80108dc <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8004c72:	bf00      	nop
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	24000198 	.word	0x24000198
 8004c7c:	40006400 	.word	0x40006400

08004c80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b0b8      	sub	sp, #224	@ 0xe0
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c88:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	605a      	str	r2, [r3, #4]
 8004c92:	609a      	str	r2, [r3, #8]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c98:	f107 0310 	add.w	r3, r7, #16
 8004c9c:	22b8      	movs	r2, #184	@ 0xb8
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f018 fe07 	bl	801d8b4 <memset>
  if(i2cHandle->Instance==I2C5)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2b      	ldr	r2, [pc, #172]	@ (8004d58 <HAL_I2C_MspInit+0xd8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d14f      	bne.n	8004d50 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8004cb0:	f04f 0208 	mov.w	r2, #8
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_CSI;
 8004cbc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004cc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cc4:	f107 0310 	add.w	r3, r7, #16
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f00c fdcb 	bl	8011864 <HAL_RCCEx_PeriphCLKConfig>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8004cd4:	f002 fcac 	bl	8007630 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd8:	4b20      	ldr	r3, [pc, #128]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cde:	4a1f      	ldr	r2, [pc, #124]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004ce0:	f043 0304 	orr.w	r3, r3, #4
 8004ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
    /**I2C5 GPIO Configuration
    PC10     ------> I2C5_SDA
    PC11     ------> I2C5_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004cf6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004cfa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cfe:	2312      	movs	r3, #18
 8004d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8004d10:	2304      	movs	r3, #4
 8004d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d16:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4810      	ldr	r0, [pc, #64]	@ (8004d60 <HAL_I2C_MspInit+0xe0>)
 8004d1e:	f008 ff8f 	bl	800dc40 <HAL_GPIO_Init>

    /* I2C5 clock enable */
    __HAL_RCC_I2C5_CLK_ENABLE();
 8004d22:	4b0e      	ldr	r3, [pc, #56]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d28:	4a0c      	ldr	r2, [pc, #48]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004d2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004d32:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <HAL_I2C_MspInit+0xdc>)
 8004d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]

    /* I2C5 interrupt Init */
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 1, 0);
 8004d40:	2200      	movs	r2, #0
 8004d42:	2101      	movs	r1, #1
 8004d44:	209d      	movs	r0, #157	@ 0x9d
 8004d46:	f006 f87c 	bl	800ae42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8004d4a:	209d      	movs	r0, #157	@ 0x9d
 8004d4c:	f006 f893 	bl	800ae76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }
}
 8004d50:	bf00      	nop
 8004d52:	37e0      	adds	r7, #224	@ 0xe0
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40006400 	.word	0x40006400
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	58020800 	.word	0x58020800

08004d64 <__NVIC_SystemReset>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004d68:	f3bf 8f4f 	dsb	sy
}
 8004d6c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004d6e:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <__NVIC_SystemReset+0x24>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004d76:	4904      	ldr	r1, [pc, #16]	@ (8004d88 <__NVIC_SystemReset+0x24>)
 8004d78:	4b04      	ldr	r3, [pc, #16]	@ (8004d8c <__NVIC_SystemReset+0x28>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d7e:	f3bf 8f4f 	dsb	sy
}
 8004d82:	bf00      	nop
    __NOP();
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <__NVIC_SystemReset+0x20>
 8004d88:	e000ed00 	.word	0xe000ed00
 8004d8c:	05fa0004 	.word	0x05fa0004

08004d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	@ 0x28
 8004d94:	af02      	add	r7, sp, #8
//		//oczekiwanie az napiecia na zasilaczu narosnie
//	}
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8004d96:	f002 fc1f 	bl	80075d8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d9a:	f003 ff21 	bl	8008be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d9e:	f000 feef 	bl	8005b80 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8004da2:	f000 ff5f 	bl	8005c64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004da6:	f7ff fdfb 	bl	80049a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004daa:	f7fe fcdb 	bl	8003764 <MX_DMA_Init>
  MX_I2C5_Init();
 8004dae:	f7ff ff25 	bl	8004bfc <MX_I2C5_Init>
  MX_SPI6_Init();
 8004db2:	f002 fc99 	bl	80076e8 <MX_SPI6_Init>
  MX_ADC2_Init();
 8004db6:	f7fe fbe7 	bl	8003588 <MX_ADC2_Init>
  MX_SPI2_Init();
 8004dba:	f002 fc3f 	bl	800763c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8004dbe:	f003 fe27 	bl	8008a10 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004dc2:	f003 fb45 	bl	8008450 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004dc6:	f003 fcbb 	bl	8008740 <MX_TIM8_Init>
  MX_TIM3_Init();
 8004dca:	f003 fc3d 	bl	8008648 <MX_TIM3_Init>
  MX_FATFS_Init();
 8004dce:	f015 fbbd 	bl	801a54c <MX_FATFS_Init>
  MX_TIM2_Init();
 8004dd2:	f003 fbe5 	bl	80085a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	STARTUP = 1;
 8004dd6:	4b9a      	ldr	r3, [pc, #616]	@ (8005040 <main+0x2b0>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
  	ESC_POWER_1;
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004de2:	4898      	ldr	r0, [pc, #608]	@ (8005044 <main+0x2b4>)
 8004de4:	f009 f8ec 	bl	800dfc0 <HAL_GPIO_WritePin>
  	DRON_ON_GRUND = 1;
 8004de8:	4b97      	ldr	r3, [pc, #604]	@ (8005048 <main+0x2b8>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]

  	PID_FAC_Pitch[0] = p_pitchfactor;
 8004dee:	4b97      	ldr	r3, [pc, #604]	@ (800504c <main+0x2bc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a97      	ldr	r2, [pc, #604]	@ (8005050 <main+0x2c0>)
 8004df4:	6013      	str	r3, [r2, #0]
  	PID_FAC_Pitch[1] = i_pitchfactor;
 8004df6:	4b97      	ldr	r3, [pc, #604]	@ (8005054 <main+0x2c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a95      	ldr	r2, [pc, #596]	@ (8005050 <main+0x2c0>)
 8004dfc:	6053      	str	r3, [r2, #4]
  	PID_FAC_Pitch[2] = d_pitchfactor;
 8004dfe:	4b96      	ldr	r3, [pc, #600]	@ (8005058 <main+0x2c8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a93      	ldr	r2, [pc, #588]	@ (8005050 <main+0x2c0>)
 8004e04:	6093      	str	r3, [r2, #8]
  	PID_FAC_Pitch[4] = 0;
 8004e06:	4b92      	ldr	r3, [pc, #584]	@ (8005050 <main+0x2c0>)
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	611a      	str	r2, [r3, #16]

  	PID_FAC_Rool[0] = p_roolfactor;
 8004e0e:	4b93      	ldr	r3, [pc, #588]	@ (800505c <main+0x2cc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a93      	ldr	r2, [pc, #588]	@ (8005060 <main+0x2d0>)
 8004e14:	6013      	str	r3, [r2, #0]
  	PID_FAC_Rool[1] = i_roolfactor;
 8004e16:	4b93      	ldr	r3, [pc, #588]	@ (8005064 <main+0x2d4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a91      	ldr	r2, [pc, #580]	@ (8005060 <main+0x2d0>)
 8004e1c:	6053      	str	r3, [r2, #4]
  	PID_FAC_Rool[2] = d_roolfactor;
 8004e1e:	4b92      	ldr	r3, [pc, #584]	@ (8005068 <main+0x2d8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a8f      	ldr	r2, [pc, #572]	@ (8005060 <main+0x2d0>)
 8004e24:	6093      	str	r3, [r2, #8]
  	PID_FAC_Rool[4] = 0;
 8004e26:	4b8e      	ldr	r3, [pc, #568]	@ (8005060 <main+0x2d0>)
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	611a      	str	r2, [r3, #16]

  	PID_FAC_Yaw[0] = p_yawfactor;
 8004e2e:	4b8f      	ldr	r3, [pc, #572]	@ (800506c <main+0x2dc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a8f      	ldr	r2, [pc, #572]	@ (8005070 <main+0x2e0>)
 8004e34:	6013      	str	r3, [r2, #0]
  	PID_FAC_Yaw[1] = i_yawfactor;
 8004e36:	4b8f      	ldr	r3, [pc, #572]	@ (8005074 <main+0x2e4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a8d      	ldr	r2, [pc, #564]	@ (8005070 <main+0x2e0>)
 8004e3c:	6053      	str	r3, [r2, #4]
  	PID_FAC_Yaw[2] = d_yawfactor;
 8004e3e:	4b8e      	ldr	r3, [pc, #568]	@ (8005078 <main+0x2e8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a8b      	ldr	r2, [pc, #556]	@ (8005070 <main+0x2e0>)
 8004e44:	6093      	str	r3, [r2, #8]
  	PID_FAC_Yaw[4] = 0;
 8004e46:	4b8a      	ldr	r3, [pc, #552]	@ (8005070 <main+0x2e0>)
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	611a      	str	r2, [r3, #16]


  	ax_ang =0,ay_ang = 0,az_ang = 0, gx_ang = 0, gy_ang = 0, gz_ang = 0;
 8004e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800507c <main+0x2ec>)
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	4b8a      	ldr	r3, [pc, #552]	@ (8005080 <main+0x2f0>)
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	4b89      	ldr	r3, [pc, #548]	@ (8005084 <main+0x2f4>)
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	4b88      	ldr	r3, [pc, #544]	@ (8005088 <main+0x2f8>)
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	4b87      	ldr	r3, [pc, #540]	@ (800508c <main+0x2fc>)
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	4b86      	ldr	r3, [pc, #536]	@ (8005090 <main+0x300>)
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
  	Mag_Z = 0;
 8004e7e:	4b85      	ldr	r3, [pc, #532]	@ (8005094 <main+0x304>)
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
  	TIM_inte_SD = 0, TIM_inte = 0;
 8004e86:	4b84      	ldr	r3, [pc, #528]	@ (8005098 <main+0x308>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	4b83      	ldr	r3, [pc, #524]	@ (800509c <main+0x30c>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
  	NRF_TIM_Inte = 0;
 8004e92:	4b83      	ldr	r3, [pc, #524]	@ (80050a0 <main+0x310>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
  	temp = 0, pres = 0, startpres = 0, ampritude = 0;
 8004e98:	4b82      	ldr	r3, [pc, #520]	@ (80050a4 <main+0x314>)
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	4b81      	ldr	r3, [pc, #516]	@ (80050a8 <main+0x318>)
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	4b80      	ldr	r3, [pc, #512]	@ (80050ac <main+0x31c>)
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	4b7f      	ldr	r3, [pc, #508]	@ (80050b0 <main+0x320>)
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
  	last_wanted_pitch_rx = 0;
 8004eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80050b4 <main+0x324>)
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
  	last_wanted_rool_rx = 0;
 8004ec0:	4b7d      	ldr	r3, [pc, #500]	@ (80050b8 <main+0x328>)
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
  	last_wanted_yaw_rx = 0;
 8004ec8:	4b7c      	ldr	r3, [pc, #496]	@ (80050bc <main+0x32c>)
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
  	wanted_thrust = 0;
 8004ed0:	4b7b      	ldr	r3, [pc, #492]	@ (80050c0 <main+0x330>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	801a      	strh	r2, [r3, #0]
  	thrust_limit = 10000;
 8004ed6:	4b7b      	ldr	r3, [pc, #492]	@ (80050c4 <main+0x334>)
 8004ed8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004edc:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain_AR = 100;
 8004ede:	4b7a      	ldr	r3, [pc, #488]	@ (80050c8 <main+0x338>)
 8004ee0:	2264      	movs	r2, #100	@ 0x64
 8004ee2:	801a      	strh	r2, [r3, #0]
  	FDP_D_Gain = 100;
 8004ee4:	4b79      	ldr	r3, [pc, #484]	@ (80050cc <main+0x33c>)
 8004ee6:	2264      	movs	r2, #100	@ 0x64
 8004ee8:	801a      	strh	r2, [r3, #0]
  	old_error_pitch = 0;// ruznica
 8004eea:	4b79      	ldr	r3, [pc, #484]	@ (80050d0 <main+0x340>)
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
  	old_error_rool = 0;
 8004ef2:	4b78      	ldr	r3, [pc, #480]	@ (80050d4 <main+0x344>)
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
  	old_error_yaw = 0;
 8004efa:	4b77      	ldr	r3, [pc, #476]	@ (80050d8 <main+0x348>)
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_pitch = 0;// ruznica
 8004f02:	4b76      	ldr	r3, [pc, #472]	@ (80050dc <main+0x34c>)
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_rool = 0;
 8004f0a:	4b75      	ldr	r3, [pc, #468]	@ (80050e0 <main+0x350>)
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
  	old_error_angular_rate_yaw = 0;
 8004f12:	4b74      	ldr	r3, [pc, #464]	@ (80050e4 <main+0x354>)
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
  	error_sum_pitch = 0;//todo zmiezycz startowy error, by start nastepowal szybciej
 8004f1a:	4b73      	ldr	r3, [pc, #460]	@ (80050e8 <main+0x358>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
  	error_sum_rool = 0;
 8004f20:	4b72      	ldr	r3, [pc, #456]	@ (80050ec <main+0x35c>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
  	error_sum_yaw = 0;
 8004f26:	4b72      	ldr	r3, [pc, #456]	@ (80050f0 <main+0x360>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_pitch = 0;
 8004f2c:	4b71      	ldr	r3, [pc, #452]	@ (80050f4 <main+0x364>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_rool = 0;
 8004f32:	4b71      	ldr	r3, [pc, #452]	@ (80050f8 <main+0x368>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
  	error_sum_angular_rate_yaw = 0;
 8004f38:	4b70      	ldr	r3, [pc, #448]	@ (80050fc <main+0x36c>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
  	SPEED1 = min_speed;
 8004f3e:	4b70      	ldr	r3, [pc, #448]	@ (8005100 <main+0x370>)
 8004f40:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f44:	801a      	strh	r2, [r3, #0]
  	SPEED2 = min_speed;
 8004f46:	4b6f      	ldr	r3, [pc, #444]	@ (8005104 <main+0x374>)
 8004f48:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f4c:	801a      	strh	r2, [r3, #0]
  	SPEED3 = min_speed;
 8004f4e:	4b6e      	ldr	r3, [pc, #440]	@ (8005108 <main+0x378>)
 8004f50:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f54:	801a      	strh	r2, [r3, #0]
  	SPEED4 = min_speed;
 8004f56:	4b6d      	ldr	r3, [pc, #436]	@ (800510c <main+0x37c>)
 8004f58:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f5c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED1 = min_speed;
 8004f5e:	4b6c      	ldr	r3, [pc, #432]	@ (8005110 <main+0x380>)
 8004f60:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f64:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED2 = min_speed;
 8004f66:	4b6b      	ldr	r3, [pc, #428]	@ (8005114 <main+0x384>)
 8004f68:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f6c:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED3 = min_speed;
 8004f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005118 <main+0x388>)
 8004f70:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f74:	801a      	strh	r2, [r3, #0]
  	OLD_SPEED4 = min_speed;
 8004f76:	4b69      	ldr	r3, [pc, #420]	@ (800511c <main+0x38c>)
 8004f78:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004f7c:	801a      	strh	r2, [r3, #0]
  	commandready = 0;
 8004f7e:	4b68      	ldr	r3, [pc, #416]	@ (8005120 <main+0x390>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
  	command_ch_num = 0;
 8004f84:	4b67      	ldr	r3, [pc, #412]	@ (8005124 <main+0x394>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
  	Mainloop_Number = 0;
 8004f8a:	4b67      	ldr	r3, [pc, #412]	@ (8005128 <main+0x398>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
  	SD_In_Use = 0;
 8004f90:	4b66      	ldr	r3, [pc, #408]	@ (800512c <main+0x39c>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
  	wobble_strenght = 1;
 8004f96:	4b66      	ldr	r3, [pc, #408]	@ (8005130 <main+0x3a0>)
 8004f98:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004f9c:	601a      	str	r2, [r3, #0]
  	MPU6050_IRQ = 0, HMC583L_IRQ = 0, BMP180_IRQ = 0;
 8004f9e:	4b65      	ldr	r3, [pc, #404]	@ (8005134 <main+0x3a4>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	4b64      	ldr	r3, [pc, #400]	@ (8005138 <main+0x3a8>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	4b64      	ldr	r3, [pc, #400]	@ (800513c <main+0x3ac>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
  	i = 0, loopnum = 0;
 8004fb0:	4b63      	ldr	r3, [pc, #396]	@ (8005140 <main+0x3b0>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	4b63      	ldr	r3, [pc, #396]	@ (8005144 <main+0x3b4>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]


	  p_angular_rate_pitchfactor = 14;
 8004fbc:	4b62      	ldr	r3, [pc, #392]	@ (8005148 <main+0x3b8>)
 8004fbe:	4a63      	ldr	r2, [pc, #396]	@ (800514c <main+0x3bc>)
 8004fc0:	601a      	str	r2, [r3, #0]
	  p_angular_rate_roolfactor = 12;
 8004fc2:	4b63      	ldr	r3, [pc, #396]	@ (8005150 <main+0x3c0>)
 8004fc4:	4a63      	ldr	r2, [pc, #396]	@ (8005154 <main+0x3c4>)
 8004fc6:	601a      	str	r2, [r3, #0]
	  p_angular_rate_yawfactor = 5;// -> 10
 8004fc8:	4b63      	ldr	r3, [pc, #396]	@ (8005158 <main+0x3c8>)
 8004fca:	4a64      	ldr	r2, [pc, #400]	@ (800515c <main+0x3cc>)
 8004fcc:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_angular_rate_pitchfactor = 10;
 8004fce:	4b64      	ldr	r3, [pc, #400]	@ (8005160 <main+0x3d0>)
 8004fd0:	4a64      	ldr	r2, [pc, #400]	@ (8005164 <main+0x3d4>)
 8004fd2:	601a      	str	r2, [r3, #0]
	  i_angular_rate_roolfactor = 10;
 8004fd4:	4b64      	ldr	r3, [pc, #400]	@ (8005168 <main+0x3d8>)
 8004fd6:	4a63      	ldr	r2, [pc, #396]	@ (8005164 <main+0x3d4>)
 8004fd8:	601a      	str	r2, [r3, #0]
	  i_angular_rate_yawfactor = 0;
 8004fda:	4b64      	ldr	r3, [pc, #400]	@ (800516c <main+0x3dc>)
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_angular_rate_pitchfactor = 30;
 8004fe2:	4b63      	ldr	r3, [pc, #396]	@ (8005170 <main+0x3e0>)
 8004fe4:	4a63      	ldr	r2, [pc, #396]	@ (8005174 <main+0x3e4>)
 8004fe6:	601a      	str	r2, [r3, #0]
	  d_angular_rate_roolfactor = 20;
 8004fe8:	4b63      	ldr	r3, [pc, #396]	@ (8005178 <main+0x3e8>)
 8004fea:	4a64      	ldr	r2, [pc, #400]	@ (800517c <main+0x3ec>)
 8004fec:	601a      	str	r2, [r3, #0]
	  d_angular_rate_yawfactor = 5;
 8004fee:	4b64      	ldr	r3, [pc, #400]	@ (8005180 <main+0x3f0>)
 8004ff0:	4a5a      	ldr	r2, [pc, #360]	@ (800515c <main+0x3cc>)
 8004ff2:	601a      	str	r2, [r3, #0]

	  p_pitchfactor = 5.5;
 8004ff4:	4b15      	ldr	r3, [pc, #84]	@ (800504c <main+0x2bc>)
 8004ff6:	4a63      	ldr	r2, [pc, #396]	@ (8005184 <main+0x3f4>)
 8004ff8:	601a      	str	r2, [r3, #0]
	  p_roolfactor = 6;//5
 8004ffa:	4b18      	ldr	r3, [pc, #96]	@ (800505c <main+0x2cc>)
 8004ffc:	4a62      	ldr	r2, [pc, #392]	@ (8005188 <main+0x3f8>)
 8004ffe:	601a      	str	r2, [r3, #0]
	  p_yawfactor = 5;
 8005000:	4b1a      	ldr	r3, [pc, #104]	@ (800506c <main+0x2dc>)
 8005002:	4a56      	ldr	r2, [pc, #344]	@ (800515c <main+0x3cc>)
 8005004:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  i_pitchfactor = 9;//8
 8005006:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <main+0x2c4>)
 8005008:	4a60      	ldr	r2, [pc, #384]	@ (800518c <main+0x3fc>)
 800500a:	601a      	str	r2, [r3, #0]
	  i_roolfactor = 8;//10
 800500c:	4b15      	ldr	r3, [pc, #84]	@ (8005064 <main+0x2d4>)
 800500e:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005012:	601a      	str	r2, [r3, #0]
	  i_yawfactor = 0;
 8005014:	4b17      	ldr	r3, [pc, #92]	@ (8005074 <main+0x2e4>)
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
	///////////////////////////////////////////////////////////////////////////
	  d_pitchfactor = 30;//25
 800501c:	4b0e      	ldr	r3, [pc, #56]	@ (8005058 <main+0x2c8>)
 800501e:	4a55      	ldr	r2, [pc, #340]	@ (8005174 <main+0x3e4>)
 8005020:	601a      	str	r2, [r3, #0]
	  d_roolfactor = 20;
 8005022:	4b11      	ldr	r3, [pc, #68]	@ (8005068 <main+0x2d8>)
 8005024:	4a55      	ldr	r2, [pc, #340]	@ (800517c <main+0x3ec>)
 8005026:	601a      	str	r2, [r3, #0]
	  d_yawfactor = 0;
 8005028:	4b13      	ldr	r3, [pc, #76]	@ (8005078 <main+0x2e8>)
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	601a      	str	r2, [r3, #0]

  	  PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005030:	4b45      	ldr	r3, [pc, #276]	@ (8005148 <main+0x3b8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a56      	ldr	r2, [pc, #344]	@ (8005190 <main+0x400>)
 8005036:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 8005038:	4b49      	ldr	r3, [pc, #292]	@ (8005160 <main+0x3d0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	e0aa      	b.n	8005194 <main+0x404>
 800503e:	bf00      	nop
 8005040:	0000005c 	.word	0x0000005c
 8005044:	58021800 	.word	0x58021800
 8005048:	00004184 	.word	0x00004184
 800504c:	000040b4 	.word	0x000040b4
 8005050:	000040d8 	.word	0x000040d8
 8005054:	000040c0 	.word	0x000040c0
 8005058:	000040cc 	.word	0x000040cc
 800505c:	000040b8 	.word	0x000040b8
 8005060:	000040ec 	.word	0x000040ec
 8005064:	000040c4 	.word	0x000040c4
 8005068:	000040d0 	.word	0x000040d0
 800506c:	000040bc 	.word	0x000040bc
 8005070:	00004100 	.word	0x00004100
 8005074:	000040c8 	.word	0x000040c8
 8005078:	000040d4 	.word	0x000040d4
 800507c:	00000018 	.word	0x00000018
 8005080:	0000001c 	.word	0x0000001c
 8005084:	00000020 	.word	0x00000020
 8005088:	00000024 	.word	0x00000024
 800508c:	00000028 	.word	0x00000028
 8005090:	0000002c 	.word	0x0000002c
 8005094:	00000048 	.word	0x00000048
 8005098:	00000054 	.word	0x00000054
 800509c:	00000058 	.word	0x00000058
 80050a0:	00000060 	.word	0x00000060
 80050a4:	000000c4 	.word	0x000000c4
 80050a8:	000000c8 	.word	0x000000c8
 80050ac:	000000cc 	.word	0x000000cc
 80050b0:	000000d0 	.word	0x000000d0
 80050b4:	00004038 	.word	0x00004038
 80050b8:	0000403c 	.word	0x0000403c
 80050bc:	00004040 	.word	0x00004040
 80050c0:	00004044 	.word	0x00004044
 80050c4:	00004046 	.word	0x00004046
 80050c8:	0000405c 	.word	0x0000405c
 80050cc:	0000405e 	.word	0x0000405e
 80050d0:	0000406c 	.word	0x0000406c
 80050d4:	00004070 	.word	0x00004070
 80050d8:	00004074 	.word	0x00004074
 80050dc:	00004078 	.word	0x00004078
 80050e0:	0000407c 	.word	0x0000407c
 80050e4:	00004080 	.word	0x00004080
 80050e8:	00004084 	.word	0x00004084
 80050ec:	00004088 	.word	0x00004088
 80050f0:	0000408c 	.word	0x0000408c
 80050f4:	00004090 	.word	0x00004090
 80050f8:	00004094 	.word	0x00004094
 80050fc:	00004098 	.word	0x00004098
 8005100:	00004174 	.word	0x00004174
 8005104:	00004176 	.word	0x00004176
 8005108:	00004178 	.word	0x00004178
 800510c:	0000417a 	.word	0x0000417a
 8005110:	0000417c 	.word	0x0000417c
 8005114:	0000417e 	.word	0x0000417e
 8005118:	00004180 	.word	0x00004180
 800511c:	00004182 	.word	0x00004182
 8005120:	000041a6 	.word	0x000041a6
 8005124:	000041a7 	.word	0x000041a7
 8005128:	000041ac 	.word	0x000041ac
 800512c:	000041b0 	.word	0x000041b0
 8005130:	000041b8 	.word	0x000041b8
 8005134:	000041bc 	.word	0x000041bc
 8005138:	000041bd 	.word	0x000041bd
 800513c:	000041be 	.word	0x000041be
 8005140:	000041c0 	.word	0x000041c0
 8005144:	000041c4 	.word	0x000041c4
 8005148:	00004114 	.word	0x00004114
 800514c:	41600000 	.word	0x41600000
 8005150:	00004118 	.word	0x00004118
 8005154:	41400000 	.word	0x41400000
 8005158:	0000411c 	.word	0x0000411c
 800515c:	40a00000 	.word	0x40a00000
 8005160:	00004120 	.word	0x00004120
 8005164:	41200000 	.word	0x41200000
 8005168:	00004124 	.word	0x00004124
 800516c:	00004128 	.word	0x00004128
 8005170:	0000412c 	.word	0x0000412c
 8005174:	41f00000 	.word	0x41f00000
 8005178:	00004130 	.word	0x00004130
 800517c:	41a00000 	.word	0x41a00000
 8005180:	00004134 	.word	0x00004134
 8005184:	40b00000 	.word	0x40b00000
 8005188:	40c00000 	.word	0x40c00000
 800518c:	41100000 	.word	0x41100000
 8005190:	00004138 	.word	0x00004138
 8005194:	4aa7      	ldr	r2, [pc, #668]	@ (8005434 <main+0x6a4>)
 8005196:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005198:	4ba7      	ldr	r3, [pc, #668]	@ (8005438 <main+0x6a8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4aa5      	ldr	r2, [pc, #660]	@ (8005434 <main+0x6a4>)
 800519e:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;//
 80051a0:	4ba6      	ldr	r3, [pc, #664]	@ (800543c <main+0x6ac>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4aa6      	ldr	r2, [pc, #664]	@ (8005440 <main+0x6b0>)
 80051a6:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 80051a8:	4ba6      	ldr	r3, [pc, #664]	@ (8005444 <main+0x6b4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4aa4      	ldr	r2, [pc, #656]	@ (8005440 <main+0x6b0>)
 80051ae:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 80051b0:	4ba5      	ldr	r3, [pc, #660]	@ (8005448 <main+0x6b8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4aa2      	ldr	r2, [pc, #648]	@ (8005440 <main+0x6b0>)
 80051b6:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;//
 80051b8:	4ba4      	ldr	r3, [pc, #656]	@ (800544c <main+0x6bc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4aa4      	ldr	r2, [pc, #656]	@ (8005450 <main+0x6c0>)
 80051be:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 80051c0:	4ba4      	ldr	r3, [pc, #656]	@ (8005454 <main+0x6c4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4aa2      	ldr	r2, [pc, #648]	@ (8005450 <main+0x6c0>)
 80051c6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 80051c8:	4ba3      	ldr	r3, [pc, #652]	@ (8005458 <main+0x6c8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4aa0      	ldr	r2, [pc, #640]	@ (8005450 <main+0x6c0>)
 80051ce:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Pitch[0] = p_pitchfactor;
 80051d0:	4ba2      	ldr	r3, [pc, #648]	@ (800545c <main+0x6cc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4aa2      	ldr	r2, [pc, #648]	@ (8005460 <main+0x6d0>)
 80051d6:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Pitch[1] = i_pitchfactor;
 80051d8:	4ba2      	ldr	r3, [pc, #648]	@ (8005464 <main+0x6d4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4aa0      	ldr	r2, [pc, #640]	@ (8005460 <main+0x6d0>)
 80051de:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Pitch[2] = d_pitchfactor;
 80051e0:	4ba1      	ldr	r3, [pc, #644]	@ (8005468 <main+0x6d8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a9e      	ldr	r2, [pc, #632]	@ (8005460 <main+0x6d0>)
 80051e6:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Rool[0] = p_roolfactor;//
 80051e8:	4ba0      	ldr	r3, [pc, #640]	@ (800546c <main+0x6dc>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4aa0      	ldr	r2, [pc, #640]	@ (8005470 <main+0x6e0>)
 80051ee:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Rool[1] = i_roolfactor;
 80051f0:	4ba0      	ldr	r3, [pc, #640]	@ (8005474 <main+0x6e4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a9e      	ldr	r2, [pc, #632]	@ (8005470 <main+0x6e0>)
 80051f6:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Rool[2] = d_roolfactor;
 80051f8:	4b9f      	ldr	r3, [pc, #636]	@ (8005478 <main+0x6e8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a9c      	ldr	r2, [pc, #624]	@ (8005470 <main+0x6e0>)
 80051fe:	6093      	str	r3, [r2, #8]
  	  PID_FAC_Yaw[0] = p_yawfactor;//
 8005200:	4b9e      	ldr	r3, [pc, #632]	@ (800547c <main+0x6ec>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a9e      	ldr	r2, [pc, #632]	@ (8005480 <main+0x6f0>)
 8005206:	6013      	str	r3, [r2, #0]
  	  PID_FAC_Yaw[1] = i_yawfactor;
 8005208:	4b9e      	ldr	r3, [pc, #632]	@ (8005484 <main+0x6f4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a9c      	ldr	r2, [pc, #624]	@ (8005480 <main+0x6f0>)
 800520e:	6053      	str	r3, [r2, #4]
  	  PID_FAC_Yaw[2] = d_yawfactor;
 8005210:	4b9d      	ldr	r3, [pc, #628]	@ (8005488 <main+0x6f8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a9a      	ldr	r2, [pc, #616]	@ (8005480 <main+0x6f0>)
 8005216:	6093      	str	r3, [r2, #8]


  	data.ox = 0;
 8005218:	4b9c      	ldr	r3, [pc, #624]	@ (800548c <main+0x6fc>)
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	60da      	str	r2, [r3, #12]
  	data.x = 0;
 8005220:	4b9a      	ldr	r3, [pc, #616]	@ (800548c <main+0x6fc>)
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
  	data.oy = 0;
 8005228:	4b98      	ldr	r3, [pc, #608]	@ (800548c <main+0x6fc>)
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	611a      	str	r2, [r3, #16]
  	data.y = 0;
 8005230:	4b96      	ldr	r3, [pc, #600]	@ (800548c <main+0x6fc>)
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	605a      	str	r2, [r3, #4]
  	data.oz = 0;
 8005238:	4b94      	ldr	r3, [pc, #592]	@ (800548c <main+0x6fc>)
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	615a      	str	r2, [r3, #20]
  	data.z = 0;
 8005240:	4b92      	ldr	r3, [pc, #584]	@ (800548c <main+0x6fc>)
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	609a      	str	r2, [r3, #8]


  	pid_pitch = 0;
 8005248:	4b91      	ldr	r3, [pc, #580]	@ (8005490 <main+0x700>)
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
  	pid_yaw = 0;
 8005250:	4b90      	ldr	r3, [pc, #576]	@ (8005494 <main+0x704>)
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
  	pid_rool = 0;
 8005258:	4b8f      	ldr	r3, [pc, #572]	@ (8005498 <main+0x708>)
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

  	pid_angular_rate_pitch = 0;
 8005260:	4b8e      	ldr	r3, [pc, #568]	@ (800549c <main+0x70c>)
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_yaw = 0;
 8005268:	4b8d      	ldr	r3, [pc, #564]	@ (80054a0 <main+0x710>)
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
  	pid_angular_rate_rool = 0;
 8005270:	4b8c      	ldr	r3, [pc, #560]	@ (80054a4 <main+0x714>)
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	601a      	str	r2, [r3, #0]


  	uint8_t o[3] = "Odb";
 8005278:	4a8b      	ldr	r2, [pc, #556]	@ (80054a8 <main+0x718>)
 800527a:	f107 0308 	add.w	r3, r7, #8
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	4611      	mov	r1, r2
 8005282:	8019      	strh	r1, [r3, #0]
 8005284:	3302      	adds	r3, #2
 8005286:	0c12      	lsrs	r2, r2, #16
 8005288:	701a      	strb	r2, [r3, #0]
  	uint8_t n[3] = "Nad";
 800528a:	4a88      	ldr	r2, [pc, #544]	@ (80054ac <main+0x71c>)
 800528c:	1d3b      	adds	r3, r7, #4
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	4611      	mov	r1, r2
 8005292:	8019      	strh	r1, [r3, #0]
 8005294:	3302      	adds	r3, #2
 8005296:	0c12      	lsrs	r2, r2, #16
 8005298:	701a      	strb	r2, [r3, #0]


  	LED_5_1;
 800529a:	2201      	movs	r2, #1
 800529c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052a0:	4883      	ldr	r0, [pc, #524]	@ (80054b0 <main+0x720>)
 80052a2:	f008 fe8d 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_6_1;
 80052a6:	2201      	movs	r2, #1
 80052a8:	2108      	movs	r1, #8
 80052aa:	4882      	ldr	r0, [pc, #520]	@ (80054b4 <main+0x724>)
 80052ac:	f008 fe88 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_7_1;
 80052b0:	2201      	movs	r2, #1
 80052b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052b6:	487e      	ldr	r0, [pc, #504]	@ (80054b0 <main+0x720>)
 80052b8:	f008 fe82 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_uSD_1;
 80052bc:	2201      	movs	r2, #1
 80052be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052c2:	487d      	ldr	r0, [pc, #500]	@ (80054b8 <main+0x728>)
 80052c4:	f008 fe7c 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_G_1;
 80052c8:	2201      	movs	r2, #1
 80052ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052ce:	4879      	ldr	r0, [pc, #484]	@ (80054b4 <main+0x724>)
 80052d0:	f008 fe76 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_Y_1;
 80052d4:	2201      	movs	r2, #1
 80052d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052da:	4878      	ldr	r0, [pc, #480]	@ (80054bc <main+0x72c>)
 80052dc:	f008 fe70 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_R_1;
 80052e0:	2201      	movs	r2, #1
 80052e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80052e6:	4875      	ldr	r0, [pc, #468]	@ (80054bc <main+0x72c>)
 80052e8:	f008 fe6a 	bl	800dfc0 <HAL_GPIO_WritePin>
  	HAL_Delay(1000);
 80052ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80052f0:	f003 fd08 	bl	8008d04 <HAL_Delay>
  	LED_G_0;
 80052f4:	2200      	movs	r2, #0
 80052f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052fa:	486e      	ldr	r0, [pc, #440]	@ (80054b4 <main+0x724>)
 80052fc:	f008 fe60 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_Y_0;
 8005300:	2200      	movs	r2, #0
 8005302:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005306:	486d      	ldr	r0, [pc, #436]	@ (80054bc <main+0x72c>)
 8005308:	f008 fe5a 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_R_0;
 800530c:	2200      	movs	r2, #0
 800530e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005312:	486a      	ldr	r0, [pc, #424]	@ (80054bc <main+0x72c>)
 8005314:	f008 fe54 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_5_0;
 8005318:	2200      	movs	r2, #0
 800531a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800531e:	4864      	ldr	r0, [pc, #400]	@ (80054b0 <main+0x720>)
 8005320:	f008 fe4e 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_6_0;
 8005324:	2200      	movs	r2, #0
 8005326:	2108      	movs	r1, #8
 8005328:	4862      	ldr	r0, [pc, #392]	@ (80054b4 <main+0x724>)
 800532a:	f008 fe49 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_7_0;
 800532e:	2200      	movs	r2, #0
 8005330:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005334:	485e      	ldr	r0, [pc, #376]	@ (80054b0 <main+0x720>)
 8005336:	f008 fe43 	bl	800dfc0 <HAL_GPIO_WritePin>
  	LED_uSD_0;
 800533a:	2200      	movs	r2, #0
 800533c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005340:	485d      	ldr	r0, [pc, #372]	@ (80054b8 <main+0x728>)
 8005342:	f008 fe3d 	bl	800dfc0 <HAL_GPIO_WritePin>




  	for(int i = 0; i < 4000; i++){
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	e009      	b.n	8005360 <main+0x5d0>
  		Old_Data_stack.olddata[i] = 0;
 800534c:	4a5c      	ldr	r2, [pc, #368]	@ (80054c0 <main+0x730>)
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
  	for(int i = 0; i < 4000; i++){
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3301      	adds	r3, #1
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8005366:	dbf1      	blt.n	800534c <main+0x5bc>
  	}
  	Old_Data_stack.start_pointer = 0;
 8005368:	4b55      	ldr	r3, [pc, #340]	@ (80054c0 <main+0x730>)
 800536a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800536e:	2200      	movs	r2, #0
 8005370:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
  	Old_Data_stack.end_pointer = 4000;
 8005374:	4b52      	ldr	r3, [pc, #328]	@ (80054c0 <main+0x730>)
 8005376:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800537a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800537e:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa

  	analogmess = 0;
 8005382:	4b50      	ldr	r3, [pc, #320]	@ (80054c4 <main+0x734>)
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]


  	HAL_TIM_Base_Start(&htim8);
 8005388:	484f      	ldr	r0, [pc, #316]	@ (80054c8 <main+0x738>)
 800538a:	f010 fc09 	bl	8015ba0 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc2, &analogmess, 1);//todo psuje program
 800538e:	2201      	movs	r2, #1
 8005390:	494c      	ldr	r1, [pc, #304]	@ (80054c4 <main+0x734>)
 8005392:	484e      	ldr	r0, [pc, #312]	@ (80054cc <main+0x73c>)
 8005394:	f004 f9ce 	bl	8009734 <HAL_ADC_Start_DMA>
  	LED_R_1;
 8005398:	2201      	movs	r2, #1
 800539a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800539e:	4847      	ldr	r0, [pc, #284]	@ (80054bc <main+0x72c>)
 80053a0:	f008 fe0e 	bl	800dfc0 <HAL_GPIO_WritePin>
  	while(analogmess == 0){
 80053a4:	bf00      	nop
 80053a6:	4b47      	ldr	r3, [pc, #284]	@ (80054c4 <main+0x734>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0fb      	beq.n	80053a6 <main+0x616>

  	}
  	LED_R_0;
 80053ae:	2200      	movs	r2, #0
 80053b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80053b4:	4841      	ldr	r0, [pc, #260]	@ (80054bc <main+0x72c>)
 80053b6:	f008 fe03 	bl	800dfc0 <HAL_GPIO_WritePin>

  	Get_batteryvalue();
 80053ba:	f7fe fde1 	bl	8003f80 <Get_batteryvalue>

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//pwm do diodt RGB
 80053be:	2104      	movs	r1, #4
 80053c0:	4843      	ldr	r0, [pc, #268]	@ (80054d0 <main+0x740>)
 80053c2:	f010 fd49 	bl	8015e58 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80053c6:	2108      	movs	r1, #8
 80053c8:	4841      	ldr	r0, [pc, #260]	@ (80054d0 <main+0x740>)
 80053ca:	f010 fd45 	bl	8015e58 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80053ce:	210c      	movs	r1, #12
 80053d0:	483f      	ldr	r0, [pc, #252]	@ (80054d0 <main+0x740>)
 80053d2:	f010 fd41 	bl	8015e58 <HAL_TIM_PWM_Start>


  	RGB_LED_For_BAT(MYDRON.batterysize);
 80053d6:	4b3f      	ldr	r3, [pc, #252]	@ (80054d4 <main+0x744>)
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 fd43 	bl	8006e68 <RGB_LED_For_BAT>
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 80053e2:	4b3c      	ldr	r3, [pc, #240]	@ (80054d4 <main+0x744>)
 80053e4:	8a9b      	ldrh	r3, [r3, #20]
 80053e6:	2b07      	cmp	r3, #7
 80053e8:	d107      	bne.n	80053fa <main+0x66a>
  	{
  		LED_R_1;
 80053ea:	2201      	movs	r2, #1
 80053ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80053f0:	4832      	ldr	r0, [pc, #200]	@ (80054bc <main+0x72c>)
 80053f2:	f008 fde5 	bl	800dfc0 <HAL_GPIO_WritePin>
  		while(1){
 80053f6:	bf00      	nop
 80053f8:	e7fd      	b.n	80053f6 <main+0x666>

  		}
  	}
  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80053fa:	4b36      	ldr	r3, [pc, #216]	@ (80054d4 <main+0x744>)
 80053fc:	8a9b      	ldrh	r3, [r3, #20]
 80053fe:	2b09      	cmp	r3, #9
 8005400:	d107      	bne.n	8005412 <main+0x682>
  		LED_R_1;
 8005402:	2201      	movs	r2, #1
 8005404:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005408:	482c      	ldr	r0, [pc, #176]	@ (80054bc <main+0x72c>)
 800540a:	f008 fdd9 	bl	800dfc0 <HAL_GPIO_WritePin>
  		while(1){
 800540e:	bf00      	nop
 8005410:	e7fd      	b.n	800540e <main+0x67e>
  		}
  	}


  /////////////////////////////// uSD
	SD_enable_Flag = HAL_GPIO_ReadPin(uSD_Detection_GPIO_Port, uSD_Detection_Pin);// jezeli karta SD jest wlozona, pin CardDetect jest zwierany do masy
 8005412:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005416:	4829      	ldr	r0, [pc, #164]	@ (80054bc <main+0x72c>)
 8005418:	f008 fdba 	bl	800df90 <HAL_GPIO_ReadPin>
 800541c:	4603      	mov	r3, r0
 800541e:	461a      	mov	r2, r3
 8005420:	4b2d      	ldr	r3, [pc, #180]	@ (80054d8 <main+0x748>)
 8005422:	701a      	strb	r2, [r3, #0]

	if(SD_enable_Flag == 1){
 8005424:	4b2c      	ldr	r3, [pc, #176]	@ (80054d8 <main+0x748>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d157      	bne.n	80054dc <main+0x74c>
		SD_enable_Flag = 0;
 800542c:	4b2a      	ldr	r3, [pc, #168]	@ (80054d8 <main+0x748>)
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e056      	b.n	80054e2 <main+0x752>
 8005434:	00004138 	.word	0x00004138
 8005438:	0000412c 	.word	0x0000412c
 800543c:	00004118 	.word	0x00004118
 8005440:	0000414c 	.word	0x0000414c
 8005444:	00004124 	.word	0x00004124
 8005448:	00004130 	.word	0x00004130
 800544c:	0000411c 	.word	0x0000411c
 8005450:	00004160 	.word	0x00004160
 8005454:	00004128 	.word	0x00004128
 8005458:	00004134 	.word	0x00004134
 800545c:	000040b4 	.word	0x000040b4
 8005460:	000040d8 	.word	0x000040d8
 8005464:	000040c0 	.word	0x000040c0
 8005468:	000040cc 	.word	0x000040cc
 800546c:	000040b8 	.word	0x000040b8
 8005470:	000040ec 	.word	0x000040ec
 8005474:	000040c4 	.word	0x000040c4
 8005478:	000040d0 	.word	0x000040d0
 800547c:	000040bc 	.word	0x000040bc
 8005480:	00004100 	.word	0x00004100
 8005484:	000040c8 	.word	0x000040c8
 8005488:	000040d4 	.word	0x000040d4
 800548c:	00000064 	.word	0x00000064
 8005490:	0000409c 	.word	0x0000409c
 8005494:	000040a0 	.word	0x000040a0
 8005498:	000040a4 	.word	0x000040a4
 800549c:	000040a8 	.word	0x000040a8
 80054a0:	000040ac 	.word	0x000040ac
 80054a4:	000040b0 	.word	0x000040b0
 80054a8:	0801e31c 	.word	0x0801e31c
 80054ac:	0801e320 	.word	0x0801e320
 80054b0:	58020000 	.word	0x58020000
 80054b4:	58021000 	.word	0x58021000
 80054b8:	58020c00 	.word	0x58020c00
 80054bc:	58020400 	.word	0x58020400
 80054c0:	00000184 	.word	0x00000184
 80054c4:	24000ed0 	.word	0x24000ed0
 80054c8:	24000464 	.word	0x24000464
 80054cc:	240000ac 	.word	0x240000ac
 80054d0:	24000380 	.word	0x24000380
 80054d4:	00000160 	.word	0x00000160
 80054d8:	000041b4 	.word	0x000041b4
	}
	else{
		SD_enable_Flag = 1;
 80054dc:	4bb2      	ldr	r3, [pc, #712]	@ (80057a8 <main+0xa18>)
 80054de:	2201      	movs	r2, #1
 80054e0:	701a      	strb	r2, [r3, #0]
	}

	if(SD_enable_Flag == 1){
 80054e2:	4bb1      	ldr	r3, [pc, #708]	@ (80057a8 <main+0xa18>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d15f      	bne.n	80055aa <main+0x81a>
		LED_uSD_1;
 80054ea:	2201      	movs	r2, #1
 80054ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80054f0:	48ae      	ldr	r0, [pc, #696]	@ (80057ac <main+0xa1c>)
 80054f2:	f008 fd65 	bl	800dfc0 <HAL_GPIO_WritePin>
		fresult = f_mount(&fs, "/", 1);
 80054f6:	2201      	movs	r2, #1
 80054f8:	49ad      	ldr	r1, [pc, #692]	@ (80057b0 <main+0xa20>)
 80054fa:	48ae      	ldr	r0, [pc, #696]	@ (80057b4 <main+0xa24>)
 80054fc:	f017 fbc2 	bl	801cc84 <f_mount>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	4bac      	ldr	r3, [pc, #688]	@ (80057b8 <main+0xa28>)
 8005506:	701a      	strb	r2, [r3, #0]
		fresult = f_unlink("/file.txt");//skasowanie poprzedniego pliku
 8005508:	48ac      	ldr	r0, [pc, #688]	@ (80057bc <main+0xa2c>)
 800550a:	f018 f805 	bl	801d518 <f_unlink>
 800550e:	4603      	mov	r3, r0
 8005510:	461a      	mov	r2, r3
 8005512:	4ba9      	ldr	r3, [pc, #676]	@ (80057b8 <main+0xa28>)
 8005514:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(&fs, "/", 1);
 8005516:	2201      	movs	r2, #1
 8005518:	49a5      	ldr	r1, [pc, #660]	@ (80057b0 <main+0xa20>)
 800551a:	48a6      	ldr	r0, [pc, #664]	@ (80057b4 <main+0xa24>)
 800551c:	f017 fbb2 	bl	801cc84 <f_mount>
 8005520:	4603      	mov	r3, r0
 8005522:	461a      	mov	r2, r3
 8005524:	4ba4      	ldr	r3, [pc, #656]	@ (80057b8 <main+0xa28>)
 8005526:	701a      	strb	r2, [r3, #0]
		fresult = f_open(&fil, "file.txt", FA_CREATE_ALWAYS | FA_WRITE);// utwozenie nowego pliku
 8005528:	220a      	movs	r2, #10
 800552a:	49a5      	ldr	r1, [pc, #660]	@ (80057c0 <main+0xa30>)
 800552c:	48a5      	ldr	r0, [pc, #660]	@ (80057c4 <main+0xa34>)
 800552e:	f017 fbef 	bl	801cd10 <f_open>
 8005532:	4603      	mov	r3, r0
 8005534:	461a      	mov	r2, r3
 8005536:	4ba0      	ldr	r3, [pc, #640]	@ (80057b8 <main+0xa28>)
 8005538:	701a      	strb	r2, [r3, #0]
		LED_uSD_0;
 800553a:	2200      	movs	r2, #0
 800553c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005540:	489a      	ldr	r0, [pc, #616]	@ (80057ac <main+0xa1c>)
 8005542:	f008 fd3d 	bl	800dfc0 <HAL_GPIO_WritePin>

		LED_uSD_1;
 8005546:	2201      	movs	r2, #1
 8005548:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800554c:	4897      	ldr	r0, [pc, #604]	@ (80057ac <main+0xa1c>)
 800554e:	f008 fd37 	bl	800dfc0 <HAL_GPIO_WritePin>
		for(int i = 0; i < 129000; i++){
 8005552:	2300      	movs	r3, #0
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e007      	b.n	8005568 <main+0x7d8>
			DataToSendBuffer[i] = 49;
 8005558:	4a9b      	ldr	r2, [pc, #620]	@ (80057c8 <main+0xa38>)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	4413      	add	r3, r2
 800555e:	2231      	movs	r2, #49	@ 0x31
 8005560:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 129000; i++){
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	3301      	adds	r3, #1
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	4a98      	ldr	r2, [pc, #608]	@ (80057cc <main+0xa3c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	ddf3      	ble.n	8005558 <main+0x7c8>
		}
		fresult = f_write(&fil, DataToSendBuffer, 129, &bw);//64000
 8005570:	4b97      	ldr	r3, [pc, #604]	@ (80057d0 <main+0xa40>)
 8005572:	2281      	movs	r2, #129	@ 0x81
 8005574:	4994      	ldr	r1, [pc, #592]	@ (80057c8 <main+0xa38>)
 8005576:	4893      	ldr	r0, [pc, #588]	@ (80057c4 <main+0xa34>)
 8005578:	f017 fd92 	bl	801d0a0 <f_write>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	4b8d      	ldr	r3, [pc, #564]	@ (80057b8 <main+0xa28>)
 8005582:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 8005584:	488f      	ldr	r0, [pc, #572]	@ (80057c4 <main+0xa34>)
 8005586:	f017 ff9d 	bl	801d4c4 <f_close>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	4b8a      	ldr	r3, [pc, #552]	@ (80057b8 <main+0xa28>)
 8005590:	701a      	strb	r2, [r3, #0]

		if(fresult != FR_OK){
 8005592:	4b89      	ldr	r3, [pc, #548]	@ (80057b8 <main+0xa28>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <main+0x80e>
			while(1){
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <main+0x80a>

			}
		}
		LED_uSD_0;
 800559e:	2200      	movs	r2, #0
 80055a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055a4:	4881      	ldr	r0, [pc, #516]	@ (80057ac <main+0xa1c>)
 80055a6:	f008 fd0b 	bl	800dfc0 <HAL_GPIO_WritePin>
	}

	/////////////////////////////// MPU6050
		LED_5_1;
 80055aa:	2201      	movs	r2, #1
 80055ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055b0:	4888      	ldr	r0, [pc, #544]	@ (80057d4 <main+0xa44>)
 80055b2:	f008 fd05 	bl	800dfc0 <HAL_GPIO_WritePin>
		if(MPU6050_INIT(&hi2c5) == 0){
 80055b6:	4888      	ldr	r0, [pc, #544]	@ (80057d8 <main+0xa48>)
 80055b8:	f7fb fdf4 	bl	80011a4 <MPU6050_INIT>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d107      	bne.n	80055d2 <main+0x842>
			LED_R_1;
 80055c2:	2201      	movs	r2, #1
 80055c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80055c8:	4884      	ldr	r0, [pc, #528]	@ (80057dc <main+0xa4c>)
 80055ca:	f008 fcf9 	bl	800dfc0 <HAL_GPIO_WritePin>
			while(1){
 80055ce:	bf00      	nop
 80055d0:	e7fd      	b.n	80055ce <main+0x83e>
			}
		}
		LED_Y_1;
 80055d2:	2201      	movs	r2, #1
 80055d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80055d8:	4880      	ldr	r0, [pc, #512]	@ (80057dc <main+0xa4c>)
 80055da:	f008 fcf1 	bl	800dfc0 <HAL_GPIO_WritePin>
		MPU6050_CALIBRATION(&accelx_cal, &accely_cal, &accelz_cal, &gyrox_cal, &gyroy_cal, &gyroz_cal, Gyr_Scale, Acc_Scale);
 80055de:	eddf 7a80 	vldr	s15, [pc, #512]	@ 80057e0 <main+0xa50>
 80055e2:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80057e4 <main+0xa54>
 80055e6:	4b80      	ldr	r3, [pc, #512]	@ (80057e8 <main+0xa58>)
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	4b80      	ldr	r3, [pc, #512]	@ (80057ec <main+0xa5c>)
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	eef0 0a47 	vmov.f32	s1, s14
 80055f2:	eeb0 0a67 	vmov.f32	s0, s15
 80055f6:	4b7e      	ldr	r3, [pc, #504]	@ (80057f0 <main+0xa60>)
 80055f8:	4a7e      	ldr	r2, [pc, #504]	@ (80057f4 <main+0xa64>)
 80055fa:	497f      	ldr	r1, [pc, #508]	@ (80057f8 <main+0xa68>)
 80055fc:	487f      	ldr	r0, [pc, #508]	@ (80057fc <main+0xa6c>)
 80055fe:	f7fb fe9b 	bl	8001338 <MPU6050_CALIBRATION>
		LED_Y_0;
 8005602:	2200      	movs	r2, #0
 8005604:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005608:	4874      	ldr	r0, [pc, #464]	@ (80057dc <main+0xa4c>)
 800560a:	f008 fcd9 	bl	800dfc0 <HAL_GPIO_WritePin>

	/////////////////////////////// BMP180
		if(BMP180_init(&hi2c5) == 0){
 800560e:	4872      	ldr	r0, [pc, #456]	@ (80057d8 <main+0xa48>)
 8005610:	f7fb f85e 	bl	80006d0 <BMP180_init>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d107      	bne.n	800562a <main+0x89a>
			LED_R_1;
 800561a:	2201      	movs	r2, #1
 800561c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005620:	486e      	ldr	r0, [pc, #440]	@ (80057dc <main+0xa4c>)
 8005622:	f008 fccd 	bl	800dfc0 <HAL_GPIO_WritePin>
			while(1){
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <main+0x896>
			}
		}
		LED_Y_1;
 800562a:	2201      	movs	r2, #1
 800562c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005630:	486a      	ldr	r0, [pc, #424]	@ (80057dc <main+0xa4c>)
 8005632:	f008 fcc5 	bl	800dfc0 <HAL_GPIO_WritePin>
		BMP180_CALIBRATION(&startpres);
 8005636:	4872      	ldr	r0, [pc, #456]	@ (8005800 <main+0xa70>)
 8005638:	f7fb fb9c 	bl	8000d74 <BMP180_CALIBRATION>
		LED_Y_0;
 800563c:	2200      	movs	r2, #0
 800563e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005642:	4866      	ldr	r0, [pc, #408]	@ (80057dc <main+0xa4c>)
 8005644:	f008 fcbc 	bl	800dfc0 <HAL_GPIO_WritePin>
	/////////////////////////////// HMC5883L
		if(HMC5883L_Init(&hi2c5) == 0){
 8005648:	4863      	ldr	r0, [pc, #396]	@ (80057d8 <main+0xa48>)
 800564a:	f7fb fcc5 	bl	8000fd8 <HMC5883L_Init>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d107      	bne.n	8005664 <main+0x8d4>
			LED_R_1;
 8005654:	2201      	movs	r2, #1
 8005656:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800565a:	4860      	ldr	r0, [pc, #384]	@ (80057dc <main+0xa4c>)
 800565c:	f008 fcb0 	bl	800dfc0 <HAL_GPIO_WritePin>
			while(1){
 8005660:	bf00      	nop
 8005662:	e7fd      	b.n	8005660 <main+0x8d0>
			}
		}
		LED_Y_1;
 8005664:	2201      	movs	r2, #1
 8005666:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800566a:	485c      	ldr	r0, [pc, #368]	@ (80057dc <main+0xa4c>)
 800566c:	f008 fca8 	bl	800dfc0 <HAL_GPIO_WritePin>
		Mag_Offset_val = HMC5883L_Calibration();
 8005670:	f7fb fd62 	bl	8001138 <HMC5883L_Calibration>
 8005674:	4603      	mov	r3, r0
 8005676:	461a      	mov	r2, r3
 8005678:	4b62      	ldr	r3, [pc, #392]	@ (8005804 <main+0xa74>)
 800567a:	801a      	strh	r2, [r3, #0]
		LED_Y_0;
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005682:	4856      	ldr	r0, [pc, #344]	@ (80057dc <main+0xa4c>)
 8005684:	f008 fc9c 	bl	800dfc0 <HAL_GPIO_WritePin>

		LED_5_0;
 8005688:	2200      	movs	r2, #0
 800568a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800568e:	4851      	ldr	r0, [pc, #324]	@ (80057d4 <main+0xa44>)
 8005690:	f008 fc96 	bl	800dfc0 <HAL_GPIO_WritePin>



		MYDRON.dron_status.Connection = DRON_CONNECTED;
 8005694:	4b5c      	ldr	r3, [pc, #368]	@ (8005808 <main+0xa78>)
 8005696:	2201      	movs	r2, #1
 8005698:	825a      	strh	r2, [r3, #18]
		MYDRON.dron_status.position = DRON_POSITION_OK;
 800569a:	4b5b      	ldr	r3, [pc, #364]	@ (8005808 <main+0xa78>)
 800569c:	220c      	movs	r2, #12
 800569e:	835a      	strh	r2, [r3, #26]


		MYDRON.THRUST = 0;
 80056a0:	4b59      	ldr	r3, [pc, #356]	@ (8005808 <main+0xa78>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	805a      	strh	r2, [r3, #2]




	/////////////////////////////// nRF24
		LED_6_1;
 80056a6:	2201      	movs	r2, #1
 80056a8:	2108      	movs	r1, #8
 80056aa:	4858      	ldr	r0, [pc, #352]	@ (800580c <main+0xa7c>)
 80056ac:	f008 fc88 	bl	800dfc0 <HAL_GPIO_WritePin>
		nRF24_Init(&hspi6);
 80056b0:	4857      	ldr	r0, [pc, #348]	@ (8005810 <main+0xa80>)
 80056b2:	f7fc ff81 	bl	80025b8 <nRF24_Init>
		nRF24_SetRXAddress(0, o);
 80056b6:	f107 0308 	add.w	r3, r7, #8
 80056ba:	4619      	mov	r1, r3
 80056bc:	2000      	movs	r0, #0
 80056be:	f7fc fe20 	bl	8002302 <nRF24_SetRXAddress>
		nRF24_SetTXAddress(n);
 80056c2:	1d3b      	adds	r3, r7, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fc fe55 	bl	8002374 <nRF24_SetTXAddress>
		nRF24_Inittest();
 80056ca:	f7fc ffc9 	bl	8002660 <nRF24_Inittest>
		nRF24_TX_Mode();
 80056ce:	f7fc fc43 	bl	8001f58 <nRF24_TX_Mode>


		for(int i = 0; i < 32; i++){
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	e007      	b.n	80056e8 <main+0x958>
			Txcode[i] = 0;
 80056d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005814 <main+0xa84>)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	4413      	add	r3, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++){
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	3301      	adds	r3, #1
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b1f      	cmp	r3, #31
 80056ec:	ddf4      	ble.n	80056d8 <main+0x948>
		}
		Txcode[22] = 'd';
 80056ee:	4b49      	ldr	r3, [pc, #292]	@ (8005814 <main+0xa84>)
 80056f0:	2264      	movs	r2, #100	@ 0x64
 80056f2:	759a      	strb	r2, [r3, #22]
		Txcode[23] = 'r';
 80056f4:	4b47      	ldr	r3, [pc, #284]	@ (8005814 <main+0xa84>)
 80056f6:	2272      	movs	r2, #114	@ 0x72
 80056f8:	75da      	strb	r2, [r3, #23]
		Txcode[24] = 'o';
 80056fa:	4b46      	ldr	r3, [pc, #280]	@ (8005814 <main+0xa84>)
 80056fc:	226f      	movs	r2, #111	@ 0x6f
 80056fe:	761a      	strb	r2, [r3, #24]
		Txcode[25] = 'n';
 8005700:	4b44      	ldr	r3, [pc, #272]	@ (8005814 <main+0xa84>)
 8005702:	226e      	movs	r2, #110	@ 0x6e
 8005704:	765a      	strb	r2, [r3, #25]
		Txcode[26] = '2';
 8005706:	4b43      	ldr	r3, [pc, #268]	@ (8005814 <main+0xa84>)
 8005708:	2232      	movs	r2, #50	@ 0x32
 800570a:	769a      	strb	r2, [r3, #26]
		Txcode[27] = 'c';
 800570c:	4b41      	ldr	r3, [pc, #260]	@ (8005814 <main+0xa84>)
 800570e:	2263      	movs	r2, #99	@ 0x63
 8005710:	76da      	strb	r2, [r3, #27]
		Txcode[28] = '1';
 8005712:	4b40      	ldr	r3, [pc, #256]	@ (8005814 <main+0xa84>)
 8005714:	2231      	movs	r2, #49	@ 0x31
 8005716:	771a      	strb	r2, [r3, #28]
		Txcode[29] = 'z';
 8005718:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <main+0xa84>)
 800571a:	227a      	movs	r2, #122	@ 0x7a
 800571c:	775a      	strb	r2, [r3, #29]
		Txcode[30] = 'a';
 800571e:	4b3d      	ldr	r3, [pc, #244]	@ (8005814 <main+0xa84>)
 8005720:	2261      	movs	r2, #97	@ 0x61
 8005722:	779a      	strb	r2, [r3, #30]
		Txcode[31] = '7';
 8005724:	4b3b      	ldr	r3, [pc, #236]	@ (8005814 <main+0xa84>)
 8005726:	2237      	movs	r2, #55	@ 0x37
 8005728:	77da      	strb	r2, [r3, #31]



		nRF24_WriteTXPayload(Txcode);
 800572a:	483a      	ldr	r0, [pc, #232]	@ (8005814 <main+0xa84>)
 800572c:	f7fc fed2 	bl	80024d4 <nRF24_WriteTXPayload>
		nRF24_WaitTX();
 8005730:	f7fc fede 	bl	80024f0 <nRF24_WaitTX>
		nRF24_RX_Mode();
 8005734:	f7fc fbe4 	bl	8001f00 <nRF24_RX_Mode>

		uint8_t cunter = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	74fb      	strb	r3, [r7, #19]

		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 800573c:	e022      	b.n	8005784 <main+0x9f4>
			LED_G_1;
 800573e:	2201      	movs	r2, #1
 8005740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005744:	4831      	ldr	r0, [pc, #196]	@ (800580c <main+0xa7c>)
 8005746:	f008 fc3b 	bl	800dfc0 <HAL_GPIO_WritePin>
			LED_Y_1;
 800574a:	2201      	movs	r2, #1
 800574c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005750:	4822      	ldr	r0, [pc, #136]	@ (80057dc <main+0xa4c>)
 8005752:	f008 fc35 	bl	800dfc0 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005756:	2001      	movs	r0, #1
 8005758:	f003 fad4 	bl	8008d04 <HAL_Delay>
			LED_G_0;
 800575c:	2200      	movs	r2, #0
 800575e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005762:	482a      	ldr	r0, [pc, #168]	@ (800580c <main+0xa7c>)
 8005764:	f008 fc2c 	bl	800dfc0 <HAL_GPIO_WritePin>
			LED_Y_0;
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800576e:	481b      	ldr	r0, [pc, #108]	@ (80057dc <main+0xa4c>)
 8005770:	f008 fc26 	bl	800dfc0 <HAL_GPIO_WritePin>

			cunter++;
 8005774:	7cfb      	ldrb	r3, [r7, #19]
 8005776:	3301      	adds	r3, #1
 8005778:	74fb      	strb	r3, [r7, #19]
			if(cunter == 100){
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	2b64      	cmp	r3, #100	@ 0x64
 800577e:	d101      	bne.n	8005784 <main+0x9f4>
				NVIC_SystemReset();
 8005780:	f7ff faf0 	bl	8004d64 <__NVIC_SystemReset>
		while(nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY) == 1){
 8005784:	2000      	movs	r0, #0
 8005786:	f7fc fef7 	bl	8002578 <nRF24_IsBitSetInFifoStatus>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d0d6      	beq.n	800573e <main+0x9ae>
			}
		}

		nRF24_ReadRXPaylaod(RxData);
 8005790:	4821      	ldr	r0, [pc, #132]	@ (8005818 <main+0xa88>)
 8005792:	f7fc fed5 	bl	8002540 <nRF24_ReadRXPaylaod>
		LED_6_0;
 8005796:	2200      	movs	r2, #0
 8005798:	2108      	movs	r1, #8
 800579a:	481c      	ldr	r0, [pc, #112]	@ (800580c <main+0xa7c>)
 800579c:	f008 fc10 	bl	800dfc0 <HAL_GPIO_WritePin>
		for(int i = 12; i < 22; i++){
 80057a0:	230c      	movs	r3, #12
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	e046      	b.n	8005834 <main+0xaa4>
 80057a6:	bf00      	nop
 80057a8:	000041b4 	.word	0x000041b4
 80057ac:	58020c00 	.word	0x58020c00
 80057b0:	0801e300 	.word	0x0801e300
 80057b4:	24000ed4 	.word	0x24000ed4
 80057b8:	24001f0c 	.word	0x24001f0c
 80057bc:	0801e304 	.word	0x0801e304
 80057c0:	0801e310 	.word	0x0801e310
 80057c4:	24001f10 	.word	0x24001f10
 80057c8:	24002f48 	.word	0x24002f48
 80057cc:	0001f7e7 	.word	0x0001f7e7
 80057d0:	24002f44 	.word	0x24002f44
 80057d4:	58020000 	.word	0x58020000
 80057d8:	24000198 	.word	0x24000198
 80057dc:	58020400 	.word	0x58020400
 80057e0:	42830000 	.word	0x42830000
 80057e4:	46000000 	.word	0x46000000
 80057e8:	00000044 	.word	0x00000044
 80057ec:	00000040 	.word	0x00000040
 80057f0:	0000003c 	.word	0x0000003c
 80057f4:	00000038 	.word	0x00000038
 80057f8:	00000034 	.word	0x00000034
 80057fc:	00000030 	.word	0x00000030
 8005800:	000000cc 	.word	0x000000cc
 8005804:	00000050 	.word	0x00000050
 8005808:	00000160 	.word	0x00000160
 800580c:	58021000 	.word	0x58021000
 8005810:	24000274 	.word	0x24000274
 8005814:	000000f4 	.word	0x000000f4
 8005818:	000000d4 	.word	0x000000d4
			Rxcode[i] = RxData[i];
 800581c:	4a96      	ldr	r2, [pc, #600]	@ (8005a78 <main+0xce8>)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	7819      	ldrb	r1, [r3, #0]
 8005824:	4a95      	ldr	r2, [pc, #596]	@ (8005a7c <main+0xcec>)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	460a      	mov	r2, r1
 800582c:	701a      	strb	r2, [r3, #0]
		for(int i = 12; i < 22; i++){
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3301      	adds	r3, #1
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b15      	cmp	r3, #21
 8005838:	ddf0      	ble.n	800581c <main+0xa8c>
		}
	///////////////////////////////////////////////////////////////////////
		ESC_INT(&htim3);
 800583a:	4891      	ldr	r0, [pc, #580]	@ (8005a80 <main+0xcf0>)
 800583c:	f7fb fb82 	bl	8000f44 <ESC_INT>

		LED_7_1;
 8005840:	2201      	movs	r2, #1
 8005842:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005846:	488f      	ldr	r0, [pc, #572]	@ (8005a84 <main+0xcf4>)
 8005848:	f008 fbba 	bl	800dfc0 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart1, &Received, 1);
 800584c:	2201      	movs	r2, #1
 800584e:	498e      	ldr	r1, [pc, #568]	@ (8005a88 <main+0xcf8>)
 8005850:	488e      	ldr	r0, [pc, #568]	@ (8005a8c <main+0xcfc>)
 8005852:	f012 f885 	bl	8017960 <HAL_UART_Receive_IT>
		LED_7_0;
 8005856:	2200      	movs	r2, #0
 8005858:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800585c:	4889      	ldr	r0, [pc, #548]	@ (8005a84 <main+0xcf4>)
 800585e:	f008 fbaf 	bl	800dfc0 <HAL_GPIO_WritePin>

		HAL_TIM_Base_Start_IT(&htim2); // przerwanie co 1 ms
 8005862:	488b      	ldr	r0, [pc, #556]	@ (8005a90 <main+0xd00>)
 8005864:	f010 fa1a 	bl	8015c9c <HAL_TIM_Base_Start_IT>



	  	RGB_LED_For_BAT(MYDRON.batterysize);
 8005868:	4b8a      	ldr	r3, [pc, #552]	@ (8005a94 <main+0xd04>)
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fafa 	bl	8006e68 <RGB_LED_For_BAT>


	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT)
 8005874:	4b87      	ldr	r3, [pc, #540]	@ (8005a94 <main+0xd04>)
 8005876:	8a9b      	ldrh	r3, [r3, #20]
 8005878:	2b07      	cmp	r3, #7
 800587a:	d107      	bne.n	800588c <main+0xafc>
	  	{
	  		LED_R_1;
 800587c:	2201      	movs	r2, #1
 800587e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005882:	4885      	ldr	r0, [pc, #532]	@ (8005a98 <main+0xd08>)
 8005884:	f008 fb9c 	bl	800dfc0 <HAL_GPIO_WritePin>
	  		while(1){
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <main+0xaf8>
	  		}
	  	}



	  	if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 800588c:	4b81      	ldr	r3, [pc, #516]	@ (8005a94 <main+0xd04>)
 800588e:	8a9b      	ldrh	r3, [r3, #20]
 8005890:	2b09      	cmp	r3, #9
 8005892:	d107      	bne.n	80058a4 <main+0xb14>
	  		LED_R_1;
 8005894:	2201      	movs	r2, #1
 8005896:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800589a:	487f      	ldr	r0, [pc, #508]	@ (8005a98 <main+0xd08>)
 800589c:	f008 fb90 	bl	800dfc0 <HAL_GPIO_WritePin>
	  		while(1){
 80058a0:	bf00      	nop
 80058a2:	e7fd      	b.n	80058a0 <main+0xb10>
	  		}
	  	}



		STARTUP = 0;
 80058a4:	4b7d      	ldr	r3, [pc, #500]	@ (8005a9c <main+0xd0c>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 80058aa:	4b7a      	ldr	r3, [pc, #488]	@ (8005a94 <main+0xd04>)
 80058ac:	8a9b      	ldrh	r3, [r3, #20]
 80058ae:	2b07      	cmp	r3, #7
 80058b0:	d10a      	bne.n	80058c8 <main+0xb38>
	  			LED_R_1;
 80058b2:	2201      	movs	r2, #1
 80058b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058b8:	4877      	ldr	r0, [pc, #476]	@ (8005a98 <main+0xd08>)
 80058ba:	f008 fb81 	bl	800dfc0 <HAL_GPIO_WritePin>
	  			thrust_limit = MYDRON.THRUST;
 80058be:	4b75      	ldr	r3, [pc, #468]	@ (8005a94 <main+0xd04>)
 80058c0:	885b      	ldrh	r3, [r3, #2]
 80058c2:	b21a      	sxth	r2, r3
 80058c4:	4b76      	ldr	r3, [pc, #472]	@ (8005aa0 <main+0xd10>)
 80058c6:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_OK){
 80058c8:	4b72      	ldr	r3, [pc, #456]	@ (8005a94 <main+0xd04>)
 80058ca:	8a9b      	ldrh	r3, [r3, #20]
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d103      	bne.n	80058d8 <main+0xb48>
	  			thrust_limit = 10000;
 80058d0:	4b73      	ldr	r3, [pc, #460]	@ (8005aa0 <main+0xd10>)
 80058d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80058d6:	801a      	strh	r2, [r3, #0]
	  		}
	  		if(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80058d8:	4b6e      	ldr	r3, [pc, #440]	@ (8005a94 <main+0xd04>)
 80058da:	8a9b      	ldrh	r3, [r3, #20]
 80058dc:	2b09      	cmp	r3, #9
 80058de:	d118      	bne.n	8005912 <main+0xb82>
	  			ESC_POWER_1;
 80058e0:	2201      	movs	r2, #1
 80058e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058e6:	486f      	ldr	r0, [pc, #444]	@ (8005aa4 <main+0xd14>)
 80058e8:	f008 fb6a 	bl	800dfc0 <HAL_GPIO_WritePin>
	  			LED_R_1;
 80058ec:	2201      	movs	r2, #1
 80058ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80058f2:	4869      	ldr	r0, [pc, #420]	@ (8005a98 <main+0xd08>)
 80058f4:	f008 fb64 	bl	800dfc0 <HAL_GPIO_WritePin>
	  			f_close(&fil);
 80058f8:	486b      	ldr	r0, [pc, #428]	@ (8005aa8 <main+0xd18>)
 80058fa:	f017 fde3 	bl	801d4c4 <f_close>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 80058fe:	e004      	b.n	800590a <main+0xb7a>
	  				HAL_Delay(10);
 8005900:	200a      	movs	r0, #10
 8005902:	f003 f9ff 	bl	8008d04 <HAL_Delay>
	  				Get_batteryvalue();
 8005906:	f7fe fb3b 	bl	8003f80 <Get_batteryvalue>
	  			while(MYDRON.dron_status.Battery == DRON_BATTERY_CRIT_VAL){
 800590a:	4b62      	ldr	r3, [pc, #392]	@ (8005a94 <main+0xd04>)
 800590c:	8a9b      	ldrh	r3, [r3, #20]
 800590e:	2b09      	cmp	r3, #9
 8005910:	d0f6      	beq.n	8005900 <main+0xb70>
	  			}
	  		}

	  		if(commandready == 1){
 8005912:	4b66      	ldr	r3, [pc, #408]	@ (8005aac <main+0xd1c>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d159      	bne.n	80059ce <main+0xc3e>
	  			LED_7_1;
 800591a:	2201      	movs	r2, #1
 800591c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005920:	4858      	ldr	r0, [pc, #352]	@ (8005a84 <main+0xcf4>)
 8005922:	f008 fb4d 	bl	800dfc0 <HAL_GPIO_WritePin>
	  			interpretcommand();
 8005926:	f7fc fef5 	bl	8002714 <interpretcommand>
	  			executecommand(command, UASRT_PID_VAL);
 800592a:	4961      	ldr	r1, [pc, #388]	@ (8005ab0 <main+0xd20>)
 800592c:	4861      	ldr	r0, [pc, #388]	@ (8005ab4 <main+0xd24>)
 800592e:	f7fc ff3f 	bl	80027b0 <executecommand>
	  			LED_7_0;
 8005932:	2200      	movs	r2, #0
 8005934:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005938:	4852      	ldr	r0, [pc, #328]	@ (8005a84 <main+0xcf4>)
 800593a:	f008 fb41 	bl	800dfc0 <HAL_GPIO_WritePin>

	  			PID_FAC_Pitch[0] = p_pitchfactor;
 800593e:	4b5e      	ldr	r3, [pc, #376]	@ (8005ab8 <main+0xd28>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a5e      	ldr	r2, [pc, #376]	@ (8005abc <main+0xd2c>)
 8005944:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Pitch[1] = i_pitchfactor;
 8005946:	4b5e      	ldr	r3, [pc, #376]	@ (8005ac0 <main+0xd30>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a5c      	ldr	r2, [pc, #368]	@ (8005abc <main+0xd2c>)
 800594c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Pitch[2] = d_pitchfactor;
 800594e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ac4 <main+0xd34>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a5a      	ldr	r2, [pc, #360]	@ (8005abc <main+0xd2c>)
 8005954:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Pitch[0] = p_angular_rate_pitchfactor;
 8005956:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac8 <main+0xd38>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a5c      	ldr	r2, [pc, #368]	@ (8005acc <main+0xd3c>)
 800595c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Pitch[1] = i_angular_rate_pitchfactor;
 800595e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ad0 <main+0xd40>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a5a      	ldr	r2, [pc, #360]	@ (8005acc <main+0xd3c>)
 8005964:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Pitch[2] = d_angular_rate_pitchfactor;
 8005966:	4b5b      	ldr	r3, [pc, #364]	@ (8005ad4 <main+0xd44>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a58      	ldr	r2, [pc, #352]	@ (8005acc <main+0xd3c>)
 800596c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Rool[0] = p_roolfactor;
 800596e:	4b5a      	ldr	r3, [pc, #360]	@ (8005ad8 <main+0xd48>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a5a      	ldr	r2, [pc, #360]	@ (8005adc <main+0xd4c>)
 8005974:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Rool[1] = i_roolfactor;
 8005976:	4b5a      	ldr	r3, [pc, #360]	@ (8005ae0 <main+0xd50>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a58      	ldr	r2, [pc, #352]	@ (8005adc <main+0xd4c>)
 800597c:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Rool[2] = d_roolfactor;
 800597e:	4b59      	ldr	r3, [pc, #356]	@ (8005ae4 <main+0xd54>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a56      	ldr	r2, [pc, #344]	@ (8005adc <main+0xd4c>)
 8005984:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Rool[0] = p_angular_rate_roolfactor;
 8005986:	4b58      	ldr	r3, [pc, #352]	@ (8005ae8 <main+0xd58>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a58      	ldr	r2, [pc, #352]	@ (8005aec <main+0xd5c>)
 800598c:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Rool[1] = i_angular_rate_roolfactor;
 800598e:	4b58      	ldr	r3, [pc, #352]	@ (8005af0 <main+0xd60>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a56      	ldr	r2, [pc, #344]	@ (8005aec <main+0xd5c>)
 8005994:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Rool[2] = d_angular_rate_roolfactor;
 8005996:	4b57      	ldr	r3, [pc, #348]	@ (8005af4 <main+0xd64>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a54      	ldr	r2, [pc, #336]	@ (8005aec <main+0xd5c>)
 800599c:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Yaw[0] = p_yawfactor;
 800599e:	4b56      	ldr	r3, [pc, #344]	@ (8005af8 <main+0xd68>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a56      	ldr	r2, [pc, #344]	@ (8005afc <main+0xd6c>)
 80059a4:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Yaw[1] = i_yawfactor;
 80059a6:	4b56      	ldr	r3, [pc, #344]	@ (8005b00 <main+0xd70>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a54      	ldr	r2, [pc, #336]	@ (8005afc <main+0xd6c>)
 80059ac:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Yaw[2] = d_yawfactor;
 80059ae:	4b55      	ldr	r3, [pc, #340]	@ (8005b04 <main+0xd74>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a52      	ldr	r2, [pc, #328]	@ (8005afc <main+0xd6c>)
 80059b4:	6093      	str	r3, [r2, #8]

	  			PID_FAC_Angular_Rate_Yaw[0] = p_angular_rate_yawfactor;
 80059b6:	4b54      	ldr	r3, [pc, #336]	@ (8005b08 <main+0xd78>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a54      	ldr	r2, [pc, #336]	@ (8005b0c <main+0xd7c>)
 80059bc:	6013      	str	r3, [r2, #0]
	  			PID_FAC_Angular_Rate_Yaw[1] = i_angular_rate_yawfactor;
 80059be:	4b54      	ldr	r3, [pc, #336]	@ (8005b10 <main+0xd80>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a52      	ldr	r2, [pc, #328]	@ (8005b0c <main+0xd7c>)
 80059c4:	6053      	str	r3, [r2, #4]
	  			PID_FAC_Angular_Rate_Yaw[2] = d_angular_rate_yawfactor;
 80059c6:	4b53      	ldr	r3, [pc, #332]	@ (8005b14 <main+0xd84>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a50      	ldr	r2, [pc, #320]	@ (8005b0c <main+0xd7c>)
 80059cc:	6093      	str	r3, [r2, #8]
	  		}

	  		if((TIM_inte_SD == 1) && (fresult == FR_OK) && (SD_enable_Flag == 1)){// 1ms, 1KHz
 80059ce:	4b52      	ldr	r3, [pc, #328]	@ (8005b18 <main+0xd88>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	f040 80b7 	bne.w	8005b46 <main+0xdb6>
 80059d8:	4b50      	ldr	r3, [pc, #320]	@ (8005b1c <main+0xd8c>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f040 80b2 	bne.w	8005b46 <main+0xdb6>
 80059e2:	4b4f      	ldr	r3, [pc, #316]	@ (8005b20 <main+0xd90>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	f040 80ad 	bne.w	8005b46 <main+0xdb6>
	  			TIM_inte_SD = 0;
 80059ec:	4b4a      	ldr	r3, [pc, #296]	@ (8005b18 <main+0xd88>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]

	  			uSD_Card_SendData_To_Buffer(Mainloop_Number);//todo blokuje pentle główną po ponownym uruchomieniu gdzy napięcie zsotanie odlonczone
 80059f2:	4b4c      	ldr	r3, [pc, #304]	@ (8005b24 <main+0xd94>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 fbcc 	bl	8007194 <uSD_Card_SendData_To_Buffer>

	  			if(Mainloop_Number == 999){//zapisywanie karty raz na 1 sec
 80059fc:	4b49      	ldr	r3, [pc, #292]	@ (8005b24 <main+0xd94>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d12b      	bne.n	8005a60 <main+0xcd0>
	  				SD_In_Use = 1;
 8005a08:	4b47      	ldr	r3, [pc, #284]	@ (8005b28 <main+0xd98>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
	  				LED_uSD_1;
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a14:	4845      	ldr	r0, [pc, #276]	@ (8005b2c <main+0xd9c>)
 8005a16:	f008 fad3 	bl	800dfc0 <HAL_GPIO_WritePin>
	  				fresult = f_open(&fil, "file.txt", FA_OPEN_APPEND | FA_WRITE);
 8005a1a:	2232      	movs	r2, #50	@ 0x32
 8005a1c:	4944      	ldr	r1, [pc, #272]	@ (8005b30 <main+0xda0>)
 8005a1e:	4822      	ldr	r0, [pc, #136]	@ (8005aa8 <main+0xd18>)
 8005a20:	f017 f976 	bl	801cd10 <f_open>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	4b3c      	ldr	r3, [pc, #240]	@ (8005b1c <main+0xd8c>)
 8005a2a:	701a      	strb	r2, [r3, #0]
	  				fresult = f_write(&fil, DataToSendBuffer, 129000, &bw);
 8005a2c:	4b41      	ldr	r3, [pc, #260]	@ (8005b34 <main+0xda4>)
 8005a2e:	4a42      	ldr	r2, [pc, #264]	@ (8005b38 <main+0xda8>)
 8005a30:	4942      	ldr	r1, [pc, #264]	@ (8005b3c <main+0xdac>)
 8005a32:	481d      	ldr	r0, [pc, #116]	@ (8005aa8 <main+0xd18>)
 8005a34:	f017 fb34 	bl	801d0a0 <f_write>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b37      	ldr	r3, [pc, #220]	@ (8005b1c <main+0xd8c>)
 8005a3e:	701a      	strb	r2, [r3, #0]
	  				fresult = f_close(&fil);
 8005a40:	4819      	ldr	r0, [pc, #100]	@ (8005aa8 <main+0xd18>)
 8005a42:	f017 fd3f 	bl	801d4c4 <f_close>
 8005a46:	4603      	mov	r3, r0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4b34      	ldr	r3, [pc, #208]	@ (8005b1c <main+0xd8c>)
 8005a4c:	701a      	strb	r2, [r3, #0]
	  				LED_uSD_0;
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a54:	4835      	ldr	r0, [pc, #212]	@ (8005b2c <main+0xd9c>)
 8005a56:	f008 fab3 	bl	800dfc0 <HAL_GPIO_WritePin>
	  				SD_In_Use = 0;
 8005a5a:	4b33      	ldr	r3, [pc, #204]	@ (8005b28 <main+0xd98>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
	  				}
	  			if(Mainloop_Number < 1000){
 8005a60:	4b30      	ldr	r3, [pc, #192]	@ (8005b24 <main+0xd94>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a68:	d26a      	bcs.n	8005b40 <main+0xdb0>
	  				Mainloop_Number++;
 8005a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8005b24 <main+0xd94>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	4a2c      	ldr	r2, [pc, #176]	@ (8005b24 <main+0xd94>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e067      	b.n	8005b46 <main+0xdb6>
 8005a76:	bf00      	nop
 8005a78:	000000d4 	.word	0x000000d4
 8005a7c:	00000134 	.word	0x00000134
 8005a80:	24000418 	.word	0x24000418
 8005a84:	58020000 	.word	0x58020000
 8005a88:	000041a8 	.word	0x000041a8
 8005a8c:	240004b0 	.word	0x240004b0
 8005a90:	240003cc 	.word	0x240003cc
 8005a94:	00000160 	.word	0x00000160
 8005a98:	58020400 	.word	0x58020400
 8005a9c:	0000005c 	.word	0x0000005c
 8005aa0:	00004046 	.word	0x00004046
 8005aa4:	58021800 	.word	0x58021800
 8005aa8:	24001f10 	.word	0x24001f10
 8005aac:	000041a6 	.word	0x000041a6
 8005ab0:	00004188 	.word	0x00004188
 8005ab4:	00004198 	.word	0x00004198
 8005ab8:	000040b4 	.word	0x000040b4
 8005abc:	000040d8 	.word	0x000040d8
 8005ac0:	000040c0 	.word	0x000040c0
 8005ac4:	000040cc 	.word	0x000040cc
 8005ac8:	00004114 	.word	0x00004114
 8005acc:	00004138 	.word	0x00004138
 8005ad0:	00004120 	.word	0x00004120
 8005ad4:	0000412c 	.word	0x0000412c
 8005ad8:	000040b8 	.word	0x000040b8
 8005adc:	000040ec 	.word	0x000040ec
 8005ae0:	000040c4 	.word	0x000040c4
 8005ae4:	000040d0 	.word	0x000040d0
 8005ae8:	00004118 	.word	0x00004118
 8005aec:	0000414c 	.word	0x0000414c
 8005af0:	00004124 	.word	0x00004124
 8005af4:	00004130 	.word	0x00004130
 8005af8:	000040bc 	.word	0x000040bc
 8005afc:	00004100 	.word	0x00004100
 8005b00:	000040c8 	.word	0x000040c8
 8005b04:	000040d4 	.word	0x000040d4
 8005b08:	0000411c 	.word	0x0000411c
 8005b0c:	00004160 	.word	0x00004160
 8005b10:	00004128 	.word	0x00004128
 8005b14:	00004134 	.word	0x00004134
 8005b18:	00000054 	.word	0x00000054
 8005b1c:	24001f0c 	.word	0x24001f0c
 8005b20:	000041b4 	.word	0x000041b4
 8005b24:	000041ac 	.word	0x000041ac
 8005b28:	000041b0 	.word	0x000041b0
 8005b2c:	58020c00 	.word	0x58020c00
 8005b30:	0801e310 	.word	0x0801e310
 8005b34:	24002f44 	.word	0x24002f44
 8005b38:	0001f7e8 	.word	0x0001f7e8
 8005b3c:	24002f48 	.word	0x24002f48
	  			}
	  			else{
	  				Mainloop_Number = 0;
 8005b40:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <main+0xde0>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
	  			}
	  		}

	  		if(TIM_inte == 1){
 8005b46:	4b0b      	ldr	r3, [pc, #44]	@ (8005b74 <main+0xde4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	f47f aead 	bne.w	80058aa <main+0xb1a>
	  			LED_R_0;
 8005b50:	2200      	movs	r2, #0
 8005b52:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b56:	4808      	ldr	r0, [pc, #32]	@ (8005b78 <main+0xde8>)
 8005b58:	f008 fa32 	bl	800dfc0 <HAL_GPIO_WritePin>
	  			RGB_LED_For_BAT(MYDRON.batterysize);
 8005b5c:	4b07      	ldr	r3, [pc, #28]	@ (8005b7c <main+0xdec>)
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 f980 	bl	8006e68 <RGB_LED_For_BAT>
	  			TIM_inte = 0;
 8005b68:	4b02      	ldr	r3, [pc, #8]	@ (8005b74 <main+0xde4>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
	  if(MYDRON.dron_status.Battery == DRON_BATTERY_RUN_OUT){
 8005b6e:	e69c      	b.n	80058aa <main+0xb1a>
 8005b70:	000041ac 	.word	0x000041ac
 8005b74:	00000058 	.word	0x00000058
 8005b78:	58020400 	.word	0x58020400
 8005b7c:	00000160 	.word	0x00000160

08005b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b09c      	sub	sp, #112	@ 0x70
 8005b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b8a:	224c      	movs	r2, #76	@ 0x4c
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f017 fe90 	bl	801d8b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b94:	1d3b      	adds	r3, r7, #4
 8005b96:	2220      	movs	r2, #32
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f017 fe8a 	bl	801d8b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005ba0:	2002      	movs	r0, #2
 8005ba2:	f00a febf 	bl	8010924 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	603b      	str	r3, [r7, #0]
 8005baa:	4b2d      	ldr	r3, [pc, #180]	@ (8005c60 <SystemClock_Config+0xe0>)
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	4a2c      	ldr	r2, [pc, #176]	@ (8005c60 <SystemClock_Config+0xe0>)
 8005bb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005bb4:	6193      	str	r3, [r2, #24]
 8005bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c60 <SystemClock_Config+0xe0>)
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005bc2:	bf00      	nop
 8005bc4:	4b26      	ldr	r3, [pc, #152]	@ (8005c60 <SystemClock_Config+0xe0>)
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bd0:	d1f8      	bne.n	8005bc4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSE;
 8005bd2:	2311      	movs	r3, #17
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005bd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8005bdc:	2380      	movs	r3, #128	@ 0x80
 8005bde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8005be0:	2310      	movs	r3, #16
 8005be2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005be4:	2302      	movs	r3, #2
 8005be6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005be8:	2302      	movs	r3, #2
 8005bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8005bec:	2303      	movs	r3, #3
 8005bee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8005bf0:	2344      	movs	r3, #68	@ 0x44
 8005bf2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005c00:	230c      	movs	r3, #12
 8005c02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8005c08:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c12:	4618      	mov	r0, r3
 8005c14:	f00a fec0 	bl	8010998 <HAL_RCC_OscConfig>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8005c1e:	f001 fd07 	bl	8007630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c22:	233f      	movs	r3, #63	@ 0x3f
 8005c24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c26:	2303      	movs	r3, #3
 8005c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005c2e:	2308      	movs	r3, #8
 8005c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005c32:	2340      	movs	r3, #64	@ 0x40
 8005c34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005c36:	2340      	movs	r3, #64	@ 0x40
 8005c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8005c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005c40:	2340      	movs	r3, #64	@ 0x40
 8005c42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005c44:	1d3b      	adds	r3, r7, #4
 8005c46:	2103      	movs	r1, #3
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f00b fa7f 	bl	801114c <HAL_RCC_ClockConfig>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005c54:	f001 fcec 	bl	8007630 <Error_Handler>
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3770      	adds	r7, #112	@ 0x70
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	58024800 	.word	0x58024800

08005c64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b0ae      	sub	sp, #184	@ 0xb8
 8005c68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	22b8      	movs	r2, #184	@ 0xb8
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4618      	mov	r0, r3
 8005c72:	f017 fe1f 	bl	801d8b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2;
 8005c76:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 22;
 8005c82:	2316      	movs	r3, #22
 8005c84:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 192;
 8005c86:	23c0      	movs	r3, #192	@ 0xc0
 8005c88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005c92:	2302      	movs	r3, #2
 8005c94:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cae:	463b      	mov	r3, r7
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f00b fdd7 	bl	8011864 <HAL_RCCEx_PeriphCLKConfig>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8005cbc:	f001 fcb8 	bl	8007630 <Error_Handler>
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	37b8      	adds	r7, #184	@ 0xb8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)// 1 ms
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a87      	ldr	r2, [pc, #540]	@ (8005ef0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	f040 8107 	bne.w	8005ee8 <HAL_TIM_PeriodElapsedCallback+0x220>
	{
		TIM_inte_SD = 1;
 8005cda:	4b86      	ldr	r3, [pc, #536]	@ (8005ef4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
		TIM_inte = 1;
 8005ce0:	4b85      	ldr	r3, [pc, #532]	@ (8005ef8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
		NRF_TIM_Inte++;
 8005ce6:	4b85      	ldr	r3, [pc, #532]	@ (8005efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3301      	adds	r3, #1
 8005cec:	4a83      	ldr	r2, [pc, #524]	@ (8005efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005cee:	6013      	str	r3, [r2, #0]


		if(i == 0){// na calosc 50ms
 8005cf0:	4b83      	ldr	r3, [pc, #524]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10d      	bne.n	8005d14 <HAL_TIM_PeriodElapsedCallback+0x4c>
			LED_5_1;
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cfe:	4881      	ldr	r0, [pc, #516]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d00:	f008 f95e 	bl	800dfc0 <HAL_GPIO_WritePin>
			BMP180_start_measurment_temp_IT();
 8005d04:	f7fa fdb4 	bl	8000870 <BMP180_start_measurment_temp_IT>
			LED_5_0;
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d0e:	487d      	ldr	r0, [pc, #500]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d10:	f008 f956 	bl	800dfc0 <HAL_GPIO_WritePin>
		}

		if(i == 10){//2
 8005d14:	4b7a      	ldr	r3, [pc, #488]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b0a      	cmp	r3, #10
 8005d1a:	d10d      	bne.n	8005d38 <HAL_TIM_PeriodElapsedCallback+0x70>
			LED_5_1;
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d22:	4878      	ldr	r0, [pc, #480]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d24:	f008 f94c 	bl	800dfc0 <HAL_GPIO_WritePin>
			BMP180_start_measurment_pres_IT();
 8005d28:	f7fa fd8c 	bl	8000844 <BMP180_start_measurment_pres_IT>
			LED_5_0;
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d32:	4874      	ldr	r0, [pc, #464]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d34:	f008 f944 	bl	800dfc0 <HAL_GPIO_WritePin>
		}

		if(i == 36){
 8005d38:	4b71      	ldr	r3, [pc, #452]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b24      	cmp	r3, #36	@ 0x24
 8005d3e:	d10d      	bne.n	8005d5c <HAL_TIM_PeriodElapsedCallback+0x94>
			LED_5_1;
 8005d40:	2201      	movs	r2, #1
 8005d42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d46:	486f      	ldr	r0, [pc, #444]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d48:	f008 f93a 	bl	800dfc0 <HAL_GPIO_WritePin>
			HMC5883L_Get_Z_Start_IT();
 8005d4c:	f7fb f9c2 	bl	80010d4 <HMC5883L_Get_Z_Start_IT>
			LED_5_0;
 8005d50:	2200      	movs	r2, #0
 8005d52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d56:	486b      	ldr	r0, [pc, #428]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005d58:	f008 f932 	bl	800dfc0 <HAL_GPIO_WritePin>
		}

		if(i == 38){
 8005d5c:	4b68      	ldr	r3, [pc, #416]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b26      	cmp	r3, #38	@ 0x26
 8005d62:	d10e      	bne.n	8005d82 <HAL_TIM_PeriodElapsedCallback+0xba>
			LED_6_1;
 8005d64:	2201      	movs	r2, #1
 8005d66:	2108      	movs	r1, #8
 8005d68:	4867      	ldr	r0, [pc, #412]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005d6a:	f008 f929 	bl	800dfc0 <HAL_GPIO_WritePin>
			nRF24_TX_Mode();
 8005d6e:	f7fc f8f3 	bl	8001f58 <nRF24_TX_Mode>
			nRF24_Rx_Mode = 0;
 8005d72:	4b66      	ldr	r3, [pc, #408]	@ (8005f0c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	701a      	strb	r2, [r3, #0]
			LED_6_0;
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2108      	movs	r1, #8
 8005d7c:	4862      	ldr	r0, [pc, #392]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005d7e:	f008 f91f 	bl	800dfc0 <HAL_GPIO_WritePin>
		}
		if(i == 40){//5
 8005d82:	4b5f      	ldr	r3, [pc, #380]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b28      	cmp	r3, #40	@ 0x28
 8005d88:	d14c      	bne.n	8005e24 <HAL_TIM_PeriodElapsedCallback+0x15c>
			ampritude = startpres - pres;
 8005d8a:	4b61      	ldr	r3, [pc, #388]	@ (8005f10 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005d8c:	ed93 7a00 	vldr	s14, [r3]
 8005d90:	4b60      	ldr	r3, [pc, #384]	@ (8005f14 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005d92:	edd3 7a00 	vldr	s15, [r3]
 8005d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005f18 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005d9c:	edc3 7a00 	vstr	s15, [r3]

			MYDRON.dronheight = (uint16_t)BMP180_GET_height();
 8005da0:	f7fb f828 	bl	8000df4 <BMP180_GET_height>
 8005da4:	eef0 7a40 	vmov.f32	s15, s0
 8005da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dac:	ee17 3a90 	vmov	r3, s15
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	b21a      	sxth	r2, r3
 8005db4:	4b59      	ldr	r3, [pc, #356]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005db6:	83da      	strh	r2, [r3, #30]
			convert_value_to_array(MYDRON.dronheight, TxData, 0, 3);
 8005db8:	4b58      	ldr	r3, [pc, #352]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005dba:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4957      	ldr	r1, [pc, #348]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005dc4:	f000 ff79 	bl	8006cba <convert_value_to_array>

			Get_batteryvalue();
 8005dc8:	f7fe f8da 	bl	8003f80 <Get_batteryvalue>

			convert_value_to_array(MYDRON.batterysize, TxData, 3, 6);
 8005dcc:	4b53      	ldr	r3, [pc, #332]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b218      	sxth	r0, r3
 8005dd2:	2306      	movs	r3, #6
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	4952      	ldr	r1, [pc, #328]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005dd8:	f000 ff6f 	bl	8006cba <convert_value_to_array>

			for(int i = 0; i < 10; i++){
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	e00b      	b.n	8005dfa <HAL_TIM_PeriodElapsedCallback+0x132>
				TxData[22+i] = Txcode[22+i];
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f103 0216 	add.w	r2, r3, #22
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3316      	adds	r3, #22
 8005dec:	494d      	ldr	r1, [pc, #308]	@ (8005f24 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005dee:	5c89      	ldrb	r1, [r1, r2]
 8005df0:	4a4b      	ldr	r2, [pc, #300]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005df2:	54d1      	strb	r1, [r2, r3]
			for(int i = 0; i < 10; i++){
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3301      	adds	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b09      	cmp	r3, #9
 8005dfe:	ddf0      	ble.n	8005de2 <HAL_TIM_PeriodElapsedCallback+0x11a>
			}
			LED_6_1;
 8005e00:	2201      	movs	r2, #1
 8005e02:	2108      	movs	r1, #8
 8005e04:	4840      	ldr	r0, [pc, #256]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e06:	f008 f8db 	bl	800dfc0 <HAL_GPIO_WritePin>
			nRF24_WriteTXPayload(TxData);
 8005e0a:	4845      	ldr	r0, [pc, #276]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005e0c:	f7fc fb62 	bl	80024d4 <nRF24_WriteTXPayload>
			NRF24_CE_HIGH;
 8005e10:	2201      	movs	r2, #1
 8005e12:	2140      	movs	r1, #64	@ 0x40
 8005e14:	4844      	ldr	r0, [pc, #272]	@ (8005f28 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005e16:	f008 f8d3 	bl	800dfc0 <HAL_GPIO_WritePin>
			LED_6_0;
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2108      	movs	r1, #8
 8005e1e:	483a      	ldr	r0, [pc, #232]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005e20:	f008 f8ce 	bl	800dfc0 <HAL_GPIO_WritePin>
		}
		if(i == 41){
 8005e24:	4b36      	ldr	r3, [pc, #216]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b29      	cmp	r3, #41	@ 0x29
 8005e2a:	d104      	bne.n	8005e36 <HAL_TIM_PeriodElapsedCallback+0x16e>
			NRF24_CE_LOW;
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2140      	movs	r1, #64	@ 0x40
 8005e30:	483d      	ldr	r0, [pc, #244]	@ (8005f28 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005e32:	f008 f8c5 	bl	800dfc0 <HAL_GPIO_WritePin>
		}
		if(i >= 42){
 8005e36:	4b32      	ldr	r3, [pc, #200]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b29      	cmp	r3, #41	@ 0x29
 8005e3c:	dd16      	ble.n	8005e6c <HAL_TIM_PeriodElapsedCallback+0x1a4>
			if(nRF24_Rx_Mode != 1){
 8005e3e:	4b33      	ldr	r3, [pc, #204]	@ (8005f0c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d012      	beq.n	8005e6c <HAL_TIM_PeriodElapsedCallback+0x1a4>
				if(((nRF24_ReadStatus() & (1<<NRF24_MAX_RT)) || (nRF24_ReadStatus() & (1<<NRF24_TX_DS)))){
 8005e46:	f7fc f908 	bl	800205a <nRF24_ReadStatus>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <HAL_TIM_PeriodElapsedCallback+0x19a>
 8005e54:	f7fc f901 	bl	800205a <nRF24_ReadStatus>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <HAL_TIM_PeriodElapsedCallback+0x1a4>
					nRF24_RX_Mode();
 8005e62:	f7fc f84d 	bl	8001f00 <nRF24_RX_Mode>
					nRF24_Rx_Mode = 1;
 8005e66:	4b29      	ldr	r3, [pc, #164]	@ (8005f0c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		LED_5_1;
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e72:	4824      	ldr	r0, [pc, #144]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005e74:	f008 f8a4 	bl	800dfc0 <HAL_GPIO_WritePin>
		MPU6050_GET_ACCANDGYR_CALANDSCL_IT();
 8005e78:	f7fb fc6a 	bl	8001750 <MPU6050_GET_ACCANDGYR_CALANDSCL_IT>
		LED_5_0;
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e82:	4820      	ldr	r0, [pc, #128]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005e84:	f008 f89c 	bl	800dfc0 <HAL_GPIO_WritePin>

		if(i == 100){
 8005e88:	4b1d      	ldr	r3, [pc, #116]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b64      	cmp	r3, #100	@ 0x64
 8005e8e:	d103      	bne.n	8005e98 <HAL_TIM_PeriodElapsedCallback+0x1d0>
			i = 0;
 8005e90:	4b1b      	ldr	r3, [pc, #108]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	e004      	b.n	8005ea2 <HAL_TIM_PeriodElapsedCallback+0x1da>
		}
		else{
			i++;
 8005e98:	4b19      	ldr	r3, [pc, #100]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	4a18      	ldr	r2, [pc, #96]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005ea0:	6013      	str	r3, [r2, #0]
		}
		if(NRF_TIM_Inte >= 1000){
 8005ea2:	4b16      	ldr	r3, [pc, #88]	@ (8005efc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005eaa:	d308      	bcc.n	8005ebe <HAL_TIM_PeriodElapsedCallback+0x1f6>
			LED_R_1;
 8005eac:	2201      	movs	r2, #1
 8005eae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005eb2:	481d      	ldr	r0, [pc, #116]	@ (8005f28 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8005eb4:	f008 f884 	bl	800dfc0 <HAL_GPIO_WritePin>
			MYDRON.dron_status.Connection = DRON_DISCONNECTED;
 8005eb8:	4b18      	ldr	r3, [pc, #96]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005eba:	2202      	movs	r2, #2
 8005ebc:	825a      	strh	r2, [r3, #18]
		}
		if(MYDRON.dron_status.Connection == DRON_DISCONNECTED){
 8005ebe:	4b17      	ldr	r3, [pc, #92]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8005ec0:	8a5b      	ldrh	r3, [r3, #18]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d110      	bne.n	8005ee8 <HAL_TIM_PeriodElapsedCallback+0x220>
			wanted_rool = 0;
 8005ec6:	4b19      	ldr	r3, [pc, #100]	@ (8005f2c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8005ec8:	f04f 0200 	mov.w	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
			wanted_pitch = 0;
 8005ece:	4b18      	ldr	r3, [pc, #96]	@ (8005f30 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
			wanted_yaw = 0;
 8005ed6:	4b17      	ldr	r3, [pc, #92]	@ (8005f34 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
			wanted_thrust = DRON_SLOWFALING;
 8005ede:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005ee2:	b21a      	sxth	r2, r3
 8005ee4:	4b14      	ldr	r3, [pc, #80]	@ (8005f38 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8005ee6:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	240003cc 	.word	0x240003cc
 8005ef4:	00000054 	.word	0x00000054
 8005ef8:	00000058 	.word	0x00000058
 8005efc:	00000060 	.word	0x00000060
 8005f00:	000041c0 	.word	0x000041c0
 8005f04:	58020000 	.word	0x58020000
 8005f08:	58021000 	.word	0x58021000
 8005f0c:	0000015d 	.word	0x0000015d
 8005f10:	000000cc 	.word	0x000000cc
 8005f14:	000000c8 	.word	0x000000c8
 8005f18:	000000d0 	.word	0x000000d0
 8005f1c:	00000160 	.word	0x00000160
 8005f20:	00000114 	.word	0x00000114
 8005f24:	000000f4 	.word	0x000000f4
 8005f28:	58020400 	.word	0x58020400
 8005f2c:	00004054 	.word	0x00004054
 8005f30:	00004050 	.word	0x00004050
 8005f34:	00004058 	.word	0x00004058
 8005f38:	00004044 	.word	0x00004044

08005f3c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15)
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f4c:	f040 812c 	bne.w	80061a8 <HAL_GPIO_EXTI_Callback+0x26c>
	{
		if(STARTUP == 0){
 8005f50:	4b97      	ldr	r3, [pc, #604]	@ (80061b0 <HAL_GPIO_EXTI_Callback+0x274>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f040 8127 	bne.w	80061a8 <HAL_GPIO_EXTI_Callback+0x26c>
			LED_6_1;
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	2108      	movs	r1, #8
 8005f5e:	4895      	ldr	r0, [pc, #596]	@ (80061b4 <HAL_GPIO_EXTI_Callback+0x278>)
 8005f60:	f008 f82e 	bl	800dfc0 <HAL_GPIO_WritePin>
			nRF24_ReadRXPaylaod(RxData);
 8005f64:	4894      	ldr	r0, [pc, #592]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005f66:	f7fc faeb 	bl	8002540 <nRF24_ReadRXPaylaod>
			LED_6_0;
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2108      	movs	r1, #8
 8005f6e:	4891      	ldr	r0, [pc, #580]	@ (80061b4 <HAL_GPIO_EXTI_Callback+0x278>)
 8005f70:	f008 f826 	bl	800dfc0 <HAL_GPIO_WritePin>


			LED_Y_1;
 8005f74:	2201      	movs	r2, #1
 8005f76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005f7a:	4890      	ldr	r0, [pc, #576]	@ (80061bc <HAL_GPIO_EXTI_Callback+0x280>)
 8005f7c:	f008 f820 	bl	800dfc0 <HAL_GPIO_WritePin>

			loopnum = 0;
 8005f80:	4b8f      	ldr	r3, [pc, #572]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	e011      	b.n	8005fb0 <HAL_GPIO_EXTI_Callback+0x74>
				if(RxData[12+abc] == Rxcode[abc+12]){
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	4a89      	ldr	r2, [pc, #548]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005f92:	5cd2      	ldrb	r2, [r2, r3]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	330c      	adds	r3, #12
 8005f98:	498a      	ldr	r1, [pc, #552]	@ (80061c4 <HAL_GPIO_EXTI_Callback+0x288>)
 8005f9a:	5ccb      	ldrb	r3, [r1, r3]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d104      	bne.n	8005faa <HAL_GPIO_EXTI_Callback+0x6e>
					loopnum++;
 8005fa0:	4b87      	ldr	r3, [pc, #540]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	4a86      	ldr	r2, [pc, #536]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8005fa8:	6013      	str	r3, [r2, #0]
			for(int abc = 0; abc < 10; abc++){//sprawdzenia poprawnosci kodu nadanego
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3301      	adds	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b09      	cmp	r3, #9
 8005fb4:	ddea      	ble.n	8005f8c <HAL_GPIO_EXTI_Callback+0x50>
				}
			}

			if(loopnum == 10){
 8005fb6:	4b82      	ldr	r3, [pc, #520]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b0a      	cmp	r3, #10
 8005fbc:	f040 80e3 	bne.w	8006186 <HAL_GPIO_EXTI_Callback+0x24a>
				convert_array_to_value(RxData, &wanted_pitch_v, 0, 2);//pitch
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4980      	ldr	r1, [pc, #512]	@ (80061c8 <HAL_GPIO_EXTI_Callback+0x28c>)
 8005fc6:	487c      	ldr	r0, [pc, #496]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005fc8:	f000 fe26 	bl	8006c18 <convert_array_to_value>
				convert_array_to_value(RxData, &wanted_roll_v, 3, 5);// pid_angular_rate_rool wanted_roll_v
 8005fcc:	2305      	movs	r3, #5
 8005fce:	2203      	movs	r2, #3
 8005fd0:	497e      	ldr	r1, [pc, #504]	@ (80061cc <HAL_GPIO_EXTI_Callback+0x290>)
 8005fd2:	4879      	ldr	r0, [pc, #484]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005fd4:	f000 fe20 	bl	8006c18 <convert_array_to_value>
				if(wobble_strenght == 1){
 8005fd8:	4b7d      	ldr	r3, [pc, #500]	@ (80061d0 <HAL_GPIO_EXTI_Callback+0x294>)
 8005fda:	edd3 7a00 	vldr	s15, [r3]
 8005fde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fe2:	eef4 7a47 	vcmp.f32	s15, s14
 8005fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fea:	d105      	bne.n	8005ff8 <HAL_GPIO_EXTI_Callback+0xbc>
					convert_array_to_value(RxData, &wanted_thrust, 6, 8);//
 8005fec:	2308      	movs	r3, #8
 8005fee:	2206      	movs	r2, #6
 8005ff0:	4978      	ldr	r1, [pc, #480]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8005ff2:	4871      	ldr	r0, [pc, #452]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8005ff4:	f000 fe10 	bl	8006c18 <convert_array_to_value>
				}
				convert_array_to_value(RxData, &wanted_yaw_v, 9, 11);//
 8005ff8:	230b      	movs	r3, #11
 8005ffa:	2209      	movs	r2, #9
 8005ffc:	4976      	ldr	r1, [pc, #472]	@ (80061d8 <HAL_GPIO_EXTI_Callback+0x29c>)
 8005ffe:	486e      	ldr	r0, [pc, #440]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8006000:	f000 fe0a 	bl	8006c18 <convert_array_to_value>
				MYDRON.dron_status.Connection = DRON_CONNECTED;
 8006004:	4b75      	ldr	r3, [pc, #468]	@ (80061dc <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006006:	2201      	movs	r2, #1
 8006008:	825a      	strh	r2, [r3, #18]

				if(RxData[23] == 1){
 800600a:	4b6b      	ldr	r3, [pc, #428]	@ (80061b8 <HAL_GPIO_EXTI_Callback+0x27c>)
 800600c:	7ddb      	ldrb	r3, [r3, #23]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d11b      	bne.n	800604a <HAL_GPIO_EXTI_Callback+0x10e>
					ESC_POWER_1;
 8006012:	2201      	movs	r2, #1
 8006014:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006018:	4871      	ldr	r0, [pc, #452]	@ (80061e0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800601a:	f007 ffd1 	bl	800dfc0 <HAL_GPIO_WritePin>
					LED_R_1;
 800601e:	2201      	movs	r2, #1
 8006020:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006024:	4865      	ldr	r0, [pc, #404]	@ (80061bc <HAL_GPIO_EXTI_Callback+0x280>)
 8006026:	f007 ffcb 	bl	800dfc0 <HAL_GPIO_WritePin>
					if(SD_enable_Flag == 1){
 800602a:	4b6e      	ldr	r3, [pc, #440]	@ (80061e4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d10b      	bne.n	800604a <HAL_GPIO_EXTI_Callback+0x10e>
						f_close(&fil);
 8006032:	486d      	ldr	r0, [pc, #436]	@ (80061e8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8006034:	f017 fa46 	bl	801d4c4 <f_close>
						fresult = f_mount(NULL, "/", 1);
 8006038:	2201      	movs	r2, #1
 800603a:	496c      	ldr	r1, [pc, #432]	@ (80061ec <HAL_GPIO_EXTI_Callback+0x2b0>)
 800603c:	2000      	movs	r0, #0
 800603e:	f016 fe21 	bl	801cc84 <f_mount>
 8006042:	4603      	mov	r3, r0
 8006044:	461a      	mov	r2, r3
 8006046:	4b6a      	ldr	r3, [pc, #424]	@ (80061f0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8006048:	701a      	strb	r2, [r3, #0]
					}

				}

				if(wanted_thrust == 9999){
 800604a:	4b62      	ldr	r3, [pc, #392]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 800604c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006050:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006054:	4293      	cmp	r3, r2
 8006056:	d103      	bne.n	8006060 <HAL_GPIO_EXTI_Callback+0x124>
					MYDRON.THRUST_flag = THRUST_MAX;
 8006058:	4b60      	ldr	r3, [pc, #384]	@ (80061dc <HAL_GPIO_EXTI_Callback+0x2a0>)
 800605a:	2210      	movs	r2, #16
 800605c:	f883 2020 	strb.w	r2, [r3, #32]
	  			}
				wanted_thrust = wanted_thrust * 20;
 8006060:	4b5c      	ldr	r3, [pc, #368]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8006062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006066:	b29b      	uxth	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	0092      	lsls	r2, r2, #2
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	b29b      	uxth	r3, r3
 8006072:	b21a      	sxth	r2, r3
 8006074:	4b57      	ldr	r3, [pc, #348]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8006076:	801a      	strh	r2, [r3, #0]
				wanted_thrust = wanted_thrust - 10000;
 8006078:	4b56      	ldr	r3, [pc, #344]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 800607a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800607e:	b29a      	uxth	r2, r3
 8006080:	4b5c      	ldr	r3, [pc, #368]	@ (80061f4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8006082:	4413      	add	r3, r2
 8006084:	b29b      	uxth	r3, r3
 8006086:	b21a      	sxth	r2, r3
 8006088:	4b52      	ldr	r3, [pc, #328]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 800608a:	801a      	strh	r2, [r3, #0]
				if(wanted_thrust < 0){
 800608c:	4b51      	ldr	r3, [pc, #324]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 800608e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006092:	2b00      	cmp	r3, #0
 8006094:	da02      	bge.n	800609c <HAL_GPIO_EXTI_Callback+0x160>
					wanted_thrust = 0;
 8006096:	4b4f      	ldr	r3, [pc, #316]	@ (80061d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8006098:	2200      	movs	r2, #0
 800609a:	801a      	strh	r2, [r3, #0]
	  			}

				wanted_rool_rx = (wanted_roll_v - 500)*wanted_rool_factro;//wanted_rool_rx (-90 <-> 90)
 800609c:	4b4b      	ldr	r3, [pc, #300]	@ (80061cc <HAL_GPIO_EXTI_Callback+0x290>)
 800609e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060a2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ae:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80061f8 <HAL_GPIO_EXTI_Callback+0x2bc>
 80060b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060ba:	ee17 3a90 	vmov	r3, s15
 80060be:	b21a      	sxth	r2, r3
 80060c0:	4b4e      	ldr	r3, [pc, #312]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 80060c2:	801a      	strh	r2, [r3, #0]
				wanted_pitch_rx = (wanted_pitch_v - 500)*wanted_pitch_factro;// (-450 <-> 450)
 80060c4:	4b40      	ldr	r3, [pc, #256]	@ (80061c8 <HAL_GPIO_EXTI_Callback+0x28c>)
 80060c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060ca:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060d6:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8006200 <HAL_GPIO_EXTI_Callback+0x2c4>
 80060da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060e2:	ee17 3a90 	vmov	r3, s15
 80060e6:	b21a      	sxth	r2, r3
 80060e8:	4b46      	ldr	r3, [pc, #280]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80060ea:	801a      	strh	r2, [r3, #0]
				wanted_yaw_rx = (wanted_yaw_v - 500)*wanted_yaw_factro;
 80060ec:	4b3a      	ldr	r3, [pc, #232]	@ (80061d8 <HAL_GPIO_EXTI_Callback+0x29c>)
 80060ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060f2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060fe:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006208 <HAL_GPIO_EXTI_Callback+0x2cc>
 8006102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800610a:	ee17 3a90 	vmov	r3, s15
 800610e:	b21a      	sxth	r2, r3
 8006110:	4b3e      	ldr	r3, [pc, #248]	@ (800620c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006112:	801a      	strh	r2, [r3, #0]

				if(wanted_rool_rx >= 30){
 8006114:	4b39      	ldr	r3, [pc, #228]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800611a:	2b1d      	cmp	r3, #29
 800611c:	dd02      	ble.n	8006124 <HAL_GPIO_EXTI_Callback+0x1e8>
					wanted_rool_rx = 30;
 800611e:	4b37      	ldr	r3, [pc, #220]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006120:	221e      	movs	r2, #30
 8006122:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_rool_rx <= -30){
 8006124:	4b35      	ldr	r3, [pc, #212]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800612a:	f113 0f1d 	cmn.w	r3, #29
 800612e:	da03      	bge.n	8006138 <HAL_GPIO_EXTI_Callback+0x1fc>
					wanted_rool_rx = -30;
 8006130:	4b32      	ldr	r3, [pc, #200]	@ (80061fc <HAL_GPIO_EXTI_Callback+0x2c0>)
 8006132:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 8006136:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx >= 30){
 8006138:	4b32      	ldr	r3, [pc, #200]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800613a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800613e:	2b1d      	cmp	r3, #29
 8006140:	dd02      	ble.n	8006148 <HAL_GPIO_EXTI_Callback+0x20c>
					wanted_pitch_rx = 30;
 8006142:	4b30      	ldr	r3, [pc, #192]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006144:	221e      	movs	r2, #30
 8006146:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_pitch_rx <= -30){
 8006148:	4b2e      	ldr	r3, [pc, #184]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800614a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800614e:	f113 0f1d 	cmn.w	r3, #29
 8006152:	da03      	bge.n	800615c <HAL_GPIO_EXTI_Callback+0x220>
					wanted_pitch_rx = -30;
 8006154:	4b2b      	ldr	r3, [pc, #172]	@ (8006204 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8006156:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 800615a:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx >= 30){
 800615c:	4b2b      	ldr	r3, [pc, #172]	@ (800620c <HAL_GPIO_EXTI_Callback+0x2d0>)
 800615e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006162:	2b1d      	cmp	r3, #29
 8006164:	dd02      	ble.n	800616c <HAL_GPIO_EXTI_Callback+0x230>
					wanted_yaw_rx = 30;
 8006166:	4b29      	ldr	r3, [pc, #164]	@ (800620c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8006168:	221e      	movs	r2, #30
 800616a:	801a      	strh	r2, [r3, #0]
				}
				if(wanted_yaw_rx <= -30){
 800616c:	4b27      	ldr	r3, [pc, #156]	@ (800620c <HAL_GPIO_EXTI_Callback+0x2d0>)
 800616e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006172:	f113 0f1d 	cmn.w	r3, #29
 8006176:	da03      	bge.n	8006180 <HAL_GPIO_EXTI_Callback+0x244>
					wanted_yaw_rx = -30;
 8006178:	4b24      	ldr	r3, [pc, #144]	@ (800620c <HAL_GPIO_EXTI_Callback+0x2d0>)
 800617a:	f64f 72e2 	movw	r2, #65506	@ 0xffe2
 800617e:	801a      	strh	r2, [r3, #0]
				}


				NRF_TIM_Inte = 0;
 8006180:	4b23      	ldr	r3, [pc, #140]	@ (8006210 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
	  		}

	  			if(loopnum > 0 && loopnum < 10){
 8006186:	4b0e      	ldr	r3, [pc, #56]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	dd06      	ble.n	800619c <HAL_GPIO_EXTI_Callback+0x260>
 800618e:	4b0c      	ldr	r3, [pc, #48]	@ (80061c0 <HAL_GPIO_EXTI_Callback+0x284>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b09      	cmp	r3, #9
 8006194:	dc02      	bgt.n	800619c <HAL_GPIO_EXTI_Callback+0x260>
	  				MYDRON.dron_status.Connection = DRON_CONNECTION_ERROR;
 8006196:	4b11      	ldr	r3, [pc, #68]	@ (80061dc <HAL_GPIO_EXTI_Callback+0x2a0>)
 8006198:	2203      	movs	r2, #3
 800619a:	825a      	strh	r2, [r3, #18]
	  			}


	  			LED_Y_0;
 800619c:	2200      	movs	r2, #0
 800619e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80061a2:	4806      	ldr	r0, [pc, #24]	@ (80061bc <HAL_GPIO_EXTI_Callback+0x280>)
 80061a4:	f007 ff0c 	bl	800dfc0 <HAL_GPIO_WritePin>
		}
	}
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	0000005c 	.word	0x0000005c
 80061b4:	58021000 	.word	0x58021000
 80061b8:	000000d4 	.word	0x000000d4
 80061bc:	58020400 	.word	0x58020400
 80061c0:	000041c4 	.word	0x000041c4
 80061c4:	00000134 	.word	0x00000134
 80061c8:	000041ca 	.word	0x000041ca
 80061cc:	000041c8 	.word	0x000041c8
 80061d0:	000041b8 	.word	0x000041b8
 80061d4:	00004044 	.word	0x00004044
 80061d8:	000041cc 	.word	0x000041cc
 80061dc:	00000160 	.word	0x00000160
 80061e0:	58021800 	.word	0x58021800
 80061e4:	000041b4 	.word	0x000041b4
 80061e8:	24001f10 	.word	0x24001f10
 80061ec:	0801e300 	.word	0x0801e300
 80061f0:	24001f0c 	.word	0x24001f0c
 80061f4:	ffffd8f0 	.word	0xffffd8f0
 80061f8:	3f266666 	.word	0x3f266666
 80061fc:	00004032 	.word	0x00004032
 8006200:	3f28f5c3 	.word	0x3f28f5c3
 8006204:	00004030 	.word	0x00004030
 8006208:	3f19999a 	.word	0x3f19999a
 800620c:	00004034 	.word	0x00004034
 8006210:	00000060 	.word	0x00000060

08006214 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)//pobieranie znakw z uart
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
	words[command_ch_num] = Received;
 800621c:	4b24      	ldr	r3, [pc, #144]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	4b24      	ldr	r3, [pc, #144]	@ (80062b4 <HAL_UART_RxCpltCallback+0xa0>)
 8006224:	7819      	ldrb	r1, [r3, #0]
 8006226:	4b24      	ldr	r3, [pc, #144]	@ (80062b8 <HAL_UART_RxCpltCallback+0xa4>)
 8006228:	5499      	strb	r1, [r3, r2]

	if(words[command_ch_num] == '\r')
 800622a:	4b21      	ldr	r3, [pc, #132]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	4b21      	ldr	r3, [pc, #132]	@ (80062b8 <HAL_UART_RxCpltCallback+0xa4>)
 8006232:	5c9b      	ldrb	r3, [r3, r2]
 8006234:	2b0d      	cmp	r3, #13
 8006236:	d11a      	bne.n	800626e <HAL_UART_RxCpltCallback+0x5a>
	{
		char Y = '\n';
 8006238:	230a      	movs	r3, #10
 800623a:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 800623c:	f107 010f 	add.w	r1, r7, #15
 8006240:	2364      	movs	r3, #100	@ 0x64
 8006242:	2201      	movs	r2, #1
 8006244:	481d      	ldr	r0, [pc, #116]	@ (80062bc <HAL_UART_RxCpltCallback+0xa8>)
 8006246:	f011 fa69 	bl	801771c <HAL_UART_Transmit>
		Y = '\r';
 800624a:	230d      	movs	r3, #13
 800624c:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart1, (uint8_t *)&Y, 1, 100);
 800624e:	f107 010f 	add.w	r1, r7, #15
 8006252:	2364      	movs	r3, #100	@ 0x64
 8006254:	2201      	movs	r2, #1
 8006256:	4819      	ldr	r0, [pc, #100]	@ (80062bc <HAL_UART_RxCpltCallback+0xa8>)
 8006258:	f011 fa60 	bl	801771c <HAL_UART_Transmit>
		words[command_ch_num] = 0;
 800625c:	4b14      	ldr	r3, [pc, #80]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	4b15      	ldr	r3, [pc, #84]	@ (80062b8 <HAL_UART_RxCpltCallback+0xa4>)
 8006264:	2100      	movs	r1, #0
 8006266:	5499      	strb	r1, [r3, r2]
		commandready = 1;
 8006268:	4b15      	ldr	r3, [pc, #84]	@ (80062c0 <HAL_UART_RxCpltCallback+0xac>)
 800626a:	2201      	movs	r2, #1
 800626c:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit_IT(&huart1, (uint8_t *)&words[command_ch_num], 1);
 800626e:	4b10      	ldr	r3, [pc, #64]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	4b10      	ldr	r3, [pc, #64]	@ (80062b8 <HAL_UART_RxCpltCallback+0xa4>)
 8006276:	4413      	add	r3, r2
 8006278:	2201      	movs	r2, #1
 800627a:	4619      	mov	r1, r3
 800627c:	480f      	ldr	r0, [pc, #60]	@ (80062bc <HAL_UART_RxCpltCallback+0xa8>)
 800627e:	f011 fadb 	bl	8017838 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &Received, 1);
 8006282:	2201      	movs	r2, #1
 8006284:	490b      	ldr	r1, [pc, #44]	@ (80062b4 <HAL_UART_RxCpltCallback+0xa0>)
 8006286:	480d      	ldr	r0, [pc, #52]	@ (80062bc <HAL_UART_RxCpltCallback+0xa8>)
 8006288:	f011 fb6a 	bl	8017960 <HAL_UART_Receive_IT>
	command_ch_num++;
 800628c:	4b08      	ldr	r3, [pc, #32]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	3301      	adds	r3, #1
 8006292:	b2da      	uxtb	r2, r3
 8006294:	4b06      	ldr	r3, [pc, #24]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 8006296:	701a      	strb	r2, [r3, #0]

	if(commandready == 1)
 8006298:	4b09      	ldr	r3, [pc, #36]	@ (80062c0 <HAL_UART_RxCpltCallback+0xac>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d102      	bne.n	80062a6 <HAL_UART_RxCpltCallback+0x92>
	{
		command_ch_num = 0;
 80062a0:	4b03      	ldr	r3, [pc, #12]	@ (80062b0 <HAL_UART_RxCpltCallback+0x9c>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
	}
}
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	000041a7 	.word	0x000041a7
 80062b4:	000041a8 	.word	0x000041a8
 80062b8:	0000419c 	.word	0x0000419c
 80062bc:	240004b0 	.word	0x240004b0
 80062c0:	000041a6 	.word	0x000041a6
 80062c4:	00000000 	.word	0x00000000

080062c8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	6078      	str	r0, [r7, #4]
	if(MPU6050_IRQ == 1){
 80062d0:	4bc9      	ldr	r3, [pc, #804]	@ (80065f8 <HAL_I2C_MemRxCpltCallback+0x330>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	f040 8401 	bne.w	8006adc <HAL_I2C_MemRxCpltCallback+0x814>
			MPU6050_IRQ = 0;
 80062da:	4bc7      	ldr	r3, [pc, #796]	@ (80065f8 <HAL_I2C_MemRxCpltCallback+0x330>)
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]
			LED_G_1;
 80062e0:	2201      	movs	r2, #1
 80062e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80062e6:	48c5      	ldr	r0, [pc, #788]	@ (80065fc <HAL_I2C_MemRxCpltCallback+0x334>)
 80062e8:	f007 fe6a 	bl	800dfc0 <HAL_GPIO_WritePin>

			MPU6050_GET_CALANDSCL_IT(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 80062ec:	4bc4      	ldr	r3, [pc, #784]	@ (8006600 <HAL_I2C_MemRxCpltCallback+0x338>)
 80062ee:	edd3 7a00 	vldr	s15, [r3]
 80062f2:	4bc4      	ldr	r3, [pc, #784]	@ (8006604 <HAL_I2C_MemRxCpltCallback+0x33c>)
 80062f4:	ed93 7a00 	vldr	s14, [r3]
 80062f8:	4bc3      	ldr	r3, [pc, #780]	@ (8006608 <HAL_I2C_MemRxCpltCallback+0x340>)
 80062fa:	edd3 6a00 	vldr	s13, [r3]
 80062fe:	4bc3      	ldr	r3, [pc, #780]	@ (800660c <HAL_I2C_MemRxCpltCallback+0x344>)
 8006300:	ed93 6a00 	vldr	s12, [r3]
 8006304:	4bc2      	ldr	r3, [pc, #776]	@ (8006610 <HAL_I2C_MemRxCpltCallback+0x348>)
 8006306:	edd3 5a00 	vldr	s11, [r3]
 800630a:	4bc2      	ldr	r3, [pc, #776]	@ (8006614 <HAL_I2C_MemRxCpltCallback+0x34c>)
 800630c:	ed93 5a00 	vldr	s10, [r3]
 8006310:	eddf 4ac1 	vldr	s9, [pc, #772]	@ 8006618 <HAL_I2C_MemRxCpltCallback+0x350>
 8006314:	ed9f 4ac1 	vldr	s8, [pc, #772]	@ 800661c <HAL_I2C_MemRxCpltCallback+0x354>
 8006318:	4bc1      	ldr	r3, [pc, #772]	@ (8006620 <HAL_I2C_MemRxCpltCallback+0x358>)
 800631a:	9301      	str	r3, [sp, #4]
 800631c:	4bc1      	ldr	r3, [pc, #772]	@ (8006624 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	eef0 3a44 	vmov.f32	s7, s8
 8006324:	eeb0 3a64 	vmov.f32	s6, s9
 8006328:	eef0 2a45 	vmov.f32	s5, s10
 800632c:	eeb0 2a65 	vmov.f32	s4, s11
 8006330:	eef0 1a46 	vmov.f32	s3, s12
 8006334:	eeb0 1a66 	vmov.f32	s2, s13
 8006338:	eef0 0a47 	vmov.f32	s1, s14
 800633c:	eeb0 0a67 	vmov.f32	s0, s15
 8006340:	4bb9      	ldr	r3, [pc, #740]	@ (8006628 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006342:	4aba      	ldr	r2, [pc, #744]	@ (800662c <HAL_I2C_MemRxCpltCallback+0x364>)
 8006344:	49ba      	ldr	r1, [pc, #744]	@ (8006630 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006346:	48bb      	ldr	r0, [pc, #748]	@ (8006634 <HAL_I2C_MemRxCpltCallback+0x36c>)
 8006348:	f7fb fa1c 	bl	8001784 <MPU6050_GET_CALANDSCL_IT>
			MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 800634c:	4bb9      	ldr	r3, [pc, #740]	@ (8006634 <HAL_I2C_MemRxCpltCallback+0x36c>)
 800634e:	edd3 7a00 	vldr	s15, [r3]
 8006352:	4bb7      	ldr	r3, [pc, #732]	@ (8006630 <HAL_I2C_MemRxCpltCallback+0x368>)
 8006354:	ed93 7a00 	vldr	s14, [r3]
 8006358:	4bb4      	ldr	r3, [pc, #720]	@ (800662c <HAL_I2C_MemRxCpltCallback+0x364>)
 800635a:	edd3 6a00 	vldr	s13, [r3]
 800635e:	49b6      	ldr	r1, [pc, #728]	@ (8006638 <HAL_I2C_MemRxCpltCallback+0x370>)
 8006360:	48b6      	ldr	r0, [pc, #728]	@ (800663c <HAL_I2C_MemRxCpltCallback+0x374>)
 8006362:	eeb0 1a66 	vmov.f32	s2, s13
 8006366:	eef0 0a47 	vmov.f32	s1, s14
 800636a:	eeb0 0a67 	vmov.f32	s0, s15
 800636e:	f7fb f8bb 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
			MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8006372:	4bb2      	ldr	r3, [pc, #712]	@ (800663c <HAL_I2C_MemRxCpltCallback+0x374>)
 8006374:	edd3 7a00 	vldr	s15, [r3]
 8006378:	4baf      	ldr	r3, [pc, #700]	@ (8006638 <HAL_I2C_MemRxCpltCallback+0x370>)
 800637a:	ed93 7a00 	vldr	s14, [r3]
 800637e:	4bb0      	ldr	r3, [pc, #704]	@ (8006640 <HAL_I2C_MemRxCpltCallback+0x378>)
 8006380:	edd3 6a00 	vldr	s13, [r3]
 8006384:	4ba8      	ldr	r3, [pc, #672]	@ (8006628 <HAL_I2C_MemRxCpltCallback+0x360>)
 8006386:	ed93 6a00 	vldr	s12, [r3]
 800638a:	4ba6      	ldr	r3, [pc, #664]	@ (8006624 <HAL_I2C_MemRxCpltCallback+0x35c>)
 800638c:	edd3 5a00 	vldr	s11, [r3]
 8006390:	4ba3      	ldr	r3, [pc, #652]	@ (8006620 <HAL_I2C_MemRxCpltCallback+0x358>)
 8006392:	ed93 5a00 	vldr	s10, [r3]
 8006396:	eef0 2a45 	vmov.f32	s5, s10
 800639a:	eeb0 2a65 	vmov.f32	s4, s11
 800639e:	eef0 1a46 	vmov.f32	s3, s12
 80063a2:	eeb0 1a66 	vmov.f32	s2, s13
 80063a6:	eef0 0a47 	vmov.f32	s1, s14
 80063aa:	eeb0 0a67 	vmov.f32	s0, s15
 80063ae:	48a5      	ldr	r0, [pc, #660]	@ (8006644 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80063b0:	f7fb fa92 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


			now_pitch = data.x;
 80063b4:	4ba3      	ldr	r3, [pc, #652]	@ (8006644 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4aa3      	ldr	r2, [pc, #652]	@ (8006648 <HAL_I2C_MemRxCpltCallback+0x380>)
 80063ba:	6013      	str	r3, [r2, #0]
			now_rool = data.y;
 80063bc:	4ba1      	ldr	r3, [pc, #644]	@ (8006644 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4aa2      	ldr	r2, [pc, #648]	@ (800664c <HAL_I2C_MemRxCpltCallback+0x384>)
 80063c2:	6013      	str	r3, [r2, #0]
			now_yaw = data.z;
 80063c4:	4b9f      	ldr	r3, [pc, #636]	@ (8006644 <HAL_I2C_MemRxCpltCallback+0x37c>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	4aa1      	ldr	r2, [pc, #644]	@ (8006650 <HAL_I2C_MemRxCpltCallback+0x388>)
 80063ca:	6013      	str	r3, [r2, #0]


			wanted_rool = (float)wanted_rool_rx/10;
 80063cc:	4ba1      	ldr	r3, [pc, #644]	@ (8006654 <HAL_I2C_MemRxCpltCallback+0x38c>)
 80063ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063da:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80063de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063e2:	4b9d      	ldr	r3, [pc, #628]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x390>)
 80063e4:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (float)wanted_pitch_rx/10;
 80063e8:	4b9c      	ldr	r3, [pc, #624]	@ (800665c <HAL_I2C_MemRxCpltCallback+0x394>)
 80063ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063f6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80063fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063fe:	4b98      	ldr	r3, [pc, #608]	@ (8006660 <HAL_I2C_MemRxCpltCallback+0x398>)
 8006400:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = 0;//(float)wanted_yaw_rx/10;
 8006404:	4b97      	ldr	r3, [pc, #604]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x39c>)
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
				  			/*
				  				 * FDP
				  				 */
			wanted_rool = (wanted_rool * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_rool_rx * (1 / (1 + (FDP_FQ * looptime))));
 800640c:	eddf 7a96 	vldr	s15, [pc, #600]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006410:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006414:	4b90      	ldr	r3, [pc, #576]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006416:	edd3 7a00 	vldr	s15, [r3]
 800641a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800641e:	eddf 7a92 	vldr	s15, [pc, #584]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006422:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800642a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	eddf 7a8d 	vldr	s15, [pc, #564]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006436:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800643a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800643e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006442:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006446:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800644a:	4b88      	ldr	r3, [pc, #544]	@ (800666c <HAL_I2C_MemRxCpltCallback+0x3a4>)
 800644c:	edd3 7a00 	vldr	s15, [r3]
 8006450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006458:	4b7f      	ldr	r3, [pc, #508]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x390>)
 800645a:	edc3 7a00 	vstr	s15, [r3]
			wanted_pitch = (wanted_pitch * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_pitch_rx * (1 / (1 + (FDP_FQ * looptime))));
 800645e:	eddf 7a82 	vldr	s15, [pc, #520]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006462:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006466:	4b7e      	ldr	r3, [pc, #504]	@ (8006660 <HAL_I2C_MemRxCpltCallback+0x398>)
 8006468:	edd3 7a00 	vldr	s15, [r3]
 800646c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006470:	eddf 7a7d 	vldr	s15, [pc, #500]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006474:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006478:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800647c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006484:	eddf 7a78 	vldr	s15, [pc, #480]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 8006488:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800648c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006494:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006498:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800649c:	4b74      	ldr	r3, [pc, #464]	@ (8006670 <HAL_I2C_MemRxCpltCallback+0x3a8>)
 800649e:	edd3 7a00 	vldr	s15, [r3]
 80064a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064aa:	4b6d      	ldr	r3, [pc, #436]	@ (8006660 <HAL_I2C_MemRxCpltCallback+0x398>)
 80064ac:	edc3 7a00 	vstr	s15, [r3]
			wanted_yaw = (wanted_yaw * (FDP_FQ * looptime) / (1 + (FDP_FQ * looptime))) + (last_wanted_yaw_rx * (1 / (1 + (FDP_FQ * looptime))));
 80064b0:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 80064b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80064b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x39c>)
 80064ba:	edd3 7a00 	vldr	s15, [r3]
 80064be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80064c2:	eddf 7a69 	vldr	s15, [pc, #420]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 80064c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d6:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8006668 <HAL_I2C_MemRxCpltCallback+0x3a0>
 80064da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80064de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80064ea:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80064ee:	4b61      	ldr	r3, [pc, #388]	@ (8006674 <HAL_I2C_MemRxCpltCallback+0x3ac>)
 80064f0:	edd3 7a00 	vldr	s15, [r3]
 80064f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064fc:	4b59      	ldr	r3, [pc, #356]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x39c>)
 80064fe:	edc3 7a00 	vstr	s15, [r3]


			last_wanted_rool_rx = wanted_rool;
 8006502:	4b55      	ldr	r3, [pc, #340]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a59      	ldr	r2, [pc, #356]	@ (800666c <HAL_I2C_MemRxCpltCallback+0x3a4>)
 8006508:	6013      	str	r3, [r2, #0]
			last_wanted_pitch_rx = wanted_pitch;
 800650a:	4b55      	ldr	r3, [pc, #340]	@ (8006660 <HAL_I2C_MemRxCpltCallback+0x398>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a58      	ldr	r2, [pc, #352]	@ (8006670 <HAL_I2C_MemRxCpltCallback+0x3a8>)
 8006510:	6013      	str	r3, [r2, #0]
			last_wanted_yaw_rx = wanted_yaw;
 8006512:	4b54      	ldr	r3, [pc, #336]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x39c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a57      	ldr	r2, [pc, #348]	@ (8006674 <HAL_I2C_MemRxCpltCallback+0x3ac>)
 8006518:	6013      	str	r3, [r2, #0]


			error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 800651a:	4b57      	ldr	r3, [pc, #348]	@ (8006678 <HAL_I2C_MemRxCpltCallback+0x3b0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006526:	4b4e      	ldr	r3, [pc, #312]	@ (8006660 <HAL_I2C_MemRxCpltCallback+0x398>)
 8006528:	edd3 6a00 	vldr	s13, [r3]
 800652c:	4b46      	ldr	r3, [pc, #280]	@ (8006648 <HAL_I2C_MemRxCpltCallback+0x380>)
 800652e:	edd3 7a00 	vldr	s15, [r3]
 8006532:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800653a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800653e:	ee17 2a90 	vmov	r2, s15
 8006542:	4b4d      	ldr	r3, [pc, #308]	@ (8006678 <HAL_I2C_MemRxCpltCallback+0x3b0>)
 8006544:	601a      	str	r2, [r3, #0]
			error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8006546:	4b4d      	ldr	r3, [pc, #308]	@ (800667c <HAL_I2C_MemRxCpltCallback+0x3b4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	ee07 3a90 	vmov	s15, r3
 800654e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006552:	4b41      	ldr	r3, [pc, #260]	@ (8006658 <HAL_I2C_MemRxCpltCallback+0x390>)
 8006554:	edd3 6a00 	vldr	s13, [r3]
 8006558:	4b3c      	ldr	r3, [pc, #240]	@ (800664c <HAL_I2C_MemRxCpltCallback+0x384>)
 800655a:	edd3 7a00 	vldr	s15, [r3]
 800655e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800656a:	ee17 2a90 	vmov	r2, s15
 800656e:	4b43      	ldr	r3, [pc, #268]	@ (800667c <HAL_I2C_MemRxCpltCallback+0x3b4>)
 8006570:	601a      	str	r2, [r3, #0]
			error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 8006572:	4b43      	ldr	r3, [pc, #268]	@ (8006680 <HAL_I2C_MemRxCpltCallback+0x3b8>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	ee07 3a90 	vmov	s15, r3
 800657a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800657e:	4b39      	ldr	r3, [pc, #228]	@ (8006664 <HAL_I2C_MemRxCpltCallback+0x39c>)
 8006580:	edd3 6a00 	vldr	s13, [r3]
 8006584:	4b32      	ldr	r3, [pc, #200]	@ (8006650 <HAL_I2C_MemRxCpltCallback+0x388>)
 8006586:	edd3 7a00 	vldr	s15, [r3]
 800658a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800658e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006596:	ee17 2a90 	vmov	r2, s15
 800659a:	4b39      	ldr	r3, [pc, #228]	@ (8006680 <HAL_I2C_MemRxCpltCallback+0x3b8>)
 800659c:	601a      	str	r2, [r3, #0]

			error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 800659e:	4b39      	ldr	r3, [pc, #228]	@ (8006684 <HAL_I2C_MemRxCpltCallback+0x3bc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065aa:	4b37      	ldr	r3, [pc, #220]	@ (8006688 <HAL_I2C_MemRxCpltCallback+0x3c0>)
 80065ac:	edd3 6a00 	vldr	s13, [r3]
 80065b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006628 <HAL_I2C_MemRxCpltCallback+0x360>)
 80065b2:	edd3 7a00 	vldr	s15, [r3]
 80065b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065c2:	ee17 2a90 	vmov	r2, s15
 80065c6:	4b2f      	ldr	r3, [pc, #188]	@ (8006684 <HAL_I2C_MemRxCpltCallback+0x3bc>)
 80065c8:	601a      	str	r2, [r3, #0]
			error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 80065ca:	4b30      	ldr	r3, [pc, #192]	@ (800668c <HAL_I2C_MemRxCpltCallback+0x3c4>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006690 <HAL_I2C_MemRxCpltCallback+0x3c8>)
 80065d8:	edd3 6a00 	vldr	s13, [r3]
 80065dc:	4b11      	ldr	r3, [pc, #68]	@ (8006624 <HAL_I2C_MemRxCpltCallback+0x35c>)
 80065de:	edd3 7a00 	vldr	s15, [r3]
 80065e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065ee:	ee17 2a90 	vmov	r2, s15
 80065f2:	4b26      	ldr	r3, [pc, #152]	@ (800668c <HAL_I2C_MemRxCpltCallback+0x3c4>)
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	e04d      	b.n	8006694 <HAL_I2C_MemRxCpltCallback+0x3cc>
 80065f8:	000041bc 	.word	0x000041bc
 80065fc:	58021000 	.word	0x58021000
 8006600:	00000030 	.word	0x00000030
 8006604:	00000034 	.word	0x00000034
 8006608:	00000038 	.word	0x00000038
 800660c:	0000003c 	.word	0x0000003c
 8006610:	00000040 	.word	0x00000040
 8006614:	00000044 	.word	0x00000044
 8006618:	42830000 	.word	0x42830000
 800661c:	46000000 	.word	0x46000000
 8006620:	00000014 	.word	0x00000014
 8006624:	00000010 	.word	0x00000010
 8006628:	0000000c 	.word	0x0000000c
 800662c:	00000008 	.word	0x00000008
 8006630:	00000004 	.word	0x00000004
 8006634:	00000000 	.word	0x00000000
 8006638:	0000001c 	.word	0x0000001c
 800663c:	00000018 	.word	0x00000018
 8006640:	00000048 	.word	0x00000048
 8006644:	00000064 	.word	0x00000064
 8006648:	00004060 	.word	0x00004060
 800664c:	00004064 	.word	0x00004064
 8006650:	00004068 	.word	0x00004068
 8006654:	00004032 	.word	0x00004032
 8006658:	00004054 	.word	0x00004054
 800665c:	00004030 	.word	0x00004030
 8006660:	00004050 	.word	0x00004050
 8006664:	00004058 	.word	0x00004058
 8006668:	3a83126f 	.word	0x3a83126f
 800666c:	0000403c 	.word	0x0000403c
 8006670:	00004038 	.word	0x00004038
 8006674:	00004040 	.word	0x00004040
 8006678:	00004084 	.word	0x00004084
 800667c:	00004088 	.word	0x00004088
 8006680:	0000408c 	.word	0x0000408c
 8006684:	00004090 	.word	0x00004090
 8006688:	0000409c 	.word	0x0000409c
 800668c:	00004094 	.word	0x00004094
 8006690:	000040a4 	.word	0x000040a4
			error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 8006694:	4bd0      	ldr	r3, [pc, #832]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x710>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066a0:	4bce      	ldr	r3, [pc, #824]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x714>)
 80066a2:	edd3 6a00 	vldr	s13, [r3]
 80066a6:	4bce      	ldr	r3, [pc, #824]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x718>)
 80066a8:	edd3 7a00 	vldr	s15, [r3]
 80066ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80066b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066b8:	ee17 2a90 	vmov	r2, s15
 80066bc:	4bc6      	ldr	r3, [pc, #792]	@ (80069d8 <HAL_I2C_MemRxCpltCallback+0x710>)
 80066be:	601a      	str	r2, [r3, #0]


			PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 80066c0:	2201      	movs	r2, #1
 80066c2:	49c8      	ldr	r1, [pc, #800]	@ (80069e4 <HAL_I2C_MemRxCpltCallback+0x71c>)
 80066c4:	48c8      	ldr	r0, [pc, #800]	@ (80069e8 <HAL_I2C_MemRxCpltCallback+0x720>)
 80066c6:	f7fd f9bd 	bl	8003a44 <PID_cal>
			PID_cal(&pid_rool, PID_FAC_Rool, 2);
 80066ca:	2202      	movs	r2, #2
 80066cc:	49c7      	ldr	r1, [pc, #796]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x724>)
 80066ce:	48c8      	ldr	r0, [pc, #800]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x728>)
 80066d0:	f7fd f9b8 	bl	8003a44 <PID_cal>
			PID_cal(&pid_yaw, PID_FAC_Yaw, 3);
 80066d4:	2203      	movs	r2, #3
 80066d6:	49c7      	ldr	r1, [pc, #796]	@ (80069f4 <HAL_I2C_MemRxCpltCallback+0x72c>)
 80066d8:	48c0      	ldr	r0, [pc, #768]	@ (80069dc <HAL_I2C_MemRxCpltCallback+0x714>)
 80066da:	f7fd f9b3 	bl	8003a44 <PID_cal>

			PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 80066de:	2204      	movs	r2, #4
 80066e0:	49c5      	ldr	r1, [pc, #788]	@ (80069f8 <HAL_I2C_MemRxCpltCallback+0x730>)
 80066e2:	48c6      	ldr	r0, [pc, #792]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0x734>)
 80066e4:	f7fd f9ae 	bl	8003a44 <PID_cal>
			PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 80066e8:	2205      	movs	r2, #5
 80066ea:	49c5      	ldr	r1, [pc, #788]	@ (8006a00 <HAL_I2C_MemRxCpltCallback+0x738>)
 80066ec:	48c5      	ldr	r0, [pc, #788]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x73c>)
 80066ee:	f7fd f9a9 	bl	8003a44 <PID_cal>
			PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 80066f2:	2206      	movs	r2, #6
 80066f4:	49c4      	ldr	r1, [pc, #784]	@ (8006a08 <HAL_I2C_MemRxCpltCallback+0x740>)
 80066f6:	48c5      	ldr	r0, [pc, #788]	@ (8006a0c <HAL_I2C_MemRxCpltCallback+0x744>)
 80066f8:	f7fd f9a4 	bl	8003a44 <PID_cal>


			old_error_pitch = wanted_pitch - now_pitch;
 80066fc:	4bc4      	ldr	r3, [pc, #784]	@ (8006a10 <HAL_I2C_MemRxCpltCallback+0x748>)
 80066fe:	ed93 7a00 	vldr	s14, [r3]
 8006702:	4bc4      	ldr	r3, [pc, #784]	@ (8006a14 <HAL_I2C_MemRxCpltCallback+0x74c>)
 8006704:	edd3 7a00 	vldr	s15, [r3]
 8006708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800670c:	4bc2      	ldr	r3, [pc, #776]	@ (8006a18 <HAL_I2C_MemRxCpltCallback+0x750>)
 800670e:	edc3 7a00 	vstr	s15, [r3]
			old_error_rool = wanted_rool - now_rool;
 8006712:	4bc2      	ldr	r3, [pc, #776]	@ (8006a1c <HAL_I2C_MemRxCpltCallback+0x754>)
 8006714:	ed93 7a00 	vldr	s14, [r3]
 8006718:	4bc1      	ldr	r3, [pc, #772]	@ (8006a20 <HAL_I2C_MemRxCpltCallback+0x758>)
 800671a:	edd3 7a00 	vldr	s15, [r3]
 800671e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006722:	4bc0      	ldr	r3, [pc, #768]	@ (8006a24 <HAL_I2C_MemRxCpltCallback+0x75c>)
 8006724:	edc3 7a00 	vstr	s15, [r3]

			old_error_angular_rate_pitch = pid_pitch - gx;
 8006728:	4baf      	ldr	r3, [pc, #700]	@ (80069e8 <HAL_I2C_MemRxCpltCallback+0x720>)
 800672a:	ed93 7a00 	vldr	s14, [r3]
 800672e:	4bbe      	ldr	r3, [pc, #760]	@ (8006a28 <HAL_I2C_MemRxCpltCallback+0x760>)
 8006730:	edd3 7a00 	vldr	s15, [r3]
 8006734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006738:	4bbc      	ldr	r3, [pc, #752]	@ (8006a2c <HAL_I2C_MemRxCpltCallback+0x764>)
 800673a:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_rool = pid_rool - gy;
 800673e:	4bac      	ldr	r3, [pc, #688]	@ (80069f0 <HAL_I2C_MemRxCpltCallback+0x728>)
 8006740:	ed93 7a00 	vldr	s14, [r3]
 8006744:	4bba      	ldr	r3, [pc, #744]	@ (8006a30 <HAL_I2C_MemRxCpltCallback+0x768>)
 8006746:	edd3 7a00 	vldr	s15, [r3]
 800674a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800674e:	4bb9      	ldr	r3, [pc, #740]	@ (8006a34 <HAL_I2C_MemRxCpltCallback+0x76c>)
 8006750:	edc3 7a00 	vstr	s15, [r3]
			old_error_angular_rate_yaw = wanted_yaw - gz;
 8006754:	4bb8      	ldr	r3, [pc, #736]	@ (8006a38 <HAL_I2C_MemRxCpltCallback+0x770>)
 8006756:	ed93 7a00 	vldr	s14, [r3]
 800675a:	4ba1      	ldr	r3, [pc, #644]	@ (80069e0 <HAL_I2C_MemRxCpltCallback+0x718>)
 800675c:	edd3 7a00 	vldr	s15, [r3]
 8006760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006764:	4bb5      	ldr	r3, [pc, #724]	@ (8006a3c <HAL_I2C_MemRxCpltCallback+0x774>)
 8006766:	edc3 7a00 	vstr	s15, [r3]


			MYDRON.ROOL = pid_angular_rate_rool;
 800676a:	4ba6      	ldr	r3, [pc, #664]	@ (8006a04 <HAL_I2C_MemRxCpltCallback+0x73c>)
 800676c:	edd3 7a00 	vldr	s15, [r3]
 8006770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006774:	ee17 3a90 	vmov	r3, s15
 8006778:	b21a      	sxth	r2, r3
 800677a:	4bb1      	ldr	r3, [pc, #708]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 800677c:	80da      	strh	r2, [r3, #6]
			MYDRON.PITCH = pid_angular_rate_pitch;
 800677e:	4b9f      	ldr	r3, [pc, #636]	@ (80069fc <HAL_I2C_MemRxCpltCallback+0x734>)
 8006780:	edd3 7a00 	vldr	s15, [r3]
 8006784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006788:	ee17 3a90 	vmov	r3, s15
 800678c:	b21a      	sxth	r2, r3
 800678e:	4bac      	ldr	r3, [pc, #688]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 8006790:	809a      	strh	r2, [r3, #4]
			MYDRON.YAW = pid_angular_rate_yaw;
 8006792:	4b9e      	ldr	r3, [pc, #632]	@ (8006a0c <HAL_I2C_MemRxCpltCallback+0x744>)
 8006794:	edd3 7a00 	vldr	s15, [r3]
 8006798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800679c:	ee17 3a90 	vmov	r3, s15
 80067a0:	b21a      	sxth	r2, r3
 80067a2:	4ba7      	ldr	r3, [pc, #668]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 80067a4:	811a      	strh	r2, [r3, #8]
//				wanted_thrust = MYDRON.THRUST/wobble_strenght;
//				Wobble_handler();
//			}


			Thrust_filter(1);
 80067a6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80067aa:	f7fd f815 	bl	80037d8 <Thrust_filter>
			if(MYDRON.THRUST > thrust_limit){
 80067ae:	4ba4      	ldr	r3, [pc, #656]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 80067b0:	885b      	ldrh	r3, [r3, #2]
 80067b2:	461a      	mov	r2, r3
 80067b4:	4ba3      	ldr	r3, [pc, #652]	@ (8006a44 <HAL_I2C_MemRxCpltCallback+0x77c>)
 80067b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	dd05      	ble.n	80067ca <HAL_I2C_MemRxCpltCallback+0x502>
				MYDRON.THRUST = thrust_limit;
 80067be:	4ba1      	ldr	r3, [pc, #644]	@ (8006a44 <HAL_I2C_MemRxCpltCallback+0x77c>)
 80067c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	4b9e      	ldr	r3, [pc, #632]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 80067c8:	805a      	strh	r2, [r3, #2]
			}


			Stack_Push(WartoscBezwgledna(PID_FAC_Pitch[4]));
 80067ca:	4b86      	ldr	r3, [pc, #536]	@ (80069e4 <HAL_I2C_MemRxCpltCallback+0x71c>)
 80067cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80067d0:	eeb0 0a67 	vmov.f32	s0, s15
 80067d4:	f000 fb10 	bl	8006df8 <WartoscBezwgledna>
 80067d8:	eef0 7a40 	vmov.f32	s15, s0
 80067dc:	eeb0 0a67 	vmov.f32	s0, s15
 80067e0:	f000 feae 	bl	8007540 <Stack_Push>
			Stack_Push(WartoscBezwgledna(PID_FAC_Rool[4]));
 80067e4:	4b81      	ldr	r3, [pc, #516]	@ (80069ec <HAL_I2C_MemRxCpltCallback+0x724>)
 80067e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80067ea:	eeb0 0a67 	vmov.f32	s0, s15
 80067ee:	f000 fb03 	bl	8006df8 <WartoscBezwgledna>
 80067f2:	eef0 7a40 	vmov.f32	s15, s0
 80067f6:	eeb0 0a67 	vmov.f32	s0, s15
 80067fa:	f000 fea1 	bl	8007540 <Stack_Push>
			Stack_Push(now_pitch);
 80067fe:	4b85      	ldr	r3, [pc, #532]	@ (8006a14 <HAL_I2C_MemRxCpltCallback+0x74c>)
 8006800:	edd3 7a00 	vldr	s15, [r3]
 8006804:	eeb0 0a67 	vmov.f32	s0, s15
 8006808:	f000 fe9a 	bl	8007540 <Stack_Push>
			Stack_Push(now_rool);
 800680c:	4b84      	ldr	r3, [pc, #528]	@ (8006a20 <HAL_I2C_MemRxCpltCallback+0x758>)
 800680e:	edd3 7a00 	vldr	s15, [r3]
 8006812:	eeb0 0a67 	vmov.f32	s0, s15
 8006816:	f000 fe93 	bl	8007540 <Stack_Push>


			SPEED1 = (MYDRON.THRUST*0.7) + MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 800681a:	4b89      	ldr	r3, [pc, #548]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 800681c:	885b      	ldrh	r3, [r3, #2]
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006826:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80069c0 <HAL_I2C_MemRxCpltCallback+0x6f8>
 800682a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800682e:	4b84      	ldr	r3, [pc, #528]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 8006830:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006834:	ee07 3a90 	vmov	s15, r3
 8006838:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800683c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006840:	4b7f      	ldr	r3, [pc, #508]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 8006842:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006846:	ee07 3a90 	vmov	s15, r3
 800684a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800684e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006852:	4b7b      	ldr	r3, [pc, #492]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 8006854:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006858:	ee07 3a90 	vmov	s15, r3
 800685c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006860:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006864:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 80069c8 <HAL_I2C_MemRxCpltCallback+0x700>
 8006868:	ee37 7b06 	vadd.f64	d7, d7, d6
 800686c:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 80069d0 <HAL_I2C_MemRxCpltCallback+0x708>
 8006870:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006874:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006878:	ee17 3a90 	vmov	r3, s15
 800687c:	b29a      	uxth	r2, r3
 800687e:	4b72      	ldr	r3, [pc, #456]	@ (8006a48 <HAL_I2C_MemRxCpltCallback+0x780>)
 8006880:	801a      	strh	r2, [r3, #0]
			SPEED2 = (MYDRON.THRUST*0.7) - MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8006882:	4b6f      	ldr	r3, [pc, #444]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 8006884:	885b      	ldrh	r3, [r3, #2]
 8006886:	ee07 3a90 	vmov	s15, r3
 800688a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800688e:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 80069c0 <HAL_I2C_MemRxCpltCallback+0x6f8>
 8006892:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006896:	4b6a      	ldr	r3, [pc, #424]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 8006898:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800689c:	ee07 3a90 	vmov	s15, r3
 80068a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80068a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80068a8:	4b65      	ldr	r3, [pc, #404]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 80068aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80068b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80068ba:	4b61      	ldr	r3, [pc, #388]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 80068bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80068c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80068cc:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80069c8 <HAL_I2C_MemRxCpltCallback+0x700>
 80068d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80068d4:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80069d0 <HAL_I2C_MemRxCpltCallback+0x708>
 80068d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80068dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80068e0:	ee17 3a90 	vmov	r3, s15
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	4b59      	ldr	r3, [pc, #356]	@ (8006a4c <HAL_I2C_MemRxCpltCallback+0x784>)
 80068e8:	801a      	strh	r2, [r3, #0]
			SPEED3 = (MYDRON.THRUST*0.7) + MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 80068ea:	4b55      	ldr	r3, [pc, #340]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 80068ec:	885b      	ldrh	r3, [r3, #2]
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80068f6:	ed9f 6b32 	vldr	d6, [pc, #200]	@ 80069c0 <HAL_I2C_MemRxCpltCallback+0x6f8>
 80068fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80068fe:	4b50      	ldr	r3, [pc, #320]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 8006900:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006904:	ee07 3a90 	vmov	s15, r3
 8006908:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800690c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006910:	4b4b      	ldr	r3, [pc, #300]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 8006912:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800691e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006922:	4b47      	ldr	r3, [pc, #284]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 8006924:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006928:	ee07 3a90 	vmov	s15, r3
 800692c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006930:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006934:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 80069c8 <HAL_I2C_MemRxCpltCallback+0x700>
 8006938:	ee37 7b06 	vadd.f64	d7, d7, d6
 800693c:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 80069d0 <HAL_I2C_MemRxCpltCallback+0x708>
 8006940:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006944:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006948:	ee17 3a90 	vmov	r3, s15
 800694c:	b29a      	uxth	r2, r3
 800694e:	4b40      	ldr	r3, [pc, #256]	@ (8006a50 <HAL_I2C_MemRxCpltCallback+0x788>)
 8006950:	801a      	strh	r2, [r3, #0]
			SPEED4 = (MYDRON.THRUST*0.7) - MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8006952:	4b3b      	ldr	r3, [pc, #236]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 8006954:	885b      	ldrh	r3, [r3, #2]
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800695e:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 80069c0 <HAL_I2C_MemRxCpltCallback+0x6f8>
 8006962:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006966:	4b36      	ldr	r3, [pc, #216]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 8006968:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800696c:	ee07 3a90 	vmov	s15, r3
 8006970:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006974:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006978:	4b31      	ldr	r3, [pc, #196]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 800697a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006986:	ee36 6b07 	vadd.f64	d6, d6, d7
 800698a:	4b2d      	ldr	r3, [pc, #180]	@ (8006a40 <HAL_I2C_MemRxCpltCallback+0x778>)
 800698c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006990:	ee07 3a90 	vmov	s15, r3
 8006994:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006998:	ee36 7b07 	vadd.f64	d7, d6, d7
 800699c:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 80069c8 <HAL_I2C_MemRxCpltCallback+0x700>
 80069a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80069a4:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 80069d0 <HAL_I2C_MemRxCpltCallback+0x708>
 80069a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80069ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80069b0:	ee17 3a90 	vmov	r3, s15
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	4b27      	ldr	r3, [pc, #156]	@ (8006a54 <HAL_I2C_MemRxCpltCallback+0x78c>)
 80069b8:	801a      	strh	r2, [r3, #0]
 80069ba:	e04d      	b.n	8006a58 <HAL_I2C_MemRxCpltCallback+0x790>
 80069bc:	f3af 8000 	nop.w
 80069c0:	66666666 	.word	0x66666666
 80069c4:	3fe66666 	.word	0x3fe66666
 80069c8:	00000000 	.word	0x00000000
 80069cc:	40c48200 	.word	0x40c48200
 80069d0:	00000000 	.word	0x00000000
 80069d4:	407f4000 	.word	0x407f4000
 80069d8:	00004098 	.word	0x00004098
 80069dc:	000040a0 	.word	0x000040a0
 80069e0:	00000014 	.word	0x00000014
 80069e4:	000040d8 	.word	0x000040d8
 80069e8:	0000409c 	.word	0x0000409c
 80069ec:	000040ec 	.word	0x000040ec
 80069f0:	000040a4 	.word	0x000040a4
 80069f4:	00004100 	.word	0x00004100
 80069f8:	00004138 	.word	0x00004138
 80069fc:	000040a8 	.word	0x000040a8
 8006a00:	0000414c 	.word	0x0000414c
 8006a04:	000040b0 	.word	0x000040b0
 8006a08:	00004160 	.word	0x00004160
 8006a0c:	000040ac 	.word	0x000040ac
 8006a10:	00004050 	.word	0x00004050
 8006a14:	00004060 	.word	0x00004060
 8006a18:	0000406c 	.word	0x0000406c
 8006a1c:	00004054 	.word	0x00004054
 8006a20:	00004064 	.word	0x00004064
 8006a24:	00004070 	.word	0x00004070
 8006a28:	0000000c 	.word	0x0000000c
 8006a2c:	00004078 	.word	0x00004078
 8006a30:	00000010 	.word	0x00000010
 8006a34:	0000407c 	.word	0x0000407c
 8006a38:	00004058 	.word	0x00004058
 8006a3c:	00004080 	.word	0x00004080
 8006a40:	00000160 	.word	0x00000160
 8006a44:	00004046 	.word	0x00004046
 8006a48:	00004174 	.word	0x00004174
 8006a4c:	00004176 	.word	0x00004176
 8006a50:	00004178 	.word	0x00004178
 8006a54:	0000417a 	.word	0x0000417a

			if(SPEED1 != OLD_SPEED1){
 8006a58:	4b5d      	ldr	r3, [pc, #372]	@ (8006bd0 <HAL_I2C_MemRxCpltCallback+0x908>)
 8006a5a:	881a      	ldrh	r2, [r3, #0]
 8006a5c:	4b5d      	ldr	r3, [pc, #372]	@ (8006bd4 <HAL_I2C_MemRxCpltCallback+0x90c>)
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d004      	beq.n	8006a6e <HAL_I2C_MemRxCpltCallback+0x7a6>
				ESC_1_SPEED(SPEED1);
 8006a64:	4b5a      	ldr	r3, [pc, #360]	@ (8006bd0 <HAL_I2C_MemRxCpltCallback+0x908>)
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fa f9e3 	bl	8000e34 <ESC_1_SPEED>
			}
			if(SPEED2 != OLD_SPEED2){
 8006a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8006bd8 <HAL_I2C_MemRxCpltCallback+0x910>)
 8006a70:	881a      	ldrh	r2, [r3, #0]
 8006a72:	4b5a      	ldr	r3, [pc, #360]	@ (8006bdc <HAL_I2C_MemRxCpltCallback+0x914>)
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d004      	beq.n	8006a84 <HAL_I2C_MemRxCpltCallback+0x7bc>
				ESC_2_SPEED(SPEED2);
 8006a7a:	4b57      	ldr	r3, [pc, #348]	@ (8006bd8 <HAL_I2C_MemRxCpltCallback+0x910>)
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fa f9fa 	bl	8000e78 <ESC_2_SPEED>
			}
			if(SPEED3 != OLD_SPEED3){
 8006a84:	4b56      	ldr	r3, [pc, #344]	@ (8006be0 <HAL_I2C_MemRxCpltCallback+0x918>)
 8006a86:	881a      	ldrh	r2, [r3, #0]
 8006a88:	4b56      	ldr	r3, [pc, #344]	@ (8006be4 <HAL_I2C_MemRxCpltCallback+0x91c>)
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d004      	beq.n	8006a9a <HAL_I2C_MemRxCpltCallback+0x7d2>
				ESC_3_SPEED(SPEED3);
 8006a90:	4b53      	ldr	r3, [pc, #332]	@ (8006be0 <HAL_I2C_MemRxCpltCallback+0x918>)
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fa fa11 	bl	8000ebc <ESC_3_SPEED>
			}
			if(SPEED4 != OLD_SPEED4){
 8006a9a:	4b53      	ldr	r3, [pc, #332]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x920>)
 8006a9c:	881a      	ldrh	r2, [r3, #0]
 8006a9e:	4b53      	ldr	r3, [pc, #332]	@ (8006bec <HAL_I2C_MemRxCpltCallback+0x924>)
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d004      	beq.n	8006ab0 <HAL_I2C_MemRxCpltCallback+0x7e8>
				ESC_4_SPEED(SPEED4);
 8006aa6:	4b50      	ldr	r3, [pc, #320]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x920>)
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fa fa28 	bl	8000f00 <ESC_4_SPEED>
			}

			OLD_SPEED1 = SPEED1;
 8006ab0:	4b47      	ldr	r3, [pc, #284]	@ (8006bd0 <HAL_I2C_MemRxCpltCallback+0x908>)
 8006ab2:	881a      	ldrh	r2, [r3, #0]
 8006ab4:	4b47      	ldr	r3, [pc, #284]	@ (8006bd4 <HAL_I2C_MemRxCpltCallback+0x90c>)
 8006ab6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED2 = SPEED2;
 8006ab8:	4b47      	ldr	r3, [pc, #284]	@ (8006bd8 <HAL_I2C_MemRxCpltCallback+0x910>)
 8006aba:	881a      	ldrh	r2, [r3, #0]
 8006abc:	4b47      	ldr	r3, [pc, #284]	@ (8006bdc <HAL_I2C_MemRxCpltCallback+0x914>)
 8006abe:	801a      	strh	r2, [r3, #0]
			OLD_SPEED3 = SPEED3;
 8006ac0:	4b47      	ldr	r3, [pc, #284]	@ (8006be0 <HAL_I2C_MemRxCpltCallback+0x918>)
 8006ac2:	881a      	ldrh	r2, [r3, #0]
 8006ac4:	4b47      	ldr	r3, [pc, #284]	@ (8006be4 <HAL_I2C_MemRxCpltCallback+0x91c>)
 8006ac6:	801a      	strh	r2, [r3, #0]
			OLD_SPEED4 = SPEED4;
 8006ac8:	4b47      	ldr	r3, [pc, #284]	@ (8006be8 <HAL_I2C_MemRxCpltCallback+0x920>)
 8006aca:	881a      	ldrh	r2, [r3, #0]
 8006acc:	4b47      	ldr	r3, [pc, #284]	@ (8006bec <HAL_I2C_MemRxCpltCallback+0x924>)
 8006ace:	801a      	strh	r2, [r3, #0]

			LED_G_0;
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ad6:	4846      	ldr	r0, [pc, #280]	@ (8006bf0 <HAL_I2C_MemRxCpltCallback+0x928>)
 8006ad8:	f007 fa72 	bl	800dfc0 <HAL_GPIO_WritePin>
	}
	if(HMC583L_IRQ == 1){
 8006adc:	4b45      	ldr	r3, [pc, #276]	@ (8006bf4 <HAL_I2C_MemRxCpltCallback+0x92c>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d132      	bne.n	8006b4a <HAL_I2C_MemRxCpltCallback+0x882>
		HMC583L_IRQ = 0;
 8006ae4:	4b43      	ldr	r3, [pc, #268]	@ (8006bf4 <HAL_I2C_MemRxCpltCallback+0x92c>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	701a      	strb	r2, [r3, #0]
		Mag_Z = (float)(HMC5883L_Get_Z_End_IT() - Mag_Offset_val);
 8006aea:	f7fa fb0d 	bl	8001108 <HMC5883L_Get_Z_End_IT>
 8006aee:	4603      	mov	r3, r0
 8006af0:	461a      	mov	r2, r3
 8006af2:	4b41      	ldr	r3, [pc, #260]	@ (8006bf8 <HAL_I2C_MemRxCpltCallback+0x930>)
 8006af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b02:	4b3e      	ldr	r3, [pc, #248]	@ (8006bfc <HAL_I2C_MemRxCpltCallback+0x934>)
 8006b04:	edc3 7a00 	vstr	s15, [r3]
		Mag_Z = (Mag_Z * (FDP_Mag_Z_FQ * 0.1) / (1 + (FDP_Mag_Z_FQ * 0.1))) + (Old_Mag_Z * (1 / (1 + (FDP_Mag_Z_FQ * 0.1)))); // 0.1 to looptime, co 100ms odczyt
 8006b08:	4b3c      	ldr	r3, [pc, #240]	@ (8006bfc <HAL_I2C_MemRxCpltCallback+0x934>)
 8006b0a:	edd3 7a00 	vldr	s15, [r3]
 8006b0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006b12:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8006bb8 <HAL_I2C_MemRxCpltCallback+0x8f0>
 8006b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006b1a:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8006bc0 <HAL_I2C_MemRxCpltCallback+0x8f8>
 8006b1e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8006b22:	4b37      	ldr	r3, [pc, #220]	@ (8006c00 <HAL_I2C_MemRxCpltCallback+0x938>)
 8006b24:	edd3 7a00 	vldr	s15, [r3]
 8006b28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006b2c:	ed9f 5b26 	vldr	d5, [pc, #152]	@ 8006bc8 <HAL_I2C_MemRxCpltCallback+0x900>
 8006b30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006b34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006b38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8006bfc <HAL_I2C_MemRxCpltCallback+0x934>)
 8006b3e:	edc3 7a00 	vstr	s15, [r3]
		Old_Mag_Z = Mag_Z;
 8006b42:	4b2e      	ldr	r3, [pc, #184]	@ (8006bfc <HAL_I2C_MemRxCpltCallback+0x934>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2e      	ldr	r2, [pc, #184]	@ (8006c00 <HAL_I2C_MemRxCpltCallback+0x938>)
 8006b48:	6013      	str	r3, [r2, #0]
	}
	if(BMP180_IRQ == 1){
 8006b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8006c04 <HAL_I2C_MemRxCpltCallback+0x93c>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d113      	bne.n	8006b7a <HAL_I2C_MemRxCpltCallback+0x8b2>
		temperature = BMP180_GET_temp_IT();
 8006b52:	f7f9 fe1d 	bl	8000790 <BMP180_GET_temp_IT>
 8006b56:	4603      	mov	r3, r0
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8006c08 <HAL_I2C_MemRxCpltCallback+0x940>)
 8006b5c:	601a      	str	r2, [r3, #0]
		temp = BMP180_GET_temp(temperature);
 8006b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8006c08 <HAL_I2C_MemRxCpltCallback+0x940>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7f9 ff37 	bl	80009d8 <BMP180_GET_temp>
 8006b6a:	eef0 7a40 	vmov.f32	s15, s0
 8006b6e:	4b27      	ldr	r3, [pc, #156]	@ (8006c0c <HAL_I2C_MemRxCpltCallback+0x944>)
 8006b70:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006b74:	4b23      	ldr	r3, [pc, #140]	@ (8006c04 <HAL_I2C_MemRxCpltCallback+0x93c>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
	}
	if(BMP180_IRQ == 2){
 8006b7a:	4b22      	ldr	r3, [pc, #136]	@ (8006c04 <HAL_I2C_MemRxCpltCallback+0x93c>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d113      	bne.n	8006baa <HAL_I2C_MemRxCpltCallback+0x8e2>
		pressure = BMP180_GET_pres_IT();
 8006b82:	f7f9 fe1b 	bl	80007bc <BMP180_GET_pres_IT>
 8006b86:	4603      	mov	r3, r0
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4b21      	ldr	r3, [pc, #132]	@ (8006c10 <HAL_I2C_MemRxCpltCallback+0x948>)
 8006b8c:	601a      	str	r2, [r3, #0]
		pres = BMP180_GET_pres(pressure);
 8006b8e:	4b20      	ldr	r3, [pc, #128]	@ (8006c10 <HAL_I2C_MemRxCpltCallback+0x948>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7f9 ff7b 	bl	8000a90 <BMP180_GET_pres>
 8006b9a:	eef0 7a40 	vmov.f32	s15, s0
 8006b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8006c14 <HAL_I2C_MemRxCpltCallback+0x94c>)
 8006ba0:	edc3 7a00 	vstr	s15, [r3]
		BMP180_IRQ = 0;
 8006ba4:	4b17      	ldr	r3, [pc, #92]	@ (8006c04 <HAL_I2C_MemRxCpltCallback+0x93c>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	701a      	strb	r2, [r3, #0]
	}
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	f3af 8000 	nop.w
 8006bb8:	9999999a 	.word	0x9999999a
 8006bbc:	3fc99999 	.word	0x3fc99999
 8006bc0:	33333333 	.word	0x33333333
 8006bc4:	3ff33333 	.word	0x3ff33333
 8006bc8:	aaaaaaab 	.word	0xaaaaaaab
 8006bcc:	3feaaaaa 	.word	0x3feaaaaa
 8006bd0:	00004174 	.word	0x00004174
 8006bd4:	0000417c 	.word	0x0000417c
 8006bd8:	00004176 	.word	0x00004176
 8006bdc:	0000417e 	.word	0x0000417e
 8006be0:	00004178 	.word	0x00004178
 8006be4:	00004180 	.word	0x00004180
 8006be8:	0000417a 	.word	0x0000417a
 8006bec:	00004182 	.word	0x00004182
 8006bf0:	58021000 	.word	0x58021000
 8006bf4:	000041bd 	.word	0x000041bd
 8006bf8:	00000050 	.word	0x00000050
 8006bfc:	00000048 	.word	0x00000048
 8006c00:	0000004c 	.word	0x0000004c
 8006c04:	000041be 	.word	0x000041be
 8006c08:	000000a0 	.word	0x000000a0
 8006c0c:	000000c4 	.word	0x000000c4
 8006c10:	000000a4 	.word	0x000000a4
 8006c14:	000000c8 	.word	0x000000c8

08006c18 <convert_array_to_value>:


void convert_array_to_value(uint8_t arrayfrom[], int16_t *value , uint8_t rangebegin, uint8_t rangeend){
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	ed2d 8b04 	vpush	{d8-d9}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4611      	mov	r1, r2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	71fb      	strb	r3, [r7, #7]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	71bb      	strb	r3, [r7, #6]
	*value = 0;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2200      	movs	r2, #0
 8006c36:	801a      	strh	r2, [r3, #0]
	int range = rangeend - rangebegin;
 8006c38:	79ba      	ldrb	r2, [r7, #6]
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	613b      	str	r3, [r7, #16]

	for(int y = 0; y < range+1; y++){
 8006c40:	2300      	movs	r3, #0
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	e02e      	b.n	8006ca4 <convert_array_to_value+0x8c>
		*value = *value + arrayfrom[rangebegin+y]*pow(10, range - y);
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c4c:	ee07 3a90 	vmov	s15, r3
 8006c50:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8006c54:	79fa      	ldrb	r2, [r7, #7]
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	4413      	add	r3, r2
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c78:	eeb0 1b47 	vmov.f64	d1, d7
 8006c7c:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006c80:	f016 fea2 	bl	801d9c8 <pow>
 8006c84:	eeb0 7b40 	vmov.f64	d7, d0
 8006c88:	ee29 7b07 	vmul.f64	d7, d9, d7
 8006c8c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006c90:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006c94:	ee17 3a90 	vmov	r3, s15
 8006c98:	b21a      	sxth	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	801a      	strh	r2, [r3, #0]
	for(int y = 0; y < range+1; y++){
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	dacc      	bge.n	8006c46 <convert_array_to_value+0x2e>
	}

}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	ecbd 8b04 	vpop	{d8-d9}
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <convert_value_to_array>:


void convert_value_to_array(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006cba:	b590      	push	{r4, r7, lr}
 8006cbc:	b087      	sub	sp, #28
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6039      	str	r1, [r7, #0]
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	80fb      	strh	r3, [r7, #6]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	717b      	strb	r3, [r7, #5]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8006cda:	793a      	ldrb	r2, [r7, #4]
 8006cdc:	797b      	ldrb	r3, [r7, #5]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < range+1; i++){// 3
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	e03e      	b.n	8006d66 <convert_value_to_array+0xac>
		while(value >= (uint16_t)pow(10,range - i)){
			if(value == 0){
 8006ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d028      	beq.n	8006d42 <convert_value_to_array+0x88>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	200a      	movs	r0, #10
 8006cfa:	f000 f83d 	bl	8006d78 <potenga>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	80fb      	strh	r3, [r7, #6]
			x++;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)pow(10,range - i)){
 8006d10:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d22:	eeb0 1b47 	vmov.f64	d1, d7
 8006d26:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 8006d2a:	f016 fe4d 	bl	801d9c8 <pow>
 8006d2e:	eeb0 7b40 	vmov.f64	d7, d0
 8006d32:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006d36:	ee17 3a90 	vmov	r3, s15
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	429c      	cmp	r4, r3
 8006d3e:	dad3      	bge.n	8006ce8 <convert_value_to_array+0x2e>
 8006d40:	e000      	b.n	8006d44 <convert_value_to_array+0x8a>
				break;
 8006d42:	bf00      	nop
		}
		arraytoputin[rangebegin+loopnum] = (uint8_t)x;
 8006d44:	797a      	ldrb	r2, [r7, #5]
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	4413      	add	r3, r2
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	613b      	str	r3, [r7, #16]
		x = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < range+1; i++){// 3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	3301      	adds	r3, #1
 8006d64:	60fb      	str	r3, [r7, #12]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	dad0      	bge.n	8006d10 <convert_value_to_array+0x56>
	}
}
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd90      	pop	{r4, r7, pc}

08006d78 <potenga>:
uint32_t potenga(int a, int b){
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
	int32_t c = a;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
	if(b == 0){
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <potenga+0x18>
		return 1;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e02d      	b.n	8006dec <potenga+0x74>
	}
	if(b == 1){
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d101      	bne.n	8006d9a <potenga+0x22>
		return a;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	e028      	b.n	8006dec <potenga+0x74>
	}
	if(b > 1){
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	dd10      	ble.n	8006dc2 <potenga+0x4a>
			for(int i = 1; i < b; i++){
 8006da0:	2301      	movs	r3, #1
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	e007      	b.n	8006db6 <potenga+0x3e>
			a = a*c;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	fb02 f303 	mul.w	r3, r2, r3
 8006dae:	607b      	str	r3, [r7, #4]
			for(int i = 1; i < b; i++){
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	3301      	adds	r3, #1
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	dbf3      	blt.n	8006da6 <potenga+0x2e>
		}
		return a;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	e014      	b.n	8006dec <potenga+0x74>
	}
	if(b < 0){
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da10      	bge.n	8006dea <potenga+0x72>
		for(int i = 0; i < b; i++){
 8006dc8:	2300      	movs	r3, #0
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	e007      	b.n	8006dde <potenga+0x66>
			a = a/c;
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8006dd6:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < b; i++){
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	dbf3      	blt.n	8006dce <potenga+0x56>
		}
		return a;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	e000      	b.n	8006dec <potenga+0x74>
	}
	return a;
 8006dea:	687b      	ldr	r3, [r7, #4]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <WartoscBezwgledna>:
void valswitch(uint8_t x){
	if(x == 2){
		x = 0;
	}
}
float WartoscBezwgledna(float a){
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	ed87 0a01 	vstr	s0, [r7, #4]
	if(a < 0){
 8006e02:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0e:	d504      	bpl.n	8006e1a <WartoscBezwgledna+0x22>
		return a*(-1);
 8006e10:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e14:	eef1 7a67 	vneg.f32	s15, s15
 8006e18:	e001      	b.n	8006e1e <WartoscBezwgledna+0x26>
	}
	else{
		return a;
 8006e1a:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 8006e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <RGB_LED_Set_color>:
    ITM_SendChar(*ptr++);
  }
  return len;
}

void RGB_LED_Set_color(uint8_t R, uint8_t G, uint8_t B){
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	71fb      	strb	r3, [r7, #7]
 8006e36:	460b      	mov	r3, r1
 8006e38:	71bb      	strb	r3, [r7, #6]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	717b      	strb	r3, [r7, #5]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, B);
 8006e3e:	4b09      	ldr	r3, [pc, #36]	@ (8006e64 <RGB_LED_Set_color+0x38>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	797a      	ldrb	r2, [r7, #5]
 8006e44:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, R);
 8006e46:	4b07      	ldr	r3, [pc, #28]	@ (8006e64 <RGB_LED_Set_color+0x38>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	79fa      	ldrb	r2, [r7, #7]
 8006e4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, G);
 8006e4e:	4b05      	ldr	r3, [pc, #20]	@ (8006e64 <RGB_LED_Set_color+0x38>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	79ba      	ldrb	r2, [r7, #6]
 8006e54:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	24000380 	.word	0x24000380

08006e68 <RGB_LED_For_BAT>:

void RGB_LED_For_BAT(uint8_t batval){
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	71fb      	strb	r3, [r7, #7]
 * batval == 75	  r = 128 g = 128 b = 0
 * batval == 0    r = 255 g = 0 b = 0
 *
 *   r + g = 255
 */
	RGB_LED_Set_color((255 - ((float)batval*2.55)), ((float)batval*2.55), 0);
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	ee07 3a90 	vmov	s15, r3
 8006e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006e80:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8006ed0 <RGB_LED_For_BAT+0x68>
 8006e84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e88:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8006ed8 <RGB_LED_For_BAT+0x70>
 8006e8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006e94:	edc7 7a00 	vstr	s15, [r7]
 8006e98:	783b      	ldrb	r3, [r7, #0]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	79fa      	ldrb	r2, [r7, #7]
 8006e9e:	ee07 2a90 	vmov	s15, r2
 8006ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006eaa:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8006ed0 <RGB_LED_For_BAT+0x68>
 8006eae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006eb2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006eb6:	edc7 7a00 	vstr	s15, [r7]
 8006eba:	783a      	ldrb	r2, [r7, #0]
 8006ebc:	b2d1      	uxtb	r1, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff ffb3 	bl	8006e2c <RGB_LED_Set_color>
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	66666666 	.word	0x66666666
 8006ed4:	40046666 	.word	0x40046666
 8006ed8:	00000000 	.word	0x00000000
 8006edc:	406fe000 	.word	0x406fe000

08006ee0 <convert_value_to_array2>:
 *	[0] -
 *	[1] 2
 *	[2] 2
 */

void convert_value_to_array2(int16_t value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006ee0:	b590      	push	{r4, r7, lr}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6039      	str	r1, [r7, #0]
 8006ee8:	4611      	mov	r1, r2
 8006eea:	461a      	mov	r2, r3
 8006eec:	4603      	mov	r3, r0
 8006eee:	80fb      	strh	r3, [r7, #6]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	717b      	strb	r3, [r7, #5]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	713b      	strb	r3, [r7, #4]
	int x = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
	int loopnum = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	613b      	str	r3, [r7, #16]
	int range = rangeend - rangebegin;
 8006f00:	793a      	ldrb	r2, [r7, #4]
 8006f02:	797b      	ldrb	r3, [r7, #5]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	60bb      	str	r3, [r7, #8]

	if(value < 0){
 8006f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	da04      	bge.n	8006f1a <convert_value_to_array2+0x3a>
		arraytoputin[rangebegin] = '-';
 8006f10:	797b      	ldrb	r3, [r7, #5]
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	4413      	add	r3, r2
 8006f16:	222d      	movs	r2, #45	@ 0x2d
 8006f18:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 1; i < range+1; i++){// 3
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	e035      	b.n	8006f8c <convert_value_to_array2+0xac>
		while(value >= (uint16_t)potenga(10,range - i)){
			if(value == 0){
 8006f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01d      	beq.n	8006f64 <convert_value_to_array2+0x84>
				break;
			}
			value -= (uint16_t)potenga(10,range - i);
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	4619      	mov	r1, r3
 8006f30:	200a      	movs	r0, #10
 8006f32:	f7ff ff21 	bl	8006d78 <potenga>
 8006f36:	4603      	mov	r3, r0
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	80fb      	strh	r3, [r7, #6]
			x++;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	3301      	adds	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]
		while(value >= (uint16_t)potenga(10,range - i)){
 8006f48:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	4619      	mov	r1, r3
 8006f54:	200a      	movs	r0, #10
 8006f56:	f7ff ff0f 	bl	8006d78 <potenga>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	429c      	cmp	r4, r3
 8006f60:	dade      	bge.n	8006f20 <convert_value_to_array2+0x40>
 8006f62:	e000      	b.n	8006f66 <convert_value_to_array2+0x86>
				break;
 8006f64:	bf00      	nop
		}
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	7979      	ldrb	r1, [r7, #5]
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	440b      	add	r3, r1
 8006f70:	4619      	mov	r1, r3
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	440b      	add	r3, r1
 8006f76:	3230      	adds	r2, #48	@ 0x30
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	613b      	str	r3, [r7, #16]
		x = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < range+1; i++){// 3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	dad9      	bge.n	8006f48 <convert_value_to_array2+0x68>
	}
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd90      	pop	{r4, r7, pc}

08006f9e <convert_value_to_array3>:
 *	1000.1
 *
 *	range = 5
 *
 */
void convert_value_to_array3(float value, uint8_t *arraytoputin, uint8_t rangebegin, uint8_t rangeend){
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	ed2d 8b02 	vpush	{d8}
 8006fa4:	b08c      	sub	sp, #48	@ 0x30
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	ed87 0a03 	vstr	s0, [r7, #12]
 8006fac:	60b8      	str	r0, [r7, #8]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	71fb      	strb	r3, [r7, #7]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	71bb      	strb	r3, [r7, #6]
	int x = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int loopnum = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	int range = rangeend - rangebegin;
 8006fbe:	79ba      	ldrb	r2, [r7, #6]
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	617b      	str	r3, [r7, #20]
	int power_of_value = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	627b      	str	r3, [r7, #36]	@ 0x24
	float a;
	int kropka;


	if(value < 0){
 8006fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd6:	d50a      	bpl.n	8006fee <convert_value_to_array3+0x50>
		arraytoputin[rangebegin] = '-';
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	4413      	add	r3, r2
 8006fde:	222d      	movs	r2, #45	@ 0x2d
 8006fe0:	701a      	strb	r2, [r3, #0]
		value = value * -1;
 8006fe2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fe6:	eef1 7a67 	vneg.f32	s15, s15
 8006fea:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//sprawdzenie wagi pierwsazej liczby znaczącej
	//potrzebne do dzielenia
	for(int i = 1; i < range*2; i++){
 8006fee:	2301      	movs	r3, #1
 8006ff0:	61fb      	str	r3, [r7, #28]
 8006ff2:	e021      	b.n	8007038 <convert_value_to_array3+0x9a>
		a = pow(10,range - i);
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007002:	eeb0 1b47 	vmov.f64	d1, d7
 8007006:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800700a:	f016 fcdd 	bl	801d9c8 <pow>
 800700e:	eeb0 7b40 	vmov.f64	d7, d0
 8007012:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007016:	edc7 7a04 	vstr	s15, [r7, #16]
		if(value >= a){
 800701a:	ed97 7a03 	vldr	s14, [r7, #12]
 800701e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702a:	da0b      	bge.n	8007044 <convert_value_to_array3+0xa6>
			break;
		}
		power_of_value++;
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	3301      	adds	r3, #1
 8007030:	627b      	str	r3, [r7, #36]	@ 0x24
	for(int i = 1; i < range*2; i++){
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	3301      	adds	r3, #1
 8007036:	61fb      	str	r3, [r7, #28]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	429a      	cmp	r2, r3
 8007040:	dbd8      	blt.n	8006ff4 <convert_value_to_array3+0x56>
 8007042:	e000      	b.n	8007046 <convert_value_to_array3+0xa8>
			break;
 8007044:	bf00      	nop
	}

	power_of_value = range - power_of_value - 1;
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	3b01      	subs	r3, #1
 800704e:	627b      	str	r3, [r7, #36]	@ 0x24

	//		Sprawdzic gdzie jest kropka 0.00123 123.01 12.12
	if(power_of_value <= 0){
 8007050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007052:	2b00      	cmp	r3, #0
 8007054:	dc07      	bgt.n	8007066 <convert_value_to_array3+0xc8>
		arraytoputin[rangebegin + 1] = '.';
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	3301      	adds	r3, #1
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	4413      	add	r3, r2
 800705e:	222e      	movs	r2, #46	@ 0x2e
 8007060:	701a      	strb	r2, [r3, #0]
		kropka = 1;
 8007062:	2301      	movs	r3, #1
 8007064:	623b      	str	r3, [r7, #32]
	}
	if(power_of_value > 0){
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	dd0a      	ble.n	8007082 <convert_value_to_array3+0xe4>
		arraytoputin[rangebegin + power_of_value + 1] = '.';
 800706c:	79fa      	ldrb	r2, [r7, #7]
 800706e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007070:	4413      	add	r3, r2
 8007072:	3301      	adds	r3, #1
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	4413      	add	r3, r2
 8007078:	222e      	movs	r2, #46	@ 0x2e
 800707a:	701a      	strb	r2, [r3, #0]
		kropka = power_of_value + 1;
 800707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707e:	3301      	adds	r3, #1
 8007080:	623b      	str	r3, [r7, #32]
	}


	value = value*pow(10,(range-1) - power_of_value);
 8007082:	edd7 7a03 	vldr	s15, [r7, #12]
 8007086:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	1e5a      	subs	r2, r3, #1
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800709a:	eeb0 1b47 	vmov.f64	d1, d7
 800709e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80070a2:	f016 fc91 	bl	801d9c8 <pow>
 80070a6:	eeb0 7b40 	vmov.f64	d7, d0
 80070aa:	ee28 7b07 	vmul.f64	d7, d8, d7
 80070ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80070b2:	edc7 7a03 	vstr	s15, [r7, #12]


	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 80070b6:	2300      	movs	r3, #0
 80070b8:	61bb      	str	r3, [r7, #24]
 80070ba:	e05f      	b.n	800717c <convert_value_to_array3+0x1de>
		while(value >= (uint16_t)pow(10,(range-1) - i)){
			if(value <= 0){
 80070bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80070c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c8:	d93d      	bls.n	8007146 <convert_value_to_array3+0x1a8>
				break;
			}
			value = value - pow(10,(range-1) - i);
 80070ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80070ce:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	1e5a      	subs	r2, r3, #1
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070e2:	eeb0 1b47 	vmov.f64	d1, d7
 80070e6:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 80070ea:	f016 fc6d 	bl	801d9c8 <pow>
 80070ee:	eeb0 7b40 	vmov.f64	d7, d0
 80070f2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80070f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80070fa:	edc7 7a03 	vstr	s15, [r7, #12]
			x++;
 80070fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007100:	3301      	adds	r3, #1
 8007102:	62fb      	str	r3, [r7, #44]	@ 0x2c
		while(value >= (uint16_t)pow(10,(range-1) - i)){
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	1e5a      	subs	r2, r3, #1
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	ee07 3a90 	vmov	s15, r3
 8007110:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007114:	eeb0 1b47 	vmov.f64	d1, d7
 8007118:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
 800711c:	f016 fc54 	bl	801d9c8 <pow>
 8007120:	eeb0 7b40 	vmov.f64	d7, d0
 8007124:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007128:	ee17 3a90 	vmov	r3, s15
 800712c:	b29b      	uxth	r3, r3
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007136:	ed97 7a03 	vldr	s14, [r7, #12]
 800713a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800713e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007142:	dabb      	bge.n	80070bc <convert_value_to_array3+0x11e>
 8007144:	e000      	b.n	8007148 <convert_value_to_array3+0x1aa>
				break;
 8007146:	bf00      	nop
		}

        if(loopnum == kropka){
 8007148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	429a      	cmp	r2, r3
 800714e:	d102      	bne.n	8007156 <convert_value_to_array3+0x1b8>
            loopnum++;
 8007150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007152:	3301      	adds	r3, #1
 8007154:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
		arraytoputin[rangebegin + loopnum] = (uint8_t)x + 48;//zamiana na ASCII
 8007156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007158:	b2da      	uxtb	r2, r3
 800715a:	79f9      	ldrb	r1, [r7, #7]
 800715c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715e:	440b      	add	r3, r1
 8007160:	4619      	mov	r1, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	440b      	add	r3, r1
 8007166:	3230      	adds	r2, #48	@ 0x30
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]
		loopnum++;
 800716c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716e:	3301      	adds	r3, #1
 8007170:	62bb      	str	r3, [r7, #40]	@ 0x28
		x = 0;
 8007172:	2300      	movs	r3, #0
 8007174:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(int i = 0; i < range-2; i++){// range-2 poniewaz jest znak kropki i ewentualny znak minusa na początku
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	3301      	adds	r3, #1
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	3b02      	subs	r3, #2
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	429a      	cmp	r2, r3
 8007184:	dbbe      	blt.n	8007104 <convert_value_to_array3+0x166>
	}
}
 8007186:	bf00      	nop
 8007188:	bf00      	nop
 800718a:	3730      	adds	r7, #48	@ 0x30
 800718c:	46bd      	mov	sp, r7
 800718e:	ecbd 8b02 	vpop	{d8}
 8007192:	bd80      	pop	{r7, pc}

08007194 <uSD_Card_SendData_To_Buffer>:
 *
 * Numer pentli 7 8
 *
 * Mag_Z 3
 */
void uSD_Card_SendData_To_Buffer(uint32_t a){
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	convert_value_to_array2(Mainloop_Number, DataToSendBuffer, (0 + (128*a)), (8 + (128*a)));
 800719c:	4ba6      	ldr	r3, [pc, #664]	@ (8007438 <uSD_Card_SendData_To_Buffer+0x2a4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	b218      	sxth	r0, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	01db      	lsls	r3, r3, #7
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	01db      	lsls	r3, r3, #7
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	3308      	adds	r3, #8
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	49a1      	ldr	r1, [pc, #644]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80071b8:	f7ff fe92 	bl	8006ee0 <convert_value_to_array2>
	 DataToSendBuffer[(8 + (128*a))] = ' ';
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	01db      	lsls	r3, r3, #7
 80071c0:	3308      	adds	r3, #8
 80071c2:	4a9e      	ldr	r2, [pc, #632]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80071c4:	2120      	movs	r1, #32
 80071c6:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(SPEED1, DataToSendBuffer, (9 + (128*a)), (15 + (128*a)));
 80071c8:	4b9d      	ldr	r3, [pc, #628]	@ (8007440 <uSD_Card_SendData_To_Buffer+0x2ac>)
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b218      	sxth	r0, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	01db      	lsls	r3, r3, #7
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	3309      	adds	r3, #9
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	01db      	lsls	r3, r3, #7
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	330f      	adds	r3, #15
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	4995      	ldr	r1, [pc, #596]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80071e8:	f7ff fe7a 	bl	8006ee0 <convert_value_to_array2>
	 DataToSendBuffer[(15 + (128*a))] = ' ';
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	01db      	lsls	r3, r3, #7
 80071f0:	330f      	adds	r3, #15
 80071f2:	4a92      	ldr	r2, [pc, #584]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80071f4:	2120      	movs	r1, #32
 80071f6:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED2, DataToSendBuffer, (16 + (128*a)), (22 + (128*a)));
 80071f8:	4b92      	ldr	r3, [pc, #584]	@ (8007444 <uSD_Card_SendData_To_Buffer+0x2b0>)
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	b218      	sxth	r0, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	01db      	lsls	r3, r3, #7
 8007204:	b2db      	uxtb	r3, r3
 8007206:	3310      	adds	r3, #16
 8007208:	b2da      	uxtb	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	01db      	lsls	r3, r3, #7
 8007210:	b2db      	uxtb	r3, r3
 8007212:	3316      	adds	r3, #22
 8007214:	b2db      	uxtb	r3, r3
 8007216:	4989      	ldr	r1, [pc, #548]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007218:	f7ff fe62 	bl	8006ee0 <convert_value_to_array2>
	 DataToSendBuffer[(22 + (128*a))] = ' ';
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	01db      	lsls	r3, r3, #7
 8007220:	3316      	adds	r3, #22
 8007222:	4a86      	ldr	r2, [pc, #536]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007224:	2120      	movs	r1, #32
 8007226:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED3, DataToSendBuffer, (23 + (128*a)), (29 + (128*a)));
 8007228:	4b87      	ldr	r3, [pc, #540]	@ (8007448 <uSD_Card_SendData_To_Buffer+0x2b4>)
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b218      	sxth	r0, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	01db      	lsls	r3, r3, #7
 8007234:	b2db      	uxtb	r3, r3
 8007236:	3317      	adds	r3, #23
 8007238:	b2da      	uxtb	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	01db      	lsls	r3, r3, #7
 8007240:	b2db      	uxtb	r3, r3
 8007242:	331d      	adds	r3, #29
 8007244:	b2db      	uxtb	r3, r3
 8007246:	497d      	ldr	r1, [pc, #500]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007248:	f7ff fe4a 	bl	8006ee0 <convert_value_to_array2>
	 DataToSendBuffer[(29 + (128*a))] = ' ';
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	01db      	lsls	r3, r3, #7
 8007250:	331d      	adds	r3, #29
 8007252:	4a7a      	ldr	r2, [pc, #488]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007254:	2120      	movs	r1, #32
 8007256:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(SPEED4, DataToSendBuffer, (30 + (128*a)), (36 + (128*a)));
 8007258:	4b7c      	ldr	r3, [pc, #496]	@ (800744c <uSD_Card_SendData_To_Buffer+0x2b8>)
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b218      	sxth	r0, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	01db      	lsls	r3, r3, #7
 8007264:	b2db      	uxtb	r3, r3
 8007266:	331e      	adds	r3, #30
 8007268:	b2da      	uxtb	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	01db      	lsls	r3, r3, #7
 8007270:	b2db      	uxtb	r3, r3
 8007272:	3324      	adds	r3, #36	@ 0x24
 8007274:	b2db      	uxtb	r3, r3
 8007276:	4971      	ldr	r1, [pc, #452]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007278:	f7ff fe32 	bl	8006ee0 <convert_value_to_array2>
	 DataToSendBuffer[(36 + (128*a))] = ' ';
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	01db      	lsls	r3, r3, #7
 8007280:	3324      	adds	r3, #36	@ 0x24
 8007282:	4a6e      	ldr	r2, [pc, #440]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007284:	2120      	movs	r1, #32
 8007286:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(wanted_rool, DataToSendBuffer, (37 + (128*a)), (45 + (128*a)));
 8007288:	4b71      	ldr	r3, [pc, #452]	@ (8007450 <uSD_Card_SendData_To_Buffer+0x2bc>)
 800728a:	edd3 7a00 	vldr	s15, [r3]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	01db      	lsls	r3, r3, #7
 8007294:	b2db      	uxtb	r3, r3
 8007296:	3325      	adds	r3, #37	@ 0x25
 8007298:	b2d9      	uxtb	r1, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	01db      	lsls	r3, r3, #7
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	332d      	adds	r3, #45	@ 0x2d
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	461a      	mov	r2, r3
 80072a8:	4864      	ldr	r0, [pc, #400]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80072aa:	eeb0 0a67 	vmov.f32	s0, s15
 80072ae:	f7ff fe76 	bl	8006f9e <convert_value_to_array3>
	 DataToSendBuffer[(45 + (128*a))] = ' ';
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	01db      	lsls	r3, r3, #7
 80072b6:	332d      	adds	r3, #45	@ 0x2d
 80072b8:	4a60      	ldr	r2, [pc, #384]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80072ba:	2120      	movs	r1, #32
 80072bc:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_pitch, DataToSendBuffer, (46 + (128*a)), (54 + (128*a)));
 80072be:	4b65      	ldr	r3, [pc, #404]	@ (8007454 <uSD_Card_SendData_To_Buffer+0x2c0>)
 80072c0:	edd3 7a00 	vldr	s15, [r3]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	01db      	lsls	r3, r3, #7
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	332e      	adds	r3, #46	@ 0x2e
 80072ce:	b2d9      	uxtb	r1, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	01db      	lsls	r3, r3, #7
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	3336      	adds	r3, #54	@ 0x36
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	4857      	ldr	r0, [pc, #348]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80072e0:	eeb0 0a67 	vmov.f32	s0, s15
 80072e4:	f7ff fe5b 	bl	8006f9e <convert_value_to_array3>
	 DataToSendBuffer[(54 + (128*a))] = ' ';
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	01db      	lsls	r3, r3, #7
 80072ec:	3336      	adds	r3, #54	@ 0x36
 80072ee:	4a53      	ldr	r2, [pc, #332]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80072f0:	2120      	movs	r1, #32
 80072f2:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(wanted_yaw, DataToSendBuffer, (55 + (128*a)), (63 + (128*a)));
 80072f4:	4b58      	ldr	r3, [pc, #352]	@ (8007458 <uSD_Card_SendData_To_Buffer+0x2c4>)
 80072f6:	edd3 7a00 	vldr	s15, [r3]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	01db      	lsls	r3, r3, #7
 8007300:	b2db      	uxtb	r3, r3
 8007302:	3337      	adds	r3, #55	@ 0x37
 8007304:	b2d9      	uxtb	r1, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	01db      	lsls	r3, r3, #7
 800730c:	b2db      	uxtb	r3, r3
 800730e:	333f      	adds	r3, #63	@ 0x3f
 8007310:	b2db      	uxtb	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	4849      	ldr	r0, [pc, #292]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007316:	eeb0 0a67 	vmov.f32	s0, s15
 800731a:	f7ff fe40 	bl	8006f9e <convert_value_to_array3>
	 DataToSendBuffer[(63 + (128*a))] = ' ';
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	01db      	lsls	r3, r3, #7
 8007322:	333f      	adds	r3, #63	@ 0x3f
 8007324:	4a45      	ldr	r2, [pc, #276]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007326:	2120      	movs	r1, #32
 8007328:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array2(error_sum_pitch, DataToSendBuffer, (64 + (128*a)), (72 + (128*a)));
 800732a:	4b4c      	ldr	r3, [pc, #304]	@ (800745c <uSD_Card_SendData_To_Buffer+0x2c8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	b218      	sxth	r0, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	01db      	lsls	r3, r3, #7
 8007336:	b2db      	uxtb	r3, r3
 8007338:	3340      	adds	r3, #64	@ 0x40
 800733a:	b2da      	uxtb	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	01db      	lsls	r3, r3, #7
 8007342:	b2db      	uxtb	r3, r3
 8007344:	3348      	adds	r3, #72	@ 0x48
 8007346:	b2db      	uxtb	r3, r3
 8007348:	493c      	ldr	r1, [pc, #240]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 800734a:	f7ff fdc9 	bl	8006ee0 <convert_value_to_array2>
	 DataToSendBuffer[(72 + (128*a))] = ' ';
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	01db      	lsls	r3, r3, #7
 8007352:	3348      	adds	r3, #72	@ 0x48
 8007354:	4a39      	ldr	r2, [pc, #228]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007356:	2120      	movs	r1, #32
 8007358:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_rool, DataToSendBuffer, (73 + (128*a)), (81 + (128*a)));
 800735a:	4b41      	ldr	r3, [pc, #260]	@ (8007460 <uSD_Card_SendData_To_Buffer+0x2cc>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	b218      	sxth	r0, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	01db      	lsls	r3, r3, #7
 8007366:	b2db      	uxtb	r3, r3
 8007368:	3349      	adds	r3, #73	@ 0x49
 800736a:	b2da      	uxtb	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	01db      	lsls	r3, r3, #7
 8007372:	b2db      	uxtb	r3, r3
 8007374:	3351      	adds	r3, #81	@ 0x51
 8007376:	b2db      	uxtb	r3, r3
 8007378:	4930      	ldr	r1, [pc, #192]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 800737a:	f7ff fdb1 	bl	8006ee0 <convert_value_to_array2>
	 DataToSendBuffer[(81 + (128*a))] = ' ';
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	01db      	lsls	r3, r3, #7
 8007382:	3351      	adds	r3, #81	@ 0x51
 8007384:	4a2d      	ldr	r2, [pc, #180]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007386:	2120      	movs	r1, #32
 8007388:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(error_sum_yaw, DataToSendBuffer, (82 + (128*a)), (90 + (128*a)));
 800738a:	4b36      	ldr	r3, [pc, #216]	@ (8007464 <uSD_Card_SendData_To_Buffer+0x2d0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	b218      	sxth	r0, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	b2db      	uxtb	r3, r3
 8007394:	01db      	lsls	r3, r3, #7
 8007396:	b2db      	uxtb	r3, r3
 8007398:	3352      	adds	r3, #82	@ 0x52
 800739a:	b2da      	uxtb	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	01db      	lsls	r3, r3, #7
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	335a      	adds	r3, #90	@ 0x5a
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	4924      	ldr	r1, [pc, #144]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80073aa:	f7ff fd99 	bl	8006ee0 <convert_value_to_array2>
	 DataToSendBuffer[(90 + (128*a))] = ' ';
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	01db      	lsls	r3, r3, #7
 80073b2:	335a      	adds	r3, #90	@ 0x5a
 80073b4:	4a21      	ldr	r2, [pc, #132]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80073b6:	2120      	movs	r1, #32
 80073b8:	54d1      	strb	r1, [r2, r3]

	convert_value_to_array3(data.x, DataToSendBuffer, (91 + (128*a)), (98 + (128*a)));
 80073ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007468 <uSD_Card_SendData_To_Buffer+0x2d4>)
 80073bc:	edd3 7a00 	vldr	s15, [r3]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	01db      	lsls	r3, r3, #7
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	335b      	adds	r3, #91	@ 0x5b
 80073ca:	b2d9      	uxtb	r1, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	01db      	lsls	r3, r3, #7
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	3362      	adds	r3, #98	@ 0x62
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	4818      	ldr	r0, [pc, #96]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80073dc:	eeb0 0a67 	vmov.f32	s0, s15
 80073e0:	f7ff fddd 	bl	8006f9e <convert_value_to_array3>
	 DataToSendBuffer[(98 + (128*a))] = ' ';
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	01db      	lsls	r3, r3, #7
 80073e8:	3362      	adds	r3, #98	@ 0x62
 80073ea:	4a14      	ldr	r2, [pc, #80]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 80073ec:	2120      	movs	r1, #32
 80073ee:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.y, DataToSendBuffer, (99 + (128*a)), (106 + (128*a)));
 80073f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007468 <uSD_Card_SendData_To_Buffer+0x2d4>)
 80073f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	01db      	lsls	r3, r3, #7
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	3363      	adds	r3, #99	@ 0x63
 8007400:	b2d9      	uxtb	r1, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	01db      	lsls	r3, r3, #7
 8007408:	b2db      	uxtb	r3, r3
 800740a:	336a      	adds	r3, #106	@ 0x6a
 800740c:	b2db      	uxtb	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	480a      	ldr	r0, [pc, #40]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007412:	eeb0 0a67 	vmov.f32	s0, s15
 8007416:	f7ff fdc2 	bl	8006f9e <convert_value_to_array3>
	 DataToSendBuffer[(106 + (128*a))] = ' ';
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	01db      	lsls	r3, r3, #7
 800741e:	336a      	adds	r3, #106	@ 0x6a
 8007420:	4a06      	ldr	r2, [pc, #24]	@ (800743c <uSD_Card_SendData_To_Buffer+0x2a8>)
 8007422:	2120      	movs	r1, #32
 8007424:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array3(data.z, DataToSendBuffer, (107 + (128*a)), (114 + (128*a)));
 8007426:	4b10      	ldr	r3, [pc, #64]	@ (8007468 <uSD_Card_SendData_To_Buffer+0x2d4>)
 8007428:	edd3 7a02 	vldr	s15, [r3, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	01db      	lsls	r3, r3, #7
 8007432:	b2db      	uxtb	r3, r3
 8007434:	336b      	adds	r3, #107	@ 0x6b
 8007436:	e019      	b.n	800746c <uSD_Card_SendData_To_Buffer+0x2d8>
 8007438:	000041ac 	.word	0x000041ac
 800743c:	24002f48 	.word	0x24002f48
 8007440:	00004174 	.word	0x00004174
 8007444:	00004176 	.word	0x00004176
 8007448:	00004178 	.word	0x00004178
 800744c:	0000417a 	.word	0x0000417a
 8007450:	00004054 	.word	0x00004054
 8007454:	00004050 	.word	0x00004050
 8007458:	00004058 	.word	0x00004058
 800745c:	00004084 	.word	0x00004084
 8007460:	00004088 	.word	0x00004088
 8007464:	0000408c 	.word	0x0000408c
 8007468:	00000064 	.word	0x00000064
 800746c:	b2d9      	uxtb	r1, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	01db      	lsls	r3, r3, #7
 8007474:	b2db      	uxtb	r3, r3
 8007476:	3372      	adds	r3, #114	@ 0x72
 8007478:	b2db      	uxtb	r3, r3
 800747a:	461a      	mov	r2, r3
 800747c:	482d      	ldr	r0, [pc, #180]	@ (8007534 <uSD_Card_SendData_To_Buffer+0x3a0>)
 800747e:	eeb0 0a67 	vmov.f32	s0, s15
 8007482:	f7ff fd8c 	bl	8006f9e <convert_value_to_array3>
	 DataToSendBuffer[(114 + (128*a))] = ' ';
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	01db      	lsls	r3, r3, #7
 800748a:	3372      	adds	r3, #114	@ 0x72
 800748c:	4a29      	ldr	r2, [pc, #164]	@ (8007534 <uSD_Card_SendData_To_Buffer+0x3a0>)
 800748e:	2120      	movs	r1, #32
 8007490:	54d1      	strb	r1, [r2, r3]


	convert_value_to_array2(MYDRON.batterysize, DataToSendBuffer, (115 + (128*a)), (119 + (128*a)));
 8007492:	4b29      	ldr	r3, [pc, #164]	@ (8007538 <uSD_Card_SendData_To_Buffer+0x3a4>)
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	b218      	sxth	r0, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	01db      	lsls	r3, r3, #7
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	3373      	adds	r3, #115	@ 0x73
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	01db      	lsls	r3, r3, #7
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	3377      	adds	r3, #119	@ 0x77
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	4920      	ldr	r1, [pc, #128]	@ (8007534 <uSD_Card_SendData_To_Buffer+0x3a0>)
 80074b2:	f7ff fd15 	bl	8006ee0 <convert_value_to_array2>
	 DataToSendBuffer[(119 + (128*a))] = ' ';
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	01db      	lsls	r3, r3, #7
 80074ba:	3377      	adds	r3, #119	@ 0x77
 80074bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007534 <uSD_Card_SendData_To_Buffer+0x3a0>)
 80074be:	2120      	movs	r1, #32
 80074c0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(MYDRON.dron_status.Connection, DataToSendBuffer, (120 + (128*a)), (122 + (128*a)));
 80074c2:	4b1d      	ldr	r3, [pc, #116]	@ (8007538 <uSD_Card_SendData_To_Buffer+0x3a4>)
 80074c4:	8a5b      	ldrh	r3, [r3, #18]
 80074c6:	b218      	sxth	r0, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	01db      	lsls	r3, r3, #7
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	3378      	adds	r3, #120	@ 0x78
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	01db      	lsls	r3, r3, #7
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	337a      	adds	r3, #122	@ 0x7a
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	4914      	ldr	r1, [pc, #80]	@ (8007534 <uSD_Card_SendData_To_Buffer+0x3a0>)
 80074e2:	f7ff fcfd 	bl	8006ee0 <convert_value_to_array2>
	 DataToSendBuffer[(122 + (128*a))] = ' ';
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	01db      	lsls	r3, r3, #7
 80074ea:	337a      	adds	r3, #122	@ 0x7a
 80074ec:	4a11      	ldr	r2, [pc, #68]	@ (8007534 <uSD_Card_SendData_To_Buffer+0x3a0>)
 80074ee:	2120      	movs	r1, #32
 80074f0:	54d1      	strb	r1, [r2, r3]
	convert_value_to_array2(Mag_Z, DataToSendBuffer, (123 + (128*a)), (127 + (128*a)));
 80074f2:	4b12      	ldr	r3, [pc, #72]	@ (800753c <uSD_Card_SendData_To_Buffer+0x3a8>)
 80074f4:	edd3 7a00 	vldr	s15, [r3]
 80074f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074fc:	ee17 3a90 	vmov	r3, s15
 8007500:	b218      	sxth	r0, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	01db      	lsls	r3, r3, #7
 8007508:	b2db      	uxtb	r3, r3
 800750a:	337b      	adds	r3, #123	@ 0x7b
 800750c:	b2da      	uxtb	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	01db      	lsls	r3, r3, #7
 8007514:	b2db      	uxtb	r3, r3
 8007516:	337f      	adds	r3, #127	@ 0x7f
 8007518:	b2db      	uxtb	r3, r3
 800751a:	4906      	ldr	r1, [pc, #24]	@ (8007534 <uSD_Card_SendData_To_Buffer+0x3a0>)
 800751c:	f7ff fce0 	bl	8006ee0 <convert_value_to_array2>
	 DataToSendBuffer[(128 + (128*a))] = '\n';
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3301      	adds	r3, #1
 8007524:	01db      	lsls	r3, r3, #7
 8007526:	4a03      	ldr	r2, [pc, #12]	@ (8007534 <uSD_Card_SendData_To_Buffer+0x3a0>)
 8007528:	210a      	movs	r1, #10
 800752a:	54d1      	strb	r1, [r2, r3]
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	24002f48 	.word	0x24002f48
 8007538:	00000160 	.word	0x00000160
 800753c:	00000048 	.word	0x00000048

08007540 <Stack_Push>:

void Stack_Push(float data){
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	ed87 0a01 	vstr	s0, [r7, #4]
	Old_Data_stack.start_pointer++;
 800754a:	4b22      	ldr	r3, [pc, #136]	@ (80075d4 <Stack_Push+0x94>)
 800754c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007550:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007554:	3301      	adds	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	4b1e      	ldr	r3, [pc, #120]	@ (80075d4 <Stack_Push+0x94>)
 800755a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800755e:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	if(Old_Data_stack.start_pointer == 4000){
 8007562:	4b1c      	ldr	r3, [pc, #112]	@ (80075d4 <Stack_Push+0x94>)
 8007564:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007568:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 800756c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8007570:	d105      	bne.n	800757e <Stack_Push+0x3e>
		Old_Data_stack.start_pointer = 0;
 8007572:	4b18      	ldr	r3, [pc, #96]	@ (80075d4 <Stack_Push+0x94>)
 8007574:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007578:	2200      	movs	r2, #0
 800757a:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
	Old_Data_stack.olddata[Old_Data_stack.start_pointer] = data;
 800757e:	4b15      	ldr	r3, [pc, #84]	@ (80075d4 <Stack_Push+0x94>)
 8007580:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007584:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 8007588:	4a12      	ldr	r2, [pc, #72]	@ (80075d4 <Stack_Push+0x94>)
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]

	Old_Data_stack.end_pointer++;
 8007592:	4b10      	ldr	r3, [pc, #64]	@ (80075d4 <Stack_Push+0x94>)
 8007594:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8007598:	f8b3 3eaa 	ldrh.w	r3, [r3, #3754]	@ 0xeaa
 800759c:	3301      	adds	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <Stack_Push+0x94>)
 80075a2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80075a6:	f8a3 2eaa 	strh.w	r2, [r3, #3754]	@ 0xeaa
	if(Old_Data_stack.start_pointer == 4000){
 80075aa:	4b0a      	ldr	r3, [pc, #40]	@ (80075d4 <Stack_Push+0x94>)
 80075ac:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80075b0:	f8b3 3ea8 	ldrh.w	r3, [r3, #3752]	@ 0xea8
 80075b4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80075b8:	d105      	bne.n	80075c6 <Stack_Push+0x86>
		Old_Data_stack.start_pointer = 0;
 80075ba:	4b06      	ldr	r3, [pc, #24]	@ (80075d4 <Stack_Push+0x94>)
 80075bc:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80075c0:	2200      	movs	r2, #0
 80075c2:	f8a3 2ea8 	strh.w	r2, [r3, #3752]	@ 0xea8
	}
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	00000184 	.word	0x00000184

080075d8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80075de:	463b      	mov	r3, r7
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	605a      	str	r2, [r3, #4]
 80075e6:	609a      	str	r2, [r3, #8]
 80075e8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80075ea:	f003 fc5f 	bl	800aeac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80075ee:	2301      	movs	r3, #1
 80075f0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80075fa:	231f      	movs	r3, #31
 80075fc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80075fe:	2387      	movs	r3, #135	@ 0x87
 8007600:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007602:	2300      	movs	r3, #0
 8007604:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8007606:	2300      	movs	r3, #0
 8007608:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800760a:	2301      	movs	r3, #1
 800760c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800760e:	2301      	movs	r3, #1
 8007610:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007612:	2300      	movs	r3, #0
 8007614:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800761a:	463b      	mov	r3, r7
 800761c:	4618      	mov	r0, r3
 800761e:	f003 fc7d 	bl	800af1c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007622:	2004      	movs	r0, #4
 8007624:	f003 fc5a 	bl	800aedc <HAL_MPU_Enable>

}
 8007628:	bf00      	nop
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007634:	b672      	cpsid	i
}
 8007636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007638:	bf00      	nop
 800763a:	e7fd      	b.n	8007638 <Error_Handler+0x8>

0800763c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi6;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007640:	4b27      	ldr	r3, [pc, #156]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 8007642:	4a28      	ldr	r2, [pc, #160]	@ (80076e4 <MX_SPI2_Init+0xa8>)
 8007644:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007646:	4b26      	ldr	r3, [pc, #152]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 8007648:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800764c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800764e:	4b24      	ldr	r3, [pc, #144]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 8007650:	2200      	movs	r2, #0
 8007652:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007654:	4b22      	ldr	r3, [pc, #136]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 8007656:	2207      	movs	r2, #7
 8007658:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800765a:	4b21      	ldr	r3, [pc, #132]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 800765c:	2200      	movs	r2, #0
 800765e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007660:	4b1f      	ldr	r3, [pc, #124]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 8007662:	2200      	movs	r2, #0
 8007664:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007666:	4b1e      	ldr	r3, [pc, #120]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 8007668:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800766c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800766e:	4b1c      	ldr	r3, [pc, #112]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 8007670:	2200      	movs	r2, #0
 8007672:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007674:	4b1a      	ldr	r3, [pc, #104]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 8007676:	2200      	movs	r2, #0
 8007678:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800767a:	4b19      	ldr	r3, [pc, #100]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 800767c:	2200      	movs	r2, #0
 800767e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007680:	4b17      	ldr	r3, [pc, #92]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 8007682:	2200      	movs	r2, #0
 8007684:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8007686:	4b16      	ldr	r3, [pc, #88]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 8007688:	2200      	movs	r2, #0
 800768a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800768c:	4b14      	ldr	r3, [pc, #80]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 800768e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007692:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007694:	4b12      	ldr	r3, [pc, #72]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 8007696:	2200      	movs	r2, #0
 8007698:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800769a:	4b11      	ldr	r3, [pc, #68]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 800769c:	2200      	movs	r2, #0
 800769e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80076a0:	4b0f      	ldr	r3, [pc, #60]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80076a6:	4b0e      	ldr	r3, [pc, #56]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80076ac:	4b0c      	ldr	r3, [pc, #48]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80076b2:	4b0b      	ldr	r3, [pc, #44]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80076b8:	4b09      	ldr	r3, [pc, #36]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80076be:	4b08      	ldr	r3, [pc, #32]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80076c4:	4b06      	ldr	r3, [pc, #24]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80076ca:	4805      	ldr	r0, [pc, #20]	@ (80076e0 <MX_SPI2_Init+0xa4>)
 80076cc:	f00c fcb0 	bl	8014030 <HAL_SPI_Init>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80076d6:	f7ff ffab 	bl	8007630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80076da:	bf00      	nop
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	240001ec 	.word	0x240001ec
 80076e4:	40003800 	.word	0x40003800

080076e8 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 80076ec:	4b27      	ldr	r3, [pc, #156]	@ (800778c <MX_SPI6_Init+0xa4>)
 80076ee:	4a28      	ldr	r2, [pc, #160]	@ (8007790 <MX_SPI6_Init+0xa8>)
 80076f0:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80076f2:	4b26      	ldr	r3, [pc, #152]	@ (800778c <MX_SPI6_Init+0xa4>)
 80076f4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80076f8:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80076fa:	4b24      	ldr	r3, [pc, #144]	@ (800778c <MX_SPI6_Init+0xa4>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8007700:	4b22      	ldr	r3, [pc, #136]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007702:	2207      	movs	r2, #7
 8007704:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007706:	4b21      	ldr	r3, [pc, #132]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007708:	2200      	movs	r2, #0
 800770a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800770c:	4b1f      	ldr	r3, [pc, #124]	@ (800778c <MX_SPI6_Init+0xa4>)
 800770e:	2200      	movs	r2, #0
 8007710:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8007712:	4b1e      	ldr	r3, [pc, #120]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007714:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007718:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800771a:	4b1c      	ldr	r3, [pc, #112]	@ (800778c <MX_SPI6_Init+0xa4>)
 800771c:	2200      	movs	r2, #0
 800771e:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007720:	4b1a      	ldr	r3, [pc, #104]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007722:	2200      	movs	r2, #0
 8007724:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8007726:	4b19      	ldr	r3, [pc, #100]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007728:	2200      	movs	r2, #0
 800772a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800772c:	4b17      	ldr	r3, [pc, #92]	@ (800778c <MX_SPI6_Init+0xa4>)
 800772e:	2200      	movs	r2, #0
 8007730:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8007732:	4b16      	ldr	r3, [pc, #88]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007734:	2200      	movs	r2, #0
 8007736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007738:	4b14      	ldr	r3, [pc, #80]	@ (800778c <MX_SPI6_Init+0xa4>)
 800773a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800773e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007740:	4b12      	ldr	r3, [pc, #72]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007742:	2200      	movs	r2, #0
 8007744:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007746:	4b11      	ldr	r3, [pc, #68]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007748:	2200      	movs	r2, #0
 800774a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800774c:	4b0f      	ldr	r3, [pc, #60]	@ (800778c <MX_SPI6_Init+0xa4>)
 800774e:	2200      	movs	r2, #0
 8007750:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007752:	4b0e      	ldr	r3, [pc, #56]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007754:	2200      	movs	r2, #0
 8007756:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007758:	4b0c      	ldr	r3, [pc, #48]	@ (800778c <MX_SPI6_Init+0xa4>)
 800775a:	2200      	movs	r2, #0
 800775c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800775e:	4b0b      	ldr	r3, [pc, #44]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007760:	2200      	movs	r2, #0
 8007762:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007764:	4b09      	ldr	r3, [pc, #36]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007766:	2200      	movs	r2, #0
 8007768:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800776a:	4b08      	ldr	r3, [pc, #32]	@ (800778c <MX_SPI6_Init+0xa4>)
 800776c:	2200      	movs	r2, #0
 800776e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007770:	4b06      	ldr	r3, [pc, #24]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007772:	2200      	movs	r2, #0
 8007774:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8007776:	4805      	ldr	r0, [pc, #20]	@ (800778c <MX_SPI6_Init+0xa4>)
 8007778:	f00c fc5a 	bl	8014030 <HAL_SPI_Init>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8007782:	f7ff ff55 	bl	8007630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8007786:	bf00      	nop
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	24000274 	.word	0x24000274
 8007790:	58001400 	.word	0x58001400

08007794 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b0ba      	sub	sp, #232	@ 0xe8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800779c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	609a      	str	r2, [r3, #8]
 80077a8:	60da      	str	r2, [r3, #12]
 80077aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80077ac:	f107 0318 	add.w	r3, r7, #24
 80077b0:	22b8      	movs	r2, #184	@ 0xb8
 80077b2:	2100      	movs	r1, #0
 80077b4:	4618      	mov	r0, r3
 80077b6:	f016 f87d 	bl	801d8b4 <memset>
  if(spiHandle->Instance==SPI2)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a77      	ldr	r2, [pc, #476]	@ (800799c <HAL_SPI_MspInit+0x208>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	f040 8089 	bne.w	80078d8 <HAL_SPI_MspInit+0x144>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80077c6:	4b76      	ldr	r3, [pc, #472]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 80077c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077cc:	4a74      	ldr	r2, [pc, #464]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 80077ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80077d6:	4b72      	ldr	r3, [pc, #456]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 80077d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077e4:	4b6e      	ldr	r3, [pc, #440]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 80077e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077ea:	4a6d      	ldr	r2, [pc, #436]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 80077ec:	f043 0302 	orr.w	r3, r3, #2
 80077f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80077f4:	4b6a      	ldr	r3, [pc, #424]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 80077f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	613b      	str	r3, [r7, #16]
 8007800:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007806:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800780a:	2302      	movs	r3, #2
 800780c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007810:	2300      	movs	r3, #0
 8007812:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007816:	2301      	movs	r3, #1
 8007818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800781c:	2305      	movs	r3, #5
 800781e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007822:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007826:	4619      	mov	r1, r3
 8007828:	485e      	ldr	r0, [pc, #376]	@ (80079a4 <HAL_SPI_MspInit+0x210>)
 800782a:	f006 fa09 	bl	800dc40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800782e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8007832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007836:	2302      	movs	r3, #2
 8007838:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800783c:	2301      	movs	r3, #1
 800783e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007842:	2301      	movs	r3, #1
 8007844:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007848:	2305      	movs	r3, #5
 800784a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800784e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007852:	4619      	mov	r1, r3
 8007854:	4853      	ldr	r0, [pc, #332]	@ (80079a4 <HAL_SPI_MspInit+0x210>)
 8007856:	f006 f9f3 	bl	800dc40 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream0;
 800785a:	4b53      	ldr	r3, [pc, #332]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 800785c:	4a53      	ldr	r2, [pc, #332]	@ (80079ac <HAL_SPI_MspInit+0x218>)
 800785e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8007860:	4b51      	ldr	r3, [pc, #324]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 8007862:	2228      	movs	r2, #40	@ 0x28
 8007864:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007866:	4b50      	ldr	r3, [pc, #320]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 8007868:	2240      	movs	r2, #64	@ 0x40
 800786a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800786c:	4b4e      	ldr	r3, [pc, #312]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 800786e:	2200      	movs	r2, #0
 8007870:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007872:	4b4d      	ldr	r3, [pc, #308]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 8007874:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007878:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800787a:	4b4b      	ldr	r3, [pc, #300]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 800787c:	2200      	movs	r2, #0
 800787e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007880:	4b49      	ldr	r3, [pc, #292]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 8007882:	2200      	movs	r2, #0
 8007884:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007886:	4b48      	ldr	r3, [pc, #288]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 8007888:	2200      	movs	r2, #0
 800788a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800788c:	4b46      	ldr	r3, [pc, #280]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 800788e:	2200      	movs	r2, #0
 8007890:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007892:	4b45      	ldr	r3, [pc, #276]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 8007894:	2204      	movs	r2, #4
 8007896:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007898:	4b43      	ldr	r3, [pc, #268]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 800789a:	2203      	movs	r2, #3
 800789c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800789e:	4b42      	ldr	r3, [pc, #264]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80078a4:	4b40      	ldr	r3, [pc, #256]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80078aa:	483f      	ldr	r0, [pc, #252]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 80078ac:	f003 fb76 	bl	800af9c <HAL_DMA_Init>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 80078b6:	f7ff febb 	bl	8007630 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a3a      	ldr	r2, [pc, #232]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 80078be:	679a      	str	r2, [r3, #120]	@ 0x78
 80078c0:	4a39      	ldr	r2, [pc, #228]	@ (80079a8 <HAL_SPI_MspInit+0x214>)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80078c6:	2200      	movs	r2, #0
 80078c8:	2100      	movs	r1, #0
 80078ca:	2024      	movs	r0, #36	@ 0x24
 80078cc:	f003 fab9 	bl	800ae42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80078d0:	2024      	movs	r0, #36	@ 0x24
 80078d2:	f003 fad0 	bl	800ae76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 80078d6:	e05c      	b.n	8007992 <HAL_SPI_MspInit+0x1fe>
  else if(spiHandle->Instance==SPI6)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a34      	ldr	r2, [pc, #208]	@ (80079b0 <HAL_SPI_MspInit+0x21c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d157      	bne.n	8007992 <HAL_SPI_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80078e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80078e6:	f04f 0300 	mov.w	r3, #0
 80078ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 80078ee:	2318      	movs	r3, #24
 80078f0:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 80078f2:	23c8      	movs	r3, #200	@ 0xc8
 80078f4:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 1;
 80078f6:	2301      	movs	r3, #1
 80078f8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 80078fa:	230a      	movs	r3, #10
 80078fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80078fe:	2302      	movs	r3, #2
 8007900:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8007902:	2300      	movs	r3, #0
 8007904:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8007906:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800790a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800790c:	2300      	movs	r3, #0
 800790e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PLL3;
 8007910:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007914:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007918:	f107 0318 	add.w	r3, r7, #24
 800791c:	4618      	mov	r0, r3
 800791e:	f009 ffa1 	bl	8011864 <HAL_RCCEx_PeriphCLKConfig>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <HAL_SPI_MspInit+0x198>
      Error_Handler();
 8007928:	f7ff fe82 	bl	8007630 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 800792c:	4b1c      	ldr	r3, [pc, #112]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 800792e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007932:	4a1b      	ldr	r2, [pc, #108]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 8007934:	f043 0320 	orr.w	r3, r3, #32
 8007938:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800793c:	4b18      	ldr	r3, [pc, #96]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 800793e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800794a:	4b15      	ldr	r3, [pc, #84]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 800794c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007950:	4a13      	ldr	r2, [pc, #76]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 8007952:	f043 0302 	orr.w	r3, r3, #2
 8007956:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800795a:	4b11      	ldr	r3, [pc, #68]	@ (80079a0 <HAL_SPI_MspInit+0x20c>)
 800795c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	60bb      	str	r3, [r7, #8]
 8007966:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8007968:	2338      	movs	r3, #56	@ 0x38
 800796a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800796e:	2302      	movs	r3, #2
 8007970:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007974:	2300      	movs	r3, #0
 8007976:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800797a:	2300      	movs	r3, #0
 800797c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8007980:	2308      	movs	r3, #8
 8007982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007986:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800798a:	4619      	mov	r1, r3
 800798c:	4805      	ldr	r0, [pc, #20]	@ (80079a4 <HAL_SPI_MspInit+0x210>)
 800798e:	f006 f957 	bl	800dc40 <HAL_GPIO_Init>
}
 8007992:	bf00      	nop
 8007994:	37e8      	adds	r7, #232	@ 0xe8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40003800 	.word	0x40003800
 80079a0:	58024400 	.word	0x58024400
 80079a4:	58020400 	.word	0x58020400
 80079a8:	240002fc 	.word	0x240002fc
 80079ac:	40020010 	.word	0x40020010
 80079b0:	58001400 	.word	0x58001400

080079b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079ba:	4b0a      	ldr	r3, [pc, #40]	@ (80079e4 <HAL_MspInit+0x30>)
 80079bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079c0:	4a08      	ldr	r2, [pc, #32]	@ (80079e4 <HAL_MspInit+0x30>)
 80079c2:	f043 0302 	orr.w	r3, r3, #2
 80079c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80079ca:	4b06      	ldr	r3, [pc, #24]	@ (80079e4 <HAL_MspInit+0x30>)
 80079cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	607b      	str	r3, [r7, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	58024400 	.word	0x58024400

080079e8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint32_t FatFsCnt = 0;
volatile uint32_t Timer1, Timer2;

void SDTimer_Handler(void)//1ms
{
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80079ec:	4b0b      	ldr	r3, [pc, #44]	@ (8007a1c <SDTimer_Handler+0x34>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <SDTimer_Handler+0x16>
    Timer1--;
 80079f4:	4b09      	ldr	r3, [pc, #36]	@ (8007a1c <SDTimer_Handler+0x34>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	4a08      	ldr	r2, [pc, #32]	@ (8007a1c <SDTimer_Handler+0x34>)
 80079fc:	6013      	str	r3, [r2, #0]

  if(Timer2 > 0)
 80079fe:	4b08      	ldr	r3, [pc, #32]	@ (8007a20 <SDTimer_Handler+0x38>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d004      	beq.n	8007a10 <SDTimer_Handler+0x28>
    Timer2--;
 8007a06:	4b06      	ldr	r3, [pc, #24]	@ (8007a20 <SDTimer_Handler+0x38>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	4a04      	ldr	r2, [pc, #16]	@ (8007a20 <SDTimer_Handler+0x38>)
 8007a0e:	6013      	str	r3, [r2, #0]
}
 8007a10:	bf00      	nop
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	24000378 	.word	0x24000378
 8007a20:	2400037c 	.word	0x2400037c
 8007a24:	00000000 	.word	0x00000000

08007a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */


	LED_G_0;
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a34:	48bc      	ldr	r0, [pc, #752]	@ (8007d28 <NMI_Handler+0x300>)
 8007a36:	f006 fac3 	bl	800dfc0 <HAL_GPIO_WritePin>
	LED_Y_0;
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a40:	48ba      	ldr	r0, [pc, #744]	@ (8007d2c <NMI_Handler+0x304>)
 8007a42:	f006 fabd 	bl	800dfc0 <HAL_GPIO_WritePin>
	LED_R_1;
 8007a46:	2201      	movs	r2, #1
 8007a48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007a4c:	48b7      	ldr	r0, [pc, #732]	@ (8007d2c <NMI_Handler+0x304>)
 8007a4e:	f006 fab7 	bl	800dfc0 <HAL_GPIO_WritePin>
//todo create crash log
	f_close(&fil);
 8007a52:	48b7      	ldr	r0, [pc, #732]	@ (8007d30 <NMI_Handler+0x308>)
 8007a54:	f015 fd36 	bl	801d4c4 <f_close>

	wanted_rool = 0;
 8007a58:	4bb6      	ldr	r3, [pc, #728]	@ (8007d34 <NMI_Handler+0x30c>)
 8007a5a:	f04f 0200 	mov.w	r2, #0
 8007a5e:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8007a60:	4bb5      	ldr	r3, [pc, #724]	@ (8007d38 <NMI_Handler+0x310>)
 8007a62:	f04f 0200 	mov.w	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8007a68:	4bb4      	ldr	r3, [pc, #720]	@ (8007d3c <NMI_Handler+0x314>)
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8007a70:	4bb3      	ldr	r3, [pc, #716]	@ (8007d40 <NMI_Handler+0x318>)
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	b21a      	sxth	r2, r3
 8007a76:	4bb3      	ldr	r3, [pc, #716]	@ (8007d44 <NMI_Handler+0x31c>)
 8007a78:	801a      	strh	r2, [r3, #0]
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   	HAL_Delay(1);
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	f001 f942 	bl	8008d04 <HAL_Delay>
		MPU6050_GET_ACCANDGYR_CALANDSCL(&ax, &ay, &az, &gx, &gy, &gz, accelx_cal, accely_cal, accelz_cal, gyrox_cal, gyroy_cal, gyroz_cal, Gyr_Scale, Acc_Scale);
 8007a80:	4bb1      	ldr	r3, [pc, #708]	@ (8007d48 <NMI_Handler+0x320>)
 8007a82:	edd3 7a00 	vldr	s15, [r3]
 8007a86:	4bb1      	ldr	r3, [pc, #708]	@ (8007d4c <NMI_Handler+0x324>)
 8007a88:	ed93 7a00 	vldr	s14, [r3]
 8007a8c:	4bb0      	ldr	r3, [pc, #704]	@ (8007d50 <NMI_Handler+0x328>)
 8007a8e:	edd3 6a00 	vldr	s13, [r3]
 8007a92:	4bb0      	ldr	r3, [pc, #704]	@ (8007d54 <NMI_Handler+0x32c>)
 8007a94:	ed93 6a00 	vldr	s12, [r3]
 8007a98:	4baf      	ldr	r3, [pc, #700]	@ (8007d58 <NMI_Handler+0x330>)
 8007a9a:	edd3 5a00 	vldr	s11, [r3]
 8007a9e:	4baf      	ldr	r3, [pc, #700]	@ (8007d5c <NMI_Handler+0x334>)
 8007aa0:	ed93 5a00 	vldr	s10, [r3]
 8007aa4:	4bae      	ldr	r3, [pc, #696]	@ (8007d60 <NMI_Handler+0x338>)
 8007aa6:	edd3 4a00 	vldr	s9, [r3]
 8007aaa:	4bae      	ldr	r3, [pc, #696]	@ (8007d64 <NMI_Handler+0x33c>)
 8007aac:	ed93 4a00 	vldr	s8, [r3]
 8007ab0:	4bad      	ldr	r3, [pc, #692]	@ (8007d68 <NMI_Handler+0x340>)
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	4bad      	ldr	r3, [pc, #692]	@ (8007d6c <NMI_Handler+0x344>)
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	eef0 3a44 	vmov.f32	s7, s8
 8007abc:	eeb0 3a64 	vmov.f32	s6, s9
 8007ac0:	eef0 2a45 	vmov.f32	s5, s10
 8007ac4:	eeb0 2a65 	vmov.f32	s4, s11
 8007ac8:	eef0 1a46 	vmov.f32	s3, s12
 8007acc:	eeb0 1a66 	vmov.f32	s2, s13
 8007ad0:	eef0 0a47 	vmov.f32	s1, s14
 8007ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ad8:	4ba5      	ldr	r3, [pc, #660]	@ (8007d70 <NMI_Handler+0x348>)
 8007ada:	4aa6      	ldr	r2, [pc, #664]	@ (8007d74 <NMI_Handler+0x34c>)
 8007adc:	49a6      	ldr	r1, [pc, #664]	@ (8007d78 <NMI_Handler+0x350>)
 8007ade:	48a7      	ldr	r0, [pc, #668]	@ (8007d7c <NMI_Handler+0x354>)
 8007ae0:	f7f9 fd80 	bl	80015e4 <MPU6050_GET_ACCANDGYR_CALANDSCL>
		MPU6050_GET_ACCEL_TO_ANGLE(ax, ay, az, &ax_ang, &ay_ang/*, &az_ang*/);
 8007ae4:	4ba5      	ldr	r3, [pc, #660]	@ (8007d7c <NMI_Handler+0x354>)
 8007ae6:	edd3 7a00 	vldr	s15, [r3]
 8007aea:	4ba3      	ldr	r3, [pc, #652]	@ (8007d78 <NMI_Handler+0x350>)
 8007aec:	ed93 7a00 	vldr	s14, [r3]
 8007af0:	4ba0      	ldr	r3, [pc, #640]	@ (8007d74 <NMI_Handler+0x34c>)
 8007af2:	edd3 6a00 	vldr	s13, [r3]
 8007af6:	49a2      	ldr	r1, [pc, #648]	@ (8007d80 <NMI_Handler+0x358>)
 8007af8:	48a2      	ldr	r0, [pc, #648]	@ (8007d84 <NMI_Handler+0x35c>)
 8007afa:	eeb0 1a66 	vmov.f32	s2, s13
 8007afe:	eef0 0a47 	vmov.f32	s1, s14
 8007b02:	eeb0 0a67 	vmov.f32	s0, s15
 8007b06:	f7f9 fcef 	bl	80014e8 <MPU6050_GET_ACCEL_TO_ANGLE>
		MPU6050_GET_ACCANDGYR_FILTRED(&data, ax_ang, ay_ang, Mag_Z, gx, gy, gz);
 8007b0a:	4b9e      	ldr	r3, [pc, #632]	@ (8007d84 <NMI_Handler+0x35c>)
 8007b0c:	edd3 7a00 	vldr	s15, [r3]
 8007b10:	4b9b      	ldr	r3, [pc, #620]	@ (8007d80 <NMI_Handler+0x358>)
 8007b12:	ed93 7a00 	vldr	s14, [r3]
 8007b16:	4b9c      	ldr	r3, [pc, #624]	@ (8007d88 <NMI_Handler+0x360>)
 8007b18:	edd3 6a00 	vldr	s13, [r3]
 8007b1c:	4b94      	ldr	r3, [pc, #592]	@ (8007d70 <NMI_Handler+0x348>)
 8007b1e:	ed93 6a00 	vldr	s12, [r3]
 8007b22:	4b92      	ldr	r3, [pc, #584]	@ (8007d6c <NMI_Handler+0x344>)
 8007b24:	edd3 5a00 	vldr	s11, [r3]
 8007b28:	4b8f      	ldr	r3, [pc, #572]	@ (8007d68 <NMI_Handler+0x340>)
 8007b2a:	ed93 5a00 	vldr	s10, [r3]
 8007b2e:	eef0 2a45 	vmov.f32	s5, s10
 8007b32:	eeb0 2a65 	vmov.f32	s4, s11
 8007b36:	eef0 1a46 	vmov.f32	s3, s12
 8007b3a:	eeb0 1a66 	vmov.f32	s2, s13
 8007b3e:	eef0 0a47 	vmov.f32	s1, s14
 8007b42:	eeb0 0a67 	vmov.f32	s0, s15
 8007b46:	4891      	ldr	r0, [pc, #580]	@ (8007d8c <NMI_Handler+0x364>)
 8007b48:	f7f9 fec6 	bl	80018d8 <MPU6050_GET_ACCANDGYR_FILTRED>


		now_pitch = data.x;
 8007b4c:	4b8f      	ldr	r3, [pc, #572]	@ (8007d8c <NMI_Handler+0x364>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a8f      	ldr	r2, [pc, #572]	@ (8007d90 <NMI_Handler+0x368>)
 8007b52:	6013      	str	r3, [r2, #0]
		now_rool = data.y;
 8007b54:	4b8d      	ldr	r3, [pc, #564]	@ (8007d8c <NMI_Handler+0x364>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	4a8e      	ldr	r2, [pc, #568]	@ (8007d94 <NMI_Handler+0x36c>)
 8007b5a:	6013      	str	r3, [r2, #0]
		now_yaw = data.z;
 8007b5c:	4b8b      	ldr	r3, [pc, #556]	@ (8007d8c <NMI_Handler+0x364>)
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	4a8d      	ldr	r2, [pc, #564]	@ (8007d98 <NMI_Handler+0x370>)
 8007b62:	6013      	str	r3, [r2, #0]


		last_wanted_rool_rx = wanted_rool;
 8007b64:	4b73      	ldr	r3, [pc, #460]	@ (8007d34 <NMI_Handler+0x30c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a8c      	ldr	r2, [pc, #560]	@ (8007d9c <NMI_Handler+0x374>)
 8007b6a:	6013      	str	r3, [r2, #0]
		last_wanted_pitch_rx = wanted_pitch;
 8007b6c:	4b72      	ldr	r3, [pc, #456]	@ (8007d38 <NMI_Handler+0x310>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a8b      	ldr	r2, [pc, #556]	@ (8007da0 <NMI_Handler+0x378>)
 8007b72:	6013      	str	r3, [r2, #0]
		last_wanted_yaw_rx = wanted_yaw;
 8007b74:	4b71      	ldr	r3, [pc, #452]	@ (8007d3c <NMI_Handler+0x314>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a8a      	ldr	r2, [pc, #552]	@ (8007da4 <NMI_Handler+0x37c>)
 8007b7a:	6013      	str	r3, [r2, #0]


		error_sum_pitch = error_sum_pitch + (wanted_pitch - now_pitch);
 8007b7c:	4b8a      	ldr	r3, [pc, #552]	@ (8007da8 <NMI_Handler+0x380>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	ee07 3a90 	vmov	s15, r3
 8007b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b88:	4b6b      	ldr	r3, [pc, #428]	@ (8007d38 <NMI_Handler+0x310>)
 8007b8a:	edd3 6a00 	vldr	s13, [r3]
 8007b8e:	4b80      	ldr	r3, [pc, #512]	@ (8007d90 <NMI_Handler+0x368>)
 8007b90:	edd3 7a00 	vldr	s15, [r3]
 8007b94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ba0:	ee17 2a90 	vmov	r2, s15
 8007ba4:	4b80      	ldr	r3, [pc, #512]	@ (8007da8 <NMI_Handler+0x380>)
 8007ba6:	601a      	str	r2, [r3, #0]
		error_sum_rool = error_sum_rool + (wanted_rool - now_rool);
 8007ba8:	4b80      	ldr	r3, [pc, #512]	@ (8007dac <NMI_Handler+0x384>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007bb4:	4b5f      	ldr	r3, [pc, #380]	@ (8007d34 <NMI_Handler+0x30c>)
 8007bb6:	edd3 6a00 	vldr	s13, [r3]
 8007bba:	4b76      	ldr	r3, [pc, #472]	@ (8007d94 <NMI_Handler+0x36c>)
 8007bbc:	edd3 7a00 	vldr	s15, [r3]
 8007bc0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bcc:	ee17 2a90 	vmov	r2, s15
 8007bd0:	4b76      	ldr	r3, [pc, #472]	@ (8007dac <NMI_Handler+0x384>)
 8007bd2:	601a      	str	r2, [r3, #0]
		error_sum_yaw = error_sum_yaw + (wanted_yaw - now_yaw);
 8007bd4:	4b76      	ldr	r3, [pc, #472]	@ (8007db0 <NMI_Handler+0x388>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	ee07 3a90 	vmov	s15, r3
 8007bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007be0:	4b56      	ldr	r3, [pc, #344]	@ (8007d3c <NMI_Handler+0x314>)
 8007be2:	edd3 6a00 	vldr	s13, [r3]
 8007be6:	4b6c      	ldr	r3, [pc, #432]	@ (8007d98 <NMI_Handler+0x370>)
 8007be8:	edd3 7a00 	vldr	s15, [r3]
 8007bec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bf8:	ee17 2a90 	vmov	r2, s15
 8007bfc:	4b6c      	ldr	r3, [pc, #432]	@ (8007db0 <NMI_Handler+0x388>)
 8007bfe:	601a      	str	r2, [r3, #0]

		error_sum_angular_rate_pitch = error_sum_angular_rate_pitch + (pid_pitch - gx);
 8007c00:	4b6c      	ldr	r3, [pc, #432]	@ (8007db4 <NMI_Handler+0x38c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	ee07 3a90 	vmov	s15, r3
 8007c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8007db8 <NMI_Handler+0x390>)
 8007c0e:	edd3 6a00 	vldr	s13, [r3]
 8007c12:	4b57      	ldr	r3, [pc, #348]	@ (8007d70 <NMI_Handler+0x348>)
 8007c14:	edd3 7a00 	vldr	s15, [r3]
 8007c18:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c24:	ee17 2a90 	vmov	r2, s15
 8007c28:	4b62      	ldr	r3, [pc, #392]	@ (8007db4 <NMI_Handler+0x38c>)
 8007c2a:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_rool = error_sum_angular_rate_rool + (pid_rool - gy);
 8007c2c:	4b63      	ldr	r3, [pc, #396]	@ (8007dbc <NMI_Handler+0x394>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	ee07 3a90 	vmov	s15, r3
 8007c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c38:	4b61      	ldr	r3, [pc, #388]	@ (8007dc0 <NMI_Handler+0x398>)
 8007c3a:	edd3 6a00 	vldr	s13, [r3]
 8007c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d6c <NMI_Handler+0x344>)
 8007c40:	edd3 7a00 	vldr	s15, [r3]
 8007c44:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c50:	ee17 2a90 	vmov	r2, s15
 8007c54:	4b59      	ldr	r3, [pc, #356]	@ (8007dbc <NMI_Handler+0x394>)
 8007c56:	601a      	str	r2, [r3, #0]
		error_sum_angular_rate_yaw = error_sum_angular_rate_yaw + (pid_yaw - gz);
 8007c58:	4b5a      	ldr	r3, [pc, #360]	@ (8007dc4 <NMI_Handler+0x39c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	ee07 3a90 	vmov	s15, r3
 8007c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c64:	4b58      	ldr	r3, [pc, #352]	@ (8007dc8 <NMI_Handler+0x3a0>)
 8007c66:	edd3 6a00 	vldr	s13, [r3]
 8007c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8007d68 <NMI_Handler+0x340>)
 8007c6c:	edd3 7a00 	vldr	s15, [r3]
 8007c70:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c7c:	ee17 2a90 	vmov	r2, s15
 8007c80:	4b50      	ldr	r3, [pc, #320]	@ (8007dc4 <NMI_Handler+0x39c>)
 8007c82:	601a      	str	r2, [r3, #0]


		PID_cal(&pid_pitch, PID_FAC_Pitch, 1);// angle control
 8007c84:	2201      	movs	r2, #1
 8007c86:	4951      	ldr	r1, [pc, #324]	@ (8007dcc <NMI_Handler+0x3a4>)
 8007c88:	484b      	ldr	r0, [pc, #300]	@ (8007db8 <NMI_Handler+0x390>)
 8007c8a:	f7fb fedb 	bl	8003a44 <PID_cal>
		PID_cal(&pid_rool, PID_FAC_Rool, 2);
 8007c8e:	2202      	movs	r2, #2
 8007c90:	494f      	ldr	r1, [pc, #316]	@ (8007dd0 <NMI_Handler+0x3a8>)
 8007c92:	484b      	ldr	r0, [pc, #300]	@ (8007dc0 <NMI_Handler+0x398>)
 8007c94:	f7fb fed6 	bl	8003a44 <PID_cal>

		PID_cal(&pid_angular_rate_pitch, PID_FAC_Angular_Rate_Pitch, 4);// angle rate control
 8007c98:	2204      	movs	r2, #4
 8007c9a:	494e      	ldr	r1, [pc, #312]	@ (8007dd4 <NMI_Handler+0x3ac>)
 8007c9c:	484e      	ldr	r0, [pc, #312]	@ (8007dd8 <NMI_Handler+0x3b0>)
 8007c9e:	f7fb fed1 	bl	8003a44 <PID_cal>
		PID_cal(&pid_angular_rate_rool, PID_FAC_Angular_Rate_Rool, 5);
 8007ca2:	2205      	movs	r2, #5
 8007ca4:	494d      	ldr	r1, [pc, #308]	@ (8007ddc <NMI_Handler+0x3b4>)
 8007ca6:	484e      	ldr	r0, [pc, #312]	@ (8007de0 <NMI_Handler+0x3b8>)
 8007ca8:	f7fb fecc 	bl	8003a44 <PID_cal>
		PID_cal(&pid_angular_rate_yaw, PID_FAC_Angular_Rate_Yaw, 6);
 8007cac:	2206      	movs	r2, #6
 8007cae:	494d      	ldr	r1, [pc, #308]	@ (8007de4 <NMI_Handler+0x3bc>)
 8007cb0:	484d      	ldr	r0, [pc, #308]	@ (8007de8 <NMI_Handler+0x3c0>)
 8007cb2:	f7fb fec7 	bl	8003a44 <PID_cal>


		old_error_pitch = wanted_pitch - now_pitch;
 8007cb6:	4b20      	ldr	r3, [pc, #128]	@ (8007d38 <NMI_Handler+0x310>)
 8007cb8:	ed93 7a00 	vldr	s14, [r3]
 8007cbc:	4b34      	ldr	r3, [pc, #208]	@ (8007d90 <NMI_Handler+0x368>)
 8007cbe:	edd3 7a00 	vldr	s15, [r3]
 8007cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cc6:	4b49      	ldr	r3, [pc, #292]	@ (8007dec <NMI_Handler+0x3c4>)
 8007cc8:	edc3 7a00 	vstr	s15, [r3]
		old_error_rool = wanted_rool - now_rool;
 8007ccc:	4b19      	ldr	r3, [pc, #100]	@ (8007d34 <NMI_Handler+0x30c>)
 8007cce:	ed93 7a00 	vldr	s14, [r3]
 8007cd2:	4b30      	ldr	r3, [pc, #192]	@ (8007d94 <NMI_Handler+0x36c>)
 8007cd4:	edd3 7a00 	vldr	s15, [r3]
 8007cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cdc:	4b44      	ldr	r3, [pc, #272]	@ (8007df0 <NMI_Handler+0x3c8>)
 8007cde:	edc3 7a00 	vstr	s15, [r3]

		old_error_angular_rate_pitch = pid_pitch - gx;
 8007ce2:	4b35      	ldr	r3, [pc, #212]	@ (8007db8 <NMI_Handler+0x390>)
 8007ce4:	ed93 7a00 	vldr	s14, [r3]
 8007ce8:	4b21      	ldr	r3, [pc, #132]	@ (8007d70 <NMI_Handler+0x348>)
 8007cea:	edd3 7a00 	vldr	s15, [r3]
 8007cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007cf2:	4b40      	ldr	r3, [pc, #256]	@ (8007df4 <NMI_Handler+0x3cc>)
 8007cf4:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_rool = pid_rool - gy;
 8007cf8:	4b31      	ldr	r3, [pc, #196]	@ (8007dc0 <NMI_Handler+0x398>)
 8007cfa:	ed93 7a00 	vldr	s14, [r3]
 8007cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8007d6c <NMI_Handler+0x344>)
 8007d00:	edd3 7a00 	vldr	s15, [r3]
 8007d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d08:	4b3b      	ldr	r3, [pc, #236]	@ (8007df8 <NMI_Handler+0x3d0>)
 8007d0a:	edc3 7a00 	vstr	s15, [r3]
		old_error_angular_rate_yaw = wanted_yaw - gz;
 8007d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d3c <NMI_Handler+0x314>)
 8007d10:	ed93 7a00 	vldr	s14, [r3]
 8007d14:	4b14      	ldr	r3, [pc, #80]	@ (8007d68 <NMI_Handler+0x340>)
 8007d16:	edd3 7a00 	vldr	s15, [r3]
 8007d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d1e:	4b37      	ldr	r3, [pc, #220]	@ (8007dfc <NMI_Handler+0x3d4>)
 8007d20:	edc3 7a00 	vstr	s15, [r3]
 8007d24:	e06c      	b.n	8007e00 <NMI_Handler+0x3d8>
 8007d26:	bf00      	nop
 8007d28:	58021000 	.word	0x58021000
 8007d2c:	58020400 	.word	0x58020400
 8007d30:	24001f10 	.word	0x24001f10
 8007d34:	00004054 	.word	0x00004054
 8007d38:	00004050 	.word	0x00004050
 8007d3c:	00004058 	.word	0x00004058
 8007d40:	0801e378 	.word	0x0801e378
 8007d44:	00004044 	.word	0x00004044
 8007d48:	00000030 	.word	0x00000030
 8007d4c:	00000034 	.word	0x00000034
 8007d50:	00000038 	.word	0x00000038
 8007d54:	0000003c 	.word	0x0000003c
 8007d58:	00000040 	.word	0x00000040
 8007d5c:	00000044 	.word	0x00000044
 8007d60:	0801e36c 	.word	0x0801e36c
 8007d64:	0801e370 	.word	0x0801e370
 8007d68:	00000014 	.word	0x00000014
 8007d6c:	00000010 	.word	0x00000010
 8007d70:	0000000c 	.word	0x0000000c
 8007d74:	00000008 	.word	0x00000008
 8007d78:	00000004 	.word	0x00000004
 8007d7c:	00000000 	.word	0x00000000
 8007d80:	0000001c 	.word	0x0000001c
 8007d84:	00000018 	.word	0x00000018
 8007d88:	00000048 	.word	0x00000048
 8007d8c:	00000064 	.word	0x00000064
 8007d90:	00004060 	.word	0x00004060
 8007d94:	00004064 	.word	0x00004064
 8007d98:	00004068 	.word	0x00004068
 8007d9c:	0000403c 	.word	0x0000403c
 8007da0:	00004038 	.word	0x00004038
 8007da4:	00004040 	.word	0x00004040
 8007da8:	00004084 	.word	0x00004084
 8007dac:	00004088 	.word	0x00004088
 8007db0:	0000408c 	.word	0x0000408c
 8007db4:	00004090 	.word	0x00004090
 8007db8:	0000409c 	.word	0x0000409c
 8007dbc:	00004094 	.word	0x00004094
 8007dc0:	000040a4 	.word	0x000040a4
 8007dc4:	00004098 	.word	0x00004098
 8007dc8:	000040a0 	.word	0x000040a0
 8007dcc:	000040d8 	.word	0x000040d8
 8007dd0:	000040ec 	.word	0x000040ec
 8007dd4:	00004138 	.word	0x00004138
 8007dd8:	000040a8 	.word	0x000040a8
 8007ddc:	0000414c 	.word	0x0000414c
 8007de0:	000040b0 	.word	0x000040b0
 8007de4:	00004160 	.word	0x00004160
 8007de8:	000040ac 	.word	0x000040ac
 8007dec:	0000406c 	.word	0x0000406c
 8007df0:	00004070 	.word	0x00004070
 8007df4:	00004078 	.word	0x00004078
 8007df8:	0000407c 	.word	0x0000407c
 8007dfc:	00004080 	.word	0x00004080


		MYDRON.ROOL = pid_angular_rate_rool;
 8007e00:	4b99      	ldr	r3, [pc, #612]	@ (8008068 <NMI_Handler+0x640>)
 8007e02:	edd3 7a00 	vldr	s15, [r3]
 8007e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e0a:	ee17 3a90 	vmov	r3, s15
 8007e0e:	b21a      	sxth	r2, r3
 8007e10:	4b96      	ldr	r3, [pc, #600]	@ (800806c <NMI_Handler+0x644>)
 8007e12:	80da      	strh	r2, [r3, #6]
		MYDRON.PITCH = pid_angular_rate_pitch;
 8007e14:	4b96      	ldr	r3, [pc, #600]	@ (8008070 <NMI_Handler+0x648>)
 8007e16:	edd3 7a00 	vldr	s15, [r3]
 8007e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e1e:	ee17 3a90 	vmov	r3, s15
 8007e22:	b21a      	sxth	r2, r3
 8007e24:	4b91      	ldr	r3, [pc, #580]	@ (800806c <NMI_Handler+0x644>)
 8007e26:	809a      	strh	r2, [r3, #4]
		MYDRON.YAW = pid_angular_rate_yaw;
 8007e28:	4b92      	ldr	r3, [pc, #584]	@ (8008074 <NMI_Handler+0x64c>)
 8007e2a:	edd3 7a00 	vldr	s15, [r3]
 8007e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e32:	ee17 3a90 	vmov	r3, s15
 8007e36:	b21a      	sxth	r2, r3
 8007e38:	4b8c      	ldr	r3, [pc, #560]	@ (800806c <NMI_Handler+0x644>)
 8007e3a:	811a      	strh	r2, [r3, #8]



		Thrust_filter(1);
 8007e3c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8007e40:	f7fb fcca 	bl	80037d8 <Thrust_filter>
		if(MYDRON.THRUST > thrust_limit){
 8007e44:	4b89      	ldr	r3, [pc, #548]	@ (800806c <NMI_Handler+0x644>)
 8007e46:	885b      	ldrh	r3, [r3, #2]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4b8b      	ldr	r3, [pc, #556]	@ (8008078 <NMI_Handler+0x650>)
 8007e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	dd05      	ble.n	8007e60 <NMI_Handler+0x438>
			MYDRON.THRUST = thrust_limit;
 8007e54:	4b88      	ldr	r3, [pc, #544]	@ (8008078 <NMI_Handler+0x650>)
 8007e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	4b83      	ldr	r3, [pc, #524]	@ (800806c <NMI_Handler+0x644>)
 8007e5e:	805a      	strh	r2, [r3, #2]
		}


		SPEED1 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL - MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//trust 7000 max
 8007e60:	4b82      	ldr	r3, [pc, #520]	@ (800806c <NMI_Handler+0x644>)
 8007e62:	885b      	ldrh	r3, [r3, #2]
 8007e64:	ee07 3a90 	vmov	s15, r3
 8007e68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007e6c:	ed9f 6b78 	vldr	d6, [pc, #480]	@ 8008050 <NMI_Handler+0x628>
 8007e70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007e74:	4b7d      	ldr	r3, [pc, #500]	@ (800806c <NMI_Handler+0x644>)
 8007e76:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007e7a:	ee07 3a90 	vmov	s15, r3
 8007e7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007e82:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007e86:	4b79      	ldr	r3, [pc, #484]	@ (800806c <NMI_Handler+0x644>)
 8007e88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007e8c:	ee07 3a90 	vmov	s15, r3
 8007e90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007e94:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007e98:	4b74      	ldr	r3, [pc, #464]	@ (800806c <NMI_Handler+0x644>)
 8007e9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e9e:	ee07 3a90 	vmov	s15, r3
 8007ea2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007ea6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007eaa:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008058 <NMI_Handler+0x630>
 8007eae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007eb2:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8008060 <NMI_Handler+0x638>
 8007eb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007eba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007ebe:	ee17 3a90 	vmov	r3, s15
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	4b6d      	ldr	r3, [pc, #436]	@ (800807c <NMI_Handler+0x654>)
 8007ec6:	801a      	strh	r2, [r3, #0]
		SPEED2 = (MYDRON.THRUST*0.7)- MYDRON.ROOL - MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8007ec8:	4b68      	ldr	r3, [pc, #416]	@ (800806c <NMI_Handler+0x644>)
 8007eca:	885b      	ldrh	r3, [r3, #2]
 8007ecc:	ee07 3a90 	vmov	s15, r3
 8007ed0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007ed4:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8008050 <NMI_Handler+0x628>
 8007ed8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007edc:	4b63      	ldr	r3, [pc, #396]	@ (800806c <NMI_Handler+0x644>)
 8007ede:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007eea:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007eee:	4b5f      	ldr	r3, [pc, #380]	@ (800806c <NMI_Handler+0x644>)
 8007ef0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007efc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007f00:	4b5a      	ldr	r3, [pc, #360]	@ (800806c <NMI_Handler+0x644>)
 8007f02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007f0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007f12:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008058 <NMI_Handler+0x630>
 8007f16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007f1a:	ed9f 6b51 	vldr	d6, [pc, #324]	@ 8008060 <NMI_Handler+0x638>
 8007f1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007f22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007f26:	ee17 3a90 	vmov	r3, s15
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	4b54      	ldr	r3, [pc, #336]	@ (8008080 <NMI_Handler+0x658>)
 8007f2e:	801a      	strh	r2, [r3, #0]
		SPEED3 = (MYDRON.THRUST*0.7)+ MYDRON.ROOL + MYDRON.PITCH - MYDRON.YAW + min_speed + 500;//
 8007f30:	4b4e      	ldr	r3, [pc, #312]	@ (800806c <NMI_Handler+0x644>)
 8007f32:	885b      	ldrh	r3, [r3, #2]
 8007f34:	ee07 3a90 	vmov	s15, r3
 8007f38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007f3c:	ed9f 6b44 	vldr	d6, [pc, #272]	@ 8008050 <NMI_Handler+0x628>
 8007f40:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007f44:	4b49      	ldr	r3, [pc, #292]	@ (800806c <NMI_Handler+0x644>)
 8007f46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007f52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007f56:	4b45      	ldr	r3, [pc, #276]	@ (800806c <NMI_Handler+0x644>)
 8007f58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007f5c:	ee07 3a90 	vmov	s15, r3
 8007f60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007f64:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007f68:	4b40      	ldr	r3, [pc, #256]	@ (800806c <NMI_Handler+0x644>)
 8007f6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007f76:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007f7a:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008058 <NMI_Handler+0x630>
 8007f7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007f82:	ed9f 6b37 	vldr	d6, [pc, #220]	@ 8008060 <NMI_Handler+0x638>
 8007f86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007f8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007f8e:	ee17 3a90 	vmov	r3, s15
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	4b3b      	ldr	r3, [pc, #236]	@ (8008084 <NMI_Handler+0x65c>)
 8007f96:	801a      	strh	r2, [r3, #0]
		SPEED4 = (MYDRON.THRUST*0.7)- MYDRON.ROOL + MYDRON.PITCH + MYDRON.YAW + min_speed + 500;//
 8007f98:	4b34      	ldr	r3, [pc, #208]	@ (800806c <NMI_Handler+0x644>)
 8007f9a:	885b      	ldrh	r3, [r3, #2]
 8007f9c:	ee07 3a90 	vmov	s15, r3
 8007fa0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007fa4:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8008050 <NMI_Handler+0x628>
 8007fa8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007fac:	4b2f      	ldr	r3, [pc, #188]	@ (800806c <NMI_Handler+0x644>)
 8007fae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007fba:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800806c <NMI_Handler+0x644>)
 8007fc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007fc4:	ee07 3a90 	vmov	s15, r3
 8007fc8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007fcc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007fd0:	4b26      	ldr	r3, [pc, #152]	@ (800806c <NMI_Handler+0x644>)
 8007fd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007fd6:	ee07 3a90 	vmov	s15, r3
 8007fda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007fde:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007fe2:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008058 <NMI_Handler+0x630>
 8007fe6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007fea:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8008060 <NMI_Handler+0x638>
 8007fee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007ff2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007ff6:	ee17 3a90 	vmov	r3, s15
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	4b22      	ldr	r3, [pc, #136]	@ (8008088 <NMI_Handler+0x660>)
 8007ffe:	801a      	strh	r2, [r3, #0]

		ESC_1_SPEED(SPEED1);
 8008000:	4b1e      	ldr	r3, [pc, #120]	@ (800807c <NMI_Handler+0x654>)
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	4618      	mov	r0, r3
 8008006:	f7f8 ff15 	bl	8000e34 <ESC_1_SPEED>
		ESC_2_SPEED(SPEED2);
 800800a:	4b1d      	ldr	r3, [pc, #116]	@ (8008080 <NMI_Handler+0x658>)
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f7f8 ff32 	bl	8000e78 <ESC_2_SPEED>
		ESC_3_SPEED(SPEED3);
 8008014:	4b1b      	ldr	r3, [pc, #108]	@ (8008084 <NMI_Handler+0x65c>)
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	4618      	mov	r0, r3
 800801a:	f7f8 ff4f 	bl	8000ebc <ESC_3_SPEED>
		ESC_4_SPEED(SPEED4);
 800801e:	4b1a      	ldr	r3, [pc, #104]	@ (8008088 <NMI_Handler+0x660>)
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	4618      	mov	r0, r3
 8008024:	f7f8 ff6c 	bl	8000f00 <ESC_4_SPEED>


		OLD_SPEED1 = SPEED1;
 8008028:	4b14      	ldr	r3, [pc, #80]	@ (800807c <NMI_Handler+0x654>)
 800802a:	881a      	ldrh	r2, [r3, #0]
 800802c:	4b17      	ldr	r3, [pc, #92]	@ (800808c <NMI_Handler+0x664>)
 800802e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED2 = SPEED2;
 8008030:	4b13      	ldr	r3, [pc, #76]	@ (8008080 <NMI_Handler+0x658>)
 8008032:	881a      	ldrh	r2, [r3, #0]
 8008034:	4b16      	ldr	r3, [pc, #88]	@ (8008090 <NMI_Handler+0x668>)
 8008036:	801a      	strh	r2, [r3, #0]
		OLD_SPEED3 = SPEED3;
 8008038:	4b12      	ldr	r3, [pc, #72]	@ (8008084 <NMI_Handler+0x65c>)
 800803a:	881a      	ldrh	r2, [r3, #0]
 800803c:	4b15      	ldr	r3, [pc, #84]	@ (8008094 <NMI_Handler+0x66c>)
 800803e:	801a      	strh	r2, [r3, #0]
		OLD_SPEED4 = SPEED4;
 8008040:	4b11      	ldr	r3, [pc, #68]	@ (8008088 <NMI_Handler+0x660>)
 8008042:	881a      	ldrh	r2, [r3, #0]
 8008044:	4b14      	ldr	r3, [pc, #80]	@ (8008098 <NMI_Handler+0x670>)
 8008046:	801a      	strh	r2, [r3, #0]
	   	HAL_Delay(1);
 8008048:	e517      	b.n	8007a7a <NMI_Handler+0x52>
 800804a:	bf00      	nop
 800804c:	f3af 8000 	nop.w
 8008050:	66666666 	.word	0x66666666
 8008054:	3fe66666 	.word	0x3fe66666
 8008058:	00000000 	.word	0x00000000
 800805c:	40c48200 	.word	0x40c48200
 8008060:	00000000 	.word	0x00000000
 8008064:	407f4000 	.word	0x407f4000
 8008068:	000040b0 	.word	0x000040b0
 800806c:	00000160 	.word	0x00000160
 8008070:	000040a8 	.word	0x000040a8
 8008074:	000040ac 	.word	0x000040ac
 8008078:	00004046 	.word	0x00004046
 800807c:	00004174 	.word	0x00004174
 8008080:	00004176 	.word	0x00004176
 8008084:	00004178 	.word	0x00004178
 8008088:	0000417a 	.word	0x0000417a
 800808c:	0000417c 	.word	0x0000417c
 8008090:	0000417e 	.word	0x0000417e
 8008094:	00004180 	.word	0x00004180
 8008098:	00004182 	.word	0x00004182

0800809c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	LED_G_1;
 80080a0:	2201      	movs	r2, #1
 80080a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80080a6:	4812      	ldr	r0, [pc, #72]	@ (80080f0 <HardFault_Handler+0x54>)
 80080a8:	f005 ff8a 	bl	800dfc0 <HAL_GPIO_WritePin>
	LED_Y_0;
 80080ac:	2200      	movs	r2, #0
 80080ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80080b2:	4810      	ldr	r0, [pc, #64]	@ (80080f4 <HardFault_Handler+0x58>)
 80080b4:	f005 ff84 	bl	800dfc0 <HAL_GPIO_WritePin>
	LED_R_1;
 80080b8:	2201      	movs	r2, #1
 80080ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80080be:	480d      	ldr	r0, [pc, #52]	@ (80080f4 <HardFault_Handler+0x58>)
 80080c0:	f005 ff7e 	bl	800dfc0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80080c4:	480c      	ldr	r0, [pc, #48]	@ (80080f8 <HardFault_Handler+0x5c>)
 80080c6:	f015 f9fd 	bl	801d4c4 <f_close>
	wanted_rool = 0;
 80080ca:	4b0c      	ldr	r3, [pc, #48]	@ (80080fc <HardFault_Handler+0x60>)
 80080cc:	f04f 0200 	mov.w	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80080d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008100 <HardFault_Handler+0x64>)
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80080da:	4b0a      	ldr	r3, [pc, #40]	@ (8008104 <HardFault_Handler+0x68>)
 80080dc:	f04f 0200 	mov.w	r2, #0
 80080e0:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80080e2:	4b09      	ldr	r3, [pc, #36]	@ (8008108 <HardFault_Handler+0x6c>)
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	b21a      	sxth	r2, r3
 80080e8:	4b08      	ldr	r3, [pc, #32]	@ (800810c <HardFault_Handler+0x70>)
 80080ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80080ec:	bf00      	nop
 80080ee:	e7fd      	b.n	80080ec <HardFault_Handler+0x50>
 80080f0:	58021000 	.word	0x58021000
 80080f4:	58020400 	.word	0x58020400
 80080f8:	24001f10 	.word	0x24001f10
 80080fc:	00004054 	.word	0x00004054
 8008100:	00004050 	.word	0x00004050
 8008104:	00004058 	.word	0x00004058
 8008108:	0801e378 	.word	0x0801e378
 800810c:	00004044 	.word	0x00004044

08008110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

	LED_G_0;
 8008114:	2200      	movs	r2, #0
 8008116:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800811a:	4812      	ldr	r0, [pc, #72]	@ (8008164 <MemManage_Handler+0x54>)
 800811c:	f005 ff50 	bl	800dfc0 <HAL_GPIO_WritePin>
	LED_Y_0;
 8008120:	2200      	movs	r2, #0
 8008122:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008126:	4810      	ldr	r0, [pc, #64]	@ (8008168 <MemManage_Handler+0x58>)
 8008128:	f005 ff4a 	bl	800dfc0 <HAL_GPIO_WritePin>
	LED_R_1;
 800812c:	2201      	movs	r2, #1
 800812e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008132:	480d      	ldr	r0, [pc, #52]	@ (8008168 <MemManage_Handler+0x58>)
 8008134:	f005 ff44 	bl	800dfc0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008138:	480c      	ldr	r0, [pc, #48]	@ (800816c <MemManage_Handler+0x5c>)
 800813a:	f015 f9c3 	bl	801d4c4 <f_close>
	wanted_rool = 0;
 800813e:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <MemManage_Handler+0x60>)
 8008140:	f04f 0200 	mov.w	r2, #0
 8008144:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 8008146:	4b0b      	ldr	r3, [pc, #44]	@ (8008174 <MemManage_Handler+0x64>)
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 800814e:	4b0a      	ldr	r3, [pc, #40]	@ (8008178 <MemManage_Handler+0x68>)
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 8008156:	4b09      	ldr	r3, [pc, #36]	@ (800817c <MemManage_Handler+0x6c>)
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b21a      	sxth	r2, r3
 800815c:	4b08      	ldr	r3, [pc, #32]	@ (8008180 <MemManage_Handler+0x70>)
 800815e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008160:	bf00      	nop
 8008162:	e7fd      	b.n	8008160 <MemManage_Handler+0x50>
 8008164:	58021000 	.word	0x58021000
 8008168:	58020400 	.word	0x58020400
 800816c:	24001f10 	.word	0x24001f10
 8008170:	00004054 	.word	0x00004054
 8008174:	00004050 	.word	0x00004050
 8008178:	00004058 	.word	0x00004058
 800817c:	0801e378 	.word	0x0801e378
 8008180:	00004044 	.word	0x00004044

08008184 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

	LED_G_1;
 8008188:	2201      	movs	r2, #1
 800818a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800818e:	4812      	ldr	r0, [pc, #72]	@ (80081d8 <BusFault_Handler+0x54>)
 8008190:	f005 ff16 	bl	800dfc0 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008194:	2201      	movs	r2, #1
 8008196:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800819a:	4810      	ldr	r0, [pc, #64]	@ (80081dc <BusFault_Handler+0x58>)
 800819c:	f005 ff10 	bl	800dfc0 <HAL_GPIO_WritePin>
	LED_R_1;
 80081a0:	2201      	movs	r2, #1
 80081a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80081a6:	480d      	ldr	r0, [pc, #52]	@ (80081dc <BusFault_Handler+0x58>)
 80081a8:	f005 ff0a 	bl	800dfc0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 80081ac:	480c      	ldr	r0, [pc, #48]	@ (80081e0 <BusFault_Handler+0x5c>)
 80081ae:	f015 f989 	bl	801d4c4 <f_close>
	wanted_rool = 0;
 80081b2:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <BusFault_Handler+0x60>)
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 80081ba:	4b0b      	ldr	r3, [pc, #44]	@ (80081e8 <BusFault_Handler+0x64>)
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 80081c2:	4b0a      	ldr	r3, [pc, #40]	@ (80081ec <BusFault_Handler+0x68>)
 80081c4:	f04f 0200 	mov.w	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 80081ca:	4b09      	ldr	r3, [pc, #36]	@ (80081f0 <BusFault_Handler+0x6c>)
 80081cc:	881b      	ldrh	r3, [r3, #0]
 80081ce:	b21a      	sxth	r2, r3
 80081d0:	4b08      	ldr	r3, [pc, #32]	@ (80081f4 <BusFault_Handler+0x70>)
 80081d2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081d4:	bf00      	nop
 80081d6:	e7fd      	b.n	80081d4 <BusFault_Handler+0x50>
 80081d8:	58021000 	.word	0x58021000
 80081dc:	58020400 	.word	0x58020400
 80081e0:	24001f10 	.word	0x24001f10
 80081e4:	00004054 	.word	0x00004054
 80081e8:	00004050 	.word	0x00004050
 80081ec:	00004058 	.word	0x00004058
 80081f0:	0801e378 	.word	0x0801e378
 80081f4:	00004044 	.word	0x00004044

080081f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

	LED_G_0;
 80081fc:	2200      	movs	r2, #0
 80081fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008202:	4812      	ldr	r0, [pc, #72]	@ (800824c <UsageFault_Handler+0x54>)
 8008204:	f005 fedc 	bl	800dfc0 <HAL_GPIO_WritePin>
	LED_Y_1;
 8008208:	2201      	movs	r2, #1
 800820a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800820e:	4810      	ldr	r0, [pc, #64]	@ (8008250 <UsageFault_Handler+0x58>)
 8008210:	f005 fed6 	bl	800dfc0 <HAL_GPIO_WritePin>
	LED_R_1;
 8008214:	2201      	movs	r2, #1
 8008216:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800821a:	480d      	ldr	r0, [pc, #52]	@ (8008250 <UsageFault_Handler+0x58>)
 800821c:	f005 fed0 	bl	800dfc0 <HAL_GPIO_WritePin>
	//todo create crash log
	f_close(&fil);
 8008220:	480c      	ldr	r0, [pc, #48]	@ (8008254 <UsageFault_Handler+0x5c>)
 8008222:	f015 f94f 	bl	801d4c4 <f_close>
	wanted_rool = 0;
 8008226:	4b0c      	ldr	r3, [pc, #48]	@ (8008258 <UsageFault_Handler+0x60>)
 8008228:	f04f 0200 	mov.w	r2, #0
 800822c:	601a      	str	r2, [r3, #0]
	wanted_pitch = 0;
 800822e:	4b0b      	ldr	r3, [pc, #44]	@ (800825c <UsageFault_Handler+0x64>)
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
	wanted_yaw = 0;
 8008236:	4b0a      	ldr	r3, [pc, #40]	@ (8008260 <UsageFault_Handler+0x68>)
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	601a      	str	r2, [r3, #0]
	wanted_thrust = DRON_SLOWFALING;
 800823e:	4b09      	ldr	r3, [pc, #36]	@ (8008264 <UsageFault_Handler+0x6c>)
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b21a      	sxth	r2, r3
 8008244:	4b08      	ldr	r3, [pc, #32]	@ (8008268 <UsageFault_Handler+0x70>)
 8008246:	801a      	strh	r2, [r3, #0]
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008248:	bf00      	nop
 800824a:	e7fd      	b.n	8008248 <UsageFault_Handler+0x50>
 800824c:	58021000 	.word	0x58021000
 8008250:	58020400 	.word	0x58020400
 8008254:	24001f10 	.word	0x24001f10
 8008258:	00004054 	.word	0x00004054
 800825c:	00004050 	.word	0x00004050
 8008260:	00004058 	.word	0x00004058
 8008264:	0801e378 	.word	0x0801e378
 8008268:	00004044 	.word	0x00004044

0800826c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008270:	bf00      	nop
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800827a:	b480      	push	{r7}
 800827c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800827e:	bf00      	nop
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008288:	b480      	push	{r7}
 800828a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800828c:	bf00      	nop
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
	...

08008298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 800829c:	4b08      	ldr	r3, [pc, #32]	@ (80082c0 <SysTick_Handler+0x28>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3301      	adds	r3, #1
 80082a2:	4a07      	ldr	r2, [pc, #28]	@ (80082c0 <SysTick_Handler+0x28>)
 80082a4:	6013      	str	r3, [r2, #0]
	  if(FatFsCnt >= 10)
 80082a6:	4b06      	ldr	r3, [pc, #24]	@ (80082c0 <SysTick_Handler+0x28>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b09      	cmp	r3, #9
 80082ac:	d904      	bls.n	80082b8 <SysTick_Handler+0x20>
	  {
	    FatFsCnt = 0;
 80082ae:	4b04      	ldr	r3, [pc, #16]	@ (80082c0 <SysTick_Handler+0x28>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
	    SDTimer_Handler();
 80082b4:	f7ff fb98 	bl	80079e8 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80082b8:	f000 fd04 	bl	8008cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80082bc:	bf00      	nop
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	24000374 	.word	0x24000374

080082c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80082c8:	4802      	ldr	r0, [pc, #8]	@ (80082d4 <DMA1_Stream0_IRQHandler+0x10>)
 80082ca:	f004 f98d 	bl	800c5e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80082ce:	bf00      	nop
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	240002fc 	.word	0x240002fc

080082d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80082dc:	4802      	ldr	r0, [pc, #8]	@ (80082e8 <ADC_IRQHandler+0x10>)
 80082de:	f001 fb05 	bl	80098ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80082e2:	bf00      	nop
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	240000ac 	.word	0x240000ac

080082ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80082f0:	4802      	ldr	r0, [pc, #8]	@ (80082fc <TIM2_IRQHandler+0x10>)
 80082f2:	f00d ff24 	bl	801613e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80082f6:	bf00      	nop
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	240003cc 	.word	0x240003cc

08008300 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008304:	4802      	ldr	r0, [pc, #8]	@ (8008310 <SPI2_IRQHandler+0x10>)
 8008306:	f00d f893 	bl	8015430 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800830a:	bf00      	nop
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	240001ec 	.word	0x240001ec

08008314 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008318:	4802      	ldr	r0, [pc, #8]	@ (8008324 <USART1_IRQHandler+0x10>)
 800831a:	f00f fb6d 	bl	80179f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800831e:	bf00      	nop
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	240004b0 	.word	0x240004b0

08008328 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF24_IRQ_Pin);
 800832c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008330:	f005 fe5f 	bl	800dff2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008334:	bf00      	nop
 8008336:	bd80      	pop	{r7, pc}

08008338 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800833c:	4802      	ldr	r0, [pc, #8]	@ (8008348 <DMA2_Stream0_IRQHandler+0x10>)
 800833e:	f004 f953 	bl	800c5e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008342:	bf00      	nop
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	2400011c 	.word	0x2400011c

0800834c <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8008350:	4802      	ldr	r0, [pc, #8]	@ (800835c <I2C5_EV_IRQHandler+0x10>)
 8008352:	f006 fa43 	bl	800e7dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8008356:	bf00      	nop
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	24000198 	.word	0x24000198

08008360 <SystemInit>:
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0
 8008364:	4b32      	ldr	r3, [pc, #200]	@ (8008430 <SystemInit+0xd0>)
 8008366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800836a:	4a31      	ldr	r2, [pc, #196]	@ (8008430 <SystemInit+0xd0>)
 800836c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8008374:	4b2f      	ldr	r3, [pc, #188]	@ (8008434 <SystemInit+0xd4>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 030f 	and.w	r3, r3, #15
 800837c:	2b06      	cmp	r3, #6
 800837e:	d807      	bhi.n	8008390 <SystemInit+0x30>
 8008380:	4b2c      	ldr	r3, [pc, #176]	@ (8008434 <SystemInit+0xd4>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f023 030f 	bic.w	r3, r3, #15
 8008388:	4a2a      	ldr	r2, [pc, #168]	@ (8008434 <SystemInit+0xd4>)
 800838a:	f043 0307 	orr.w	r3, r3, #7
 800838e:	6013      	str	r3, [r2, #0]
 8008390:	4b29      	ldr	r3, [pc, #164]	@ (8008438 <SystemInit+0xd8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a28      	ldr	r2, [pc, #160]	@ (8008438 <SystemInit+0xd8>)
 8008396:	f043 0301 	orr.w	r3, r3, #1
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	4b26      	ldr	r3, [pc, #152]	@ (8008438 <SystemInit+0xd8>)
 800839e:	2200      	movs	r2, #0
 80083a0:	611a      	str	r2, [r3, #16]
 80083a2:	4b25      	ldr	r3, [pc, #148]	@ (8008438 <SystemInit+0xd8>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4924      	ldr	r1, [pc, #144]	@ (8008438 <SystemInit+0xd8>)
 80083a8:	4b24      	ldr	r3, [pc, #144]	@ (800843c <SystemInit+0xdc>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	600b      	str	r3, [r1, #0]
 80083ae:	4b21      	ldr	r3, [pc, #132]	@ (8008434 <SystemInit+0xd4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0308 	and.w	r3, r3, #8
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <SystemInit+0x6a>
 80083ba:	4b1e      	ldr	r3, [pc, #120]	@ (8008434 <SystemInit+0xd4>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f023 030f 	bic.w	r3, r3, #15
 80083c2:	4a1c      	ldr	r2, [pc, #112]	@ (8008434 <SystemInit+0xd4>)
 80083c4:	f043 0307 	orr.w	r3, r3, #7
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008438 <SystemInit+0xd8>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	619a      	str	r2, [r3, #24]
 80083d0:	4b19      	ldr	r3, [pc, #100]	@ (8008438 <SystemInit+0xd8>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	61da      	str	r2, [r3, #28]
 80083d6:	4b18      	ldr	r3, [pc, #96]	@ (8008438 <SystemInit+0xd8>)
 80083d8:	2200      	movs	r2, #0
 80083da:	621a      	str	r2, [r3, #32]
 80083dc:	4b16      	ldr	r3, [pc, #88]	@ (8008438 <SystemInit+0xd8>)
 80083de:	4a18      	ldr	r2, [pc, #96]	@ (8008440 <SystemInit+0xe0>)
 80083e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80083e2:	4b15      	ldr	r3, [pc, #84]	@ (8008438 <SystemInit+0xd8>)
 80083e4:	4a17      	ldr	r2, [pc, #92]	@ (8008444 <SystemInit+0xe4>)
 80083e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80083e8:	4b13      	ldr	r3, [pc, #76]	@ (8008438 <SystemInit+0xd8>)
 80083ea:	4a17      	ldr	r2, [pc, #92]	@ (8008448 <SystemInit+0xe8>)
 80083ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80083ee:	4b12      	ldr	r3, [pc, #72]	@ (8008438 <SystemInit+0xd8>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80083f4:	4b10      	ldr	r3, [pc, #64]	@ (8008438 <SystemInit+0xd8>)
 80083f6:	4a14      	ldr	r2, [pc, #80]	@ (8008448 <SystemInit+0xe8>)
 80083f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80083fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008438 <SystemInit+0xd8>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008400:	4b0d      	ldr	r3, [pc, #52]	@ (8008438 <SystemInit+0xd8>)
 8008402:	4a11      	ldr	r2, [pc, #68]	@ (8008448 <SystemInit+0xe8>)
 8008404:	641a      	str	r2, [r3, #64]	@ 0x40
 8008406:	4b0c      	ldr	r3, [pc, #48]	@ (8008438 <SystemInit+0xd8>)
 8008408:	2200      	movs	r2, #0
 800840a:	645a      	str	r2, [r3, #68]	@ 0x44
 800840c:	4b0a      	ldr	r3, [pc, #40]	@ (8008438 <SystemInit+0xd8>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a09      	ldr	r2, [pc, #36]	@ (8008438 <SystemInit+0xd8>)
 8008412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	4b07      	ldr	r3, [pc, #28]	@ (8008438 <SystemInit+0xd8>)
 800841a:	2200      	movs	r2, #0
 800841c:	661a      	str	r2, [r3, #96]	@ 0x60
 800841e:	4b0b      	ldr	r3, [pc, #44]	@ (800844c <SystemInit+0xec>)
 8008420:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	bf00      	nop
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	e000ed00 	.word	0xe000ed00
 8008434:	52002000 	.word	0x52002000
 8008438:	58024400 	.word	0x58024400
 800843c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008440:	02020200 	.word	0x02020200
 8008444:	01ff0000 	.word	0x01ff0000
 8008448:	01010280 	.word	0x01010280
 800844c:	52004000 	.word	0x52004000

08008450 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b098      	sub	sp, #96	@ 0x60
 8008454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008456:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	605a      	str	r2, [r3, #4]
 8008460:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008462:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	605a      	str	r2, [r3, #4]
 800846c:	609a      	str	r2, [r3, #8]
 800846e:	60da      	str	r2, [r3, #12]
 8008470:	611a      	str	r2, [r3, #16]
 8008472:	615a      	str	r2, [r3, #20]
 8008474:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008476:	1d3b      	adds	r3, r7, #4
 8008478:	2234      	movs	r2, #52	@ 0x34
 800847a:	2100      	movs	r1, #0
 800847c:	4618      	mov	r0, r3
 800847e:	f015 fa19 	bl	801d8b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008482:	4b45      	ldr	r3, [pc, #276]	@ (8008598 <MX_TIM1_Init+0x148>)
 8008484:	4a45      	ldr	r2, [pc, #276]	@ (800859c <MX_TIM1_Init+0x14c>)
 8008486:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8008488:	4b43      	ldr	r3, [pc, #268]	@ (8008598 <MX_TIM1_Init+0x148>)
 800848a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800848e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008490:	4b41      	ldr	r3, [pc, #260]	@ (8008598 <MX_TIM1_Init+0x148>)
 8008492:	2200      	movs	r2, #0
 8008494:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 8008496:	4b40      	ldr	r3, [pc, #256]	@ (8008598 <MX_TIM1_Init+0x148>)
 8008498:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800849c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800849e:	4b3e      	ldr	r3, [pc, #248]	@ (8008598 <MX_TIM1_Init+0x148>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80084a4:	4b3c      	ldr	r3, [pc, #240]	@ (8008598 <MX_TIM1_Init+0x148>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80084aa:	4b3b      	ldr	r3, [pc, #236]	@ (8008598 <MX_TIM1_Init+0x148>)
 80084ac:	2280      	movs	r2, #128	@ 0x80
 80084ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80084b0:	4839      	ldr	r0, [pc, #228]	@ (8008598 <MX_TIM1_Init+0x148>)
 80084b2:	f00d fc79 	bl	8015da8 <HAL_TIM_PWM_Init>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80084bc:	f7ff f8b8 	bl	8007630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80084c0:	2300      	movs	r3, #0
 80084c2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80084c4:	2300      	movs	r3, #0
 80084c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084c8:	2300      	movs	r3, #0
 80084ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80084cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80084d0:	4619      	mov	r1, r3
 80084d2:	4831      	ldr	r0, [pc, #196]	@ (8008598 <MX_TIM1_Init+0x148>)
 80084d4:	f00e ff8c 	bl	80173f0 <HAL_TIMEx_MasterConfigSynchronization>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80084de:	f7ff f8a7 	bl	8007630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80084e2:	2360      	movs	r3, #96	@ 0x60
 80084e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80084ea:	2300      	movs	r3, #0
 80084ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80084ee:	2300      	movs	r3, #0
 80084f0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80084f6:	2300      	movs	r3, #0
 80084f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80084fa:	2300      	movs	r3, #0
 80084fc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80084fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008502:	2204      	movs	r2, #4
 8008504:	4619      	mov	r1, r3
 8008506:	4824      	ldr	r0, [pc, #144]	@ (8008598 <MX_TIM1_Init+0x148>)
 8008508:	f00d ffbc 	bl	8016484 <HAL_TIM_PWM_ConfigChannel>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8008512:	f7ff f88d 	bl	8007630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008516:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800851a:	2208      	movs	r2, #8
 800851c:	4619      	mov	r1, r3
 800851e:	481e      	ldr	r0, [pc, #120]	@ (8008598 <MX_TIM1_Init+0x148>)
 8008520:	f00d ffb0 	bl	8016484 <HAL_TIM_PWM_ConfigChannel>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800852a:	f7ff f881 	bl	8007630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800852e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008532:	220c      	movs	r2, #12
 8008534:	4619      	mov	r1, r3
 8008536:	4818      	ldr	r0, [pc, #96]	@ (8008598 <MX_TIM1_Init+0x148>)
 8008538:	f00d ffa4 	bl	8016484 <HAL_TIM_PWM_ConfigChannel>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008542:	f7ff f875 	bl	8007630 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008546:	2300      	movs	r3, #0
 8008548:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800854a:	2300      	movs	r3, #0
 800854c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008556:	2300      	movs	r3, #0
 8008558:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800855a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800855e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008564:	2300      	movs	r3, #0
 8008566:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008568:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800856c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008572:	2300      	movs	r3, #0
 8008574:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008576:	1d3b      	adds	r3, r7, #4
 8008578:	4619      	mov	r1, r3
 800857a:	4807      	ldr	r0, [pc, #28]	@ (8008598 <MX_TIM1_Init+0x148>)
 800857c:	f00e ffd4 	bl	8017528 <HAL_TIMEx_ConfigBreakDeadTime>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8008586:	f7ff f853 	bl	8007630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800858a:	4803      	ldr	r0, [pc, #12]	@ (8008598 <MX_TIM1_Init+0x148>)
 800858c:	f000 f9da 	bl	8008944 <HAL_TIM_MspPostInit>

}
 8008590:	bf00      	nop
 8008592:	3760      	adds	r7, #96	@ 0x60
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	24000380 	.word	0x24000380
 800859c:	40010000 	.word	0x40010000

080085a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085a6:	f107 0314 	add.w	r3, r7, #20
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	605a      	str	r2, [r3, #4]
 80085b0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80085b2:	1d3b      	adds	r3, r7, #4
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	605a      	str	r2, [r3, #4]
 80085ba:	609a      	str	r2, [r3, #8]
 80085bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80085be:	4b21      	ldr	r3, [pc, #132]	@ (8008644 <MX_TIM2_Init+0xa4>)
 80085c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80085c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 80085c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008644 <MX_TIM2_Init+0xa4>)
 80085c8:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80085cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008644 <MX_TIM2_Init+0xa4>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80085d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008644 <MX_TIM2_Init+0xa4>)
 80085d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80085da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085dc:	4b19      	ldr	r3, [pc, #100]	@ (8008644 <MX_TIM2_Init+0xa4>)
 80085de:	2200      	movs	r2, #0
 80085e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80085e2:	4b18      	ldr	r3, [pc, #96]	@ (8008644 <MX_TIM2_Init+0xa4>)
 80085e4:	2280      	movs	r2, #128	@ 0x80
 80085e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80085e8:	4816      	ldr	r0, [pc, #88]	@ (8008644 <MX_TIM2_Init+0xa4>)
 80085ea:	f00d fd51 	bl	8016090 <HAL_TIM_IC_Init>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80085f4:	f7ff f81c 	bl	8007630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085fc:	2300      	movs	r3, #0
 80085fe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008600:	f107 0314 	add.w	r3, r7, #20
 8008604:	4619      	mov	r1, r3
 8008606:	480f      	ldr	r0, [pc, #60]	@ (8008644 <MX_TIM2_Init+0xa4>)
 8008608:	f00e fef2 	bl	80173f0 <HAL_TIMEx_MasterConfigSynchronization>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008612:	f7ff f80d 	bl	8007630 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008616:	2300      	movs	r3, #0
 8008618:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800861a:	2301      	movs	r3, #1
 800861c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008626:	1d3b      	adds	r3, r7, #4
 8008628:	2200      	movs	r2, #0
 800862a:	4619      	mov	r1, r3
 800862c:	4805      	ldr	r0, [pc, #20]	@ (8008644 <MX_TIM2_Init+0xa4>)
 800862e:	f00d fe8d 	bl	801634c <HAL_TIM_IC_ConfigChannel>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008638:	f7fe fffa 	bl	8007630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800863c:	bf00      	nop
 800863e:	3720      	adds	r7, #32
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	240003cc 	.word	0x240003cc

08008648 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08a      	sub	sp, #40	@ 0x28
 800864c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800864e:	f107 031c 	add.w	r3, r7, #28
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
 8008656:	605a      	str	r2, [r3, #4]
 8008658:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800865a:	463b      	mov	r3, r7
 800865c:	2200      	movs	r2, #0
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	605a      	str	r2, [r3, #4]
 8008662:	609a      	str	r2, [r3, #8]
 8008664:	60da      	str	r2, [r3, #12]
 8008666:	611a      	str	r2, [r3, #16]
 8008668:	615a      	str	r2, [r3, #20]
 800866a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800866c:	4b32      	ldr	r3, [pc, #200]	@ (8008738 <MX_TIM3_Init+0xf0>)
 800866e:	4a33      	ldr	r2, [pc, #204]	@ (800873c <MX_TIM3_Init+0xf4>)
 8008670:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28;
 8008672:	4b31      	ldr	r3, [pc, #196]	@ (8008738 <MX_TIM3_Init+0xf0>)
 8008674:	221c      	movs	r2, #28
 8008676:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008678:	4b2f      	ldr	r3, [pc, #188]	@ (8008738 <MX_TIM3_Init+0xf0>)
 800867a:	2200      	movs	r2, #0
 800867c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800867e:	4b2e      	ldr	r3, [pc, #184]	@ (8008738 <MX_TIM3_Init+0xf0>)
 8008680:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8008684:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008686:	4b2c      	ldr	r3, [pc, #176]	@ (8008738 <MX_TIM3_Init+0xf0>)
 8008688:	2200      	movs	r2, #0
 800868a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800868c:	4b2a      	ldr	r3, [pc, #168]	@ (8008738 <MX_TIM3_Init+0xf0>)
 800868e:	2200      	movs	r2, #0
 8008690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008692:	4829      	ldr	r0, [pc, #164]	@ (8008738 <MX_TIM3_Init+0xf0>)
 8008694:	f00d fb88 	bl	8015da8 <HAL_TIM_PWM_Init>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800869e:	f7fe ffc7 	bl	8007630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086a2:	2300      	movs	r3, #0
 80086a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086a6:	2300      	movs	r3, #0
 80086a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80086aa:	f107 031c 	add.w	r3, r7, #28
 80086ae:	4619      	mov	r1, r3
 80086b0:	4821      	ldr	r0, [pc, #132]	@ (8008738 <MX_TIM3_Init+0xf0>)
 80086b2:	f00e fe9d 	bl	80173f0 <HAL_TIMEx_MasterConfigSynchronization>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80086bc:	f7fe ffb8 	bl	8007630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80086c0:	2360      	movs	r3, #96	@ 0x60
 80086c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80086c8:	2300      	movs	r3, #0
 80086ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80086d0:	463b      	mov	r3, r7
 80086d2:	2200      	movs	r2, #0
 80086d4:	4619      	mov	r1, r3
 80086d6:	4818      	ldr	r0, [pc, #96]	@ (8008738 <MX_TIM3_Init+0xf0>)
 80086d8:	f00d fed4 	bl	8016484 <HAL_TIM_PWM_ConfigChannel>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80086e2:	f7fe ffa5 	bl	8007630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80086e6:	463b      	mov	r3, r7
 80086e8:	2204      	movs	r2, #4
 80086ea:	4619      	mov	r1, r3
 80086ec:	4812      	ldr	r0, [pc, #72]	@ (8008738 <MX_TIM3_Init+0xf0>)
 80086ee:	f00d fec9 	bl	8016484 <HAL_TIM_PWM_ConfigChannel>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80086f8:	f7fe ff9a 	bl	8007630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80086fc:	463b      	mov	r3, r7
 80086fe:	2208      	movs	r2, #8
 8008700:	4619      	mov	r1, r3
 8008702:	480d      	ldr	r0, [pc, #52]	@ (8008738 <MX_TIM3_Init+0xf0>)
 8008704:	f00d febe 	bl	8016484 <HAL_TIM_PWM_ConfigChannel>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800870e:	f7fe ff8f 	bl	8007630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008712:	463b      	mov	r3, r7
 8008714:	220c      	movs	r2, #12
 8008716:	4619      	mov	r1, r3
 8008718:	4807      	ldr	r0, [pc, #28]	@ (8008738 <MX_TIM3_Init+0xf0>)
 800871a:	f00d feb3 	bl	8016484 <HAL_TIM_PWM_ConfigChannel>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8008724:	f7fe ff84 	bl	8007630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008728:	4803      	ldr	r0, [pc, #12]	@ (8008738 <MX_TIM3_Init+0xf0>)
 800872a:	f000 f90b 	bl	8008944 <HAL_TIM_MspPostInit>

}
 800872e:	bf00      	nop
 8008730:	3728      	adds	r7, #40	@ 0x28
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	24000418 	.word	0x24000418
 800873c:	40000400 	.word	0x40000400

08008740 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008746:	f107 0310 	add.w	r3, r7, #16
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	605a      	str	r2, [r3, #4]
 8008750:	609a      	str	r2, [r3, #8]
 8008752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008754:	1d3b      	adds	r3, r7, #4
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	605a      	str	r2, [r3, #4]
 800875c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800875e:	4b21      	ldr	r3, [pc, #132]	@ (80087e4 <MX_TIM8_Init+0xa4>)
 8008760:	4a21      	ldr	r2, [pc, #132]	@ (80087e8 <MX_TIM8_Init+0xa8>)
 8008762:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 5549;
 8008764:	4b1f      	ldr	r3, [pc, #124]	@ (80087e4 <MX_TIM8_Init+0xa4>)
 8008766:	f241 52ad 	movw	r2, #5549	@ 0x15ad
 800876a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800876c:	4b1d      	ldr	r3, [pc, #116]	@ (80087e4 <MX_TIM8_Init+0xa4>)
 800876e:	2200      	movs	r2, #0
 8008770:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8008772:	4b1c      	ldr	r3, [pc, #112]	@ (80087e4 <MX_TIM8_Init+0xa4>)
 8008774:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008778:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800877a:	4b1a      	ldr	r3, [pc, #104]	@ (80087e4 <MX_TIM8_Init+0xa4>)
 800877c:	2200      	movs	r2, #0
 800877e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008780:	4b18      	ldr	r3, [pc, #96]	@ (80087e4 <MX_TIM8_Init+0xa4>)
 8008782:	2200      	movs	r2, #0
 8008784:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008786:	4b17      	ldr	r3, [pc, #92]	@ (80087e4 <MX_TIM8_Init+0xa4>)
 8008788:	2200      	movs	r2, #0
 800878a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800878c:	4815      	ldr	r0, [pc, #84]	@ (80087e4 <MX_TIM8_Init+0xa4>)
 800878e:	f00d f9b0 	bl	8015af2 <HAL_TIM_Base_Init>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8008798:	f7fe ff4a 	bl	8007630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800879c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80087a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80087a2:	f107 0310 	add.w	r3, r7, #16
 80087a6:	4619      	mov	r1, r3
 80087a8:	480e      	ldr	r0, [pc, #56]	@ (80087e4 <MX_TIM8_Init+0xa4>)
 80087aa:	f00d ff7f 	bl	80166ac <HAL_TIM_ConfigClockSource>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80087b4:	f7fe ff3c 	bl	8007630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80087b8:	2320      	movs	r3, #32
 80087ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80087bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80087c0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80087c6:	1d3b      	adds	r3, r7, #4
 80087c8:	4619      	mov	r1, r3
 80087ca:	4806      	ldr	r0, [pc, #24]	@ (80087e4 <MX_TIM8_Init+0xa4>)
 80087cc:	f00e fe10 	bl	80173f0 <HAL_TIMEx_MasterConfigSynchronization>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80087d6:	f7fe ff2b 	bl	8007630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80087da:	bf00      	nop
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	24000464 	.word	0x24000464
 80087e8:	40010400 	.word	0x40010400

080087ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a16      	ldr	r2, [pc, #88]	@ (8008854 <HAL_TIM_PWM_MspInit+0x68>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d10f      	bne.n	800881e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80087fe:	4b16      	ldr	r3, [pc, #88]	@ (8008858 <HAL_TIM_PWM_MspInit+0x6c>)
 8008800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008804:	4a14      	ldr	r2, [pc, #80]	@ (8008858 <HAL_TIM_PWM_MspInit+0x6c>)
 8008806:	f043 0301 	orr.w	r3, r3, #1
 800880a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800880e:	4b12      	ldr	r3, [pc, #72]	@ (8008858 <HAL_TIM_PWM_MspInit+0x6c>)
 8008810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800881c:	e013      	b.n	8008846 <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM3)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a0e      	ldr	r2, [pc, #56]	@ (800885c <HAL_TIM_PWM_MspInit+0x70>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d10e      	bne.n	8008846 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008828:	4b0b      	ldr	r3, [pc, #44]	@ (8008858 <HAL_TIM_PWM_MspInit+0x6c>)
 800882a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800882e:	4a0a      	ldr	r2, [pc, #40]	@ (8008858 <HAL_TIM_PWM_MspInit+0x6c>)
 8008830:	f043 0302 	orr.w	r3, r3, #2
 8008834:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008838:	4b07      	ldr	r3, [pc, #28]	@ (8008858 <HAL_TIM_PWM_MspInit+0x6c>)
 800883a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	60bb      	str	r3, [r7, #8]
 8008844:	68bb      	ldr	r3, [r7, #8]
}
 8008846:	bf00      	nop
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40010000 	.word	0x40010000
 8008858:	58024400 	.word	0x58024400
 800885c:	40000400 	.word	0x40000400

08008860 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b08a      	sub	sp, #40	@ 0x28
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008868:	f107 0314 	add.w	r3, r7, #20
 800886c:	2200      	movs	r2, #0
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	605a      	str	r2, [r3, #4]
 8008872:	609a      	str	r2, [r3, #8]
 8008874:	60da      	str	r2, [r3, #12]
 8008876:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008880:	d135      	bne.n	80088ee <HAL_TIM_IC_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008882:	4b1d      	ldr	r3, [pc, #116]	@ (80088f8 <HAL_TIM_IC_MspInit+0x98>)
 8008884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008888:	4a1b      	ldr	r2, [pc, #108]	@ (80088f8 <HAL_TIM_IC_MspInit+0x98>)
 800888a:	f043 0301 	orr.w	r3, r3, #1
 800888e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008892:	4b19      	ldr	r3, [pc, #100]	@ (80088f8 <HAL_TIM_IC_MspInit+0x98>)
 8008894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	613b      	str	r3, [r7, #16]
 800889e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088a0:	4b15      	ldr	r3, [pc, #84]	@ (80088f8 <HAL_TIM_IC_MspInit+0x98>)
 80088a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088a6:	4a14      	ldr	r2, [pc, #80]	@ (80088f8 <HAL_TIM_IC_MspInit+0x98>)
 80088a8:	f043 0301 	orr.w	r3, r3, #1
 80088ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80088b0:	4b11      	ldr	r3, [pc, #68]	@ (80088f8 <HAL_TIM_IC_MspInit+0x98>)
 80088b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80088be:	2301      	movs	r3, #1
 80088c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088c2:	2302      	movs	r3, #2
 80088c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ca:	2300      	movs	r3, #0
 80088cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80088ce:	2301      	movs	r3, #1
 80088d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088d2:	f107 0314 	add.w	r3, r7, #20
 80088d6:	4619      	mov	r1, r3
 80088d8:	4808      	ldr	r0, [pc, #32]	@ (80088fc <HAL_TIM_IC_MspInit+0x9c>)
 80088da:	f005 f9b1 	bl	800dc40 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80088de:	2200      	movs	r2, #0
 80088e0:	2101      	movs	r1, #1
 80088e2:	201c      	movs	r0, #28
 80088e4:	f002 faad 	bl	800ae42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80088e8:	201c      	movs	r0, #28
 80088ea:	f002 fac4 	bl	800ae76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80088ee:	bf00      	nop
 80088f0:	3728      	adds	r7, #40	@ 0x28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	58024400 	.word	0x58024400
 80088fc:	58020000 	.word	0x58020000

08008900 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a0b      	ldr	r2, [pc, #44]	@ (800893c <HAL_TIM_Base_MspInit+0x3c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d10e      	bne.n	8008930 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008912:	4b0b      	ldr	r3, [pc, #44]	@ (8008940 <HAL_TIM_Base_MspInit+0x40>)
 8008914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008918:	4a09      	ldr	r2, [pc, #36]	@ (8008940 <HAL_TIM_Base_MspInit+0x40>)
 800891a:	f043 0302 	orr.w	r3, r3, #2
 800891e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008922:	4b07      	ldr	r3, [pc, #28]	@ (8008940 <HAL_TIM_Base_MspInit+0x40>)
 8008924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008928:	f003 0302 	and.w	r3, r3, #2
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8008930:	bf00      	nop
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	40010400 	.word	0x40010400
 8008940:	58024400 	.word	0x58024400

08008944 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	@ 0x28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800894c:	f107 0314 	add.w	r3, r7, #20
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	605a      	str	r2, [r3, #4]
 8008956:	609a      	str	r2, [r3, #8]
 8008958:	60da      	str	r2, [r3, #12]
 800895a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a26      	ldr	r2, [pc, #152]	@ (80089fc <HAL_TIM_MspPostInit+0xb8>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d120      	bne.n	80089a8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008966:	4b26      	ldr	r3, [pc, #152]	@ (8008a00 <HAL_TIM_MspPostInit+0xbc>)
 8008968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800896c:	4a24      	ldr	r2, [pc, #144]	@ (8008a00 <HAL_TIM_MspPostInit+0xbc>)
 800896e:	f043 0310 	orr.w	r3, r3, #16
 8008972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008976:	4b22      	ldr	r3, [pc, #136]	@ (8008a00 <HAL_TIM_MspPostInit+0xbc>)
 8008978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800897c:	f003 0310 	and.w	r3, r3, #16
 8008980:	613b      	str	r3, [r7, #16]
 8008982:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8008984:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8008988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800898a:	2302      	movs	r3, #2
 800898c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800898e:	2300      	movs	r3, #0
 8008990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008992:	2300      	movs	r3, #0
 8008994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008996:	2301      	movs	r3, #1
 8008998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800899a:	f107 0314 	add.w	r3, r7, #20
 800899e:	4619      	mov	r1, r3
 80089a0:	4818      	ldr	r0, [pc, #96]	@ (8008a04 <HAL_TIM_MspPostInit+0xc0>)
 80089a2:	f005 f94d 	bl	800dc40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80089a6:	e024      	b.n	80089f2 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM3)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a16      	ldr	r2, [pc, #88]	@ (8008a08 <HAL_TIM_MspPostInit+0xc4>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d11f      	bne.n	80089f2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80089b2:	4b13      	ldr	r3, [pc, #76]	@ (8008a00 <HAL_TIM_MspPostInit+0xbc>)
 80089b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089b8:	4a11      	ldr	r2, [pc, #68]	@ (8008a00 <HAL_TIM_MspPostInit+0xbc>)
 80089ba:	f043 0304 	orr.w	r3, r3, #4
 80089be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80089c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008a00 <HAL_TIM_MspPostInit+0xbc>)
 80089c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80089d0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80089d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089d6:	2302      	movs	r3, #2
 80089d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089de:	2300      	movs	r3, #0
 80089e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80089e2:	2302      	movs	r3, #2
 80089e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089e6:	f107 0314 	add.w	r3, r7, #20
 80089ea:	4619      	mov	r1, r3
 80089ec:	4807      	ldr	r0, [pc, #28]	@ (8008a0c <HAL_TIM_MspPostInit+0xc8>)
 80089ee:	f005 f927 	bl	800dc40 <HAL_GPIO_Init>
}
 80089f2:	bf00      	nop
 80089f4:	3728      	adds	r7, #40	@ 0x28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	40010000 	.word	0x40010000
 8008a00:	58024400 	.word	0x58024400
 8008a04:	58021000 	.word	0x58021000
 8008a08:	40000400 	.word	0x40000400
 8008a0c:	58020800 	.word	0x58020800

08008a10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008a14:	4b22      	ldr	r3, [pc, #136]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a16:	4a23      	ldr	r2, [pc, #140]	@ (8008aa4 <MX_USART1_UART_Init+0x94>)
 8008a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008a1a:	4b21      	ldr	r3, [pc, #132]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a22:	4b1f      	ldr	r3, [pc, #124]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008a28:	4b1d      	ldr	r3, [pc, #116]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008a34:	4b1a      	ldr	r3, [pc, #104]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a36:	220c      	movs	r2, #12
 8008a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a3a:	4b19      	ldr	r3, [pc, #100]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a40:	4b17      	ldr	r3, [pc, #92]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008a46:	4b16      	ldr	r3, [pc, #88]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008a4c:	4b14      	ldr	r3, [pc, #80]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008a52:	4b13      	ldr	r3, [pc, #76]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008a58:	4811      	ldr	r0, [pc, #68]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a5a:	f00e fe0f 	bl	801767c <HAL_UART_Init>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008a64:	f7fe fde4 	bl	8007630 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008a68:	2100      	movs	r1, #0
 8008a6a:	480d      	ldr	r0, [pc, #52]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a6c:	f011 fca3 	bl	801a3b6 <HAL_UARTEx_SetTxFifoThreshold>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008a76:	f7fe fddb 	bl	8007630 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4808      	ldr	r0, [pc, #32]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a7e:	f011 fcd8 	bl	801a432 <HAL_UARTEx_SetRxFifoThreshold>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008a88:	f7fe fdd2 	bl	8007630 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008a8c:	4804      	ldr	r0, [pc, #16]	@ (8008aa0 <MX_USART1_UART_Init+0x90>)
 8008a8e:	f011 fc59 	bl	801a344 <HAL_UARTEx_DisableFifoMode>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008a98:	f7fe fdca 	bl	8007630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008a9c:	bf00      	nop
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	240004b0 	.word	0x240004b0
 8008aa4:	40011000 	.word	0x40011000

08008aa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b0b8      	sub	sp, #224	@ 0xe0
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ab0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	605a      	str	r2, [r3, #4]
 8008aba:	609a      	str	r2, [r3, #8]
 8008abc:	60da      	str	r2, [r3, #12]
 8008abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ac0:	f107 0310 	add.w	r3, r7, #16
 8008ac4:	22b8      	movs	r2, #184	@ 0xb8
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f014 fef3 	bl	801d8b4 <memset>
  if(uartHandle->Instance==USART1)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8008b80 <HAL_UART_MspInit+0xd8>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d14e      	bne.n	8008b76 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008ad8:	f04f 0201 	mov.w	r2, #1
 8008adc:	f04f 0300 	mov.w	r3, #0
 8008ae0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008aea:	f107 0310 	add.w	r3, r7, #16
 8008aee:	4618      	mov	r0, r3
 8008af0:	f008 feb8 	bl	8011864 <HAL_RCCEx_PeriphCLKConfig>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8008afa:	f7fe fd99 	bl	8007630 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008afe:	4b21      	ldr	r3, [pc, #132]	@ (8008b84 <HAL_UART_MspInit+0xdc>)
 8008b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b04:	4a1f      	ldr	r2, [pc, #124]	@ (8008b84 <HAL_UART_MspInit+0xdc>)
 8008b06:	f043 0310 	orr.w	r3, r3, #16
 8008b0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8008b84 <HAL_UART_MspInit+0xdc>)
 8008b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b14:	f003 0310 	and.w	r3, r3, #16
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b1c:	4b19      	ldr	r3, [pc, #100]	@ (8008b84 <HAL_UART_MspInit+0xdc>)
 8008b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b22:	4a18      	ldr	r2, [pc, #96]	@ (8008b84 <HAL_UART_MspInit+0xdc>)
 8008b24:	f043 0301 	orr.w	r3, r3, #1
 8008b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008b2c:	4b15      	ldr	r3, [pc, #84]	@ (8008b84 <HAL_UART_MspInit+0xdc>)
 8008b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	60bb      	str	r3, [r7, #8]
 8008b38:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008b3a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8008b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b42:	2302      	movs	r3, #2
 8008b44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008b54:	2307      	movs	r3, #7
 8008b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b5a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4809      	ldr	r0, [pc, #36]	@ (8008b88 <HAL_UART_MspInit+0xe0>)
 8008b62:	f005 f86d 	bl	800dc40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008b66:	2200      	movs	r2, #0
 8008b68:	2100      	movs	r1, #0
 8008b6a:	2025      	movs	r0, #37	@ 0x25
 8008b6c:	f002 f969 	bl	800ae42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008b70:	2025      	movs	r0, #37	@ 0x25
 8008b72:	f002 f980 	bl	800ae76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008b76:	bf00      	nop
 8008b78:	37e0      	adds	r7, #224	@ 0xe0
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	40011000 	.word	0x40011000
 8008b84:	58024400 	.word	0x58024400
 8008b88:	58020000 	.word	0x58020000

08008b8c <Reset_Handler>:
 8008b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008bc4 <LoopFillZerobss+0xe>
 8008b90:	f7ff fbe6 	bl	8008360 <SystemInit>
 8008b94:	480c      	ldr	r0, [pc, #48]	@ (8008bc8 <LoopFillZerobss+0x12>)
 8008b96:	490d      	ldr	r1, [pc, #52]	@ (8008bcc <LoopFillZerobss+0x16>)
 8008b98:	4a0d      	ldr	r2, [pc, #52]	@ (8008bd0 <LoopFillZerobss+0x1a>)
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e002      	b.n	8008ba4 <LoopCopyDataInit>

08008b9e <CopyDataInit>:
 8008b9e:	58d4      	ldr	r4, [r2, r3]
 8008ba0:	50c4      	str	r4, [r0, r3]
 8008ba2:	3304      	adds	r3, #4

08008ba4 <LoopCopyDataInit>:
 8008ba4:	18c4      	adds	r4, r0, r3
 8008ba6:	428c      	cmp	r4, r1
 8008ba8:	d3f9      	bcc.n	8008b9e <CopyDataInit>
 8008baa:	4a0a      	ldr	r2, [pc, #40]	@ (8008bd4 <LoopFillZerobss+0x1e>)
 8008bac:	4c0a      	ldr	r4, [pc, #40]	@ (8008bd8 <LoopFillZerobss+0x22>)
 8008bae:	2300      	movs	r3, #0
 8008bb0:	e001      	b.n	8008bb6 <LoopFillZerobss>

08008bb2 <FillZerobss>:
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	3204      	adds	r2, #4

08008bb6 <LoopFillZerobss>:
 8008bb6:	42a2      	cmp	r2, r4
 8008bb8:	d3fb      	bcc.n	8008bb2 <FillZerobss>
 8008bba:	f014 fe89 	bl	801d8d0 <__libc_init_array>
 8008bbe:	f7fc f8e7 	bl	8004d90 <main>
 8008bc2:	4770      	bx	lr
 8008bc4:	24050000 	.word	0x24050000
 8008bc8:	24000000 	.word	0x24000000
 8008bcc:	24000078 	.word	0x24000078
 8008bd0:	08020138 	.word	0x08020138
 8008bd4:	24000078 	.word	0x24000078
 8008bd8:	240008ac 	.word	0x240008ac

08008bdc <ADC3_IRQHandler>:
 8008bdc:	e7fe      	b.n	8008bdc <ADC3_IRQHandler>
	...

08008be0 <HAL_Init>:
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	2003      	movs	r0, #3
 8008be8:	f002 f920 	bl	800ae2c <HAL_NVIC_SetPriorityGrouping>
 8008bec:	f008 fc64 	bl	80114b8 <HAL_RCC_GetSysClockFreq>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	4b15      	ldr	r3, [pc, #84]	@ (8008c48 <HAL_Init+0x68>)
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	0a1b      	lsrs	r3, r3, #8
 8008bf8:	f003 030f 	and.w	r3, r3, #15
 8008bfc:	4913      	ldr	r1, [pc, #76]	@ (8008c4c <HAL_Init+0x6c>)
 8008bfe:	5ccb      	ldrb	r3, [r1, r3]
 8008c00:	f003 031f 	and.w	r3, r3, #31
 8008c04:	fa22 f303 	lsr.w	r3, r2, r3
 8008c08:	607b      	str	r3, [r7, #4]
 8008c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c48 <HAL_Init+0x68>)
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	f003 030f 	and.w	r3, r3, #15
 8008c12:	4a0e      	ldr	r2, [pc, #56]	@ (8008c4c <HAL_Init+0x6c>)
 8008c14:	5cd3      	ldrb	r3, [r2, r3]
 8008c16:	f003 031f 	and.w	r3, r3, #31
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c20:	4a0b      	ldr	r2, [pc, #44]	@ (8008c50 <HAL_Init+0x70>)
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	4a0b      	ldr	r2, [pc, #44]	@ (8008c54 <HAL_Init+0x74>)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	200f      	movs	r0, #15
 8008c2c:	f000 f814 	bl	8008c58 <HAL_InitTick>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <HAL_Init+0x5a>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e002      	b.n	8008c40 <HAL_Init+0x60>
 8008c3a:	f7fe febb 	bl	80079b4 <HAL_MspInit>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	58024400 	.word	0x58024400
 8008c4c:	0801e37c 	.word	0x0801e37c
 8008c50:	24000008 	.word	0x24000008
 8008c54:	24000004 	.word	0x24000004

08008c58 <HAL_InitTick>:
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	4b15      	ldr	r3, [pc, #84]	@ (8008cb8 <HAL_InitTick+0x60>)
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <HAL_InitTick+0x14>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e021      	b.n	8008cb0 <HAL_InitTick+0x58>
 8008c6c:	4b13      	ldr	r3, [pc, #76]	@ (8008cbc <HAL_InitTick+0x64>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	4b11      	ldr	r3, [pc, #68]	@ (8008cb8 <HAL_InitTick+0x60>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	4619      	mov	r1, r3
 8008c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c82:	4618      	mov	r0, r3
 8008c84:	f002 f905 	bl	800ae92 <HAL_SYSTICK_Config>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <HAL_InitTick+0x3a>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e00e      	b.n	8008cb0 <HAL_InitTick+0x58>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b0f      	cmp	r3, #15
 8008c96:	d80a      	bhi.n	8008cae <HAL_InitTick+0x56>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca0:	f002 f8cf 	bl	800ae42 <HAL_NVIC_SetPriority>
 8008ca4:	4a06      	ldr	r2, [pc, #24]	@ (8008cc0 <HAL_InitTick+0x68>)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	2300      	movs	r3, #0
 8008cac:	e000      	b.n	8008cb0 <HAL_InitTick+0x58>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	24000010 	.word	0x24000010
 8008cbc:	24000004 	.word	0x24000004
 8008cc0:	2400000c 	.word	0x2400000c

08008cc4 <HAL_IncTick>:
 8008cc4:	b480      	push	{r7}
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	4b06      	ldr	r3, [pc, #24]	@ (8008ce4 <HAL_IncTick+0x20>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	4b06      	ldr	r3, [pc, #24]	@ (8008ce8 <HAL_IncTick+0x24>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	4a04      	ldr	r2, [pc, #16]	@ (8008ce8 <HAL_IncTick+0x24>)
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	bf00      	nop
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	24000010 	.word	0x24000010
 8008ce8:	24000544 	.word	0x24000544

08008cec <HAL_GetTick>:
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	4b03      	ldr	r3, [pc, #12]	@ (8008d00 <HAL_GetTick+0x14>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	24000544 	.word	0x24000544

08008d04 <HAL_Delay>:
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	f7ff ffee 	bl	8008cec <HAL_GetTick>
 8008d10:	60b8      	str	r0, [r7, #8]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1c:	d005      	beq.n	8008d2a <HAL_Delay+0x26>
 8008d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d48 <HAL_Delay+0x44>)
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4413      	add	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]
 8008d2a:	bf00      	nop
 8008d2c:	f7ff ffde 	bl	8008cec <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d8f7      	bhi.n	8008d2c <HAL_Delay+0x28>
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	24000010 	.word	0x24000010

08008d4c <LL_ADC_SetCommonClock>:
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	431a      	orrs	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	609a      	str	r2, [r3, #8]
 8008d66:	bf00      	nop
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <LL_ADC_SetCommonPathInternalCh>:
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	431a      	orrs	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	609a      	str	r2, [r3, #8]
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <LL_ADC_GetCommonPathInternalCh>:
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <LL_ADC_SetOffset>:
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3360      	adds	r3, #96	@ 0x60
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4a10      	ldr	r2, [pc, #64]	@ (8008e14 <LL_ADC_SetOffset+0x60>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d10b      	bne.n	8008df0 <LL_ADC_SetOffset+0x3c>
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	e00b      	b.n	8008e08 <LL_ADC_SetOffset+0x54>
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	430b      	orrs	r3, r1
 8008e02:	431a      	orrs	r2, r3
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	bf00      	nop
 8008e0a:	371c      	adds	r7, #28
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	58026000 	.word	0x58026000

08008e18 <LL_ADC_GetOffsetChannel>:
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3360      	adds	r3, #96	@ 0x60
 8008e26:	461a      	mov	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <LL_ADC_SetDataRightShift>:
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f003 031f 	and.w	r3, r3, #31
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	fa01 f303 	lsl.w	r3, r1, r3
 8008e64:	431a      	orrs	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	611a      	str	r2, [r3, #16]
 8008e6a:	bf00      	nop
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
	...

08008e78 <LL_ADC_SetOffsetSignedSaturation>:
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4a0c      	ldr	r2, [pc, #48]	@ (8008eb8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00e      	beq.n	8008eaa <LL_ADC_SetOffsetSignedSaturation+0x32>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3360      	adds	r3, #96	@ 0x60
 8008e90:	461a      	mov	r2, r3
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	617b      	str	r3, [r7, #20]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	bf00      	nop
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	58026000 	.word	0x58026000

08008ebc <LL_ADC_SetOffsetSaturation>:
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4a0c      	ldr	r2, [pc, #48]	@ (8008efc <LL_ADC_SetOffsetSaturation+0x40>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d10e      	bne.n	8008eee <LL_ADC_SetOffsetSaturation+0x32>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	3360      	adds	r3, #96	@ 0x60
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	58026000 	.word	0x58026000

08008f00 <LL_ADC_SetOffsetSign>:
 8008f00:	b480      	push	{r7}
 8008f02:	b087      	sub	sp, #28
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8008f40 <LL_ADC_SetOffsetSign+0x40>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d10e      	bne.n	8008f32 <LL_ADC_SetOffsetSign+0x32>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3360      	adds	r3, #96	@ 0x60
 8008f18:	461a      	mov	r2, r3
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	bf00      	nop
 8008f34:	371c      	adds	r7, #28
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	58026000 	.word	0x58026000

08008f44 <LL_ADC_SetOffsetState>:
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3360      	adds	r3, #96	@ 0x60
 8008f54:	461a      	mov	r2, r3
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4a0c      	ldr	r2, [pc, #48]	@ (8008f94 <LL_ADC_SetOffsetState+0x50>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d108      	bne.n	8008f78 <LL_ADC_SetOffsetState+0x34>
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	431a      	orrs	r2, r3
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	e007      	b.n	8008f88 <LL_ADC_SetOffsetState+0x44>
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	431a      	orrs	r2, r3
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	bf00      	nop
 8008f8a:	371c      	adds	r7, #28
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	58026000 	.word	0x58026000

08008f98 <LL_ADC_REG_IsTriggerSourceSWStart>:
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <LL_ADC_REG_SetSequencerRanks>:
 8008fbe:	b480      	push	{r7}
 8008fc0:	b087      	sub	sp, #28
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3330      	adds	r3, #48	@ 0x30
 8008fce:	461a      	mov	r2, r3
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	0a1b      	lsrs	r3, r3, #8
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	f003 030c 	and.w	r3, r3, #12
 8008fda:	4413      	add	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f003 031f 	and.w	r3, r3, #31
 8008fe8:	211f      	movs	r1, #31
 8008fea:	fa01 f303 	lsl.w	r3, r1, r3
 8008fee:	43db      	mvns	r3, r3
 8008ff0:	401a      	ands	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	0e9b      	lsrs	r3, r3, #26
 8008ff6:	f003 011f 	and.w	r1, r3, #31
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f003 031f 	and.w	r3, r3, #31
 8009000:	fa01 f303 	lsl.w	r3, r1, r3
 8009004:	431a      	orrs	r2, r3
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	bf00      	nop
 800900c:	371c      	adds	r7, #28
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <LL_ADC_REG_SetDataTransferMode>:
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	f023 0203 	bic.w	r2, r3, #3
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	431a      	orrs	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	60da      	str	r2, [r3, #12]
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <LL_ADC_EnableDMAReq>:
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f043 0201 	orr.w	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60da      	str	r2, [r3, #12]
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <LL_ADC_REG_SetDMATransferMode>:
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a08      	ldr	r2, [pc, #32]	@ (800908c <LL_ADC_REG_SetDMATransferMode+0x30>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d107      	bne.n	800907e <LL_ADC_REG_SetDMATransferMode+0x22>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f023 0203 	bic.w	r2, r3, #3
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	60da      	str	r2, [r3, #12]
 800907e:	bf00      	nop
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	58026000 	.word	0x58026000

08009090 <LL_ADC_INJ_IsTriggerSourceSWStart>:
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800909c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80090a4:	2301      	movs	r3, #1
 80090a6:	e000      	b.n	80090aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80090a8:	2300      	movs	r3, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <LL_ADC_SetChannelSamplingTime>:
 80090b6:	b480      	push	{r7}
 80090b8:	b087      	sub	sp, #28
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3314      	adds	r3, #20
 80090c6:	461a      	mov	r2, r3
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	0e5b      	lsrs	r3, r3, #25
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	4413      	add	r3, r2
 80090d4:	617b      	str	r3, [r7, #20]
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	0d1b      	lsrs	r3, r3, #20
 80090de:	f003 031f 	and.w	r3, r3, #31
 80090e2:	2107      	movs	r1, #7
 80090e4:	fa01 f303 	lsl.w	r3, r1, r3
 80090e8:	43db      	mvns	r3, r3
 80090ea:	401a      	ands	r2, r3
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	0d1b      	lsrs	r3, r3, #20
 80090f0:	f003 031f 	and.w	r3, r3, #31
 80090f4:	6879      	ldr	r1, [r7, #4]
 80090f6:	fa01 f303 	lsl.w	r3, r1, r3
 80090fa:	431a      	orrs	r2, r3
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	bf00      	nop
 8009102:	371c      	adds	r7, #28
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <LL_ADC_SetChannelSingleDiff>:
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4a1a      	ldr	r2, [pc, #104]	@ (8009184 <LL_ADC_SetChannelSingleDiff+0x78>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d115      	bne.n	800914c <LL_ADC_SetChannelSingleDiff+0x40>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800912c:	43db      	mvns	r3, r3
 800912e:	401a      	ands	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f003 0318 	and.w	r3, r3, #24
 8009136:	4914      	ldr	r1, [pc, #80]	@ (8009188 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009138:	40d9      	lsrs	r1, r3
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	400b      	ands	r3, r1
 800913e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009142:	431a      	orrs	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800914a:	e014      	b.n	8009176 <LL_ADC_SetChannelSingleDiff+0x6a>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009158:	43db      	mvns	r3, r3
 800915a:	401a      	ands	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f003 0318 	and.w	r3, r3, #24
 8009162:	4909      	ldr	r1, [pc, #36]	@ (8009188 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8009164:	40d9      	lsrs	r1, r3
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	400b      	ands	r3, r1
 800916a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800916e:	431a      	orrs	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8009176:	bf00      	nop
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	58026000 	.word	0x58026000
 8009188:	000fffff 	.word	0x000fffff

0800918c <LL_ADC_GetMultimode>:
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f003 031f 	and.w	r3, r3, #31
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <LL_ADC_GetMultiDMATransfer>:
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <LL_ADC_DisableDeepPowerDown>:
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	4b04      	ldr	r3, [pc, #16]	@ (80091e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80091d2:	4013      	ands	r3, r2
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	6093      	str	r3, [r2, #8]
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	5fffffc0 	.word	0x5fffffc0

080091e8 <LL_ADC_IsDeepPowerDownEnabled>:
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091fc:	d101      	bne.n	8009202 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80091fe:	2301      	movs	r3, #1
 8009200:	e000      	b.n	8009204 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009202:	2300      	movs	r3, #0
 8009204:	4618      	mov	r0, r3
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <LL_ADC_EnableInternalRegulator>:
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689a      	ldr	r2, [r3, #8]
 800921c:	4b05      	ldr	r3, [pc, #20]	@ (8009234 <LL_ADC_EnableInternalRegulator+0x24>)
 800921e:	4013      	ands	r3, r2
 8009220:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	609a      	str	r2, [r3, #8]
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	6fffffc0 	.word	0x6fffffc0

08009238 <LL_ADC_IsInternalRegulatorEnabled>:
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009248:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800924c:	d101      	bne.n	8009252 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009252:	2300      	movs	r3, #0
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <LL_ADC_Enable>:
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689a      	ldr	r2, [r3, #8]
 800926c:	4b05      	ldr	r3, [pc, #20]	@ (8009284 <LL_ADC_Enable+0x24>)
 800926e:	4013      	ands	r3, r2
 8009270:	f043 0201 	orr.w	r2, r3, #1
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	609a      	str	r2, [r3, #8]
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	7fffffc0 	.word	0x7fffffc0

08009288 <LL_ADC_IsEnabled>:
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b01      	cmp	r3, #1
 800929a:	d101      	bne.n	80092a0 <LL_ADC_IsEnabled+0x18>
 800929c:	2301      	movs	r3, #1
 800929e:	e000      	b.n	80092a2 <LL_ADC_IsEnabled+0x1a>
 80092a0:	2300      	movs	r3, #0
 80092a2:	4618      	mov	r0, r3
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
	...

080092b0 <LL_ADC_REG_StartConversion>:
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	4b05      	ldr	r3, [pc, #20]	@ (80092d4 <LL_ADC_REG_StartConversion+0x24>)
 80092be:	4013      	ands	r3, r2
 80092c0:	f043 0204 	orr.w	r2, r3, #4
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	609a      	str	r2, [r3, #8]
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	7fffffc0 	.word	0x7fffffc0

080092d8 <LL_ADC_REG_IsConversionOngoing>:
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d101      	bne.n	80092f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80092ec:	2301      	movs	r3, #1
 80092ee:	e000      	b.n	80092f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80092f0:	2300      	movs	r3, #0
 80092f2:	4618      	mov	r0, r3
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <LL_ADC_INJ_IsConversionOngoing>:
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f003 0308 	and.w	r3, r3, #8
 800930e:	2b08      	cmp	r3, #8
 8009310:	d101      	bne.n	8009316 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009312:	2301      	movs	r3, #1
 8009314:	e000      	b.n	8009318 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009316:	2300      	movs	r3, #0
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_ADC_Init>:
 8009324:	b590      	push	{r4, r7, lr}
 8009326:	b089      	sub	sp, #36	@ 0x24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	2300      	movs	r3, #0
 800932e:	77fb      	strb	r3, [r7, #31]
 8009330:	2300      	movs	r3, #0
 8009332:	60bb      	str	r3, [r7, #8]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <HAL_ADC_Init+0x1a>
 800933a:	2301      	movs	r3, #1
 800933c:	e1ee      	b.n	800971c <HAL_ADC_Init+0x3f8>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009348:	2b00      	cmp	r3, #0
 800934a:	d109      	bne.n	8009360 <HAL_ADC_Init+0x3c>
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7fa f987 	bl	8003660 <HAL_ADC_MspInit>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	665a      	str	r2, [r3, #100]	@ 0x64
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff ff3f 	bl	80091e8 <LL_ADC_IsDeepPowerDownEnabled>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d004      	beq.n	800937a <HAL_ADC_Init+0x56>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff ff25 	bl	80091c4 <LL_ADC_DisableDeepPowerDown>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4618      	mov	r0, r3
 8009380:	f7ff ff5a 	bl	8009238 <LL_ADC_IsInternalRegulatorEnabled>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d114      	bne.n	80093b4 <HAL_ADC_Init+0x90>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff ff3e 	bl	8009210 <LL_ADC_EnableInternalRegulator>
 8009394:	4b8e      	ldr	r3, [pc, #568]	@ (80095d0 <HAL_ADC_Init+0x2ac>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	099b      	lsrs	r3, r3, #6
 800939a:	4a8e      	ldr	r2, [pc, #568]	@ (80095d4 <HAL_ADC_Init+0x2b0>)
 800939c:	fba2 2303 	umull	r2, r3, r2, r3
 80093a0:	099b      	lsrs	r3, r3, #6
 80093a2:	3301      	adds	r3, #1
 80093a4:	60bb      	str	r3, [r7, #8]
 80093a6:	e002      	b.n	80093ae <HAL_ADC_Init+0x8a>
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	60bb      	str	r3, [r7, #8]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1f9      	bne.n	80093a8 <HAL_ADC_Init+0x84>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7ff ff3d 	bl	8009238 <LL_ADC_IsInternalRegulatorEnabled>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10d      	bne.n	80093e0 <HAL_ADC_Init+0xbc>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093c8:	f043 0210 	orr.w	r2, r3, #16
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	661a      	str	r2, [r3, #96]	@ 0x60
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093d4:	f043 0201 	orr.w	r2, r3, #1
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	665a      	str	r2, [r3, #100]	@ 0x64
 80093dc:	2301      	movs	r3, #1
 80093de:	77fb      	strb	r3, [r7, #31]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7ff ff77 	bl	80092d8 <LL_ADC_REG_IsConversionOngoing>
 80093ea:	6178      	str	r0, [r7, #20]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f0:	f003 0310 	and.w	r3, r3, #16
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f040 8188 	bne.w	800970a <HAL_ADC_Init+0x3e6>
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f040 8184 	bne.w	800970a <HAL_ADC_Init+0x3e6>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009406:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800940a:	f043 0202 	orr.w	r2, r3, #2
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	661a      	str	r2, [r3, #96]	@ 0x60
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff ff36 	bl	8009288 <LL_ADC_IsEnabled>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d136      	bne.n	8009490 <HAL_ADC_Init+0x16c>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a6c      	ldr	r2, [pc, #432]	@ (80095d8 <HAL_ADC_Init+0x2b4>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d004      	beq.n	8009436 <HAL_ADC_Init+0x112>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a6a      	ldr	r2, [pc, #424]	@ (80095dc <HAL_ADC_Init+0x2b8>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d10e      	bne.n	8009454 <HAL_ADC_Init+0x130>
 8009436:	4868      	ldr	r0, [pc, #416]	@ (80095d8 <HAL_ADC_Init+0x2b4>)
 8009438:	f7ff ff26 	bl	8009288 <LL_ADC_IsEnabled>
 800943c:	4604      	mov	r4, r0
 800943e:	4867      	ldr	r0, [pc, #412]	@ (80095dc <HAL_ADC_Init+0x2b8>)
 8009440:	f7ff ff22 	bl	8009288 <LL_ADC_IsEnabled>
 8009444:	4603      	mov	r3, r0
 8009446:	4323      	orrs	r3, r4
 8009448:	2b00      	cmp	r3, #0
 800944a:	bf0c      	ite	eq
 800944c:	2301      	moveq	r3, #1
 800944e:	2300      	movne	r3, #0
 8009450:	b2db      	uxtb	r3, r3
 8009452:	e008      	b.n	8009466 <HAL_ADC_Init+0x142>
 8009454:	4862      	ldr	r0, [pc, #392]	@ (80095e0 <HAL_ADC_Init+0x2bc>)
 8009456:	f7ff ff17 	bl	8009288 <LL_ADC_IsEnabled>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	bf0c      	ite	eq
 8009460:	2301      	moveq	r3, #1
 8009462:	2300      	movne	r3, #0
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d012      	beq.n	8009490 <HAL_ADC_Init+0x16c>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a5a      	ldr	r2, [pc, #360]	@ (80095d8 <HAL_ADC_Init+0x2b4>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d004      	beq.n	800947e <HAL_ADC_Init+0x15a>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a58      	ldr	r2, [pc, #352]	@ (80095dc <HAL_ADC_Init+0x2b8>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d101      	bne.n	8009482 <HAL_ADC_Init+0x15e>
 800947e:	4a59      	ldr	r2, [pc, #356]	@ (80095e4 <HAL_ADC_Init+0x2c0>)
 8009480:	e000      	b.n	8009484 <HAL_ADC_Init+0x160>
 8009482:	4a59      	ldr	r2, [pc, #356]	@ (80095e8 <HAL_ADC_Init+0x2c4>)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	4619      	mov	r1, r3
 800948a:	4610      	mov	r0, r2
 800948c:	f7ff fc5e 	bl	8008d4c <LL_ADC_SetCommonClock>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a52      	ldr	r2, [pc, #328]	@ (80095e0 <HAL_ADC_Init+0x2bc>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d129      	bne.n	80094ee <HAL_ADC_Init+0x1ca>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	7e5b      	ldrb	r3, [r3, #25]
 800949e:	035a      	lsls	r2, r3, #13
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	431a      	orrs	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d013      	beq.n	80094dc <HAL_ADC_Init+0x1b8>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	2b0c      	cmp	r3, #12
 80094ba:	d00d      	beq.n	80094d8 <HAL_ADC_Init+0x1b4>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	2b1c      	cmp	r3, #28
 80094c2:	d007      	beq.n	80094d4 <HAL_ADC_Init+0x1b0>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	2b18      	cmp	r3, #24
 80094ca:	d101      	bne.n	80094d0 <HAL_ADC_Init+0x1ac>
 80094cc:	2318      	movs	r3, #24
 80094ce:	e006      	b.n	80094de <HAL_ADC_Init+0x1ba>
 80094d0:	2300      	movs	r3, #0
 80094d2:	e004      	b.n	80094de <HAL_ADC_Init+0x1ba>
 80094d4:	2310      	movs	r3, #16
 80094d6:	e002      	b.n	80094de <HAL_ADC_Init+0x1ba>
 80094d8:	2308      	movs	r3, #8
 80094da:	e000      	b.n	80094de <HAL_ADC_Init+0x1ba>
 80094dc:	2300      	movs	r3, #0
 80094de:	431a      	orrs	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094e6:	041b      	lsls	r3, r3, #16
 80094e8:	4313      	orrs	r3, r2
 80094ea:	61bb      	str	r3, [r7, #24]
 80094ec:	e00e      	b.n	800950c <HAL_ADC_Init+0x1e8>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	7e5b      	ldrb	r3, [r3, #25]
 80094f2:	035a      	lsls	r2, r3, #13
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094f8:	431a      	orrs	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	431a      	orrs	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009506:	041b      	lsls	r3, r3, #16
 8009508:	4313      	orrs	r3, r2
 800950a:	61bb      	str	r3, [r7, #24]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d106      	bne.n	8009524 <HAL_ADC_Init+0x200>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951a:	3b01      	subs	r3, #1
 800951c:	045b      	lsls	r3, r3, #17
 800951e:	69ba      	ldr	r2, [r7, #24]
 8009520:	4313      	orrs	r3, r2
 8009522:	61bb      	str	r3, [r7, #24]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009528:	2b00      	cmp	r3, #0
 800952a:	d009      	beq.n	8009540 <HAL_ADC_Init+0x21c>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009530:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009538:	4313      	orrs	r3, r2
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	4313      	orrs	r3, r2
 800953e:	61bb      	str	r3, [r7, #24]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a26      	ldr	r2, [pc, #152]	@ (80095e0 <HAL_ADC_Init+0x2bc>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d115      	bne.n	8009576 <HAL_ADC_Init+0x252>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68da      	ldr	r2, [r3, #12]
 8009550:	4b26      	ldr	r3, [pc, #152]	@ (80095ec <HAL_ADC_Init+0x2c8>)
 8009552:	4013      	ands	r3, r2
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	6812      	ldr	r2, [r2, #0]
 8009558:	69b9      	ldr	r1, [r7, #24]
 800955a:	430b      	orrs	r3, r1
 800955c:	60d3      	str	r3, [r2, #12]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	611a      	str	r2, [r3, #16]
 8009574:	e009      	b.n	800958a <HAL_ADC_Init+0x266>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	4b1c      	ldr	r3, [pc, #112]	@ (80095f0 <HAL_ADC_Init+0x2cc>)
 800957e:	4013      	ands	r3, r2
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	6812      	ldr	r2, [r2, #0]
 8009584:	69b9      	ldr	r1, [r7, #24]
 8009586:	430b      	orrs	r3, r1
 8009588:	60d3      	str	r3, [r2, #12]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f7ff fea2 	bl	80092d8 <LL_ADC_REG_IsConversionOngoing>
 8009594:	6138      	str	r0, [r7, #16]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff feaf 	bl	80092fe <LL_ADC_INJ_IsConversionOngoing>
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f040 808e 	bne.w	80096c6 <HAL_ADC_Init+0x3a2>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f040 808a 	bne.w	80096c6 <HAL_ADC_Init+0x3a2>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a0a      	ldr	r2, [pc, #40]	@ (80095e0 <HAL_ADC_Init+0x2bc>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d11b      	bne.n	80095f4 <HAL_ADC_Init+0x2d0>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	7e1b      	ldrb	r3, [r3, #24]
 80095c0:	039a      	lsls	r2, r3, #14
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	4313      	orrs	r3, r2
 80095cc:	61bb      	str	r3, [r7, #24]
 80095ce:	e018      	b.n	8009602 <HAL_ADC_Init+0x2de>
 80095d0:	24000004 	.word	0x24000004
 80095d4:	053e2d63 	.word	0x053e2d63
 80095d8:	40022000 	.word	0x40022000
 80095dc:	40022100 	.word	0x40022100
 80095e0:	58026000 	.word	0x58026000
 80095e4:	40022300 	.word	0x40022300
 80095e8:	58026300 	.word	0x58026300
 80095ec:	fff04007 	.word	0xfff04007
 80095f0:	fff0c003 	.word	0xfff0c003
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	7e1b      	ldrb	r3, [r3, #24]
 80095f8:	039a      	lsls	r2, r3, #14
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095fe:	4313      	orrs	r3, r2
 8009600:	61bb      	str	r3, [r7, #24]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	4b46      	ldr	r3, [pc, #280]	@ (8009724 <HAL_ADC_Init+0x400>)
 800960a:	4013      	ands	r3, r2
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	6812      	ldr	r2, [r2, #0]
 8009610:	69b9      	ldr	r1, [r7, #24]
 8009612:	430b      	orrs	r3, r1
 8009614:	60d3      	str	r3, [r2, #12]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800961c:	2b01      	cmp	r3, #1
 800961e:	d137      	bne.n	8009690 <HAL_ADC_Init+0x36c>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009624:	2b00      	cmp	r3, #0
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a3f      	ldr	r2, [pc, #252]	@ (8009728 <HAL_ADC_Init+0x404>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d116      	bne.n	800965e <HAL_ADC_Init+0x33a>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	691a      	ldr	r2, [r3, #16]
 8009636:	4b3d      	ldr	r3, [pc, #244]	@ (800972c <HAL_ADC_Init+0x408>)
 8009638:	4013      	ands	r3, r2
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009642:	4311      	orrs	r1, r2
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009648:	4311      	orrs	r1, r2
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800964e:	430a      	orrs	r2, r1
 8009650:	431a      	orrs	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0201 	orr.w	r2, r2, #1
 800965a:	611a      	str	r2, [r3, #16]
 800965c:	e020      	b.n	80096a0 <HAL_ADC_Init+0x37c>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	691a      	ldr	r2, [r3, #16]
 8009664:	4b32      	ldr	r3, [pc, #200]	@ (8009730 <HAL_ADC_Init+0x40c>)
 8009666:	4013      	ands	r3, r2
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800966c:	3a01      	subs	r2, #1
 800966e:	0411      	lsls	r1, r2, #16
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009674:	4311      	orrs	r1, r2
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800967a:	4311      	orrs	r1, r2
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009680:	430a      	orrs	r2, r1
 8009682:	431a      	orrs	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f042 0201 	orr.w	r2, r2, #1
 800968c:	611a      	str	r2, [r3, #16]
 800968e:	e007      	b.n	80096a0 <HAL_ADC_Init+0x37c>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	691a      	ldr	r2, [r3, #16]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 0201 	bic.w	r2, r2, #1
 800969e:	611a      	str	r2, [r3, #16]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	611a      	str	r2, [r3, #16]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009728 <HAL_ADC_Init+0x404>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d002      	beq.n	80096c6 <HAL_ADC_Init+0x3a2>
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f001 f9c3 	bl	800aa4c <ADC_ConfigureBoostMode>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d10c      	bne.n	80096e8 <HAL_ADC_Init+0x3c4>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d4:	f023 010f 	bic.w	r1, r3, #15
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	1e5a      	subs	r2, r3, #1
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80096e6:	e007      	b.n	80096f8 <HAL_ADC_Init+0x3d4>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f022 020f 	bic.w	r2, r2, #15
 80096f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096fc:	f023 0303 	bic.w	r3, r3, #3
 8009700:	f043 0201 	orr.w	r2, r3, #1
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	661a      	str	r2, [r3, #96]	@ 0x60
 8009708:	e007      	b.n	800971a <HAL_ADC_Init+0x3f6>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800970e:	f043 0210 	orr.w	r2, r3, #16
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	661a      	str	r2, [r3, #96]	@ 0x60
 8009716:	2301      	movs	r3, #1
 8009718:	77fb      	strb	r3, [r7, #31]
 800971a:	7ffb      	ldrb	r3, [r7, #31]
 800971c:	4618      	mov	r0, r3
 800971e:	3724      	adds	r7, #36	@ 0x24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd90      	pop	{r4, r7, pc}
 8009724:	ffffbffc 	.word	0xffffbffc
 8009728:	58026000 	.word	0x58026000
 800972c:	fc00f81f 	.word	0xfc00f81f
 8009730:	fc00f81e 	.word	0xfc00f81e

08009734 <HAL_ADC_Start_DMA>:
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a60      	ldr	r2, [pc, #384]	@ (80098c8 <HAL_ADC_Start_DMA+0x194>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d004      	beq.n	8009754 <HAL_ADC_Start_DMA+0x20>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a5f      	ldr	r2, [pc, #380]	@ (80098cc <HAL_ADC_Start_DMA+0x198>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d101      	bne.n	8009758 <HAL_ADC_Start_DMA+0x24>
 8009754:	4b5e      	ldr	r3, [pc, #376]	@ (80098d0 <HAL_ADC_Start_DMA+0x19c>)
 8009756:	e000      	b.n	800975a <HAL_ADC_Start_DMA+0x26>
 8009758:	4b5e      	ldr	r3, [pc, #376]	@ (80098d4 <HAL_ADC_Start_DMA+0x1a0>)
 800975a:	4618      	mov	r0, r3
 800975c:	f7ff fd16 	bl	800918c <LL_ADC_GetMultimode>
 8009760:	6138      	str	r0, [r7, #16]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff fdb6 	bl	80092d8 <LL_ADC_REG_IsConversionOngoing>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	f040 80a2 	bne.w	80098b8 <HAL_ADC_Start_DMA+0x184>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800977a:	2b01      	cmp	r3, #1
 800977c:	d101      	bne.n	8009782 <HAL_ADC_Start_DMA+0x4e>
 800977e:	2302      	movs	r3, #2
 8009780:	e09d      	b.n	80098be <HAL_ADC_Start_DMA+0x18a>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d006      	beq.n	800979e <HAL_ADC_Start_DMA+0x6a>
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	2b05      	cmp	r3, #5
 8009794:	d003      	beq.n	800979e <HAL_ADC_Start_DMA+0x6a>
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	2b09      	cmp	r3, #9
 800979a:	f040 8086 	bne.w	80098aa <HAL_ADC_Start_DMA+0x176>
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f001 f836 	bl	800a810 <ADC_Enable>
 80097a4:	4603      	mov	r3, r0
 80097a6:	75fb      	strb	r3, [r7, #23]
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d178      	bne.n	80098a0 <HAL_ADC_Start_DMA+0x16c>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80097b2:	4b49      	ldr	r3, [pc, #292]	@ (80098d8 <HAL_ADC_Start_DMA+0x1a4>)
 80097b4:	4013      	ands	r3, r2
 80097b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a42      	ldr	r2, [pc, #264]	@ (80098cc <HAL_ADC_Start_DMA+0x198>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d002      	beq.n	80097ce <HAL_ADC_Start_DMA+0x9a>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	e000      	b.n	80097d0 <HAL_ADC_Start_DMA+0x9c>
 80097ce:	4b3e      	ldr	r3, [pc, #248]	@ (80098c8 <HAL_ADC_Start_DMA+0x194>)
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	6812      	ldr	r2, [r2, #0]
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d002      	beq.n	80097de <HAL_ADC_Start_DMA+0xaa>
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d105      	bne.n	80097ea <HAL_ADC_Start_DMA+0xb6>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	661a      	str	r2, [r3, #96]	@ 0x60
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d006      	beq.n	8009804 <HAL_ADC_Start_DMA+0xd0>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097fa:	f023 0206 	bic.w	r2, r3, #6
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	665a      	str	r2, [r3, #100]	@ 0x64
 8009802:	e002      	b.n	800980a <HAL_ADC_Start_DMA+0xd6>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	665a      	str	r2, [r3, #100]	@ 0x64
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800980e:	4a33      	ldr	r2, [pc, #204]	@ (80098dc <HAL_ADC_Start_DMA+0x1a8>)
 8009810:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009816:	4a32      	ldr	r2, [pc, #200]	@ (80098e0 <HAL_ADC_Start_DMA+0x1ac>)
 8009818:	641a      	str	r2, [r3, #64]	@ 0x40
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800981e:	4a31      	ldr	r2, [pc, #196]	@ (80098e4 <HAL_ADC_Start_DMA+0x1b0>)
 8009820:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	221c      	movs	r2, #28
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f042 0210 	orr.w	r2, r2, #16
 8009840:	605a      	str	r2, [r3, #4]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a28      	ldr	r2, [pc, #160]	@ (80098e8 <HAL_ADC_Start_DMA+0x1b4>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d10f      	bne.n	800986c <HAL_ADC_Start_DMA+0x138>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009856:	005b      	lsls	r3, r3, #1
 8009858:	4619      	mov	r1, r3
 800985a:	4610      	mov	r0, r2
 800985c:	f7ff fbfe 	bl	800905c <LL_ADC_REG_SetDMATransferMode>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff fbe9 	bl	800903c <LL_ADC_EnableDMAReq>
 800986a:	e007      	b.n	800987c <HAL_ADC_Start_DMA+0x148>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009874:	4619      	mov	r1, r3
 8009876:	4610      	mov	r0, r2
 8009878:	f7ff fbcd 	bl	8009016 <LL_ADC_REG_SetDataTransferMode>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3340      	adds	r3, #64	@ 0x40
 8009886:	4619      	mov	r1, r3
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f001 fede 	bl	800b64c <HAL_DMA_Start_IT>
 8009890:	4603      	mov	r3, r0
 8009892:	75fb      	strb	r3, [r7, #23]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4618      	mov	r0, r3
 800989a:	f7ff fd09 	bl	80092b0 <LL_ADC_REG_StartConversion>
 800989e:	e00d      	b.n	80098bc <HAL_ADC_Start_DMA+0x188>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80098a8:	e008      	b.n	80098bc <HAL_ADC_Start_DMA+0x188>
 80098aa:	2301      	movs	r3, #1
 80098ac:	75fb      	strb	r3, [r7, #23]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80098b6:	e001      	b.n	80098bc <HAL_ADC_Start_DMA+0x188>
 80098b8:	2302      	movs	r3, #2
 80098ba:	75fb      	strb	r3, [r7, #23]
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	40022000 	.word	0x40022000
 80098cc:	40022100 	.word	0x40022100
 80098d0:	40022300 	.word	0x40022300
 80098d4:	58026300 	.word	0x58026300
 80098d8:	fffff0fe 	.word	0xfffff0fe
 80098dc:	0800a925 	.word	0x0800a925
 80098e0:	0800a9fd 	.word	0x0800a9fd
 80098e4:	0800aa19 	.word	0x0800aa19
 80098e8:	58026000 	.word	0x58026000

080098ec <HAL_ADC_IRQHandler>:
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08a      	sub	sp, #40	@ 0x28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	2300      	movs	r3, #0
 80098f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	61fb      	str	r3, [r7, #28]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	61bb      	str	r3, [r7, #24]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a87      	ldr	r2, [pc, #540]	@ (8009b2c <HAL_ADC_IRQHandler+0x240>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d004      	beq.n	800991c <HAL_ADC_IRQHandler+0x30>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a86      	ldr	r2, [pc, #536]	@ (8009b30 <HAL_ADC_IRQHandler+0x244>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d101      	bne.n	8009920 <HAL_ADC_IRQHandler+0x34>
 800991c:	4b85      	ldr	r3, [pc, #532]	@ (8009b34 <HAL_ADC_IRQHandler+0x248>)
 800991e:	e000      	b.n	8009922 <HAL_ADC_IRQHandler+0x36>
 8009920:	4b85      	ldr	r3, [pc, #532]	@ (8009b38 <HAL_ADC_IRQHandler+0x24c>)
 8009922:	4618      	mov	r0, r3
 8009924:	f7ff fc32 	bl	800918c <LL_ADC_GetMultimode>
 8009928:	6178      	str	r0, [r7, #20]
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	f003 0302 	and.w	r3, r3, #2
 8009930:	2b00      	cmp	r3, #0
 8009932:	d017      	beq.n	8009964 <HAL_ADC_IRQHandler+0x78>
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d012      	beq.n	8009964 <HAL_ADC_IRQHandler+0x78>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009942:	f003 0310 	and.w	r3, r3, #16
 8009946:	2b00      	cmp	r3, #0
 8009948:	d105      	bne.n	8009956 <HAL_ADC_IRQHandler+0x6a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800994e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	661a      	str	r2, [r3, #96]	@ 0x60
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f001 f98e 	bl	800ac78 <HAL_ADCEx_EndOfSamplingCallback>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2202      	movs	r2, #2
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	f003 0304 	and.w	r3, r3, #4
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <HAL_ADC_IRQHandler+0x8c>
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	f003 0304 	and.w	r3, r3, #4
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <HAL_ADC_IRQHandler+0xa2>
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 8083 	beq.w	8009a8a <HAL_ADC_IRQHandler+0x19e>
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	f003 0308 	and.w	r3, r3, #8
 800998a:	2b00      	cmp	r3, #0
 800998c:	d07d      	beq.n	8009a8a <HAL_ADC_IRQHandler+0x19e>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009992:	f003 0310 	and.w	r3, r3, #16
 8009996:	2b00      	cmp	r3, #0
 8009998:	d105      	bne.n	80099a6 <HAL_ADC_IRQHandler+0xba>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800999e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	661a      	str	r2, [r3, #96]	@ 0x60
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff faf4 	bl	8008f98 <LL_ADC_REG_IsTriggerSourceSWStart>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d062      	beq.n	8009a7c <HAL_ADC_IRQHandler+0x190>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a5d      	ldr	r2, [pc, #372]	@ (8009b30 <HAL_ADC_IRQHandler+0x244>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d002      	beq.n	80099c6 <HAL_ADC_IRQHandler+0xda>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	e000      	b.n	80099c8 <HAL_ADC_IRQHandler+0xdc>
 80099c6:	4b59      	ldr	r3, [pc, #356]	@ (8009b2c <HAL_ADC_IRQHandler+0x240>)
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	6812      	ldr	r2, [r2, #0]
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d008      	beq.n	80099e2 <HAL_ADC_IRQHandler+0xf6>
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d005      	beq.n	80099e2 <HAL_ADC_IRQHandler+0xf6>
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b05      	cmp	r3, #5
 80099da:	d002      	beq.n	80099e2 <HAL_ADC_IRQHandler+0xf6>
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	2b09      	cmp	r3, #9
 80099e0:	d104      	bne.n	80099ec <HAL_ADC_IRQHandler+0x100>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	623b      	str	r3, [r7, #32]
 80099ea:	e00c      	b.n	8009a06 <HAL_ADC_IRQHandler+0x11a>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a4f      	ldr	r2, [pc, #316]	@ (8009b30 <HAL_ADC_IRQHandler+0x244>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d002      	beq.n	80099fc <HAL_ADC_IRQHandler+0x110>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	e000      	b.n	80099fe <HAL_ADC_IRQHandler+0x112>
 80099fc:	4b4b      	ldr	r3, [pc, #300]	@ (8009b2c <HAL_ADC_IRQHandler+0x240>)
 80099fe:	613b      	str	r3, [r7, #16]
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	623b      	str	r3, [r7, #32]
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d135      	bne.n	8009a7c <HAL_ADC_IRQHandler+0x190>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0308 	and.w	r3, r3, #8
 8009a1a:	2b08      	cmp	r3, #8
 8009a1c:	d12e      	bne.n	8009a7c <HAL_ADC_IRQHandler+0x190>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7ff fc58 	bl	80092d8 <LL_ADC_REG_IsConversionOngoing>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d11a      	bne.n	8009a64 <HAL_ADC_IRQHandler+0x178>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f022 020c 	bic.w	r2, r2, #12
 8009a3c:	605a      	str	r2, [r3, #4]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	661a      	str	r2, [r3, #96]	@ 0x60
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d112      	bne.n	8009a7c <HAL_ADC_IRQHandler+0x190>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a5a:	f043 0201 	orr.w	r2, r3, #1
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	661a      	str	r2, [r3, #96]	@ 0x60
 8009a62:	e00b      	b.n	8009a7c <HAL_ADC_IRQHandler+0x190>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a68:	f043 0210 	orr.w	r2, r3, #16
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	661a      	str	r2, [r3, #96]	@ 0x60
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a74:	f043 0201 	orr.w	r2, r3, #1
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	665a      	str	r2, [r3, #100]	@ 0x64
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f96f 	bl	8009d60 <HAL_ADC_ConvCpltCallback>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	220c      	movs	r2, #12
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	f003 0320 	and.w	r3, r3, #32
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d004      	beq.n	8009a9e <HAL_ADC_IRQHandler+0x1b2>
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	f003 0320 	and.w	r3, r3, #32
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10b      	bne.n	8009ab6 <HAL_ADC_IRQHandler+0x1ca>
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 80a0 	beq.w	8009bea <HAL_ADC_IRQHandler+0x2fe>
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 809a 	beq.w	8009bea <HAL_ADC_IRQHandler+0x2fe>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009aba:	f003 0310 	and.w	r3, r3, #16
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d105      	bne.n	8009ace <HAL_ADC_IRQHandler+0x1e2>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ac6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	661a      	str	r2, [r3, #96]	@ 0x60
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7ff fadc 	bl	8009090 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009ad8:	60f8      	str	r0, [r7, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff fa5a 	bl	8008f98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009ae4:	60b8      	str	r0, [r7, #8]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a11      	ldr	r2, [pc, #68]	@ (8009b30 <HAL_ADC_IRQHandler+0x244>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d002      	beq.n	8009af6 <HAL_ADC_IRQHandler+0x20a>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	e000      	b.n	8009af8 <HAL_ADC_IRQHandler+0x20c>
 8009af6:	4b0d      	ldr	r3, [pc, #52]	@ (8009b2c <HAL_ADC_IRQHandler+0x240>)
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	6812      	ldr	r2, [r2, #0]
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d008      	beq.n	8009b12 <HAL_ADC_IRQHandler+0x226>
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d005      	beq.n	8009b12 <HAL_ADC_IRQHandler+0x226>
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2b06      	cmp	r3, #6
 8009b0a:	d002      	beq.n	8009b12 <HAL_ADC_IRQHandler+0x226>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	2b07      	cmp	r3, #7
 8009b10:	d104      	bne.n	8009b1c <HAL_ADC_IRQHandler+0x230>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	623b      	str	r3, [r7, #32]
 8009b1a:	e014      	b.n	8009b46 <HAL_ADC_IRQHandler+0x25a>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a03      	ldr	r2, [pc, #12]	@ (8009b30 <HAL_ADC_IRQHandler+0x244>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d00a      	beq.n	8009b3c <HAL_ADC_IRQHandler+0x250>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	e008      	b.n	8009b3e <HAL_ADC_IRQHandler+0x252>
 8009b2c:	40022000 	.word	0x40022000
 8009b30:	40022100 	.word	0x40022100
 8009b34:	40022300 	.word	0x40022300
 8009b38:	58026300 	.word	0x58026300
 8009b3c:	4b84      	ldr	r3, [pc, #528]	@ (8009d50 <HAL_ADC_IRQHandler+0x464>)
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	623b      	str	r3, [r7, #32]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d047      	beq.n	8009bdc <HAL_ADC_IRQHandler+0x2f0>
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d007      	beq.n	8009b66 <HAL_ADC_IRQHandler+0x27a>
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d03f      	beq.n	8009bdc <HAL_ADC_IRQHandler+0x2f0>
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d13a      	bne.n	8009bdc <HAL_ADC_IRQHandler+0x2f0>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b70:	2b40      	cmp	r3, #64	@ 0x40
 8009b72:	d133      	bne.n	8009bdc <HAL_ADC_IRQHandler+0x2f0>
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d12e      	bne.n	8009bdc <HAL_ADC_IRQHandler+0x2f0>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7ff fbbb 	bl	80092fe <LL_ADC_INJ_IsConversionOngoing>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d11a      	bne.n	8009bc4 <HAL_ADC_IRQHandler+0x2d8>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009b9c:	605a      	str	r2, [r3, #4]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ba2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	661a      	str	r2, [r3, #96]	@ 0x60
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d112      	bne.n	8009bdc <HAL_ADC_IRQHandler+0x2f0>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bba:	f043 0201 	orr.w	r2, r3, #1
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	661a      	str	r2, [r3, #96]	@ 0x60
 8009bc2:	e00b      	b.n	8009bdc <HAL_ADC_IRQHandler+0x2f0>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bc8:	f043 0210 	orr.w	r2, r3, #16
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	661a      	str	r2, [r3, #96]	@ 0x60
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bd4:	f043 0201 	orr.w	r2, r3, #1
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	665a      	str	r2, [r3, #100]	@ 0x64
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f001 f823 	bl	800ac28 <HAL_ADCEx_InjectedConvCpltCallback>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2260      	movs	r2, #96	@ 0x60
 8009be8:	601a      	str	r2, [r3, #0]
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d011      	beq.n	8009c18 <HAL_ADC_IRQHandler+0x32c>
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00c      	beq.n	8009c18 <HAL_ADC_IRQHandler+0x32c>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	661a      	str	r2, [r3, #96]	@ 0x60
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f8bc 	bl	8009d88 <HAL_ADC_LevelOutOfWindowCallback>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2280      	movs	r2, #128	@ 0x80
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d012      	beq.n	8009c48 <HAL_ADC_IRQHandler+0x35c>
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00d      	beq.n	8009c48 <HAL_ADC_IRQHandler+0x35c>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c30:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	661a      	str	r2, [r3, #96]	@ 0x60
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 f809 	bl	800ac50 <HAL_ADCEx_LevelOutOfWindow2Callback>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d012      	beq.n	8009c78 <HAL_ADC_IRQHandler+0x38c>
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00d      	beq.n	8009c78 <HAL_ADC_IRQHandler+0x38c>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c60:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	661a      	str	r2, [r3, #96]	@ 0x60
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fffb 	bl	800ac64 <HAL_ADCEx_LevelOutOfWindow3Callback>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c76:	601a      	str	r2, [r3, #0]
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	f003 0310 	and.w	r3, r3, #16
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d043      	beq.n	8009d0a <HAL_ADC_IRQHandler+0x41e>
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	f003 0310 	and.w	r3, r3, #16
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d03e      	beq.n	8009d0a <HAL_ADC_IRQHandler+0x41e>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d102      	bne.n	8009c9a <HAL_ADC_IRQHandler+0x3ae>
 8009c94:	2301      	movs	r3, #1
 8009c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c98:	e021      	b.n	8009cde <HAL_ADC_IRQHandler+0x3f2>
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d015      	beq.n	8009ccc <HAL_ADC_IRQHandler+0x3e0>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8009d50 <HAL_ADC_IRQHandler+0x464>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d004      	beq.n	8009cb4 <HAL_ADC_IRQHandler+0x3c8>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a29      	ldr	r2, [pc, #164]	@ (8009d54 <HAL_ADC_IRQHandler+0x468>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d101      	bne.n	8009cb8 <HAL_ADC_IRQHandler+0x3cc>
 8009cb4:	4b28      	ldr	r3, [pc, #160]	@ (8009d58 <HAL_ADC_IRQHandler+0x46c>)
 8009cb6:	e000      	b.n	8009cba <HAL_ADC_IRQHandler+0x3ce>
 8009cb8:	4b28      	ldr	r3, [pc, #160]	@ (8009d5c <HAL_ADC_IRQHandler+0x470>)
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff fa74 	bl	80091a8 <LL_ADC_GetMultiDMATransfer>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00b      	beq.n	8009cde <HAL_ADC_IRQHandler+0x3f2>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cca:	e008      	b.n	8009cde <HAL_ADC_IRQHandler+0x3f2>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f003 0303 	and.w	r3, r3, #3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <HAL_ADC_IRQHandler+0x3f2>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d10e      	bne.n	8009d02 <HAL_ADC_IRQHandler+0x416>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ce8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	661a      	str	r2, [r3, #96]	@ 0x60
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cf4:	f043 0202 	orr.w	r2, r3, #2
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	665a      	str	r2, [r3, #100]	@ 0x64
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f84d 	bl	8009d9c <HAL_ADC_ErrorCallback>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2210      	movs	r2, #16
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d018      	beq.n	8009d46 <HAL_ADC_IRQHandler+0x45a>
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d013      	beq.n	8009d46 <HAL_ADC_IRQHandler+0x45a>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d22:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	661a      	str	r2, [r3, #96]	@ 0x60
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d2e:	f043 0208 	orr.w	r2, r3, #8
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	665a      	str	r2, [r3, #100]	@ 0x64
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 ff7b 	bl	800ac3c <HAL_ADCEx_InjectedQueueOverflowCallback>
 8009d46:	bf00      	nop
 8009d48:	3728      	adds	r7, #40	@ 0x28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	40022000 	.word	0x40022000
 8009d54:	40022100 	.word	0x40022100
 8009d58:	40022300 	.word	0x40022300
 8009d5c:	58026300 	.word	0x58026300

08009d60 <HAL_ADC_ConvCpltCallback>:
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_ADC_ConvHalfCpltCallback>:
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_ADC_LevelOutOfWindowCallback>:
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_ADC_ErrorCallback>:
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_ADC_ConfigChannel>:
 8009db0:	b590      	push	{r4, r7, lr}
 8009db2:	b0b9      	sub	sp, #228	@ 0xe4
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60bb      	str	r3, [r7, #8]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	4aab      	ldr	r2, [pc, #684]	@ (800a080 <HAL_ADC_ConfigChannel+0x2d0>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d102      	bne.n	8009de4 <HAL_ADC_ConfigChannel+0x34>
 8009dde:	2302      	movs	r3, #2
 8009de0:	f000 bcfe 	b.w	800a7e0 <HAL_ADC_ConfigChannel+0xa30>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fa71 	bl	80092d8 <LL_ADC_REG_IsConversionOngoing>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f040 84e2 	bne.w	800a7c2 <HAL_ADC_ConfigChannel+0xa12>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	db38      	blt.n	8009e78 <HAL_ADC_ConfigChannel+0xc8>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a9e      	ldr	r2, [pc, #632]	@ (800a084 <HAL_ADC_ConfigChannel+0x2d4>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d033      	beq.n	8009e78 <HAL_ADC_ConfigChannel+0xc8>
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d108      	bne.n	8009e2e <HAL_ADC_ConfigChannel+0x7e>
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	0e9b      	lsrs	r3, r3, #26
 8009e22:	f003 031f 	and.w	r3, r3, #31
 8009e26:	2201      	movs	r2, #1
 8009e28:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2c:	e01d      	b.n	8009e6a <HAL_ADC_ConfigChannel+0xba>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009e3a:	fa93 f3a3 	rbit	r3, r3
 8009e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009e46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <HAL_ADC_ConfigChannel+0xa6>
 8009e52:	2320      	movs	r3, #32
 8009e54:	e004      	b.n	8009e60 <HAL_ADC_ConfigChannel+0xb0>
 8009e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e5a:	fab3 f383 	clz	r3, r3
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	f003 031f 	and.w	r3, r3, #31
 8009e64:	2201      	movs	r2, #1
 8009e66:	fa02 f303 	lsl.w	r3, r2, r3
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	6812      	ldr	r2, [r2, #0]
 8009e6e:	69d1      	ldr	r1, [r2, #28]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	6812      	ldr	r2, [r2, #0]
 8009e74:	430b      	orrs	r3, r1
 8009e76:	61d3      	str	r3, [r2, #28]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6818      	ldr	r0, [r3, #0]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	6859      	ldr	r1, [r3, #4]
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	461a      	mov	r2, r3
 8009e86:	f7ff f89a 	bl	8008fbe <LL_ADC_REG_SetSequencerRanks>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff fa22 	bl	80092d8 <LL_ADC_REG_IsConversionOngoing>
 8009e94:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7ff fa2e 	bl	80092fe <LL_ADC_INJ_IsConversionOngoing>
 8009ea2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
 8009ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f040 8270 	bne.w	800a390 <HAL_ADC_ConfigChannel+0x5e0>
 8009eb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f040 826b 	bne.w	800a390 <HAL_ADC_ConfigChannel+0x5e0>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6818      	ldr	r0, [r3, #0]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	6819      	ldr	r1, [r3, #0]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f7ff f8f5 	bl	80090b6 <LL_ADC_SetChannelSamplingTime>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a6c      	ldr	r2, [pc, #432]	@ (800a084 <HAL_ADC_ConfigChannel+0x2d4>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d10d      	bne.n	8009ef2 <HAL_ADC_ConfigChannel+0x142>
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	695a      	ldr	r2, [r3, #20]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	08db      	lsrs	r3, r3, #3
 8009ee2:	f003 0303 	and.w	r3, r3, #3
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ef0:	e032      	b.n	8009f58 <HAL_ADC_ConfigChannel+0x1a8>
 8009ef2:	4b65      	ldr	r3, [pc, #404]	@ (800a088 <HAL_ADC_ConfigChannel+0x2d8>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009efe:	d10b      	bne.n	8009f18 <HAL_ADC_ConfigChannel+0x168>
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	695a      	ldr	r2, [r3, #20]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	089b      	lsrs	r3, r3, #2
 8009f0c:	f003 0307 	and.w	r3, r3, #7
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	fa02 f303 	lsl.w	r3, r2, r3
 8009f16:	e01d      	b.n	8009f54 <HAL_ADC_ConfigChannel+0x1a4>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	f003 0310 	and.w	r3, r3, #16
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10b      	bne.n	8009f3e <HAL_ADC_ConfigChannel+0x18e>
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	695a      	ldr	r2, [r3, #20]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	089b      	lsrs	r3, r3, #2
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3c:	e00a      	b.n	8009f54 <HAL_ADC_ConfigChannel+0x1a4>
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	695a      	ldr	r2, [r3, #20]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	089b      	lsrs	r3, r3, #2
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	fa02 f303 	lsl.w	r3, r2, r3
 8009f54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	d048      	beq.n	8009ff2 <HAL_ADC_ConfigChannel+0x242>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6818      	ldr	r0, [r3, #0]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	6919      	ldr	r1, [r3, #16]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009f70:	f7fe ff20 	bl	8008db4 <LL_ADC_SetOffset>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a42      	ldr	r2, [pc, #264]	@ (800a084 <HAL_ADC_ConfigChannel+0x2d4>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d119      	bne.n	8009fb2 <HAL_ADC_ConfigChannel+0x202>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	6919      	ldr	r1, [r3, #16]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	69db      	ldr	r3, [r3, #28]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f7fe ffb8 	bl	8008f00 <LL_ADC_SetOffsetSign>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6818      	ldr	r0, [r3, #0]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	6919      	ldr	r1, [r3, #16]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d102      	bne.n	8009fa8 <HAL_ADC_ConfigChannel+0x1f8>
 8009fa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009fa6:	e000      	b.n	8009faa <HAL_ADC_ConfigChannel+0x1fa>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	461a      	mov	r2, r3
 8009fac:	f7fe ff86 	bl	8008ebc <LL_ADC_SetOffsetSaturation>
 8009fb0:	e1ee      	b.n	800a390 <HAL_ADC_ConfigChannel+0x5e0>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	6919      	ldr	r1, [r3, #16]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d102      	bne.n	8009fca <HAL_ADC_ConfigChannel+0x21a>
 8009fc4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fc8:	e000      	b.n	8009fcc <HAL_ADC_ConfigChannel+0x21c>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	461a      	mov	r2, r3
 8009fce:	f7fe ff53 	bl	8008e78 <LL_ADC_SetOffsetSignedSaturation>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6818      	ldr	r0, [r3, #0]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	6919      	ldr	r1, [r3, #16]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	7e1b      	ldrb	r3, [r3, #24]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d102      	bne.n	8009fe8 <HAL_ADC_ConfigChannel+0x238>
 8009fe2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009fe6:	e000      	b.n	8009fea <HAL_ADC_ConfigChannel+0x23a>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	461a      	mov	r2, r3
 8009fec:	f7fe ff2a 	bl	8008e44 <LL_ADC_SetDataRightShift>
 8009ff0:	e1ce      	b.n	800a390 <HAL_ADC_ConfigChannel+0x5e0>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a23      	ldr	r2, [pc, #140]	@ (800a084 <HAL_ADC_ConfigChannel+0x2d4>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	f040 8181 	bne.w	800a300 <HAL_ADC_ConfigChannel+0x550>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2100      	movs	r1, #0
 800a004:	4618      	mov	r0, r3
 800a006:	f7fe ff07 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a00a:	4603      	mov	r3, r0
 800a00c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <HAL_ADC_ConfigChannel+0x27a>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2100      	movs	r1, #0
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fe fefc 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a020:	4603      	mov	r3, r0
 800a022:	0e9b      	lsrs	r3, r3, #26
 800a024:	f003 021f 	and.w	r2, r3, #31
 800a028:	e01e      	b.n	800a068 <HAL_ADC_ConfigChannel+0x2b8>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2100      	movs	r1, #0
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fef1 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a036:	4603      	mov	r3, r0
 800a038:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a03c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a040:	fa93 f3a3 	rbit	r3, r3
 800a044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a04c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a050:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <HAL_ADC_ConfigChannel+0x2ac>
 800a058:	2320      	movs	r3, #32
 800a05a:	e004      	b.n	800a066 <HAL_ADC_ConfigChannel+0x2b6>
 800a05c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a060:	fab3 f383 	clz	r3, r3
 800a064:	b2db      	uxtb	r3, r3
 800a066:	461a      	mov	r2, r3
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10b      	bne.n	800a08c <HAL_ADC_ConfigChannel+0x2dc>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	0e9b      	lsrs	r3, r3, #26
 800a07a:	f003 031f 	and.w	r3, r3, #31
 800a07e:	e01e      	b.n	800a0be <HAL_ADC_ConfigChannel+0x30e>
 800a080:	47ff0000 	.word	0x47ff0000
 800a084:	58026000 	.word	0x58026000
 800a088:	5c001000 	.word	0x5c001000
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a098:	fa93 f3a3 	rbit	r3, r3
 800a09c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a0a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a0a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <HAL_ADC_ConfigChannel+0x304>
 800a0b0:	2320      	movs	r3, #32
 800a0b2:	e004      	b.n	800a0be <HAL_ADC_ConfigChannel+0x30e>
 800a0b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a0b8:	fab3 f383 	clz	r3, r3
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d106      	bne.n	800a0d0 <HAL_ADC_ConfigChannel+0x320>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe ff3a 	bl	8008f44 <LL_ADC_SetOffsetState>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fe fe9e 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10a      	bne.n	800a0fc <HAL_ADC_ConfigChannel+0x34c>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2101      	movs	r1, #1
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fe93 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	0e9b      	lsrs	r3, r3, #26
 800a0f6:	f003 021f 	and.w	r2, r3, #31
 800a0fa:	e01e      	b.n	800a13a <HAL_ADC_ConfigChannel+0x38a>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2101      	movs	r1, #1
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe fe88 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a108:	4603      	mov	r3, r0
 800a10a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a10e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a112:	fa93 f3a3 	rbit	r3, r3
 800a116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a11a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a11e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <HAL_ADC_ConfigChannel+0x37e>
 800a12a:	2320      	movs	r3, #32
 800a12c:	e004      	b.n	800a138 <HAL_ADC_ConfigChannel+0x388>
 800a12e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a132:	fab3 f383 	clz	r3, r3
 800a136:	b2db      	uxtb	r3, r3
 800a138:	461a      	mov	r2, r3
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a142:	2b00      	cmp	r3, #0
 800a144:	d105      	bne.n	800a152 <HAL_ADC_ConfigChannel+0x3a2>
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	0e9b      	lsrs	r3, r3, #26
 800a14c:	f003 031f 	and.w	r3, r3, #31
 800a150:	e018      	b.n	800a184 <HAL_ADC_ConfigChannel+0x3d4>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a15a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a15e:	fa93 f3a3 	rbit	r3, r3
 800a162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a166:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a16a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a16e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <HAL_ADC_ConfigChannel+0x3ca>
 800a176:	2320      	movs	r3, #32
 800a178:	e004      	b.n	800a184 <HAL_ADC_ConfigChannel+0x3d4>
 800a17a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a17e:	fab3 f383 	clz	r3, r3
 800a182:	b2db      	uxtb	r3, r3
 800a184:	429a      	cmp	r2, r3
 800a186:	d106      	bne.n	800a196 <HAL_ADC_ConfigChannel+0x3e6>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2200      	movs	r2, #0
 800a18e:	2101      	movs	r1, #1
 800a190:	4618      	mov	r0, r3
 800a192:	f7fe fed7 	bl	8008f44 <LL_ADC_SetOffsetState>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2102      	movs	r1, #2
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe fe3b 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <HAL_ADC_ConfigChannel+0x412>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2102      	movs	r1, #2
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe fe30 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	0e9b      	lsrs	r3, r3, #26
 800a1bc:	f003 021f 	and.w	r2, r3, #31
 800a1c0:	e01e      	b.n	800a200 <HAL_ADC_ConfigChannel+0x450>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2102      	movs	r1, #2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fe fe25 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a1d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a1d8:	fa93 f3a3 	rbit	r3, r3
 800a1dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a1e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a1e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <HAL_ADC_ConfigChannel+0x444>
 800a1f0:	2320      	movs	r3, #32
 800a1f2:	e004      	b.n	800a1fe <HAL_ADC_ConfigChannel+0x44e>
 800a1f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1f8:	fab3 f383 	clz	r3, r3
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	461a      	mov	r2, r3
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d105      	bne.n	800a218 <HAL_ADC_ConfigChannel+0x468>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	0e9b      	lsrs	r3, r3, #26
 800a212:	f003 031f 	and.w	r3, r3, #31
 800a216:	e014      	b.n	800a242 <HAL_ADC_ConfigChannel+0x492>
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a21e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a220:	fa93 f3a3 	rbit	r3, r3
 800a224:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a226:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a228:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a22c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <HAL_ADC_ConfigChannel+0x488>
 800a234:	2320      	movs	r3, #32
 800a236:	e004      	b.n	800a242 <HAL_ADC_ConfigChannel+0x492>
 800a238:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a23c:	fab3 f383 	clz	r3, r3
 800a240:	b2db      	uxtb	r3, r3
 800a242:	429a      	cmp	r2, r3
 800a244:	d106      	bne.n	800a254 <HAL_ADC_ConfigChannel+0x4a4>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2200      	movs	r2, #0
 800a24c:	2102      	movs	r1, #2
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fe fe78 	bl	8008f44 <LL_ADC_SetOffsetState>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2103      	movs	r1, #3
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe fddc 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a260:	4603      	mov	r3, r0
 800a262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <HAL_ADC_ConfigChannel+0x4d0>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2103      	movs	r1, #3
 800a270:	4618      	mov	r0, r3
 800a272:	f7fe fdd1 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a276:	4603      	mov	r3, r0
 800a278:	0e9b      	lsrs	r3, r3, #26
 800a27a:	f003 021f 	and.w	r2, r3, #31
 800a27e:	e017      	b.n	800a2b0 <HAL_ADC_ConfigChannel+0x500>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2103      	movs	r1, #3
 800a286:	4618      	mov	r0, r3
 800a288:	f7fe fdc6 	bl	8008e18 <LL_ADC_GetOffsetChannel>
 800a28c:	4603      	mov	r3, r0
 800a28e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a290:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a292:	fa93 f3a3 	rbit	r3, r3
 800a296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a29a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a29c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <HAL_ADC_ConfigChannel+0x4f6>
 800a2a2:	2320      	movs	r3, #32
 800a2a4:	e003      	b.n	800a2ae <HAL_ADC_ConfigChannel+0x4fe>
 800a2a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2a8:	fab3 f383 	clz	r3, r3
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d105      	bne.n	800a2c8 <HAL_ADC_ConfigChannel+0x518>
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	0e9b      	lsrs	r3, r3, #26
 800a2c2:	f003 031f 	and.w	r3, r3, #31
 800a2c6:	e011      	b.n	800a2ec <HAL_ADC_ConfigChannel+0x53c>
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a2ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a2d0:	fa93 f3a3 	rbit	r3, r3
 800a2d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a2d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a2d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d101      	bne.n	800a2e4 <HAL_ADC_ConfigChannel+0x534>
 800a2e0:	2320      	movs	r3, #32
 800a2e2:	e003      	b.n	800a2ec <HAL_ADC_ConfigChannel+0x53c>
 800a2e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2e6:	fab3 f383 	clz	r3, r3
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d14f      	bne.n	800a390 <HAL_ADC_ConfigChannel+0x5e0>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	2103      	movs	r1, #3
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7fe fe23 	bl	8008f44 <LL_ADC_SetOffsetState>
 800a2fe:	e047      	b.n	800a390 <HAL_ADC_ConfigChannel+0x5e0>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a306:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	069b      	lsls	r3, r3, #26
 800a310:	429a      	cmp	r2, r3
 800a312:	d107      	bne.n	800a324 <HAL_ADC_ConfigChannel+0x574>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a322:	661a      	str	r2, [r3, #96]	@ 0x60
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a32a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	069b      	lsls	r3, r3, #26
 800a334:	429a      	cmp	r2, r3
 800a336:	d107      	bne.n	800a348 <HAL_ADC_ConfigChannel+0x598>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a346:	665a      	str	r2, [r3, #100]	@ 0x64
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a34e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	069b      	lsls	r3, r3, #26
 800a358:	429a      	cmp	r2, r3
 800a35a:	d107      	bne.n	800a36c <HAL_ADC_ConfigChannel+0x5bc>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a36a:	669a      	str	r2, [r3, #104]	@ 0x68
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a372:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	069b      	lsls	r3, r3, #26
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d107      	bne.n	800a390 <HAL_ADC_ConfigChannel+0x5e0>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a38e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe ff77 	bl	8009288 <LL_ADC_IsEnabled>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f040 8219 	bne.w	800a7d4 <HAL_ADC_ConfigChannel+0xa24>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	6819      	ldr	r1, [r3, #0]
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f7fe feac 	bl	800910c <LL_ADC_SetChannelSingleDiff>
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	4aa1      	ldr	r2, [pc, #644]	@ (800a640 <HAL_ADC_ConfigChannel+0x890>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	f040 812e 	bne.w	800a61c <HAL_ADC_ConfigChannel+0x86c>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6818      	ldr	r0, [r3, #0]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10b      	bne.n	800a3e8 <HAL_ADC_ConfigChannel+0x638>
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	0e9b      	lsrs	r3, r3, #26
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	f003 031f 	and.w	r3, r3, #31
 800a3dc:	2b09      	cmp	r3, #9
 800a3de:	bf94      	ite	ls
 800a3e0:	2301      	movls	r3, #1
 800a3e2:	2300      	movhi	r3, #0
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	e019      	b.n	800a41c <HAL_ADC_ConfigChannel+0x66c>
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a3f0:	fa93 f3a3 	rbit	r3, r3
 800a3f4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <HAL_ADC_ConfigChannel+0x654>
 800a400:	2320      	movs	r3, #32
 800a402:	e003      	b.n	800a40c <HAL_ADC_ConfigChannel+0x65c>
 800a404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a406:	fab3 f383 	clz	r3, r3
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	3301      	adds	r3, #1
 800a40e:	f003 031f 	and.w	r3, r3, #31
 800a412:	2b09      	cmp	r3, #9
 800a414:	bf94      	ite	ls
 800a416:	2301      	movls	r3, #1
 800a418:	2300      	movhi	r3, #0
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d079      	beq.n	800a514 <HAL_ADC_ConfigChannel+0x764>
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d107      	bne.n	800a43c <HAL_ADC_ConfigChannel+0x68c>
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	0e9b      	lsrs	r3, r3, #26
 800a432:	3301      	adds	r3, #1
 800a434:	069b      	lsls	r3, r3, #26
 800a436:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a43a:	e015      	b.n	800a468 <HAL_ADC_ConfigChannel+0x6b8>
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a444:	fa93 f3a3 	rbit	r3, r3
 800a448:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a44a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a44c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a44e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <HAL_ADC_ConfigChannel+0x6a8>
 800a454:	2320      	movs	r3, #32
 800a456:	e003      	b.n	800a460 <HAL_ADC_ConfigChannel+0x6b0>
 800a458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a45a:	fab3 f383 	clz	r3, r3
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	3301      	adds	r3, #1
 800a462:	069b      	lsls	r3, r3, #26
 800a464:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a470:	2b00      	cmp	r3, #0
 800a472:	d109      	bne.n	800a488 <HAL_ADC_ConfigChannel+0x6d8>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	0e9b      	lsrs	r3, r3, #26
 800a47a:	3301      	adds	r3, #1
 800a47c:	f003 031f 	and.w	r3, r3, #31
 800a480:	2101      	movs	r1, #1
 800a482:	fa01 f303 	lsl.w	r3, r1, r3
 800a486:	e017      	b.n	800a4b8 <HAL_ADC_ConfigChannel+0x708>
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a48e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a490:	fa93 f3a3 	rbit	r3, r3
 800a494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a498:	647b      	str	r3, [r7, #68]	@ 0x44
 800a49a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <HAL_ADC_ConfigChannel+0x6f4>
 800a4a0:	2320      	movs	r3, #32
 800a4a2:	e003      	b.n	800a4ac <HAL_ADC_ConfigChannel+0x6fc>
 800a4a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4a6:	fab3 f383 	clz	r3, r3
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	f003 031f 	and.w	r3, r3, #31
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b8:	ea42 0103 	orr.w	r1, r2, r3
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10a      	bne.n	800a4de <HAL_ADC_ConfigChannel+0x72e>
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	0e9b      	lsrs	r3, r3, #26
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	f003 021f 	and.w	r2, r3, #31
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	005b      	lsls	r3, r3, #1
 800a4d8:	4413      	add	r3, r2
 800a4da:	051b      	lsls	r3, r3, #20
 800a4dc:	e018      	b.n	800a510 <HAL_ADC_ConfigChannel+0x760>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4e6:	fa93 f3a3 	rbit	r3, r3
 800a4ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_ADC_ConfigChannel+0x74a>
 800a4f6:	2320      	movs	r3, #32
 800a4f8:	e003      	b.n	800a502 <HAL_ADC_ConfigChannel+0x752>
 800a4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fc:	fab3 f383 	clz	r3, r3
 800a500:	b2db      	uxtb	r3, r3
 800a502:	3301      	adds	r3, #1
 800a504:	f003 021f 	and.w	r2, r3, #31
 800a508:	4613      	mov	r3, r2
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	4413      	add	r3, r2
 800a50e:	051b      	lsls	r3, r3, #20
 800a510:	430b      	orrs	r3, r1
 800a512:	e07e      	b.n	800a612 <HAL_ADC_ConfigChannel+0x862>
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d107      	bne.n	800a530 <HAL_ADC_ConfigChannel+0x780>
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	0e9b      	lsrs	r3, r3, #26
 800a526:	3301      	adds	r3, #1
 800a528:	069b      	lsls	r3, r3, #26
 800a52a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a52e:	e015      	b.n	800a55c <HAL_ADC_ConfigChannel+0x7ac>
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a538:	fa93 f3a3 	rbit	r3, r3
 800a53c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <HAL_ADC_ConfigChannel+0x79c>
 800a548:	2320      	movs	r3, #32
 800a54a:	e003      	b.n	800a554 <HAL_ADC_ConfigChannel+0x7a4>
 800a54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54e:	fab3 f383 	clz	r3, r3
 800a552:	b2db      	uxtb	r3, r3
 800a554:	3301      	adds	r3, #1
 800a556:	069b      	lsls	r3, r3, #26
 800a558:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a564:	2b00      	cmp	r3, #0
 800a566:	d109      	bne.n	800a57c <HAL_ADC_ConfigChannel+0x7cc>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	0e9b      	lsrs	r3, r3, #26
 800a56e:	3301      	adds	r3, #1
 800a570:	f003 031f 	and.w	r3, r3, #31
 800a574:	2101      	movs	r1, #1
 800a576:	fa01 f303 	lsl.w	r3, r1, r3
 800a57a:	e017      	b.n	800a5ac <HAL_ADC_ConfigChannel+0x7fc>
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	61fb      	str	r3, [r7, #28]
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	fa93 f3a3 	rbit	r3, r3
 800a588:	61bb      	str	r3, [r7, #24]
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	623b      	str	r3, [r7, #32]
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <HAL_ADC_ConfigChannel+0x7e8>
 800a594:	2320      	movs	r3, #32
 800a596:	e003      	b.n	800a5a0 <HAL_ADC_ConfigChannel+0x7f0>
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	fab3 f383 	clz	r3, r3
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	f003 031f 	and.w	r3, r3, #31
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ac:	ea42 0103 	orr.w	r1, r2, r3
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10d      	bne.n	800a5d8 <HAL_ADC_ConfigChannel+0x828>
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	0e9b      	lsrs	r3, r3, #26
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	f003 021f 	and.w	r2, r3, #31
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	4413      	add	r3, r2
 800a5ce:	3b1e      	subs	r3, #30
 800a5d0:	051b      	lsls	r3, r3, #20
 800a5d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a5d6:	e01b      	b.n	800a610 <HAL_ADC_ConfigChannel+0x860>
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	613b      	str	r3, [r7, #16]
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	fa93 f3a3 	rbit	r3, r3
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	617b      	str	r3, [r7, #20]
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <HAL_ADC_ConfigChannel+0x844>
 800a5f0:	2320      	movs	r3, #32
 800a5f2:	e003      	b.n	800a5fc <HAL_ADC_ConfigChannel+0x84c>
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	fab3 f383 	clz	r3, r3
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	f003 021f 	and.w	r2, r3, #31
 800a602:	4613      	mov	r3, r2
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	4413      	add	r3, r2
 800a608:	3b1e      	subs	r3, #30
 800a60a:	051b      	lsls	r3, r3, #20
 800a60c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a610:	430b      	orrs	r3, r1
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	6892      	ldr	r2, [r2, #8]
 800a616:	4619      	mov	r1, r3
 800a618:	f7fe fd4d 	bl	80090b6 <LL_ADC_SetChannelSamplingTime>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	f280 80d7 	bge.w	800a7d4 <HAL_ADC_ConfigChannel+0xa24>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a06      	ldr	r2, [pc, #24]	@ (800a644 <HAL_ADC_ConfigChannel+0x894>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d004      	beq.n	800a63a <HAL_ADC_ConfigChannel+0x88a>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a04      	ldr	r2, [pc, #16]	@ (800a648 <HAL_ADC_ConfigChannel+0x898>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d10a      	bne.n	800a650 <HAL_ADC_ConfigChannel+0x8a0>
 800a63a:	4b04      	ldr	r3, [pc, #16]	@ (800a64c <HAL_ADC_ConfigChannel+0x89c>)
 800a63c:	e009      	b.n	800a652 <HAL_ADC_ConfigChannel+0x8a2>
 800a63e:	bf00      	nop
 800a640:	47ff0000 	.word	0x47ff0000
 800a644:	40022000 	.word	0x40022000
 800a648:	40022100 	.word	0x40022100
 800a64c:	40022300 	.word	0x40022300
 800a650:	4b65      	ldr	r3, [pc, #404]	@ (800a7e8 <HAL_ADC_ConfigChannel+0xa38>)
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fba0 	bl	8008d98 <LL_ADC_GetCommonPathInternalCh>
 800a658:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a62      	ldr	r2, [pc, #392]	@ (800a7ec <HAL_ADC_ConfigChannel+0xa3c>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d004      	beq.n	800a670 <HAL_ADC_ConfigChannel+0x8c0>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a61      	ldr	r2, [pc, #388]	@ (800a7f0 <HAL_ADC_ConfigChannel+0xa40>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d10e      	bne.n	800a68e <HAL_ADC_ConfigChannel+0x8de>
 800a670:	485e      	ldr	r0, [pc, #376]	@ (800a7ec <HAL_ADC_ConfigChannel+0xa3c>)
 800a672:	f7fe fe09 	bl	8009288 <LL_ADC_IsEnabled>
 800a676:	4604      	mov	r4, r0
 800a678:	485d      	ldr	r0, [pc, #372]	@ (800a7f0 <HAL_ADC_ConfigChannel+0xa40>)
 800a67a:	f7fe fe05 	bl	8009288 <LL_ADC_IsEnabled>
 800a67e:	4603      	mov	r3, r0
 800a680:	4323      	orrs	r3, r4
 800a682:	2b00      	cmp	r3, #0
 800a684:	bf0c      	ite	eq
 800a686:	2301      	moveq	r3, #1
 800a688:	2300      	movne	r3, #0
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	e008      	b.n	800a6a0 <HAL_ADC_ConfigChannel+0x8f0>
 800a68e:	4859      	ldr	r0, [pc, #356]	@ (800a7f4 <HAL_ADC_ConfigChannel+0xa44>)
 800a690:	f7fe fdfa 	bl	8009288 <LL_ADC_IsEnabled>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	bf0c      	ite	eq
 800a69a:	2301      	moveq	r3, #1
 800a69c:	2300      	movne	r3, #0
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f000 8084 	beq.w	800a7ae <HAL_ADC_ConfigChannel+0x9fe>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a53      	ldr	r2, [pc, #332]	@ (800a7f8 <HAL_ADC_ConfigChannel+0xa48>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d132      	bne.n	800a716 <HAL_ADC_ConfigChannel+0x966>
 800a6b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a6b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d12c      	bne.n	800a716 <HAL_ADC_ConfigChannel+0x966>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a4c      	ldr	r2, [pc, #304]	@ (800a7f4 <HAL_ADC_ConfigChannel+0xa44>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	f040 8086 	bne.w	800a7d4 <HAL_ADC_ConfigChannel+0xa24>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a47      	ldr	r2, [pc, #284]	@ (800a7ec <HAL_ADC_ConfigChannel+0xa3c>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d004      	beq.n	800a6dc <HAL_ADC_ConfigChannel+0x92c>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a46      	ldr	r2, [pc, #280]	@ (800a7f0 <HAL_ADC_ConfigChannel+0xa40>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d101      	bne.n	800a6e0 <HAL_ADC_ConfigChannel+0x930>
 800a6dc:	4a47      	ldr	r2, [pc, #284]	@ (800a7fc <HAL_ADC_ConfigChannel+0xa4c>)
 800a6de:	e000      	b.n	800a6e2 <HAL_ADC_ConfigChannel+0x932>
 800a6e0:	4a41      	ldr	r2, [pc, #260]	@ (800a7e8 <HAL_ADC_ConfigChannel+0xa38>)
 800a6e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a6e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	f7fe fb40 	bl	8008d72 <LL_ADC_SetCommonPathInternalCh>
 800a6f2:	4b43      	ldr	r3, [pc, #268]	@ (800a800 <HAL_ADC_ConfigChannel+0xa50>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	099b      	lsrs	r3, r3, #6
 800a6f8:	4a42      	ldr	r2, [pc, #264]	@ (800a804 <HAL_ADC_ConfigChannel+0xa54>)
 800a6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a6fe:	099b      	lsrs	r3, r3, #6
 800a700:	3301      	adds	r3, #1
 800a702:	005b      	lsls	r3, r3, #1
 800a704:	60bb      	str	r3, [r7, #8]
 800a706:	e002      	b.n	800a70e <HAL_ADC_ConfigChannel+0x95e>
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	3b01      	subs	r3, #1
 800a70c:	60bb      	str	r3, [r7, #8]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1f9      	bne.n	800a708 <HAL_ADC_ConfigChannel+0x958>
 800a714:	e05e      	b.n	800a7d4 <HAL_ADC_ConfigChannel+0xa24>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a3b      	ldr	r2, [pc, #236]	@ (800a808 <HAL_ADC_ConfigChannel+0xa58>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d120      	bne.n	800a762 <HAL_ADC_ConfigChannel+0x9b2>
 800a720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d11a      	bne.n	800a762 <HAL_ADC_ConfigChannel+0x9b2>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a30      	ldr	r2, [pc, #192]	@ (800a7f4 <HAL_ADC_ConfigChannel+0xa44>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d14e      	bne.n	800a7d4 <HAL_ADC_ConfigChannel+0xa24>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a2c      	ldr	r2, [pc, #176]	@ (800a7ec <HAL_ADC_ConfigChannel+0xa3c>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d004      	beq.n	800a74a <HAL_ADC_ConfigChannel+0x99a>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a2a      	ldr	r2, [pc, #168]	@ (800a7f0 <HAL_ADC_ConfigChannel+0xa40>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d101      	bne.n	800a74e <HAL_ADC_ConfigChannel+0x99e>
 800a74a:	4a2c      	ldr	r2, [pc, #176]	@ (800a7fc <HAL_ADC_ConfigChannel+0xa4c>)
 800a74c:	e000      	b.n	800a750 <HAL_ADC_ConfigChannel+0x9a0>
 800a74e:	4a26      	ldr	r2, [pc, #152]	@ (800a7e8 <HAL_ADC_ConfigChannel+0xa38>)
 800a750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a754:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a758:	4619      	mov	r1, r3
 800a75a:	4610      	mov	r0, r2
 800a75c:	f7fe fb09 	bl	8008d72 <LL_ADC_SetCommonPathInternalCh>
 800a760:	e038      	b.n	800a7d4 <HAL_ADC_ConfigChannel+0xa24>
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a29      	ldr	r2, [pc, #164]	@ (800a80c <HAL_ADC_ConfigChannel+0xa5c>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d133      	bne.n	800a7d4 <HAL_ADC_ConfigChannel+0xa24>
 800a76c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d12d      	bne.n	800a7d4 <HAL_ADC_ConfigChannel+0xa24>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a1d      	ldr	r2, [pc, #116]	@ (800a7f4 <HAL_ADC_ConfigChannel+0xa44>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d128      	bne.n	800a7d4 <HAL_ADC_ConfigChannel+0xa24>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a19      	ldr	r2, [pc, #100]	@ (800a7ec <HAL_ADC_ConfigChannel+0xa3c>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d004      	beq.n	800a796 <HAL_ADC_ConfigChannel+0x9e6>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a17      	ldr	r2, [pc, #92]	@ (800a7f0 <HAL_ADC_ConfigChannel+0xa40>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d101      	bne.n	800a79a <HAL_ADC_ConfigChannel+0x9ea>
 800a796:	4a19      	ldr	r2, [pc, #100]	@ (800a7fc <HAL_ADC_ConfigChannel+0xa4c>)
 800a798:	e000      	b.n	800a79c <HAL_ADC_ConfigChannel+0x9ec>
 800a79a:	4a13      	ldr	r2, [pc, #76]	@ (800a7e8 <HAL_ADC_ConfigChannel+0xa38>)
 800a79c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a7a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f7fe fae3 	bl	8008d72 <LL_ADC_SetCommonPathInternalCh>
 800a7ac:	e012      	b.n	800a7d4 <HAL_ADC_ConfigChannel+0xa24>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7b2:	f043 0220 	orr.w	r2, r3, #32
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	661a      	str	r2, [r3, #96]	@ 0x60
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800a7c0:	e008      	b.n	800a7d4 <HAL_ADC_ConfigChannel+0xa24>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7c6:	f043 0220 	orr.w	r2, r3, #32
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	661a      	str	r2, [r3, #96]	@ 0x60
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800a7dc:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	37e4      	adds	r7, #228	@ 0xe4
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd90      	pop	{r4, r7, pc}
 800a7e8:	58026300 	.word	0x58026300
 800a7ec:	40022000 	.word	0x40022000
 800a7f0:	40022100 	.word	0x40022100
 800a7f4:	58026000 	.word	0x58026000
 800a7f8:	c7520000 	.word	0xc7520000
 800a7fc:	40022300 	.word	0x40022300
 800a800:	24000004 	.word	0x24000004
 800a804:	053e2d63 	.word	0x053e2d63
 800a808:	c3210000 	.word	0xc3210000
 800a80c:	cb840000 	.word	0xcb840000

0800a810 <ADC_Enable>:
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fe fd33 	bl	8009288 <LL_ADC_IsEnabled>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d16e      	bne.n	800a906 <ADC_Enable+0xf6>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689a      	ldr	r2, [r3, #8]
 800a82e:	4b38      	ldr	r3, [pc, #224]	@ (800a910 <ADC_Enable+0x100>)
 800a830:	4013      	ands	r3, r2
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00d      	beq.n	800a852 <ADC_Enable+0x42>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a83a:	f043 0210 	orr.w	r2, r3, #16
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	661a      	str	r2, [r3, #96]	@ 0x60
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a846:	f043 0201 	orr.w	r2, r3, #1
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	665a      	str	r2, [r3, #100]	@ 0x64
 800a84e:	2301      	movs	r3, #1
 800a850:	e05a      	b.n	800a908 <ADC_Enable+0xf8>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe fd02 	bl	8009260 <LL_ADC_Enable>
 800a85c:	f7fe fa46 	bl	8008cec <HAL_GetTick>
 800a860:	60f8      	str	r0, [r7, #12]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a2b      	ldr	r2, [pc, #172]	@ (800a914 <ADC_Enable+0x104>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d004      	beq.n	800a876 <ADC_Enable+0x66>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a29      	ldr	r2, [pc, #164]	@ (800a918 <ADC_Enable+0x108>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d101      	bne.n	800a87a <ADC_Enable+0x6a>
 800a876:	4b29      	ldr	r3, [pc, #164]	@ (800a91c <ADC_Enable+0x10c>)
 800a878:	e000      	b.n	800a87c <ADC_Enable+0x6c>
 800a87a:	4b29      	ldr	r3, [pc, #164]	@ (800a920 <ADC_Enable+0x110>)
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7fe fc85 	bl	800918c <LL_ADC_GetMultimode>
 800a882:	60b8      	str	r0, [r7, #8]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a23      	ldr	r2, [pc, #140]	@ (800a918 <ADC_Enable+0x108>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d002      	beq.n	800a894 <ADC_Enable+0x84>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	e000      	b.n	800a896 <ADC_Enable+0x86>
 800a894:	4b1f      	ldr	r3, [pc, #124]	@ (800a914 <ADC_Enable+0x104>)
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	6812      	ldr	r2, [r2, #0]
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d02c      	beq.n	800a8f8 <ADC_Enable+0xe8>
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d130      	bne.n	800a906 <ADC_Enable+0xf6>
 800a8a4:	e028      	b.n	800a8f8 <ADC_Enable+0xe8>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe fcec 	bl	8009288 <LL_ADC_IsEnabled>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d104      	bne.n	800a8c0 <ADC_Enable+0xb0>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7fe fcd0 	bl	8009260 <LL_ADC_Enable>
 800a8c0:	f7fe fa14 	bl	8008cec <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d914      	bls.n	800a8f8 <ADC_Enable+0xe8>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d00d      	beq.n	800a8f8 <ADC_Enable+0xe8>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8e0:	f043 0210 	orr.w	r2, r3, #16
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	661a      	str	r2, [r3, #96]	@ 0x60
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8ec:	f043 0201 	orr.w	r2, r3, #1
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	665a      	str	r2, [r3, #100]	@ 0x64
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e007      	b.n	800a908 <ADC_Enable+0xf8>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b01      	cmp	r3, #1
 800a904:	d1cf      	bne.n	800a8a6 <ADC_Enable+0x96>
 800a906:	2300      	movs	r3, #0
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	8000003f 	.word	0x8000003f
 800a914:	40022000 	.word	0x40022000
 800a918:	40022100 	.word	0x40022100
 800a91c:	40022300 	.word	0x40022300
 800a920:	58026300 	.word	0x58026300

0800a924 <ADC_DMAConvCplt>:
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a930:	60fb      	str	r3, [r7, #12]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a936:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d14b      	bne.n	800a9d6 <ADC_DMAConvCplt+0xb2>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a942:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	661a      	str	r2, [r3, #96]	@ 0x60
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 0308 	and.w	r3, r3, #8
 800a954:	2b00      	cmp	r3, #0
 800a956:	d021      	beq.n	800a99c <ADC_DMAConvCplt+0x78>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fe fb1b 	bl	8008f98 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d032      	beq.n	800a9ce <ADC_DMAConvCplt+0xaa>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d12b      	bne.n	800a9ce <ADC_DMAConvCplt+0xaa>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a97a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	661a      	str	r2, [r3, #96]	@ 0x60
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d11f      	bne.n	800a9ce <ADC_DMAConvCplt+0xaa>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a992:	f043 0201 	orr.w	r2, r3, #1
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	661a      	str	r2, [r3, #96]	@ 0x60
 800a99a:	e018      	b.n	800a9ce <ADC_DMAConvCplt+0xaa>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	f003 0303 	and.w	r3, r3, #3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d111      	bne.n	800a9ce <ADC_DMAConvCplt+0xaa>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	661a      	str	r2, [r3, #96]	@ 0x60
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d105      	bne.n	800a9ce <ADC_DMAConvCplt+0xaa>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9c6:	f043 0201 	orr.w	r2, r3, #1
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	661a      	str	r2, [r3, #96]	@ 0x60
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f7ff f9c6 	bl	8009d60 <HAL_ADC_ConvCpltCallback>
 800a9d4:	e00e      	b.n	800a9f4 <ADC_DMAConvCplt+0xd0>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9da:	f003 0310 	and.w	r3, r3, #16
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <ADC_DMAConvCplt+0xc6>
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f7ff f9da 	bl	8009d9c <HAL_ADC_ErrorCallback>
 800a9e8:	e004      	b.n	800a9f4 <ADC_DMAConvCplt+0xd0>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	4798      	blx	r3
 800a9f4:	bf00      	nop
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <ADC_DMAHalfConvCplt>:
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa08:	60fb      	str	r3, [r7, #12]
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f7ff f9b2 	bl	8009d74 <HAL_ADC_ConvHalfCpltCallback>
 800aa10:	bf00      	nop
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <ADC_DMAError>:
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa24:	60fb      	str	r3, [r7, #12]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	661a      	str	r2, [r3, #96]	@ 0x60
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa36:	f043 0204 	orr.w	r2, r3, #4
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	665a      	str	r2, [r3, #100]	@ 0x64
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7ff f9ac 	bl	8009d9c <HAL_ADC_ErrorCallback>
 800aa44:	bf00      	nop
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <ADC_ConfigureBoostMode>:
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a6c      	ldr	r2, [pc, #432]	@ (800ac0c <ADC_ConfigureBoostMode+0x1c0>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d004      	beq.n	800aa68 <ADC_ConfigureBoostMode+0x1c>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a6b      	ldr	r2, [pc, #428]	@ (800ac10 <ADC_ConfigureBoostMode+0x1c4>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d109      	bne.n	800aa7c <ADC_ConfigureBoostMode+0x30>
 800aa68:	4b6a      	ldr	r3, [pc, #424]	@ (800ac14 <ADC_ConfigureBoostMode+0x1c8>)
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	bf14      	ite	ne
 800aa74:	2301      	movne	r3, #1
 800aa76:	2300      	moveq	r3, #0
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	e008      	b.n	800aa8e <ADC_ConfigureBoostMode+0x42>
 800aa7c:	4b66      	ldr	r3, [pc, #408]	@ (800ac18 <ADC_ConfigureBoostMode+0x1cc>)
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bf14      	ite	ne
 800aa88:	2301      	movne	r3, #1
 800aa8a:	2300      	moveq	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d01c      	beq.n	800aacc <ADC_ConfigureBoostMode+0x80>
 800aa92:	f006 fe8b 	bl	80117ac <HAL_RCC_GetHCLKFreq>
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aaa0:	d010      	beq.n	800aac4 <ADC_ConfigureBoostMode+0x78>
 800aaa2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aaa6:	d873      	bhi.n	800ab90 <ADC_ConfigureBoostMode+0x144>
 800aaa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaac:	d002      	beq.n	800aab4 <ADC_ConfigureBoostMode+0x68>
 800aaae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aab2:	d16d      	bne.n	800ab90 <ADC_ConfigureBoostMode+0x144>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	0c1b      	lsrs	r3, r3, #16
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac0:	60fb      	str	r3, [r7, #12]
 800aac2:	e068      	b.n	800ab96 <ADC_ConfigureBoostMode+0x14a>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	089b      	lsrs	r3, r3, #2
 800aac8:	60fb      	str	r3, [r7, #12]
 800aaca:	e064      	b.n	800ab96 <ADC_ConfigureBoostMode+0x14a>
 800aacc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800aad0:	f04f 0100 	mov.w	r1, #0
 800aad4:	f008 f866 	bl	8012ba4 <HAL_RCCEx_GetPeriphCLKFreq>
 800aad8:	60f8      	str	r0, [r7, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800aae2:	d051      	beq.n	800ab88 <ADC_ConfigureBoostMode+0x13c>
 800aae4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800aae8:	d854      	bhi.n	800ab94 <ADC_ConfigureBoostMode+0x148>
 800aaea:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800aaee:	d047      	beq.n	800ab80 <ADC_ConfigureBoostMode+0x134>
 800aaf0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800aaf4:	d84e      	bhi.n	800ab94 <ADC_ConfigureBoostMode+0x148>
 800aaf6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800aafa:	d03d      	beq.n	800ab78 <ADC_ConfigureBoostMode+0x12c>
 800aafc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800ab00:	d848      	bhi.n	800ab94 <ADC_ConfigureBoostMode+0x148>
 800ab02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab06:	d033      	beq.n	800ab70 <ADC_ConfigureBoostMode+0x124>
 800ab08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab0c:	d842      	bhi.n	800ab94 <ADC_ConfigureBoostMode+0x148>
 800ab0e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800ab12:	d029      	beq.n	800ab68 <ADC_ConfigureBoostMode+0x11c>
 800ab14:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800ab18:	d83c      	bhi.n	800ab94 <ADC_ConfigureBoostMode+0x148>
 800ab1a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800ab1e:	d01a      	beq.n	800ab56 <ADC_ConfigureBoostMode+0x10a>
 800ab20:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800ab24:	d836      	bhi.n	800ab94 <ADC_ConfigureBoostMode+0x148>
 800ab26:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800ab2a:	d014      	beq.n	800ab56 <ADC_ConfigureBoostMode+0x10a>
 800ab2c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800ab30:	d830      	bhi.n	800ab94 <ADC_ConfigureBoostMode+0x148>
 800ab32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab36:	d00e      	beq.n	800ab56 <ADC_ConfigureBoostMode+0x10a>
 800ab38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab3c:	d82a      	bhi.n	800ab94 <ADC_ConfigureBoostMode+0x148>
 800ab3e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ab42:	d008      	beq.n	800ab56 <ADC_ConfigureBoostMode+0x10a>
 800ab44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800ab48:	d824      	bhi.n	800ab94 <ADC_ConfigureBoostMode+0x148>
 800ab4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab4e:	d002      	beq.n	800ab56 <ADC_ConfigureBoostMode+0x10a>
 800ab50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ab54:	d11e      	bne.n	800ab94 <ADC_ConfigureBoostMode+0x148>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	0c9b      	lsrs	r3, r3, #18
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	e016      	b.n	800ab96 <ADC_ConfigureBoostMode+0x14a>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	091b      	lsrs	r3, r3, #4
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	e012      	b.n	800ab96 <ADC_ConfigureBoostMode+0x14a>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	095b      	lsrs	r3, r3, #5
 800ab74:	60fb      	str	r3, [r7, #12]
 800ab76:	e00e      	b.n	800ab96 <ADC_ConfigureBoostMode+0x14a>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	099b      	lsrs	r3, r3, #6
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	e00a      	b.n	800ab96 <ADC_ConfigureBoostMode+0x14a>
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	09db      	lsrs	r3, r3, #7
 800ab84:	60fb      	str	r3, [r7, #12]
 800ab86:	e006      	b.n	800ab96 <ADC_ConfigureBoostMode+0x14a>
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	0a1b      	lsrs	r3, r3, #8
 800ab8c:	60fb      	str	r3, [r7, #12]
 800ab8e:	e002      	b.n	800ab96 <ADC_ConfigureBoostMode+0x14a>
 800ab90:	bf00      	nop
 800ab92:	e000      	b.n	800ab96 <ADC_ConfigureBoostMode+0x14a>
 800ab94:	bf00      	nop
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	085b      	lsrs	r3, r3, #1
 800ab9a:	60fb      	str	r3, [r7, #12]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	4a1f      	ldr	r2, [pc, #124]	@ (800ac1c <ADC_ConfigureBoostMode+0x1d0>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d808      	bhi.n	800abb6 <ADC_ConfigureBoostMode+0x16a>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	689a      	ldr	r2, [r3, #8]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800abb2:	609a      	str	r2, [r3, #8]
 800abb4:	e025      	b.n	800ac02 <ADC_ConfigureBoostMode+0x1b6>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	4a19      	ldr	r2, [pc, #100]	@ (800ac20 <ADC_ConfigureBoostMode+0x1d4>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d80a      	bhi.n	800abd4 <ADC_ConfigureBoostMode+0x188>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abd0:	609a      	str	r2, [r3, #8]
 800abd2:	e016      	b.n	800ac02 <ADC_ConfigureBoostMode+0x1b6>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	4a13      	ldr	r2, [pc, #76]	@ (800ac24 <ADC_ConfigureBoostMode+0x1d8>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d80a      	bhi.n	800abf2 <ADC_ConfigureBoostMode+0x1a6>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abee:	609a      	str	r2, [r3, #8]
 800abf0:	e007      	b.n	800ac02 <ADC_ConfigureBoostMode+0x1b6>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689a      	ldr	r2, [r3, #8]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800ac00:	609a      	str	r2, [r3, #8]
 800ac02:	bf00      	nop
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	40022000 	.word	0x40022000
 800ac10:	40022100 	.word	0x40022100
 800ac14:	40022300 	.word	0x40022300
 800ac18:	58026300 	.word	0x58026300
 800ac1c:	005f5e10 	.word	0x005f5e10
 800ac20:	00bebc20 	.word	0x00bebc20
 800ac24:	017d7840 	.word	0x017d7840

0800ac28 <HAL_ADCEx_InjectedConvCpltCallback>:
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <HAL_ADCEx_InjectedQueueOverflowCallback>:
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	bf00      	nop
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <HAL_ADCEx_EndOfSamplingCallback>:
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <__NVIC_SetPriorityGrouping>:
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f003 0307 	and.w	r3, r3, #7
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	4b0b      	ldr	r3, [pc, #44]	@ (800accc <__NVIC_SetPriorityGrouping+0x40>)
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	60bb      	str	r3, [r7, #8]
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800aca8:	4013      	ands	r3, r2
 800acaa:	60bb      	str	r3, [r7, #8]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	021a      	lsls	r2, r3, #8
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	431a      	orrs	r2, r3
 800acb4:	4b06      	ldr	r3, [pc, #24]	@ (800acd0 <__NVIC_SetPriorityGrouping+0x44>)
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60bb      	str	r3, [r7, #8]
 800acba:	4a04      	ldr	r2, [pc, #16]	@ (800accc <__NVIC_SetPriorityGrouping+0x40>)
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	60d3      	str	r3, [r2, #12]
 800acc0:	bf00      	nop
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	e000ed00 	.word	0xe000ed00
 800acd0:	05fa0000 	.word	0x05fa0000

0800acd4 <__NVIC_GetPriorityGrouping>:
 800acd4:	b480      	push	{r7}
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	4b04      	ldr	r3, [pc, #16]	@ (800acec <__NVIC_GetPriorityGrouping+0x18>)
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	0a1b      	lsrs	r3, r3, #8
 800acde:	f003 0307 	and.w	r3, r3, #7
 800ace2:	4618      	mov	r0, r3
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	e000ed00 	.word	0xe000ed00

0800acf0 <__NVIC_EnableIRQ>:
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	80fb      	strh	r3, [r7, #6]
 800acfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	db0b      	blt.n	800ad1a <__NVIC_EnableIRQ+0x2a>
 800ad02:	88fb      	ldrh	r3, [r7, #6]
 800ad04:	f003 021f 	and.w	r2, r3, #31
 800ad08:	4907      	ldr	r1, [pc, #28]	@ (800ad28 <__NVIC_EnableIRQ+0x38>)
 800ad0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad0e:	095b      	lsrs	r3, r3, #5
 800ad10:	2001      	movs	r0, #1
 800ad12:	fa00 f202 	lsl.w	r2, r0, r2
 800ad16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ad1a:	bf00      	nop
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	e000e100 	.word	0xe000e100

0800ad2c <__NVIC_SetPriority>:
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	4603      	mov	r3, r0
 800ad34:	6039      	str	r1, [r7, #0]
 800ad36:	80fb      	strh	r3, [r7, #6]
 800ad38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	db0a      	blt.n	800ad56 <__NVIC_SetPriority+0x2a>
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	490c      	ldr	r1, [pc, #48]	@ (800ad78 <__NVIC_SetPriority+0x4c>)
 800ad46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad4a:	0112      	lsls	r2, r2, #4
 800ad4c:	b2d2      	uxtb	r2, r2
 800ad4e:	440b      	add	r3, r1
 800ad50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800ad54:	e00a      	b.n	800ad6c <__NVIC_SetPriority+0x40>
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	b2da      	uxtb	r2, r3
 800ad5a:	4908      	ldr	r1, [pc, #32]	@ (800ad7c <__NVIC_SetPriority+0x50>)
 800ad5c:	88fb      	ldrh	r3, [r7, #6]
 800ad5e:	f003 030f 	and.w	r3, r3, #15
 800ad62:	3b04      	subs	r3, #4
 800ad64:	0112      	lsls	r2, r2, #4
 800ad66:	b2d2      	uxtb	r2, r2
 800ad68:	440b      	add	r3, r1
 800ad6a:	761a      	strb	r2, [r3, #24]
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	e000e100 	.word	0xe000e100
 800ad7c:	e000ed00 	.word	0xe000ed00

0800ad80 <NVIC_EncodePriority>:
 800ad80:	b480      	push	{r7}
 800ad82:	b089      	sub	sp, #36	@ 0x24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f003 0307 	and.w	r3, r3, #7
 800ad92:	61fb      	str	r3, [r7, #28]
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	f1c3 0307 	rsb	r3, r3, #7
 800ad9a:	2b04      	cmp	r3, #4
 800ad9c:	bf28      	it	cs
 800ad9e:	2304      	movcs	r3, #4
 800ada0:	61bb      	str	r3, [r7, #24]
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	3304      	adds	r3, #4
 800ada6:	2b06      	cmp	r3, #6
 800ada8:	d902      	bls.n	800adb0 <NVIC_EncodePriority+0x30>
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	3b03      	subs	r3, #3
 800adae:	e000      	b.n	800adb2 <NVIC_EncodePriority+0x32>
 800adb0:	2300      	movs	r3, #0
 800adb2:	617b      	str	r3, [r7, #20]
 800adb4:	f04f 32ff 	mov.w	r2, #4294967295
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	fa02 f303 	lsl.w	r3, r2, r3
 800adbe:	43da      	mvns	r2, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	401a      	ands	r2, r3
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	409a      	lsls	r2, r3
 800adc8:	f04f 31ff 	mov.w	r1, #4294967295
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	fa01 f303 	lsl.w	r3, r1, r3
 800add2:	43d9      	mvns	r1, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	400b      	ands	r3, r1
 800add8:	4313      	orrs	r3, r2
 800adda:	4618      	mov	r0, r3
 800addc:	3724      	adds	r7, #36	@ 0x24
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
	...

0800ade8 <SysTick_Config>:
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	3b01      	subs	r3, #1
 800adf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adf8:	d301      	bcc.n	800adfe <SysTick_Config+0x16>
 800adfa:	2301      	movs	r3, #1
 800adfc:	e00f      	b.n	800ae1e <SysTick_Config+0x36>
 800adfe:	4a0a      	ldr	r2, [pc, #40]	@ (800ae28 <SysTick_Config+0x40>)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	6053      	str	r3, [r2, #4]
 800ae06:	210f      	movs	r1, #15
 800ae08:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0c:	f7ff ff8e 	bl	800ad2c <__NVIC_SetPriority>
 800ae10:	4b05      	ldr	r3, [pc, #20]	@ (800ae28 <SysTick_Config+0x40>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	609a      	str	r2, [r3, #8]
 800ae16:	4b04      	ldr	r3, [pc, #16]	@ (800ae28 <SysTick_Config+0x40>)
 800ae18:	2207      	movs	r2, #7
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	e000e010 	.word	0xe000e010

0800ae2c <HAL_NVIC_SetPriorityGrouping>:
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff ff29 	bl	800ac8c <__NVIC_SetPriorityGrouping>
 800ae3a:	bf00      	nop
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <HAL_NVIC_SetPriority>:
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b086      	sub	sp, #24
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	4603      	mov	r3, r0
 800ae4a:	60b9      	str	r1, [r7, #8]
 800ae4c:	607a      	str	r2, [r7, #4]
 800ae4e:	81fb      	strh	r3, [r7, #14]
 800ae50:	f7ff ff40 	bl	800acd4 <__NVIC_GetPriorityGrouping>
 800ae54:	6178      	str	r0, [r7, #20]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	68b9      	ldr	r1, [r7, #8]
 800ae5a:	6978      	ldr	r0, [r7, #20]
 800ae5c:	f7ff ff90 	bl	800ad80 <NVIC_EncodePriority>
 800ae60:	4602      	mov	r2, r0
 800ae62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ae66:	4611      	mov	r1, r2
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff ff5f 	bl	800ad2c <__NVIC_SetPriority>
 800ae6e:	bf00      	nop
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <HAL_NVIC_EnableIRQ>:
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	80fb      	strh	r3, [r7, #6]
 800ae80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff ff33 	bl	800acf0 <__NVIC_EnableIRQ>
 800ae8a:	bf00      	nop
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <HAL_SYSTICK_Config>:
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f7ff ffa4 	bl	800ade8 <SysTick_Config>
 800aea0:	4603      	mov	r3, r0
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <HAL_MPU_Disable>:
 800aeac:	b480      	push	{r7}
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	f3bf 8f5f 	dmb	sy
 800aeb4:	bf00      	nop
 800aeb6:	4b07      	ldr	r3, [pc, #28]	@ (800aed4 <HAL_MPU_Disable+0x28>)
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeba:	4a06      	ldr	r2, [pc, #24]	@ (800aed4 <HAL_MPU_Disable+0x28>)
 800aebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aec0:	6253      	str	r3, [r2, #36]	@ 0x24
 800aec2:	4b05      	ldr	r3, [pc, #20]	@ (800aed8 <HAL_MPU_Disable+0x2c>)
 800aec4:	2200      	movs	r2, #0
 800aec6:	605a      	str	r2, [r3, #4]
 800aec8:	bf00      	nop
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	e000ed00 	.word	0xe000ed00
 800aed8:	e000ed90 	.word	0xe000ed90

0800aedc <HAL_MPU_Enable>:
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	4a0b      	ldr	r2, [pc, #44]	@ (800af14 <HAL_MPU_Enable+0x38>)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f043 0301 	orr.w	r3, r3, #1
 800aeec:	6053      	str	r3, [r2, #4]
 800aeee:	4b0a      	ldr	r3, [pc, #40]	@ (800af18 <HAL_MPU_Enable+0x3c>)
 800aef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef2:	4a09      	ldr	r2, [pc, #36]	@ (800af18 <HAL_MPU_Enable+0x3c>)
 800aef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aef8:	6253      	str	r3, [r2, #36]	@ 0x24
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	bf00      	nop
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	e000ed90 	.word	0xe000ed90
 800af18:	e000ed00 	.word	0xe000ed00

0800af1c <HAL_MPU_ConfigRegion>:
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	785a      	ldrb	r2, [r3, #1]
 800af28:	4b1b      	ldr	r3, [pc, #108]	@ (800af98 <HAL_MPU_ConfigRegion+0x7c>)
 800af2a:	609a      	str	r2, [r3, #8]
 800af2c:	4b1a      	ldr	r3, [pc, #104]	@ (800af98 <HAL_MPU_ConfigRegion+0x7c>)
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	4a19      	ldr	r2, [pc, #100]	@ (800af98 <HAL_MPU_ConfigRegion+0x7c>)
 800af32:	f023 0301 	bic.w	r3, r3, #1
 800af36:	6113      	str	r3, [r2, #16]
 800af38:	4a17      	ldr	r2, [pc, #92]	@ (800af98 <HAL_MPU_ConfigRegion+0x7c>)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	60d3      	str	r3, [r2, #12]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7b1b      	ldrb	r3, [r3, #12]
 800af44:	071a      	lsls	r2, r3, #28
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	7adb      	ldrb	r3, [r3, #11]
 800af4a:	061b      	lsls	r3, r3, #24
 800af4c:	431a      	orrs	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7a9b      	ldrb	r3, [r3, #10]
 800af52:	04db      	lsls	r3, r3, #19
 800af54:	431a      	orrs	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7b5b      	ldrb	r3, [r3, #13]
 800af5a:	049b      	lsls	r3, r3, #18
 800af5c:	431a      	orrs	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	7b9b      	ldrb	r3, [r3, #14]
 800af62:	045b      	lsls	r3, r3, #17
 800af64:	431a      	orrs	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	7bdb      	ldrb	r3, [r3, #15]
 800af6a:	041b      	lsls	r3, r3, #16
 800af6c:	431a      	orrs	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7a5b      	ldrb	r3, [r3, #9]
 800af72:	021b      	lsls	r3, r3, #8
 800af74:	431a      	orrs	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	7a1b      	ldrb	r3, [r3, #8]
 800af7a:	005b      	lsls	r3, r3, #1
 800af7c:	4313      	orrs	r3, r2
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	7812      	ldrb	r2, [r2, #0]
 800af82:	4611      	mov	r1, r2
 800af84:	4a04      	ldr	r2, [pc, #16]	@ (800af98 <HAL_MPU_ConfigRegion+0x7c>)
 800af86:	430b      	orrs	r3, r1
 800af88:	6113      	str	r3, [r2, #16]
 800af8a:	bf00      	nop
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	e000ed90 	.word	0xe000ed90

0800af9c <HAL_DMA_Init>:
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	f7fd fea2 	bl	8008cec <HAL_GetTick>
 800afa8:	6138      	str	r0, [r7, #16]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d101      	bne.n	800afb4 <HAL_DMA_Init+0x18>
 800afb0:	2301      	movs	r3, #1
 800afb2:	e312      	b.n	800b5da <HAL_DMA_Init+0x63e>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a66      	ldr	r2, [pc, #408]	@ (800b154 <HAL_DMA_Init+0x1b8>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d04a      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a65      	ldr	r2, [pc, #404]	@ (800b158 <HAL_DMA_Init+0x1bc>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d045      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a63      	ldr	r2, [pc, #396]	@ (800b15c <HAL_DMA_Init+0x1c0>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d040      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a62      	ldr	r2, [pc, #392]	@ (800b160 <HAL_DMA_Init+0x1c4>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d03b      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a60      	ldr	r2, [pc, #384]	@ (800b164 <HAL_DMA_Init+0x1c8>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d036      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a5f      	ldr	r2, [pc, #380]	@ (800b168 <HAL_DMA_Init+0x1cc>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d031      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a5d      	ldr	r2, [pc, #372]	@ (800b16c <HAL_DMA_Init+0x1d0>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d02c      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a5c      	ldr	r2, [pc, #368]	@ (800b170 <HAL_DMA_Init+0x1d4>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d027      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a5a      	ldr	r2, [pc, #360]	@ (800b174 <HAL_DMA_Init+0x1d8>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d022      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a59      	ldr	r2, [pc, #356]	@ (800b178 <HAL_DMA_Init+0x1dc>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d01d      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a57      	ldr	r2, [pc, #348]	@ (800b17c <HAL_DMA_Init+0x1e0>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d018      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a56      	ldr	r2, [pc, #344]	@ (800b180 <HAL_DMA_Init+0x1e4>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d013      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a54      	ldr	r2, [pc, #336]	@ (800b184 <HAL_DMA_Init+0x1e8>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d00e      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a53      	ldr	r2, [pc, #332]	@ (800b188 <HAL_DMA_Init+0x1ec>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d009      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a51      	ldr	r2, [pc, #324]	@ (800b18c <HAL_DMA_Init+0x1f0>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d004      	beq.n	800b054 <HAL_DMA_Init+0xb8>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a50      	ldr	r2, [pc, #320]	@ (800b190 <HAL_DMA_Init+0x1f4>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d101      	bne.n	800b058 <HAL_DMA_Init+0xbc>
 800b054:	2301      	movs	r3, #1
 800b056:	e000      	b.n	800b05a <HAL_DMA_Init+0xbe>
 800b058:	2300      	movs	r3, #0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f000 813c 	beq.w	800b2d8 <HAL_DMA_Init+0x33c>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2202      	movs	r2, #2
 800b064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a37      	ldr	r2, [pc, #220]	@ (800b154 <HAL_DMA_Init+0x1b8>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d04a      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a36      	ldr	r2, [pc, #216]	@ (800b158 <HAL_DMA_Init+0x1bc>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d045      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a34      	ldr	r2, [pc, #208]	@ (800b15c <HAL_DMA_Init+0x1c0>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d040      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a33      	ldr	r2, [pc, #204]	@ (800b160 <HAL_DMA_Init+0x1c4>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d03b      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a31      	ldr	r2, [pc, #196]	@ (800b164 <HAL_DMA_Init+0x1c8>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d036      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a30      	ldr	r2, [pc, #192]	@ (800b168 <HAL_DMA_Init+0x1cc>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d031      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a2e      	ldr	r2, [pc, #184]	@ (800b16c <HAL_DMA_Init+0x1d0>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d02c      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a2d      	ldr	r2, [pc, #180]	@ (800b170 <HAL_DMA_Init+0x1d4>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d027      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a2b      	ldr	r2, [pc, #172]	@ (800b174 <HAL_DMA_Init+0x1d8>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d022      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a2a      	ldr	r2, [pc, #168]	@ (800b178 <HAL_DMA_Init+0x1dc>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d01d      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a28      	ldr	r2, [pc, #160]	@ (800b17c <HAL_DMA_Init+0x1e0>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d018      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a27      	ldr	r2, [pc, #156]	@ (800b180 <HAL_DMA_Init+0x1e4>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d013      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a25      	ldr	r2, [pc, #148]	@ (800b184 <HAL_DMA_Init+0x1e8>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00e      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a24      	ldr	r2, [pc, #144]	@ (800b188 <HAL_DMA_Init+0x1ec>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d009      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a22      	ldr	r2, [pc, #136]	@ (800b18c <HAL_DMA_Init+0x1f0>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d004      	beq.n	800b110 <HAL_DMA_Init+0x174>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a21      	ldr	r2, [pc, #132]	@ (800b190 <HAL_DMA_Init+0x1f4>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d108      	bne.n	800b122 <HAL_DMA_Init+0x186>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 0201 	bic.w	r2, r2, #1
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	e007      	b.n	800b132 <HAL_DMA_Init+0x196>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f022 0201 	bic.w	r2, r2, #1
 800b130:	601a      	str	r2, [r3, #0]
 800b132:	e02f      	b.n	800b194 <HAL_DMA_Init+0x1f8>
 800b134:	f7fd fdda 	bl	8008cec <HAL_GetTick>
 800b138:	4602      	mov	r2, r0
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	2b05      	cmp	r3, #5
 800b140:	d928      	bls.n	800b194 <HAL_DMA_Init+0x1f8>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2220      	movs	r2, #32
 800b146:	655a      	str	r2, [r3, #84]	@ 0x54
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2203      	movs	r2, #3
 800b14c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b150:	2301      	movs	r3, #1
 800b152:	e242      	b.n	800b5da <HAL_DMA_Init+0x63e>
 800b154:	40020010 	.word	0x40020010
 800b158:	40020028 	.word	0x40020028
 800b15c:	40020040 	.word	0x40020040
 800b160:	40020058 	.word	0x40020058
 800b164:	40020070 	.word	0x40020070
 800b168:	40020088 	.word	0x40020088
 800b16c:	400200a0 	.word	0x400200a0
 800b170:	400200b8 	.word	0x400200b8
 800b174:	40020410 	.word	0x40020410
 800b178:	40020428 	.word	0x40020428
 800b17c:	40020440 	.word	0x40020440
 800b180:	40020458 	.word	0x40020458
 800b184:	40020470 	.word	0x40020470
 800b188:	40020488 	.word	0x40020488
 800b18c:	400204a0 	.word	0x400204a0
 800b190:	400204b8 	.word	0x400204b8
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f003 0301 	and.w	r3, r3, #1
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1c8      	bne.n	800b134 <HAL_DMA_Init+0x198>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	617b      	str	r3, [r7, #20]
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	4b83      	ldr	r3, [pc, #524]	@ (800b3bc <HAL_DMA_Init+0x420>)
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	617b      	str	r3, [r7, #20]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	689a      	ldr	r2, [r3, #8]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	695b      	ldr	r3, [r3, #20]
 800b1c6:	431a      	orrs	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a1b      	ldr	r3, [r3, #32]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	697a      	ldr	r2, [r7, #20]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	617b      	str	r3, [r7, #20]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e4:	2b04      	cmp	r3, #4
 800b1e6:	d107      	bne.n	800b1f8 <HAL_DMA_Init+0x25c>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	697a      	ldr	r2, [r7, #20]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	617b      	str	r3, [r7, #20]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	2b28      	cmp	r3, #40	@ 0x28
 800b1fe:	d903      	bls.n	800b208 <HAL_DMA_Init+0x26c>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	2b2e      	cmp	r3, #46	@ 0x2e
 800b206:	d91f      	bls.n	800b248 <HAL_DMA_Init+0x2ac>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b20e:	d903      	bls.n	800b218 <HAL_DMA_Init+0x27c>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	2b42      	cmp	r3, #66	@ 0x42
 800b216:	d917      	bls.n	800b248 <HAL_DMA_Init+0x2ac>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	2b46      	cmp	r3, #70	@ 0x46
 800b21e:	d903      	bls.n	800b228 <HAL_DMA_Init+0x28c>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	2b48      	cmp	r3, #72	@ 0x48
 800b226:	d90f      	bls.n	800b248 <HAL_DMA_Init+0x2ac>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	2b4e      	cmp	r3, #78	@ 0x4e
 800b22e:	d903      	bls.n	800b238 <HAL_DMA_Init+0x29c>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	2b52      	cmp	r3, #82	@ 0x52
 800b236:	d907      	bls.n	800b248 <HAL_DMA_Init+0x2ac>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	2b73      	cmp	r3, #115	@ 0x73
 800b23e:	d905      	bls.n	800b24c <HAL_DMA_Init+0x2b0>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	2b77      	cmp	r3, #119	@ 0x77
 800b246:	d801      	bhi.n	800b24c <HAL_DMA_Init+0x2b0>
 800b248:	2301      	movs	r3, #1
 800b24a:	e000      	b.n	800b24e <HAL_DMA_Init+0x2b2>
 800b24c:	2300      	movs	r3, #0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d003      	beq.n	800b25a <HAL_DMA_Init+0x2be>
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b258:	617b      	str	r3, [r7, #20]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	695b      	ldr	r3, [r3, #20]
 800b268:	617b      	str	r3, [r7, #20]
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f023 0307 	bic.w	r3, r3, #7
 800b270:	617b      	str	r3, [r7, #20]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b276:	697a      	ldr	r2, [r7, #20]
 800b278:	4313      	orrs	r3, r2
 800b27a:	617b      	str	r3, [r7, #20]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b280:	2b04      	cmp	r3, #4
 800b282:	d117      	bne.n	800b2b4 <HAL_DMA_Init+0x318>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	617b      	str	r3, [r7, #20]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00e      	beq.n	800b2b4 <HAL_DMA_Init+0x318>
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f002 fb48 	bl	800d92c <DMA_CheckFifoParam>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d008      	beq.n	800b2b4 <HAL_DMA_Init+0x318>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2240      	movs	r2, #64	@ 0x40
 800b2a6:	655a      	str	r2, [r3, #84]	@ 0x54
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e192      	b.n	800b5da <HAL_DMA_Init+0x63e>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	615a      	str	r2, [r3, #20]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f002 fa83 	bl	800d7c8 <DMA_CalcBaseAndBitshift>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	60bb      	str	r3, [r7, #8]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2ca:	f003 031f 	and.w	r3, r3, #31
 800b2ce:	223f      	movs	r2, #63	@ 0x3f
 800b2d0:	409a      	lsls	r2, r3
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	609a      	str	r2, [r3, #8]
 800b2d6:	e0c8      	b.n	800b46a <HAL_DMA_Init+0x4ce>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a38      	ldr	r2, [pc, #224]	@ (800b3c0 <HAL_DMA_Init+0x424>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d022      	beq.n	800b328 <HAL_DMA_Init+0x38c>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a37      	ldr	r2, [pc, #220]	@ (800b3c4 <HAL_DMA_Init+0x428>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d01d      	beq.n	800b328 <HAL_DMA_Init+0x38c>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a35      	ldr	r2, [pc, #212]	@ (800b3c8 <HAL_DMA_Init+0x42c>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d018      	beq.n	800b328 <HAL_DMA_Init+0x38c>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a34      	ldr	r2, [pc, #208]	@ (800b3cc <HAL_DMA_Init+0x430>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d013      	beq.n	800b328 <HAL_DMA_Init+0x38c>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a32      	ldr	r2, [pc, #200]	@ (800b3d0 <HAL_DMA_Init+0x434>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d00e      	beq.n	800b328 <HAL_DMA_Init+0x38c>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a31      	ldr	r2, [pc, #196]	@ (800b3d4 <HAL_DMA_Init+0x438>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d009      	beq.n	800b328 <HAL_DMA_Init+0x38c>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a2f      	ldr	r2, [pc, #188]	@ (800b3d8 <HAL_DMA_Init+0x43c>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d004      	beq.n	800b328 <HAL_DMA_Init+0x38c>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a2e      	ldr	r2, [pc, #184]	@ (800b3dc <HAL_DMA_Init+0x440>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d101      	bne.n	800b32c <HAL_DMA_Init+0x390>
 800b328:	2301      	movs	r3, #1
 800b32a:	e000      	b.n	800b32e <HAL_DMA_Init+0x392>
 800b32c:	2300      	movs	r3, #0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f000 8092 	beq.w	800b458 <HAL_DMA_Init+0x4bc>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a21      	ldr	r2, [pc, #132]	@ (800b3c0 <HAL_DMA_Init+0x424>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d021      	beq.n	800b382 <HAL_DMA_Init+0x3e6>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a20      	ldr	r2, [pc, #128]	@ (800b3c4 <HAL_DMA_Init+0x428>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d01c      	beq.n	800b382 <HAL_DMA_Init+0x3e6>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a1e      	ldr	r2, [pc, #120]	@ (800b3c8 <HAL_DMA_Init+0x42c>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d017      	beq.n	800b382 <HAL_DMA_Init+0x3e6>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a1d      	ldr	r2, [pc, #116]	@ (800b3cc <HAL_DMA_Init+0x430>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d012      	beq.n	800b382 <HAL_DMA_Init+0x3e6>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a1b      	ldr	r2, [pc, #108]	@ (800b3d0 <HAL_DMA_Init+0x434>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d00d      	beq.n	800b382 <HAL_DMA_Init+0x3e6>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a1a      	ldr	r2, [pc, #104]	@ (800b3d4 <HAL_DMA_Init+0x438>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d008      	beq.n	800b382 <HAL_DMA_Init+0x3e6>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a18      	ldr	r2, [pc, #96]	@ (800b3d8 <HAL_DMA_Init+0x43c>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d003      	beq.n	800b382 <HAL_DMA_Init+0x3e6>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a17      	ldr	r2, [pc, #92]	@ (800b3dc <HAL_DMA_Init+0x440>)
 800b380:	4293      	cmp	r3, r2
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2202      	movs	r2, #2
 800b386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	617b      	str	r3, [r7, #20]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	4b10      	ldr	r3, [pc, #64]	@ (800b3e0 <HAL_DMA_Init+0x444>)
 800b39e:	4013      	ands	r3, r2
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	2b40      	cmp	r3, #64	@ 0x40
 800b3a8:	d01c      	beq.n	800b3e4 <HAL_DMA_Init+0x448>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	2b80      	cmp	r3, #128	@ 0x80
 800b3b0:	d102      	bne.n	800b3b8 <HAL_DMA_Init+0x41c>
 800b3b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b3b6:	e016      	b.n	800b3e6 <HAL_DMA_Init+0x44a>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	e014      	b.n	800b3e6 <HAL_DMA_Init+0x44a>
 800b3bc:	fe10803f 	.word	0xfe10803f
 800b3c0:	58025408 	.word	0x58025408
 800b3c4:	5802541c 	.word	0x5802541c
 800b3c8:	58025430 	.word	0x58025430
 800b3cc:	58025444 	.word	0x58025444
 800b3d0:	58025458 	.word	0x58025458
 800b3d4:	5802546c 	.word	0x5802546c
 800b3d8:	58025480 	.word	0x58025480
 800b3dc:	58025494 	.word	0x58025494
 800b3e0:	fffe000f 	.word	0xfffe000f
 800b3e4:	2310      	movs	r3, #16
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	68d2      	ldr	r2, [r2, #12]
 800b3ea:	08d2      	lsrs	r2, r2, #3
 800b3ec:	431a      	orrs	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	08db      	lsrs	r3, r3, #3
 800b3f4:	431a      	orrs	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	08db      	lsrs	r3, r3, #3
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	699b      	ldr	r3, [r3, #24]
 800b402:	08db      	lsrs	r3, r3, #3
 800b404:	431a      	orrs	r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	69db      	ldr	r3, [r3, #28]
 800b40a:	08db      	lsrs	r3, r3, #3
 800b40c:	431a      	orrs	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	091b      	lsrs	r3, r3, #4
 800b414:	4313      	orrs	r3, r2
 800b416:	697a      	ldr	r2, [r7, #20]
 800b418:	4313      	orrs	r3, r2
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	697a      	ldr	r2, [r7, #20]
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	461a      	mov	r2, r3
 800b42a:	4b6e      	ldr	r3, [pc, #440]	@ (800b5e4 <HAL_DMA_Init+0x648>)
 800b42c:	4413      	add	r3, r2
 800b42e:	4a6e      	ldr	r2, [pc, #440]	@ (800b5e8 <HAL_DMA_Init+0x64c>)
 800b430:	fba2 2303 	umull	r2, r3, r2, r3
 800b434:	091b      	lsrs	r3, r3, #4
 800b436:	009a      	lsls	r2, r3, #2
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f002 f9c3 	bl	800d7c8 <DMA_CalcBaseAndBitshift>
 800b442:	4603      	mov	r3, r0
 800b444:	60fb      	str	r3, [r7, #12]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b44a:	f003 031f 	and.w	r3, r3, #31
 800b44e:	2201      	movs	r2, #1
 800b450:	409a      	lsls	r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	605a      	str	r2, [r3, #4]
 800b456:	e008      	b.n	800b46a <HAL_DMA_Init+0x4ce>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2240      	movs	r2, #64	@ 0x40
 800b45c:	655a      	str	r2, [r3, #84]	@ 0x54
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2203      	movs	r2, #3
 800b462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b466:	2301      	movs	r3, #1
 800b468:	e0b7      	b.n	800b5da <HAL_DMA_Init+0x63e>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a5f      	ldr	r2, [pc, #380]	@ (800b5ec <HAL_DMA_Init+0x650>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d072      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a5d      	ldr	r2, [pc, #372]	@ (800b5f0 <HAL_DMA_Init+0x654>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d06d      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a5c      	ldr	r2, [pc, #368]	@ (800b5f4 <HAL_DMA_Init+0x658>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d068      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a5a      	ldr	r2, [pc, #360]	@ (800b5f8 <HAL_DMA_Init+0x65c>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d063      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a59      	ldr	r2, [pc, #356]	@ (800b5fc <HAL_DMA_Init+0x660>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d05e      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a57      	ldr	r2, [pc, #348]	@ (800b600 <HAL_DMA_Init+0x664>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d059      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a56      	ldr	r2, [pc, #344]	@ (800b604 <HAL_DMA_Init+0x668>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d054      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a54      	ldr	r2, [pc, #336]	@ (800b608 <HAL_DMA_Init+0x66c>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d04f      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a53      	ldr	r2, [pc, #332]	@ (800b60c <HAL_DMA_Init+0x670>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d04a      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a51      	ldr	r2, [pc, #324]	@ (800b610 <HAL_DMA_Init+0x674>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d045      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a50      	ldr	r2, [pc, #320]	@ (800b614 <HAL_DMA_Init+0x678>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d040      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a4e      	ldr	r2, [pc, #312]	@ (800b618 <HAL_DMA_Init+0x67c>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d03b      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a4d      	ldr	r2, [pc, #308]	@ (800b61c <HAL_DMA_Init+0x680>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d036      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a4b      	ldr	r2, [pc, #300]	@ (800b620 <HAL_DMA_Init+0x684>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d031      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a4a      	ldr	r2, [pc, #296]	@ (800b624 <HAL_DMA_Init+0x688>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d02c      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a48      	ldr	r2, [pc, #288]	@ (800b628 <HAL_DMA_Init+0x68c>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d027      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a47      	ldr	r2, [pc, #284]	@ (800b62c <HAL_DMA_Init+0x690>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d022      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a45      	ldr	r2, [pc, #276]	@ (800b630 <HAL_DMA_Init+0x694>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d01d      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a44      	ldr	r2, [pc, #272]	@ (800b634 <HAL_DMA_Init+0x698>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d018      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a42      	ldr	r2, [pc, #264]	@ (800b638 <HAL_DMA_Init+0x69c>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d013      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a41      	ldr	r2, [pc, #260]	@ (800b63c <HAL_DMA_Init+0x6a0>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d00e      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a3f      	ldr	r2, [pc, #252]	@ (800b640 <HAL_DMA_Init+0x6a4>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d009      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a3e      	ldr	r2, [pc, #248]	@ (800b644 <HAL_DMA_Init+0x6a8>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d004      	beq.n	800b55a <HAL_DMA_Init+0x5be>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a3c      	ldr	r2, [pc, #240]	@ (800b648 <HAL_DMA_Init+0x6ac>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d101      	bne.n	800b55e <HAL_DMA_Init+0x5c2>
 800b55a:	2301      	movs	r3, #1
 800b55c:	e000      	b.n	800b560 <HAL_DMA_Init+0x5c4>
 800b55e:	2300      	movs	r3, #0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d032      	beq.n	800b5ca <HAL_DMA_Init+0x62e>
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f002 fa5d 	bl	800da24 <DMA_CalcDMAMUXChannelBaseAndMask>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	2b80      	cmp	r3, #128	@ 0x80
 800b570:	d102      	bne.n	800b578 <HAL_DMA_Init+0x5dc>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	605a      	str	r2, [r3, #4]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b580:	b2d2      	uxtb	r2, r2
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b58c:	605a      	str	r2, [r3, #4]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d010      	beq.n	800b5b8 <HAL_DMA_Init+0x61c>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	2b08      	cmp	r3, #8
 800b59c:	d80c      	bhi.n	800b5b8 <HAL_DMA_Init+0x61c>
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f002 fada 	bl	800db58 <DMA_CalcDMAMUXRequestGenBaseAndMask>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b5b4:	605a      	str	r2, [r3, #4]
 800b5b6:	e008      	b.n	800b5ca <HAL_DMA_Init+0x62e>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	671a      	str	r2, [r3, #112]	@ 0x70
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	675a      	str	r2, [r3, #116]	@ 0x74
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	655a      	str	r2, [r3, #84]	@ 0x54
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	a7fdabf8 	.word	0xa7fdabf8
 800b5e8:	cccccccd 	.word	0xcccccccd
 800b5ec:	40020010 	.word	0x40020010
 800b5f0:	40020028 	.word	0x40020028
 800b5f4:	40020040 	.word	0x40020040
 800b5f8:	40020058 	.word	0x40020058
 800b5fc:	40020070 	.word	0x40020070
 800b600:	40020088 	.word	0x40020088
 800b604:	400200a0 	.word	0x400200a0
 800b608:	400200b8 	.word	0x400200b8
 800b60c:	40020410 	.word	0x40020410
 800b610:	40020428 	.word	0x40020428
 800b614:	40020440 	.word	0x40020440
 800b618:	40020458 	.word	0x40020458
 800b61c:	40020470 	.word	0x40020470
 800b620:	40020488 	.word	0x40020488
 800b624:	400204a0 	.word	0x400204a0
 800b628:	400204b8 	.word	0x400204b8
 800b62c:	58025408 	.word	0x58025408
 800b630:	5802541c 	.word	0x5802541c
 800b634:	58025430 	.word	0x58025430
 800b638:	58025444 	.word	0x58025444
 800b63c:	58025458 	.word	0x58025458
 800b640:	5802546c 	.word	0x5802546c
 800b644:	58025480 	.word	0x58025480
 800b648:	58025494 	.word	0x58025494

0800b64c <HAL_DMA_Start_IT>:
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	603b      	str	r3, [r7, #0]
 800b65a:	2300      	movs	r3, #0
 800b65c:	75fb      	strb	r3, [r7, #23]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d101      	bne.n	800b668 <HAL_DMA_Start_IT+0x1c>
 800b664:	2301      	movs	r3, #1
 800b666:	e226      	b.n	800bab6 <HAL_DMA_Start_IT+0x46a>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d101      	bne.n	800b676 <HAL_DMA_Start_IT+0x2a>
 800b672:	2302      	movs	r3, #2
 800b674:	e21f      	b.n	800bab6 <HAL_DMA_Start_IT+0x46a>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b01      	cmp	r3, #1
 800b688:	f040 820a 	bne.w	800baa0 <HAL_DMA_Start_IT+0x454>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2202      	movs	r2, #2
 800b690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	655a      	str	r2, [r3, #84]	@ 0x54
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a68      	ldr	r2, [pc, #416]	@ (800b840 <HAL_DMA_Start_IT+0x1f4>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d04a      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a66      	ldr	r2, [pc, #408]	@ (800b844 <HAL_DMA_Start_IT+0x1f8>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d045      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a65      	ldr	r2, [pc, #404]	@ (800b848 <HAL_DMA_Start_IT+0x1fc>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d040      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a63      	ldr	r2, [pc, #396]	@ (800b84c <HAL_DMA_Start_IT+0x200>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d03b      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a62      	ldr	r2, [pc, #392]	@ (800b850 <HAL_DMA_Start_IT+0x204>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d036      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a60      	ldr	r2, [pc, #384]	@ (800b854 <HAL_DMA_Start_IT+0x208>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d031      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a5f      	ldr	r2, [pc, #380]	@ (800b858 <HAL_DMA_Start_IT+0x20c>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d02c      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a5d      	ldr	r2, [pc, #372]	@ (800b85c <HAL_DMA_Start_IT+0x210>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d027      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a5c      	ldr	r2, [pc, #368]	@ (800b860 <HAL_DMA_Start_IT+0x214>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d022      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a5a      	ldr	r2, [pc, #360]	@ (800b864 <HAL_DMA_Start_IT+0x218>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d01d      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a59      	ldr	r2, [pc, #356]	@ (800b868 <HAL_DMA_Start_IT+0x21c>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d018      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a57      	ldr	r2, [pc, #348]	@ (800b86c <HAL_DMA_Start_IT+0x220>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d013      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a56      	ldr	r2, [pc, #344]	@ (800b870 <HAL_DMA_Start_IT+0x224>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d00e      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a54      	ldr	r2, [pc, #336]	@ (800b874 <HAL_DMA_Start_IT+0x228>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d009      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a53      	ldr	r2, [pc, #332]	@ (800b878 <HAL_DMA_Start_IT+0x22c>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d004      	beq.n	800b73a <HAL_DMA_Start_IT+0xee>
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a51      	ldr	r2, [pc, #324]	@ (800b87c <HAL_DMA_Start_IT+0x230>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d108      	bne.n	800b74c <HAL_DMA_Start_IT+0x100>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f022 0201 	bic.w	r2, r2, #1
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	e007      	b.n	800b75c <HAL_DMA_Start_IT+0x110>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f022 0201 	bic.w	r2, r2, #1
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	68b9      	ldr	r1, [r7, #8]
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f001 fe84 	bl	800d470 <DMA_SetConfig>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a34      	ldr	r2, [pc, #208]	@ (800b840 <HAL_DMA_Start_IT+0x1f4>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d04a      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a33      	ldr	r2, [pc, #204]	@ (800b844 <HAL_DMA_Start_IT+0x1f8>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d045      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a31      	ldr	r2, [pc, #196]	@ (800b848 <HAL_DMA_Start_IT+0x1fc>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d040      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a30      	ldr	r2, [pc, #192]	@ (800b84c <HAL_DMA_Start_IT+0x200>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d03b      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a2e      	ldr	r2, [pc, #184]	@ (800b850 <HAL_DMA_Start_IT+0x204>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d036      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a2d      	ldr	r2, [pc, #180]	@ (800b854 <HAL_DMA_Start_IT+0x208>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d031      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a2b      	ldr	r2, [pc, #172]	@ (800b858 <HAL_DMA_Start_IT+0x20c>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d02c      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a2a      	ldr	r2, [pc, #168]	@ (800b85c <HAL_DMA_Start_IT+0x210>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d027      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a28      	ldr	r2, [pc, #160]	@ (800b860 <HAL_DMA_Start_IT+0x214>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d022      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a27      	ldr	r2, [pc, #156]	@ (800b864 <HAL_DMA_Start_IT+0x218>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d01d      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a25      	ldr	r2, [pc, #148]	@ (800b868 <HAL_DMA_Start_IT+0x21c>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d018      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a24      	ldr	r2, [pc, #144]	@ (800b86c <HAL_DMA_Start_IT+0x220>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d013      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a22      	ldr	r2, [pc, #136]	@ (800b870 <HAL_DMA_Start_IT+0x224>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d00e      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a21      	ldr	r2, [pc, #132]	@ (800b874 <HAL_DMA_Start_IT+0x228>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d009      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a1f      	ldr	r2, [pc, #124]	@ (800b878 <HAL_DMA_Start_IT+0x22c>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d004      	beq.n	800b808 <HAL_DMA_Start_IT+0x1bc>
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a1e      	ldr	r2, [pc, #120]	@ (800b87c <HAL_DMA_Start_IT+0x230>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d101      	bne.n	800b80c <HAL_DMA_Start_IT+0x1c0>
 800b808:	2301      	movs	r3, #1
 800b80a:	e000      	b.n	800b80e <HAL_DMA_Start_IT+0x1c2>
 800b80c:	2300      	movs	r3, #0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d036      	beq.n	800b880 <HAL_DMA_Start_IT+0x234>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f023 021e 	bic.w	r2, r3, #30
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f042 0216 	orr.w	r2, r2, #22
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d03e      	beq.n	800b8ac <HAL_DMA_Start_IT+0x260>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f042 0208 	orr.w	r2, r2, #8
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	e035      	b.n	800b8ac <HAL_DMA_Start_IT+0x260>
 800b840:	40020010 	.word	0x40020010
 800b844:	40020028 	.word	0x40020028
 800b848:	40020040 	.word	0x40020040
 800b84c:	40020058 	.word	0x40020058
 800b850:	40020070 	.word	0x40020070
 800b854:	40020088 	.word	0x40020088
 800b858:	400200a0 	.word	0x400200a0
 800b85c:	400200b8 	.word	0x400200b8
 800b860:	40020410 	.word	0x40020410
 800b864:	40020428 	.word	0x40020428
 800b868:	40020440 	.word	0x40020440
 800b86c:	40020458 	.word	0x40020458
 800b870:	40020470 	.word	0x40020470
 800b874:	40020488 	.word	0x40020488
 800b878:	400204a0 	.word	0x400204a0
 800b87c:	400204b8 	.word	0x400204b8
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f023 020e 	bic.w	r2, r3, #14
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f042 020a 	orr.w	r2, r2, #10
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d007      	beq.n	800b8ac <HAL_DMA_Start_IT+0x260>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f042 0204 	orr.w	r2, r2, #4
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a83      	ldr	r2, [pc, #524]	@ (800bac0 <HAL_DMA_Start_IT+0x474>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d072      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a82      	ldr	r2, [pc, #520]	@ (800bac4 <HAL_DMA_Start_IT+0x478>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d06d      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a80      	ldr	r2, [pc, #512]	@ (800bac8 <HAL_DMA_Start_IT+0x47c>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d068      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a7f      	ldr	r2, [pc, #508]	@ (800bacc <HAL_DMA_Start_IT+0x480>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d063      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a7d      	ldr	r2, [pc, #500]	@ (800bad0 <HAL_DMA_Start_IT+0x484>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d05e      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a7c      	ldr	r2, [pc, #496]	@ (800bad4 <HAL_DMA_Start_IT+0x488>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d059      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a7a      	ldr	r2, [pc, #488]	@ (800bad8 <HAL_DMA_Start_IT+0x48c>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d054      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a79      	ldr	r2, [pc, #484]	@ (800badc <HAL_DMA_Start_IT+0x490>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d04f      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a77      	ldr	r2, [pc, #476]	@ (800bae0 <HAL_DMA_Start_IT+0x494>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d04a      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a76      	ldr	r2, [pc, #472]	@ (800bae4 <HAL_DMA_Start_IT+0x498>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d045      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a74      	ldr	r2, [pc, #464]	@ (800bae8 <HAL_DMA_Start_IT+0x49c>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d040      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a73      	ldr	r2, [pc, #460]	@ (800baec <HAL_DMA_Start_IT+0x4a0>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d03b      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a71      	ldr	r2, [pc, #452]	@ (800baf0 <HAL_DMA_Start_IT+0x4a4>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d036      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a70      	ldr	r2, [pc, #448]	@ (800baf4 <HAL_DMA_Start_IT+0x4a8>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d031      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a6e      	ldr	r2, [pc, #440]	@ (800baf8 <HAL_DMA_Start_IT+0x4ac>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d02c      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a6d      	ldr	r2, [pc, #436]	@ (800bafc <HAL_DMA_Start_IT+0x4b0>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d027      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a6b      	ldr	r2, [pc, #428]	@ (800bb00 <HAL_DMA_Start_IT+0x4b4>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d022      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a6a      	ldr	r2, [pc, #424]	@ (800bb04 <HAL_DMA_Start_IT+0x4b8>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d01d      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a68      	ldr	r2, [pc, #416]	@ (800bb08 <HAL_DMA_Start_IT+0x4bc>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d018      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a67      	ldr	r2, [pc, #412]	@ (800bb0c <HAL_DMA_Start_IT+0x4c0>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d013      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	4a65      	ldr	r2, [pc, #404]	@ (800bb10 <HAL_DMA_Start_IT+0x4c4>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d00e      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a64      	ldr	r2, [pc, #400]	@ (800bb14 <HAL_DMA_Start_IT+0x4c8>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d009      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a62      	ldr	r2, [pc, #392]	@ (800bb18 <HAL_DMA_Start_IT+0x4cc>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d004      	beq.n	800b99c <HAL_DMA_Start_IT+0x350>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a61      	ldr	r2, [pc, #388]	@ (800bb1c <HAL_DMA_Start_IT+0x4d0>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d101      	bne.n	800b9a0 <HAL_DMA_Start_IT+0x354>
 800b99c:	2301      	movs	r3, #1
 800b99e:	e000      	b.n	800b9a2 <HAL_DMA_Start_IT+0x356>
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d01a      	beq.n	800b9dc <HAL_DMA_Start_IT+0x390>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d007      	beq.n	800b9c4 <HAL_DMA_Start_IT+0x378>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d007      	beq.n	800b9dc <HAL_DMA_Start_IT+0x390>
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a37      	ldr	r2, [pc, #220]	@ (800bac0 <HAL_DMA_Start_IT+0x474>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d04a      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a36      	ldr	r2, [pc, #216]	@ (800bac4 <HAL_DMA_Start_IT+0x478>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d045      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a34      	ldr	r2, [pc, #208]	@ (800bac8 <HAL_DMA_Start_IT+0x47c>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d040      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a33      	ldr	r2, [pc, #204]	@ (800bacc <HAL_DMA_Start_IT+0x480>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d03b      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a31      	ldr	r2, [pc, #196]	@ (800bad0 <HAL_DMA_Start_IT+0x484>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d036      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a30      	ldr	r2, [pc, #192]	@ (800bad4 <HAL_DMA_Start_IT+0x488>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d031      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a2e      	ldr	r2, [pc, #184]	@ (800bad8 <HAL_DMA_Start_IT+0x48c>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d02c      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a2d      	ldr	r2, [pc, #180]	@ (800badc <HAL_DMA_Start_IT+0x490>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d027      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a2b      	ldr	r2, [pc, #172]	@ (800bae0 <HAL_DMA_Start_IT+0x494>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d022      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a2a      	ldr	r2, [pc, #168]	@ (800bae4 <HAL_DMA_Start_IT+0x498>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d01d      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a28      	ldr	r2, [pc, #160]	@ (800bae8 <HAL_DMA_Start_IT+0x49c>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d018      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a27      	ldr	r2, [pc, #156]	@ (800baec <HAL_DMA_Start_IT+0x4a0>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d013      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a25      	ldr	r2, [pc, #148]	@ (800baf0 <HAL_DMA_Start_IT+0x4a4>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d00e      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a24      	ldr	r2, [pc, #144]	@ (800baf4 <HAL_DMA_Start_IT+0x4a8>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d009      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a22      	ldr	r2, [pc, #136]	@ (800baf8 <HAL_DMA_Start_IT+0x4ac>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d004      	beq.n	800ba7c <HAL_DMA_Start_IT+0x430>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a21      	ldr	r2, [pc, #132]	@ (800bafc <HAL_DMA_Start_IT+0x4b0>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d108      	bne.n	800ba8e <HAL_DMA_Start_IT+0x442>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f042 0201 	orr.w	r2, r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	e012      	b.n	800bab4 <HAL_DMA_Start_IT+0x468>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f042 0201 	orr.w	r2, r2, #1
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	e009      	b.n	800bab4 <HAL_DMA_Start_IT+0x468>
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800baa6:	655a      	str	r2, [r3, #84]	@ 0x54
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800bab0:	2301      	movs	r3, #1
 800bab2:	75fb      	strb	r3, [r7, #23]
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
 800bab6:	4618      	mov	r0, r3
 800bab8:	3718      	adds	r7, #24
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	40020010 	.word	0x40020010
 800bac4:	40020028 	.word	0x40020028
 800bac8:	40020040 	.word	0x40020040
 800bacc:	40020058 	.word	0x40020058
 800bad0:	40020070 	.word	0x40020070
 800bad4:	40020088 	.word	0x40020088
 800bad8:	400200a0 	.word	0x400200a0
 800badc:	400200b8 	.word	0x400200b8
 800bae0:	40020410 	.word	0x40020410
 800bae4:	40020428 	.word	0x40020428
 800bae8:	40020440 	.word	0x40020440
 800baec:	40020458 	.word	0x40020458
 800baf0:	40020470 	.word	0x40020470
 800baf4:	40020488 	.word	0x40020488
 800baf8:	400204a0 	.word	0x400204a0
 800bafc:	400204b8 	.word	0x400204b8
 800bb00:	58025408 	.word	0x58025408
 800bb04:	5802541c 	.word	0x5802541c
 800bb08:	58025430 	.word	0x58025430
 800bb0c:	58025444 	.word	0x58025444
 800bb10:	58025458 	.word	0x58025458
 800bb14:	5802546c 	.word	0x5802546c
 800bb18:	58025480 	.word	0x58025480
 800bb1c:	58025494 	.word	0x58025494

0800bb20 <HAL_DMA_Abort>:
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	f7fd f8e0 	bl	8008cec <HAL_GetTick>
 800bb2c:	6138      	str	r0, [r7, #16]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d101      	bne.n	800bb38 <HAL_DMA_Abort+0x18>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e2dc      	b.n	800c0f2 <HAL_DMA_Abort+0x5d2>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d008      	beq.n	800bb56 <HAL_DMA_Abort+0x36>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2280      	movs	r2, #128	@ 0x80
 800bb48:	655a      	str	r2, [r3, #84]	@ 0x54
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800bb52:	2301      	movs	r3, #1
 800bb54:	e2cd      	b.n	800c0f2 <HAL_DMA_Abort+0x5d2>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a76      	ldr	r2, [pc, #472]	@ (800bd34 <HAL_DMA_Abort+0x214>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d04a      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a74      	ldr	r2, [pc, #464]	@ (800bd38 <HAL_DMA_Abort+0x218>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d045      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a73      	ldr	r2, [pc, #460]	@ (800bd3c <HAL_DMA_Abort+0x21c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d040      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a71      	ldr	r2, [pc, #452]	@ (800bd40 <HAL_DMA_Abort+0x220>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d03b      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a70      	ldr	r2, [pc, #448]	@ (800bd44 <HAL_DMA_Abort+0x224>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d036      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a6e      	ldr	r2, [pc, #440]	@ (800bd48 <HAL_DMA_Abort+0x228>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d031      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a6d      	ldr	r2, [pc, #436]	@ (800bd4c <HAL_DMA_Abort+0x22c>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d02c      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a6b      	ldr	r2, [pc, #428]	@ (800bd50 <HAL_DMA_Abort+0x230>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d027      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a6a      	ldr	r2, [pc, #424]	@ (800bd54 <HAL_DMA_Abort+0x234>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d022      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a68      	ldr	r2, [pc, #416]	@ (800bd58 <HAL_DMA_Abort+0x238>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d01d      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a67      	ldr	r2, [pc, #412]	@ (800bd5c <HAL_DMA_Abort+0x23c>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d018      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a65      	ldr	r2, [pc, #404]	@ (800bd60 <HAL_DMA_Abort+0x240>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d013      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a64      	ldr	r2, [pc, #400]	@ (800bd64 <HAL_DMA_Abort+0x244>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d00e      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a62      	ldr	r2, [pc, #392]	@ (800bd68 <HAL_DMA_Abort+0x248>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d009      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a61      	ldr	r2, [pc, #388]	@ (800bd6c <HAL_DMA_Abort+0x24c>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d004      	beq.n	800bbf6 <HAL_DMA_Abort+0xd6>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a5f      	ldr	r2, [pc, #380]	@ (800bd70 <HAL_DMA_Abort+0x250>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d101      	bne.n	800bbfa <HAL_DMA_Abort+0xda>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e000      	b.n	800bbfc <HAL_DMA_Abort+0xdc>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d013      	beq.n	800bc28 <HAL_DMA_Abort+0x108>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f022 021e 	bic.w	r2, r2, #30
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	695a      	ldr	r2, [r3, #20]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bc1e:	615a      	str	r2, [r3, #20]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	617b      	str	r3, [r7, #20]
 800bc26:	e00a      	b.n	800bc3e <HAL_DMA_Abort+0x11e>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f022 020e 	bic.w	r2, r2, #14
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	617b      	str	r3, [r7, #20]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	4a3c      	ldr	r2, [pc, #240]	@ (800bd34 <HAL_DMA_Abort+0x214>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d072      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a3a      	ldr	r2, [pc, #232]	@ (800bd38 <HAL_DMA_Abort+0x218>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d06d      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a39      	ldr	r2, [pc, #228]	@ (800bd3c <HAL_DMA_Abort+0x21c>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d068      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a37      	ldr	r2, [pc, #220]	@ (800bd40 <HAL_DMA_Abort+0x220>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d063      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a36      	ldr	r2, [pc, #216]	@ (800bd44 <HAL_DMA_Abort+0x224>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d05e      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a34      	ldr	r2, [pc, #208]	@ (800bd48 <HAL_DMA_Abort+0x228>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d059      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a33      	ldr	r2, [pc, #204]	@ (800bd4c <HAL_DMA_Abort+0x22c>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d054      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a31      	ldr	r2, [pc, #196]	@ (800bd50 <HAL_DMA_Abort+0x230>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d04f      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a30      	ldr	r2, [pc, #192]	@ (800bd54 <HAL_DMA_Abort+0x234>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d04a      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a2e      	ldr	r2, [pc, #184]	@ (800bd58 <HAL_DMA_Abort+0x238>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d045      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a2d      	ldr	r2, [pc, #180]	@ (800bd5c <HAL_DMA_Abort+0x23c>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d040      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a2b      	ldr	r2, [pc, #172]	@ (800bd60 <HAL_DMA_Abort+0x240>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d03b      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a2a      	ldr	r2, [pc, #168]	@ (800bd64 <HAL_DMA_Abort+0x244>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d036      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a28      	ldr	r2, [pc, #160]	@ (800bd68 <HAL_DMA_Abort+0x248>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d031      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a27      	ldr	r2, [pc, #156]	@ (800bd6c <HAL_DMA_Abort+0x24c>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d02c      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a25      	ldr	r2, [pc, #148]	@ (800bd70 <HAL_DMA_Abort+0x250>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d027      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a24      	ldr	r2, [pc, #144]	@ (800bd74 <HAL_DMA_Abort+0x254>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d022      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a22      	ldr	r2, [pc, #136]	@ (800bd78 <HAL_DMA_Abort+0x258>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d01d      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a21      	ldr	r2, [pc, #132]	@ (800bd7c <HAL_DMA_Abort+0x25c>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d018      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a1f      	ldr	r2, [pc, #124]	@ (800bd80 <HAL_DMA_Abort+0x260>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d013      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a1e      	ldr	r2, [pc, #120]	@ (800bd84 <HAL_DMA_Abort+0x264>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d00e      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a1c      	ldr	r2, [pc, #112]	@ (800bd88 <HAL_DMA_Abort+0x268>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d009      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a1b      	ldr	r2, [pc, #108]	@ (800bd8c <HAL_DMA_Abort+0x26c>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d004      	beq.n	800bd2e <HAL_DMA_Abort+0x20e>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	4a19      	ldr	r2, [pc, #100]	@ (800bd90 <HAL_DMA_Abort+0x270>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d132      	bne.n	800bd94 <HAL_DMA_Abort+0x274>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e031      	b.n	800bd96 <HAL_DMA_Abort+0x276>
 800bd32:	bf00      	nop
 800bd34:	40020010 	.word	0x40020010
 800bd38:	40020028 	.word	0x40020028
 800bd3c:	40020040 	.word	0x40020040
 800bd40:	40020058 	.word	0x40020058
 800bd44:	40020070 	.word	0x40020070
 800bd48:	40020088 	.word	0x40020088
 800bd4c:	400200a0 	.word	0x400200a0
 800bd50:	400200b8 	.word	0x400200b8
 800bd54:	40020410 	.word	0x40020410
 800bd58:	40020428 	.word	0x40020428
 800bd5c:	40020440 	.word	0x40020440
 800bd60:	40020458 	.word	0x40020458
 800bd64:	40020470 	.word	0x40020470
 800bd68:	40020488 	.word	0x40020488
 800bd6c:	400204a0 	.word	0x400204a0
 800bd70:	400204b8 	.word	0x400204b8
 800bd74:	58025408 	.word	0x58025408
 800bd78:	5802541c 	.word	0x5802541c
 800bd7c:	58025430 	.word	0x58025430
 800bd80:	58025444 	.word	0x58025444
 800bd84:	58025458 	.word	0x58025458
 800bd88:	5802546c 	.word	0x5802546c
 800bd8c:	58025480 	.word	0x58025480
 800bd90:	58025494 	.word	0x58025494
 800bd94:	2300      	movs	r3, #0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d007      	beq.n	800bdaa <HAL_DMA_Abort+0x28a>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bda4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a6d      	ldr	r2, [pc, #436]	@ (800bf64 <HAL_DMA_Abort+0x444>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d04a      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a6b      	ldr	r2, [pc, #428]	@ (800bf68 <HAL_DMA_Abort+0x448>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d045      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a6a      	ldr	r2, [pc, #424]	@ (800bf6c <HAL_DMA_Abort+0x44c>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d040      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a68      	ldr	r2, [pc, #416]	@ (800bf70 <HAL_DMA_Abort+0x450>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d03b      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a67      	ldr	r2, [pc, #412]	@ (800bf74 <HAL_DMA_Abort+0x454>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d036      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a65      	ldr	r2, [pc, #404]	@ (800bf78 <HAL_DMA_Abort+0x458>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d031      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a64      	ldr	r2, [pc, #400]	@ (800bf7c <HAL_DMA_Abort+0x45c>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d02c      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a62      	ldr	r2, [pc, #392]	@ (800bf80 <HAL_DMA_Abort+0x460>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d027      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a61      	ldr	r2, [pc, #388]	@ (800bf84 <HAL_DMA_Abort+0x464>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d022      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a5f      	ldr	r2, [pc, #380]	@ (800bf88 <HAL_DMA_Abort+0x468>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d01d      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4a5e      	ldr	r2, [pc, #376]	@ (800bf8c <HAL_DMA_Abort+0x46c>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d018      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a5c      	ldr	r2, [pc, #368]	@ (800bf90 <HAL_DMA_Abort+0x470>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d013      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4a5b      	ldr	r2, [pc, #364]	@ (800bf94 <HAL_DMA_Abort+0x474>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d00e      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a59      	ldr	r2, [pc, #356]	@ (800bf98 <HAL_DMA_Abort+0x478>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d009      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a58      	ldr	r2, [pc, #352]	@ (800bf9c <HAL_DMA_Abort+0x47c>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d004      	beq.n	800be4a <HAL_DMA_Abort+0x32a>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a56      	ldr	r2, [pc, #344]	@ (800bfa0 <HAL_DMA_Abort+0x480>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d108      	bne.n	800be5c <HAL_DMA_Abort+0x33c>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f022 0201 	bic.w	r2, r2, #1
 800be58:	601a      	str	r2, [r3, #0]
 800be5a:	e007      	b.n	800be6c <HAL_DMA_Abort+0x34c>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f022 0201 	bic.w	r2, r2, #1
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	e013      	b.n	800be96 <HAL_DMA_Abort+0x376>
 800be6e:	f7fc ff3d 	bl	8008cec <HAL_GetTick>
 800be72:	4602      	mov	r2, r0
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	2b05      	cmp	r3, #5
 800be7a:	d90c      	bls.n	800be96 <HAL_DMA_Abort+0x376>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2220      	movs	r2, #32
 800be80:	655a      	str	r2, [r3, #84]	@ 0x54
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2203      	movs	r2, #3
 800be86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800be92:	2301      	movs	r3, #1
 800be94:	e12d      	b.n	800c0f2 <HAL_DMA_Abort+0x5d2>
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f003 0301 	and.w	r3, r3, #1
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1e5      	bne.n	800be6e <HAL_DMA_Abort+0x34e>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a2f      	ldr	r2, [pc, #188]	@ (800bf64 <HAL_DMA_Abort+0x444>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d04a      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a2d      	ldr	r2, [pc, #180]	@ (800bf68 <HAL_DMA_Abort+0x448>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d045      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a2c      	ldr	r2, [pc, #176]	@ (800bf6c <HAL_DMA_Abort+0x44c>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d040      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a2a      	ldr	r2, [pc, #168]	@ (800bf70 <HAL_DMA_Abort+0x450>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d03b      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a29      	ldr	r2, [pc, #164]	@ (800bf74 <HAL_DMA_Abort+0x454>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d036      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a27      	ldr	r2, [pc, #156]	@ (800bf78 <HAL_DMA_Abort+0x458>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d031      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a26      	ldr	r2, [pc, #152]	@ (800bf7c <HAL_DMA_Abort+0x45c>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d02c      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a24      	ldr	r2, [pc, #144]	@ (800bf80 <HAL_DMA_Abort+0x460>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d027      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a23      	ldr	r2, [pc, #140]	@ (800bf84 <HAL_DMA_Abort+0x464>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d022      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a21      	ldr	r2, [pc, #132]	@ (800bf88 <HAL_DMA_Abort+0x468>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d01d      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a20      	ldr	r2, [pc, #128]	@ (800bf8c <HAL_DMA_Abort+0x46c>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d018      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4a1e      	ldr	r2, [pc, #120]	@ (800bf90 <HAL_DMA_Abort+0x470>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d013      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a1d      	ldr	r2, [pc, #116]	@ (800bf94 <HAL_DMA_Abort+0x474>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d00e      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a1b      	ldr	r2, [pc, #108]	@ (800bf98 <HAL_DMA_Abort+0x478>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d009      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a1a      	ldr	r2, [pc, #104]	@ (800bf9c <HAL_DMA_Abort+0x47c>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d004      	beq.n	800bf42 <HAL_DMA_Abort+0x422>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a18      	ldr	r2, [pc, #96]	@ (800bfa0 <HAL_DMA_Abort+0x480>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d101      	bne.n	800bf46 <HAL_DMA_Abort+0x426>
 800bf42:	2301      	movs	r3, #1
 800bf44:	e000      	b.n	800bf48 <HAL_DMA_Abort+0x428>
 800bf46:	2300      	movs	r3, #0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d02b      	beq.n	800bfa4 <HAL_DMA_Abort+0x484>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf50:	60bb      	str	r3, [r7, #8]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf56:	f003 031f 	and.w	r3, r3, #31
 800bf5a:	223f      	movs	r2, #63	@ 0x3f
 800bf5c:	409a      	lsls	r2, r3
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	609a      	str	r2, [r3, #8]
 800bf62:	e02a      	b.n	800bfba <HAL_DMA_Abort+0x49a>
 800bf64:	40020010 	.word	0x40020010
 800bf68:	40020028 	.word	0x40020028
 800bf6c:	40020040 	.word	0x40020040
 800bf70:	40020058 	.word	0x40020058
 800bf74:	40020070 	.word	0x40020070
 800bf78:	40020088 	.word	0x40020088
 800bf7c:	400200a0 	.word	0x400200a0
 800bf80:	400200b8 	.word	0x400200b8
 800bf84:	40020410 	.word	0x40020410
 800bf88:	40020428 	.word	0x40020428
 800bf8c:	40020440 	.word	0x40020440
 800bf90:	40020458 	.word	0x40020458
 800bf94:	40020470 	.word	0x40020470
 800bf98:	40020488 	.word	0x40020488
 800bf9c:	400204a0 	.word	0x400204a0
 800bfa0:	400204b8 	.word	0x400204b8
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfae:	f003 031f 	and.w	r3, r3, #31
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	409a      	lsls	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	605a      	str	r2, [r3, #4]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a4f      	ldr	r2, [pc, #316]	@ (800c0fc <HAL_DMA_Abort+0x5dc>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d072      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a4d      	ldr	r2, [pc, #308]	@ (800c100 <HAL_DMA_Abort+0x5e0>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d06d      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a4c      	ldr	r2, [pc, #304]	@ (800c104 <HAL_DMA_Abort+0x5e4>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d068      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a4a      	ldr	r2, [pc, #296]	@ (800c108 <HAL_DMA_Abort+0x5e8>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d063      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a49      	ldr	r2, [pc, #292]	@ (800c10c <HAL_DMA_Abort+0x5ec>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d05e      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a47      	ldr	r2, [pc, #284]	@ (800c110 <HAL_DMA_Abort+0x5f0>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d059      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a46      	ldr	r2, [pc, #280]	@ (800c114 <HAL_DMA_Abort+0x5f4>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d054      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a44      	ldr	r2, [pc, #272]	@ (800c118 <HAL_DMA_Abort+0x5f8>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d04f      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a43      	ldr	r2, [pc, #268]	@ (800c11c <HAL_DMA_Abort+0x5fc>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d04a      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a41      	ldr	r2, [pc, #260]	@ (800c120 <HAL_DMA_Abort+0x600>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d045      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a40      	ldr	r2, [pc, #256]	@ (800c124 <HAL_DMA_Abort+0x604>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d040      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a3e      	ldr	r2, [pc, #248]	@ (800c128 <HAL_DMA_Abort+0x608>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d03b      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a3d      	ldr	r2, [pc, #244]	@ (800c12c <HAL_DMA_Abort+0x60c>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d036      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a3b      	ldr	r2, [pc, #236]	@ (800c130 <HAL_DMA_Abort+0x610>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d031      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a3a      	ldr	r2, [pc, #232]	@ (800c134 <HAL_DMA_Abort+0x614>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d02c      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a38      	ldr	r2, [pc, #224]	@ (800c138 <HAL_DMA_Abort+0x618>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d027      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a37      	ldr	r2, [pc, #220]	@ (800c13c <HAL_DMA_Abort+0x61c>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d022      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a35      	ldr	r2, [pc, #212]	@ (800c140 <HAL_DMA_Abort+0x620>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d01d      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a34      	ldr	r2, [pc, #208]	@ (800c144 <HAL_DMA_Abort+0x624>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d018      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a32      	ldr	r2, [pc, #200]	@ (800c148 <HAL_DMA_Abort+0x628>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d013      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a31      	ldr	r2, [pc, #196]	@ (800c14c <HAL_DMA_Abort+0x62c>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d00e      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a2f      	ldr	r2, [pc, #188]	@ (800c150 <HAL_DMA_Abort+0x630>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d009      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a2e      	ldr	r2, [pc, #184]	@ (800c154 <HAL_DMA_Abort+0x634>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d004      	beq.n	800c0aa <HAL_DMA_Abort+0x58a>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a2c      	ldr	r2, [pc, #176]	@ (800c158 <HAL_DMA_Abort+0x638>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d101      	bne.n	800c0ae <HAL_DMA_Abort+0x58e>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e000      	b.n	800c0b0 <HAL_DMA_Abort+0x590>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d015      	beq.n	800c0e0 <HAL_DMA_Abort+0x5c0>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c0bc:	605a      	str	r2, [r3, #4]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00c      	beq.n	800c0e0 <HAL_DMA_Abort+0x5c0>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c0d4:	601a      	str	r2, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c0de:	605a      	str	r2, [r3, #4]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3718      	adds	r7, #24
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	40020010 	.word	0x40020010
 800c100:	40020028 	.word	0x40020028
 800c104:	40020040 	.word	0x40020040
 800c108:	40020058 	.word	0x40020058
 800c10c:	40020070 	.word	0x40020070
 800c110:	40020088 	.word	0x40020088
 800c114:	400200a0 	.word	0x400200a0
 800c118:	400200b8 	.word	0x400200b8
 800c11c:	40020410 	.word	0x40020410
 800c120:	40020428 	.word	0x40020428
 800c124:	40020440 	.word	0x40020440
 800c128:	40020458 	.word	0x40020458
 800c12c:	40020470 	.word	0x40020470
 800c130:	40020488 	.word	0x40020488
 800c134:	400204a0 	.word	0x400204a0
 800c138:	400204b8 	.word	0x400204b8
 800c13c:	58025408 	.word	0x58025408
 800c140:	5802541c 	.word	0x5802541c
 800c144:	58025430 	.word	0x58025430
 800c148:	58025444 	.word	0x58025444
 800c14c:	58025458 	.word	0x58025458
 800c150:	5802546c 	.word	0x5802546c
 800c154:	58025480 	.word	0x58025480
 800c158:	58025494 	.word	0x58025494

0800c15c <HAL_DMA_Abort_IT>:
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <HAL_DMA_Abort_IT+0x12>
 800c16a:	2301      	movs	r3, #1
 800c16c:	e237      	b.n	800c5de <HAL_DMA_Abort_IT+0x482>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b02      	cmp	r3, #2
 800c178:	d004      	beq.n	800c184 <HAL_DMA_Abort_IT+0x28>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2280      	movs	r2, #128	@ 0x80
 800c17e:	655a      	str	r2, [r3, #84]	@ 0x54
 800c180:	2301      	movs	r3, #1
 800c182:	e22c      	b.n	800c5de <HAL_DMA_Abort_IT+0x482>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a5c      	ldr	r2, [pc, #368]	@ (800c2fc <HAL_DMA_Abort_IT+0x1a0>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d04a      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4a5b      	ldr	r2, [pc, #364]	@ (800c300 <HAL_DMA_Abort_IT+0x1a4>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d045      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a59      	ldr	r2, [pc, #356]	@ (800c304 <HAL_DMA_Abort_IT+0x1a8>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d040      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a58      	ldr	r2, [pc, #352]	@ (800c308 <HAL_DMA_Abort_IT+0x1ac>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d03b      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a56      	ldr	r2, [pc, #344]	@ (800c30c <HAL_DMA_Abort_IT+0x1b0>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d036      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a55      	ldr	r2, [pc, #340]	@ (800c310 <HAL_DMA_Abort_IT+0x1b4>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d031      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a53      	ldr	r2, [pc, #332]	@ (800c314 <HAL_DMA_Abort_IT+0x1b8>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d02c      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a52      	ldr	r2, [pc, #328]	@ (800c318 <HAL_DMA_Abort_IT+0x1bc>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d027      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a50      	ldr	r2, [pc, #320]	@ (800c31c <HAL_DMA_Abort_IT+0x1c0>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d022      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a4f      	ldr	r2, [pc, #316]	@ (800c320 <HAL_DMA_Abort_IT+0x1c4>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d01d      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a4d      	ldr	r2, [pc, #308]	@ (800c324 <HAL_DMA_Abort_IT+0x1c8>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d018      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a4c      	ldr	r2, [pc, #304]	@ (800c328 <HAL_DMA_Abort_IT+0x1cc>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d013      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a4a      	ldr	r2, [pc, #296]	@ (800c32c <HAL_DMA_Abort_IT+0x1d0>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d00e      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a49      	ldr	r2, [pc, #292]	@ (800c330 <HAL_DMA_Abort_IT+0x1d4>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d009      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a47      	ldr	r2, [pc, #284]	@ (800c334 <HAL_DMA_Abort_IT+0x1d8>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d004      	beq.n	800c224 <HAL_DMA_Abort_IT+0xc8>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a46      	ldr	r2, [pc, #280]	@ (800c338 <HAL_DMA_Abort_IT+0x1dc>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d101      	bne.n	800c228 <HAL_DMA_Abort_IT+0xcc>
 800c224:	2301      	movs	r3, #1
 800c226:	e000      	b.n	800c22a <HAL_DMA_Abort_IT+0xce>
 800c228:	2300      	movs	r3, #0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f000 8086 	beq.w	800c33c <HAL_DMA_Abort_IT+0x1e0>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2204      	movs	r2, #4
 800c234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a2f      	ldr	r2, [pc, #188]	@ (800c2fc <HAL_DMA_Abort_IT+0x1a0>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d04a      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a2e      	ldr	r2, [pc, #184]	@ (800c300 <HAL_DMA_Abort_IT+0x1a4>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d045      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a2c      	ldr	r2, [pc, #176]	@ (800c304 <HAL_DMA_Abort_IT+0x1a8>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d040      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a2b      	ldr	r2, [pc, #172]	@ (800c308 <HAL_DMA_Abort_IT+0x1ac>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d03b      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a29      	ldr	r2, [pc, #164]	@ (800c30c <HAL_DMA_Abort_IT+0x1b0>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d036      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a28      	ldr	r2, [pc, #160]	@ (800c310 <HAL_DMA_Abort_IT+0x1b4>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d031      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a26      	ldr	r2, [pc, #152]	@ (800c314 <HAL_DMA_Abort_IT+0x1b8>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d02c      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a25      	ldr	r2, [pc, #148]	@ (800c318 <HAL_DMA_Abort_IT+0x1bc>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d027      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a23      	ldr	r2, [pc, #140]	@ (800c31c <HAL_DMA_Abort_IT+0x1c0>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d022      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a22      	ldr	r2, [pc, #136]	@ (800c320 <HAL_DMA_Abort_IT+0x1c4>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d01d      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a20      	ldr	r2, [pc, #128]	@ (800c324 <HAL_DMA_Abort_IT+0x1c8>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d018      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a1f      	ldr	r2, [pc, #124]	@ (800c328 <HAL_DMA_Abort_IT+0x1cc>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d013      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a1d      	ldr	r2, [pc, #116]	@ (800c32c <HAL_DMA_Abort_IT+0x1d0>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d00e      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a1c      	ldr	r2, [pc, #112]	@ (800c330 <HAL_DMA_Abort_IT+0x1d4>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d009      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a1a      	ldr	r2, [pc, #104]	@ (800c334 <HAL_DMA_Abort_IT+0x1d8>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d004      	beq.n	800c2d8 <HAL_DMA_Abort_IT+0x17c>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a19      	ldr	r2, [pc, #100]	@ (800c338 <HAL_DMA_Abort_IT+0x1dc>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d108      	bne.n	800c2ea <HAL_DMA_Abort_IT+0x18e>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f022 0201 	bic.w	r2, r2, #1
 800c2e6:	601a      	str	r2, [r3, #0]
 800c2e8:	e178      	b.n	800c5dc <HAL_DMA_Abort_IT+0x480>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f022 0201 	bic.w	r2, r2, #1
 800c2f8:	601a      	str	r2, [r3, #0]
 800c2fa:	e16f      	b.n	800c5dc <HAL_DMA_Abort_IT+0x480>
 800c2fc:	40020010 	.word	0x40020010
 800c300:	40020028 	.word	0x40020028
 800c304:	40020040 	.word	0x40020040
 800c308:	40020058 	.word	0x40020058
 800c30c:	40020070 	.word	0x40020070
 800c310:	40020088 	.word	0x40020088
 800c314:	400200a0 	.word	0x400200a0
 800c318:	400200b8 	.word	0x400200b8
 800c31c:	40020410 	.word	0x40020410
 800c320:	40020428 	.word	0x40020428
 800c324:	40020440 	.word	0x40020440
 800c328:	40020458 	.word	0x40020458
 800c32c:	40020470 	.word	0x40020470
 800c330:	40020488 	.word	0x40020488
 800c334:	400204a0 	.word	0x400204a0
 800c338:	400204b8 	.word	0x400204b8
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f022 020e 	bic.w	r2, r2, #14
 800c34a:	601a      	str	r2, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a6c      	ldr	r2, [pc, #432]	@ (800c504 <HAL_DMA_Abort_IT+0x3a8>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d04a      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a6b      	ldr	r2, [pc, #428]	@ (800c508 <HAL_DMA_Abort_IT+0x3ac>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d045      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a69      	ldr	r2, [pc, #420]	@ (800c50c <HAL_DMA_Abort_IT+0x3b0>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d040      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a68      	ldr	r2, [pc, #416]	@ (800c510 <HAL_DMA_Abort_IT+0x3b4>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d03b      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4a66      	ldr	r2, [pc, #408]	@ (800c514 <HAL_DMA_Abort_IT+0x3b8>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d036      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a65      	ldr	r2, [pc, #404]	@ (800c518 <HAL_DMA_Abort_IT+0x3bc>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d031      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a63      	ldr	r2, [pc, #396]	@ (800c51c <HAL_DMA_Abort_IT+0x3c0>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d02c      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a62      	ldr	r2, [pc, #392]	@ (800c520 <HAL_DMA_Abort_IT+0x3c4>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d027      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a60      	ldr	r2, [pc, #384]	@ (800c524 <HAL_DMA_Abort_IT+0x3c8>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d022      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a5f      	ldr	r2, [pc, #380]	@ (800c528 <HAL_DMA_Abort_IT+0x3cc>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d01d      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a5d      	ldr	r2, [pc, #372]	@ (800c52c <HAL_DMA_Abort_IT+0x3d0>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d018      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a5c      	ldr	r2, [pc, #368]	@ (800c530 <HAL_DMA_Abort_IT+0x3d4>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d013      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a5a      	ldr	r2, [pc, #360]	@ (800c534 <HAL_DMA_Abort_IT+0x3d8>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d00e      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a59      	ldr	r2, [pc, #356]	@ (800c538 <HAL_DMA_Abort_IT+0x3dc>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d009      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a57      	ldr	r2, [pc, #348]	@ (800c53c <HAL_DMA_Abort_IT+0x3e0>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d004      	beq.n	800c3ec <HAL_DMA_Abort_IT+0x290>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a56      	ldr	r2, [pc, #344]	@ (800c540 <HAL_DMA_Abort_IT+0x3e4>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d108      	bne.n	800c3fe <HAL_DMA_Abort_IT+0x2a2>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f022 0201 	bic.w	r2, r2, #1
 800c3fa:	601a      	str	r2, [r3, #0]
 800c3fc:	e007      	b.n	800c40e <HAL_DMA_Abort_IT+0x2b2>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f022 0201 	bic.w	r2, r2, #1
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a3c      	ldr	r2, [pc, #240]	@ (800c504 <HAL_DMA_Abort_IT+0x3a8>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d072      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a3a      	ldr	r2, [pc, #232]	@ (800c508 <HAL_DMA_Abort_IT+0x3ac>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d06d      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a39      	ldr	r2, [pc, #228]	@ (800c50c <HAL_DMA_Abort_IT+0x3b0>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d068      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a37      	ldr	r2, [pc, #220]	@ (800c510 <HAL_DMA_Abort_IT+0x3b4>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d063      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a36      	ldr	r2, [pc, #216]	@ (800c514 <HAL_DMA_Abort_IT+0x3b8>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d05e      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a34      	ldr	r2, [pc, #208]	@ (800c518 <HAL_DMA_Abort_IT+0x3bc>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d059      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a33      	ldr	r2, [pc, #204]	@ (800c51c <HAL_DMA_Abort_IT+0x3c0>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d054      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a31      	ldr	r2, [pc, #196]	@ (800c520 <HAL_DMA_Abort_IT+0x3c4>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d04f      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a30      	ldr	r2, [pc, #192]	@ (800c524 <HAL_DMA_Abort_IT+0x3c8>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d04a      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a2e      	ldr	r2, [pc, #184]	@ (800c528 <HAL_DMA_Abort_IT+0x3cc>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d045      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a2d      	ldr	r2, [pc, #180]	@ (800c52c <HAL_DMA_Abort_IT+0x3d0>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d040      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a2b      	ldr	r2, [pc, #172]	@ (800c530 <HAL_DMA_Abort_IT+0x3d4>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d03b      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a2a      	ldr	r2, [pc, #168]	@ (800c534 <HAL_DMA_Abort_IT+0x3d8>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d036      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a28      	ldr	r2, [pc, #160]	@ (800c538 <HAL_DMA_Abort_IT+0x3dc>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d031      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a27      	ldr	r2, [pc, #156]	@ (800c53c <HAL_DMA_Abort_IT+0x3e0>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d02c      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a25      	ldr	r2, [pc, #148]	@ (800c540 <HAL_DMA_Abort_IT+0x3e4>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d027      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a24      	ldr	r2, [pc, #144]	@ (800c544 <HAL_DMA_Abort_IT+0x3e8>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d022      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a22      	ldr	r2, [pc, #136]	@ (800c548 <HAL_DMA_Abort_IT+0x3ec>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d01d      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a21      	ldr	r2, [pc, #132]	@ (800c54c <HAL_DMA_Abort_IT+0x3f0>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d018      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a1f      	ldr	r2, [pc, #124]	@ (800c550 <HAL_DMA_Abort_IT+0x3f4>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d013      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a1e      	ldr	r2, [pc, #120]	@ (800c554 <HAL_DMA_Abort_IT+0x3f8>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d00e      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c558 <HAL_DMA_Abort_IT+0x3fc>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d009      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a1b      	ldr	r2, [pc, #108]	@ (800c55c <HAL_DMA_Abort_IT+0x400>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d004      	beq.n	800c4fe <HAL_DMA_Abort_IT+0x3a2>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a19      	ldr	r2, [pc, #100]	@ (800c560 <HAL_DMA_Abort_IT+0x404>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d132      	bne.n	800c564 <HAL_DMA_Abort_IT+0x408>
 800c4fe:	2301      	movs	r3, #1
 800c500:	e031      	b.n	800c566 <HAL_DMA_Abort_IT+0x40a>
 800c502:	bf00      	nop
 800c504:	40020010 	.word	0x40020010
 800c508:	40020028 	.word	0x40020028
 800c50c:	40020040 	.word	0x40020040
 800c510:	40020058 	.word	0x40020058
 800c514:	40020070 	.word	0x40020070
 800c518:	40020088 	.word	0x40020088
 800c51c:	400200a0 	.word	0x400200a0
 800c520:	400200b8 	.word	0x400200b8
 800c524:	40020410 	.word	0x40020410
 800c528:	40020428 	.word	0x40020428
 800c52c:	40020440 	.word	0x40020440
 800c530:	40020458 	.word	0x40020458
 800c534:	40020470 	.word	0x40020470
 800c538:	40020488 	.word	0x40020488
 800c53c:	400204a0 	.word	0x400204a0
 800c540:	400204b8 	.word	0x400204b8
 800c544:	58025408 	.word	0x58025408
 800c548:	5802541c 	.word	0x5802541c
 800c54c:	58025430 	.word	0x58025430
 800c550:	58025444 	.word	0x58025444
 800c554:	58025458 	.word	0x58025458
 800c558:	5802546c 	.word	0x5802546c
 800c55c:	58025480 	.word	0x58025480
 800c560:	58025494 	.word	0x58025494
 800c564:	2300      	movs	r3, #0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d028      	beq.n	800c5bc <HAL_DMA_Abort_IT+0x460>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c574:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c578:	601a      	str	r2, [r3, #0]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c584:	f003 031f 	and.w	r3, r3, #31
 800c588:	2201      	movs	r2, #1
 800c58a:	409a      	lsls	r2, r3
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	605a      	str	r2, [r3, #4]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c598:	605a      	str	r2, [r3, #4]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00c      	beq.n	800c5bc <HAL_DMA_Abort_IT+0x460>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5b0:	601a      	str	r2, [r3, #0]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c5ba:	605a      	str	r2, [r3, #4]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d003      	beq.n	800c5dc <HAL_DMA_Abort_IT+0x480>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	4798      	blx	r3
 800c5dc:	2300      	movs	r3, #0
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop

0800c5e8 <HAL_DMA_IRQHandler>:
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b08a      	sub	sp, #40	@ 0x28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	60fb      	str	r3, [r7, #12]
 800c5f4:	4b67      	ldr	r3, [pc, #412]	@ (800c794 <HAL_DMA_IRQHandler+0x1ac>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a67      	ldr	r2, [pc, #412]	@ (800c798 <HAL_DMA_IRQHandler+0x1b0>)
 800c5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c5fe:	0a9b      	lsrs	r3, r3, #10
 800c600:	627b      	str	r3, [r7, #36]	@ 0x24
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c606:	623b      	str	r3, [r7, #32]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c60c:	61fb      	str	r3, [r7, #28]
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	61bb      	str	r3, [r7, #24]
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	617b      	str	r3, [r7, #20]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a5f      	ldr	r2, [pc, #380]	@ (800c79c <HAL_DMA_IRQHandler+0x1b4>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d04a      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a5d      	ldr	r2, [pc, #372]	@ (800c7a0 <HAL_DMA_IRQHandler+0x1b8>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d045      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4a5c      	ldr	r2, [pc, #368]	@ (800c7a4 <HAL_DMA_IRQHandler+0x1bc>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d040      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a5a      	ldr	r2, [pc, #360]	@ (800c7a8 <HAL_DMA_IRQHandler+0x1c0>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d03b      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a59      	ldr	r2, [pc, #356]	@ (800c7ac <HAL_DMA_IRQHandler+0x1c4>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d036      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a57      	ldr	r2, [pc, #348]	@ (800c7b0 <HAL_DMA_IRQHandler+0x1c8>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d031      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a56      	ldr	r2, [pc, #344]	@ (800c7b4 <HAL_DMA_IRQHandler+0x1cc>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d02c      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a54      	ldr	r2, [pc, #336]	@ (800c7b8 <HAL_DMA_IRQHandler+0x1d0>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d027      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a53      	ldr	r2, [pc, #332]	@ (800c7bc <HAL_DMA_IRQHandler+0x1d4>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d022      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a51      	ldr	r2, [pc, #324]	@ (800c7c0 <HAL_DMA_IRQHandler+0x1d8>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d01d      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a50      	ldr	r2, [pc, #320]	@ (800c7c4 <HAL_DMA_IRQHandler+0x1dc>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d018      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a4e      	ldr	r2, [pc, #312]	@ (800c7c8 <HAL_DMA_IRQHandler+0x1e0>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d013      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a4d      	ldr	r2, [pc, #308]	@ (800c7cc <HAL_DMA_IRQHandler+0x1e4>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d00e      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a4b      	ldr	r2, [pc, #300]	@ (800c7d0 <HAL_DMA_IRQHandler+0x1e8>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d009      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a4a      	ldr	r2, [pc, #296]	@ (800c7d4 <HAL_DMA_IRQHandler+0x1ec>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d004      	beq.n	800c6ba <HAL_DMA_IRQHandler+0xd2>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a48      	ldr	r2, [pc, #288]	@ (800c7d8 <HAL_DMA_IRQHandler+0x1f0>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d101      	bne.n	800c6be <HAL_DMA_IRQHandler+0xd6>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e000      	b.n	800c6c0 <HAL_DMA_IRQHandler+0xd8>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f000 842b 	beq.w	800cf1c <HAL_DMA_IRQHandler+0x934>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6ca:	f003 031f 	and.w	r3, r3, #31
 800c6ce:	2208      	movs	r2, #8
 800c6d0:	409a      	lsls	r2, r3
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	f000 80a2 	beq.w	800c820 <HAL_DMA_IRQHandler+0x238>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a2e      	ldr	r2, [pc, #184]	@ (800c79c <HAL_DMA_IRQHandler+0x1b4>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d04a      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a2d      	ldr	r2, [pc, #180]	@ (800c7a0 <HAL_DMA_IRQHandler+0x1b8>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d045      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a2b      	ldr	r2, [pc, #172]	@ (800c7a4 <HAL_DMA_IRQHandler+0x1bc>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d040      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a2a      	ldr	r2, [pc, #168]	@ (800c7a8 <HAL_DMA_IRQHandler+0x1c0>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d03b      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a28      	ldr	r2, [pc, #160]	@ (800c7ac <HAL_DMA_IRQHandler+0x1c4>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d036      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a27      	ldr	r2, [pc, #156]	@ (800c7b0 <HAL_DMA_IRQHandler+0x1c8>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d031      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a25      	ldr	r2, [pc, #148]	@ (800c7b4 <HAL_DMA_IRQHandler+0x1cc>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d02c      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a24      	ldr	r2, [pc, #144]	@ (800c7b8 <HAL_DMA_IRQHandler+0x1d0>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d027      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a22      	ldr	r2, [pc, #136]	@ (800c7bc <HAL_DMA_IRQHandler+0x1d4>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d022      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a21      	ldr	r2, [pc, #132]	@ (800c7c0 <HAL_DMA_IRQHandler+0x1d8>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d01d      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a1f      	ldr	r2, [pc, #124]	@ (800c7c4 <HAL_DMA_IRQHandler+0x1dc>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d018      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a1e      	ldr	r2, [pc, #120]	@ (800c7c8 <HAL_DMA_IRQHandler+0x1e0>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d013      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a1c      	ldr	r2, [pc, #112]	@ (800c7cc <HAL_DMA_IRQHandler+0x1e4>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d00e      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a1b      	ldr	r2, [pc, #108]	@ (800c7d0 <HAL_DMA_IRQHandler+0x1e8>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d009      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a19      	ldr	r2, [pc, #100]	@ (800c7d4 <HAL_DMA_IRQHandler+0x1ec>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d004      	beq.n	800c77c <HAL_DMA_IRQHandler+0x194>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a18      	ldr	r2, [pc, #96]	@ (800c7d8 <HAL_DMA_IRQHandler+0x1f0>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d12f      	bne.n	800c7dc <HAL_DMA_IRQHandler+0x1f4>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f003 0304 	and.w	r3, r3, #4
 800c786:	2b00      	cmp	r3, #0
 800c788:	bf14      	ite	ne
 800c78a:	2301      	movne	r3, #1
 800c78c:	2300      	moveq	r3, #0
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	e02e      	b.n	800c7f0 <HAL_DMA_IRQHandler+0x208>
 800c792:	bf00      	nop
 800c794:	24000004 	.word	0x24000004
 800c798:	1b4e81b5 	.word	0x1b4e81b5
 800c79c:	40020010 	.word	0x40020010
 800c7a0:	40020028 	.word	0x40020028
 800c7a4:	40020040 	.word	0x40020040
 800c7a8:	40020058 	.word	0x40020058
 800c7ac:	40020070 	.word	0x40020070
 800c7b0:	40020088 	.word	0x40020088
 800c7b4:	400200a0 	.word	0x400200a0
 800c7b8:	400200b8 	.word	0x400200b8
 800c7bc:	40020410 	.word	0x40020410
 800c7c0:	40020428 	.word	0x40020428
 800c7c4:	40020440 	.word	0x40020440
 800c7c8:	40020458 	.word	0x40020458
 800c7cc:	40020470 	.word	0x40020470
 800c7d0:	40020488 	.word	0x40020488
 800c7d4:	400204a0 	.word	0x400204a0
 800c7d8:	400204b8 	.word	0x400204b8
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 0308 	and.w	r3, r3, #8
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	bf14      	ite	ne
 800c7ea:	2301      	movne	r3, #1
 800c7ec:	2300      	moveq	r3, #0
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d015      	beq.n	800c820 <HAL_DMA_IRQHandler+0x238>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f022 0204 	bic.w	r2, r2, #4
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c808:	f003 031f 	and.w	r3, r3, #31
 800c80c:	2208      	movs	r2, #8
 800c80e:	409a      	lsls	r2, r3
 800c810:	6a3b      	ldr	r3, [r7, #32]
 800c812:	609a      	str	r2, [r3, #8]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c818:	f043 0201 	orr.w	r2, r3, #1
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	655a      	str	r2, [r3, #84]	@ 0x54
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c824:	f003 031f 	and.w	r3, r3, #31
 800c828:	69ba      	ldr	r2, [r7, #24]
 800c82a:	fa22 f303 	lsr.w	r3, r2, r3
 800c82e:	f003 0301 	and.w	r3, r3, #1
 800c832:	2b00      	cmp	r3, #0
 800c834:	d06e      	beq.n	800c914 <HAL_DMA_IRQHandler+0x32c>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a69      	ldr	r2, [pc, #420]	@ (800c9e0 <HAL_DMA_IRQHandler+0x3f8>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d04a      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a67      	ldr	r2, [pc, #412]	@ (800c9e4 <HAL_DMA_IRQHandler+0x3fc>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d045      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a66      	ldr	r2, [pc, #408]	@ (800c9e8 <HAL_DMA_IRQHandler+0x400>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d040      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a64      	ldr	r2, [pc, #400]	@ (800c9ec <HAL_DMA_IRQHandler+0x404>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d03b      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a63      	ldr	r2, [pc, #396]	@ (800c9f0 <HAL_DMA_IRQHandler+0x408>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d036      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a61      	ldr	r2, [pc, #388]	@ (800c9f4 <HAL_DMA_IRQHandler+0x40c>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d031      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a60      	ldr	r2, [pc, #384]	@ (800c9f8 <HAL_DMA_IRQHandler+0x410>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d02c      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a5e      	ldr	r2, [pc, #376]	@ (800c9fc <HAL_DMA_IRQHandler+0x414>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d027      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a5d      	ldr	r2, [pc, #372]	@ (800ca00 <HAL_DMA_IRQHandler+0x418>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d022      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a5b      	ldr	r2, [pc, #364]	@ (800ca04 <HAL_DMA_IRQHandler+0x41c>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d01d      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a5a      	ldr	r2, [pc, #360]	@ (800ca08 <HAL_DMA_IRQHandler+0x420>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d018      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a58      	ldr	r2, [pc, #352]	@ (800ca0c <HAL_DMA_IRQHandler+0x424>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d013      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a57      	ldr	r2, [pc, #348]	@ (800ca10 <HAL_DMA_IRQHandler+0x428>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d00e      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a55      	ldr	r2, [pc, #340]	@ (800ca14 <HAL_DMA_IRQHandler+0x42c>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d009      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4a54      	ldr	r2, [pc, #336]	@ (800ca18 <HAL_DMA_IRQHandler+0x430>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d004      	beq.n	800c8d6 <HAL_DMA_IRQHandler+0x2ee>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a52      	ldr	r2, [pc, #328]	@ (800ca1c <HAL_DMA_IRQHandler+0x434>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d10a      	bne.n	800c8ec <HAL_DMA_IRQHandler+0x304>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	695b      	ldr	r3, [r3, #20]
 800c8dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	bf14      	ite	ne
 800c8e4:	2301      	movne	r3, #1
 800c8e6:	2300      	moveq	r3, #0
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	e003      	b.n	800c8f4 <HAL_DMA_IRQHandler+0x30c>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00d      	beq.n	800c914 <HAL_DMA_IRQHandler+0x32c>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8fc:	f003 031f 	and.w	r3, r3, #31
 800c900:	2201      	movs	r2, #1
 800c902:	409a      	lsls	r2, r3
 800c904:	6a3b      	ldr	r3, [r7, #32]
 800c906:	609a      	str	r2, [r3, #8]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c90c:	f043 0202 	orr.w	r2, r3, #2
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	655a      	str	r2, [r3, #84]	@ 0x54
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c918:	f003 031f 	and.w	r3, r3, #31
 800c91c:	2204      	movs	r2, #4
 800c91e:	409a      	lsls	r2, r3
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	4013      	ands	r3, r2
 800c924:	2b00      	cmp	r3, #0
 800c926:	f000 808f 	beq.w	800ca48 <HAL_DMA_IRQHandler+0x460>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a2c      	ldr	r2, [pc, #176]	@ (800c9e0 <HAL_DMA_IRQHandler+0x3f8>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d04a      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a2a      	ldr	r2, [pc, #168]	@ (800c9e4 <HAL_DMA_IRQHandler+0x3fc>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d045      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a29      	ldr	r2, [pc, #164]	@ (800c9e8 <HAL_DMA_IRQHandler+0x400>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d040      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a27      	ldr	r2, [pc, #156]	@ (800c9ec <HAL_DMA_IRQHandler+0x404>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d03b      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a26      	ldr	r2, [pc, #152]	@ (800c9f0 <HAL_DMA_IRQHandler+0x408>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d036      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a24      	ldr	r2, [pc, #144]	@ (800c9f4 <HAL_DMA_IRQHandler+0x40c>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d031      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a23      	ldr	r2, [pc, #140]	@ (800c9f8 <HAL_DMA_IRQHandler+0x410>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d02c      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a21      	ldr	r2, [pc, #132]	@ (800c9fc <HAL_DMA_IRQHandler+0x414>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d027      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a20      	ldr	r2, [pc, #128]	@ (800ca00 <HAL_DMA_IRQHandler+0x418>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d022      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a1e      	ldr	r2, [pc, #120]	@ (800ca04 <HAL_DMA_IRQHandler+0x41c>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d01d      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a1d      	ldr	r2, [pc, #116]	@ (800ca08 <HAL_DMA_IRQHandler+0x420>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d018      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a1b      	ldr	r2, [pc, #108]	@ (800ca0c <HAL_DMA_IRQHandler+0x424>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d013      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a1a      	ldr	r2, [pc, #104]	@ (800ca10 <HAL_DMA_IRQHandler+0x428>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d00e      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a18      	ldr	r2, [pc, #96]	@ (800ca14 <HAL_DMA_IRQHandler+0x42c>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d009      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a17      	ldr	r2, [pc, #92]	@ (800ca18 <HAL_DMA_IRQHandler+0x430>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d004      	beq.n	800c9ca <HAL_DMA_IRQHandler+0x3e2>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a15      	ldr	r2, [pc, #84]	@ (800ca1c <HAL_DMA_IRQHandler+0x434>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d12a      	bne.n	800ca20 <HAL_DMA_IRQHandler+0x438>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 0302 	and.w	r3, r3, #2
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	bf14      	ite	ne
 800c9d8:	2301      	movne	r3, #1
 800c9da:	2300      	moveq	r3, #0
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	e023      	b.n	800ca28 <HAL_DMA_IRQHandler+0x440>
 800c9e0:	40020010 	.word	0x40020010
 800c9e4:	40020028 	.word	0x40020028
 800c9e8:	40020040 	.word	0x40020040
 800c9ec:	40020058 	.word	0x40020058
 800c9f0:	40020070 	.word	0x40020070
 800c9f4:	40020088 	.word	0x40020088
 800c9f8:	400200a0 	.word	0x400200a0
 800c9fc:	400200b8 	.word	0x400200b8
 800ca00:	40020410 	.word	0x40020410
 800ca04:	40020428 	.word	0x40020428
 800ca08:	40020440 	.word	0x40020440
 800ca0c:	40020458 	.word	0x40020458
 800ca10:	40020470 	.word	0x40020470
 800ca14:	40020488 	.word	0x40020488
 800ca18:	400204a0 	.word	0x400204a0
 800ca1c:	400204b8 	.word	0x400204b8
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2300      	movs	r3, #0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00d      	beq.n	800ca48 <HAL_DMA_IRQHandler+0x460>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca30:	f003 031f 	and.w	r3, r3, #31
 800ca34:	2204      	movs	r2, #4
 800ca36:	409a      	lsls	r2, r3
 800ca38:	6a3b      	ldr	r3, [r7, #32]
 800ca3a:	609a      	str	r2, [r3, #8]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca40:	f043 0204 	orr.w	r2, r3, #4
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	655a      	str	r2, [r3, #84]	@ 0x54
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca4c:	f003 031f 	and.w	r3, r3, #31
 800ca50:	2210      	movs	r2, #16
 800ca52:	409a      	lsls	r2, r3
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	4013      	ands	r3, r2
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 80a6 	beq.w	800cbaa <HAL_DMA_IRQHandler+0x5c2>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a85      	ldr	r2, [pc, #532]	@ (800cc78 <HAL_DMA_IRQHandler+0x690>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d04a      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a83      	ldr	r2, [pc, #524]	@ (800cc7c <HAL_DMA_IRQHandler+0x694>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d045      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a82      	ldr	r2, [pc, #520]	@ (800cc80 <HAL_DMA_IRQHandler+0x698>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d040      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a80      	ldr	r2, [pc, #512]	@ (800cc84 <HAL_DMA_IRQHandler+0x69c>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d03b      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4a7f      	ldr	r2, [pc, #508]	@ (800cc88 <HAL_DMA_IRQHandler+0x6a0>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d036      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a7d      	ldr	r2, [pc, #500]	@ (800cc8c <HAL_DMA_IRQHandler+0x6a4>)
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d031      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a7c      	ldr	r2, [pc, #496]	@ (800cc90 <HAL_DMA_IRQHandler+0x6a8>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d02c      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a7a      	ldr	r2, [pc, #488]	@ (800cc94 <HAL_DMA_IRQHandler+0x6ac>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d027      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a79      	ldr	r2, [pc, #484]	@ (800cc98 <HAL_DMA_IRQHandler+0x6b0>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d022      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a77      	ldr	r2, [pc, #476]	@ (800cc9c <HAL_DMA_IRQHandler+0x6b4>)
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d01d      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a76      	ldr	r2, [pc, #472]	@ (800cca0 <HAL_DMA_IRQHandler+0x6b8>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d018      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a74      	ldr	r2, [pc, #464]	@ (800cca4 <HAL_DMA_IRQHandler+0x6bc>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d013      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a73      	ldr	r2, [pc, #460]	@ (800cca8 <HAL_DMA_IRQHandler+0x6c0>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d00e      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a71      	ldr	r2, [pc, #452]	@ (800ccac <HAL_DMA_IRQHandler+0x6c4>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d009      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a70      	ldr	r2, [pc, #448]	@ (800ccb0 <HAL_DMA_IRQHandler+0x6c8>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d004      	beq.n	800cafe <HAL_DMA_IRQHandler+0x516>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a6e      	ldr	r2, [pc, #440]	@ (800ccb4 <HAL_DMA_IRQHandler+0x6cc>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d10a      	bne.n	800cb14 <HAL_DMA_IRQHandler+0x52c>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f003 0308 	and.w	r3, r3, #8
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	bf14      	ite	ne
 800cb0c:	2301      	movne	r3, #1
 800cb0e:	2300      	moveq	r3, #0
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	e009      	b.n	800cb28 <HAL_DMA_IRQHandler+0x540>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f003 0304 	and.w	r3, r3, #4
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	bf14      	ite	ne
 800cb22:	2301      	movne	r3, #1
 800cb24:	2300      	moveq	r3, #0
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d03e      	beq.n	800cbaa <HAL_DMA_IRQHandler+0x5c2>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb30:	f003 031f 	and.w	r3, r3, #31
 800cb34:	2210      	movs	r2, #16
 800cb36:	409a      	lsls	r2, r3
 800cb38:	6a3b      	ldr	r3, [r7, #32]
 800cb3a:	609a      	str	r2, [r3, #8]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d018      	beq.n	800cb7c <HAL_DMA_IRQHandler+0x594>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d108      	bne.n	800cb6a <HAL_DMA_IRQHandler+0x582>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d024      	beq.n	800cbaa <HAL_DMA_IRQHandler+0x5c2>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	4798      	blx	r3
 800cb68:	e01f      	b.n	800cbaa <HAL_DMA_IRQHandler+0x5c2>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d01b      	beq.n	800cbaa <HAL_DMA_IRQHandler+0x5c2>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	4798      	blx	r3
 800cb7a:	e016      	b.n	800cbaa <HAL_DMA_IRQHandler+0x5c2>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d107      	bne.n	800cb9a <HAL_DMA_IRQHandler+0x5b2>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f022 0208 	bic.w	r2, r2, #8
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d003      	beq.n	800cbaa <HAL_DMA_IRQHandler+0x5c2>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	4798      	blx	r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbae:	f003 031f 	and.w	r3, r3, #31
 800cbb2:	2220      	movs	r2, #32
 800cbb4:	409a      	lsls	r2, r3
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	4013      	ands	r3, r2
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 8110 	beq.w	800cde0 <HAL_DMA_IRQHandler+0x7f8>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a2c      	ldr	r2, [pc, #176]	@ (800cc78 <HAL_DMA_IRQHandler+0x690>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d04a      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a2b      	ldr	r2, [pc, #172]	@ (800cc7c <HAL_DMA_IRQHandler+0x694>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d045      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a29      	ldr	r2, [pc, #164]	@ (800cc80 <HAL_DMA_IRQHandler+0x698>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d040      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a28      	ldr	r2, [pc, #160]	@ (800cc84 <HAL_DMA_IRQHandler+0x69c>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d03b      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a26      	ldr	r2, [pc, #152]	@ (800cc88 <HAL_DMA_IRQHandler+0x6a0>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d036      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a25      	ldr	r2, [pc, #148]	@ (800cc8c <HAL_DMA_IRQHandler+0x6a4>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d031      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a23      	ldr	r2, [pc, #140]	@ (800cc90 <HAL_DMA_IRQHandler+0x6a8>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d02c      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a22      	ldr	r2, [pc, #136]	@ (800cc94 <HAL_DMA_IRQHandler+0x6ac>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d027      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a20      	ldr	r2, [pc, #128]	@ (800cc98 <HAL_DMA_IRQHandler+0x6b0>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d022      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a1f      	ldr	r2, [pc, #124]	@ (800cc9c <HAL_DMA_IRQHandler+0x6b4>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d01d      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a1d      	ldr	r2, [pc, #116]	@ (800cca0 <HAL_DMA_IRQHandler+0x6b8>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d018      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a1c      	ldr	r2, [pc, #112]	@ (800cca4 <HAL_DMA_IRQHandler+0x6bc>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d013      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a1a      	ldr	r2, [pc, #104]	@ (800cca8 <HAL_DMA_IRQHandler+0x6c0>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d00e      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a19      	ldr	r2, [pc, #100]	@ (800ccac <HAL_DMA_IRQHandler+0x6c4>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d009      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a17      	ldr	r2, [pc, #92]	@ (800ccb0 <HAL_DMA_IRQHandler+0x6c8>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d004      	beq.n	800cc60 <HAL_DMA_IRQHandler+0x678>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a16      	ldr	r2, [pc, #88]	@ (800ccb4 <HAL_DMA_IRQHandler+0x6cc>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d12b      	bne.n	800ccb8 <HAL_DMA_IRQHandler+0x6d0>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 0310 	and.w	r3, r3, #16
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	bf14      	ite	ne
 800cc6e:	2301      	movne	r3, #1
 800cc70:	2300      	moveq	r3, #0
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	e02a      	b.n	800cccc <HAL_DMA_IRQHandler+0x6e4>
 800cc76:	bf00      	nop
 800cc78:	40020010 	.word	0x40020010
 800cc7c:	40020028 	.word	0x40020028
 800cc80:	40020040 	.word	0x40020040
 800cc84:	40020058 	.word	0x40020058
 800cc88:	40020070 	.word	0x40020070
 800cc8c:	40020088 	.word	0x40020088
 800cc90:	400200a0 	.word	0x400200a0
 800cc94:	400200b8 	.word	0x400200b8
 800cc98:	40020410 	.word	0x40020410
 800cc9c:	40020428 	.word	0x40020428
 800cca0:	40020440 	.word	0x40020440
 800cca4:	40020458 	.word	0x40020458
 800cca8:	40020470 	.word	0x40020470
 800ccac:	40020488 	.word	0x40020488
 800ccb0:	400204a0 	.word	0x400204a0
 800ccb4:	400204b8 	.word	0x400204b8
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 0302 	and.w	r3, r3, #2
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	bf14      	ite	ne
 800ccc6:	2301      	movne	r3, #1
 800ccc8:	2300      	moveq	r3, #0
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f000 8087 	beq.w	800cde0 <HAL_DMA_IRQHandler+0x7f8>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccd6:	f003 031f 	and.w	r3, r3, #31
 800ccda:	2220      	movs	r2, #32
 800ccdc:	409a      	lsls	r2, r3
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	609a      	str	r2, [r3, #8]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	2b04      	cmp	r3, #4
 800ccec:	d139      	bne.n	800cd62 <HAL_DMA_IRQHandler+0x77a>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f022 0216 	bic.w	r2, r2, #22
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	695a      	ldr	r2, [r3, #20]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd0c:	615a      	str	r2, [r3, #20]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d103      	bne.n	800cd1e <HAL_DMA_IRQHandler+0x736>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d007      	beq.n	800cd2e <HAL_DMA_IRQHandler+0x746>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f022 0208 	bic.w	r2, r2, #8
 800cd2c:	601a      	str	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd32:	f003 031f 	and.w	r3, r3, #31
 800cd36:	223f      	movs	r2, #63	@ 0x3f
 800cd38:	409a      	lsls	r2, r3
 800cd3a:	6a3b      	ldr	r3, [r7, #32]
 800cd3c:	609a      	str	r2, [r3, #8]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2201      	movs	r2, #1
 800cd42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 834a 	beq.w	800d3ec <HAL_DMA_IRQHandler+0xe04>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	4798      	blx	r3
 800cd60:	e344      	b.n	800d3ec <HAL_DMA_IRQHandler+0xe04>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d018      	beq.n	800cda2 <HAL_DMA_IRQHandler+0x7ba>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d108      	bne.n	800cd90 <HAL_DMA_IRQHandler+0x7a8>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d02c      	beq.n	800cde0 <HAL_DMA_IRQHandler+0x7f8>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	4798      	blx	r3
 800cd8e:	e027      	b.n	800cde0 <HAL_DMA_IRQHandler+0x7f8>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d023      	beq.n	800cde0 <HAL_DMA_IRQHandler+0x7f8>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	4798      	blx	r3
 800cda0:	e01e      	b.n	800cde0 <HAL_DMA_IRQHandler+0x7f8>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d10f      	bne.n	800cdd0 <HAL_DMA_IRQHandler+0x7e8>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f022 0210 	bic.w	r2, r2, #16
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d003      	beq.n	800cde0 <HAL_DMA_IRQHandler+0x7f8>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	4798      	blx	r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f000 8306 	beq.w	800d3f6 <HAL_DMA_IRQHandler+0xe0e>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdee:	f003 0301 	and.w	r3, r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f000 8088 	beq.w	800cf08 <HAL_DMA_IRQHandler+0x920>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2204      	movs	r2, #4
 800cdfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a7a      	ldr	r2, [pc, #488]	@ (800cff0 <HAL_DMA_IRQHandler+0xa08>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d04a      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a79      	ldr	r2, [pc, #484]	@ (800cff4 <HAL_DMA_IRQHandler+0xa0c>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d045      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a77      	ldr	r2, [pc, #476]	@ (800cff8 <HAL_DMA_IRQHandler+0xa10>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d040      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	4a76      	ldr	r2, [pc, #472]	@ (800cffc <HAL_DMA_IRQHandler+0xa14>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d03b      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4a74      	ldr	r2, [pc, #464]	@ (800d000 <HAL_DMA_IRQHandler+0xa18>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d036      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a73      	ldr	r2, [pc, #460]	@ (800d004 <HAL_DMA_IRQHandler+0xa1c>)
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	d031      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a71      	ldr	r2, [pc, #452]	@ (800d008 <HAL_DMA_IRQHandler+0xa20>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d02c      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a70      	ldr	r2, [pc, #448]	@ (800d00c <HAL_DMA_IRQHandler+0xa24>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d027      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4a6e      	ldr	r2, [pc, #440]	@ (800d010 <HAL_DMA_IRQHandler+0xa28>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d022      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a6d      	ldr	r2, [pc, #436]	@ (800d014 <HAL_DMA_IRQHandler+0xa2c>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d01d      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a6b      	ldr	r2, [pc, #428]	@ (800d018 <HAL_DMA_IRQHandler+0xa30>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d018      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a6a      	ldr	r2, [pc, #424]	@ (800d01c <HAL_DMA_IRQHandler+0xa34>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d013      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a68      	ldr	r2, [pc, #416]	@ (800d020 <HAL_DMA_IRQHandler+0xa38>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d00e      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4a67      	ldr	r2, [pc, #412]	@ (800d024 <HAL_DMA_IRQHandler+0xa3c>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d009      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a65      	ldr	r2, [pc, #404]	@ (800d028 <HAL_DMA_IRQHandler+0xa40>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d004      	beq.n	800cea0 <HAL_DMA_IRQHandler+0x8b8>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	4a64      	ldr	r2, [pc, #400]	@ (800d02c <HAL_DMA_IRQHandler+0xa44>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d108      	bne.n	800ceb2 <HAL_DMA_IRQHandler+0x8ca>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f022 0201 	bic.w	r2, r2, #1
 800ceae:	601a      	str	r2, [r3, #0]
 800ceb0:	e007      	b.n	800cec2 <HAL_DMA_IRQHandler+0x8da>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f022 0201 	bic.w	r2, r2, #1
 800cec0:	601a      	str	r2, [r3, #0]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	3301      	adds	r3, #1
 800cec6:	60fb      	str	r3, [r7, #12]
 800cec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d307      	bcc.n	800cede <HAL_DMA_IRQHandler+0x8f6>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f003 0301 	and.w	r3, r3, #1
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1f2      	bne.n	800cec2 <HAL_DMA_IRQHandler+0x8da>
 800cedc:	e000      	b.n	800cee0 <HAL_DMA_IRQHandler+0x8f8>
 800cede:	bf00      	nop
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0301 	and.w	r3, r3, #1
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d004      	beq.n	800cef8 <HAL_DMA_IRQHandler+0x910>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2203      	movs	r2, #3
 800cef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800cef6:	e003      	b.n	800cf00 <HAL_DMA_IRQHandler+0x918>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 8272 	beq.w	800d3f6 <HAL_DMA_IRQHandler+0xe0e>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	4798      	blx	r3
 800cf1a:	e26c      	b.n	800d3f6 <HAL_DMA_IRQHandler+0xe0e>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a43      	ldr	r2, [pc, #268]	@ (800d030 <HAL_DMA_IRQHandler+0xa48>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d022      	beq.n	800cf6c <HAL_DMA_IRQHandler+0x984>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4a42      	ldr	r2, [pc, #264]	@ (800d034 <HAL_DMA_IRQHandler+0xa4c>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d01d      	beq.n	800cf6c <HAL_DMA_IRQHandler+0x984>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a40      	ldr	r2, [pc, #256]	@ (800d038 <HAL_DMA_IRQHandler+0xa50>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d018      	beq.n	800cf6c <HAL_DMA_IRQHandler+0x984>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a3f      	ldr	r2, [pc, #252]	@ (800d03c <HAL_DMA_IRQHandler+0xa54>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d013      	beq.n	800cf6c <HAL_DMA_IRQHandler+0x984>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a3d      	ldr	r2, [pc, #244]	@ (800d040 <HAL_DMA_IRQHandler+0xa58>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d00e      	beq.n	800cf6c <HAL_DMA_IRQHandler+0x984>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a3c      	ldr	r2, [pc, #240]	@ (800d044 <HAL_DMA_IRQHandler+0xa5c>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d009      	beq.n	800cf6c <HAL_DMA_IRQHandler+0x984>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a3a      	ldr	r2, [pc, #232]	@ (800d048 <HAL_DMA_IRQHandler+0xa60>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d004      	beq.n	800cf6c <HAL_DMA_IRQHandler+0x984>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a39      	ldr	r2, [pc, #228]	@ (800d04c <HAL_DMA_IRQHandler+0xa64>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d101      	bne.n	800cf70 <HAL_DMA_IRQHandler+0x988>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e000      	b.n	800cf72 <HAL_DMA_IRQHandler+0x98a>
 800cf70:	2300      	movs	r3, #0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 823f 	beq.w	800d3f6 <HAL_DMA_IRQHandler+0xe0e>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	613b      	str	r3, [r7, #16]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf84:	f003 031f 	and.w	r3, r3, #31
 800cf88:	2204      	movs	r2, #4
 800cf8a:	409a      	lsls	r2, r3
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	4013      	ands	r3, r2
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f000 80cd 	beq.w	800d130 <HAL_DMA_IRQHandler+0xb48>
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	f003 0304 	and.w	r3, r3, #4
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f000 80c7 	beq.w	800d130 <HAL_DMA_IRQHandler+0xb48>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfa6:	f003 031f 	and.w	r3, r3, #31
 800cfaa:	2204      	movs	r2, #4
 800cfac:	409a      	lsls	r2, r3
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	605a      	str	r2, [r3, #4]
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d049      	beq.n	800d050 <HAL_DMA_IRQHandler+0xa68>
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d109      	bne.n	800cfda <HAL_DMA_IRQHandler+0x9f2>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f000 8210 	beq.w	800d3f0 <HAL_DMA_IRQHandler+0xe08>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	4798      	blx	r3
 800cfd8:	e20a      	b.n	800d3f0 <HAL_DMA_IRQHandler+0xe08>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f000 8206 	beq.w	800d3f0 <HAL_DMA_IRQHandler+0xe08>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	4798      	blx	r3
 800cfec:	e200      	b.n	800d3f0 <HAL_DMA_IRQHandler+0xe08>
 800cfee:	bf00      	nop
 800cff0:	40020010 	.word	0x40020010
 800cff4:	40020028 	.word	0x40020028
 800cff8:	40020040 	.word	0x40020040
 800cffc:	40020058 	.word	0x40020058
 800d000:	40020070 	.word	0x40020070
 800d004:	40020088 	.word	0x40020088
 800d008:	400200a0 	.word	0x400200a0
 800d00c:	400200b8 	.word	0x400200b8
 800d010:	40020410 	.word	0x40020410
 800d014:	40020428 	.word	0x40020428
 800d018:	40020440 	.word	0x40020440
 800d01c:	40020458 	.word	0x40020458
 800d020:	40020470 	.word	0x40020470
 800d024:	40020488 	.word	0x40020488
 800d028:	400204a0 	.word	0x400204a0
 800d02c:	400204b8 	.word	0x400204b8
 800d030:	58025408 	.word	0x58025408
 800d034:	5802541c 	.word	0x5802541c
 800d038:	58025430 	.word	0x58025430
 800d03c:	58025444 	.word	0x58025444
 800d040:	58025458 	.word	0x58025458
 800d044:	5802546c 	.word	0x5802546c
 800d048:	58025480 	.word	0x58025480
 800d04c:	58025494 	.word	0x58025494
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	f003 0320 	and.w	r3, r3, #32
 800d056:	2b00      	cmp	r3, #0
 800d058:	d160      	bne.n	800d11c <HAL_DMA_IRQHandler+0xb34>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a7f      	ldr	r2, [pc, #508]	@ (800d25c <HAL_DMA_IRQHandler+0xc74>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d04a      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a7d      	ldr	r2, [pc, #500]	@ (800d260 <HAL_DMA_IRQHandler+0xc78>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d045      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4a7c      	ldr	r2, [pc, #496]	@ (800d264 <HAL_DMA_IRQHandler+0xc7c>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d040      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a7a      	ldr	r2, [pc, #488]	@ (800d268 <HAL_DMA_IRQHandler+0xc80>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d03b      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a79      	ldr	r2, [pc, #484]	@ (800d26c <HAL_DMA_IRQHandler+0xc84>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d036      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a77      	ldr	r2, [pc, #476]	@ (800d270 <HAL_DMA_IRQHandler+0xc88>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d031      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a76      	ldr	r2, [pc, #472]	@ (800d274 <HAL_DMA_IRQHandler+0xc8c>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d02c      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a74      	ldr	r2, [pc, #464]	@ (800d278 <HAL_DMA_IRQHandler+0xc90>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d027      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a73      	ldr	r2, [pc, #460]	@ (800d27c <HAL_DMA_IRQHandler+0xc94>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d022      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a71      	ldr	r2, [pc, #452]	@ (800d280 <HAL_DMA_IRQHandler+0xc98>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d01d      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a70      	ldr	r2, [pc, #448]	@ (800d284 <HAL_DMA_IRQHandler+0xc9c>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d018      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a6e      	ldr	r2, [pc, #440]	@ (800d288 <HAL_DMA_IRQHandler+0xca0>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d013      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a6d      	ldr	r2, [pc, #436]	@ (800d28c <HAL_DMA_IRQHandler+0xca4>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d00e      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a6b      	ldr	r2, [pc, #428]	@ (800d290 <HAL_DMA_IRQHandler+0xca8>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d009      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a6a      	ldr	r2, [pc, #424]	@ (800d294 <HAL_DMA_IRQHandler+0xcac>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d004      	beq.n	800d0fa <HAL_DMA_IRQHandler+0xb12>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a68      	ldr	r2, [pc, #416]	@ (800d298 <HAL_DMA_IRQHandler+0xcb0>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d108      	bne.n	800d10c <HAL_DMA_IRQHandler+0xb24>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f022 0208 	bic.w	r2, r2, #8
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	e007      	b.n	800d11c <HAL_DMA_IRQHandler+0xb34>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f022 0204 	bic.w	r2, r2, #4
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d120:	2b00      	cmp	r3, #0
 800d122:	f000 8165 	beq.w	800d3f0 <HAL_DMA_IRQHandler+0xe08>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	4798      	blx	r3
 800d12e:	e15f      	b.n	800d3f0 <HAL_DMA_IRQHandler+0xe08>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d134:	f003 031f 	and.w	r3, r3, #31
 800d138:	2202      	movs	r2, #2
 800d13a:	409a      	lsls	r2, r3
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	4013      	ands	r3, r2
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 80c5 	beq.w	800d2d0 <HAL_DMA_IRQHandler+0xce8>
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	f003 0302 	and.w	r3, r3, #2
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f000 80bf 	beq.w	800d2d0 <HAL_DMA_IRQHandler+0xce8>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d156:	f003 031f 	and.w	r3, r3, #31
 800d15a:	2202      	movs	r2, #2
 800d15c:	409a      	lsls	r2, r3
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	605a      	str	r2, [r3, #4]
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d018      	beq.n	800d19e <HAL_DMA_IRQHandler+0xbb6>
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d172:	2b00      	cmp	r3, #0
 800d174:	d109      	bne.n	800d18a <HAL_DMA_IRQHandler+0xba2>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f000 813a 	beq.w	800d3f4 <HAL_DMA_IRQHandler+0xe0c>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	4798      	blx	r3
 800d188:	e134      	b.n	800d3f4 <HAL_DMA_IRQHandler+0xe0c>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f000 8130 	beq.w	800d3f4 <HAL_DMA_IRQHandler+0xe0c>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	4798      	blx	r3
 800d19c:	e12a      	b.n	800d3f4 <HAL_DMA_IRQHandler+0xe0c>
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	f003 0320 	and.w	r3, r3, #32
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f040 8089 	bne.w	800d2bc <HAL_DMA_IRQHandler+0xcd4>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a2b      	ldr	r2, [pc, #172]	@ (800d25c <HAL_DMA_IRQHandler+0xc74>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d04a      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a29      	ldr	r2, [pc, #164]	@ (800d260 <HAL_DMA_IRQHandler+0xc78>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d045      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a28      	ldr	r2, [pc, #160]	@ (800d264 <HAL_DMA_IRQHandler+0xc7c>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d040      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a26      	ldr	r2, [pc, #152]	@ (800d268 <HAL_DMA_IRQHandler+0xc80>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d03b      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a25      	ldr	r2, [pc, #148]	@ (800d26c <HAL_DMA_IRQHandler+0xc84>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d036      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a23      	ldr	r2, [pc, #140]	@ (800d270 <HAL_DMA_IRQHandler+0xc88>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d031      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a22      	ldr	r2, [pc, #136]	@ (800d274 <HAL_DMA_IRQHandler+0xc8c>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d02c      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a20      	ldr	r2, [pc, #128]	@ (800d278 <HAL_DMA_IRQHandler+0xc90>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d027      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4a1f      	ldr	r2, [pc, #124]	@ (800d27c <HAL_DMA_IRQHandler+0xc94>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d022      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a1d      	ldr	r2, [pc, #116]	@ (800d280 <HAL_DMA_IRQHandler+0xc98>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d01d      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	4a1c      	ldr	r2, [pc, #112]	@ (800d284 <HAL_DMA_IRQHandler+0xc9c>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d018      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a1a      	ldr	r2, [pc, #104]	@ (800d288 <HAL_DMA_IRQHandler+0xca0>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d013      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a19      	ldr	r2, [pc, #100]	@ (800d28c <HAL_DMA_IRQHandler+0xca4>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d00e      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a17      	ldr	r2, [pc, #92]	@ (800d290 <HAL_DMA_IRQHandler+0xca8>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d009      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a16      	ldr	r2, [pc, #88]	@ (800d294 <HAL_DMA_IRQHandler+0xcac>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d004      	beq.n	800d24a <HAL_DMA_IRQHandler+0xc62>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a14      	ldr	r2, [pc, #80]	@ (800d298 <HAL_DMA_IRQHandler+0xcb0>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d128      	bne.n	800d29c <HAL_DMA_IRQHandler+0xcb4>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f022 0214 	bic.w	r2, r2, #20
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	e027      	b.n	800d2ac <HAL_DMA_IRQHandler+0xcc4>
 800d25c:	40020010 	.word	0x40020010
 800d260:	40020028 	.word	0x40020028
 800d264:	40020040 	.word	0x40020040
 800d268:	40020058 	.word	0x40020058
 800d26c:	40020070 	.word	0x40020070
 800d270:	40020088 	.word	0x40020088
 800d274:	400200a0 	.word	0x400200a0
 800d278:	400200b8 	.word	0x400200b8
 800d27c:	40020410 	.word	0x40020410
 800d280:	40020428 	.word	0x40020428
 800d284:	40020440 	.word	0x40020440
 800d288:	40020458 	.word	0x40020458
 800d28c:	40020470 	.word	0x40020470
 800d290:	40020488 	.word	0x40020488
 800d294:	400204a0 	.word	0x400204a0
 800d298:	400204b8 	.word	0x400204b8
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f022 020a 	bic.w	r2, r2, #10
 800d2aa:	601a      	str	r2, [r3, #0]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 8097 	beq.w	800d3f4 <HAL_DMA_IRQHandler+0xe0c>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	4798      	blx	r3
 800d2ce:	e091      	b.n	800d3f4 <HAL_DMA_IRQHandler+0xe0c>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2d4:	f003 031f 	and.w	r3, r3, #31
 800d2d8:	2208      	movs	r2, #8
 800d2da:	409a      	lsls	r2, r3
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	4013      	ands	r3, r2
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f000 8088 	beq.w	800d3f6 <HAL_DMA_IRQHandler+0xe0e>
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	f003 0308 	and.w	r3, r3, #8
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 8082 	beq.w	800d3f6 <HAL_DMA_IRQHandler+0xe0e>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a41      	ldr	r2, [pc, #260]	@ (800d3fc <HAL_DMA_IRQHandler+0xe14>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d04a      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a3f      	ldr	r2, [pc, #252]	@ (800d400 <HAL_DMA_IRQHandler+0xe18>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d045      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a3e      	ldr	r2, [pc, #248]	@ (800d404 <HAL_DMA_IRQHandler+0xe1c>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d040      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a3c      	ldr	r2, [pc, #240]	@ (800d408 <HAL_DMA_IRQHandler+0xe20>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d03b      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a3b      	ldr	r2, [pc, #236]	@ (800d40c <HAL_DMA_IRQHandler+0xe24>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d036      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a39      	ldr	r2, [pc, #228]	@ (800d410 <HAL_DMA_IRQHandler+0xe28>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d031      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a38      	ldr	r2, [pc, #224]	@ (800d414 <HAL_DMA_IRQHandler+0xe2c>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d02c      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a36      	ldr	r2, [pc, #216]	@ (800d418 <HAL_DMA_IRQHandler+0xe30>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d027      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a35      	ldr	r2, [pc, #212]	@ (800d41c <HAL_DMA_IRQHandler+0xe34>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d022      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a33      	ldr	r2, [pc, #204]	@ (800d420 <HAL_DMA_IRQHandler+0xe38>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d01d      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a32      	ldr	r2, [pc, #200]	@ (800d424 <HAL_DMA_IRQHandler+0xe3c>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d018      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a30      	ldr	r2, [pc, #192]	@ (800d428 <HAL_DMA_IRQHandler+0xe40>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d013      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a2f      	ldr	r2, [pc, #188]	@ (800d42c <HAL_DMA_IRQHandler+0xe44>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d00e      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a2d      	ldr	r2, [pc, #180]	@ (800d430 <HAL_DMA_IRQHandler+0xe48>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d009      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4a2c      	ldr	r2, [pc, #176]	@ (800d434 <HAL_DMA_IRQHandler+0xe4c>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d004      	beq.n	800d392 <HAL_DMA_IRQHandler+0xdaa>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a2a      	ldr	r2, [pc, #168]	@ (800d438 <HAL_DMA_IRQHandler+0xe50>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d108      	bne.n	800d3a4 <HAL_DMA_IRQHandler+0xdbc>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f022 021c 	bic.w	r2, r2, #28
 800d3a0:	601a      	str	r2, [r3, #0]
 800d3a2:	e007      	b.n	800d3b4 <HAL_DMA_IRQHandler+0xdcc>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f022 020e 	bic.w	r2, r2, #14
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d3b8:	f003 031f 	and.w	r3, r3, #31
 800d3bc:	2201      	movs	r2, #1
 800d3be:	409a      	lsls	r2, r3
 800d3c0:	69fb      	ldr	r3, [r7, #28]
 800d3c2:	605a      	str	r2, [r3, #4]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	655a      	str	r2, [r3, #84]	@ 0x54
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d009      	beq.n	800d3f6 <HAL_DMA_IRQHandler+0xe0e>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	4798      	blx	r3
 800d3ea:	e004      	b.n	800d3f6 <HAL_DMA_IRQHandler+0xe0e>
 800d3ec:	bf00      	nop
 800d3ee:	e002      	b.n	800d3f6 <HAL_DMA_IRQHandler+0xe0e>
 800d3f0:	bf00      	nop
 800d3f2:	e000      	b.n	800d3f6 <HAL_DMA_IRQHandler+0xe0e>
 800d3f4:	bf00      	nop
 800d3f6:	3728      	adds	r7, #40	@ 0x28
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	40020010 	.word	0x40020010
 800d400:	40020028 	.word	0x40020028
 800d404:	40020040 	.word	0x40020040
 800d408:	40020058 	.word	0x40020058
 800d40c:	40020070 	.word	0x40020070
 800d410:	40020088 	.word	0x40020088
 800d414:	400200a0 	.word	0x400200a0
 800d418:	400200b8 	.word	0x400200b8
 800d41c:	40020410 	.word	0x40020410
 800d420:	40020428 	.word	0x40020428
 800d424:	40020440 	.word	0x40020440
 800d428:	40020458 	.word	0x40020458
 800d42c:	40020470 	.word	0x40020470
 800d430:	40020488 	.word	0x40020488
 800d434:	400204a0 	.word	0x400204a0
 800d438:	400204b8 	.word	0x400204b8

0800d43c <HAL_DMA_GetState>:
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	4618      	mov	r0, r3
 800d44e:	370c      	adds	r7, #12
 800d450:	46bd      	mov	sp, r7
 800d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d456:	4770      	bx	lr

0800d458 <HAL_DMA_GetError>:
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d464:	4618      	mov	r0, r3
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <DMA_SetConfig>:
 800d470:	b480      	push	{r7}
 800d472:	b087      	sub	sp, #28
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	603b      	str	r3, [r7, #0]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d482:	617b      	str	r3, [r7, #20]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d488:	613b      	str	r3, [r7, #16]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a7f      	ldr	r2, [pc, #508]	@ (800d68c <DMA_SetConfig+0x21c>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d072      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a7d      	ldr	r2, [pc, #500]	@ (800d690 <DMA_SetConfig+0x220>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d06d      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a7c      	ldr	r2, [pc, #496]	@ (800d694 <DMA_SetConfig+0x224>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d068      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a7a      	ldr	r2, [pc, #488]	@ (800d698 <DMA_SetConfig+0x228>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d063      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a79      	ldr	r2, [pc, #484]	@ (800d69c <DMA_SetConfig+0x22c>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d05e      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a77      	ldr	r2, [pc, #476]	@ (800d6a0 <DMA_SetConfig+0x230>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d059      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a76      	ldr	r2, [pc, #472]	@ (800d6a4 <DMA_SetConfig+0x234>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d054      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a74      	ldr	r2, [pc, #464]	@ (800d6a8 <DMA_SetConfig+0x238>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d04f      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a73      	ldr	r2, [pc, #460]	@ (800d6ac <DMA_SetConfig+0x23c>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d04a      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a71      	ldr	r2, [pc, #452]	@ (800d6b0 <DMA_SetConfig+0x240>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d045      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a70      	ldr	r2, [pc, #448]	@ (800d6b4 <DMA_SetConfig+0x244>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d040      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a6e      	ldr	r2, [pc, #440]	@ (800d6b8 <DMA_SetConfig+0x248>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d03b      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a6d      	ldr	r2, [pc, #436]	@ (800d6bc <DMA_SetConfig+0x24c>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d036      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a6b      	ldr	r2, [pc, #428]	@ (800d6c0 <DMA_SetConfig+0x250>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d031      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a6a      	ldr	r2, [pc, #424]	@ (800d6c4 <DMA_SetConfig+0x254>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d02c      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a68      	ldr	r2, [pc, #416]	@ (800d6c8 <DMA_SetConfig+0x258>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d027      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	4a67      	ldr	r2, [pc, #412]	@ (800d6cc <DMA_SetConfig+0x25c>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d022      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a65      	ldr	r2, [pc, #404]	@ (800d6d0 <DMA_SetConfig+0x260>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d01d      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4a64      	ldr	r2, [pc, #400]	@ (800d6d4 <DMA_SetConfig+0x264>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d018      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a62      	ldr	r2, [pc, #392]	@ (800d6d8 <DMA_SetConfig+0x268>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d013      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a61      	ldr	r2, [pc, #388]	@ (800d6dc <DMA_SetConfig+0x26c>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d00e      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a5f      	ldr	r2, [pc, #380]	@ (800d6e0 <DMA_SetConfig+0x270>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d009      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4a5e      	ldr	r2, [pc, #376]	@ (800d6e4 <DMA_SetConfig+0x274>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d004      	beq.n	800d57a <DMA_SetConfig+0x10a>
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a5c      	ldr	r2, [pc, #368]	@ (800d6e8 <DMA_SetConfig+0x278>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d101      	bne.n	800d57e <DMA_SetConfig+0x10e>
 800d57a:	2301      	movs	r3, #1
 800d57c:	e000      	b.n	800d580 <DMA_SetConfig+0x110>
 800d57e:	2300      	movs	r3, #0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00d      	beq.n	800d5a0 <DMA_SetConfig+0x130>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800d58c:	605a      	str	r2, [r3, #4]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d592:	2b00      	cmp	r3, #0
 800d594:	d004      	beq.n	800d5a0 <DMA_SetConfig+0x130>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d59e:	605a      	str	r2, [r3, #4]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a39      	ldr	r2, [pc, #228]	@ (800d68c <DMA_SetConfig+0x21c>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d04a      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	4a38      	ldr	r2, [pc, #224]	@ (800d690 <DMA_SetConfig+0x220>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d045      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a36      	ldr	r2, [pc, #216]	@ (800d694 <DMA_SetConfig+0x224>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d040      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4a35      	ldr	r2, [pc, #212]	@ (800d698 <DMA_SetConfig+0x228>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d03b      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a33      	ldr	r2, [pc, #204]	@ (800d69c <DMA_SetConfig+0x22c>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d036      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a32      	ldr	r2, [pc, #200]	@ (800d6a0 <DMA_SetConfig+0x230>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d031      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a30      	ldr	r2, [pc, #192]	@ (800d6a4 <DMA_SetConfig+0x234>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d02c      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a2f      	ldr	r2, [pc, #188]	@ (800d6a8 <DMA_SetConfig+0x238>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d027      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a2d      	ldr	r2, [pc, #180]	@ (800d6ac <DMA_SetConfig+0x23c>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d022      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a2c      	ldr	r2, [pc, #176]	@ (800d6b0 <DMA_SetConfig+0x240>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d01d      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a2a      	ldr	r2, [pc, #168]	@ (800d6b4 <DMA_SetConfig+0x244>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d018      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a29      	ldr	r2, [pc, #164]	@ (800d6b8 <DMA_SetConfig+0x248>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d013      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a27      	ldr	r2, [pc, #156]	@ (800d6bc <DMA_SetConfig+0x24c>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d00e      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a26      	ldr	r2, [pc, #152]	@ (800d6c0 <DMA_SetConfig+0x250>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d009      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a24      	ldr	r2, [pc, #144]	@ (800d6c4 <DMA_SetConfig+0x254>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d004      	beq.n	800d640 <DMA_SetConfig+0x1d0>
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	4a23      	ldr	r2, [pc, #140]	@ (800d6c8 <DMA_SetConfig+0x258>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d101      	bne.n	800d644 <DMA_SetConfig+0x1d4>
 800d640:	2301      	movs	r3, #1
 800d642:	e000      	b.n	800d646 <DMA_SetConfig+0x1d6>
 800d644:	2300      	movs	r3, #0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d059      	beq.n	800d6fe <DMA_SetConfig+0x28e>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d64e:	f003 031f 	and.w	r3, r3, #31
 800d652:	223f      	movs	r2, #63	@ 0x3f
 800d654:	409a      	lsls	r2, r3
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	609a      	str	r2, [r3, #8]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	681a      	ldr	r2, [r3, #0]
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d668:	601a      	str	r2, [r3, #0]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	683a      	ldr	r2, [r7, #0]
 800d670:	605a      	str	r2, [r3, #4]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	689b      	ldr	r3, [r3, #8]
 800d676:	2b40      	cmp	r3, #64	@ 0x40
 800d678:	d138      	bne.n	800d6ec <DMA_SetConfig+0x27c>
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	609a      	str	r2, [r3, #8]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	68ba      	ldr	r2, [r7, #8]
 800d688:	60da      	str	r2, [r3, #12]
 800d68a:	e086      	b.n	800d79a <DMA_SetConfig+0x32a>
 800d68c:	40020010 	.word	0x40020010
 800d690:	40020028 	.word	0x40020028
 800d694:	40020040 	.word	0x40020040
 800d698:	40020058 	.word	0x40020058
 800d69c:	40020070 	.word	0x40020070
 800d6a0:	40020088 	.word	0x40020088
 800d6a4:	400200a0 	.word	0x400200a0
 800d6a8:	400200b8 	.word	0x400200b8
 800d6ac:	40020410 	.word	0x40020410
 800d6b0:	40020428 	.word	0x40020428
 800d6b4:	40020440 	.word	0x40020440
 800d6b8:	40020458 	.word	0x40020458
 800d6bc:	40020470 	.word	0x40020470
 800d6c0:	40020488 	.word	0x40020488
 800d6c4:	400204a0 	.word	0x400204a0
 800d6c8:	400204b8 	.word	0x400204b8
 800d6cc:	58025408 	.word	0x58025408
 800d6d0:	5802541c 	.word	0x5802541c
 800d6d4:	58025430 	.word	0x58025430
 800d6d8:	58025444 	.word	0x58025444
 800d6dc:	58025458 	.word	0x58025458
 800d6e0:	5802546c 	.word	0x5802546c
 800d6e4:	58025480 	.word	0x58025480
 800d6e8:	58025494 	.word	0x58025494
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	609a      	str	r2, [r3, #8]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	60da      	str	r2, [r3, #12]
 800d6fc:	e04d      	b.n	800d79a <DMA_SetConfig+0x32a>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a29      	ldr	r2, [pc, #164]	@ (800d7a8 <DMA_SetConfig+0x338>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d022      	beq.n	800d74e <DMA_SetConfig+0x2de>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a27      	ldr	r2, [pc, #156]	@ (800d7ac <DMA_SetConfig+0x33c>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d01d      	beq.n	800d74e <DMA_SetConfig+0x2de>
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4a26      	ldr	r2, [pc, #152]	@ (800d7b0 <DMA_SetConfig+0x340>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d018      	beq.n	800d74e <DMA_SetConfig+0x2de>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a24      	ldr	r2, [pc, #144]	@ (800d7b4 <DMA_SetConfig+0x344>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d013      	beq.n	800d74e <DMA_SetConfig+0x2de>
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a23      	ldr	r2, [pc, #140]	@ (800d7b8 <DMA_SetConfig+0x348>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d00e      	beq.n	800d74e <DMA_SetConfig+0x2de>
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a21      	ldr	r2, [pc, #132]	@ (800d7bc <DMA_SetConfig+0x34c>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d009      	beq.n	800d74e <DMA_SetConfig+0x2de>
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a20      	ldr	r2, [pc, #128]	@ (800d7c0 <DMA_SetConfig+0x350>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d004      	beq.n	800d74e <DMA_SetConfig+0x2de>
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a1e      	ldr	r2, [pc, #120]	@ (800d7c4 <DMA_SetConfig+0x354>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d101      	bne.n	800d752 <DMA_SetConfig+0x2e2>
 800d74e:	2301      	movs	r3, #1
 800d750:	e000      	b.n	800d754 <DMA_SetConfig+0x2e4>
 800d752:	2300      	movs	r3, #0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d020      	beq.n	800d79a <DMA_SetConfig+0x32a>
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d75c:	f003 031f 	and.w	r3, r3, #31
 800d760:	2201      	movs	r2, #1
 800d762:	409a      	lsls	r2, r3
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	605a      	str	r2, [r3, #4]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	683a      	ldr	r2, [r7, #0]
 800d76e:	605a      	str	r2, [r3, #4]
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	2b40      	cmp	r3, #64	@ 0x40
 800d776:	d108      	bne.n	800d78a <DMA_SetConfig+0x31a>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	609a      	str	r2, [r3, #8]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	60da      	str	r2, [r3, #12]
 800d788:	e007      	b.n	800d79a <DMA_SetConfig+0x32a>
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	68ba      	ldr	r2, [r7, #8]
 800d790:	609a      	str	r2, [r3, #8]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	60da      	str	r2, [r3, #12]
 800d79a:	bf00      	nop
 800d79c:	371c      	adds	r7, #28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	58025408 	.word	0x58025408
 800d7ac:	5802541c 	.word	0x5802541c
 800d7b0:	58025430 	.word	0x58025430
 800d7b4:	58025444 	.word	0x58025444
 800d7b8:	58025458 	.word	0x58025458
 800d7bc:	5802546c 	.word	0x5802546c
 800d7c0:	58025480 	.word	0x58025480
 800d7c4:	58025494 	.word	0x58025494

0800d7c8 <DMA_CalcBaseAndBitshift>:
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a42      	ldr	r2, [pc, #264]	@ (800d8e0 <DMA_CalcBaseAndBitshift+0x118>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d04a      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a41      	ldr	r2, [pc, #260]	@ (800d8e4 <DMA_CalcBaseAndBitshift+0x11c>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d045      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a3f      	ldr	r2, [pc, #252]	@ (800d8e8 <DMA_CalcBaseAndBitshift+0x120>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d040      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a3e      	ldr	r2, [pc, #248]	@ (800d8ec <DMA_CalcBaseAndBitshift+0x124>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d03b      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4a3c      	ldr	r2, [pc, #240]	@ (800d8f0 <DMA_CalcBaseAndBitshift+0x128>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d036      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4a3b      	ldr	r2, [pc, #236]	@ (800d8f4 <DMA_CalcBaseAndBitshift+0x12c>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d031      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a39      	ldr	r2, [pc, #228]	@ (800d8f8 <DMA_CalcBaseAndBitshift+0x130>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d02c      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a38      	ldr	r2, [pc, #224]	@ (800d8fc <DMA_CalcBaseAndBitshift+0x134>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d027      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a36      	ldr	r2, [pc, #216]	@ (800d900 <DMA_CalcBaseAndBitshift+0x138>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d022      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a35      	ldr	r2, [pc, #212]	@ (800d904 <DMA_CalcBaseAndBitshift+0x13c>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d01d      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a33      	ldr	r2, [pc, #204]	@ (800d908 <DMA_CalcBaseAndBitshift+0x140>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d018      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a32      	ldr	r2, [pc, #200]	@ (800d90c <DMA_CalcBaseAndBitshift+0x144>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d013      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a30      	ldr	r2, [pc, #192]	@ (800d910 <DMA_CalcBaseAndBitshift+0x148>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d00e      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a2f      	ldr	r2, [pc, #188]	@ (800d914 <DMA_CalcBaseAndBitshift+0x14c>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d009      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a2d      	ldr	r2, [pc, #180]	@ (800d918 <DMA_CalcBaseAndBitshift+0x150>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d004      	beq.n	800d870 <DMA_CalcBaseAndBitshift+0xa8>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a2c      	ldr	r2, [pc, #176]	@ (800d91c <DMA_CalcBaseAndBitshift+0x154>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d101      	bne.n	800d874 <DMA_CalcBaseAndBitshift+0xac>
 800d870:	2301      	movs	r3, #1
 800d872:	e000      	b.n	800d876 <DMA_CalcBaseAndBitshift+0xae>
 800d874:	2300      	movs	r3, #0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d024      	beq.n	800d8c4 <DMA_CalcBaseAndBitshift+0xfc>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	3b10      	subs	r3, #16
 800d882:	4a27      	ldr	r2, [pc, #156]	@ (800d920 <DMA_CalcBaseAndBitshift+0x158>)
 800d884:	fba2 2303 	umull	r2, r3, r2, r3
 800d888:	091b      	lsrs	r3, r3, #4
 800d88a:	60fb      	str	r3, [r7, #12]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f003 0307 	and.w	r3, r3, #7
 800d892:	4a24      	ldr	r2, [pc, #144]	@ (800d924 <DMA_CalcBaseAndBitshift+0x15c>)
 800d894:	5cd3      	ldrb	r3, [r2, r3]
 800d896:	461a      	mov	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d908      	bls.n	800d8b4 <DMA_CalcBaseAndBitshift+0xec>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	4b1f      	ldr	r3, [pc, #124]	@ (800d928 <DMA_CalcBaseAndBitshift+0x160>)
 800d8aa:	4013      	ands	r3, r2
 800d8ac:	1d1a      	adds	r2, r3, #4
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	659a      	str	r2, [r3, #88]	@ 0x58
 800d8b2:	e00d      	b.n	800d8d0 <DMA_CalcBaseAndBitshift+0x108>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	4b1b      	ldr	r3, [pc, #108]	@ (800d928 <DMA_CalcBaseAndBitshift+0x160>)
 800d8bc:	4013      	ands	r3, r2
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	6593      	str	r3, [r2, #88]	@ 0x58
 800d8c2:	e005      	b.n	800d8d0 <DMA_CalcBaseAndBitshift+0x108>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	659a      	str	r2, [r3, #88]	@ 0x58
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3714      	adds	r7, #20
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	40020010 	.word	0x40020010
 800d8e4:	40020028 	.word	0x40020028
 800d8e8:	40020040 	.word	0x40020040
 800d8ec:	40020058 	.word	0x40020058
 800d8f0:	40020070 	.word	0x40020070
 800d8f4:	40020088 	.word	0x40020088
 800d8f8:	400200a0 	.word	0x400200a0
 800d8fc:	400200b8 	.word	0x400200b8
 800d900:	40020410 	.word	0x40020410
 800d904:	40020428 	.word	0x40020428
 800d908:	40020440 	.word	0x40020440
 800d90c:	40020458 	.word	0x40020458
 800d910:	40020470 	.word	0x40020470
 800d914:	40020488 	.word	0x40020488
 800d918:	400204a0 	.word	0x400204a0
 800d91c:	400204b8 	.word	0x400204b8
 800d920:	aaaaaaab 	.word	0xaaaaaaab
 800d924:	0801e38c 	.word	0x0801e38c
 800d928:	fffffc00 	.word	0xfffffc00

0800d92c <DMA_CheckFifoParam>:
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	2300      	movs	r3, #0
 800d936:	73fb      	strb	r3, [r7, #15]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	699b      	ldr	r3, [r3, #24]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d120      	bne.n	800d982 <DMA_CheckFifoParam+0x56>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d944:	2b03      	cmp	r3, #3
 800d946:	d858      	bhi.n	800d9fa <DMA_CheckFifoParam+0xce>
 800d948:	a201      	add	r2, pc, #4	@ (adr r2, 800d950 <DMA_CheckFifoParam+0x24>)
 800d94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94e:	bf00      	nop
 800d950:	0800d961 	.word	0x0800d961
 800d954:	0800d973 	.word	0x0800d973
 800d958:	0800d961 	.word	0x0800d961
 800d95c:	0800d9fb 	.word	0x0800d9fb
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d964:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d048      	beq.n	800d9fe <DMA_CheckFifoParam+0xd2>
 800d96c:	2301      	movs	r3, #1
 800d96e:	73fb      	strb	r3, [r7, #15]
 800d970:	e045      	b.n	800d9fe <DMA_CheckFifoParam+0xd2>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d976:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d97a:	d142      	bne.n	800da02 <DMA_CheckFifoParam+0xd6>
 800d97c:	2301      	movs	r3, #1
 800d97e:	73fb      	strb	r3, [r7, #15]
 800d980:	e03f      	b.n	800da02 <DMA_CheckFifoParam+0xd6>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	699b      	ldr	r3, [r3, #24]
 800d986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d98a:	d123      	bne.n	800d9d4 <DMA_CheckFifoParam+0xa8>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d990:	2b03      	cmp	r3, #3
 800d992:	d838      	bhi.n	800da06 <DMA_CheckFifoParam+0xda>
 800d994:	a201      	add	r2, pc, #4	@ (adr r2, 800d99c <DMA_CheckFifoParam+0x70>)
 800d996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d99a:	bf00      	nop
 800d99c:	0800d9ad 	.word	0x0800d9ad
 800d9a0:	0800d9b3 	.word	0x0800d9b3
 800d9a4:	0800d9ad 	.word	0x0800d9ad
 800d9a8:	0800d9c5 	.word	0x0800d9c5
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	73fb      	strb	r3, [r7, #15]
 800d9b0:	e030      	b.n	800da14 <DMA_CheckFifoParam+0xe8>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d025      	beq.n	800da0a <DMA_CheckFifoParam+0xde>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	73fb      	strb	r3, [r7, #15]
 800d9c2:	e022      	b.n	800da0a <DMA_CheckFifoParam+0xde>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d9cc:	d11f      	bne.n	800da0e <DMA_CheckFifoParam+0xe2>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	73fb      	strb	r3, [r7, #15]
 800d9d2:	e01c      	b.n	800da0e <DMA_CheckFifoParam+0xe2>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9d8:	2b02      	cmp	r3, #2
 800d9da:	d902      	bls.n	800d9e2 <DMA_CheckFifoParam+0xb6>
 800d9dc:	2b03      	cmp	r3, #3
 800d9de:	d003      	beq.n	800d9e8 <DMA_CheckFifoParam+0xbc>
 800d9e0:	e018      	b.n	800da14 <DMA_CheckFifoParam+0xe8>
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	73fb      	strb	r3, [r7, #15]
 800d9e6:	e015      	b.n	800da14 <DMA_CheckFifoParam+0xe8>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00e      	beq.n	800da12 <DMA_CheckFifoParam+0xe6>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	73fb      	strb	r3, [r7, #15]
 800d9f8:	e00b      	b.n	800da12 <DMA_CheckFifoParam+0xe6>
 800d9fa:	bf00      	nop
 800d9fc:	e00a      	b.n	800da14 <DMA_CheckFifoParam+0xe8>
 800d9fe:	bf00      	nop
 800da00:	e008      	b.n	800da14 <DMA_CheckFifoParam+0xe8>
 800da02:	bf00      	nop
 800da04:	e006      	b.n	800da14 <DMA_CheckFifoParam+0xe8>
 800da06:	bf00      	nop
 800da08:	e004      	b.n	800da14 <DMA_CheckFifoParam+0xe8>
 800da0a:	bf00      	nop
 800da0c:	e002      	b.n	800da14 <DMA_CheckFifoParam+0xe8>
 800da0e:	bf00      	nop
 800da10:	e000      	b.n	800da14 <DMA_CheckFifoParam+0xe8>
 800da12:	bf00      	nop
 800da14:	7bfb      	ldrb	r3, [r7, #15]
 800da16:	4618      	mov	r0, r3
 800da18:	3714      	adds	r7, #20
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop

0800da24 <DMA_CalcDMAMUXChannelBaseAndMask>:
 800da24:	b480      	push	{r7}
 800da26:	b085      	sub	sp, #20
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	60bb      	str	r3, [r7, #8]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a38      	ldr	r2, [pc, #224]	@ (800db18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d022      	beq.n	800da82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a36      	ldr	r2, [pc, #216]	@ (800db1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d01d      	beq.n	800da82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a35      	ldr	r2, [pc, #212]	@ (800db20 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d018      	beq.n	800da82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4a33      	ldr	r2, [pc, #204]	@ (800db24 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d013      	beq.n	800da82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a32      	ldr	r2, [pc, #200]	@ (800db28 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d00e      	beq.n	800da82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a30      	ldr	r2, [pc, #192]	@ (800db2c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d009      	beq.n	800da82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4a2f      	ldr	r2, [pc, #188]	@ (800db30 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d004      	beq.n	800da82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a2d      	ldr	r2, [pc, #180]	@ (800db34 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d101      	bne.n	800da86 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800da82:	2301      	movs	r3, #1
 800da84:	e000      	b.n	800da88 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800da86:	2300      	movs	r3, #0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d01a      	beq.n	800dac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	b2db      	uxtb	r3, r3
 800da92:	3b08      	subs	r3, #8
 800da94:	4a28      	ldr	r2, [pc, #160]	@ (800db38 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800da96:	fba2 2303 	umull	r2, r3, r2, r3
 800da9a:	091b      	lsrs	r3, r3, #4
 800da9c:	60fb      	str	r3, [r7, #12]
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	4b26      	ldr	r3, [pc, #152]	@ (800db3c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800daa2:	4413      	add	r3, r2
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	461a      	mov	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	661a      	str	r2, [r3, #96]	@ 0x60
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	4a24      	ldr	r2, [pc, #144]	@ (800db40 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800dab0:	665a      	str	r2, [r3, #100]	@ 0x64
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	f003 031f 	and.w	r3, r3, #31
 800dab8:	2201      	movs	r2, #1
 800daba:	409a      	lsls	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	669a      	str	r2, [r3, #104]	@ 0x68
 800dac0:	e024      	b.n	800db0c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	3b10      	subs	r3, #16
 800daca:	4a1e      	ldr	r2, [pc, #120]	@ (800db44 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800dacc:	fba2 2303 	umull	r2, r3, r2, r3
 800dad0:	091b      	lsrs	r3, r3, #4
 800dad2:	60fb      	str	r3, [r7, #12]
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	4a1c      	ldr	r2, [pc, #112]	@ (800db48 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d806      	bhi.n	800daea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	4a1b      	ldr	r2, [pc, #108]	@ (800db4c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d902      	bls.n	800daea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	3308      	adds	r3, #8
 800dae8:	60fb      	str	r3, [r7, #12]
 800daea:	68fa      	ldr	r2, [r7, #12]
 800daec:	4b18      	ldr	r3, [pc, #96]	@ (800db50 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800daee:	4413      	add	r3, r2
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	461a      	mov	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	661a      	str	r2, [r3, #96]	@ 0x60
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a16      	ldr	r2, [pc, #88]	@ (800db54 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800dafc:	665a      	str	r2, [r3, #100]	@ 0x64
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f003 031f 	and.w	r3, r3, #31
 800db04:	2201      	movs	r2, #1
 800db06:	409a      	lsls	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	669a      	str	r2, [r3, #104]	@ 0x68
 800db0c:	bf00      	nop
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	58025408 	.word	0x58025408
 800db1c:	5802541c 	.word	0x5802541c
 800db20:	58025430 	.word	0x58025430
 800db24:	58025444 	.word	0x58025444
 800db28:	58025458 	.word	0x58025458
 800db2c:	5802546c 	.word	0x5802546c
 800db30:	58025480 	.word	0x58025480
 800db34:	58025494 	.word	0x58025494
 800db38:	cccccccd 	.word	0xcccccccd
 800db3c:	16009600 	.word	0x16009600
 800db40:	58025880 	.word	0x58025880
 800db44:	aaaaaaab 	.word	0xaaaaaaab
 800db48:	400204b8 	.word	0x400204b8
 800db4c:	4002040f 	.word	0x4002040f
 800db50:	10008200 	.word	0x10008200
 800db54:	40020880 	.word	0x40020880

0800db58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	b2db      	uxtb	r3, r3
 800db66:	60fb      	str	r3, [r7, #12]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d04a      	beq.n	800dc04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2b08      	cmp	r3, #8
 800db72:	d847      	bhi.n	800dc04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a25      	ldr	r2, [pc, #148]	@ (800dc10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d022      	beq.n	800dbc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a24      	ldr	r2, [pc, #144]	@ (800dc14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800db84:	4293      	cmp	r3, r2
 800db86:	d01d      	beq.n	800dbc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a22      	ldr	r2, [pc, #136]	@ (800dc18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d018      	beq.n	800dbc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	4a21      	ldr	r2, [pc, #132]	@ (800dc1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d013      	beq.n	800dbc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a1f      	ldr	r2, [pc, #124]	@ (800dc20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d00e      	beq.n	800dbc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a1e      	ldr	r2, [pc, #120]	@ (800dc24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d009      	beq.n	800dbc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4a1c      	ldr	r2, [pc, #112]	@ (800dc28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d004      	beq.n	800dbc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a1b      	ldr	r2, [pc, #108]	@ (800dc2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d101      	bne.n	800dbc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e000      	b.n	800dbca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00a      	beq.n	800dbe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	4b17      	ldr	r3, [pc, #92]	@ (800dc30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800dbd2:	4413      	add	r3, r2
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	66da      	str	r2, [r3, #108]	@ 0x6c
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	4a15      	ldr	r2, [pc, #84]	@ (800dc34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800dbe0:	671a      	str	r2, [r3, #112]	@ 0x70
 800dbe2:	e009      	b.n	800dbf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	4b14      	ldr	r3, [pc, #80]	@ (800dc38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800dbe8:	4413      	add	r3, r2
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	461a      	mov	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4a11      	ldr	r2, [pc, #68]	@ (800dc3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800dbf6:	671a      	str	r2, [r3, #112]	@ 0x70
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	409a      	lsls	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	675a      	str	r2, [r3, #116]	@ 0x74
 800dc04:	bf00      	nop
 800dc06:	3714      	adds	r7, #20
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr
 800dc10:	58025408 	.word	0x58025408
 800dc14:	5802541c 	.word	0x5802541c
 800dc18:	58025430 	.word	0x58025430
 800dc1c:	58025444 	.word	0x58025444
 800dc20:	58025458 	.word	0x58025458
 800dc24:	5802546c 	.word	0x5802546c
 800dc28:	58025480 	.word	0x58025480
 800dc2c:	58025494 	.word	0x58025494
 800dc30:	1600963f 	.word	0x1600963f
 800dc34:	58025940 	.word	0x58025940
 800dc38:	1000823f 	.word	0x1000823f
 800dc3c:	40020940 	.word	0x40020940

0800dc40 <HAL_GPIO_Init>:
 800dc40:	b480      	push	{r7}
 800dc42:	b089      	sub	sp, #36	@ 0x24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	61fb      	str	r3, [r7, #28]
 800dc4e:	4b86      	ldr	r3, [pc, #536]	@ (800de68 <HAL_GPIO_Init+0x228>)
 800dc50:	617b      	str	r3, [r7, #20]
 800dc52:	e18c      	b.n	800df6e <HAL_GPIO_Init+0x32e>
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	2101      	movs	r1, #1
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc60:	4013      	ands	r3, r2
 800dc62:	613b      	str	r3, [r7, #16]
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f000 817e 	beq.w	800df68 <HAL_GPIO_Init+0x328>
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	f003 0303 	and.w	r3, r3, #3
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d005      	beq.n	800dc84 <HAL_GPIO_Init+0x44>
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	f003 0303 	and.w	r3, r3, #3
 800dc80:	2b02      	cmp	r3, #2
 800dc82:	d130      	bne.n	800dce6 <HAL_GPIO_Init+0xa6>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	61bb      	str	r3, [r7, #24]
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	005b      	lsls	r3, r3, #1
 800dc8e:	2203      	movs	r2, #3
 800dc90:	fa02 f303 	lsl.w	r3, r2, r3
 800dc94:	43db      	mvns	r3, r3
 800dc96:	69ba      	ldr	r2, [r7, #24]
 800dc98:	4013      	ands	r3, r2
 800dc9a:	61bb      	str	r3, [r7, #24]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	68da      	ldr	r2, [r3, #12]
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	fa02 f303 	lsl.w	r3, r2, r3
 800dca8:	69ba      	ldr	r2, [r7, #24]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	61bb      	str	r3, [r7, #24]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	69ba      	ldr	r2, [r7, #24]
 800dcb2:	609a      	str	r2, [r3, #8]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	61bb      	str	r3, [r7, #24]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	fa02 f303 	lsl.w	r3, r2, r3
 800dcc2:	43db      	mvns	r3, r3
 800dcc4:	69ba      	ldr	r2, [r7, #24]
 800dcc6:	4013      	ands	r3, r2
 800dcc8:	61bb      	str	r3, [r7, #24]
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	091b      	lsrs	r3, r3, #4
 800dcd0:	f003 0201 	and.w	r2, r3, #1
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	fa02 f303 	lsl.w	r3, r2, r3
 800dcda:	69ba      	ldr	r2, [r7, #24]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	61bb      	str	r3, [r7, #24]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	69ba      	ldr	r2, [r7, #24]
 800dce4:	605a      	str	r2, [r3, #4]
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	f003 0303 	and.w	r3, r3, #3
 800dcee:	2b03      	cmp	r3, #3
 800dcf0:	d017      	beq.n	800dd22 <HAL_GPIO_Init+0xe2>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	68db      	ldr	r3, [r3, #12]
 800dcf6:	61bb      	str	r3, [r7, #24]
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	005b      	lsls	r3, r3, #1
 800dcfc:	2203      	movs	r2, #3
 800dcfe:	fa02 f303 	lsl.w	r3, r2, r3
 800dd02:	43db      	mvns	r3, r3
 800dd04:	69ba      	ldr	r2, [r7, #24]
 800dd06:	4013      	ands	r3, r2
 800dd08:	61bb      	str	r3, [r7, #24]
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	689a      	ldr	r2, [r3, #8]
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	005b      	lsls	r3, r3, #1
 800dd12:	fa02 f303 	lsl.w	r3, r2, r3
 800dd16:	69ba      	ldr	r2, [r7, #24]
 800dd18:	4313      	orrs	r3, r2
 800dd1a:	61bb      	str	r3, [r7, #24]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	69ba      	ldr	r2, [r7, #24]
 800dd20:	60da      	str	r2, [r3, #12]
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f003 0303 	and.w	r3, r3, #3
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d123      	bne.n	800dd76 <HAL_GPIO_Init+0x136>
 800dd2e:	69fb      	ldr	r3, [r7, #28]
 800dd30:	08da      	lsrs	r2, r3, #3
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	3208      	adds	r2, #8
 800dd36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd3a:	61bb      	str	r3, [r7, #24]
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	f003 0307 	and.w	r3, r3, #7
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	220f      	movs	r2, #15
 800dd46:	fa02 f303 	lsl.w	r3, r2, r3
 800dd4a:	43db      	mvns	r3, r3
 800dd4c:	69ba      	ldr	r2, [r7, #24]
 800dd4e:	4013      	ands	r3, r2
 800dd50:	61bb      	str	r3, [r7, #24]
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	691a      	ldr	r2, [r3, #16]
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	f003 0307 	and.w	r3, r3, #7
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd62:	69ba      	ldr	r2, [r7, #24]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	61bb      	str	r3, [r7, #24]
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	08da      	lsrs	r2, r3, #3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3208      	adds	r2, #8
 800dd70:	69b9      	ldr	r1, [r7, #24]
 800dd72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	61bb      	str	r3, [r7, #24]
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	005b      	lsls	r3, r3, #1
 800dd80:	2203      	movs	r2, #3
 800dd82:	fa02 f303 	lsl.w	r3, r2, r3
 800dd86:	43db      	mvns	r3, r3
 800dd88:	69ba      	ldr	r2, [r7, #24]
 800dd8a:	4013      	ands	r3, r2
 800dd8c:	61bb      	str	r3, [r7, #24]
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	f003 0203 	and.w	r2, r3, #3
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd9e:	69ba      	ldr	r2, [r7, #24]
 800dda0:	4313      	orrs	r3, r2
 800dda2:	61bb      	str	r3, [r7, #24]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	69ba      	ldr	r2, [r7, #24]
 800dda8:	601a      	str	r2, [r3, #0]
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	f000 80d8 	beq.w	800df68 <HAL_GPIO_Init+0x328>
 800ddb8:	4b2c      	ldr	r3, [pc, #176]	@ (800de6c <HAL_GPIO_Init+0x22c>)
 800ddba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ddbe:	4a2b      	ldr	r2, [pc, #172]	@ (800de6c <HAL_GPIO_Init+0x22c>)
 800ddc0:	f043 0302 	orr.w	r3, r3, #2
 800ddc4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800ddc8:	4b28      	ldr	r3, [pc, #160]	@ (800de6c <HAL_GPIO_Init+0x22c>)
 800ddca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ddce:	f003 0302 	and.w	r3, r3, #2
 800ddd2:	60fb      	str	r3, [r7, #12]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	4a26      	ldr	r2, [pc, #152]	@ (800de70 <HAL_GPIO_Init+0x230>)
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	089b      	lsrs	r3, r3, #2
 800dddc:	3302      	adds	r3, #2
 800ddde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dde2:	61bb      	str	r3, [r7, #24]
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	f003 0303 	and.w	r3, r3, #3
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	220f      	movs	r2, #15
 800ddee:	fa02 f303 	lsl.w	r3, r2, r3
 800ddf2:	43db      	mvns	r3, r3
 800ddf4:	69ba      	ldr	r2, [r7, #24]
 800ddf6:	4013      	ands	r3, r2
 800ddf8:	61bb      	str	r3, [r7, #24]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	4a1d      	ldr	r2, [pc, #116]	@ (800de74 <HAL_GPIO_Init+0x234>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d04a      	beq.n	800de98 <HAL_GPIO_Init+0x258>
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	4a1c      	ldr	r2, [pc, #112]	@ (800de78 <HAL_GPIO_Init+0x238>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d02b      	beq.n	800de62 <HAL_GPIO_Init+0x222>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	4a1b      	ldr	r2, [pc, #108]	@ (800de7c <HAL_GPIO_Init+0x23c>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d025      	beq.n	800de5e <HAL_GPIO_Init+0x21e>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4a1a      	ldr	r2, [pc, #104]	@ (800de80 <HAL_GPIO_Init+0x240>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d01f      	beq.n	800de5a <HAL_GPIO_Init+0x21a>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4a19      	ldr	r2, [pc, #100]	@ (800de84 <HAL_GPIO_Init+0x244>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d019      	beq.n	800de56 <HAL_GPIO_Init+0x216>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4a18      	ldr	r2, [pc, #96]	@ (800de88 <HAL_GPIO_Init+0x248>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d013      	beq.n	800de52 <HAL_GPIO_Init+0x212>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4a17      	ldr	r2, [pc, #92]	@ (800de8c <HAL_GPIO_Init+0x24c>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d00d      	beq.n	800de4e <HAL_GPIO_Init+0x20e>
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	4a16      	ldr	r2, [pc, #88]	@ (800de90 <HAL_GPIO_Init+0x250>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d007      	beq.n	800de4a <HAL_GPIO_Init+0x20a>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4a15      	ldr	r2, [pc, #84]	@ (800de94 <HAL_GPIO_Init+0x254>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d101      	bne.n	800de46 <HAL_GPIO_Init+0x206>
 800de42:	2309      	movs	r3, #9
 800de44:	e029      	b.n	800de9a <HAL_GPIO_Init+0x25a>
 800de46:	230a      	movs	r3, #10
 800de48:	e027      	b.n	800de9a <HAL_GPIO_Init+0x25a>
 800de4a:	2307      	movs	r3, #7
 800de4c:	e025      	b.n	800de9a <HAL_GPIO_Init+0x25a>
 800de4e:	2306      	movs	r3, #6
 800de50:	e023      	b.n	800de9a <HAL_GPIO_Init+0x25a>
 800de52:	2305      	movs	r3, #5
 800de54:	e021      	b.n	800de9a <HAL_GPIO_Init+0x25a>
 800de56:	2304      	movs	r3, #4
 800de58:	e01f      	b.n	800de9a <HAL_GPIO_Init+0x25a>
 800de5a:	2303      	movs	r3, #3
 800de5c:	e01d      	b.n	800de9a <HAL_GPIO_Init+0x25a>
 800de5e:	2302      	movs	r3, #2
 800de60:	e01b      	b.n	800de9a <HAL_GPIO_Init+0x25a>
 800de62:	2301      	movs	r3, #1
 800de64:	e019      	b.n	800de9a <HAL_GPIO_Init+0x25a>
 800de66:	bf00      	nop
 800de68:	58000080 	.word	0x58000080
 800de6c:	58024400 	.word	0x58024400
 800de70:	58000400 	.word	0x58000400
 800de74:	58020000 	.word	0x58020000
 800de78:	58020400 	.word	0x58020400
 800de7c:	58020800 	.word	0x58020800
 800de80:	58020c00 	.word	0x58020c00
 800de84:	58021000 	.word	0x58021000
 800de88:	58021400 	.word	0x58021400
 800de8c:	58021800 	.word	0x58021800
 800de90:	58021c00 	.word	0x58021c00
 800de94:	58022400 	.word	0x58022400
 800de98:	2300      	movs	r3, #0
 800de9a:	69fa      	ldr	r2, [r7, #28]
 800de9c:	f002 0203 	and.w	r2, r2, #3
 800dea0:	0092      	lsls	r2, r2, #2
 800dea2:	4093      	lsls	r3, r2
 800dea4:	69ba      	ldr	r2, [r7, #24]
 800dea6:	4313      	orrs	r3, r2
 800dea8:	61bb      	str	r3, [r7, #24]
 800deaa:	4938      	ldr	r1, [pc, #224]	@ (800df8c <HAL_GPIO_Init+0x34c>)
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	089b      	lsrs	r3, r3, #2
 800deb0:	3302      	adds	r3, #2
 800deb2:	69ba      	ldr	r2, [r7, #24]
 800deb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800deb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	61bb      	str	r3, [r7, #24]
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	43db      	mvns	r3, r3
 800dec4:	69ba      	ldr	r2, [r7, #24]
 800dec6:	4013      	ands	r3, r2
 800dec8:	61bb      	str	r3, [r7, #24]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d003      	beq.n	800dede <HAL_GPIO_Init+0x29e>
 800ded6:	69ba      	ldr	r2, [r7, #24]
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	4313      	orrs	r3, r2
 800dedc:	61bb      	str	r3, [r7, #24]
 800dede:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	6013      	str	r3, [r2, #0]
 800dee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	61bb      	str	r3, [r7, #24]
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	43db      	mvns	r3, r3
 800def2:	69ba      	ldr	r2, [r7, #24]
 800def4:	4013      	ands	r3, r2
 800def6:	61bb      	str	r3, [r7, #24]
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800df00:	2b00      	cmp	r3, #0
 800df02:	d003      	beq.n	800df0c <HAL_GPIO_Init+0x2cc>
 800df04:	69ba      	ldr	r2, [r7, #24]
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	4313      	orrs	r3, r2
 800df0a:	61bb      	str	r3, [r7, #24]
 800df0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	6053      	str	r3, [r2, #4]
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	61bb      	str	r3, [r7, #24]
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	43db      	mvns	r3, r3
 800df1e:	69ba      	ldr	r2, [r7, #24]
 800df20:	4013      	ands	r3, r2
 800df22:	61bb      	str	r3, [r7, #24]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d003      	beq.n	800df38 <HAL_GPIO_Init+0x2f8>
 800df30:	69ba      	ldr	r2, [r7, #24]
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	4313      	orrs	r3, r2
 800df36:	61bb      	str	r3, [r7, #24]
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	69ba      	ldr	r2, [r7, #24]
 800df3c:	605a      	str	r2, [r3, #4]
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	61bb      	str	r3, [r7, #24]
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	43db      	mvns	r3, r3
 800df48:	69ba      	ldr	r2, [r7, #24]
 800df4a:	4013      	ands	r3, r2
 800df4c:	61bb      	str	r3, [r7, #24]
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800df56:	2b00      	cmp	r3, #0
 800df58:	d003      	beq.n	800df62 <HAL_GPIO_Init+0x322>
 800df5a:	69ba      	ldr	r2, [r7, #24]
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	4313      	orrs	r3, r2
 800df60:	61bb      	str	r3, [r7, #24]
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	69ba      	ldr	r2, [r7, #24]
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	3301      	adds	r3, #1
 800df6c:	61fb      	str	r3, [r7, #28]
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	fa22 f303 	lsr.w	r3, r2, r3
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f47f ae6b 	bne.w	800dc54 <HAL_GPIO_Init+0x14>
 800df7e:	bf00      	nop
 800df80:	bf00      	nop
 800df82:	3724      	adds	r7, #36	@ 0x24
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr
 800df8c:	58000400 	.word	0x58000400

0800df90 <HAL_GPIO_ReadPin>:
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	460b      	mov	r3, r1
 800df9a:	807b      	strh	r3, [r7, #2]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	691a      	ldr	r2, [r3, #16]
 800dfa0:	887b      	ldrh	r3, [r7, #2]
 800dfa2:	4013      	ands	r3, r2
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d002      	beq.n	800dfae <HAL_GPIO_ReadPin+0x1e>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	73fb      	strb	r3, [r7, #15]
 800dfac:	e001      	b.n	800dfb2 <HAL_GPIO_ReadPin+0x22>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	73fb      	strb	r3, [r7, #15]
 800dfb2:	7bfb      	ldrb	r3, [r7, #15]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3714      	adds	r7, #20
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <HAL_GPIO_WritePin>:
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	807b      	strh	r3, [r7, #2]
 800dfcc:	4613      	mov	r3, r2
 800dfce:	707b      	strb	r3, [r7, #1]
 800dfd0:	787b      	ldrb	r3, [r7, #1]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d003      	beq.n	800dfde <HAL_GPIO_WritePin+0x1e>
 800dfd6:	887a      	ldrh	r2, [r7, #2]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	619a      	str	r2, [r3, #24]
 800dfdc:	e003      	b.n	800dfe6 <HAL_GPIO_WritePin+0x26>
 800dfde:	887b      	ldrh	r3, [r7, #2]
 800dfe0:	041a      	lsls	r2, r3, #16
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	619a      	str	r2, [r3, #24]
 800dfe6:	bf00      	nop
 800dfe8:	370c      	adds	r7, #12
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr

0800dff2 <HAL_GPIO_EXTI_IRQHandler>:
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b082      	sub	sp, #8
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	4603      	mov	r3, r0
 800dffa:	80fb      	strh	r3, [r7, #6]
 800dffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e000:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e004:	88fb      	ldrh	r3, [r7, #6]
 800e006:	4013      	ands	r3, r2
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d008      	beq.n	800e01e <HAL_GPIO_EXTI_IRQHandler+0x2c>
 800e00c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e010:	88fb      	ldrh	r3, [r7, #6]
 800e012:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800e016:	88fb      	ldrh	r3, [r7, #6]
 800e018:	4618      	mov	r0, r3
 800e01a:	f7f7 ff8f 	bl	8005f3c <HAL_GPIO_EXTI_Callback>
 800e01e:	bf00      	nop
 800e020:	3708      	adds	r7, #8
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
	...

0800e028 <HAL_I2C_Init>:
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d101      	bne.n	800e03a <HAL_I2C_Init+0x12>
 800e036:	2301      	movs	r3, #1
 800e038:	e08b      	b.n	800e152 <HAL_I2C_Init+0x12a>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e040:	b2db      	uxtb	r3, r3
 800e042:	2b00      	cmp	r3, #0
 800e044:	d106      	bne.n	800e054 <HAL_I2C_Init+0x2c>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2200      	movs	r2, #0
 800e04a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7f6 fe16 	bl	8004c80 <HAL_I2C_MspInit>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2224      	movs	r2, #36	@ 0x24
 800e058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f022 0201 	bic.w	r2, r2, #1
 800e06a:	601a      	str	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	685a      	ldr	r2, [r3, #4]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800e078:	611a      	str	r2, [r3, #16]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	689a      	ldr	r2, [r3, #8]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e088:	609a      	str	r2, [r3, #8]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d107      	bne.n	800e0a2 <HAL_I2C_Init+0x7a>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	689a      	ldr	r2, [r3, #8]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e09e:	609a      	str	r2, [r3, #8]
 800e0a0:	e006      	b.n	800e0b0 <HAL_I2C_Init+0x88>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	689a      	ldr	r2, [r3, #8]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800e0ae:	609a      	str	r2, [r3, #8]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	d108      	bne.n	800e0ca <HAL_I2C_Init+0xa2>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	685a      	ldr	r2, [r3, #4]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e0c6:	605a      	str	r2, [r3, #4]
 800e0c8:	e007      	b.n	800e0da <HAL_I2C_Init+0xb2>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	685a      	ldr	r2, [r3, #4]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e0d8:	605a      	str	r2, [r3, #4]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	6859      	ldr	r1, [r3, #4]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e15c <HAL_I2C_Init+0x134>)
 800e0e6:	430b      	orrs	r3, r1
 800e0e8:	6053      	str	r3, [r2, #4]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	68da      	ldr	r2, [r3, #12]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e0f8:	60da      	str	r2, [r3, #12]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	691a      	ldr	r2, [r3, #16]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	695b      	ldr	r3, [r3, #20]
 800e102:	ea42 0103 	orr.w	r1, r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	699b      	ldr	r3, [r3, #24]
 800e10a:	021a      	lsls	r2, r3, #8
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	430a      	orrs	r2, r1
 800e112:	60da      	str	r2, [r3, #12]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	69d9      	ldr	r1, [r3, #28]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6a1a      	ldr	r2, [r3, #32]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	430a      	orrs	r2, r1
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f042 0201 	orr.w	r2, r2, #1
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	645a      	str	r2, [r3, #68]	@ 0x44
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2220      	movs	r2, #32
 800e13e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	631a      	str	r2, [r3, #48]	@ 0x30
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e150:	2300      	movs	r3, #0
 800e152:	4618      	mov	r0, r3
 800e154:	3708      	adds	r7, #8
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	02008000 	.word	0x02008000

0800e160 <HAL_I2C_Mem_Write>:
 800e160:	b580      	push	{r7, lr}
 800e162:	b088      	sub	sp, #32
 800e164:	af02      	add	r7, sp, #8
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	4608      	mov	r0, r1
 800e16a:	4611      	mov	r1, r2
 800e16c:	461a      	mov	r2, r3
 800e16e:	4603      	mov	r3, r0
 800e170:	817b      	strh	r3, [r7, #10]
 800e172:	460b      	mov	r3, r1
 800e174:	813b      	strh	r3, [r7, #8]
 800e176:	4613      	mov	r3, r2
 800e178:	80fb      	strh	r3, [r7, #6]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2b20      	cmp	r3, #32
 800e184:	f040 80f9 	bne.w	800e37a <HAL_I2C_Mem_Write+0x21a>
 800e188:	6a3b      	ldr	r3, [r7, #32]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d002      	beq.n	800e194 <HAL_I2C_Mem_Write+0x34>
 800e18e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e190:	2b00      	cmp	r3, #0
 800e192:	d105      	bne.n	800e1a0 <HAL_I2C_Mem_Write+0x40>
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e19a:	645a      	str	r2, [r3, #68]	@ 0x44
 800e19c:	2301      	movs	r3, #1
 800e19e:	e0ed      	b.n	800e37c <HAL_I2C_Mem_Write+0x21c>
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d101      	bne.n	800e1ae <HAL_I2C_Mem_Write+0x4e>
 800e1aa:	2302      	movs	r3, #2
 800e1ac:	e0e6      	b.n	800e37c <HAL_I2C_Mem_Write+0x21c>
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e1b6:	f7fa fd99 	bl	8008cec <HAL_GetTick>
 800e1ba:	6178      	str	r0, [r7, #20]
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	2319      	movs	r3, #25
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f002 f818 	bl	80101fe <I2C_WaitOnFlagUntilTimeout>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d001      	beq.n	800e1d8 <HAL_I2C_Mem_Write+0x78>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	e0d1      	b.n	800e37c <HAL_I2C_Mem_Write+0x21c>
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2221      	movs	r2, #33	@ 0x21
 800e1dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2240      	movs	r2, #64	@ 0x40
 800e1e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	645a      	str	r2, [r3, #68]	@ 0x44
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	6a3a      	ldr	r2, [r7, #32]
 800e1f2:	625a      	str	r2, [r3, #36]	@ 0x24
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e1f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	635a      	str	r2, [r3, #52]	@ 0x34
 800e200:	88f8      	ldrh	r0, [r7, #6]
 800e202:	893a      	ldrh	r2, [r7, #8]
 800e204:	8979      	ldrh	r1, [r7, #10]
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	4603      	mov	r3, r0
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f001 f965 	bl	800f4e0 <I2C_RequestMemoryWrite>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d005      	beq.n	800e228 <HAL_I2C_Mem_Write+0xc8>
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2200      	movs	r2, #0
 800e220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e224:	2301      	movs	r3, #1
 800e226:	e0a9      	b.n	800e37c <HAL_I2C_Mem_Write+0x21c>
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	2bff      	cmp	r3, #255	@ 0xff
 800e230:	d90e      	bls.n	800e250 <HAL_I2C_Mem_Write+0xf0>
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	22ff      	movs	r2, #255	@ 0xff
 800e236:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e23c:	b2da      	uxtb	r2, r3
 800e23e:	8979      	ldrh	r1, [r7, #10]
 800e240:	2300      	movs	r3, #0
 800e242:	9300      	str	r3, [sp, #0]
 800e244:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f002 f99b 	bl	8010584 <I2C_TransferConfig>
 800e24e:	e00f      	b.n	800e270 <HAL_I2C_Mem_Write+0x110>
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e254:	b29a      	uxth	r2, r3
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e25e:	b2da      	uxtb	r2, r3
 800e260:	8979      	ldrh	r1, [r7, #10]
 800e262:	2300      	movs	r3, #0
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f002 f98a 	bl	8010584 <I2C_TransferConfig>
 800e270:	697a      	ldr	r2, [r7, #20]
 800e272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f002 f81b 	bl	80102b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d001      	beq.n	800e284 <HAL_I2C_Mem_Write+0x124>
 800e280:	2301      	movs	r3, #1
 800e282:	e07b      	b.n	800e37c <HAL_I2C_Mem_Write+0x21c>
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e288:	781a      	ldrb	r2, [r3, #0]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	629a      	str	r2, [r3, #40]	@ 0x28
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e294:	1c5a      	adds	r2, r3, #1
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	625a      	str	r2, [r3, #36]	@ 0x24
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	3b01      	subs	r3, #1
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d034      	beq.n	800e328 <HAL_I2C_Mem_Write+0x1c8>
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d130      	bne.n	800e328 <HAL_I2C_Mem_Write+0x1c8>
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	9300      	str	r3, [sp, #0]
 800e2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	2180      	movs	r1, #128	@ 0x80
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f001 ff94 	bl	80101fe <I2C_WaitOnFlagUntilTimeout>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d001      	beq.n	800e2e0 <HAL_I2C_Mem_Write+0x180>
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e04d      	b.n	800e37c <HAL_I2C_Mem_Write+0x21c>
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	2bff      	cmp	r3, #255	@ 0xff
 800e2e8:	d90e      	bls.n	800e308 <HAL_I2C_Mem_Write+0x1a8>
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	22ff      	movs	r2, #255	@ 0xff
 800e2ee:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	8979      	ldrh	r1, [r7, #10]
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	9300      	str	r3, [sp, #0]
 800e2fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e300:	68f8      	ldr	r0, [r7, #12]
 800e302:	f002 f93f 	bl	8010584 <I2C_TransferConfig>
 800e306:	e00f      	b.n	800e328 <HAL_I2C_Mem_Write+0x1c8>
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e316:	b2da      	uxtb	r2, r3
 800e318:	8979      	ldrh	r1, [r7, #10]
 800e31a:	2300      	movs	r3, #0
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f002 f92e 	bl	8010584 <I2C_TransferConfig>
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d19e      	bne.n	800e270 <HAL_I2C_Mem_Write+0x110>
 800e332:	697a      	ldr	r2, [r7, #20]
 800e334:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f002 f801 	bl	801033e <I2C_WaitOnSTOPFlagUntilTimeout>
 800e33c:	4603      	mov	r3, r0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d001      	beq.n	800e346 <HAL_I2C_Mem_Write+0x1e6>
 800e342:	2301      	movs	r3, #1
 800e344:	e01a      	b.n	800e37c <HAL_I2C_Mem_Write+0x21c>
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2220      	movs	r2, #32
 800e34c:	61da      	str	r2, [r3, #28]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	6859      	ldr	r1, [r3, #4]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	4b0a      	ldr	r3, [pc, #40]	@ (800e384 <HAL_I2C_Mem_Write+0x224>)
 800e35a:	400b      	ands	r3, r1
 800e35c:	6053      	str	r3, [r2, #4]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2220      	movs	r2, #32
 800e362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2200      	movs	r2, #0
 800e372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e376:	2300      	movs	r3, #0
 800e378:	e000      	b.n	800e37c <HAL_I2C_Mem_Write+0x21c>
 800e37a:	2302      	movs	r3, #2
 800e37c:	4618      	mov	r0, r3
 800e37e:	3718      	adds	r7, #24
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	fe00e800 	.word	0xfe00e800

0800e388 <HAL_I2C_Mem_Read>:
 800e388:	b580      	push	{r7, lr}
 800e38a:	b088      	sub	sp, #32
 800e38c:	af02      	add	r7, sp, #8
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	4608      	mov	r0, r1
 800e392:	4611      	mov	r1, r2
 800e394:	461a      	mov	r2, r3
 800e396:	4603      	mov	r3, r0
 800e398:	817b      	strh	r3, [r7, #10]
 800e39a:	460b      	mov	r3, r1
 800e39c:	813b      	strh	r3, [r7, #8]
 800e39e:	4613      	mov	r3, r2
 800e3a0:	80fb      	strh	r3, [r7, #6]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	2b20      	cmp	r3, #32
 800e3ac:	f040 80fd 	bne.w	800e5aa <HAL_I2C_Mem_Read+0x222>
 800e3b0:	6a3b      	ldr	r3, [r7, #32]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d002      	beq.n	800e3bc <HAL_I2C_Mem_Read+0x34>
 800e3b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d105      	bne.n	800e3c8 <HAL_I2C_Mem_Read+0x40>
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3c2:	645a      	str	r2, [r3, #68]	@ 0x44
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	e0f1      	b.n	800e5ac <HAL_I2C_Mem_Read+0x224>
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d101      	bne.n	800e3d6 <HAL_I2C_Mem_Read+0x4e>
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	e0ea      	b.n	800e5ac <HAL_I2C_Mem_Read+0x224>
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e3de:	f7fa fc85 	bl	8008cec <HAL_GetTick>
 800e3e2:	6178      	str	r0, [r7, #20]
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	9300      	str	r3, [sp, #0]
 800e3e8:	2319      	movs	r3, #25
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e3f0:	68f8      	ldr	r0, [r7, #12]
 800e3f2:	f001 ff04 	bl	80101fe <I2C_WaitOnFlagUntilTimeout>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <HAL_I2C_Mem_Read+0x78>
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e0d5      	b.n	800e5ac <HAL_I2C_Mem_Read+0x224>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2222      	movs	r2, #34	@ 0x22
 800e404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2240      	movs	r2, #64	@ 0x40
 800e40c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	645a      	str	r2, [r3, #68]	@ 0x44
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6a3a      	ldr	r2, [r7, #32]
 800e41a:	625a      	str	r2, [r3, #36]	@ 0x24
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e420:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2200      	movs	r2, #0
 800e426:	635a      	str	r2, [r3, #52]	@ 0x34
 800e428:	88f8      	ldrh	r0, [r7, #6]
 800e42a:	893a      	ldrh	r2, [r7, #8]
 800e42c:	8979      	ldrh	r1, [r7, #10]
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	9301      	str	r3, [sp, #4]
 800e432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	4603      	mov	r3, r0
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f001 f8a5 	bl	800f588 <I2C_RequestMemoryRead>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b00      	cmp	r3, #0
 800e442:	d005      	beq.n	800e450 <HAL_I2C_Mem_Read+0xc8>
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2200      	movs	r2, #0
 800e448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e44c:	2301      	movs	r3, #1
 800e44e:	e0ad      	b.n	800e5ac <HAL_I2C_Mem_Read+0x224>
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e454:	b29b      	uxth	r3, r3
 800e456:	2bff      	cmp	r3, #255	@ 0xff
 800e458:	d90e      	bls.n	800e478 <HAL_I2C_Mem_Read+0xf0>
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	22ff      	movs	r2, #255	@ 0xff
 800e45e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e464:	b2da      	uxtb	r2, r3
 800e466:	8979      	ldrh	r1, [r7, #10]
 800e468:	4b52      	ldr	r3, [pc, #328]	@ (800e5b4 <HAL_I2C_Mem_Read+0x22c>)
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f002 f887 	bl	8010584 <I2C_TransferConfig>
 800e476:	e00f      	b.n	800e498 <HAL_I2C_Mem_Read+0x110>
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e486:	b2da      	uxtb	r2, r3
 800e488:	8979      	ldrh	r1, [r7, #10]
 800e48a:	4b4a      	ldr	r3, [pc, #296]	@ (800e5b4 <HAL_I2C_Mem_Read+0x22c>)
 800e48c:	9300      	str	r3, [sp, #0]
 800e48e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e492:	68f8      	ldr	r0, [r7, #12]
 800e494:	f002 f876 	bl	8010584 <I2C_TransferConfig>
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	9300      	str	r3, [sp, #0]
 800e49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49e:	2200      	movs	r2, #0
 800e4a0:	2104      	movs	r1, #4
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f001 feab 	bl	80101fe <I2C_WaitOnFlagUntilTimeout>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d001      	beq.n	800e4b2 <HAL_I2C_Mem_Read+0x12a>
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e07c      	b.n	800e5ac <HAL_I2C_Mem_Read+0x224>
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4bc:	b2d2      	uxtb	r2, r2
 800e4be:	701a      	strb	r2, [r3, #0]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4c4:	1c5a      	adds	r2, r3, #1
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	625a      	str	r2, [r3, #36]	@ 0x24
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d034      	beq.n	800e558 <HAL_I2C_Mem_Read+0x1d0>
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d130      	bne.n	800e558 <HAL_I2C_Mem_Read+0x1d0>
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	9300      	str	r3, [sp, #0]
 800e4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	2180      	movs	r1, #128	@ 0x80
 800e500:	68f8      	ldr	r0, [r7, #12]
 800e502:	f001 fe7c 	bl	80101fe <I2C_WaitOnFlagUntilTimeout>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d001      	beq.n	800e510 <HAL_I2C_Mem_Read+0x188>
 800e50c:	2301      	movs	r3, #1
 800e50e:	e04d      	b.n	800e5ac <HAL_I2C_Mem_Read+0x224>
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e514:	b29b      	uxth	r3, r3
 800e516:	2bff      	cmp	r3, #255	@ 0xff
 800e518:	d90e      	bls.n	800e538 <HAL_I2C_Mem_Read+0x1b0>
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	22ff      	movs	r2, #255	@ 0xff
 800e51e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e524:	b2da      	uxtb	r2, r3
 800e526:	8979      	ldrh	r1, [r7, #10]
 800e528:	2300      	movs	r3, #0
 800e52a:	9300      	str	r3, [sp, #0]
 800e52c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f002 f827 	bl	8010584 <I2C_TransferConfig>
 800e536:	e00f      	b.n	800e558 <HAL_I2C_Mem_Read+0x1d0>
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e546:	b2da      	uxtb	r2, r3
 800e548:	8979      	ldrh	r1, [r7, #10]
 800e54a:	2300      	movs	r3, #0
 800e54c:	9300      	str	r3, [sp, #0]
 800e54e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	f002 f816 	bl	8010584 <I2C_TransferConfig>
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d19a      	bne.n	800e498 <HAL_I2C_Mem_Read+0x110>
 800e562:	697a      	ldr	r2, [r7, #20]
 800e564:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f001 fee9 	bl	801033e <I2C_WaitOnSTOPFlagUntilTimeout>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d001      	beq.n	800e576 <HAL_I2C_Mem_Read+0x1ee>
 800e572:	2301      	movs	r3, #1
 800e574:	e01a      	b.n	800e5ac <HAL_I2C_Mem_Read+0x224>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	2220      	movs	r2, #32
 800e57c:	61da      	str	r2, [r3, #28]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	6859      	ldr	r1, [r3, #4]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	4b0b      	ldr	r3, [pc, #44]	@ (800e5b8 <HAL_I2C_Mem_Read+0x230>)
 800e58a:	400b      	ands	r3, r1
 800e58c:	6053      	str	r3, [r2, #4]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2220      	movs	r2, #32
 800e592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	e000      	b.n	800e5ac <HAL_I2C_Mem_Read+0x224>
 800e5aa:	2302      	movs	r3, #2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3718      	adds	r7, #24
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	80002400 	.word	0x80002400
 800e5b8:	fe00e800 	.word	0xfe00e800

0800e5bc <HAL_I2C_Mem_Write_IT>:
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b086      	sub	sp, #24
 800e5c0:	af02      	add	r7, sp, #8
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	4608      	mov	r0, r1
 800e5c6:	4611      	mov	r1, r2
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	817b      	strh	r3, [r7, #10]
 800e5ce:	460b      	mov	r3, r1
 800e5d0:	813b      	strh	r3, [r7, #8]
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	80fb      	strh	r3, [r7, #6]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	2b20      	cmp	r3, #32
 800e5e0:	d16a      	bne.n	800e6b8 <HAL_I2C_Mem_Write_IT+0xfc>
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d002      	beq.n	800e5ee <HAL_I2C_Mem_Write_IT+0x32>
 800e5e8:	8bbb      	ldrh	r3, [r7, #28]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d105      	bne.n	800e5fa <HAL_I2C_Mem_Write_IT+0x3e>
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5f4:	645a      	str	r2, [r3, #68]	@ 0x44
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e05f      	b.n	800e6ba <HAL_I2C_Mem_Write_IT+0xfe>
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	699b      	ldr	r3, [r3, #24]
 800e600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e608:	d101      	bne.n	800e60e <HAL_I2C_Mem_Write_IT+0x52>
 800e60a:	2302      	movs	r3, #2
 800e60c:	e055      	b.n	800e6ba <HAL_I2C_Mem_Write_IT+0xfe>
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e614:	2b01      	cmp	r3, #1
 800e616:	d101      	bne.n	800e61c <HAL_I2C_Mem_Write_IT+0x60>
 800e618:	2302      	movs	r3, #2
 800e61a:	e04e      	b.n	800e6ba <HAL_I2C_Mem_Write_IT+0xfe>
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2201      	movs	r2, #1
 800e620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2221      	movs	r2, #33	@ 0x21
 800e628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2240      	movs	r2, #64	@ 0x40
 800e630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2200      	movs	r2, #0
 800e638:	645a      	str	r2, [r3, #68]	@ 0x44
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2200      	movs	r2, #0
 800e63e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	69ba      	ldr	r2, [r7, #24]
 800e644:	625a      	str	r2, [r3, #36]	@ 0x24
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	8bba      	ldrh	r2, [r7, #28]
 800e64a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	4a1d      	ldr	r2, [pc, #116]	@ (800e6c4 <HAL_I2C_Mem_Write_IT+0x108>)
 800e650:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	4a1c      	ldr	r2, [pc, #112]	@ (800e6c8 <HAL_I2C_Mem_Write_IT+0x10c>)
 800e656:	635a      	str	r2, [r3, #52]	@ 0x34
 800e658:	897a      	ldrh	r2, [r7, #10]
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e65e:	88fb      	ldrh	r3, [r7, #6]
 800e660:	2b01      	cmp	r3, #1
 800e662:	d109      	bne.n	800e678 <HAL_I2C_Mem_Write_IT+0xbc>
 800e664:	893b      	ldrh	r3, [r7, #8]
 800e666:	b2da      	uxtb	r2, r3
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	629a      	str	r2, [r3, #40]	@ 0x28
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f04f 32ff 	mov.w	r2, #4294967295
 800e674:	651a      	str	r2, [r3, #80]	@ 0x50
 800e676:	e00b      	b.n	800e690 <HAL_I2C_Mem_Write_IT+0xd4>
 800e678:	893b      	ldrh	r3, [r7, #8]
 800e67a:	0a1b      	lsrs	r3, r3, #8
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	b2da      	uxtb	r2, r3
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	629a      	str	r2, [r3, #40]	@ 0x28
 800e686:	893b      	ldrh	r3, [r7, #8]
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	461a      	mov	r2, r3
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	651a      	str	r2, [r3, #80]	@ 0x50
 800e690:	88fb      	ldrh	r3, [r7, #6]
 800e692:	b2da      	uxtb	r2, r3
 800e694:	8979      	ldrh	r1, [r7, #10]
 800e696:	4b0d      	ldr	r3, [pc, #52]	@ (800e6cc <HAL_I2C_Mem_Write_IT+0x110>)
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	f001 ff70 	bl	8010584 <I2C_TransferConfig>
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e6ac:	2101      	movs	r1, #1
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f001 ff9a 	bl	80105e8 <I2C_Enable_IRQ>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	e000      	b.n	800e6ba <HAL_I2C_Mem_Write_IT+0xfe>
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3710      	adds	r7, #16
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	ffff0000 	.word	0xffff0000
 800e6c8:	0800e8cd 	.word	0x0800e8cd
 800e6cc:	80002000 	.word	0x80002000

0800e6d0 <HAL_I2C_Mem_Read_IT>:
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b086      	sub	sp, #24
 800e6d4:	af02      	add	r7, sp, #8
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	4608      	mov	r0, r1
 800e6da:	4611      	mov	r1, r2
 800e6dc:	461a      	mov	r2, r3
 800e6de:	4603      	mov	r3, r0
 800e6e0:	817b      	strh	r3, [r7, #10]
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	813b      	strh	r3, [r7, #8]
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	80fb      	strh	r3, [r7, #6]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	2b20      	cmp	r3, #32
 800e6f4:	d166      	bne.n	800e7c4 <HAL_I2C_Mem_Read_IT+0xf4>
 800e6f6:	69bb      	ldr	r3, [r7, #24]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d002      	beq.n	800e702 <HAL_I2C_Mem_Read_IT+0x32>
 800e6fc:	8bbb      	ldrh	r3, [r7, #28]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d105      	bne.n	800e70e <HAL_I2C_Mem_Read_IT+0x3e>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e708:	645a      	str	r2, [r3, #68]	@ 0x44
 800e70a:	2301      	movs	r3, #1
 800e70c:	e05b      	b.n	800e7c6 <HAL_I2C_Mem_Read_IT+0xf6>
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	699b      	ldr	r3, [r3, #24]
 800e714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e71c:	d101      	bne.n	800e722 <HAL_I2C_Mem_Read_IT+0x52>
 800e71e:	2302      	movs	r3, #2
 800e720:	e051      	b.n	800e7c6 <HAL_I2C_Mem_Read_IT+0xf6>
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d101      	bne.n	800e730 <HAL_I2C_Mem_Read_IT+0x60>
 800e72c:	2302      	movs	r3, #2
 800e72e:	e04a      	b.n	800e7c6 <HAL_I2C_Mem_Read_IT+0xf6>
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2201      	movs	r2, #1
 800e734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2222      	movs	r2, #34	@ 0x22
 800e73c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2240      	movs	r2, #64	@ 0x40
 800e744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2200      	movs	r2, #0
 800e74c:	645a      	str	r2, [r3, #68]	@ 0x44
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	69ba      	ldr	r2, [r7, #24]
 800e752:	625a      	str	r2, [r3, #36]	@ 0x24
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	8bba      	ldrh	r2, [r7, #28]
 800e758:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	4a1c      	ldr	r2, [pc, #112]	@ (800e7d0 <HAL_I2C_Mem_Read_IT+0x100>)
 800e75e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	4a1c      	ldr	r2, [pc, #112]	@ (800e7d4 <HAL_I2C_Mem_Read_IT+0x104>)
 800e764:	635a      	str	r2, [r3, #52]	@ 0x34
 800e766:	897a      	ldrh	r2, [r7, #10]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e76c:	88fb      	ldrh	r3, [r7, #6]
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d109      	bne.n	800e786 <HAL_I2C_Mem_Read_IT+0xb6>
 800e772:	893b      	ldrh	r3, [r7, #8]
 800e774:	b2da      	uxtb	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	629a      	str	r2, [r3, #40]	@ 0x28
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f04f 32ff 	mov.w	r2, #4294967295
 800e782:	651a      	str	r2, [r3, #80]	@ 0x50
 800e784:	e00b      	b.n	800e79e <HAL_I2C_Mem_Read_IT+0xce>
 800e786:	893b      	ldrh	r3, [r7, #8]
 800e788:	0a1b      	lsrs	r3, r3, #8
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	629a      	str	r2, [r3, #40]	@ 0x28
 800e794:	893b      	ldrh	r3, [r7, #8]
 800e796:	b2db      	uxtb	r3, r3
 800e798:	461a      	mov	r2, r3
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	651a      	str	r2, [r3, #80]	@ 0x50
 800e79e:	88fb      	ldrh	r3, [r7, #6]
 800e7a0:	b2da      	uxtb	r2, r3
 800e7a2:	8979      	ldrh	r1, [r7, #10]
 800e7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e7d8 <HAL_I2C_Mem_Read_IT+0x108>)
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	68f8      	ldr	r0, [r7, #12]
 800e7ac:	f001 feea 	bl	8010584 <I2C_TransferConfig>
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e7b8:	2101      	movs	r1, #1
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f001 ff14 	bl	80105e8 <I2C_Enable_IRQ>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	e000      	b.n	800e7c6 <HAL_I2C_Mem_Read_IT+0xf6>
 800e7c4:	2302      	movs	r3, #2
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	ffff0000 	.word	0xffff0000
 800e7d4:	0800e8cd 	.word	0x0800e8cd
 800e7d8:	80002000 	.word	0x80002000

0800e7dc <HAL_I2C_EV_IRQHandler>:
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	699b      	ldr	r3, [r3, #24]
 800e7ea:	60fb      	str	r3, [r7, #12]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	60bb      	str	r3, [r7, #8]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d005      	beq.n	800e808 <HAL_I2C_EV_IRQHandler+0x2c>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	68f9      	ldr	r1, [r7, #12]
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	4798      	blx	r3
 800e808:	bf00      	nop
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <HAL_I2C_MasterTxCpltCallback>:
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <HAL_I2C_MasterRxCpltCallback>:
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <HAL_I2C_SlaveTxCpltCallback>:
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	bf00      	nop
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr

0800e84c <HAL_I2C_SlaveRxCpltCallback>:
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	bf00      	nop
 800e856:	370c      	adds	r7, #12
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr

0800e860 <HAL_I2C_AddrCallback>:
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	460b      	mov	r3, r1
 800e86a:	70fb      	strb	r3, [r7, #3]
 800e86c:	4613      	mov	r3, r2
 800e86e:	803b      	strh	r3, [r7, #0]
 800e870:	bf00      	nop
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <HAL_I2C_ListenCpltCallback>:
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	bf00      	nop
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <HAL_I2C_MemTxCpltCallback>:
 800e890:	b480      	push	{r7}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	bf00      	nop
 800e89a:	370c      	adds	r7, #12
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <HAL_I2C_ErrorCallback>:
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	bf00      	nop
 800e8ae:	370c      	adds	r7, #12
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr

0800e8b8 <HAL_I2C_AbortCpltCallback>:
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	bf00      	nop
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <I2C_Mem_ISR_IT>:
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b088      	sub	sp, #32
 800e8d0:	af02      	add	r7, sp, #8
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
 800e8d8:	4b8d      	ldr	r3, [pc, #564]	@ (800eb10 <I2C_Mem_ISR_IT+0x244>)
 800e8da:	617b      	str	r3, [r7, #20]
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	613b      	str	r3, [r7, #16]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d101      	bne.n	800e8ee <I2C_Mem_ISR_IT+0x22>
 800e8ea:	2302      	movs	r3, #2
 800e8ec:	e10c      	b.n	800eb08 <I2C_Mem_ISR_IT+0x23c>
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	f003 0310 	and.w	r3, r3, #16
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d012      	beq.n	800e926 <I2C_Mem_ISR_IT+0x5a>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f003 0310 	and.w	r3, r3, #16
 800e906:	2b00      	cmp	r3, #0
 800e908:	d00d      	beq.n	800e926 <I2C_Mem_ISR_IT+0x5a>
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2210      	movs	r2, #16
 800e910:	61da      	str	r2, [r3, #28]
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e916:	f043 0204 	orr.w	r2, r3, #4
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	645a      	str	r2, [r3, #68]	@ 0x44
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f001 fc2b 	bl	801017a <I2C_Flush_TXDR>
 800e924:	e0dd      	b.n	800eae2 <I2C_Mem_ISR_IT+0x216>
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	f003 0304 	and.w	r3, r3, #4
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d022      	beq.n	800e976 <I2C_Mem_ISR_IT+0xaa>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f003 0304 	and.w	r3, r3, #4
 800e936:	2b00      	cmp	r3, #0
 800e938:	d01d      	beq.n	800e976 <I2C_Mem_ISR_IT+0xaa>
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	f023 0304 	bic.w	r3, r3, #4
 800e940:	613b      	str	r3, [r7, #16]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e94c:	b2d2      	uxtb	r2, r2
 800e94e:	701a      	strb	r2, [r3, #0]
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e954:	1c5a      	adds	r2, r3, #1
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	625a      	str	r2, [r3, #36]	@ 0x24
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e95e:	3b01      	subs	r3, #1
 800e960:	b29a      	uxth	r2, r3
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	3b01      	subs	r3, #1
 800e96e:	b29a      	uxth	r2, r3
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e974:	e0b5      	b.n	800eae2 <I2C_Mem_ISR_IT+0x216>
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	f003 0302 	and.w	r3, r3, #2
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d02c      	beq.n	800e9da <I2C_Mem_ISR_IT+0x10e>
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f003 0302 	and.w	r3, r3, #2
 800e986:	2b00      	cmp	r3, #0
 800e988:	d027      	beq.n	800e9da <I2C_Mem_ISR_IT+0x10e>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e992:	d118      	bne.n	800e9c6 <I2C_Mem_ISR_IT+0xfa>
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e998:	781a      	ldrb	r2, [r3, #0]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	629a      	str	r2, [r3, #40]	@ 0x28
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9a4:	1c5a      	adds	r2, r3, #1
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	625a      	str	r2, [r3, #36]	@ 0x24
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	b29a      	uxth	r2, r3
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	3b01      	subs	r3, #1
 800e9be:	b29a      	uxth	r2, r3
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e9c4:	e08d      	b.n	800eae2 <I2C_Mem_ISR_IT+0x216>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e9ce:	629a      	str	r2, [r3, #40]	@ 0x28
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9d6:	651a      	str	r2, [r3, #80]	@ 0x50
 800e9d8:	e083      	b.n	800eae2 <I2C_Mem_ISR_IT+0x216>
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d03c      	beq.n	800ea5e <I2C_Mem_ISR_IT+0x192>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d037      	beq.n	800ea5e <I2C_Mem_ISR_IT+0x192>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d02c      	beq.n	800ea52 <I2C_Mem_ISR_IT+0x186>
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d128      	bne.n	800ea52 <I2C_Mem_ISR_IT+0x186>
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	2bff      	cmp	r3, #255	@ 0xff
 800ea08:	d910      	bls.n	800ea2c <I2C_Mem_ISR_IT+0x160>
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	22ff      	movs	r2, #255	@ 0xff
 800ea0e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea14:	b299      	uxth	r1, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ea24:	68f8      	ldr	r0, [r7, #12]
 800ea26:	f001 fdad 	bl	8010584 <I2C_TransferConfig>
 800ea2a:	e017      	b.n	800ea5c <I2C_Mem_ISR_IT+0x190>
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea3a:	b299      	uxth	r1, r3
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	2300      	movs	r3, #0
 800ea44:	9300      	str	r3, [sp, #0]
 800ea46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f001 fd9a 	bl	8010584 <I2C_TransferConfig>
 800ea50:	e004      	b.n	800ea5c <I2C_Mem_ISR_IT+0x190>
 800ea52:	2140      	movs	r1, #64	@ 0x40
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f001 fa79 	bl	800ff4c <I2C_ITError>
 800ea5a:	e042      	b.n	800eae2 <I2C_Mem_ISR_IT+0x216>
 800ea5c:	e041      	b.n	800eae2 <I2C_Mem_ISR_IT+0x216>
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d03c      	beq.n	800eae2 <I2C_Mem_ISR_IT+0x216>
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d037      	beq.n	800eae2 <I2C_Mem_ISR_IT+0x216>
 800ea72:	2101      	movs	r1, #1
 800ea74:	68f8      	ldr	r0, [r7, #12]
 800ea76:	f001 fe3b 	bl	80106f0 <I2C_Disable_IRQ>
 800ea7a:	2102      	movs	r1, #2
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f001 fdb3 	bl	80105e8 <I2C_Enable_IRQ>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	2b22      	cmp	r3, #34	@ 0x22
 800ea8c:	d101      	bne.n	800ea92 <I2C_Mem_ISR_IT+0x1c6>
 800ea8e:	4b21      	ldr	r3, [pc, #132]	@ (800eb14 <I2C_Mem_ISR_IT+0x248>)
 800ea90:	617b      	str	r3, [r7, #20]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	2bff      	cmp	r3, #255	@ 0xff
 800ea9a:	d910      	bls.n	800eabe <I2C_Mem_ISR_IT+0x1f2>
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	22ff      	movs	r2, #255	@ 0xff
 800eaa0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eaa6:	b299      	uxth	r1, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eaac:	b2da      	uxtb	r2, r3
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f001 fd64 	bl	8010584 <I2C_TransferConfig>
 800eabc:	e011      	b.n	800eae2 <I2C_Mem_ISR_IT+0x216>
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eacc:	b299      	uxth	r1, r3
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f001 fd51 	bl	8010584 <I2C_TransferConfig>
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	f003 0320 	and.w	r3, r3, #32
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d008      	beq.n	800eafe <I2C_Mem_ISR_IT+0x232>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f003 0320 	and.w	r3, r3, #32
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d003      	beq.n	800eafe <I2C_Mem_ISR_IT+0x232>
 800eaf6:	6939      	ldr	r1, [r7, #16]
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f000 feb7 	bl	800f86c <I2C_ITMasterCplt>
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2200      	movs	r2, #0
 800eb02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eb06:	2300      	movs	r3, #0
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	80002000 	.word	0x80002000
 800eb14:	80002400 	.word	0x80002400

0800eb18 <I2C_Slave_ISR_IT>:
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b086      	sub	sp, #24
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb28:	617b      	str	r3, [r7, #20]
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	613b      	str	r3, [r7, #16]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d101      	bne.n	800eb3c <I2C_Slave_ISR_IT+0x24>
 800eb38:	2302      	movs	r3, #2
 800eb3a:	e0e2      	b.n	800ed02 <I2C_Slave_ISR_IT+0x1ea>
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	f003 0320 	and.w	r3, r3, #32
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d009      	beq.n	800eb62 <I2C_Slave_ISR_IT+0x4a>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f003 0320 	and.w	r3, r3, #32
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d004      	beq.n	800eb62 <I2C_Slave_ISR_IT+0x4a>
 800eb58:	6939      	ldr	r1, [r7, #16]
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f000 ff4e 	bl	800f9fc <I2C_ITSlaveCplt>
 800eb60:	e0ca      	b.n	800ecf8 <I2C_Slave_ISR_IT+0x1e0>
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	f003 0310 	and.w	r3, r3, #16
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d04b      	beq.n	800ec04 <I2C_Slave_ISR_IT+0xec>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f003 0310 	and.w	r3, r3, #16
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d046      	beq.n	800ec04 <I2C_Slave_ISR_IT+0xec>
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d128      	bne.n	800ebd2 <I2C_Slave_ISR_IT+0xba>
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	2b28      	cmp	r3, #40	@ 0x28
 800eb8a:	d108      	bne.n	800eb9e <I2C_Slave_ISR_IT+0x86>
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eb92:	d104      	bne.n	800eb9e <I2C_Slave_ISR_IT+0x86>
 800eb94:	6939      	ldr	r1, [r7, #16]
 800eb96:	68f8      	ldr	r0, [r7, #12]
 800eb98:	f001 f984 	bl	800fea4 <I2C_ITListenCplt>
 800eb9c:	e031      	b.n	800ec02 <I2C_Slave_ISR_IT+0xea>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	2b29      	cmp	r3, #41	@ 0x29
 800eba8:	d10e      	bne.n	800ebc8 <I2C_Slave_ISR_IT+0xb0>
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ebb0:	d00a      	beq.n	800ebc8 <I2C_Slave_ISR_IT+0xb0>
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2210      	movs	r2, #16
 800ebb8:	61da      	str	r2, [r3, #28]
 800ebba:	68f8      	ldr	r0, [r7, #12]
 800ebbc:	f001 fadd 	bl	801017a <I2C_Flush_TXDR>
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	f000 fdf6 	bl	800f7b2 <I2C_ITSlaveSeqCplt>
 800ebc6:	e01c      	b.n	800ec02 <I2C_Slave_ISR_IT+0xea>
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2210      	movs	r2, #16
 800ebce:	61da      	str	r2, [r3, #28]
 800ebd0:	e08f      	b.n	800ecf2 <I2C_Slave_ISR_IT+0x1da>
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2210      	movs	r2, #16
 800ebd8:	61da      	str	r2, [r3, #28]
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebde:	f043 0204 	orr.w	r2, r3, #4
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	645a      	str	r2, [r3, #68]	@ 0x44
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d003      	beq.n	800ebf4 <I2C_Slave_ISR_IT+0xdc>
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ebf2:	d17e      	bne.n	800ecf2 <I2C_Slave_ISR_IT+0x1da>
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f001 f9a6 	bl	800ff4c <I2C_ITError>
 800ec00:	e077      	b.n	800ecf2 <I2C_Slave_ISR_IT+0x1da>
 800ec02:	e076      	b.n	800ecf2 <I2C_Slave_ISR_IT+0x1da>
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	f003 0304 	and.w	r3, r3, #4
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d02f      	beq.n	800ec6e <I2C_Slave_ISR_IT+0x156>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f003 0304 	and.w	r3, r3, #4
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d02a      	beq.n	800ec6e <I2C_Slave_ISR_IT+0x156>
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d018      	beq.n	800ec54 <I2C_Slave_ISR_IT+0x13c>
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec2c:	b2d2      	uxtb	r2, r2
 800ec2e:	701a      	strb	r2, [r3, #0]
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec34:	1c5a      	adds	r2, r3, #1
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	625a      	str	r2, [r3, #36]	@ 0x24
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	b29a      	uxth	r2, r3
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	b29a      	uxth	r2, r3
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d14b      	bne.n	800ecf6 <I2C_Slave_ISR_IT+0x1de>
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ec64:	d047      	beq.n	800ecf6 <I2C_Slave_ISR_IT+0x1de>
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	f000 fda3 	bl	800f7b2 <I2C_ITSlaveSeqCplt>
 800ec6c:	e043      	b.n	800ecf6 <I2C_Slave_ISR_IT+0x1de>
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	f003 0308 	and.w	r3, r3, #8
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d009      	beq.n	800ec8c <I2C_Slave_ISR_IT+0x174>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f003 0308 	and.w	r3, r3, #8
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d004      	beq.n	800ec8c <I2C_Slave_ISR_IT+0x174>
 800ec82:	6939      	ldr	r1, [r7, #16]
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f000 fcd3 	bl	800f630 <I2C_ITAddrCplt>
 800ec8a:	e035      	b.n	800ecf8 <I2C_Slave_ISR_IT+0x1e0>
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	f003 0302 	and.w	r3, r3, #2
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d030      	beq.n	800ecf8 <I2C_Slave_ISR_IT+0x1e0>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f003 0302 	and.w	r3, r3, #2
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d02b      	beq.n	800ecf8 <I2C_Slave_ISR_IT+0x1e0>
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d018      	beq.n	800ecdc <I2C_Slave_ISR_IT+0x1c4>
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecae:	781a      	ldrb	r2, [r3, #0]
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	629a      	str	r2, [r3, #40]	@ 0x28
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecba:	1c5a      	adds	r2, r3, #1
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	625a      	str	r2, [r3, #36]	@ 0x24
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	3b01      	subs	r3, #1
 800ecc8:	b29a      	uxth	r2, r3
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecd2:	3b01      	subs	r3, #1
 800ecd4:	b29a      	uxth	r2, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ecda:	e00d      	b.n	800ecf8 <I2C_Slave_ISR_IT+0x1e0>
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ece2:	d002      	beq.n	800ecea <I2C_Slave_ISR_IT+0x1d2>
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d106      	bne.n	800ecf8 <I2C_Slave_ISR_IT+0x1e0>
 800ecea:	68f8      	ldr	r0, [r7, #12]
 800ecec:	f000 fd61 	bl	800f7b2 <I2C_ITSlaveSeqCplt>
 800ecf0:	e002      	b.n	800ecf8 <I2C_Slave_ISR_IT+0x1e0>
 800ecf2:	bf00      	nop
 800ecf4:	e000      	b.n	800ecf8 <I2C_Slave_ISR_IT+0x1e0>
 800ecf6:	bf00      	nop
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ed00:	2300      	movs	r3, #0
 800ed02:	4618      	mov	r0, r3
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}

0800ed0a <I2C_Master_ISR_DMA>:
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b088      	sub	sp, #32
 800ed0e:	af02      	add	r7, sp, #8
 800ed10:	60f8      	str	r0, [r7, #12]
 800ed12:	60b9      	str	r1, [r7, #8]
 800ed14:	607a      	str	r2, [r7, #4]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d101      	bne.n	800ed24 <I2C_Master_ISR_DMA+0x1a>
 800ed20:	2302      	movs	r3, #2
 800ed22:	e0d9      	b.n	800eed8 <I2C_Master_ISR_DMA+0x1ce>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	f003 0310 	and.w	r3, r3, #16
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d016      	beq.n	800ed64 <I2C_Master_ISR_DMA+0x5a>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f003 0310 	and.w	r3, r3, #16
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d011      	beq.n	800ed64 <I2C_Master_ISR_DMA+0x5a>
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	2210      	movs	r2, #16
 800ed46:	61da      	str	r2, [r3, #28]
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed4c:	f043 0204 	orr.w	r2, r3, #4
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	645a      	str	r2, [r3, #68]	@ 0x44
 800ed54:	2120      	movs	r1, #32
 800ed56:	68f8      	ldr	r0, [r7, #12]
 800ed58:	f001 fc46 	bl	80105e8 <I2C_Enable_IRQ>
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f001 fa0c 	bl	801017a <I2C_Flush_TXDR>
 800ed62:	e0b4      	b.n	800eece <I2C_Master_ISR_DMA+0x1c4>
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d071      	beq.n	800ee52 <I2C_Master_ISR_DMA+0x148>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d06c      	beq.n	800ee52 <I2C_Master_ISR_DMA+0x148>
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ed86:	601a      	str	r2, [r3, #0]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d04e      	beq.n	800ee30 <I2C_Master_ISR_DMA+0x126>
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed9e:	827b      	strh	r3, [r7, #18]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	2bff      	cmp	r3, #255	@ 0xff
 800eda8:	d906      	bls.n	800edb8 <I2C_Master_ISR_DMA+0xae>
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	22ff      	movs	r2, #255	@ 0xff
 800edae:	851a      	strh	r2, [r3, #40]	@ 0x28
 800edb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800edb4:	617b      	str	r3, [r7, #20]
 800edb6:	e010      	b.n	800edda <I2C_Master_ISR_DMA+0xd0>
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edbc:	b29a      	uxth	r2, r3
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800edca:	d003      	beq.n	800edd4 <I2C_Master_ISR_DMA+0xca>
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edd0:	617b      	str	r3, [r7, #20]
 800edd2:	e002      	b.n	800edda <I2C_Master_ISR_DMA+0xd0>
 800edd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800edd8:	617b      	str	r3, [r7, #20]
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edde:	b2da      	uxtb	r2, r3
 800ede0:	8a79      	ldrh	r1, [r7, #18]
 800ede2:	2300      	movs	r3, #0
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f001 fbcb 	bl	8010584 <I2C_TransferConfig>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edf2:	b29a      	uxth	r2, r3
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edf8:	1ad3      	subs	r3, r2, r3
 800edfa:	b29a      	uxth	r2, r3
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	2b22      	cmp	r3, #34	@ 0x22
 800ee0a:	d108      	bne.n	800ee1e <I2C_Master_ISR_DMA+0x114>
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ee1a:	601a      	str	r2, [r3, #0]
 800ee1c:	e057      	b.n	800eece <I2C_Master_ISR_DMA+0x1c4>
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ee2c:	601a      	str	r2, [r3, #0]
 800ee2e:	e04e      	b.n	800eece <I2C_Master_ISR_DMA+0x1c4>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee3e:	d003      	beq.n	800ee48 <I2C_Master_ISR_DMA+0x13e>
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f000 fc79 	bl	800f738 <I2C_ITMasterSeqCplt>
 800ee46:	e042      	b.n	800eece <I2C_Master_ISR_DMA+0x1c4>
 800ee48:	2140      	movs	r1, #64	@ 0x40
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	f001 f87e 	bl	800ff4c <I2C_ITError>
 800ee50:	e03d      	b.n	800eece <I2C_Master_ISR_DMA+0x1c4>
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d028      	beq.n	800eeae <I2C_Master_ISR_DMA+0x1a4>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d023      	beq.n	800eeae <I2C_Master_ISR_DMA+0x1a4>
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d119      	bne.n	800eea4 <I2C_Master_ISR_DMA+0x19a>
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ee7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ee7e:	d025      	beq.n	800eecc <I2C_Master_ISR_DMA+0x1c2>
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ee88:	d108      	bne.n	800ee9c <I2C_Master_ISR_DMA+0x192>
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	685a      	ldr	r2, [r3, #4]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ee98:	605a      	str	r2, [r3, #4]
 800ee9a:	e017      	b.n	800eecc <I2C_Master_ISR_DMA+0x1c2>
 800ee9c:	68f8      	ldr	r0, [r7, #12]
 800ee9e:	f000 fc4b 	bl	800f738 <I2C_ITMasterSeqCplt>
 800eea2:	e013      	b.n	800eecc <I2C_Master_ISR_DMA+0x1c2>
 800eea4:	2140      	movs	r1, #64	@ 0x40
 800eea6:	68f8      	ldr	r0, [r7, #12]
 800eea8:	f001 f850 	bl	800ff4c <I2C_ITError>
 800eeac:	e00e      	b.n	800eecc <I2C_Master_ISR_DMA+0x1c2>
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	f003 0320 	and.w	r3, r3, #32
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d00a      	beq.n	800eece <I2C_Master_ISR_DMA+0x1c4>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f003 0320 	and.w	r3, r3, #32
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d005      	beq.n	800eece <I2C_Master_ISR_DMA+0x1c4>
 800eec2:	68b9      	ldr	r1, [r7, #8]
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f000 fcd1 	bl	800f86c <I2C_ITMasterCplt>
 800eeca:	e000      	b.n	800eece <I2C_Master_ISR_DMA+0x1c4>
 800eecc:	bf00      	nop
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2200      	movs	r2, #0
 800eed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eed6:	2300      	movs	r3, #0
 800eed8:	4618      	mov	r0, r3
 800eeda:	3718      	adds	r7, #24
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <I2C_Mem_ISR_DMA>:
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b088      	sub	sp, #32
 800eee4:	af02      	add	r7, sp, #8
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	607a      	str	r2, [r7, #4]
 800eeec:	4b8d      	ldr	r3, [pc, #564]	@ (800f124 <I2C_Mem_ISR_DMA+0x244>)
 800eeee:	617b      	str	r3, [r7, #20]
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d101      	bne.n	800eefe <I2C_Mem_ISR_DMA+0x1e>
 800eefa:	2302      	movs	r3, #2
 800eefc:	e10e      	b.n	800f11c <I2C_Mem_ISR_DMA+0x23c>
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	2201      	movs	r2, #1
 800ef02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	f003 0310 	and.w	r3, r3, #16
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d016      	beq.n	800ef3e <I2C_Mem_ISR_DMA+0x5e>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f003 0310 	and.w	r3, r3, #16
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d011      	beq.n	800ef3e <I2C_Mem_ISR_DMA+0x5e>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	2210      	movs	r2, #16
 800ef20:	61da      	str	r2, [r3, #28]
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ef26:	f043 0204 	orr.w	r2, r3, #4
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	645a      	str	r2, [r3, #68]	@ 0x44
 800ef2e:	2120      	movs	r1, #32
 800ef30:	68f8      	ldr	r0, [r7, #12]
 800ef32:	f001 fb59 	bl	80105e8 <I2C_Enable_IRQ>
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f001 f91f 	bl	801017a <I2C_Flush_TXDR>
 800ef3c:	e0e9      	b.n	800f112 <I2C_Mem_ISR_DMA+0x232>
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f003 0302 	and.w	r3, r3, #2
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00e      	beq.n	800ef66 <I2C_Mem_ISR_DMA+0x86>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f003 0302 	and.w	r3, r3, #2
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d009      	beq.n	800ef66 <I2C_Mem_ISR_DMA+0x86>
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ef5a:	629a      	str	r2, [r3, #40]	@ 0x28
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef62:	651a      	str	r2, [r3, #80]	@ 0x50
 800ef64:	e0d5      	b.n	800f112 <I2C_Mem_ISR_DMA+0x232>
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d05f      	beq.n	800f030 <I2C_Mem_ISR_DMA+0x150>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d05a      	beq.n	800f030 <I2C_Mem_ISR_DMA+0x150>
 800ef7a:	2101      	movs	r1, #1
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f001 fbb7 	bl	80106f0 <I2C_Disable_IRQ>
 800ef82:	2110      	movs	r1, #16
 800ef84:	68f8      	ldr	r0, [r7, #12]
 800ef86:	f001 fb2f 	bl	80105e8 <I2C_Enable_IRQ>
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d048      	beq.n	800f026 <I2C_Mem_ISR_DMA+0x146>
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	2bff      	cmp	r3, #255	@ 0xff
 800ef9c:	d910      	bls.n	800efc0 <I2C_Mem_ISR_DMA+0xe0>
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	22ff      	movs	r2, #255	@ 0xff
 800efa2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efa8:	b299      	uxth	r1, r3
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	2300      	movs	r3, #0
 800efb2:	9300      	str	r3, [sp, #0]
 800efb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800efb8:	68f8      	ldr	r0, [r7, #12]
 800efba:	f001 fae3 	bl	8010584 <I2C_TransferConfig>
 800efbe:	e011      	b.n	800efe4 <I2C_Mem_ISR_DMA+0x104>
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efc4:	b29a      	uxth	r2, r3
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800efce:	b299      	uxth	r1, r3
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	2300      	movs	r3, #0
 800efd8:	9300      	str	r3, [sp, #0]
 800efda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800efde:	68f8      	ldr	r0, [r7, #12]
 800efe0:	f001 fad0 	bl	8010584 <I2C_TransferConfig>
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efe8:	b29a      	uxth	r2, r3
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	b29a      	uxth	r2, r3
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800effc:	b2db      	uxtb	r3, r3
 800effe:	2b22      	cmp	r3, #34	@ 0x22
 800f000:	d108      	bne.n	800f014 <I2C_Mem_ISR_DMA+0x134>
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f010:	601a      	str	r2, [r3, #0]
 800f012:	e07e      	b.n	800f112 <I2C_Mem_ISR_DMA+0x232>
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f022:	601a      	str	r2, [r3, #0]
 800f024:	e075      	b.n	800f112 <I2C_Mem_ISR_DMA+0x232>
 800f026:	2140      	movs	r1, #64	@ 0x40
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f000 ff8f 	bl	800ff4c <I2C_ITError>
 800f02e:	e070      	b.n	800f112 <I2C_Mem_ISR_DMA+0x232>
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f036:	2b00      	cmp	r3, #0
 800f038:	d05d      	beq.n	800f0f6 <I2C_Mem_ISR_DMA+0x216>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f040:	2b00      	cmp	r3, #0
 800f042:	d058      	beq.n	800f0f6 <I2C_Mem_ISR_DMA+0x216>
 800f044:	2101      	movs	r1, #1
 800f046:	68f8      	ldr	r0, [r7, #12]
 800f048:	f001 fb52 	bl	80106f0 <I2C_Disable_IRQ>
 800f04c:	2110      	movs	r1, #16
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f001 faca 	bl	80105e8 <I2C_Enable_IRQ>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	2b22      	cmp	r3, #34	@ 0x22
 800f05e:	d101      	bne.n	800f064 <I2C_Mem_ISR_DMA+0x184>
 800f060:	4b31      	ldr	r3, [pc, #196]	@ (800f128 <I2C_Mem_ISR_DMA+0x248>)
 800f062:	617b      	str	r3, [r7, #20]
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f068:	b29b      	uxth	r3, r3
 800f06a:	2bff      	cmp	r3, #255	@ 0xff
 800f06c:	d910      	bls.n	800f090 <I2C_Mem_ISR_DMA+0x1b0>
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	22ff      	movs	r2, #255	@ 0xff
 800f072:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f078:	b299      	uxth	r1, r3
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f07e:	b2da      	uxtb	r2, r3
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	9300      	str	r3, [sp, #0]
 800f084:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f001 fa7b 	bl	8010584 <I2C_TransferConfig>
 800f08e:	e011      	b.n	800f0b4 <I2C_Mem_ISR_DMA+0x1d4>
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f094:	b29a      	uxth	r2, r3
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f09e:	b299      	uxth	r1, r3
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0a4:	b2da      	uxtb	r2, r3
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	9300      	str	r3, [sp, #0]
 800f0aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f0ae:	68f8      	ldr	r0, [r7, #12]
 800f0b0:	f001 fa68 	bl	8010584 <I2C_TransferConfig>
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0b8:	b29a      	uxth	r2, r3
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0be:	1ad3      	subs	r3, r2, r3
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	2b22      	cmp	r3, #34	@ 0x22
 800f0d0:	d108      	bne.n	800f0e4 <I2C_Mem_ISR_DMA+0x204>
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f0e0:	601a      	str	r2, [r3, #0]
 800f0e2:	e016      	b.n	800f112 <I2C_Mem_ISR_DMA+0x232>
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f0f2:	601a      	str	r2, [r3, #0]
 800f0f4:	e00d      	b.n	800f112 <I2C_Mem_ISR_DMA+0x232>
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	f003 0320 	and.w	r3, r3, #32
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d008      	beq.n	800f112 <I2C_Mem_ISR_DMA+0x232>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f003 0320 	and.w	r3, r3, #32
 800f106:	2b00      	cmp	r3, #0
 800f108:	d003      	beq.n	800f112 <I2C_Mem_ISR_DMA+0x232>
 800f10a:	68b9      	ldr	r1, [r7, #8]
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f000 fbad 	bl	800f86c <I2C_ITMasterCplt>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	2200      	movs	r2, #0
 800f116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f11a:	2300      	movs	r3, #0
 800f11c:	4618      	mov	r0, r3
 800f11e:	3718      	adds	r7, #24
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}
 800f124:	80002000 	.word	0x80002000
 800f128:	80002400 	.word	0x80002400

0800f12c <I2C_Slave_ISR_DMA>:
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b088      	sub	sp, #32
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f13c:	61bb      	str	r3, [r7, #24]
 800f13e:	2300      	movs	r3, #0
 800f140:	61fb      	str	r3, [r7, #28]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d101      	bne.n	800f150 <I2C_Slave_ISR_DMA+0x24>
 800f14c:	2302      	movs	r3, #2
 800f14e:	e1c2      	b.n	800f4d6 <I2C_Slave_ISR_DMA+0x3aa>
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	2201      	movs	r2, #1
 800f154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	f003 0320 	and.w	r3, r3, #32
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d009      	beq.n	800f176 <I2C_Slave_ISR_DMA+0x4a>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f003 0320 	and.w	r3, r3, #32
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d004      	beq.n	800f176 <I2C_Slave_ISR_DMA+0x4a>
 800f16c:	68b9      	ldr	r1, [r7, #8]
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	f000 fc44 	bl	800f9fc <I2C_ITSlaveCplt>
 800f174:	e1aa      	b.n	800f4cc <I2C_Slave_ISR_DMA+0x3a0>
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	f003 0310 	and.w	r3, r3, #16
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	f000 8197 	beq.w	800f4b0 <I2C_Slave_ISR_DMA+0x384>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f003 0310 	and.w	r3, r3, #16
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f000 8191 	beq.w	800f4b0 <I2C_Slave_ISR_DMA+0x384>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f194:	2b00      	cmp	r3, #0
 800f196:	d105      	bne.n	800f1a4 <I2C_Slave_ISR_DMA+0x78>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	f000 817f 	beq.w	800f4a2 <I2C_Slave_ISR_DMA+0x376>
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d07b      	beq.n	800f2a4 <I2C_Slave_ISR_DMA+0x178>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d076      	beq.n	800f2a4 <I2C_Slave_ISR_DMA+0x178>
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4a74      	ldr	r2, [pc, #464]	@ (800f390 <I2C_Slave_ISR_DMA+0x264>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d059      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4a72      	ldr	r2, [pc, #456]	@ (800f394 <I2C_Slave_ISR_DMA+0x268>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d053      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4a70      	ldr	r2, [pc, #448]	@ (800f398 <I2C_Slave_ISR_DMA+0x26c>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d04d      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a6e      	ldr	r2, [pc, #440]	@ (800f39c <I2C_Slave_ISR_DMA+0x270>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d047      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a6c      	ldr	r2, [pc, #432]	@ (800f3a0 <I2C_Slave_ISR_DMA+0x274>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d041      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4a6a      	ldr	r2, [pc, #424]	@ (800f3a4 <I2C_Slave_ISR_DMA+0x278>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d03b      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a68      	ldr	r2, [pc, #416]	@ (800f3a8 <I2C_Slave_ISR_DMA+0x27c>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d035      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a66      	ldr	r2, [pc, #408]	@ (800f3ac <I2C_Slave_ISR_DMA+0x280>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d02f      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a64      	ldr	r2, [pc, #400]	@ (800f3b0 <I2C_Slave_ISR_DMA+0x284>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d029      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a62      	ldr	r2, [pc, #392]	@ (800f3b4 <I2C_Slave_ISR_DMA+0x288>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d023      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a60      	ldr	r2, [pc, #384]	@ (800f3b8 <I2C_Slave_ISR_DMA+0x28c>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d01d      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a5e      	ldr	r2, [pc, #376]	@ (800f3bc <I2C_Slave_ISR_DMA+0x290>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d017      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4a5c      	ldr	r2, [pc, #368]	@ (800f3c0 <I2C_Slave_ISR_DMA+0x294>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d011      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a5a      	ldr	r2, [pc, #360]	@ (800f3c4 <I2C_Slave_ISR_DMA+0x298>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d00b      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	4a58      	ldr	r2, [pc, #352]	@ (800f3c8 <I2C_Slave_ISR_DMA+0x29c>)
 800f266:	4293      	cmp	r3, r2
 800f268:	d005      	beq.n	800f276 <I2C_Slave_ISR_DMA+0x14a>
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4a56      	ldr	r2, [pc, #344]	@ (800f3cc <I2C_Slave_ISR_DMA+0x2a0>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d109      	bne.n	800f28a <I2C_Slave_ISR_DMA+0x15e>
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	bf0c      	ite	eq
 800f282:	2301      	moveq	r3, #1
 800f284:	2300      	movne	r3, #0
 800f286:	b2db      	uxtb	r3, r3
 800f288:	e008      	b.n	800f29c <I2C_Slave_ISR_DMA+0x170>
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	bf0c      	ite	eq
 800f296:	2301      	moveq	r3, #1
 800f298:	2300      	movne	r3, #0
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d001      	beq.n	800f2a4 <I2C_Slave_ISR_DMA+0x178>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	61fb      	str	r3, [r7, #28]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	f000 809e 	beq.w	800f3ea <I2C_Slave_ISR_DMA+0x2be>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f000 8098 	beq.w	800f3ea <I2C_Slave_ISR_DMA+0x2be>
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4a33      	ldr	r2, [pc, #204]	@ (800f390 <I2C_Slave_ISR_DMA+0x264>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d059      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4a31      	ldr	r2, [pc, #196]	@ (800f394 <I2C_Slave_ISR_DMA+0x268>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d053      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a2f      	ldr	r2, [pc, #188]	@ (800f398 <I2C_Slave_ISR_DMA+0x26c>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d04d      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	4a2d      	ldr	r2, [pc, #180]	@ (800f39c <I2C_Slave_ISR_DMA+0x270>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d047      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4a2b      	ldr	r2, [pc, #172]	@ (800f3a0 <I2C_Slave_ISR_DMA+0x274>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d041      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4a29      	ldr	r2, [pc, #164]	@ (800f3a4 <I2C_Slave_ISR_DMA+0x278>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d03b      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4a27      	ldr	r2, [pc, #156]	@ (800f3a8 <I2C_Slave_ISR_DMA+0x27c>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d035      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4a25      	ldr	r2, [pc, #148]	@ (800f3ac <I2C_Slave_ISR_DMA+0x280>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d02f      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4a23      	ldr	r2, [pc, #140]	@ (800f3b0 <I2C_Slave_ISR_DMA+0x284>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d029      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4a21      	ldr	r2, [pc, #132]	@ (800f3b4 <I2C_Slave_ISR_DMA+0x288>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d023      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4a1f      	ldr	r2, [pc, #124]	@ (800f3b8 <I2C_Slave_ISR_DMA+0x28c>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d01d      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	4a1d      	ldr	r2, [pc, #116]	@ (800f3bc <I2C_Slave_ISR_DMA+0x290>)
 800f346:	4293      	cmp	r3, r2
 800f348:	d017      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	4a1b      	ldr	r2, [pc, #108]	@ (800f3c0 <I2C_Slave_ISR_DMA+0x294>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d011      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a19      	ldr	r2, [pc, #100]	@ (800f3c4 <I2C_Slave_ISR_DMA+0x298>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d00b      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4a17      	ldr	r2, [pc, #92]	@ (800f3c8 <I2C_Slave_ISR_DMA+0x29c>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d005      	beq.n	800f37a <I2C_Slave_ISR_DMA+0x24e>
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a15      	ldr	r2, [pc, #84]	@ (800f3cc <I2C_Slave_ISR_DMA+0x2a0>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d12a      	bne.n	800f3d0 <I2C_Slave_ISR_DMA+0x2a4>
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	bf0c      	ite	eq
 800f386:	2301      	moveq	r3, #1
 800f388:	2300      	movne	r3, #0
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	e029      	b.n	800f3e2 <I2C_Slave_ISR_DMA+0x2b6>
 800f38e:	bf00      	nop
 800f390:	40020010 	.word	0x40020010
 800f394:	40020028 	.word	0x40020028
 800f398:	40020040 	.word	0x40020040
 800f39c:	40020058 	.word	0x40020058
 800f3a0:	40020070 	.word	0x40020070
 800f3a4:	40020088 	.word	0x40020088
 800f3a8:	400200a0 	.word	0x400200a0
 800f3ac:	400200b8 	.word	0x400200b8
 800f3b0:	40020410 	.word	0x40020410
 800f3b4:	40020428 	.word	0x40020428
 800f3b8:	40020440 	.word	0x40020440
 800f3bc:	40020458 	.word	0x40020458
 800f3c0:	40020470 	.word	0x40020470
 800f3c4:	40020488 	.word	0x40020488
 800f3c8:	400204a0 	.word	0x400204a0
 800f3cc:	400204b8 	.word	0x400204b8
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	bf0c      	ite	eq
 800f3dc:	2301      	moveq	r3, #1
 800f3de:	2300      	movne	r3, #0
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d001      	beq.n	800f3ea <I2C_Slave_ISR_DMA+0x2be>
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	61fb      	str	r3, [r7, #28]
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d128      	bne.n	800f442 <I2C_Slave_ISR_DMA+0x316>
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	2b28      	cmp	r3, #40	@ 0x28
 800f3fa:	d108      	bne.n	800f40e <I2C_Slave_ISR_DMA+0x2e2>
 800f3fc:	69bb      	ldr	r3, [r7, #24]
 800f3fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f402:	d104      	bne.n	800f40e <I2C_Slave_ISR_DMA+0x2e2>
 800f404:	68b9      	ldr	r1, [r7, #8]
 800f406:	68f8      	ldr	r0, [r7, #12]
 800f408:	f000 fd4c 	bl	800fea4 <I2C_ITListenCplt>
 800f40c:	e048      	b.n	800f4a0 <I2C_Slave_ISR_DMA+0x374>
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f414:	b2db      	uxtb	r3, r3
 800f416:	2b29      	cmp	r3, #41	@ 0x29
 800f418:	d10e      	bne.n	800f438 <I2C_Slave_ISR_DMA+0x30c>
 800f41a:	69bb      	ldr	r3, [r7, #24]
 800f41c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800f420:	d00a      	beq.n	800f438 <I2C_Slave_ISR_DMA+0x30c>
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2210      	movs	r2, #16
 800f428:	61da      	str	r2, [r3, #28]
 800f42a:	68f8      	ldr	r0, [r7, #12]
 800f42c:	f000 fea5 	bl	801017a <I2C_Flush_TXDR>
 800f430:	68f8      	ldr	r0, [r7, #12]
 800f432:	f000 f9be 	bl	800f7b2 <I2C_ITSlaveSeqCplt>
 800f436:	e033      	b.n	800f4a0 <I2C_Slave_ISR_DMA+0x374>
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2210      	movs	r2, #16
 800f43e:	61da      	str	r2, [r3, #28]
 800f440:	e034      	b.n	800f4ac <I2C_Slave_ISR_DMA+0x380>
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2210      	movs	r2, #16
 800f448:	61da      	str	r2, [r3, #28]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f44e:	f043 0204 	orr.w	r2, r3, #4
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	645a      	str	r2, [r3, #68]	@ 0x44
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f45c:	75fb      	strb	r3, [r7, #23]
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d003      	beq.n	800f46c <I2C_Slave_ISR_DMA+0x340>
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f46a:	d11f      	bne.n	800f4ac <I2C_Slave_ISR_DMA+0x380>
 800f46c:	7dfb      	ldrb	r3, [r7, #23]
 800f46e:	2b21      	cmp	r3, #33	@ 0x21
 800f470:	d002      	beq.n	800f478 <I2C_Slave_ISR_DMA+0x34c>
 800f472:	7dfb      	ldrb	r3, [r7, #23]
 800f474:	2b29      	cmp	r3, #41	@ 0x29
 800f476:	d103      	bne.n	800f480 <I2C_Slave_ISR_DMA+0x354>
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2221      	movs	r2, #33	@ 0x21
 800f47c:	631a      	str	r2, [r3, #48]	@ 0x30
 800f47e:	e008      	b.n	800f492 <I2C_Slave_ISR_DMA+0x366>
 800f480:	7dfb      	ldrb	r3, [r7, #23]
 800f482:	2b22      	cmp	r3, #34	@ 0x22
 800f484:	d002      	beq.n	800f48c <I2C_Slave_ISR_DMA+0x360>
 800f486:	7dfb      	ldrb	r3, [r7, #23]
 800f488:	2b2a      	cmp	r3, #42	@ 0x2a
 800f48a:	d102      	bne.n	800f492 <I2C_Slave_ISR_DMA+0x366>
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2222      	movs	r2, #34	@ 0x22
 800f490:	631a      	str	r2, [r3, #48]	@ 0x30
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f496:	4619      	mov	r1, r3
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f000 fd57 	bl	800ff4c <I2C_ITError>
 800f49e:	e005      	b.n	800f4ac <I2C_Slave_ISR_DMA+0x380>
 800f4a0:	e004      	b.n	800f4ac <I2C_Slave_ISR_DMA+0x380>
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2210      	movs	r2, #16
 800f4a8:	61da      	str	r2, [r3, #28]
 800f4aa:	e00f      	b.n	800f4cc <I2C_Slave_ISR_DMA+0x3a0>
 800f4ac:	bf00      	nop
 800f4ae:	e00d      	b.n	800f4cc <I2C_Slave_ISR_DMA+0x3a0>
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	f003 0308 	and.w	r3, r3, #8
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d008      	beq.n	800f4cc <I2C_Slave_ISR_DMA+0x3a0>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f003 0308 	and.w	r3, r3, #8
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d003      	beq.n	800f4cc <I2C_Slave_ISR_DMA+0x3a0>
 800f4c4:	68b9      	ldr	r1, [r7, #8]
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f000 f8b2 	bl	800f630 <I2C_ITAddrCplt>
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3720      	adds	r7, #32
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop

0800f4e0 <I2C_RequestMemoryWrite>:
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b086      	sub	sp, #24
 800f4e4:	af02      	add	r7, sp, #8
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	4608      	mov	r0, r1
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	817b      	strh	r3, [r7, #10]
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	813b      	strh	r3, [r7, #8]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	80fb      	strh	r3, [r7, #6]
 800f4fa:	88fb      	ldrh	r3, [r7, #6]
 800f4fc:	b2da      	uxtb	r2, r3
 800f4fe:	8979      	ldrh	r1, [r7, #10]
 800f500:	4b20      	ldr	r3, [pc, #128]	@ (800f584 <I2C_RequestMemoryWrite+0xa4>)
 800f502:	9300      	str	r3, [sp, #0]
 800f504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	f001 f83b 	bl	8010584 <I2C_TransferConfig>
 800f50e:	69fa      	ldr	r2, [r7, #28]
 800f510:	69b9      	ldr	r1, [r7, #24]
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f000 fecc 	bl	80102b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d001      	beq.n	800f522 <I2C_RequestMemoryWrite+0x42>
 800f51e:	2301      	movs	r3, #1
 800f520:	e02c      	b.n	800f57c <I2C_RequestMemoryWrite+0x9c>
 800f522:	88fb      	ldrh	r3, [r7, #6]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d105      	bne.n	800f534 <I2C_RequestMemoryWrite+0x54>
 800f528:	893b      	ldrh	r3, [r7, #8]
 800f52a:	b2da      	uxtb	r2, r3
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	629a      	str	r2, [r3, #40]	@ 0x28
 800f532:	e015      	b.n	800f560 <I2C_RequestMemoryWrite+0x80>
 800f534:	893b      	ldrh	r3, [r7, #8]
 800f536:	0a1b      	lsrs	r3, r3, #8
 800f538:	b29b      	uxth	r3, r3
 800f53a:	b2da      	uxtb	r2, r3
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	629a      	str	r2, [r3, #40]	@ 0x28
 800f542:	69fa      	ldr	r2, [r7, #28]
 800f544:	69b9      	ldr	r1, [r7, #24]
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f000 feb2 	bl	80102b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800f54c:	4603      	mov	r3, r0
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d001      	beq.n	800f556 <I2C_RequestMemoryWrite+0x76>
 800f552:	2301      	movs	r3, #1
 800f554:	e012      	b.n	800f57c <I2C_RequestMemoryWrite+0x9c>
 800f556:	893b      	ldrh	r3, [r7, #8]
 800f558:	b2da      	uxtb	r2, r3
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	629a      	str	r2, [r3, #40]	@ 0x28
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	2200      	movs	r2, #0
 800f568:	2180      	movs	r1, #128	@ 0x80
 800f56a:	68f8      	ldr	r0, [r7, #12]
 800f56c:	f000 fe47 	bl	80101fe <I2C_WaitOnFlagUntilTimeout>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <I2C_RequestMemoryWrite+0x9a>
 800f576:	2301      	movs	r3, #1
 800f578:	e000      	b.n	800f57c <I2C_RequestMemoryWrite+0x9c>
 800f57a:	2300      	movs	r3, #0
 800f57c:	4618      	mov	r0, r3
 800f57e:	3710      	adds	r7, #16
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	80002000 	.word	0x80002000

0800f588 <I2C_RequestMemoryRead>:
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af02      	add	r7, sp, #8
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	4608      	mov	r0, r1
 800f592:	4611      	mov	r1, r2
 800f594:	461a      	mov	r2, r3
 800f596:	4603      	mov	r3, r0
 800f598:	817b      	strh	r3, [r7, #10]
 800f59a:	460b      	mov	r3, r1
 800f59c:	813b      	strh	r3, [r7, #8]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	80fb      	strh	r3, [r7, #6]
 800f5a2:	88fb      	ldrh	r3, [r7, #6]
 800f5a4:	b2da      	uxtb	r2, r3
 800f5a6:	8979      	ldrh	r1, [r7, #10]
 800f5a8:	4b20      	ldr	r3, [pc, #128]	@ (800f62c <I2C_RequestMemoryRead+0xa4>)
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	f000 ffe8 	bl	8010584 <I2C_TransferConfig>
 800f5b4:	69fa      	ldr	r2, [r7, #28]
 800f5b6:	69b9      	ldr	r1, [r7, #24]
 800f5b8:	68f8      	ldr	r0, [r7, #12]
 800f5ba:	f000 fe79 	bl	80102b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d001      	beq.n	800f5c8 <I2C_RequestMemoryRead+0x40>
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	e02c      	b.n	800f622 <I2C_RequestMemoryRead+0x9a>
 800f5c8:	88fb      	ldrh	r3, [r7, #6]
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d105      	bne.n	800f5da <I2C_RequestMemoryRead+0x52>
 800f5ce:	893b      	ldrh	r3, [r7, #8]
 800f5d0:	b2da      	uxtb	r2, r3
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	629a      	str	r2, [r3, #40]	@ 0x28
 800f5d8:	e015      	b.n	800f606 <I2C_RequestMemoryRead+0x7e>
 800f5da:	893b      	ldrh	r3, [r7, #8]
 800f5dc:	0a1b      	lsrs	r3, r3, #8
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	b2da      	uxtb	r2, r3
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	629a      	str	r2, [r3, #40]	@ 0x28
 800f5e8:	69fa      	ldr	r2, [r7, #28]
 800f5ea:	69b9      	ldr	r1, [r7, #24]
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f000 fe5f 	bl	80102b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d001      	beq.n	800f5fc <I2C_RequestMemoryRead+0x74>
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	e012      	b.n	800f622 <I2C_RequestMemoryRead+0x9a>
 800f5fc:	893b      	ldrh	r3, [r7, #8]
 800f5fe:	b2da      	uxtb	r2, r3
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	629a      	str	r2, [r3, #40]	@ 0x28
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	9300      	str	r3, [sp, #0]
 800f60a:	69bb      	ldr	r3, [r7, #24]
 800f60c:	2200      	movs	r2, #0
 800f60e:	2140      	movs	r1, #64	@ 0x40
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	f000 fdf4 	bl	80101fe <I2C_WaitOnFlagUntilTimeout>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d001      	beq.n	800f620 <I2C_RequestMemoryRead+0x98>
 800f61c:	2301      	movs	r3, #1
 800f61e:	e000      	b.n	800f622 <I2C_RequestMemoryRead+0x9a>
 800f620:	2300      	movs	r3, #0
 800f622:	4618      	mov	r0, r3
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	80002000 	.word	0x80002000

0800f630 <I2C_ITAddrCplt>:
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f640:	b2db      	uxtb	r3, r3
 800f642:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800f646:	2b28      	cmp	r3, #40	@ 0x28
 800f648:	d16a      	bne.n	800f720 <I2C_ITAddrCplt+0xf0>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	699b      	ldr	r3, [r3, #24]
 800f650:	0c1b      	lsrs	r3, r3, #16
 800f652:	b2db      	uxtb	r3, r3
 800f654:	f003 0301 	and.w	r3, r3, #1
 800f658:	73fb      	strb	r3, [r7, #15]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	699b      	ldr	r3, [r3, #24]
 800f660:	0c1b      	lsrs	r3, r3, #16
 800f662:	b29b      	uxth	r3, r3
 800f664:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f668:	81bb      	strh	r3, [r7, #12]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	b29b      	uxth	r3, r3
 800f672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f676:	817b      	strh	r3, [r7, #10]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	b29b      	uxth	r3, r3
 800f680:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f684:	813b      	strh	r3, [r7, #8]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	2b02      	cmp	r3, #2
 800f68c:	d138      	bne.n	800f700 <I2C_ITAddrCplt+0xd0>
 800f68e:	897b      	ldrh	r3, [r7, #10]
 800f690:	09db      	lsrs	r3, r3, #7
 800f692:	b29a      	uxth	r2, r3
 800f694:	89bb      	ldrh	r3, [r7, #12]
 800f696:	4053      	eors	r3, r2
 800f698:	b29b      	uxth	r3, r3
 800f69a:	f003 0306 	and.w	r3, r3, #6
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d11c      	bne.n	800f6dc <I2C_ITAddrCplt+0xac>
 800f6a2:	897b      	ldrh	r3, [r7, #10]
 800f6a4:	81bb      	strh	r3, [r7, #12]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f6aa:	1c5a      	adds	r2, r3, #1
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	649a      	str	r2, [r3, #72]	@ 0x48
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d13b      	bne.n	800f730 <I2C_ITAddrCplt+0x100>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	649a      	str	r2, [r3, #72]	@ 0x48
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2208      	movs	r2, #8
 800f6c4:	61da      	str	r2, [r3, #28]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f6ce:	89ba      	ldrh	r2, [r7, #12]
 800f6d0:	7bfb      	ldrb	r3, [r7, #15]
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f7ff f8c3 	bl	800e860 <HAL_I2C_AddrCallback>
 800f6da:	e029      	b.n	800f730 <I2C_ITAddrCplt+0x100>
 800f6dc:	893b      	ldrh	r3, [r7, #8]
 800f6de:	81bb      	strh	r3, [r7, #12]
 800f6e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f001 f803 	bl	80106f0 <I2C_Disable_IRQ>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f6f2:	89ba      	ldrh	r2, [r7, #12]
 800f6f4:	7bfb      	ldrb	r3, [r7, #15]
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f7ff f8b1 	bl	800e860 <HAL_I2C_AddrCallback>
 800f6fe:	e017      	b.n	800f730 <I2C_ITAddrCplt+0x100>
 800f700:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 fff3 	bl	80106f0 <I2C_Disable_IRQ>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2200      	movs	r2, #0
 800f70e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f712:	89ba      	ldrh	r2, [r7, #12]
 800f714:	7bfb      	ldrb	r3, [r7, #15]
 800f716:	4619      	mov	r1, r3
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f7ff f8a1 	bl	800e860 <HAL_I2C_AddrCallback>
 800f71e:	e007      	b.n	800f730 <I2C_ITAddrCplt+0x100>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2208      	movs	r2, #8
 800f726:	61da      	str	r2, [r3, #28]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2200      	movs	r2, #0
 800f72c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f730:	bf00      	nop
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <I2C_ITMasterSeqCplt>:
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f74e:	b2db      	uxtb	r3, r3
 800f750:	2b21      	cmp	r3, #33	@ 0x21
 800f752:	d115      	bne.n	800f780 <I2C_ITMasterSeqCplt+0x48>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2220      	movs	r2, #32
 800f758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2211      	movs	r2, #17
 800f760:	631a      	str	r2, [r3, #48]	@ 0x30
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	635a      	str	r2, [r3, #52]	@ 0x34
 800f768:	2101      	movs	r1, #1
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 ffc0 	bl	80106f0 <I2C_Disable_IRQ>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f7ff f849 	bl	800e810 <HAL_I2C_MasterTxCpltCallback>
 800f77e:	e014      	b.n	800f7aa <I2C_ITMasterSeqCplt+0x72>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2220      	movs	r2, #32
 800f784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2212      	movs	r2, #18
 800f78c:	631a      	str	r2, [r3, #48]	@ 0x30
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2200      	movs	r2, #0
 800f792:	635a      	str	r2, [r3, #52]	@ 0x34
 800f794:	2102      	movs	r1, #2
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 ffaa 	bl	80106f0 <I2C_Disable_IRQ>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f7ff f83d 	bl	800e824 <HAL_I2C_MasterRxCpltCallback>
 800f7aa:	bf00      	nop
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <I2C_ITSlaveSeqCplt>:
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b084      	sub	sp, #16
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	60fb      	str	r3, [r7, #12]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d008      	beq.n	800f7e6 <I2C_ITSlaveSeqCplt+0x34>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f7e2:	601a      	str	r2, [r3, #0]
 800f7e4:	e00c      	b.n	800f800 <I2C_ITSlaveSeqCplt+0x4e>
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d007      	beq.n	800f800 <I2C_ITSlaveSeqCplt+0x4e>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f7fe:	601a      	str	r2, [r3, #0]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f806:	b2db      	uxtb	r3, r3
 800f808:	2b29      	cmp	r3, #41	@ 0x29
 800f80a:	d112      	bne.n	800f832 <I2C_ITSlaveSeqCplt+0x80>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2228      	movs	r2, #40	@ 0x28
 800f810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2221      	movs	r2, #33	@ 0x21
 800f818:	631a      	str	r2, [r3, #48]	@ 0x30
 800f81a:	2101      	movs	r1, #1
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 ff67 	bl	80106f0 <I2C_Disable_IRQ>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f7ff f804 	bl	800e838 <HAL_I2C_SlaveTxCpltCallback>
 800f830:	e017      	b.n	800f862 <I2C_ITSlaveSeqCplt+0xb0>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f83c:	d111      	bne.n	800f862 <I2C_ITSlaveSeqCplt+0xb0>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2228      	movs	r2, #40	@ 0x28
 800f842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2222      	movs	r2, #34	@ 0x22
 800f84a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f84c:	2102      	movs	r1, #2
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 ff4e 	bl	80106f0 <I2C_Disable_IRQ>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f7fe fff5 	bl	800e84c <HAL_I2C_SlaveRxCpltCallback>
 800f862:	bf00      	nop
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
	...

0800f86c <I2C_ITMasterCplt>:
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b086      	sub	sp, #24
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	617b      	str	r3, [r7, #20]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2220      	movs	r2, #32
 800f880:	61da      	str	r2, [r3, #28]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	2b21      	cmp	r3, #33	@ 0x21
 800f88c:	d107      	bne.n	800f89e <I2C_ITMasterCplt+0x32>
 800f88e:	2101      	movs	r1, #1
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 ff2d 	bl	80106f0 <I2C_Disable_IRQ>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2211      	movs	r2, #17
 800f89a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f89c:	e00c      	b.n	800f8b8 <I2C_ITMasterCplt+0x4c>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	2b22      	cmp	r3, #34	@ 0x22
 800f8a8:	d106      	bne.n	800f8b8 <I2C_ITMasterCplt+0x4c>
 800f8aa:	2102      	movs	r1, #2
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f000 ff1f 	bl	80106f0 <I2C_Disable_IRQ>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2212      	movs	r2, #18
 800f8b6:	631a      	str	r2, [r3, #48]	@ 0x30
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	6859      	ldr	r1, [r3, #4]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	4b4c      	ldr	r3, [pc, #304]	@ (800f9f4 <I2C_ITMasterCplt+0x188>)
 800f8c4:	400b      	ands	r3, r1
 800f8c6:	6053      	str	r3, [r2, #4]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	635a      	str	r2, [r3, #52]	@ 0x34
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4a49      	ldr	r2, [pc, #292]	@ (800f9f8 <I2C_ITMasterCplt+0x18c>)
 800f8d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	f003 0310 	and.w	r3, r3, #16
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d009      	beq.n	800f8f2 <I2C_ITMasterCplt+0x86>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	2210      	movs	r2, #16
 800f8e4:	61da      	str	r2, [r3, #28]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8ea:	f043 0204 	orr.w	r2, r3, #4
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	645a      	str	r2, [r3, #68]	@ 0x44
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	2b60      	cmp	r3, #96	@ 0x60
 800f8fc:	d10a      	bne.n	800f914 <I2C_ITMasterCplt+0xa8>
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	f003 0304 	and.w	r3, r3, #4
 800f904:	2b00      	cmp	r3, #0
 800f906:	d005      	beq.n	800f914 <I2C_ITMasterCplt+0xa8>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f90e:	b2db      	uxtb	r3, r3
 800f910:	60fb      	str	r3, [r7, #12]
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f000 fc30 	bl	801017a <I2C_Flush_TXDR>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f91e:	613b      	str	r3, [r7, #16]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f926:	b2db      	uxtb	r3, r3
 800f928:	2b60      	cmp	r3, #96	@ 0x60
 800f92a:	d002      	beq.n	800f932 <I2C_ITMasterCplt+0xc6>
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d006      	beq.n	800f940 <I2C_ITMasterCplt+0xd4>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f936:	4619      	mov	r1, r3
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 fb07 	bl	800ff4c <I2C_ITError>
 800f93e:	e054      	b.n	800f9ea <I2C_ITMasterCplt+0x17e>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f946:	b2db      	uxtb	r3, r3
 800f948:	2b21      	cmp	r3, #33	@ 0x21
 800f94a:	d124      	bne.n	800f996 <I2C_ITMasterCplt+0x12a>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2220      	movs	r2, #32
 800f950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2200      	movs	r2, #0
 800f958:	631a      	str	r2, [r3, #48]	@ 0x30
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f960:	b2db      	uxtb	r3, r3
 800f962:	2b40      	cmp	r3, #64	@ 0x40
 800f964:	d10b      	bne.n	800f97e <I2C_ITMasterCplt+0x112>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2200      	movs	r2, #0
 800f96a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7fe ff8a 	bl	800e890 <HAL_I2C_MemTxCpltCallback>
 800f97c:	e035      	b.n	800f9ea <I2C_ITMasterCplt+0x17e>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2200      	movs	r2, #0
 800f982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2200      	movs	r2, #0
 800f98a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f7fe ff3e 	bl	800e810 <HAL_I2C_MasterTxCpltCallback>
 800f994:	e029      	b.n	800f9ea <I2C_ITMasterCplt+0x17e>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	2b22      	cmp	r3, #34	@ 0x22
 800f9a0:	d123      	bne.n	800f9ea <I2C_ITMasterCplt+0x17e>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2220      	movs	r2, #32
 800f9a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	631a      	str	r2, [r3, #48]	@ 0x30
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	2b40      	cmp	r3, #64	@ 0x40
 800f9ba:	d10b      	bne.n	800f9d4 <I2C_ITMasterCplt+0x168>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7f6 fc7b 	bl	80062c8 <HAL_I2C_MemRxCpltCallback>
 800f9d2:	e00a      	b.n	800f9ea <I2C_ITMasterCplt+0x17e>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7fe ff1d 	bl	800e824 <HAL_I2C_MasterRxCpltCallback>
 800f9ea:	bf00      	nop
 800f9ec:	3718      	adds	r7, #24
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	fe00e800 	.word	0xfe00e800
 800f9f8:	ffff0000 	.word	0xffff0000

0800f9fc <I2C_ITSlaveCplt>:
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b086      	sub	sp, #24
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	613b      	str	r3, [r7, #16]
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	617b      	str	r3, [r7, #20]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa16:	60fb      	str	r3, [r7, #12]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa1e:	72fb      	strb	r3, [r7, #11]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	2220      	movs	r2, #32
 800fa26:	61da      	str	r2, [r3, #28]
 800fa28:	7afb      	ldrb	r3, [r7, #11]
 800fa2a:	2b21      	cmp	r3, #33	@ 0x21
 800fa2c:	d002      	beq.n	800fa34 <I2C_ITSlaveCplt+0x38>
 800fa2e:	7afb      	ldrb	r3, [r7, #11]
 800fa30:	2b29      	cmp	r3, #41	@ 0x29
 800fa32:	d108      	bne.n	800fa46 <I2C_ITSlaveCplt+0x4a>
 800fa34:	f248 0101 	movw	r1, #32769	@ 0x8001
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 fe59 	bl	80106f0 <I2C_Disable_IRQ>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2221      	movs	r2, #33	@ 0x21
 800fa42:	631a      	str	r2, [r3, #48]	@ 0x30
 800fa44:	e019      	b.n	800fa7a <I2C_ITSlaveCplt+0x7e>
 800fa46:	7afb      	ldrb	r3, [r7, #11]
 800fa48:	2b22      	cmp	r3, #34	@ 0x22
 800fa4a:	d002      	beq.n	800fa52 <I2C_ITSlaveCplt+0x56>
 800fa4c:	7afb      	ldrb	r3, [r7, #11]
 800fa4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa50:	d108      	bne.n	800fa64 <I2C_ITSlaveCplt+0x68>
 800fa52:	f248 0102 	movw	r1, #32770	@ 0x8002
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f000 fe4a 	bl	80106f0 <I2C_Disable_IRQ>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2222      	movs	r2, #34	@ 0x22
 800fa60:	631a      	str	r2, [r3, #48]	@ 0x30
 800fa62:	e00a      	b.n	800fa7a <I2C_ITSlaveCplt+0x7e>
 800fa64:	7afb      	ldrb	r3, [r7, #11]
 800fa66:	2b28      	cmp	r3, #40	@ 0x28
 800fa68:	d107      	bne.n	800fa7a <I2C_ITSlaveCplt+0x7e>
 800fa6a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 fe3e 	bl	80106f0 <I2C_Disable_IRQ>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2200      	movs	r2, #0
 800fa78:	631a      	str	r2, [r3, #48]	@ 0x30
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	685a      	ldr	r2, [r3, #4]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fa88:	605a      	str	r2, [r3, #4]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	6859      	ldr	r1, [r3, #4]
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681a      	ldr	r2, [r3, #0]
 800fa94:	4b7f      	ldr	r3, [pc, #508]	@ (800fc94 <I2C_ITSlaveCplt+0x298>)
 800fa96:	400b      	ands	r3, r1
 800fa98:	6053      	str	r3, [r2, #4]
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f000 fb6d 	bl	801017a <I2C_Flush_TXDR>
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d07a      	beq.n	800fba0 <I2C_ITSlaveCplt+0x1a4>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800fab8:	601a      	str	r2, [r3, #0]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f000 8111 	beq.w	800fce6 <I2C_ITSlaveCplt+0x2ea>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4a73      	ldr	r2, [pc, #460]	@ (800fc98 <I2C_ITSlaveCplt+0x29c>)
 800facc:	4293      	cmp	r3, r2
 800face:	d059      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	4a71      	ldr	r2, [pc, #452]	@ (800fc9c <I2C_ITSlaveCplt+0x2a0>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d053      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	4a6f      	ldr	r2, [pc, #444]	@ (800fca0 <I2C_ITSlaveCplt+0x2a4>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d04d      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4a6d      	ldr	r2, [pc, #436]	@ (800fca4 <I2C_ITSlaveCplt+0x2a8>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d047      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4a6b      	ldr	r2, [pc, #428]	@ (800fca8 <I2C_ITSlaveCplt+0x2ac>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d041      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	4a69      	ldr	r2, [pc, #420]	@ (800fcac <I2C_ITSlaveCplt+0x2b0>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d03b      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	4a67      	ldr	r2, [pc, #412]	@ (800fcb0 <I2C_ITSlaveCplt+0x2b4>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d035      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	4a65      	ldr	r2, [pc, #404]	@ (800fcb4 <I2C_ITSlaveCplt+0x2b8>)
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d02f      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	4a63      	ldr	r2, [pc, #396]	@ (800fcb8 <I2C_ITSlaveCplt+0x2bc>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d029      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	4a61      	ldr	r2, [pc, #388]	@ (800fcbc <I2C_ITSlaveCplt+0x2c0>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d023      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4a5f      	ldr	r2, [pc, #380]	@ (800fcc0 <I2C_ITSlaveCplt+0x2c4>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d01d      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a5d      	ldr	r2, [pc, #372]	@ (800fcc4 <I2C_ITSlaveCplt+0x2c8>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d017      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4a5b      	ldr	r2, [pc, #364]	@ (800fcc8 <I2C_ITSlaveCplt+0x2cc>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d011      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	4a59      	ldr	r2, [pc, #356]	@ (800fccc <I2C_ITSlaveCplt+0x2d0>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d00b      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	4a57      	ldr	r2, [pc, #348]	@ (800fcd0 <I2C_ITSlaveCplt+0x2d4>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d005      	beq.n	800fb84 <I2C_ITSlaveCplt+0x188>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a55      	ldr	r2, [pc, #340]	@ (800fcd4 <I2C_ITSlaveCplt+0x2d8>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d105      	bne.n	800fb90 <I2C_ITSlaveCplt+0x194>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	e004      	b.n	800fb9a <I2C_ITSlaveCplt+0x19e>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800fb9e:	e0a2      	b.n	800fce6 <I2C_ITSlaveCplt+0x2ea>
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	f000 809d 	beq.w	800fce6 <I2C_ITSlaveCplt+0x2ea>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fbba:	601a      	str	r2, [r3, #0]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	f000 8090 	beq.w	800fce6 <I2C_ITSlaveCplt+0x2ea>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4a32      	ldr	r2, [pc, #200]	@ (800fc98 <I2C_ITSlaveCplt+0x29c>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d059      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a30      	ldr	r2, [pc, #192]	@ (800fc9c <I2C_ITSlaveCplt+0x2a0>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d053      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	4a2e      	ldr	r2, [pc, #184]	@ (800fca0 <I2C_ITSlaveCplt+0x2a4>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d04d      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4a2c      	ldr	r2, [pc, #176]	@ (800fca4 <I2C_ITSlaveCplt+0x2a8>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d047      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a2a      	ldr	r2, [pc, #168]	@ (800fca8 <I2C_ITSlaveCplt+0x2ac>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d041      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4a28      	ldr	r2, [pc, #160]	@ (800fcac <I2C_ITSlaveCplt+0x2b0>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d03b      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4a26      	ldr	r2, [pc, #152]	@ (800fcb0 <I2C_ITSlaveCplt+0x2b4>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d035      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a24      	ldr	r2, [pc, #144]	@ (800fcb4 <I2C_ITSlaveCplt+0x2b8>)
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d02f      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4a22      	ldr	r2, [pc, #136]	@ (800fcb8 <I2C_ITSlaveCplt+0x2bc>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d029      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4a20      	ldr	r2, [pc, #128]	@ (800fcbc <I2C_ITSlaveCplt+0x2c0>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d023      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	4a1e      	ldr	r2, [pc, #120]	@ (800fcc0 <I2C_ITSlaveCplt+0x2c4>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d01d      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	4a1c      	ldr	r2, [pc, #112]	@ (800fcc4 <I2C_ITSlaveCplt+0x2c8>)
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d017      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4a1a      	ldr	r2, [pc, #104]	@ (800fcc8 <I2C_ITSlaveCplt+0x2cc>)
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d011      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4a18      	ldr	r2, [pc, #96]	@ (800fccc <I2C_ITSlaveCplt+0x2d0>)
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	d00b      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	4a16      	ldr	r2, [pc, #88]	@ (800fcd0 <I2C_ITSlaveCplt+0x2d4>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d005      	beq.n	800fc86 <I2C_ITSlaveCplt+0x28a>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a14      	ldr	r2, [pc, #80]	@ (800fcd4 <I2C_ITSlaveCplt+0x2d8>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d128      	bne.n	800fcd8 <I2C_ITSlaveCplt+0x2dc>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	e027      	b.n	800fce2 <I2C_ITSlaveCplt+0x2e6>
 800fc92:	bf00      	nop
 800fc94:	fe00e800 	.word	0xfe00e800
 800fc98:	40020010 	.word	0x40020010
 800fc9c:	40020028 	.word	0x40020028
 800fca0:	40020040 	.word	0x40020040
 800fca4:	40020058 	.word	0x40020058
 800fca8:	40020070 	.word	0x40020070
 800fcac:	40020088 	.word	0x40020088
 800fcb0:	400200a0 	.word	0x400200a0
 800fcb4:	400200b8 	.word	0x400200b8
 800fcb8:	40020410 	.word	0x40020410
 800fcbc:	40020428 	.word	0x40020428
 800fcc0:	40020440 	.word	0x40020440
 800fcc4:	40020458 	.word	0x40020458
 800fcc8:	40020470 	.word	0x40020470
 800fccc:	40020488 	.word	0x40020488
 800fcd0:	400204a0 	.word	0x400204a0
 800fcd4:	400204b8 	.word	0x400204b8
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	687a      	ldr	r2, [r7, #4]
 800fce4:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	f003 0304 	and.w	r3, r3, #4
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d020      	beq.n	800fd32 <I2C_ITSlaveCplt+0x336>
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	f023 0304 	bic.w	r3, r3, #4
 800fcf6:	617b      	str	r3, [r7, #20]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd02:	b2d2      	uxtb	r2, r2
 800fd04:	701a      	strb	r2, [r3, #0]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd0a:	1c5a      	adds	r2, r3, #1
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	625a      	str	r2, [r3, #36]	@ 0x24
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d00c      	beq.n	800fd32 <I2C_ITSlaveCplt+0x336>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd1c:	3b01      	subs	r3, #1
 800fd1e:	b29a      	uxth	r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	851a      	strh	r2, [r3, #40]	@ 0x28
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	3b01      	subs	r3, #1
 800fd2c:	b29a      	uxth	r2, r3
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d005      	beq.n	800fd48 <I2C_ITSlaveCplt+0x34c>
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd40:	f043 0204 	orr.w	r2, r3, #4
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	645a      	str	r2, [r3, #68]	@ 0x44
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	f003 0310 	and.w	r3, r3, #16
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d049      	beq.n	800fde6 <I2C_ITSlaveCplt+0x3ea>
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	f003 0310 	and.w	r3, r3, #16
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d044      	beq.n	800fde6 <I2C_ITSlaveCplt+0x3ea>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d128      	bne.n	800fdb8 <I2C_ITSlaveCplt+0x3bc>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	2b28      	cmp	r3, #40	@ 0x28
 800fd70:	d108      	bne.n	800fd84 <I2C_ITSlaveCplt+0x388>
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fd78:	d104      	bne.n	800fd84 <I2C_ITSlaveCplt+0x388>
 800fd7a:	6979      	ldr	r1, [r7, #20]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f000 f891 	bl	800fea4 <I2C_ITListenCplt>
 800fd82:	e030      	b.n	800fde6 <I2C_ITSlaveCplt+0x3ea>
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd8a:	b2db      	uxtb	r3, r3
 800fd8c:	2b29      	cmp	r3, #41	@ 0x29
 800fd8e:	d10e      	bne.n	800fdae <I2C_ITSlaveCplt+0x3b2>
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fd96:	d00a      	beq.n	800fdae <I2C_ITSlaveCplt+0x3b2>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	2210      	movs	r2, #16
 800fd9e:	61da      	str	r2, [r3, #28]
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 f9ea 	bl	801017a <I2C_Flush_TXDR>
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7ff fd03 	bl	800f7b2 <I2C_ITSlaveSeqCplt>
 800fdac:	e01b      	b.n	800fde6 <I2C_ITSlaveCplt+0x3ea>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2210      	movs	r2, #16
 800fdb4:	61da      	str	r2, [r3, #28]
 800fdb6:	e016      	b.n	800fde6 <I2C_ITSlaveCplt+0x3ea>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2210      	movs	r2, #16
 800fdbe:	61da      	str	r2, [r3, #28]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdc4:	f043 0204 	orr.w	r2, r3, #4
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	645a      	str	r2, [r3, #68]	@ 0x44
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d003      	beq.n	800fdda <I2C_ITSlaveCplt+0x3de>
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fdd8:	d105      	bne.n	800fde6 <I2C_ITSlaveCplt+0x3ea>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdde:	4619      	mov	r1, r3
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f000 f8b3 	bl	800ff4c <I2C_ITError>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	635a      	str	r2, [r3, #52]	@ 0x34
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d010      	beq.n	800fe1e <I2C_ITSlaveCplt+0x422>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe00:	4619      	mov	r1, r3
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 f8a2 	bl	800ff4c <I2C_ITError>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	2b28      	cmp	r3, #40	@ 0x28
 800fe12:	d141      	bne.n	800fe98 <I2C_ITSlaveCplt+0x49c>
 800fe14:	6979      	ldr	r1, [r7, #20]
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 f844 	bl	800fea4 <I2C_ITListenCplt>
 800fe1c:	e03c      	b.n	800fe98 <I2C_ITSlaveCplt+0x49c>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800fe26:	d014      	beq.n	800fe52 <I2C_ITSlaveCplt+0x456>
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f7ff fcc2 	bl	800f7b2 <I2C_ITSlaveSeqCplt>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4a1b      	ldr	r2, [pc, #108]	@ (800fea0 <I2C_ITSlaveCplt+0x4a4>)
 800fe32:	62da      	str	r2, [r3, #44]	@ 0x2c
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2220      	movs	r2, #32
 800fe38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	631a      	str	r2, [r3, #48]	@ 0x30
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2200      	movs	r2, #0
 800fe46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7fe fd16 	bl	800e87c <HAL_I2C_ListenCpltCallback>
 800fe50:	e022      	b.n	800fe98 <I2C_ITSlaveCplt+0x49c>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	2b22      	cmp	r3, #34	@ 0x22
 800fe5c:	d10e      	bne.n	800fe7c <I2C_ITSlaveCplt+0x480>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2220      	movs	r2, #32
 800fe62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	631a      	str	r2, [r3, #48]	@ 0x30
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f7fe fce9 	bl	800e84c <HAL_I2C_SlaveRxCpltCallback>
 800fe7a:	e00d      	b.n	800fe98 <I2C_ITSlaveCplt+0x49c>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2220      	movs	r2, #32
 800fe80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	631a      	str	r2, [r3, #48]	@ 0x30
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7fe fcd0 	bl	800e838 <HAL_I2C_SlaveTxCpltCallback>
 800fe98:	bf00      	nop
 800fe9a:	3718      	adds	r7, #24
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}
 800fea0:	ffff0000 	.word	0xffff0000

0800fea4 <I2C_ITListenCplt>:
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6039      	str	r1, [r7, #0]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4a25      	ldr	r2, [pc, #148]	@ (800ff48 <I2C_ITListenCplt+0xa4>)
 800feb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	631a      	str	r2, [r3, #48]	@ 0x30
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2220      	movs	r2, #32
 800febe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2200      	movs	r2, #0
 800fec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	635a      	str	r2, [r3, #52]	@ 0x34
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	f003 0304 	and.w	r3, r3, #4
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d022      	beq.n	800ff20 <I2C_ITListenCplt+0x7c>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fee4:	b2d2      	uxtb	r2, r2
 800fee6:	701a      	strb	r2, [r3, #0]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feec:	1c5a      	adds	r2, r3, #1
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	625a      	str	r2, [r3, #36]	@ 0x24
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d012      	beq.n	800ff20 <I2C_ITListenCplt+0x7c>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fefe:	3b01      	subs	r3, #1
 800ff00:	b29a      	uxth	r2, r3
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	3b01      	subs	r3, #1
 800ff0e:	b29a      	uxth	r2, r3
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff18:	f043 0204 	orr.w	r2, r3, #4
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	645a      	str	r2, [r3, #68]	@ 0x44
 800ff20:	f248 0103 	movw	r1, #32771	@ 0x8003
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 fbe3 	bl	80106f0 <I2C_Disable_IRQ>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2210      	movs	r2, #16
 800ff30:	61da      	str	r2, [r3, #28]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2200      	movs	r2, #0
 800ff36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f7fe fc9e 	bl	800e87c <HAL_I2C_ListenCpltCallback>
 800ff40:	bf00      	nop
 800ff42:	3708      	adds	r7, #8
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	ffff0000 	.word	0xffff0000

0800ff4c <I2C_ITError>:
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ff5c:	73fb      	strb	r3, [r7, #15]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	4a6d      	ldr	r2, [pc, #436]	@ (8010120 <I2C_ITError+0x1d4>)
 800ff6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	431a      	orrs	r2, r3
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	645a      	str	r2, [r3, #68]	@ 0x44
 800ff7e:	7bfb      	ldrb	r3, [r7, #15]
 800ff80:	2b28      	cmp	r3, #40	@ 0x28
 800ff82:	d005      	beq.n	800ff90 <I2C_ITError+0x44>
 800ff84:	7bfb      	ldrb	r3, [r7, #15]
 800ff86:	2b29      	cmp	r3, #41	@ 0x29
 800ff88:	d002      	beq.n	800ff90 <I2C_ITError+0x44>
 800ff8a:	7bfb      	ldrb	r3, [r7, #15]
 800ff8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff8e:	d10b      	bne.n	800ffa8 <I2C_ITError+0x5c>
 800ff90:	2103      	movs	r1, #3
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f000 fbac 	bl	80106f0 <I2C_Disable_IRQ>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2228      	movs	r2, #40	@ 0x28
 800ff9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4a60      	ldr	r2, [pc, #384]	@ (8010124 <I2C_ITError+0x1d8>)
 800ffa4:	635a      	str	r2, [r3, #52]	@ 0x34
 800ffa6:	e030      	b.n	801000a <I2C_ITError+0xbe>
 800ffa8:	f248 0103 	movw	r1, #32771	@ 0x8003
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f000 fb9f 	bl	80106f0 <I2C_Disable_IRQ>
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 f8e1 	bl	801017a <I2C_Flush_TXDR>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	2b60      	cmp	r3, #96	@ 0x60
 800ffc2:	d01f      	beq.n	8010004 <I2C_ITError+0xb8>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2220      	movs	r2, #32
 800ffc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	699b      	ldr	r3, [r3, #24]
 800ffd2:	f003 0320 	and.w	r3, r3, #32
 800ffd6:	2b20      	cmp	r3, #32
 800ffd8:	d114      	bne.n	8010004 <I2C_ITError+0xb8>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	699b      	ldr	r3, [r3, #24]
 800ffe0:	f003 0310 	and.w	r3, r3, #16
 800ffe4:	2b10      	cmp	r3, #16
 800ffe6:	d109      	bne.n	800fffc <I2C_ITError+0xb0>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	2210      	movs	r2, #16
 800ffee:	61da      	str	r2, [r3, #28]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fff4:	f043 0204 	orr.w	r2, r3, #4
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	645a      	str	r2, [r3, #68]	@ 0x44
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2220      	movs	r2, #32
 8010002:	61da      	str	r2, [r3, #28]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2200      	movs	r2, #0
 8010008:	635a      	str	r2, [r3, #52]	@ 0x34
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801000e:	60bb      	str	r3, [r7, #8]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010014:	2b00      	cmp	r3, #0
 8010016:	d039      	beq.n	801008c <I2C_ITError+0x140>
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	2b11      	cmp	r3, #17
 801001c:	d002      	beq.n	8010024 <I2C_ITError+0xd8>
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	2b21      	cmp	r3, #33	@ 0x21
 8010022:	d133      	bne.n	801008c <I2C_ITError+0x140>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801002e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010032:	d107      	bne.n	8010044 <I2C_ITError+0xf8>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010042:	601a      	str	r2, [r3, #0]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010048:	4618      	mov	r0, r3
 801004a:	f7fd f9f7 	bl	800d43c <HAL_DMA_GetState>
 801004e:	4603      	mov	r3, r0
 8010050:	2b01      	cmp	r3, #1
 8010052:	d017      	beq.n	8010084 <I2C_ITError+0x138>
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010058:	4a33      	ldr	r2, [pc, #204]	@ (8010128 <I2C_ITError+0x1dc>)
 801005a:	651a      	str	r2, [r3, #80]	@ 0x50
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010068:	4618      	mov	r0, r3
 801006a:	f7fc f877 	bl	800c15c <HAL_DMA_Abort_IT>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d04d      	beq.n	8010110 <I2C_ITError+0x1c4>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801007e:	4610      	mov	r0, r2
 8010080:	4798      	blx	r3
 8010082:	e045      	b.n	8010110 <I2C_ITError+0x1c4>
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 f851 	bl	801012c <I2C_TreatErrorCallback>
 801008a:	e041      	b.n	8010110 <I2C_ITError+0x1c4>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010090:	2b00      	cmp	r3, #0
 8010092:	d039      	beq.n	8010108 <I2C_ITError+0x1bc>
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	2b12      	cmp	r3, #18
 8010098:	d002      	beq.n	80100a0 <I2C_ITError+0x154>
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	2b22      	cmp	r3, #34	@ 0x22
 801009e:	d133      	bne.n	8010108 <I2C_ITError+0x1bc>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80100aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80100ae:	d107      	bne.n	80100c0 <I2C_ITError+0x174>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80100be:	601a      	str	r2, [r3, #0]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7fd f9b9 	bl	800d43c <HAL_DMA_GetState>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d017      	beq.n	8010100 <I2C_ITError+0x1b4>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100d4:	4a14      	ldr	r2, [pc, #80]	@ (8010128 <I2C_ITError+0x1dc>)
 80100d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2200      	movs	r2, #0
 80100dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fc f839 	bl	800c15c <HAL_DMA_Abort_IT>
 80100ea:	4603      	mov	r3, r0
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d011      	beq.n	8010114 <I2C_ITError+0x1c8>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100f6:	687a      	ldr	r2, [r7, #4]
 80100f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80100fa:	4610      	mov	r0, r2
 80100fc:	4798      	blx	r3
 80100fe:	e009      	b.n	8010114 <I2C_ITError+0x1c8>
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f000 f813 	bl	801012c <I2C_TreatErrorCallback>
 8010106:	e005      	b.n	8010114 <I2C_ITError+0x1c8>
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f000 f80f 	bl	801012c <I2C_TreatErrorCallback>
 801010e:	e002      	b.n	8010116 <I2C_ITError+0x1ca>
 8010110:	bf00      	nop
 8010112:	e000      	b.n	8010116 <I2C_ITError+0x1ca>
 8010114:	bf00      	nop
 8010116:	bf00      	nop
 8010118:	3710      	adds	r7, #16
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	ffff0000 	.word	0xffff0000
 8010124:	0800eb19 	.word	0x0800eb19
 8010128:	080101c3 	.word	0x080101c3

0801012c <I2C_TreatErrorCallback>:
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801013a:	b2db      	uxtb	r3, r3
 801013c:	2b60      	cmp	r3, #96	@ 0x60
 801013e:	d10e      	bne.n	801015e <I2C_TreatErrorCallback+0x32>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2220      	movs	r2, #32
 8010144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2200      	movs	r2, #0
 801014c:	631a      	str	r2, [r3, #48]	@ 0x30
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2200      	movs	r2, #0
 8010152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f7fe fbae 	bl	800e8b8 <HAL_I2C_AbortCpltCallback>
 801015c:	e009      	b.n	8010172 <I2C_TreatErrorCallback+0x46>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	631a      	str	r2, [r3, #48]	@ 0x30
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2200      	movs	r2, #0
 8010168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7fe fb99 	bl	800e8a4 <HAL_I2C_ErrorCallback>
 8010172:	bf00      	nop
 8010174:	3708      	adds	r7, #8
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <I2C_Flush_TXDR>:
 801017a:	b480      	push	{r7}
 801017c:	b083      	sub	sp, #12
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	699b      	ldr	r3, [r3, #24]
 8010188:	f003 0302 	and.w	r3, r3, #2
 801018c:	2b02      	cmp	r3, #2
 801018e:	d103      	bne.n	8010198 <I2C_Flush_TXDR+0x1e>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2200      	movs	r2, #0
 8010196:	629a      	str	r2, [r3, #40]	@ 0x28
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	699b      	ldr	r3, [r3, #24]
 801019e:	f003 0301 	and.w	r3, r3, #1
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d007      	beq.n	80101b6 <I2C_Flush_TXDR+0x3c>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	699a      	ldr	r2, [r3, #24]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f042 0201 	orr.w	r2, r2, #1
 80101b4:	619a      	str	r2, [r3, #24]
 80101b6:	bf00      	nop
 80101b8:	370c      	adds	r7, #12
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr

080101c2 <I2C_DMAAbort>:
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b084      	sub	sp, #16
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101ce:	60fb      	str	r3, [r7, #12]
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d003      	beq.n	80101e0 <I2C_DMAAbort+0x1e>
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101dc:	2200      	movs	r2, #0
 80101de:	651a      	str	r2, [r3, #80]	@ 0x50
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d003      	beq.n	80101f0 <I2C_DMAAbort+0x2e>
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101ec:	2200      	movs	r2, #0
 80101ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80101f0:	68f8      	ldr	r0, [r7, #12]
 80101f2:	f7ff ff9b 	bl	801012c <I2C_TreatErrorCallback>
 80101f6:	bf00      	nop
 80101f8:	3710      	adds	r7, #16
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <I2C_WaitOnFlagUntilTimeout>:
 80101fe:	b580      	push	{r7, lr}
 8010200:	b084      	sub	sp, #16
 8010202:	af00      	add	r7, sp, #0
 8010204:	60f8      	str	r0, [r7, #12]
 8010206:	60b9      	str	r1, [r7, #8]
 8010208:	603b      	str	r3, [r7, #0]
 801020a:	4613      	mov	r3, r2
 801020c:	71fb      	strb	r3, [r7, #7]
 801020e:	e03b      	b.n	8010288 <I2C_WaitOnFlagUntilTimeout+0x8a>
 8010210:	69ba      	ldr	r2, [r7, #24]
 8010212:	6839      	ldr	r1, [r7, #0]
 8010214:	68f8      	ldr	r0, [r7, #12]
 8010216:	f000 f8d5 	bl	80103c4 <I2C_IsErrorOccurred>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d001      	beq.n	8010224 <I2C_WaitOnFlagUntilTimeout+0x26>
 8010220:	2301      	movs	r3, #1
 8010222:	e041      	b.n	80102a8 <I2C_WaitOnFlagUntilTimeout+0xaa>
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801022a:	d02d      	beq.n	8010288 <I2C_WaitOnFlagUntilTimeout+0x8a>
 801022c:	f7f8 fd5e 	bl	8008cec <HAL_GetTick>
 8010230:	4602      	mov	r2, r0
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	683a      	ldr	r2, [r7, #0]
 8010238:	429a      	cmp	r2, r3
 801023a:	d302      	bcc.n	8010242 <I2C_WaitOnFlagUntilTimeout+0x44>
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d122      	bne.n	8010288 <I2C_WaitOnFlagUntilTimeout+0x8a>
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	699a      	ldr	r2, [r3, #24]
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	4013      	ands	r3, r2
 801024c:	68ba      	ldr	r2, [r7, #8]
 801024e:	429a      	cmp	r2, r3
 8010250:	bf0c      	ite	eq
 8010252:	2301      	moveq	r3, #1
 8010254:	2300      	movne	r3, #0
 8010256:	b2db      	uxtb	r3, r3
 8010258:	461a      	mov	r2, r3
 801025a:	79fb      	ldrb	r3, [r7, #7]
 801025c:	429a      	cmp	r2, r3
 801025e:	d113      	bne.n	8010288 <I2C_WaitOnFlagUntilTimeout+0x8a>
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010264:	f043 0220 	orr.w	r2, r3, #32
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	645a      	str	r2, [r3, #68]	@ 0x44
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2220      	movs	r2, #32
 8010270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2200      	movs	r2, #0
 8010278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2200      	movs	r2, #0
 8010280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010284:	2301      	movs	r3, #1
 8010286:	e00f      	b.n	80102a8 <I2C_WaitOnFlagUntilTimeout+0xaa>
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	699a      	ldr	r2, [r3, #24]
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	4013      	ands	r3, r2
 8010292:	68ba      	ldr	r2, [r7, #8]
 8010294:	429a      	cmp	r2, r3
 8010296:	bf0c      	ite	eq
 8010298:	2301      	moveq	r3, #1
 801029a:	2300      	movne	r3, #0
 801029c:	b2db      	uxtb	r3, r3
 801029e:	461a      	mov	r2, r3
 80102a0:	79fb      	ldrb	r3, [r7, #7]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d0b4      	beq.n	8010210 <I2C_WaitOnFlagUntilTimeout+0x12>
 80102a6:	2300      	movs	r3, #0
 80102a8:	4618      	mov	r0, r3
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <I2C_WaitOnTXISFlagUntilTimeout>:
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
 80102bc:	e033      	b.n	8010326 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	68b9      	ldr	r1, [r7, #8]
 80102c2:	68f8      	ldr	r0, [r7, #12]
 80102c4:	f000 f87e 	bl	80103c4 <I2C_IsErrorOccurred>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 80102ce:	2301      	movs	r3, #1
 80102d0:	e031      	b.n	8010336 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d8:	d025      	beq.n	8010326 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80102da:	f7f8 fd07 	bl	8008cec <HAL_GetTick>
 80102de:	4602      	mov	r2, r0
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	1ad3      	subs	r3, r2, r3
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d302      	bcc.n	80102f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d11a      	bne.n	8010326 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	699b      	ldr	r3, [r3, #24]
 80102f6:	f003 0302 	and.w	r3, r3, #2
 80102fa:	2b02      	cmp	r3, #2
 80102fc:	d013      	beq.n	8010326 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010302:	f043 0220 	orr.w	r2, r3, #32
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	645a      	str	r2, [r3, #68]	@ 0x44
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2220      	movs	r2, #32
 801030e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	2200      	movs	r2, #0
 8010316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2200      	movs	r2, #0
 801031e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010322:	2301      	movs	r3, #1
 8010324:	e007      	b.n	8010336 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	699b      	ldr	r3, [r3, #24]
 801032c:	f003 0302 	and.w	r3, r3, #2
 8010330:	2b02      	cmp	r3, #2
 8010332:	d1c4      	bne.n	80102be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8010334:	2300      	movs	r3, #0
 8010336:	4618      	mov	r0, r3
 8010338:	3710      	adds	r7, #16
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}

0801033e <I2C_WaitOnSTOPFlagUntilTimeout>:
 801033e:	b580      	push	{r7, lr}
 8010340:	b084      	sub	sp, #16
 8010342:	af00      	add	r7, sp, #0
 8010344:	60f8      	str	r0, [r7, #12]
 8010346:	60b9      	str	r1, [r7, #8]
 8010348:	607a      	str	r2, [r7, #4]
 801034a:	e02f      	b.n	80103ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	68b9      	ldr	r1, [r7, #8]
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f000 f837 	bl	80103c4 <I2C_IsErrorOccurred>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d001      	beq.n	8010360 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 801035c:	2301      	movs	r3, #1
 801035e:	e02d      	b.n	80103bc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8010360:	f7f8 fcc4 	bl	8008cec <HAL_GetTick>
 8010364:	4602      	mov	r2, r0
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	1ad3      	subs	r3, r2, r3
 801036a:	68ba      	ldr	r2, [r7, #8]
 801036c:	429a      	cmp	r2, r3
 801036e:	d302      	bcc.n	8010376 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d11a      	bne.n	80103ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	699b      	ldr	r3, [r3, #24]
 801037c:	f003 0320 	and.w	r3, r3, #32
 8010380:	2b20      	cmp	r3, #32
 8010382:	d013      	beq.n	80103ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010388:	f043 0220 	orr.w	r2, r3, #32
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	645a      	str	r2, [r3, #68]	@ 0x44
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2220      	movs	r2, #32
 8010394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2200      	movs	r2, #0
 801039c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2200      	movs	r2, #0
 80103a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80103a8:	2301      	movs	r3, #1
 80103aa:	e007      	b.n	80103bc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	699b      	ldr	r3, [r3, #24]
 80103b2:	f003 0320 	and.w	r3, r3, #32
 80103b6:	2b20      	cmp	r3, #32
 80103b8:	d1c8      	bne.n	801034c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 80103ba:	2300      	movs	r3, #0
 80103bc:	4618      	mov	r0, r3
 80103be:	3710      	adds	r7, #16
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <I2C_IsErrorOccurred>:
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b08a      	sub	sp, #40	@ 0x28
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	607a      	str	r2, [r7, #4]
 80103d0:	2300      	movs	r3, #0
 80103d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	699b      	ldr	r3, [r3, #24]
 80103dc:	61bb      	str	r3, [r7, #24]
 80103de:	2300      	movs	r3, #0
 80103e0:	623b      	str	r3, [r7, #32]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	61fb      	str	r3, [r7, #28]
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	f003 0310 	and.w	r3, r3, #16
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d068      	beq.n	80104c2 <I2C_IsErrorOccurred+0xfe>
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2210      	movs	r2, #16
 80103f6:	61da      	str	r2, [r3, #28]
 80103f8:	e049      	b.n	801048e <I2C_IsErrorOccurred+0xca>
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010400:	d045      	beq.n	801048e <I2C_IsErrorOccurred+0xca>
 8010402:	f7f8 fc73 	bl	8008cec <HAL_GetTick>
 8010406:	4602      	mov	r2, r0
 8010408:	69fb      	ldr	r3, [r7, #28]
 801040a:	1ad3      	subs	r3, r2, r3
 801040c:	68ba      	ldr	r2, [r7, #8]
 801040e:	429a      	cmp	r2, r3
 8010410:	d302      	bcc.n	8010418 <I2C_IsErrorOccurred+0x54>
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d13a      	bne.n	801048e <I2C_IsErrorOccurred+0xca>
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	685b      	ldr	r3, [r3, #4]
 801041e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010422:	617b      	str	r3, [r7, #20]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801042a:	74fb      	strb	r3, [r7, #19]
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	699b      	ldr	r3, [r3, #24]
 8010432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801043a:	d121      	bne.n	8010480 <I2C_IsErrorOccurred+0xbc>
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010442:	d01d      	beq.n	8010480 <I2C_IsErrorOccurred+0xbc>
 8010444:	7cfb      	ldrb	r3, [r7, #19]
 8010446:	2b20      	cmp	r3, #32
 8010448:	d01a      	beq.n	8010480 <I2C_IsErrorOccurred+0xbc>
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	685a      	ldr	r2, [r3, #4]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010458:	605a      	str	r2, [r3, #4]
 801045a:	f7f8 fc47 	bl	8008cec <HAL_GetTick>
 801045e:	61f8      	str	r0, [r7, #28]
 8010460:	e00e      	b.n	8010480 <I2C_IsErrorOccurred+0xbc>
 8010462:	f7f8 fc43 	bl	8008cec <HAL_GetTick>
 8010466:	4602      	mov	r2, r0
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	2b19      	cmp	r3, #25
 801046e:	d907      	bls.n	8010480 <I2C_IsErrorOccurred+0xbc>
 8010470:	6a3b      	ldr	r3, [r7, #32]
 8010472:	f043 0320 	orr.w	r3, r3, #32
 8010476:	623b      	str	r3, [r7, #32]
 8010478:	2301      	movs	r3, #1
 801047a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801047e:	e006      	b.n	801048e <I2C_IsErrorOccurred+0xca>
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	699b      	ldr	r3, [r3, #24]
 8010486:	f003 0320 	and.w	r3, r3, #32
 801048a:	2b20      	cmp	r3, #32
 801048c:	d1e9      	bne.n	8010462 <I2C_IsErrorOccurred+0x9e>
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	699b      	ldr	r3, [r3, #24]
 8010494:	f003 0320 	and.w	r3, r3, #32
 8010498:	2b20      	cmp	r3, #32
 801049a:	d003      	beq.n	80104a4 <I2C_IsErrorOccurred+0xe0>
 801049c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d0aa      	beq.n	80103fa <I2C_IsErrorOccurred+0x36>
 80104a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d103      	bne.n	80104b4 <I2C_IsErrorOccurred+0xf0>
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2220      	movs	r2, #32
 80104b2:	61da      	str	r2, [r3, #28]
 80104b4:	6a3b      	ldr	r3, [r7, #32]
 80104b6:	f043 0304 	orr.w	r3, r3, #4
 80104ba:	623b      	str	r3, [r7, #32]
 80104bc:	2301      	movs	r3, #1
 80104be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	699b      	ldr	r3, [r3, #24]
 80104c8:	61bb      	str	r3, [r7, #24]
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d00b      	beq.n	80104ec <I2C_IsErrorOccurred+0x128>
 80104d4:	6a3b      	ldr	r3, [r7, #32]
 80104d6:	f043 0301 	orr.w	r3, r3, #1
 80104da:	623b      	str	r3, [r7, #32]
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80104e4:	61da      	str	r2, [r3, #28]
 80104e6:	2301      	movs	r3, #1
 80104e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80104ec:	69bb      	ldr	r3, [r7, #24]
 80104ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d00b      	beq.n	801050e <I2C_IsErrorOccurred+0x14a>
 80104f6:	6a3b      	ldr	r3, [r7, #32]
 80104f8:	f043 0308 	orr.w	r3, r3, #8
 80104fc:	623b      	str	r3, [r7, #32]
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010506:	61da      	str	r2, [r3, #28]
 8010508:	2301      	movs	r3, #1
 801050a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801050e:	69bb      	ldr	r3, [r7, #24]
 8010510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010514:	2b00      	cmp	r3, #0
 8010516:	d00b      	beq.n	8010530 <I2C_IsErrorOccurred+0x16c>
 8010518:	6a3b      	ldr	r3, [r7, #32]
 801051a:	f043 0302 	orr.w	r3, r3, #2
 801051e:	623b      	str	r3, [r7, #32]
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010528:	61da      	str	r2, [r3, #28]
 801052a:	2301      	movs	r3, #1
 801052c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010534:	2b00      	cmp	r3, #0
 8010536:	d01c      	beq.n	8010572 <I2C_IsErrorOccurred+0x1ae>
 8010538:	68f8      	ldr	r0, [r7, #12]
 801053a:	f7ff fe1e 	bl	801017a <I2C_Flush_TXDR>
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	6859      	ldr	r1, [r3, #4]
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	4b0d      	ldr	r3, [pc, #52]	@ (8010580 <I2C_IsErrorOccurred+0x1bc>)
 801054a:	400b      	ands	r3, r1
 801054c:	6053      	str	r3, [r2, #4]
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010552:	6a3b      	ldr	r3, [r7, #32]
 8010554:	431a      	orrs	r2, r3
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	645a      	str	r2, [r3, #68]	@ 0x44
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2220      	movs	r2, #32
 801055e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2200      	movs	r2, #0
 8010566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	2200      	movs	r2, #0
 801056e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010572:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010576:	4618      	mov	r0, r3
 8010578:	3728      	adds	r7, #40	@ 0x28
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
 801057e:	bf00      	nop
 8010580:	fe00e800 	.word	0xfe00e800

08010584 <I2C_TransferConfig>:
 8010584:	b480      	push	{r7}
 8010586:	b087      	sub	sp, #28
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	607b      	str	r3, [r7, #4]
 801058e:	460b      	mov	r3, r1
 8010590:	817b      	strh	r3, [r7, #10]
 8010592:	4613      	mov	r3, r2
 8010594:	727b      	strb	r3, [r7, #9]
 8010596:	897b      	ldrh	r3, [r7, #10]
 8010598:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801059c:	7a7b      	ldrb	r3, [r7, #9]
 801059e:	041b      	lsls	r3, r3, #16
 80105a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80105a4:	431a      	orrs	r2, r3
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	431a      	orrs	r2, r3
 80105aa:	6a3b      	ldr	r3, [r7, #32]
 80105ac:	4313      	orrs	r3, r2
 80105ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80105b2:	617b      	str	r3, [r7, #20]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	685a      	ldr	r2, [r3, #4]
 80105ba:	6a3b      	ldr	r3, [r7, #32]
 80105bc:	0d5b      	lsrs	r3, r3, #21
 80105be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80105c2:	4b08      	ldr	r3, [pc, #32]	@ (80105e4 <I2C_TransferConfig+0x60>)
 80105c4:	430b      	orrs	r3, r1
 80105c6:	43db      	mvns	r3, r3
 80105c8:	ea02 0103 	and.w	r1, r2, r3
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	697a      	ldr	r2, [r7, #20]
 80105d2:	430a      	orrs	r2, r1
 80105d4:	605a      	str	r2, [r3, #4]
 80105d6:	bf00      	nop
 80105d8:	371c      	adds	r7, #28
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	03ff63ff 	.word	0x03ff63ff

080105e8 <I2C_Enable_IRQ>:
 80105e8:	b480      	push	{r7}
 80105ea:	b085      	sub	sp, #20
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	460b      	mov	r3, r1
 80105f2:	807b      	strh	r3, [r7, #2]
 80105f4:	2300      	movs	r3, #0
 80105f6:	60fb      	str	r3, [r7, #12]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105fc:	4a39      	ldr	r2, [pc, #228]	@ (80106e4 <I2C_Enable_IRQ+0xfc>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d032      	beq.n	8010668 <I2C_Enable_IRQ+0x80>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010606:	4a38      	ldr	r2, [pc, #224]	@ (80106e8 <I2C_Enable_IRQ+0x100>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d02d      	beq.n	8010668 <I2C_Enable_IRQ+0x80>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010610:	4a36      	ldr	r2, [pc, #216]	@ (80106ec <I2C_Enable_IRQ+0x104>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d028      	beq.n	8010668 <I2C_Enable_IRQ+0x80>
 8010616:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801061a:	2b00      	cmp	r3, #0
 801061c:	da03      	bge.n	8010626 <I2C_Enable_IRQ+0x3e>
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010624:	60fb      	str	r3, [r7, #12]
 8010626:	887b      	ldrh	r3, [r7, #2]
 8010628:	f003 0301 	and.w	r3, r3, #1
 801062c:	2b00      	cmp	r3, #0
 801062e:	d003      	beq.n	8010638 <I2C_Enable_IRQ+0x50>
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010636:	60fb      	str	r3, [r7, #12]
 8010638:	887b      	ldrh	r3, [r7, #2]
 801063a:	f003 0302 	and.w	r3, r3, #2
 801063e:	2b00      	cmp	r3, #0
 8010640:	d003      	beq.n	801064a <I2C_Enable_IRQ+0x62>
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8010648:	60fb      	str	r3, [r7, #12]
 801064a:	887b      	ldrh	r3, [r7, #2]
 801064c:	2b10      	cmp	r3, #16
 801064e:	d103      	bne.n	8010658 <I2C_Enable_IRQ+0x70>
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010656:	60fb      	str	r3, [r7, #12]
 8010658:	887b      	ldrh	r3, [r7, #2]
 801065a:	2b20      	cmp	r3, #32
 801065c:	d133      	bne.n	80106c6 <I2C_Enable_IRQ+0xde>
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f043 0320 	orr.w	r3, r3, #32
 8010664:	60fb      	str	r3, [r7, #12]
 8010666:	e02e      	b.n	80106c6 <I2C_Enable_IRQ+0xde>
 8010668:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801066c:	2b00      	cmp	r3, #0
 801066e:	da03      	bge.n	8010678 <I2C_Enable_IRQ+0x90>
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010676:	60fb      	str	r3, [r7, #12]
 8010678:	887b      	ldrh	r3, [r7, #2]
 801067a:	f003 0301 	and.w	r3, r3, #1
 801067e:	2b00      	cmp	r3, #0
 8010680:	d003      	beq.n	801068a <I2C_Enable_IRQ+0xa2>
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8010688:	60fb      	str	r3, [r7, #12]
 801068a:	887b      	ldrh	r3, [r7, #2]
 801068c:	f003 0302 	and.w	r3, r3, #2
 8010690:	2b00      	cmp	r3, #0
 8010692:	d003      	beq.n	801069c <I2C_Enable_IRQ+0xb4>
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 801069a:	60fb      	str	r3, [r7, #12]
 801069c:	887b      	ldrh	r3, [r7, #2]
 801069e:	2b10      	cmp	r3, #16
 80106a0:	d103      	bne.n	80106aa <I2C_Enable_IRQ+0xc2>
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80106a8:	60fb      	str	r3, [r7, #12]
 80106aa:	887b      	ldrh	r3, [r7, #2]
 80106ac:	2b20      	cmp	r3, #32
 80106ae:	d103      	bne.n	80106b8 <I2C_Enable_IRQ+0xd0>
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80106b6:	60fb      	str	r3, [r7, #12]
 80106b8:	887b      	ldrh	r3, [r7, #2]
 80106ba:	2b40      	cmp	r3, #64	@ 0x40
 80106bc:	d103      	bne.n	80106c6 <I2C_Enable_IRQ+0xde>
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106c4:	60fb      	str	r3, [r7, #12]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	6819      	ldr	r1, [r3, #0]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	68fa      	ldr	r2, [r7, #12]
 80106d2:	430a      	orrs	r2, r1
 80106d4:	601a      	str	r2, [r3, #0]
 80106d6:	bf00      	nop
 80106d8:	3714      	adds	r7, #20
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	0800ed0b 	.word	0x0800ed0b
 80106e8:	0800f12d 	.word	0x0800f12d
 80106ec:	0800eee1 	.word	0x0800eee1

080106f0 <I2C_Disable_IRQ>:
 80106f0:	b480      	push	{r7}
 80106f2:	b085      	sub	sp, #20
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	460b      	mov	r3, r1
 80106fa:	807b      	strh	r3, [r7, #2]
 80106fc:	2300      	movs	r3, #0
 80106fe:	60fb      	str	r3, [r7, #12]
 8010700:	887b      	ldrh	r3, [r7, #2]
 8010702:	f003 0301 	and.w	r3, r3, #1
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00f      	beq.n	801072a <I2C_Disable_IRQ+0x3a>
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8010710:	60fb      	str	r3, [r7, #12]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010718:	b2db      	uxtb	r3, r3
 801071a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 801071e:	2b28      	cmp	r3, #40	@ 0x28
 8010720:	d003      	beq.n	801072a <I2C_Disable_IRQ+0x3a>
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010728:	60fb      	str	r3, [r7, #12]
 801072a:	887b      	ldrh	r3, [r7, #2]
 801072c:	f003 0302 	and.w	r3, r3, #2
 8010730:	2b00      	cmp	r3, #0
 8010732:	d00f      	beq.n	8010754 <I2C_Disable_IRQ+0x64>
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 801073a:	60fb      	str	r3, [r7, #12]
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010742:	b2db      	uxtb	r3, r3
 8010744:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8010748:	2b28      	cmp	r3, #40	@ 0x28
 801074a:	d003      	beq.n	8010754 <I2C_Disable_IRQ+0x64>
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8010752:	60fb      	str	r3, [r7, #12]
 8010754:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010758:	2b00      	cmp	r3, #0
 801075a:	da03      	bge.n	8010764 <I2C_Disable_IRQ+0x74>
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8010762:	60fb      	str	r3, [r7, #12]
 8010764:	887b      	ldrh	r3, [r7, #2]
 8010766:	2b10      	cmp	r3, #16
 8010768:	d103      	bne.n	8010772 <I2C_Disable_IRQ+0x82>
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8010770:	60fb      	str	r3, [r7, #12]
 8010772:	887b      	ldrh	r3, [r7, #2]
 8010774:	2b20      	cmp	r3, #32
 8010776:	d103      	bne.n	8010780 <I2C_Disable_IRQ+0x90>
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f043 0320 	orr.w	r3, r3, #32
 801077e:	60fb      	str	r3, [r7, #12]
 8010780:	887b      	ldrh	r3, [r7, #2]
 8010782:	2b40      	cmp	r3, #64	@ 0x40
 8010784:	d103      	bne.n	801078e <I2C_Disable_IRQ+0x9e>
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801078c:	60fb      	str	r3, [r7, #12]
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	6819      	ldr	r1, [r3, #0]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	43da      	mvns	r2, r3
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	400a      	ands	r2, r1
 801079e:	601a      	str	r2, [r3, #0]
 80107a0:	bf00      	nop
 80107a2:	3714      	adds	r7, #20
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <HAL_I2CEx_ConfigAnalogFilter>:
 80107ac:	b480      	push	{r7}
 80107ae:	b083      	sub	sp, #12
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	2b20      	cmp	r3, #32
 80107c0:	d138      	bne.n	8010834 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80107c8:	2b01      	cmp	r3, #1
 80107ca:	d101      	bne.n	80107d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80107cc:	2302      	movs	r3, #2
 80107ce:	e032      	b.n	8010836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2201      	movs	r2, #1
 80107d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2224      	movs	r2, #36	@ 0x24
 80107dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f022 0201 	bic.w	r2, r2, #1
 80107ee:	601a      	str	r2, [r3, #0]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80107fe:	601a      	str	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	6819      	ldr	r1, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	683a      	ldr	r2, [r7, #0]
 801080c:	430a      	orrs	r2, r1
 801080e:	601a      	str	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	681a      	ldr	r2, [r3, #0]
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f042 0201 	orr.w	r2, r2, #1
 801081e:	601a      	str	r2, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2220      	movs	r2, #32
 8010824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2200      	movs	r2, #0
 801082c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010830:	2300      	movs	r3, #0
 8010832:	e000      	b.n	8010836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8010834:	2302      	movs	r3, #2
 8010836:	4618      	mov	r0, r3
 8010838:	370c      	adds	r7, #12
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr

08010842 <HAL_I2CEx_ConfigDigitalFilter>:
 8010842:	b480      	push	{r7}
 8010844:	b085      	sub	sp, #20
 8010846:	af00      	add	r7, sp, #0
 8010848:	6078      	str	r0, [r7, #4]
 801084a:	6039      	str	r1, [r7, #0]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010852:	b2db      	uxtb	r3, r3
 8010854:	2b20      	cmp	r3, #32
 8010856:	d139      	bne.n	80108cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801085e:	2b01      	cmp	r3, #1
 8010860:	d101      	bne.n	8010866 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8010862:	2302      	movs	r3, #2
 8010864:	e033      	b.n	80108ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2201      	movs	r2, #1
 801086a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2224      	movs	r2, #36	@ 0x24
 8010872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	681a      	ldr	r2, [r3, #0]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f022 0201 	bic.w	r2, r2, #1
 8010884:	601a      	str	r2, [r3, #0]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	60fb      	str	r3, [r7, #12]
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8010894:	60fb      	str	r3, [r7, #12]
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	021b      	lsls	r3, r3, #8
 801089a:	68fa      	ldr	r2, [r7, #12]
 801089c:	4313      	orrs	r3, r2
 801089e:	60fb      	str	r3, [r7, #12]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	68fa      	ldr	r2, [r7, #12]
 80108a6:	601a      	str	r2, [r3, #0]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	681a      	ldr	r2, [r3, #0]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	f042 0201 	orr.w	r2, r2, #1
 80108b6:	601a      	str	r2, [r3, #0]
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2220      	movs	r2, #32
 80108bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80108c8:	2300      	movs	r3, #0
 80108ca:	e000      	b.n	80108ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80108cc:	2302      	movs	r3, #2
 80108ce:	4618      	mov	r0, r3
 80108d0:	3714      	adds	r7, #20
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr
	...

080108dc <HAL_I2CEx_EnableFastModePlus>:
 80108dc:	b480      	push	{r7}
 80108de:	b085      	sub	sp, #20
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	4b0d      	ldr	r3, [pc, #52]	@ (801091c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80108e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80108ea:	4a0c      	ldr	r2, [pc, #48]	@ (801091c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80108ec:	f043 0302 	orr.w	r3, r3, #2
 80108f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80108f4:	4b09      	ldr	r3, [pc, #36]	@ (801091c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80108f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80108fa:	f003 0302 	and.w	r3, r3, #2
 80108fe:	60fb      	str	r3, [r7, #12]
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	4b07      	ldr	r3, [pc, #28]	@ (8010920 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010904:	685a      	ldr	r2, [r3, #4]
 8010906:	4906      	ldr	r1, [pc, #24]	@ (8010920 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4313      	orrs	r3, r2
 801090c:	604b      	str	r3, [r1, #4]
 801090e:	bf00      	nop
 8010910:	3714      	adds	r7, #20
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop
 801091c:	58024400 	.word	0x58024400
 8010920:	58000400 	.word	0x58000400

08010924 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b084      	sub	sp, #16
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801092c:	4b19      	ldr	r3, [pc, #100]	@ (8010994 <HAL_PWREx_ConfigSupply+0x70>)
 801092e:	68db      	ldr	r3, [r3, #12]
 8010930:	f003 0304 	and.w	r3, r3, #4
 8010934:	2b04      	cmp	r3, #4
 8010936:	d00a      	beq.n	801094e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8010938:	4b16      	ldr	r3, [pc, #88]	@ (8010994 <HAL_PWREx_ConfigSupply+0x70>)
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	f003 0307 	and.w	r3, r3, #7
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	429a      	cmp	r2, r3
 8010944:	d001      	beq.n	801094a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8010946:	2301      	movs	r3, #1
 8010948:	e01f      	b.n	801098a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801094a:	2300      	movs	r3, #0
 801094c:	e01d      	b.n	801098a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801094e:	4b11      	ldr	r3, [pc, #68]	@ (8010994 <HAL_PWREx_ConfigSupply+0x70>)
 8010950:	68db      	ldr	r3, [r3, #12]
 8010952:	f023 0207 	bic.w	r2, r3, #7
 8010956:	490f      	ldr	r1, [pc, #60]	@ (8010994 <HAL_PWREx_ConfigSupply+0x70>)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	4313      	orrs	r3, r2
 801095c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801095e:	f7f8 f9c5 	bl	8008cec <HAL_GetTick>
 8010962:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010964:	e009      	b.n	801097a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8010966:	f7f8 f9c1 	bl	8008cec <HAL_GetTick>
 801096a:	4602      	mov	r2, r0
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	1ad3      	subs	r3, r2, r3
 8010970:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010974:	d901      	bls.n	801097a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8010976:	2301      	movs	r3, #1
 8010978:	e007      	b.n	801098a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801097a:	4b06      	ldr	r3, [pc, #24]	@ (8010994 <HAL_PWREx_ConfigSupply+0x70>)
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010986:	d1ee      	bne.n	8010966 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8010988:	2300      	movs	r3, #0
}
 801098a:	4618      	mov	r0, r3
 801098c:	3710      	adds	r7, #16
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	58024800 	.word	0x58024800

08010998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b08c      	sub	sp, #48	@ 0x30
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d101      	bne.n	80109aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80109a6:	2301      	movs	r3, #1
 80109a8:	e3c8      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f003 0301 	and.w	r3, r3, #1
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f000 8087 	beq.w	8010ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80109b8:	4b88      	ldr	r3, [pc, #544]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 80109ba:	691b      	ldr	r3, [r3, #16]
 80109bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80109c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80109c2:	4b86      	ldr	r3, [pc, #536]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 80109c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80109c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ca:	2b10      	cmp	r3, #16
 80109cc:	d007      	beq.n	80109de <HAL_RCC_OscConfig+0x46>
 80109ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109d0:	2b18      	cmp	r3, #24
 80109d2:	d110      	bne.n	80109f6 <HAL_RCC_OscConfig+0x5e>
 80109d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d6:	f003 0303 	and.w	r3, r3, #3
 80109da:	2b02      	cmp	r3, #2
 80109dc:	d10b      	bne.n	80109f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80109de:	4b7f      	ldr	r3, [pc, #508]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d06c      	beq.n	8010ac4 <HAL_RCC_OscConfig+0x12c>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d168      	bne.n	8010ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80109f2:	2301      	movs	r3, #1
 80109f4:	e3a2      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80109fe:	d106      	bne.n	8010a0e <HAL_RCC_OscConfig+0x76>
 8010a00:	4b76      	ldr	r3, [pc, #472]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	4a75      	ldr	r2, [pc, #468]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010a0a:	6013      	str	r3, [r2, #0]
 8010a0c:	e02e      	b.n	8010a6c <HAL_RCC_OscConfig+0xd4>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	685b      	ldr	r3, [r3, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d10c      	bne.n	8010a30 <HAL_RCC_OscConfig+0x98>
 8010a16:	4b71      	ldr	r3, [pc, #452]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	4a70      	ldr	r2, [pc, #448]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010a20:	6013      	str	r3, [r2, #0]
 8010a22:	4b6e      	ldr	r3, [pc, #440]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4a6d      	ldr	r2, [pc, #436]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010a2c:	6013      	str	r3, [r2, #0]
 8010a2e:	e01d      	b.n	8010a6c <HAL_RCC_OscConfig+0xd4>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010a38:	d10c      	bne.n	8010a54 <HAL_RCC_OscConfig+0xbc>
 8010a3a:	4b68      	ldr	r3, [pc, #416]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a67      	ldr	r2, [pc, #412]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010a44:	6013      	str	r3, [r2, #0]
 8010a46:	4b65      	ldr	r3, [pc, #404]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4a64      	ldr	r2, [pc, #400]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010a50:	6013      	str	r3, [r2, #0]
 8010a52:	e00b      	b.n	8010a6c <HAL_RCC_OscConfig+0xd4>
 8010a54:	4b61      	ldr	r3, [pc, #388]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4a60      	ldr	r2, [pc, #384]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010a5e:	6013      	str	r3, [r2, #0]
 8010a60:	4b5e      	ldr	r3, [pc, #376]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a5d      	ldr	r2, [pc, #372]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	685b      	ldr	r3, [r3, #4]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d013      	beq.n	8010a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a74:	f7f8 f93a 	bl	8008cec <HAL_GetTick>
 8010a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010a7a:	e008      	b.n	8010a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010a7c:	f7f8 f936 	bl	8008cec <HAL_GetTick>
 8010a80:	4602      	mov	r2, r0
 8010a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a84:	1ad3      	subs	r3, r2, r3
 8010a86:	2b64      	cmp	r3, #100	@ 0x64
 8010a88:	d901      	bls.n	8010a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8010a8a:	2303      	movs	r3, #3
 8010a8c:	e356      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010a8e:	4b53      	ldr	r3, [pc, #332]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d0f0      	beq.n	8010a7c <HAL_RCC_OscConfig+0xe4>
 8010a9a:	e014      	b.n	8010ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a9c:	f7f8 f926 	bl	8008cec <HAL_GetTick>
 8010aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010aa2:	e008      	b.n	8010ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010aa4:	f7f8 f922 	bl	8008cec <HAL_GetTick>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	2b64      	cmp	r3, #100	@ 0x64
 8010ab0:	d901      	bls.n	8010ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8010ab2:	2303      	movs	r3, #3
 8010ab4:	e342      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010ab6:	4b49      	ldr	r3, [pc, #292]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d1f0      	bne.n	8010aa4 <HAL_RCC_OscConfig+0x10c>
 8010ac2:	e000      	b.n	8010ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f003 0302 	and.w	r3, r3, #2
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f000 808c 	beq.w	8010bec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010ad4:	4b41      	ldr	r3, [pc, #260]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010ad6:	691b      	ldr	r3, [r3, #16]
 8010ad8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010adc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010ade:	4b3f      	ldr	r3, [pc, #252]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ae2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010ae4:	6a3b      	ldr	r3, [r7, #32]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d007      	beq.n	8010afa <HAL_RCC_OscConfig+0x162>
 8010aea:	6a3b      	ldr	r3, [r7, #32]
 8010aec:	2b18      	cmp	r3, #24
 8010aee:	d137      	bne.n	8010b60 <HAL_RCC_OscConfig+0x1c8>
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	f003 0303 	and.w	r3, r3, #3
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d132      	bne.n	8010b60 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010afa:	4b38      	ldr	r3, [pc, #224]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	f003 0304 	and.w	r3, r3, #4
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d005      	beq.n	8010b12 <HAL_RCC_OscConfig+0x17a>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	68db      	ldr	r3, [r3, #12]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d101      	bne.n	8010b12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010b0e:	2301      	movs	r3, #1
 8010b10:	e314      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010b12:	4b32      	ldr	r3, [pc, #200]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	f023 0219 	bic.w	r2, r3, #25
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	68db      	ldr	r3, [r3, #12]
 8010b1e:	492f      	ldr	r1, [pc, #188]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010b20:	4313      	orrs	r3, r2
 8010b22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010b24:	f7f8 f8e2 	bl	8008cec <HAL_GetTick>
 8010b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010b2a:	e008      	b.n	8010b3e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010b2c:	f7f8 f8de 	bl	8008cec <HAL_GetTick>
 8010b30:	4602      	mov	r2, r0
 8010b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b34:	1ad3      	subs	r3, r2, r3
 8010b36:	2b02      	cmp	r3, #2
 8010b38:	d901      	bls.n	8010b3e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8010b3a:	2303      	movs	r3, #3
 8010b3c:	e2fe      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010b3e:	4b27      	ldr	r3, [pc, #156]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	f003 0304 	and.w	r3, r3, #4
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d0f0      	beq.n	8010b2c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010b4a:	4b24      	ldr	r3, [pc, #144]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	691b      	ldr	r3, [r3, #16]
 8010b56:	061b      	lsls	r3, r3, #24
 8010b58:	4920      	ldr	r1, [pc, #128]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010b5e:	e045      	b.n	8010bec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d026      	beq.n	8010bb6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010b68:	4b1c      	ldr	r3, [pc, #112]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f023 0219 	bic.w	r2, r3, #25
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	4919      	ldr	r1, [pc, #100]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010b76:	4313      	orrs	r3, r2
 8010b78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010b7a:	f7f8 f8b7 	bl	8008cec <HAL_GetTick>
 8010b7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010b80:	e008      	b.n	8010b94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010b82:	f7f8 f8b3 	bl	8008cec <HAL_GetTick>
 8010b86:	4602      	mov	r2, r0
 8010b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b8a:	1ad3      	subs	r3, r2, r3
 8010b8c:	2b02      	cmp	r3, #2
 8010b8e:	d901      	bls.n	8010b94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8010b90:	2303      	movs	r3, #3
 8010b92:	e2d3      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010b94:	4b11      	ldr	r3, [pc, #68]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f003 0304 	and.w	r3, r3, #4
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d0f0      	beq.n	8010b82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	691b      	ldr	r3, [r3, #16]
 8010bac:	061b      	lsls	r3, r3, #24
 8010bae:	490b      	ldr	r1, [pc, #44]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010bb0:	4313      	orrs	r3, r2
 8010bb2:	604b      	str	r3, [r1, #4]
 8010bb4:	e01a      	b.n	8010bec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010bb6:	4b09      	ldr	r3, [pc, #36]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	4a08      	ldr	r2, [pc, #32]	@ (8010bdc <HAL_RCC_OscConfig+0x244>)
 8010bbc:	f023 0301 	bic.w	r3, r3, #1
 8010bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010bc2:	f7f8 f893 	bl	8008cec <HAL_GetTick>
 8010bc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010bc8:	e00a      	b.n	8010be0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010bca:	f7f8 f88f 	bl	8008cec <HAL_GetTick>
 8010bce:	4602      	mov	r2, r0
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bd2:	1ad3      	subs	r3, r2, r3
 8010bd4:	2b02      	cmp	r3, #2
 8010bd6:	d903      	bls.n	8010be0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8010bd8:	2303      	movs	r3, #3
 8010bda:	e2af      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
 8010bdc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010be0:	4b96      	ldr	r3, [pc, #600]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	f003 0304 	and.w	r3, r3, #4
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d1ee      	bne.n	8010bca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f003 0310 	and.w	r3, r3, #16
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d06a      	beq.n	8010cce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010bf8:	4b90      	ldr	r3, [pc, #576]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010bfa:	691b      	ldr	r3, [r3, #16]
 8010bfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010c00:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010c02:	4b8e      	ldr	r3, [pc, #568]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c06:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010c08:	69bb      	ldr	r3, [r7, #24]
 8010c0a:	2b08      	cmp	r3, #8
 8010c0c:	d007      	beq.n	8010c1e <HAL_RCC_OscConfig+0x286>
 8010c0e:	69bb      	ldr	r3, [r7, #24]
 8010c10:	2b18      	cmp	r3, #24
 8010c12:	d11b      	bne.n	8010c4c <HAL_RCC_OscConfig+0x2b4>
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	f003 0303 	and.w	r3, r3, #3
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	d116      	bne.n	8010c4c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010c1e:	4b87      	ldr	r3, [pc, #540]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d005      	beq.n	8010c36 <HAL_RCC_OscConfig+0x29e>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	69db      	ldr	r3, [r3, #28]
 8010c2e:	2b80      	cmp	r3, #128	@ 0x80
 8010c30:	d001      	beq.n	8010c36 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8010c32:	2301      	movs	r3, #1
 8010c34:	e282      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010c36:	4b81      	ldr	r3, [pc, #516]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6a1b      	ldr	r3, [r3, #32]
 8010c42:	061b      	lsls	r3, r3, #24
 8010c44:	497d      	ldr	r1, [pc, #500]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010c46:	4313      	orrs	r3, r2
 8010c48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010c4a:	e040      	b.n	8010cce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	69db      	ldr	r3, [r3, #28]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d023      	beq.n	8010c9c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8010c54:	4b79      	ldr	r3, [pc, #484]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4a78      	ldr	r2, [pc, #480]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010c60:	f7f8 f844 	bl	8008cec <HAL_GetTick>
 8010c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010c66:	e008      	b.n	8010c7a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8010c68:	f7f8 f840 	bl	8008cec <HAL_GetTick>
 8010c6c:	4602      	mov	r2, r0
 8010c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c70:	1ad3      	subs	r3, r2, r3
 8010c72:	2b02      	cmp	r3, #2
 8010c74:	d901      	bls.n	8010c7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8010c76:	2303      	movs	r3, #3
 8010c78:	e260      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010c7a:	4b70      	ldr	r3, [pc, #448]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d0f0      	beq.n	8010c68 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010c86:	4b6d      	ldr	r3, [pc, #436]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010c88:	68db      	ldr	r3, [r3, #12]
 8010c8a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6a1b      	ldr	r3, [r3, #32]
 8010c92:	061b      	lsls	r3, r3, #24
 8010c94:	4969      	ldr	r1, [pc, #420]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010c96:	4313      	orrs	r3, r2
 8010c98:	60cb      	str	r3, [r1, #12]
 8010c9a:	e018      	b.n	8010cce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010c9c:	4b67      	ldr	r3, [pc, #412]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4a66      	ldr	r2, [pc, #408]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010ca8:	f7f8 f820 	bl	8008cec <HAL_GetTick>
 8010cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010cae:	e008      	b.n	8010cc2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8010cb0:	f7f8 f81c 	bl	8008cec <HAL_GetTick>
 8010cb4:	4602      	mov	r2, r0
 8010cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb8:	1ad3      	subs	r3, r2, r3
 8010cba:	2b02      	cmp	r3, #2
 8010cbc:	d901      	bls.n	8010cc2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8010cbe:	2303      	movs	r3, #3
 8010cc0:	e23c      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d1f0      	bne.n	8010cb0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f003 0308 	and.w	r3, r3, #8
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d036      	beq.n	8010d48 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	695b      	ldr	r3, [r3, #20]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d019      	beq.n	8010d16 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010ce2:	4b56      	ldr	r3, [pc, #344]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ce6:	4a55      	ldr	r2, [pc, #340]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010ce8:	f043 0301 	orr.w	r3, r3, #1
 8010cec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010cee:	f7f7 fffd 	bl	8008cec <HAL_GetTick>
 8010cf2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010cf4:	e008      	b.n	8010d08 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010cf6:	f7f7 fff9 	bl	8008cec <HAL_GetTick>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cfe:	1ad3      	subs	r3, r2, r3
 8010d00:	2b02      	cmp	r3, #2
 8010d02:	d901      	bls.n	8010d08 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8010d04:	2303      	movs	r3, #3
 8010d06:	e219      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010d08:	4b4c      	ldr	r3, [pc, #304]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d0c:	f003 0302 	and.w	r3, r3, #2
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d0f0      	beq.n	8010cf6 <HAL_RCC_OscConfig+0x35e>
 8010d14:	e018      	b.n	8010d48 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010d16:	4b49      	ldr	r3, [pc, #292]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d1a:	4a48      	ldr	r2, [pc, #288]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010d1c:	f023 0301 	bic.w	r3, r3, #1
 8010d20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010d22:	f7f7 ffe3 	bl	8008cec <HAL_GetTick>
 8010d26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010d28:	e008      	b.n	8010d3c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010d2a:	f7f7 ffdf 	bl	8008cec <HAL_GetTick>
 8010d2e:	4602      	mov	r2, r0
 8010d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d32:	1ad3      	subs	r3, r2, r3
 8010d34:	2b02      	cmp	r3, #2
 8010d36:	d901      	bls.n	8010d3c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8010d38:	2303      	movs	r3, #3
 8010d3a:	e1ff      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d40:	f003 0302 	and.w	r3, r3, #2
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d1f0      	bne.n	8010d2a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f003 0320 	and.w	r3, r3, #32
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d036      	beq.n	8010dc2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	699b      	ldr	r3, [r3, #24]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d019      	beq.n	8010d90 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010d5c:	4b37      	ldr	r3, [pc, #220]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4a36      	ldr	r2, [pc, #216]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010d62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010d66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010d68:	f7f7 ffc0 	bl	8008cec <HAL_GetTick>
 8010d6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010d6e:	e008      	b.n	8010d82 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010d70:	f7f7 ffbc 	bl	8008cec <HAL_GetTick>
 8010d74:	4602      	mov	r2, r0
 8010d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d78:	1ad3      	subs	r3, r2, r3
 8010d7a:	2b02      	cmp	r3, #2
 8010d7c:	d901      	bls.n	8010d82 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8010d7e:	2303      	movs	r3, #3
 8010d80:	e1dc      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010d82:	4b2e      	ldr	r3, [pc, #184]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d0f0      	beq.n	8010d70 <HAL_RCC_OscConfig+0x3d8>
 8010d8e:	e018      	b.n	8010dc2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010d90:	4b2a      	ldr	r3, [pc, #168]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4a29      	ldr	r2, [pc, #164]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010d96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010d9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010d9c:	f7f7 ffa6 	bl	8008cec <HAL_GetTick>
 8010da0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010da2:	e008      	b.n	8010db6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010da4:	f7f7 ffa2 	bl	8008cec <HAL_GetTick>
 8010da8:	4602      	mov	r2, r0
 8010daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	d901      	bls.n	8010db6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8010db2:	2303      	movs	r3, #3
 8010db4:	e1c2      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010db6:	4b21      	ldr	r3, [pc, #132]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d1f0      	bne.n	8010da4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f003 0304 	and.w	r3, r3, #4
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	f000 8086 	beq.w	8010edc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8010dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8010e40 <HAL_RCC_OscConfig+0x4a8>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8010e40 <HAL_RCC_OscConfig+0x4a8>)
 8010dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010ddc:	f7f7 ff86 	bl	8008cec <HAL_GetTick>
 8010de0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010de2:	e008      	b.n	8010df6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010de4:	f7f7 ff82 	bl	8008cec <HAL_GetTick>
 8010de8:	4602      	mov	r2, r0
 8010dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dec:	1ad3      	subs	r3, r2, r3
 8010dee:	2b64      	cmp	r3, #100	@ 0x64
 8010df0:	d901      	bls.n	8010df6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8010df2:	2303      	movs	r3, #3
 8010df4:	e1a2      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010df6:	4b12      	ldr	r3, [pc, #72]	@ (8010e40 <HAL_RCC_OscConfig+0x4a8>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d0f0      	beq.n	8010de4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	689b      	ldr	r3, [r3, #8]
 8010e06:	2b01      	cmp	r3, #1
 8010e08:	d106      	bne.n	8010e18 <HAL_RCC_OscConfig+0x480>
 8010e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010e10:	f043 0301 	orr.w	r3, r3, #1
 8010e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8010e16:	e032      	b.n	8010e7e <HAL_RCC_OscConfig+0x4e6>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	689b      	ldr	r3, [r3, #8]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d111      	bne.n	8010e44 <HAL_RCC_OscConfig+0x4ac>
 8010e20:	4b06      	ldr	r3, [pc, #24]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e24:	4a05      	ldr	r2, [pc, #20]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010e26:	f023 0301 	bic.w	r3, r3, #1
 8010e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8010e2c:	4b03      	ldr	r3, [pc, #12]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e30:	4a02      	ldr	r2, [pc, #8]	@ (8010e3c <HAL_RCC_OscConfig+0x4a4>)
 8010e32:	f023 0304 	bic.w	r3, r3, #4
 8010e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8010e38:	e021      	b.n	8010e7e <HAL_RCC_OscConfig+0x4e6>
 8010e3a:	bf00      	nop
 8010e3c:	58024400 	.word	0x58024400
 8010e40:	58024800 	.word	0x58024800
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	689b      	ldr	r3, [r3, #8]
 8010e48:	2b05      	cmp	r3, #5
 8010e4a:	d10c      	bne.n	8010e66 <HAL_RCC_OscConfig+0x4ce>
 8010e4c:	4b83      	ldr	r3, [pc, #524]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e50:	4a82      	ldr	r2, [pc, #520]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010e52:	f043 0304 	orr.w	r3, r3, #4
 8010e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8010e58:	4b80      	ldr	r3, [pc, #512]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e5c:	4a7f      	ldr	r2, [pc, #508]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010e5e:	f043 0301 	orr.w	r3, r3, #1
 8010e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8010e64:	e00b      	b.n	8010e7e <HAL_RCC_OscConfig+0x4e6>
 8010e66:	4b7d      	ldr	r3, [pc, #500]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e6a:	4a7c      	ldr	r2, [pc, #496]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010e6c:	f023 0301 	bic.w	r3, r3, #1
 8010e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8010e72:	4b7a      	ldr	r3, [pc, #488]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e76:	4a79      	ldr	r2, [pc, #484]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010e78:	f023 0304 	bic.w	r3, r3, #4
 8010e7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	689b      	ldr	r3, [r3, #8]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d015      	beq.n	8010eb2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010e86:	f7f7 ff31 	bl	8008cec <HAL_GetTick>
 8010e8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010e8c:	e00a      	b.n	8010ea4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010e8e:	f7f7 ff2d 	bl	8008cec <HAL_GetTick>
 8010e92:	4602      	mov	r2, r0
 8010e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e96:	1ad3      	subs	r3, r2, r3
 8010e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d901      	bls.n	8010ea4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8010ea0:	2303      	movs	r3, #3
 8010ea2:	e14b      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010ea4:	4b6d      	ldr	r3, [pc, #436]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ea8:	f003 0302 	and.w	r3, r3, #2
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d0ee      	beq.n	8010e8e <HAL_RCC_OscConfig+0x4f6>
 8010eb0:	e014      	b.n	8010edc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010eb2:	f7f7 ff1b 	bl	8008cec <HAL_GetTick>
 8010eb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010eb8:	e00a      	b.n	8010ed0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010eba:	f7f7 ff17 	bl	8008cec <HAL_GetTick>
 8010ebe:	4602      	mov	r2, r0
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec2:	1ad3      	subs	r3, r2, r3
 8010ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	d901      	bls.n	8010ed0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8010ecc:	2303      	movs	r3, #3
 8010ece:	e135      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010ed0:	4b62      	ldr	r3, [pc, #392]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ed4:	f003 0302 	and.w	r3, r3, #2
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d1ee      	bne.n	8010eba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	f000 812a 	beq.w	801113a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8010ee6:	4b5d      	ldr	r3, [pc, #372]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010ee8:	691b      	ldr	r3, [r3, #16]
 8010eea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010eee:	2b18      	cmp	r3, #24
 8010ef0:	f000 80ba 	beq.w	8011068 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ef8:	2b02      	cmp	r3, #2
 8010efa:	f040 8095 	bne.w	8011028 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010efe:	4b57      	ldr	r3, [pc, #348]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	4a56      	ldr	r2, [pc, #344]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8010f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f0a:	f7f7 feef 	bl	8008cec <HAL_GetTick>
 8010f0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010f10:	e008      	b.n	8010f24 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010f12:	f7f7 feeb 	bl	8008cec <HAL_GetTick>
 8010f16:	4602      	mov	r2, r0
 8010f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f1a:	1ad3      	subs	r3, r2, r3
 8010f1c:	2b02      	cmp	r3, #2
 8010f1e:	d901      	bls.n	8010f24 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8010f20:	2303      	movs	r3, #3
 8010f22:	e10b      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010f24:	4b4d      	ldr	r3, [pc, #308]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d1f0      	bne.n	8010f12 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010f30:	4b4a      	ldr	r3, [pc, #296]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010f32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010f34:	4b4a      	ldr	r3, [pc, #296]	@ (8011060 <HAL_RCC_OscConfig+0x6c8>)
 8010f36:	4013      	ands	r3, r2
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8010f40:	0112      	lsls	r2, r2, #4
 8010f42:	430a      	orrs	r2, r1
 8010f44:	4945      	ldr	r1, [pc, #276]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010f46:	4313      	orrs	r3, r2
 8010f48:	628b      	str	r3, [r1, #40]	@ 0x28
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f4e:	3b01      	subs	r3, #1
 8010f50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f58:	3b01      	subs	r3, #1
 8010f5a:	025b      	lsls	r3, r3, #9
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	431a      	orrs	r2, r3
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f64:	3b01      	subs	r3, #1
 8010f66:	041b      	lsls	r3, r3, #16
 8010f68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8010f6c:	431a      	orrs	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f72:	3b01      	subs	r3, #1
 8010f74:	061b      	lsls	r3, r3, #24
 8010f76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8010f7a:	4938      	ldr	r1, [pc, #224]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010f7c:	4313      	orrs	r3, r2
 8010f7e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8010f80:	4b36      	ldr	r3, [pc, #216]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f84:	4a35      	ldr	r2, [pc, #212]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010f86:	f023 0301 	bic.w	r3, r3, #1
 8010f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010f8c:	4b33      	ldr	r3, [pc, #204]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010f90:	4b34      	ldr	r3, [pc, #208]	@ (8011064 <HAL_RCC_OscConfig+0x6cc>)
 8010f92:	4013      	ands	r3, r2
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8010f98:	00d2      	lsls	r2, r2, #3
 8010f9a:	4930      	ldr	r1, [pc, #192]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010f9c:	4313      	orrs	r3, r2
 8010f9e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010fa0:	4b2e      	ldr	r3, [pc, #184]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fa4:	f023 020c 	bic.w	r2, r3, #12
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fac:	492b      	ldr	r1, [pc, #172]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fae:	4313      	orrs	r3, r2
 8010fb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010fb2:	4b2a      	ldr	r3, [pc, #168]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fb6:	f023 0202 	bic.w	r2, r3, #2
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fbe:	4927      	ldr	r1, [pc, #156]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fc0:	4313      	orrs	r3, r2
 8010fc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8010fc4:	4b25      	ldr	r3, [pc, #148]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fc8:	4a24      	ldr	r2, [pc, #144]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010fd0:	4b22      	ldr	r3, [pc, #136]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fd4:	4a21      	ldr	r2, [pc, #132]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8010fdc:	4b1f      	ldr	r3, [pc, #124]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fe0:	4a1e      	ldr	r2, [pc, #120]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fe2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8010fe8:	4b1c      	ldr	r3, [pc, #112]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fec:	4a1b      	ldr	r2, [pc, #108]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010fee:	f043 0301 	orr.w	r3, r3, #1
 8010ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010ff4:	4b19      	ldr	r3, [pc, #100]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	4a18      	ldr	r2, [pc, #96]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8010ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8010ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011000:	f7f7 fe74 	bl	8008cec <HAL_GetTick>
 8011004:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011006:	e008      	b.n	801101a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011008:	f7f7 fe70 	bl	8008cec <HAL_GetTick>
 801100c:	4602      	mov	r2, r0
 801100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011010:	1ad3      	subs	r3, r2, r3
 8011012:	2b02      	cmp	r3, #2
 8011014:	d901      	bls.n	801101a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8011016:	2303      	movs	r3, #3
 8011018:	e090      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801101a:	4b10      	ldr	r3, [pc, #64]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011022:	2b00      	cmp	r3, #0
 8011024:	d0f0      	beq.n	8011008 <HAL_RCC_OscConfig+0x670>
 8011026:	e088      	b.n	801113a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011028:	4b0c      	ldr	r3, [pc, #48]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	4a0b      	ldr	r2, [pc, #44]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 801102e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011034:	f7f7 fe5a 	bl	8008cec <HAL_GetTick>
 8011038:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801103a:	e008      	b.n	801104e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801103c:	f7f7 fe56 	bl	8008cec <HAL_GetTick>
 8011040:	4602      	mov	r2, r0
 8011042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011044:	1ad3      	subs	r3, r2, r3
 8011046:	2b02      	cmp	r3, #2
 8011048:	d901      	bls.n	801104e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801104a:	2303      	movs	r3, #3
 801104c:	e076      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801104e:	4b03      	ldr	r3, [pc, #12]	@ (801105c <HAL_RCC_OscConfig+0x6c4>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011056:	2b00      	cmp	r3, #0
 8011058:	d1f0      	bne.n	801103c <HAL_RCC_OscConfig+0x6a4>
 801105a:	e06e      	b.n	801113a <HAL_RCC_OscConfig+0x7a2>
 801105c:	58024400 	.word	0x58024400
 8011060:	fffffc0c 	.word	0xfffffc0c
 8011064:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011068:	4b36      	ldr	r3, [pc, #216]	@ (8011144 <HAL_RCC_OscConfig+0x7ac>)
 801106a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801106c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801106e:	4b35      	ldr	r3, [pc, #212]	@ (8011144 <HAL_RCC_OscConfig+0x7ac>)
 8011070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011072:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011078:	2b01      	cmp	r3, #1
 801107a:	d031      	beq.n	80110e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	f003 0203 	and.w	r2, r3, #3
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011086:	429a      	cmp	r2, r3
 8011088:	d12a      	bne.n	80110e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	091b      	lsrs	r3, r3, #4
 801108e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011096:	429a      	cmp	r2, r3
 8011098:	d122      	bne.n	80110e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d11a      	bne.n	80110e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	0a5b      	lsrs	r3, r3, #9
 80110ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d111      	bne.n	80110e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	0c1b      	lsrs	r3, r3, #16
 80110c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d108      	bne.n	80110e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	0e1b      	lsrs	r3, r3, #24
 80110d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80110dc:	429a      	cmp	r2, r3
 80110de:	d001      	beq.n	80110e4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80110e0:	2301      	movs	r3, #1
 80110e2:	e02b      	b.n	801113c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80110e4:	4b17      	ldr	r3, [pc, #92]	@ (8011144 <HAL_RCC_OscConfig+0x7ac>)
 80110e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110e8:	08db      	lsrs	r3, r3, #3
 80110ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80110ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80110f4:	693a      	ldr	r2, [r7, #16]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d01f      	beq.n	801113a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80110fa:	4b12      	ldr	r3, [pc, #72]	@ (8011144 <HAL_RCC_OscConfig+0x7ac>)
 80110fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110fe:	4a11      	ldr	r2, [pc, #68]	@ (8011144 <HAL_RCC_OscConfig+0x7ac>)
 8011100:	f023 0301 	bic.w	r3, r3, #1
 8011104:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011106:	f7f7 fdf1 	bl	8008cec <HAL_GetTick>
 801110a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801110c:	bf00      	nop
 801110e:	f7f7 fded 	bl	8008cec <HAL_GetTick>
 8011112:	4602      	mov	r2, r0
 8011114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011116:	4293      	cmp	r3, r2
 8011118:	d0f9      	beq.n	801110e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801111a:	4b0a      	ldr	r3, [pc, #40]	@ (8011144 <HAL_RCC_OscConfig+0x7ac>)
 801111c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801111e:	4b0a      	ldr	r3, [pc, #40]	@ (8011148 <HAL_RCC_OscConfig+0x7b0>)
 8011120:	4013      	ands	r3, r2
 8011122:	687a      	ldr	r2, [r7, #4]
 8011124:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011126:	00d2      	lsls	r2, r2, #3
 8011128:	4906      	ldr	r1, [pc, #24]	@ (8011144 <HAL_RCC_OscConfig+0x7ac>)
 801112a:	4313      	orrs	r3, r2
 801112c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801112e:	4b05      	ldr	r3, [pc, #20]	@ (8011144 <HAL_RCC_OscConfig+0x7ac>)
 8011130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011132:	4a04      	ldr	r2, [pc, #16]	@ (8011144 <HAL_RCC_OscConfig+0x7ac>)
 8011134:	f043 0301 	orr.w	r3, r3, #1
 8011138:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801113a:	2300      	movs	r3, #0
}
 801113c:	4618      	mov	r0, r3
 801113e:	3730      	adds	r7, #48	@ 0x30
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}
 8011144:	58024400 	.word	0x58024400
 8011148:	ffff0007 	.word	0xffff0007

0801114c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b086      	sub	sp, #24
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
 8011154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d101      	bne.n	8011160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801115c:	2301      	movs	r3, #1
 801115e:	e19c      	b.n	801149a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011160:	4b8a      	ldr	r3, [pc, #552]	@ (801138c <HAL_RCC_ClockConfig+0x240>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	f003 030f 	and.w	r3, r3, #15
 8011168:	683a      	ldr	r2, [r7, #0]
 801116a:	429a      	cmp	r2, r3
 801116c:	d910      	bls.n	8011190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801116e:	4b87      	ldr	r3, [pc, #540]	@ (801138c <HAL_RCC_ClockConfig+0x240>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f023 020f 	bic.w	r2, r3, #15
 8011176:	4985      	ldr	r1, [pc, #532]	@ (801138c <HAL_RCC_ClockConfig+0x240>)
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	4313      	orrs	r3, r2
 801117c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801117e:	4b83      	ldr	r3, [pc, #524]	@ (801138c <HAL_RCC_ClockConfig+0x240>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f003 030f 	and.w	r3, r3, #15
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	429a      	cmp	r2, r3
 801118a:	d001      	beq.n	8011190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801118c:	2301      	movs	r3, #1
 801118e:	e184      	b.n	801149a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f003 0304 	and.w	r3, r3, #4
 8011198:	2b00      	cmp	r3, #0
 801119a:	d010      	beq.n	80111be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	691a      	ldr	r2, [r3, #16]
 80111a0:	4b7b      	ldr	r3, [pc, #492]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80111a2:	699b      	ldr	r3, [r3, #24]
 80111a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d908      	bls.n	80111be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80111ac:	4b78      	ldr	r3, [pc, #480]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80111ae:	699b      	ldr	r3, [r3, #24]
 80111b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	691b      	ldr	r3, [r3, #16]
 80111b8:	4975      	ldr	r1, [pc, #468]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80111ba:	4313      	orrs	r3, r2
 80111bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f003 0308 	and.w	r3, r3, #8
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d010      	beq.n	80111ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	695a      	ldr	r2, [r3, #20]
 80111ce:	4b70      	ldr	r3, [pc, #448]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80111d0:	69db      	ldr	r3, [r3, #28]
 80111d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d908      	bls.n	80111ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80111da:	4b6d      	ldr	r3, [pc, #436]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80111dc:	69db      	ldr	r3, [r3, #28]
 80111de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	695b      	ldr	r3, [r3, #20]
 80111e6:	496a      	ldr	r1, [pc, #424]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80111e8:	4313      	orrs	r3, r2
 80111ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f003 0310 	and.w	r3, r3, #16
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d010      	beq.n	801121a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	699a      	ldr	r2, [r3, #24]
 80111fc:	4b64      	ldr	r3, [pc, #400]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80111fe:	69db      	ldr	r3, [r3, #28]
 8011200:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011204:	429a      	cmp	r2, r3
 8011206:	d908      	bls.n	801121a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011208:	4b61      	ldr	r3, [pc, #388]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 801120a:	69db      	ldr	r3, [r3, #28]
 801120c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	699b      	ldr	r3, [r3, #24]
 8011214:	495e      	ldr	r1, [pc, #376]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 8011216:	4313      	orrs	r3, r2
 8011218:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	f003 0320 	and.w	r3, r3, #32
 8011222:	2b00      	cmp	r3, #0
 8011224:	d010      	beq.n	8011248 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	69da      	ldr	r2, [r3, #28]
 801122a:	4b59      	ldr	r3, [pc, #356]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 801122c:	6a1b      	ldr	r3, [r3, #32]
 801122e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011232:	429a      	cmp	r2, r3
 8011234:	d908      	bls.n	8011248 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011236:	4b56      	ldr	r3, [pc, #344]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 8011238:	6a1b      	ldr	r3, [r3, #32]
 801123a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	69db      	ldr	r3, [r3, #28]
 8011242:	4953      	ldr	r1, [pc, #332]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 8011244:	4313      	orrs	r3, r2
 8011246:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	f003 0302 	and.w	r3, r3, #2
 8011250:	2b00      	cmp	r3, #0
 8011252:	d010      	beq.n	8011276 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	68da      	ldr	r2, [r3, #12]
 8011258:	4b4d      	ldr	r3, [pc, #308]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 801125a:	699b      	ldr	r3, [r3, #24]
 801125c:	f003 030f 	and.w	r3, r3, #15
 8011260:	429a      	cmp	r2, r3
 8011262:	d908      	bls.n	8011276 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011264:	4b4a      	ldr	r3, [pc, #296]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 8011266:	699b      	ldr	r3, [r3, #24]
 8011268:	f023 020f 	bic.w	r2, r3, #15
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	68db      	ldr	r3, [r3, #12]
 8011270:	4947      	ldr	r1, [pc, #284]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 8011272:	4313      	orrs	r3, r2
 8011274:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f003 0301 	and.w	r3, r3, #1
 801127e:	2b00      	cmp	r3, #0
 8011280:	d055      	beq.n	801132e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011282:	4b43      	ldr	r3, [pc, #268]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 8011284:	699b      	ldr	r3, [r3, #24]
 8011286:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	689b      	ldr	r3, [r3, #8]
 801128e:	4940      	ldr	r1, [pc, #256]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 8011290:	4313      	orrs	r3, r2
 8011292:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	685b      	ldr	r3, [r3, #4]
 8011298:	2b02      	cmp	r3, #2
 801129a:	d107      	bne.n	80112ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801129c:	4b3c      	ldr	r3, [pc, #240]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d121      	bne.n	80112ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80112a8:	2301      	movs	r3, #1
 80112aa:	e0f6      	b.n	801149a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	2b03      	cmp	r3, #3
 80112b2:	d107      	bne.n	80112c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80112b4:	4b36      	ldr	r3, [pc, #216]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d115      	bne.n	80112ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80112c0:	2301      	movs	r3, #1
 80112c2:	e0ea      	b.n	801149a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	2b01      	cmp	r3, #1
 80112ca:	d107      	bne.n	80112dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80112cc:	4b30      	ldr	r3, [pc, #192]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d109      	bne.n	80112ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80112d8:	2301      	movs	r3, #1
 80112da:	e0de      	b.n	801149a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80112dc:	4b2c      	ldr	r3, [pc, #176]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f003 0304 	and.w	r3, r3, #4
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d101      	bne.n	80112ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80112e8:	2301      	movs	r3, #1
 80112ea:	e0d6      	b.n	801149a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80112ec:	4b28      	ldr	r3, [pc, #160]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80112ee:	691b      	ldr	r3, [r3, #16]
 80112f0:	f023 0207 	bic.w	r2, r3, #7
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	4925      	ldr	r1, [pc, #148]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 80112fa:	4313      	orrs	r3, r2
 80112fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80112fe:	f7f7 fcf5 	bl	8008cec <HAL_GetTick>
 8011302:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011304:	e00a      	b.n	801131c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011306:	f7f7 fcf1 	bl	8008cec <HAL_GetTick>
 801130a:	4602      	mov	r2, r0
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011314:	4293      	cmp	r3, r2
 8011316:	d901      	bls.n	801131c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011318:	2303      	movs	r3, #3
 801131a:	e0be      	b.n	801149a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801131c:	4b1c      	ldr	r3, [pc, #112]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 801131e:	691b      	ldr	r3, [r3, #16]
 8011320:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	00db      	lsls	r3, r3, #3
 801132a:	429a      	cmp	r2, r3
 801132c:	d1eb      	bne.n	8011306 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f003 0302 	and.w	r3, r3, #2
 8011336:	2b00      	cmp	r3, #0
 8011338:	d010      	beq.n	801135c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	68da      	ldr	r2, [r3, #12]
 801133e:	4b14      	ldr	r3, [pc, #80]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 8011340:	699b      	ldr	r3, [r3, #24]
 8011342:	f003 030f 	and.w	r3, r3, #15
 8011346:	429a      	cmp	r2, r3
 8011348:	d208      	bcs.n	801135c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801134a:	4b11      	ldr	r3, [pc, #68]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 801134c:	699b      	ldr	r3, [r3, #24]
 801134e:	f023 020f 	bic.w	r2, r3, #15
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	68db      	ldr	r3, [r3, #12]
 8011356:	490e      	ldr	r1, [pc, #56]	@ (8011390 <HAL_RCC_ClockConfig+0x244>)
 8011358:	4313      	orrs	r3, r2
 801135a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801135c:	4b0b      	ldr	r3, [pc, #44]	@ (801138c <HAL_RCC_ClockConfig+0x240>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f003 030f 	and.w	r3, r3, #15
 8011364:	683a      	ldr	r2, [r7, #0]
 8011366:	429a      	cmp	r2, r3
 8011368:	d214      	bcs.n	8011394 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801136a:	4b08      	ldr	r3, [pc, #32]	@ (801138c <HAL_RCC_ClockConfig+0x240>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f023 020f 	bic.w	r2, r3, #15
 8011372:	4906      	ldr	r1, [pc, #24]	@ (801138c <HAL_RCC_ClockConfig+0x240>)
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	4313      	orrs	r3, r2
 8011378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801137a:	4b04      	ldr	r3, [pc, #16]	@ (801138c <HAL_RCC_ClockConfig+0x240>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f003 030f 	and.w	r3, r3, #15
 8011382:	683a      	ldr	r2, [r7, #0]
 8011384:	429a      	cmp	r2, r3
 8011386:	d005      	beq.n	8011394 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011388:	2301      	movs	r3, #1
 801138a:	e086      	b.n	801149a <HAL_RCC_ClockConfig+0x34e>
 801138c:	52002000 	.word	0x52002000
 8011390:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	f003 0304 	and.w	r3, r3, #4
 801139c:	2b00      	cmp	r3, #0
 801139e:	d010      	beq.n	80113c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	691a      	ldr	r2, [r3, #16]
 80113a4:	4b3f      	ldr	r3, [pc, #252]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 80113a6:	699b      	ldr	r3, [r3, #24]
 80113a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80113ac:	429a      	cmp	r2, r3
 80113ae:	d208      	bcs.n	80113c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80113b0:	4b3c      	ldr	r3, [pc, #240]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 80113b2:	699b      	ldr	r3, [r3, #24]
 80113b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	691b      	ldr	r3, [r3, #16]
 80113bc:	4939      	ldr	r1, [pc, #228]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 80113be:	4313      	orrs	r3, r2
 80113c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	f003 0308 	and.w	r3, r3, #8
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d010      	beq.n	80113f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	695a      	ldr	r2, [r3, #20]
 80113d2:	4b34      	ldr	r3, [pc, #208]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 80113d4:	69db      	ldr	r3, [r3, #28]
 80113d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80113da:	429a      	cmp	r2, r3
 80113dc:	d208      	bcs.n	80113f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80113de:	4b31      	ldr	r3, [pc, #196]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 80113e0:	69db      	ldr	r3, [r3, #28]
 80113e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	695b      	ldr	r3, [r3, #20]
 80113ea:	492e      	ldr	r1, [pc, #184]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 80113ec:	4313      	orrs	r3, r2
 80113ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f003 0310 	and.w	r3, r3, #16
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d010      	beq.n	801141e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	699a      	ldr	r2, [r3, #24]
 8011400:	4b28      	ldr	r3, [pc, #160]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 8011402:	69db      	ldr	r3, [r3, #28]
 8011404:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011408:	429a      	cmp	r2, r3
 801140a:	d208      	bcs.n	801141e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801140c:	4b25      	ldr	r3, [pc, #148]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 801140e:	69db      	ldr	r3, [r3, #28]
 8011410:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	699b      	ldr	r3, [r3, #24]
 8011418:	4922      	ldr	r1, [pc, #136]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 801141a:	4313      	orrs	r3, r2
 801141c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	f003 0320 	and.w	r3, r3, #32
 8011426:	2b00      	cmp	r3, #0
 8011428:	d010      	beq.n	801144c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	69da      	ldr	r2, [r3, #28]
 801142e:	4b1d      	ldr	r3, [pc, #116]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 8011430:	6a1b      	ldr	r3, [r3, #32]
 8011432:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011436:	429a      	cmp	r2, r3
 8011438:	d208      	bcs.n	801144c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801143a:	4b1a      	ldr	r3, [pc, #104]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 801143c:	6a1b      	ldr	r3, [r3, #32]
 801143e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	69db      	ldr	r3, [r3, #28]
 8011446:	4917      	ldr	r1, [pc, #92]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 8011448:	4313      	orrs	r3, r2
 801144a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801144c:	f000 f834 	bl	80114b8 <HAL_RCC_GetSysClockFreq>
 8011450:	4602      	mov	r2, r0
 8011452:	4b14      	ldr	r3, [pc, #80]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 8011454:	699b      	ldr	r3, [r3, #24]
 8011456:	0a1b      	lsrs	r3, r3, #8
 8011458:	f003 030f 	and.w	r3, r3, #15
 801145c:	4912      	ldr	r1, [pc, #72]	@ (80114a8 <HAL_RCC_ClockConfig+0x35c>)
 801145e:	5ccb      	ldrb	r3, [r1, r3]
 8011460:	f003 031f 	and.w	r3, r3, #31
 8011464:	fa22 f303 	lsr.w	r3, r2, r3
 8011468:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801146a:	4b0e      	ldr	r3, [pc, #56]	@ (80114a4 <HAL_RCC_ClockConfig+0x358>)
 801146c:	699b      	ldr	r3, [r3, #24]
 801146e:	f003 030f 	and.w	r3, r3, #15
 8011472:	4a0d      	ldr	r2, [pc, #52]	@ (80114a8 <HAL_RCC_ClockConfig+0x35c>)
 8011474:	5cd3      	ldrb	r3, [r2, r3]
 8011476:	f003 031f 	and.w	r3, r3, #31
 801147a:	693a      	ldr	r2, [r7, #16]
 801147c:	fa22 f303 	lsr.w	r3, r2, r3
 8011480:	4a0a      	ldr	r2, [pc, #40]	@ (80114ac <HAL_RCC_ClockConfig+0x360>)
 8011482:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011484:	4a0a      	ldr	r2, [pc, #40]	@ (80114b0 <HAL_RCC_ClockConfig+0x364>)
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801148a:	4b0a      	ldr	r3, [pc, #40]	@ (80114b4 <HAL_RCC_ClockConfig+0x368>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	4618      	mov	r0, r3
 8011490:	f7f7 fbe2 	bl	8008c58 <HAL_InitTick>
 8011494:	4603      	mov	r3, r0
 8011496:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011498:	7bfb      	ldrb	r3, [r7, #15]
}
 801149a:	4618      	mov	r0, r3
 801149c:	3718      	adds	r7, #24
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
 80114a2:	bf00      	nop
 80114a4:	58024400 	.word	0x58024400
 80114a8:	0801e37c 	.word	0x0801e37c
 80114ac:	24000008 	.word	0x24000008
 80114b0:	24000004 	.word	0x24000004
 80114b4:	2400000c 	.word	0x2400000c

080114b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b089      	sub	sp, #36	@ 0x24
 80114bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80114be:	4bb3      	ldr	r3, [pc, #716]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80114c0:	691b      	ldr	r3, [r3, #16]
 80114c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80114c6:	2b18      	cmp	r3, #24
 80114c8:	f200 8155 	bhi.w	8011776 <HAL_RCC_GetSysClockFreq+0x2be>
 80114cc:	a201      	add	r2, pc, #4	@ (adr r2, 80114d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80114ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d2:	bf00      	nop
 80114d4:	08011539 	.word	0x08011539
 80114d8:	08011777 	.word	0x08011777
 80114dc:	08011777 	.word	0x08011777
 80114e0:	08011777 	.word	0x08011777
 80114e4:	08011777 	.word	0x08011777
 80114e8:	08011777 	.word	0x08011777
 80114ec:	08011777 	.word	0x08011777
 80114f0:	08011777 	.word	0x08011777
 80114f4:	0801155f 	.word	0x0801155f
 80114f8:	08011777 	.word	0x08011777
 80114fc:	08011777 	.word	0x08011777
 8011500:	08011777 	.word	0x08011777
 8011504:	08011777 	.word	0x08011777
 8011508:	08011777 	.word	0x08011777
 801150c:	08011777 	.word	0x08011777
 8011510:	08011777 	.word	0x08011777
 8011514:	08011565 	.word	0x08011565
 8011518:	08011777 	.word	0x08011777
 801151c:	08011777 	.word	0x08011777
 8011520:	08011777 	.word	0x08011777
 8011524:	08011777 	.word	0x08011777
 8011528:	08011777 	.word	0x08011777
 801152c:	08011777 	.word	0x08011777
 8011530:	08011777 	.word	0x08011777
 8011534:	0801156b 	.word	0x0801156b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011538:	4b94      	ldr	r3, [pc, #592]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	f003 0320 	and.w	r3, r3, #32
 8011540:	2b00      	cmp	r3, #0
 8011542:	d009      	beq.n	8011558 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011544:	4b91      	ldr	r3, [pc, #580]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	08db      	lsrs	r3, r3, #3
 801154a:	f003 0303 	and.w	r3, r3, #3
 801154e:	4a90      	ldr	r2, [pc, #576]	@ (8011790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011550:	fa22 f303 	lsr.w	r3, r2, r3
 8011554:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011556:	e111      	b.n	801177c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011558:	4b8d      	ldr	r3, [pc, #564]	@ (8011790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801155a:	61bb      	str	r3, [r7, #24]
      break;
 801155c:	e10e      	b.n	801177c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801155e:	4b8d      	ldr	r3, [pc, #564]	@ (8011794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011560:	61bb      	str	r3, [r7, #24]
      break;
 8011562:	e10b      	b.n	801177c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011564:	4b8c      	ldr	r3, [pc, #560]	@ (8011798 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011566:	61bb      	str	r3, [r7, #24]
      break;
 8011568:	e108      	b.n	801177c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801156a:	4b88      	ldr	r3, [pc, #544]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801156e:	f003 0303 	and.w	r3, r3, #3
 8011572:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011574:	4b85      	ldr	r3, [pc, #532]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011578:	091b      	lsrs	r3, r3, #4
 801157a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801157e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8011580:	4b82      	ldr	r3, [pc, #520]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011584:	f003 0301 	and.w	r3, r3, #1
 8011588:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801158a:	4b80      	ldr	r3, [pc, #512]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801158c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801158e:	08db      	lsrs	r3, r3, #3
 8011590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011594:	68fa      	ldr	r2, [r7, #12]
 8011596:	fb02 f303 	mul.w	r3, r2, r3
 801159a:	ee07 3a90 	vmov	s15, r3
 801159e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 80e1 	beq.w	8011770 <HAL_RCC_GetSysClockFreq+0x2b8>
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	2b02      	cmp	r3, #2
 80115b2:	f000 8083 	beq.w	80116bc <HAL_RCC_GetSysClockFreq+0x204>
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	2b02      	cmp	r3, #2
 80115ba:	f200 80a1 	bhi.w	8011700 <HAL_RCC_GetSysClockFreq+0x248>
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d003      	beq.n	80115cc <HAL_RCC_GetSysClockFreq+0x114>
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d056      	beq.n	8011678 <HAL_RCC_GetSysClockFreq+0x1c0>
 80115ca:	e099      	b.n	8011700 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80115cc:	4b6f      	ldr	r3, [pc, #444]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	f003 0320 	and.w	r3, r3, #32
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d02d      	beq.n	8011634 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80115d8:	4b6c      	ldr	r3, [pc, #432]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	08db      	lsrs	r3, r3, #3
 80115de:	f003 0303 	and.w	r3, r3, #3
 80115e2:	4a6b      	ldr	r2, [pc, #428]	@ (8011790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80115e4:	fa22 f303 	lsr.w	r3, r2, r3
 80115e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	ee07 3a90 	vmov	s15, r3
 80115f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	ee07 3a90 	vmov	s15, r3
 80115fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011602:	4b62      	ldr	r3, [pc, #392]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801160a:	ee07 3a90 	vmov	s15, r3
 801160e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011612:	ed97 6a02 	vldr	s12, [r7, #8]
 8011616:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801179c <HAL_RCC_GetSysClockFreq+0x2e4>
 801161a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801161e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801162a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801162e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011632:	e087      	b.n	8011744 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	ee07 3a90 	vmov	s15, r3
 801163a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801163e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80117a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8011642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011646:	4b51      	ldr	r3, [pc, #324]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801164a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801164e:	ee07 3a90 	vmov	s15, r3
 8011652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011656:	ed97 6a02 	vldr	s12, [r7, #8]
 801165a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801179c <HAL_RCC_GetSysClockFreq+0x2e4>
 801165e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801166a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801166e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011676:	e065      	b.n	8011744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	ee07 3a90 	vmov	s15, r3
 801167e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011682:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80117a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801168a:	4b40      	ldr	r3, [pc, #256]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801168e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011692:	ee07 3a90 	vmov	s15, r3
 8011696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801169a:	ed97 6a02 	vldr	s12, [r7, #8]
 801169e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801179c <HAL_RCC_GetSysClockFreq+0x2e4>
 80116a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80116a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80116aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80116ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80116ba:	e043      	b.n	8011744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	ee07 3a90 	vmov	s15, r3
 80116c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80117a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80116ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80116ce:	4b2f      	ldr	r3, [pc, #188]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80116d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116d6:	ee07 3a90 	vmov	s15, r3
 80116da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80116de:	ed97 6a02 	vldr	s12, [r7, #8]
 80116e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801179c <HAL_RCC_GetSysClockFreq+0x2e4>
 80116e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80116ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80116ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80116f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80116fe:	e021      	b.n	8011744 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	ee07 3a90 	vmov	s15, r3
 8011706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801170a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80117a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801170e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011712:	4b1e      	ldr	r3, [pc, #120]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801171a:	ee07 3a90 	vmov	s15, r3
 801171e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011722:	ed97 6a02 	vldr	s12, [r7, #8]
 8011726:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801179c <HAL_RCC_GetSysClockFreq+0x2e4>
 801172a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801172e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801173a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801173e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011742:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011744:	4b11      	ldr	r3, [pc, #68]	@ (801178c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011748:	0a5b      	lsrs	r3, r3, #9
 801174a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801174e:	3301      	adds	r3, #1
 8011750:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	ee07 3a90 	vmov	s15, r3
 8011758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801175c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011768:	ee17 3a90 	vmov	r3, s15
 801176c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801176e:	e005      	b.n	801177c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011770:	2300      	movs	r3, #0
 8011772:	61bb      	str	r3, [r7, #24]
      break;
 8011774:	e002      	b.n	801177c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011776:	4b07      	ldr	r3, [pc, #28]	@ (8011794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011778:	61bb      	str	r3, [r7, #24]
      break;
 801177a:	bf00      	nop
  }

  return sysclockfreq;
 801177c:	69bb      	ldr	r3, [r7, #24]
}
 801177e:	4618      	mov	r0, r3
 8011780:	3724      	adds	r7, #36	@ 0x24
 8011782:	46bd      	mov	sp, r7
 8011784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011788:	4770      	bx	lr
 801178a:	bf00      	nop
 801178c:	58024400 	.word	0x58024400
 8011790:	03d09000 	.word	0x03d09000
 8011794:	003d0900 	.word	0x003d0900
 8011798:	016e3600 	.word	0x016e3600
 801179c:	46000000 	.word	0x46000000
 80117a0:	4c742400 	.word	0x4c742400
 80117a4:	4a742400 	.word	0x4a742400
 80117a8:	4bb71b00 	.word	0x4bb71b00

080117ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80117b2:	f7ff fe81 	bl	80114b8 <HAL_RCC_GetSysClockFreq>
 80117b6:	4602      	mov	r2, r0
 80117b8:	4b10      	ldr	r3, [pc, #64]	@ (80117fc <HAL_RCC_GetHCLKFreq+0x50>)
 80117ba:	699b      	ldr	r3, [r3, #24]
 80117bc:	0a1b      	lsrs	r3, r3, #8
 80117be:	f003 030f 	and.w	r3, r3, #15
 80117c2:	490f      	ldr	r1, [pc, #60]	@ (8011800 <HAL_RCC_GetHCLKFreq+0x54>)
 80117c4:	5ccb      	ldrb	r3, [r1, r3]
 80117c6:	f003 031f 	and.w	r3, r3, #31
 80117ca:	fa22 f303 	lsr.w	r3, r2, r3
 80117ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80117d0:	4b0a      	ldr	r3, [pc, #40]	@ (80117fc <HAL_RCC_GetHCLKFreq+0x50>)
 80117d2:	699b      	ldr	r3, [r3, #24]
 80117d4:	f003 030f 	and.w	r3, r3, #15
 80117d8:	4a09      	ldr	r2, [pc, #36]	@ (8011800 <HAL_RCC_GetHCLKFreq+0x54>)
 80117da:	5cd3      	ldrb	r3, [r2, r3]
 80117dc:	f003 031f 	and.w	r3, r3, #31
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	fa22 f303 	lsr.w	r3, r2, r3
 80117e6:	4a07      	ldr	r2, [pc, #28]	@ (8011804 <HAL_RCC_GetHCLKFreq+0x58>)
 80117e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80117ea:	4a07      	ldr	r2, [pc, #28]	@ (8011808 <HAL_RCC_GetHCLKFreq+0x5c>)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80117f0:	4b04      	ldr	r3, [pc, #16]	@ (8011804 <HAL_RCC_GetHCLKFreq+0x58>)
 80117f2:	681b      	ldr	r3, [r3, #0]
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3708      	adds	r7, #8
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	58024400 	.word	0x58024400
 8011800:	0801e37c 	.word	0x0801e37c
 8011804:	24000008 	.word	0x24000008
 8011808:	24000004 	.word	0x24000004

0801180c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011810:	f7ff ffcc 	bl	80117ac <HAL_RCC_GetHCLKFreq>
 8011814:	4602      	mov	r2, r0
 8011816:	4b06      	ldr	r3, [pc, #24]	@ (8011830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011818:	69db      	ldr	r3, [r3, #28]
 801181a:	091b      	lsrs	r3, r3, #4
 801181c:	f003 0307 	and.w	r3, r3, #7
 8011820:	4904      	ldr	r1, [pc, #16]	@ (8011834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011822:	5ccb      	ldrb	r3, [r1, r3]
 8011824:	f003 031f 	and.w	r3, r3, #31
 8011828:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801182c:	4618      	mov	r0, r3
 801182e:	bd80      	pop	{r7, pc}
 8011830:	58024400 	.word	0x58024400
 8011834:	0801e37c 	.word	0x0801e37c

08011838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801183c:	f7ff ffb6 	bl	80117ac <HAL_RCC_GetHCLKFreq>
 8011840:	4602      	mov	r2, r0
 8011842:	4b06      	ldr	r3, [pc, #24]	@ (801185c <HAL_RCC_GetPCLK2Freq+0x24>)
 8011844:	69db      	ldr	r3, [r3, #28]
 8011846:	0a1b      	lsrs	r3, r3, #8
 8011848:	f003 0307 	and.w	r3, r3, #7
 801184c:	4904      	ldr	r1, [pc, #16]	@ (8011860 <HAL_RCC_GetPCLK2Freq+0x28>)
 801184e:	5ccb      	ldrb	r3, [r1, r3]
 8011850:	f003 031f 	and.w	r3, r3, #31
 8011854:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011858:	4618      	mov	r0, r3
 801185a:	bd80      	pop	{r7, pc}
 801185c:	58024400 	.word	0x58024400
 8011860:	0801e37c 	.word	0x0801e37c

08011864 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011868:	b0c6      	sub	sp, #280	@ 0x118
 801186a:	af00      	add	r7, sp, #0
 801186c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011870:	2300      	movs	r3, #0
 8011872:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011876:	2300      	movs	r3, #0
 8011878:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801187c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8011888:	2500      	movs	r5, #0
 801188a:	ea54 0305 	orrs.w	r3, r4, r5
 801188e:	d049      	beq.n	8011924 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8011890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011894:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011896:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801189a:	d02f      	beq.n	80118fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 801189c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80118a0:	d828      	bhi.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80118a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80118a6:	d01a      	beq.n	80118de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80118a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80118ac:	d822      	bhi.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d003      	beq.n	80118ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80118b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80118b6:	d007      	beq.n	80118c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80118b8:	e01c      	b.n	80118f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80118ba:	4bab      	ldr	r3, [pc, #684]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80118bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118be:	4aaa      	ldr	r2, [pc, #680]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80118c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80118c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80118c6:	e01a      	b.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80118c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80118cc:	3308      	adds	r3, #8
 80118ce:	2102      	movs	r1, #2
 80118d0:	4618      	mov	r0, r3
 80118d2:	f002 fa49 	bl	8013d68 <RCCEx_PLL2_Config>
 80118d6:	4603      	mov	r3, r0
 80118d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80118dc:	e00f      	b.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80118de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80118e2:	3328      	adds	r3, #40	@ 0x28
 80118e4:	2102      	movs	r1, #2
 80118e6:	4618      	mov	r0, r3
 80118e8:	f002 faf0 	bl	8013ecc <RCCEx_PLL3_Config>
 80118ec:	4603      	mov	r3, r0
 80118ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80118f2:	e004      	b.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80118f4:	2301      	movs	r3, #1
 80118f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80118fa:	e000      	b.n	80118fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80118fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80118fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011902:	2b00      	cmp	r3, #0
 8011904:	d10a      	bne.n	801191c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011906:	4b98      	ldr	r3, [pc, #608]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801190a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801190e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011914:	4a94      	ldr	r2, [pc, #592]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011916:	430b      	orrs	r3, r1
 8011918:	6513      	str	r3, [r2, #80]	@ 0x50
 801191a:	e003      	b.n	8011924 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801191c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011920:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8011930:	f04f 0900 	mov.w	r9, #0
 8011934:	ea58 0309 	orrs.w	r3, r8, r9
 8011938:	d047      	beq.n	80119ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801193a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011940:	2b04      	cmp	r3, #4
 8011942:	d82a      	bhi.n	801199a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8011944:	a201      	add	r2, pc, #4	@ (adr r2, 801194c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8011946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801194a:	bf00      	nop
 801194c:	08011961 	.word	0x08011961
 8011950:	0801196f 	.word	0x0801196f
 8011954:	08011985 	.word	0x08011985
 8011958:	080119a3 	.word	0x080119a3
 801195c:	080119a3 	.word	0x080119a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011960:	4b81      	ldr	r3, [pc, #516]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011964:	4a80      	ldr	r2, [pc, #512]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801196a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801196c:	e01a      	b.n	80119a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801196e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011972:	3308      	adds	r3, #8
 8011974:	2100      	movs	r1, #0
 8011976:	4618      	mov	r0, r3
 8011978:	f002 f9f6 	bl	8013d68 <RCCEx_PLL2_Config>
 801197c:	4603      	mov	r3, r0
 801197e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011982:	e00f      	b.n	80119a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011988:	3328      	adds	r3, #40	@ 0x28
 801198a:	2100      	movs	r1, #0
 801198c:	4618      	mov	r0, r3
 801198e:	f002 fa9d 	bl	8013ecc <RCCEx_PLL3_Config>
 8011992:	4603      	mov	r3, r0
 8011994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011998:	e004      	b.n	80119a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801199a:	2301      	movs	r3, #1
 801199c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80119a0:	e000      	b.n	80119a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80119a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80119a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d10a      	bne.n	80119c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80119ac:	4b6e      	ldr	r3, [pc, #440]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80119ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80119b0:	f023 0107 	bic.w	r1, r3, #7
 80119b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80119ba:	4a6b      	ldr	r2, [pc, #428]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80119bc:	430b      	orrs	r3, r1
 80119be:	6513      	str	r3, [r2, #80]	@ 0x50
 80119c0:	e003      	b.n	80119ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80119c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80119ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80119d6:	f04f 0b00 	mov.w	fp, #0
 80119da:	ea5a 030b 	orrs.w	r3, sl, fp
 80119de:	d05b      	beq.n	8011a98 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80119e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80119e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80119e8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80119ec:	d03b      	beq.n	8011a66 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80119ee:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80119f2:	d834      	bhi.n	8011a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80119f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80119f8:	d037      	beq.n	8011a6a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80119fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80119fe:	d82e      	bhi.n	8011a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011a00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011a04:	d033      	beq.n	8011a6e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011a06:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011a0a:	d828      	bhi.n	8011a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011a0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011a10:	d01a      	beq.n	8011a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8011a12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011a16:	d822      	bhi.n	8011a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d003      	beq.n	8011a24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8011a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011a20:	d007      	beq.n	8011a32 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8011a22:	e01c      	b.n	8011a5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011a24:	4b50      	ldr	r3, [pc, #320]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a28:	4a4f      	ldr	r2, [pc, #316]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011a30:	e01e      	b.n	8011a70 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a36:	3308      	adds	r3, #8
 8011a38:	2100      	movs	r1, #0
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f002 f994 	bl	8013d68 <RCCEx_PLL2_Config>
 8011a40:	4603      	mov	r3, r0
 8011a42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011a46:	e013      	b.n	8011a70 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a4c:	3328      	adds	r3, #40	@ 0x28
 8011a4e:	2100      	movs	r1, #0
 8011a50:	4618      	mov	r0, r3
 8011a52:	f002 fa3b 	bl	8013ecc <RCCEx_PLL3_Config>
 8011a56:	4603      	mov	r3, r0
 8011a58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011a5c:	e008      	b.n	8011a70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011a5e:	2301      	movs	r3, #1
 8011a60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011a64:	e004      	b.n	8011a70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011a66:	bf00      	nop
 8011a68:	e002      	b.n	8011a70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011a6a:	bf00      	nop
 8011a6c:	e000      	b.n	8011a70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d10b      	bne.n	8011a90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011a78:	4b3b      	ldr	r3, [pc, #236]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a7c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8011a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011a88:	4a37      	ldr	r2, [pc, #220]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011a8a:	430b      	orrs	r3, r1
 8011a8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8011a8e:	e003      	b.n	8011a98 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011a94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8011aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8011aae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	4313      	orrs	r3, r2
 8011ab6:	d05d      	beq.n	8011b74 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8011ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011abc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011ac0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011ac4:	d03b      	beq.n	8011b3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8011ac6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8011aca:	d834      	bhi.n	8011b36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011acc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011ad0:	d037      	beq.n	8011b42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8011ad2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011ad6:	d82e      	bhi.n	8011b36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011ad8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011adc:	d033      	beq.n	8011b46 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8011ade:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011ae2:	d828      	bhi.n	8011b36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011ae8:	d01a      	beq.n	8011b20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8011aea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011aee:	d822      	bhi.n	8011b36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d003      	beq.n	8011afc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011af8:	d007      	beq.n	8011b0a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011afa:	e01c      	b.n	8011b36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011afc:	4b1a      	ldr	r3, [pc, #104]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b00:	4a19      	ldr	r2, [pc, #100]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011b06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011b08:	e01e      	b.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b0e:	3308      	adds	r3, #8
 8011b10:	2100      	movs	r1, #0
 8011b12:	4618      	mov	r0, r3
 8011b14:	f002 f928 	bl	8013d68 <RCCEx_PLL2_Config>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011b1e:	e013      	b.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b24:	3328      	adds	r3, #40	@ 0x28
 8011b26:	2100      	movs	r1, #0
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f002 f9cf 	bl	8013ecc <RCCEx_PLL3_Config>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011b34:	e008      	b.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011b36:	2301      	movs	r3, #1
 8011b38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011b3c:	e004      	b.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011b3e:	bf00      	nop
 8011b40:	e002      	b.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011b42:	bf00      	nop
 8011b44:	e000      	b.n	8011b48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011b48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d10d      	bne.n	8011b6c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8011b50:	4b05      	ldr	r3, [pc, #20]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011b54:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8011b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8011b60:	4a01      	ldr	r2, [pc, #4]	@ (8011b68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011b62:	430b      	orrs	r3, r1
 8011b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8011b66:	e005      	b.n	8011b74 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8011b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011b70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8011b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8011b80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8011b84:	2300      	movs	r3, #0
 8011b86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011b8a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8011b8e:	460b      	mov	r3, r1
 8011b90:	4313      	orrs	r3, r2
 8011b92:	d03a      	beq.n	8011c0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8011b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b9a:	2b30      	cmp	r3, #48	@ 0x30
 8011b9c:	d01f      	beq.n	8011bde <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8011b9e:	2b30      	cmp	r3, #48	@ 0x30
 8011ba0:	d819      	bhi.n	8011bd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011ba2:	2b20      	cmp	r3, #32
 8011ba4:	d00c      	beq.n	8011bc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8011ba6:	2b20      	cmp	r3, #32
 8011ba8:	d815      	bhi.n	8011bd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d019      	beq.n	8011be2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8011bae:	2b10      	cmp	r3, #16
 8011bb0:	d111      	bne.n	8011bd6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011bb2:	4baa      	ldr	r3, [pc, #680]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bb6:	4aa9      	ldr	r2, [pc, #676]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011bbe:	e011      	b.n	8011be4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011bc4:	3308      	adds	r3, #8
 8011bc6:	2102      	movs	r1, #2
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f002 f8cd 	bl	8013d68 <RCCEx_PLL2_Config>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011bd4:	e006      	b.n	8011be4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011bdc:	e002      	b.n	8011be4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011bde:	bf00      	nop
 8011be0:	e000      	b.n	8011be4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011be4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d10a      	bne.n	8011c02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8011bec:	4b9b      	ldr	r3, [pc, #620]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011bf0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8011bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011bfa:	4a98      	ldr	r2, [pc, #608]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011bfc:	430b      	orrs	r3, r1
 8011bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011c00:	e003      	b.n	8011c0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011c06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c12:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8011c16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8011c20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8011c24:	460b      	mov	r3, r1
 8011c26:	4313      	orrs	r3, r2
 8011c28:	d051      	beq.n	8011cce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8011c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011c30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011c34:	d035      	beq.n	8011ca2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8011c36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011c3a:	d82e      	bhi.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011c3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011c40:	d031      	beq.n	8011ca6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8011c42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8011c46:	d828      	bhi.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011c4c:	d01a      	beq.n	8011c84 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8011c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011c52:	d822      	bhi.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d003      	beq.n	8011c60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8011c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011c5c:	d007      	beq.n	8011c6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8011c5e:	e01c      	b.n	8011c9a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011c60:	4b7e      	ldr	r3, [pc, #504]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c64:	4a7d      	ldr	r2, [pc, #500]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8011c6c:	e01c      	b.n	8011ca8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c72:	3308      	adds	r3, #8
 8011c74:	2100      	movs	r1, #0
 8011c76:	4618      	mov	r0, r3
 8011c78:	f002 f876 	bl	8013d68 <RCCEx_PLL2_Config>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8011c82:	e011      	b.n	8011ca8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011c88:	3328      	adds	r3, #40	@ 0x28
 8011c8a:	2100      	movs	r1, #0
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f002 f91d 	bl	8013ecc <RCCEx_PLL3_Config>
 8011c92:	4603      	mov	r3, r0
 8011c94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8011c98:	e006      	b.n	8011ca8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011ca0:	e002      	b.n	8011ca8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8011ca2:	bf00      	nop
 8011ca4:	e000      	b.n	8011ca8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8011ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d10a      	bne.n	8011cc6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8011cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011cb4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8011cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011cbe:	4a67      	ldr	r2, [pc, #412]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011cc0:	430b      	orrs	r3, r1
 8011cc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8011cc4:	e003      	b.n	8011cce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011cc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011cca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8011cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8011cda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011cde:	2300      	movs	r3, #0
 8011ce0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011ce4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8011ce8:	460b      	mov	r3, r1
 8011cea:	4313      	orrs	r3, r2
 8011cec:	d053      	beq.n	8011d96 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8011cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011cf8:	d033      	beq.n	8011d62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8011cfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011cfe:	d82c      	bhi.n	8011d5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011d00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011d04:	d02f      	beq.n	8011d66 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8011d06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011d0a:	d826      	bhi.n	8011d5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011d0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011d10:	d02b      	beq.n	8011d6a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8011d12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011d16:	d820      	bhi.n	8011d5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011d1c:	d012      	beq.n	8011d44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8011d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011d22:	d81a      	bhi.n	8011d5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d022      	beq.n	8011d6e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8011d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d2c:	d115      	bne.n	8011d5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d32:	3308      	adds	r3, #8
 8011d34:	2101      	movs	r1, #1
 8011d36:	4618      	mov	r0, r3
 8011d38:	f002 f816 	bl	8013d68 <RCCEx_PLL2_Config>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8011d42:	e015      	b.n	8011d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d48:	3328      	adds	r3, #40	@ 0x28
 8011d4a:	2101      	movs	r1, #1
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f002 f8bd 	bl	8013ecc <RCCEx_PLL3_Config>
 8011d52:	4603      	mov	r3, r0
 8011d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8011d58:	e00a      	b.n	8011d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011d60:	e006      	b.n	8011d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011d62:	bf00      	nop
 8011d64:	e004      	b.n	8011d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011d66:	bf00      	nop
 8011d68:	e002      	b.n	8011d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011d6a:	bf00      	nop
 8011d6c:	e000      	b.n	8011d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011d70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d10a      	bne.n	8011d8e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011d78:	4b38      	ldr	r3, [pc, #224]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8011d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011d86:	4a35      	ldr	r2, [pc, #212]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011d88:	430b      	orrs	r3, r1
 8011d8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8011d8c:	e003      	b.n	8011d96 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011d92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8011d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8011da2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011da6:	2300      	movs	r3, #0
 8011da8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8011dac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011db0:	460b      	mov	r3, r1
 8011db2:	4313      	orrs	r3, r2
 8011db4:	d058      	beq.n	8011e68 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8011db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011dc2:	d033      	beq.n	8011e2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8011dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011dc8:	d82c      	bhi.n	8011e24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011dce:	d02f      	beq.n	8011e30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8011dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011dd4:	d826      	bhi.n	8011e24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011dd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011dda:	d02b      	beq.n	8011e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8011ddc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011de0:	d820      	bhi.n	8011e24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011de2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011de6:	d012      	beq.n	8011e0e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8011de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011dec:	d81a      	bhi.n	8011e24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d022      	beq.n	8011e38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8011df2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011df6:	d115      	bne.n	8011e24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011dfc:	3308      	adds	r3, #8
 8011dfe:	2101      	movs	r1, #1
 8011e00:	4618      	mov	r0, r3
 8011e02:	f001 ffb1 	bl	8013d68 <RCCEx_PLL2_Config>
 8011e06:	4603      	mov	r3, r0
 8011e08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8011e0c:	e015      	b.n	8011e3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e12:	3328      	adds	r3, #40	@ 0x28
 8011e14:	2101      	movs	r1, #1
 8011e16:	4618      	mov	r0, r3
 8011e18:	f002 f858 	bl	8013ecc <RCCEx_PLL3_Config>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8011e22:	e00a      	b.n	8011e3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8011e24:	2301      	movs	r3, #1
 8011e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011e2a:	e006      	b.n	8011e3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011e2c:	bf00      	nop
 8011e2e:	e004      	b.n	8011e3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011e30:	bf00      	nop
 8011e32:	e002      	b.n	8011e3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011e34:	bf00      	nop
 8011e36:	e000      	b.n	8011e3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d10e      	bne.n	8011e60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8011e42:	4b06      	ldr	r3, [pc, #24]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8011e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011e52:	4a02      	ldr	r2, [pc, #8]	@ (8011e5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011e54:	430b      	orrs	r3, r1
 8011e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8011e58:	e006      	b.n	8011e68 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8011e5a:	bf00      	nop
 8011e5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8011e74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011e78:	2300      	movs	r3, #0
 8011e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011e7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8011e82:	460b      	mov	r3, r1
 8011e84:	4313      	orrs	r3, r2
 8011e86:	d037      	beq.n	8011ef8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8011e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e92:	d00e      	beq.n	8011eb2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8011e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e98:	d816      	bhi.n	8011ec8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d018      	beq.n	8011ed0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8011e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011ea2:	d111      	bne.n	8011ec8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011ea4:	4bc4      	ldr	r3, [pc, #784]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ea8:	4ac3      	ldr	r2, [pc, #780]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8011eb0:	e00f      	b.n	8011ed2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011eb6:	3308      	adds	r3, #8
 8011eb8:	2101      	movs	r1, #1
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f001 ff54 	bl	8013d68 <RCCEx_PLL2_Config>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8011ec6:	e004      	b.n	8011ed2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011ec8:	2301      	movs	r3, #1
 8011eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011ece:	e000      	b.n	8011ed2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8011ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011ed2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d10a      	bne.n	8011ef0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011eda:	4bb7      	ldr	r3, [pc, #732]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ede:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8011ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ee8:	4ab3      	ldr	r2, [pc, #716]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011eea:	430b      	orrs	r3, r1
 8011eec:	6513      	str	r3, [r2, #80]	@ 0x50
 8011eee:	e003      	b.n	8011ef8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011ef4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8011ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8011f04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011f08:	2300      	movs	r3, #0
 8011f0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011f0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8011f12:	460b      	mov	r3, r1
 8011f14:	4313      	orrs	r3, r2
 8011f16:	d039      	beq.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8011f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f1e:	2b03      	cmp	r3, #3
 8011f20:	d81c      	bhi.n	8011f5c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8011f22:	a201      	add	r2, pc, #4	@ (adr r2, 8011f28 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8011f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f28:	08011f65 	.word	0x08011f65
 8011f2c:	08011f39 	.word	0x08011f39
 8011f30:	08011f47 	.word	0x08011f47
 8011f34:	08011f65 	.word	0x08011f65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011f38:	4b9f      	ldr	r3, [pc, #636]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f3c:	4a9e      	ldr	r2, [pc, #632]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8011f44:	e00f      	b.n	8011f66 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f4a:	3308      	adds	r3, #8
 8011f4c:	2102      	movs	r1, #2
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f001 ff0a 	bl	8013d68 <RCCEx_PLL2_Config>
 8011f54:	4603      	mov	r3, r0
 8011f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8011f5a:	e004      	b.n	8011f66 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011f62:	e000      	b.n	8011f66 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8011f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d10a      	bne.n	8011f84 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8011f6e:	4b92      	ldr	r3, [pc, #584]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f72:	f023 0103 	bic.w	r1, r3, #3
 8011f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f7c:	4a8e      	ldr	r2, [pc, #568]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011f7e:	430b      	orrs	r3, r1
 8011f80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011f82:	e003      	b.n	8011f8c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011f88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8011f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011fa2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	4313      	orrs	r3, r2
 8011faa:	f000 8099 	beq.w	80120e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011fae:	4b83      	ldr	r3, [pc, #524]	@ (80121bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	4a82      	ldr	r2, [pc, #520]	@ (80121bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011fb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011fba:	f7f6 fe97 	bl	8008cec <HAL_GetTick>
 8011fbe:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011fc2:	e00b      	b.n	8011fdc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011fc4:	f7f6 fe92 	bl	8008cec <HAL_GetTick>
 8011fc8:	4602      	mov	r2, r0
 8011fca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8011fce:	1ad3      	subs	r3, r2, r3
 8011fd0:	2b64      	cmp	r3, #100	@ 0x64
 8011fd2:	d903      	bls.n	8011fdc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8011fd4:	2303      	movs	r3, #3
 8011fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8011fda:	e005      	b.n	8011fe8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011fdc:	4b77      	ldr	r3, [pc, #476]	@ (80121bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d0ed      	beq.n	8011fc4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8011fe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d173      	bne.n	80120d8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011ff0:	4b71      	ldr	r3, [pc, #452]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011ff2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8011ff8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011ffc:	4053      	eors	r3, r2
 8011ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012002:	2b00      	cmp	r3, #0
 8012004:	d015      	beq.n	8012032 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012006:	4b6c      	ldr	r3, [pc, #432]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801200a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801200e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012012:	4b69      	ldr	r3, [pc, #420]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012016:	4a68      	ldr	r2, [pc, #416]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801201c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801201e:	4b66      	ldr	r3, [pc, #408]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012022:	4a65      	ldr	r2, [pc, #404]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012028:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801202a:	4a63      	ldr	r2, [pc, #396]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801202c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012030:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012036:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801203a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801203e:	d118      	bne.n	8012072 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012040:	f7f6 fe54 	bl	8008cec <HAL_GetTick>
 8012044:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012048:	e00d      	b.n	8012066 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801204a:	f7f6 fe4f 	bl	8008cec <HAL_GetTick>
 801204e:	4602      	mov	r2, r0
 8012050:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012054:	1ad2      	subs	r2, r2, r3
 8012056:	f241 3388 	movw	r3, #5000	@ 0x1388
 801205a:	429a      	cmp	r2, r3
 801205c:	d903      	bls.n	8012066 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801205e:	2303      	movs	r3, #3
 8012060:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8012064:	e005      	b.n	8012072 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012066:	4b54      	ldr	r3, [pc, #336]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801206a:	f003 0302 	and.w	r3, r3, #2
 801206e:	2b00      	cmp	r3, #0
 8012070:	d0eb      	beq.n	801204a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8012072:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012076:	2b00      	cmp	r3, #0
 8012078:	d129      	bne.n	80120ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801207a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801207e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801208a:	d10e      	bne.n	80120aa <HAL_RCCEx_PeriphCLKConfig+0x846>
 801208c:	4b4a      	ldr	r3, [pc, #296]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801208e:	691b      	ldr	r3, [r3, #16]
 8012090:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012098:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801209c:	091a      	lsrs	r2, r3, #4
 801209e:	4b48      	ldr	r3, [pc, #288]	@ (80121c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80120a0:	4013      	ands	r3, r2
 80120a2:	4a45      	ldr	r2, [pc, #276]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80120a4:	430b      	orrs	r3, r1
 80120a6:	6113      	str	r3, [r2, #16]
 80120a8:	e005      	b.n	80120b6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80120aa:	4b43      	ldr	r3, [pc, #268]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80120ac:	691b      	ldr	r3, [r3, #16]
 80120ae:	4a42      	ldr	r2, [pc, #264]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80120b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80120b4:	6113      	str	r3, [r2, #16]
 80120b6:	4b40      	ldr	r3, [pc, #256]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80120b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80120ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80120c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80120c6:	4a3c      	ldr	r2, [pc, #240]	@ (80121b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80120c8:	430b      	orrs	r3, r1
 80120ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80120cc:	e008      	b.n	80120e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80120ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80120d6:	e003      	b.n	80120e0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80120d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80120dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80120e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80120e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e8:	f002 0301 	and.w	r3, r2, #1
 80120ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80120f0:	2300      	movs	r3, #0
 80120f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80120f6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80120fa:	460b      	mov	r3, r1
 80120fc:	4313      	orrs	r3, r2
 80120fe:	f000 808f 	beq.w	8012220 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012106:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012108:	2b28      	cmp	r3, #40	@ 0x28
 801210a:	d871      	bhi.n	80121f0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 801210c:	a201      	add	r2, pc, #4	@ (adr r2, 8012114 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 801210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012112:	bf00      	nop
 8012114:	080121f9 	.word	0x080121f9
 8012118:	080121f1 	.word	0x080121f1
 801211c:	080121f1 	.word	0x080121f1
 8012120:	080121f1 	.word	0x080121f1
 8012124:	080121f1 	.word	0x080121f1
 8012128:	080121f1 	.word	0x080121f1
 801212c:	080121f1 	.word	0x080121f1
 8012130:	080121f1 	.word	0x080121f1
 8012134:	080121c5 	.word	0x080121c5
 8012138:	080121f1 	.word	0x080121f1
 801213c:	080121f1 	.word	0x080121f1
 8012140:	080121f1 	.word	0x080121f1
 8012144:	080121f1 	.word	0x080121f1
 8012148:	080121f1 	.word	0x080121f1
 801214c:	080121f1 	.word	0x080121f1
 8012150:	080121f1 	.word	0x080121f1
 8012154:	080121db 	.word	0x080121db
 8012158:	080121f1 	.word	0x080121f1
 801215c:	080121f1 	.word	0x080121f1
 8012160:	080121f1 	.word	0x080121f1
 8012164:	080121f1 	.word	0x080121f1
 8012168:	080121f1 	.word	0x080121f1
 801216c:	080121f1 	.word	0x080121f1
 8012170:	080121f1 	.word	0x080121f1
 8012174:	080121f9 	.word	0x080121f9
 8012178:	080121f1 	.word	0x080121f1
 801217c:	080121f1 	.word	0x080121f1
 8012180:	080121f1 	.word	0x080121f1
 8012184:	080121f1 	.word	0x080121f1
 8012188:	080121f1 	.word	0x080121f1
 801218c:	080121f1 	.word	0x080121f1
 8012190:	080121f1 	.word	0x080121f1
 8012194:	080121f9 	.word	0x080121f9
 8012198:	080121f1 	.word	0x080121f1
 801219c:	080121f1 	.word	0x080121f1
 80121a0:	080121f1 	.word	0x080121f1
 80121a4:	080121f1 	.word	0x080121f1
 80121a8:	080121f1 	.word	0x080121f1
 80121ac:	080121f1 	.word	0x080121f1
 80121b0:	080121f1 	.word	0x080121f1
 80121b4:	080121f9 	.word	0x080121f9
 80121b8:	58024400 	.word	0x58024400
 80121bc:	58024800 	.word	0x58024800
 80121c0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80121c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121c8:	3308      	adds	r3, #8
 80121ca:	2101      	movs	r1, #1
 80121cc:	4618      	mov	r0, r3
 80121ce:	f001 fdcb 	bl	8013d68 <RCCEx_PLL2_Config>
 80121d2:	4603      	mov	r3, r0
 80121d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80121d8:	e00f      	b.n	80121fa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80121da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80121de:	3328      	adds	r3, #40	@ 0x28
 80121e0:	2101      	movs	r1, #1
 80121e2:	4618      	mov	r0, r3
 80121e4:	f001 fe72 	bl	8013ecc <RCCEx_PLL3_Config>
 80121e8:	4603      	mov	r3, r0
 80121ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80121ee:	e004      	b.n	80121fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80121f0:	2301      	movs	r3, #1
 80121f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80121f6:	e000      	b.n	80121fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80121f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80121fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d10a      	bne.n	8012218 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012202:	4bbf      	ldr	r3, [pc, #764]	@ (8012500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012206:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801220a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801220e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012210:	4abb      	ldr	r2, [pc, #748]	@ (8012500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012212:	430b      	orrs	r3, r1
 8012214:	6553      	str	r3, [r2, #84]	@ 0x54
 8012216:	e003      	b.n	8012220 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801221c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012228:	f002 0302 	and.w	r3, r2, #2
 801222c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012230:	2300      	movs	r3, #0
 8012232:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012236:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801223a:	460b      	mov	r3, r1
 801223c:	4313      	orrs	r3, r2
 801223e:	d041      	beq.n	80122c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012246:	2b05      	cmp	r3, #5
 8012248:	d824      	bhi.n	8012294 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801224a:	a201      	add	r2, pc, #4	@ (adr r2, 8012250 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 801224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012250:	0801229d 	.word	0x0801229d
 8012254:	08012269 	.word	0x08012269
 8012258:	0801227f 	.word	0x0801227f
 801225c:	0801229d 	.word	0x0801229d
 8012260:	0801229d 	.word	0x0801229d
 8012264:	0801229d 	.word	0x0801229d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801226c:	3308      	adds	r3, #8
 801226e:	2101      	movs	r1, #1
 8012270:	4618      	mov	r0, r3
 8012272:	f001 fd79 	bl	8013d68 <RCCEx_PLL2_Config>
 8012276:	4603      	mov	r3, r0
 8012278:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801227c:	e00f      	b.n	801229e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801227e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012282:	3328      	adds	r3, #40	@ 0x28
 8012284:	2101      	movs	r1, #1
 8012286:	4618      	mov	r0, r3
 8012288:	f001 fe20 	bl	8013ecc <RCCEx_PLL3_Config>
 801228c:	4603      	mov	r3, r0
 801228e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012292:	e004      	b.n	801229e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012294:	2301      	movs	r3, #1
 8012296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801229a:	e000      	b.n	801229e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 801229c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801229e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d10a      	bne.n	80122bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80122a6:	4b96      	ldr	r3, [pc, #600]	@ (8012500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80122a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80122aa:	f023 0107 	bic.w	r1, r3, #7
 80122ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80122b4:	4a92      	ldr	r2, [pc, #584]	@ (8012500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80122b6:	430b      	orrs	r3, r1
 80122b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80122ba:	e003      	b.n	80122c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80122c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80122c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122cc:	f002 0304 	and.w	r3, r2, #4
 80122d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80122d4:	2300      	movs	r3, #0
 80122d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80122da:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80122de:	460b      	mov	r3, r1
 80122e0:	4313      	orrs	r3, r2
 80122e2:	d044      	beq.n	801236e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80122e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80122e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80122ec:	2b05      	cmp	r3, #5
 80122ee:	d825      	bhi.n	801233c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80122f0:	a201      	add	r2, pc, #4	@ (adr r2, 80122f8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80122f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122f6:	bf00      	nop
 80122f8:	08012345 	.word	0x08012345
 80122fc:	08012311 	.word	0x08012311
 8012300:	08012327 	.word	0x08012327
 8012304:	08012345 	.word	0x08012345
 8012308:	08012345 	.word	0x08012345
 801230c:	08012345 	.word	0x08012345
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012314:	3308      	adds	r3, #8
 8012316:	2101      	movs	r1, #1
 8012318:	4618      	mov	r0, r3
 801231a:	f001 fd25 	bl	8013d68 <RCCEx_PLL2_Config>
 801231e:	4603      	mov	r3, r0
 8012320:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012324:	e00f      	b.n	8012346 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801232a:	3328      	adds	r3, #40	@ 0x28
 801232c:	2101      	movs	r1, #1
 801232e:	4618      	mov	r0, r3
 8012330:	f001 fdcc 	bl	8013ecc <RCCEx_PLL3_Config>
 8012334:	4603      	mov	r3, r0
 8012336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801233a:	e004      	b.n	8012346 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801233c:	2301      	movs	r3, #1
 801233e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012342:	e000      	b.n	8012346 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012346:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801234a:	2b00      	cmp	r3, #0
 801234c:	d10b      	bne.n	8012366 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801234e:	4b6c      	ldr	r3, [pc, #432]	@ (8012500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012352:	f023 0107 	bic.w	r1, r3, #7
 8012356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801235e:	4a68      	ldr	r2, [pc, #416]	@ (8012500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012360:	430b      	orrs	r3, r1
 8012362:	6593      	str	r3, [r2, #88]	@ 0x58
 8012364:	e003      	b.n	801236e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801236a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801236e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012376:	f002 0320 	and.w	r3, r2, #32
 801237a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801237e:	2300      	movs	r3, #0
 8012380:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012384:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8012388:	460b      	mov	r3, r1
 801238a:	4313      	orrs	r3, r2
 801238c:	d055      	beq.n	801243a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801238e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012392:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801239a:	d033      	beq.n	8012404 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 801239c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80123a0:	d82c      	bhi.n	80123fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80123a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80123a6:	d02f      	beq.n	8012408 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80123a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80123ac:	d826      	bhi.n	80123fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80123ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80123b2:	d02b      	beq.n	801240c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80123b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80123b8:	d820      	bhi.n	80123fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80123ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80123be:	d012      	beq.n	80123e6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80123c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80123c4:	d81a      	bhi.n	80123fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d022      	beq.n	8012410 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80123ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80123ce:	d115      	bne.n	80123fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80123d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123d4:	3308      	adds	r3, #8
 80123d6:	2100      	movs	r1, #0
 80123d8:	4618      	mov	r0, r3
 80123da:	f001 fcc5 	bl	8013d68 <RCCEx_PLL2_Config>
 80123de:	4603      	mov	r3, r0
 80123e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80123e4:	e015      	b.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80123e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80123ea:	3328      	adds	r3, #40	@ 0x28
 80123ec:	2102      	movs	r1, #2
 80123ee:	4618      	mov	r0, r3
 80123f0:	f001 fd6c 	bl	8013ecc <RCCEx_PLL3_Config>
 80123f4:	4603      	mov	r3, r0
 80123f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80123fa:	e00a      	b.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80123fc:	2301      	movs	r3, #1
 80123fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012402:	e006      	b.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012404:	bf00      	nop
 8012406:	e004      	b.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012408:	bf00      	nop
 801240a:	e002      	b.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801240c:	bf00      	nop
 801240e:	e000      	b.n	8012412 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8012410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012416:	2b00      	cmp	r3, #0
 8012418:	d10b      	bne.n	8012432 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801241a:	4b39      	ldr	r3, [pc, #228]	@ (8012500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801241c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801241e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801242a:	4a35      	ldr	r2, [pc, #212]	@ (8012500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801242c:	430b      	orrs	r3, r1
 801242e:	6553      	str	r3, [r2, #84]	@ 0x54
 8012430:	e003      	b.n	801243a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012436:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801243a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012442:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8012446:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801244a:	2300      	movs	r3, #0
 801244c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012450:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8012454:	460b      	mov	r3, r1
 8012456:	4313      	orrs	r3, r2
 8012458:	d058      	beq.n	801250c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801245a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801245e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012462:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8012466:	d033      	beq.n	80124d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012468:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801246c:	d82c      	bhi.n	80124c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801246e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012472:	d02f      	beq.n	80124d4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012478:	d826      	bhi.n	80124c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801247a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801247e:	d02b      	beq.n	80124d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8012480:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8012484:	d820      	bhi.n	80124c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012486:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801248a:	d012      	beq.n	80124b2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 801248c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012490:	d81a      	bhi.n	80124c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012492:	2b00      	cmp	r3, #0
 8012494:	d022      	beq.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801249a:	d115      	bne.n	80124c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801249c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124a0:	3308      	adds	r3, #8
 80124a2:	2100      	movs	r1, #0
 80124a4:	4618      	mov	r0, r3
 80124a6:	f001 fc5f 	bl	8013d68 <RCCEx_PLL2_Config>
 80124aa:	4603      	mov	r3, r0
 80124ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80124b0:	e015      	b.n	80124de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80124b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124b6:	3328      	adds	r3, #40	@ 0x28
 80124b8:	2102      	movs	r1, #2
 80124ba:	4618      	mov	r0, r3
 80124bc:	f001 fd06 	bl	8013ecc <RCCEx_PLL3_Config>
 80124c0:	4603      	mov	r3, r0
 80124c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80124c6:	e00a      	b.n	80124de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80124c8:	2301      	movs	r3, #1
 80124ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80124ce:	e006      	b.n	80124de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80124d0:	bf00      	nop
 80124d2:	e004      	b.n	80124de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80124d4:	bf00      	nop
 80124d6:	e002      	b.n	80124de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80124d8:	bf00      	nop
 80124da:	e000      	b.n	80124de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80124dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80124de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10e      	bne.n	8012504 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80124e6:	4b06      	ldr	r3, [pc, #24]	@ (8012500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80124e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80124ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80124ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80124f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80124f6:	4a02      	ldr	r2, [pc, #8]	@ (8012500 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80124f8:	430b      	orrs	r3, r1
 80124fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80124fc:	e006      	b.n	801250c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80124fe:	bf00      	nop
 8012500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801250c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012514:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8012518:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801251c:	2300      	movs	r3, #0
 801251e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012522:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8012526:	460b      	mov	r3, r1
 8012528:	4313      	orrs	r3, r2
 801252a:	d055      	beq.n	80125d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801252c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012530:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012534:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8012538:	d033      	beq.n	80125a2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 801253a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801253e:	d82c      	bhi.n	801259a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012544:	d02f      	beq.n	80125a6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801254a:	d826      	bhi.n	801259a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801254c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012550:	d02b      	beq.n	80125aa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8012552:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8012556:	d820      	bhi.n	801259a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801255c:	d012      	beq.n	8012584 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801255e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012562:	d81a      	bhi.n	801259a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012564:	2b00      	cmp	r3, #0
 8012566:	d022      	beq.n	80125ae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801256c:	d115      	bne.n	801259a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801256e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012572:	3308      	adds	r3, #8
 8012574:	2100      	movs	r1, #0
 8012576:	4618      	mov	r0, r3
 8012578:	f001 fbf6 	bl	8013d68 <RCCEx_PLL2_Config>
 801257c:	4603      	mov	r3, r0
 801257e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012582:	e015      	b.n	80125b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012588:	3328      	adds	r3, #40	@ 0x28
 801258a:	2102      	movs	r1, #2
 801258c:	4618      	mov	r0, r3
 801258e:	f001 fc9d 	bl	8013ecc <RCCEx_PLL3_Config>
 8012592:	4603      	mov	r3, r0
 8012594:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012598:	e00a      	b.n	80125b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801259a:	2301      	movs	r3, #1
 801259c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80125a0:	e006      	b.n	80125b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80125a2:	bf00      	nop
 80125a4:	e004      	b.n	80125b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80125a6:	bf00      	nop
 80125a8:	e002      	b.n	80125b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80125aa:	bf00      	nop
 80125ac:	e000      	b.n	80125b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80125ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80125b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d10b      	bne.n	80125d0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80125b8:	4ba0      	ldr	r3, [pc, #640]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80125ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80125c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80125c8:	4a9c      	ldr	r2, [pc, #624]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80125ca:	430b      	orrs	r3, r1
 80125cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80125ce:	e003      	b.n	80125d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80125d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80125d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80125d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e0:	f002 0308 	and.w	r3, r2, #8
 80125e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80125e8:	2300      	movs	r3, #0
 80125ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80125ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80125f2:	460b      	mov	r3, r1
 80125f4:	4313      	orrs	r3, r2
 80125f6:	d01e      	beq.n	8012636 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80125f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80125fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012604:	d10c      	bne.n	8012620 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801260a:	3328      	adds	r3, #40	@ 0x28
 801260c:	2102      	movs	r1, #2
 801260e:	4618      	mov	r0, r3
 8012610:	f001 fc5c 	bl	8013ecc <RCCEx_PLL3_Config>
 8012614:	4603      	mov	r3, r0
 8012616:	2b00      	cmp	r3, #0
 8012618:	d002      	beq.n	8012620 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801261a:	2301      	movs	r3, #1
 801261c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012620:	4b86      	ldr	r3, [pc, #536]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012624:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801262c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012630:	4a82      	ldr	r2, [pc, #520]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012632:	430b      	orrs	r3, r1
 8012634:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263e:	f002 0310 	and.w	r3, r2, #16
 8012642:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012646:	2300      	movs	r3, #0
 8012648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801264c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8012650:	460b      	mov	r3, r1
 8012652:	4313      	orrs	r3, r2
 8012654:	d01e      	beq.n	8012694 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801265a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801265e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012662:	d10c      	bne.n	801267e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012668:	3328      	adds	r3, #40	@ 0x28
 801266a:	2102      	movs	r1, #2
 801266c:	4618      	mov	r0, r3
 801266e:	f001 fc2d 	bl	8013ecc <RCCEx_PLL3_Config>
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	d002      	beq.n	801267e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012678:	2301      	movs	r3, #1
 801267a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801267e:	4b6f      	ldr	r3, [pc, #444]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012682:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8012686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801268a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801268e:	4a6b      	ldr	r2, [pc, #428]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012690:	430b      	orrs	r3, r1
 8012692:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801269c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80126a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80126a2:	2300      	movs	r3, #0
 80126a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80126a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80126aa:	460b      	mov	r3, r1
 80126ac:	4313      	orrs	r3, r2
 80126ae:	d03e      	beq.n	801272e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80126b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80126b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80126bc:	d022      	beq.n	8012704 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80126be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80126c2:	d81b      	bhi.n	80126fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d003      	beq.n	80126d0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80126c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80126cc:	d00b      	beq.n	80126e6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80126ce:	e015      	b.n	80126fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80126d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126d4:	3308      	adds	r3, #8
 80126d6:	2100      	movs	r1, #0
 80126d8:	4618      	mov	r0, r3
 80126da:	f001 fb45 	bl	8013d68 <RCCEx_PLL2_Config>
 80126de:	4603      	mov	r3, r0
 80126e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80126e4:	e00f      	b.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80126e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80126ea:	3328      	adds	r3, #40	@ 0x28
 80126ec:	2102      	movs	r1, #2
 80126ee:	4618      	mov	r0, r3
 80126f0:	f001 fbec 	bl	8013ecc <RCCEx_PLL3_Config>
 80126f4:	4603      	mov	r3, r0
 80126f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80126fa:	e004      	b.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80126fc:	2301      	movs	r3, #1
 80126fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012702:	e000      	b.n	8012706 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012706:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801270a:	2b00      	cmp	r3, #0
 801270c:	d10b      	bne.n	8012726 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801270e:	4b4b      	ldr	r3, [pc, #300]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012712:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8012716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801271a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801271e:	4a47      	ldr	r2, [pc, #284]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012720:	430b      	orrs	r3, r1
 8012722:	6593      	str	r3, [r2, #88]	@ 0x58
 8012724:	e003      	b.n	801272e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801272a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801272e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012736:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801273a:	673b      	str	r3, [r7, #112]	@ 0x70
 801273c:	2300      	movs	r3, #0
 801273e:	677b      	str	r3, [r7, #116]	@ 0x74
 8012740:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8012744:	460b      	mov	r3, r1
 8012746:	4313      	orrs	r3, r2
 8012748:	d03b      	beq.n	80127c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801274a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801274e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012752:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012756:	d01f      	beq.n	8012798 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012758:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801275c:	d818      	bhi.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 801275e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012762:	d003      	beq.n	801276c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012764:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012768:	d007      	beq.n	801277a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 801276a:	e011      	b.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801276c:	4b33      	ldr	r3, [pc, #204]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012770:	4a32      	ldr	r2, [pc, #200]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012778:	e00f      	b.n	801279a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801277a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801277e:	3328      	adds	r3, #40	@ 0x28
 8012780:	2101      	movs	r1, #1
 8012782:	4618      	mov	r0, r3
 8012784:	f001 fba2 	bl	8013ecc <RCCEx_PLL3_Config>
 8012788:	4603      	mov	r3, r0
 801278a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801278e:	e004      	b.n	801279a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012790:	2301      	movs	r3, #1
 8012792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8012796:	e000      	b.n	801279a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012798:	bf00      	nop
    }

    if (ret == HAL_OK)
 801279a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d10b      	bne.n	80127ba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80127a2:	4b26      	ldr	r3, [pc, #152]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80127a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80127aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80127b2:	4a22      	ldr	r2, [pc, #136]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80127b4:	430b      	orrs	r3, r1
 80127b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80127b8:	e003      	b.n	80127c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80127c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80127ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80127d0:	2300      	movs	r3, #0
 80127d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80127d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80127d8:	460b      	mov	r3, r1
 80127da:	4313      	orrs	r3, r2
 80127dc:	d034      	beq.n	8012848 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80127de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80127e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d003      	beq.n	80127f0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80127e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80127ec:	d007      	beq.n	80127fe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80127ee:	e011      	b.n	8012814 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80127f0:	4b12      	ldr	r3, [pc, #72]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80127f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127f4:	4a11      	ldr	r2, [pc, #68]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80127f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80127fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80127fc:	e00e      	b.n	801281c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80127fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012802:	3308      	adds	r3, #8
 8012804:	2102      	movs	r1, #2
 8012806:	4618      	mov	r0, r3
 8012808:	f001 faae 	bl	8013d68 <RCCEx_PLL2_Config>
 801280c:	4603      	mov	r3, r0
 801280e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012812:	e003      	b.n	801281c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012814:	2301      	movs	r3, #1
 8012816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 801281a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801281c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012820:	2b00      	cmp	r3, #0
 8012822:	d10d      	bne.n	8012840 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012824:	4b05      	ldr	r3, [pc, #20]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012828:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801282c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012832:	4a02      	ldr	r2, [pc, #8]	@ (801283c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012834:	430b      	orrs	r3, r1
 8012836:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012838:	e006      	b.n	8012848 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801283a:	bf00      	nop
 801283c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012840:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012844:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012850:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8012854:	663b      	str	r3, [r7, #96]	@ 0x60
 8012856:	2300      	movs	r3, #0
 8012858:	667b      	str	r3, [r7, #100]	@ 0x64
 801285a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801285e:	460b      	mov	r3, r1
 8012860:	4313      	orrs	r3, r2
 8012862:	d00c      	beq.n	801287e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012868:	3328      	adds	r3, #40	@ 0x28
 801286a:	2102      	movs	r1, #2
 801286c:	4618      	mov	r0, r3
 801286e:	f001 fb2d 	bl	8013ecc <RCCEx_PLL3_Config>
 8012872:	4603      	mov	r3, r0
 8012874:	2b00      	cmp	r3, #0
 8012876:	d002      	beq.n	801287e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8012878:	2301      	movs	r3, #1
 801287a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801287e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012886:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801288a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801288c:	2300      	movs	r3, #0
 801288e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012890:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8012894:	460b      	mov	r3, r1
 8012896:	4313      	orrs	r3, r2
 8012898:	d036      	beq.n	8012908 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801289a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801289e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80128a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80128a4:	d018      	beq.n	80128d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80128a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80128aa:	d811      	bhi.n	80128d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80128ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80128b0:	d014      	beq.n	80128dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80128b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80128b6:	d80b      	bhi.n	80128d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d011      	beq.n	80128e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80128bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80128c0:	d106      	bne.n	80128d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80128c2:	4bb7      	ldr	r3, [pc, #732]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80128c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128c6:	4ab6      	ldr	r2, [pc, #728]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80128c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80128cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80128ce:	e008      	b.n	80128e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80128d0:	2301      	movs	r3, #1
 80128d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80128d6:	e004      	b.n	80128e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80128d8:	bf00      	nop
 80128da:	e002      	b.n	80128e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80128dc:	bf00      	nop
 80128de:	e000      	b.n	80128e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80128e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80128e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d10a      	bne.n	8012900 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80128ea:	4bad      	ldr	r3, [pc, #692]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80128ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80128f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80128f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80128f8:	4aa9      	ldr	r2, [pc, #676]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80128fa:	430b      	orrs	r3, r1
 80128fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80128fe:	e003      	b.n	8012908 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012904:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012910:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8012914:	653b      	str	r3, [r7, #80]	@ 0x50
 8012916:	2300      	movs	r3, #0
 8012918:	657b      	str	r3, [r7, #84]	@ 0x54
 801291a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801291e:	460b      	mov	r3, r1
 8012920:	4313      	orrs	r3, r2
 8012922:	d009      	beq.n	8012938 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012924:	4b9e      	ldr	r3, [pc, #632]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012928:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801292c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012932:	4a9b      	ldr	r2, [pc, #620]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012934:	430b      	orrs	r3, r1
 8012936:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8012938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012940:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8012944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012946:	2300      	movs	r3, #0
 8012948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801294a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801294e:	460b      	mov	r3, r1
 8012950:	4313      	orrs	r3, r2
 8012952:	d009      	beq.n	8012968 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012954:	4b92      	ldr	r3, [pc, #584]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012958:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801295c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012960:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012962:	4a8f      	ldr	r2, [pc, #572]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012964:	430b      	orrs	r3, r1
 8012966:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8012968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012970:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8012974:	643b      	str	r3, [r7, #64]	@ 0x40
 8012976:	2300      	movs	r3, #0
 8012978:	647b      	str	r3, [r7, #68]	@ 0x44
 801297a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801297e:	460b      	mov	r3, r1
 8012980:	4313      	orrs	r3, r2
 8012982:	d00e      	beq.n	80129a2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012984:	4b86      	ldr	r3, [pc, #536]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012986:	691b      	ldr	r3, [r3, #16]
 8012988:	4a85      	ldr	r2, [pc, #532]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801298a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801298e:	6113      	str	r3, [r2, #16]
 8012990:	4b83      	ldr	r3, [pc, #524]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012992:	6919      	ldr	r1, [r3, #16]
 8012994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012998:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801299c:	4a80      	ldr	r2, [pc, #512]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801299e:	430b      	orrs	r3, r1
 80129a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80129a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129aa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80129ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80129b0:	2300      	movs	r3, #0
 80129b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80129b8:	460b      	mov	r3, r1
 80129ba:	4313      	orrs	r3, r2
 80129bc:	d009      	beq.n	80129d2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80129be:	4b78      	ldr	r3, [pc, #480]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80129c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80129c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80129c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129cc:	4a74      	ldr	r2, [pc, #464]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80129ce:	430b      	orrs	r3, r1
 80129d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80129d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129da:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80129de:	633b      	str	r3, [r7, #48]	@ 0x30
 80129e0:	2300      	movs	r3, #0
 80129e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80129e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80129e8:	460b      	mov	r3, r1
 80129ea:	4313      	orrs	r3, r2
 80129ec:	d00a      	beq.n	8012a04 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80129ee:	4b6c      	ldr	r3, [pc, #432]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80129f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80129f2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80129f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80129fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80129fe:	4a68      	ldr	r2, [pc, #416]	@ (8012ba0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012a00:	430b      	orrs	r3, r1
 8012a02:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8012a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0c:	2100      	movs	r1, #0
 8012a0e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8012a10:	f003 0301 	and.w	r3, r3, #1
 8012a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012a16:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	4313      	orrs	r3, r2
 8012a1e:	d011      	beq.n	8012a44 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a24:	3308      	adds	r3, #8
 8012a26:	2100      	movs	r1, #0
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f001 f99d 	bl	8013d68 <RCCEx_PLL2_Config>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012a34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d003      	beq.n	8012a44 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8012a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	6239      	str	r1, [r7, #32]
 8012a50:	f003 0302 	and.w	r3, r3, #2
 8012a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012a5a:	460b      	mov	r3, r1
 8012a5c:	4313      	orrs	r3, r2
 8012a5e:	d011      	beq.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a64:	3308      	adds	r3, #8
 8012a66:	2101      	movs	r1, #1
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f001 f97d 	bl	8013d68 <RCCEx_PLL2_Config>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012a74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d003      	beq.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012a80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8012a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	61b9      	str	r1, [r7, #24]
 8012a90:	f003 0304 	and.w	r3, r3, #4
 8012a94:	61fb      	str	r3, [r7, #28]
 8012a96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012a9a:	460b      	mov	r3, r1
 8012a9c:	4313      	orrs	r3, r2
 8012a9e:	d011      	beq.n	8012ac4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012aa4:	3308      	adds	r3, #8
 8012aa6:	2102      	movs	r1, #2
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f001 f95d 	bl	8013d68 <RCCEx_PLL2_Config>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d003      	beq.n	8012ac4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012abc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012ac0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8012ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012acc:	2100      	movs	r1, #0
 8012ace:	6139      	str	r1, [r7, #16]
 8012ad0:	f003 0308 	and.w	r3, r3, #8
 8012ad4:	617b      	str	r3, [r7, #20]
 8012ad6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012ada:	460b      	mov	r3, r1
 8012adc:	4313      	orrs	r3, r2
 8012ade:	d011      	beq.n	8012b04 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012ae4:	3328      	adds	r3, #40	@ 0x28
 8012ae6:	2100      	movs	r1, #0
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f001 f9ef 	bl	8013ecc <RCCEx_PLL3_Config>
 8012aee:	4603      	mov	r3, r0
 8012af0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8012af4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d003      	beq.n	8012b04 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012afc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8012b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0c:	2100      	movs	r1, #0
 8012b0e:	60b9      	str	r1, [r7, #8]
 8012b10:	f003 0310 	and.w	r3, r3, #16
 8012b14:	60fb      	str	r3, [r7, #12]
 8012b16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8012b1a:	460b      	mov	r3, r1
 8012b1c:	4313      	orrs	r3, r2
 8012b1e:	d011      	beq.n	8012b44 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b24:	3328      	adds	r3, #40	@ 0x28
 8012b26:	2101      	movs	r1, #1
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f001 f9cf 	bl	8013ecc <RCCEx_PLL3_Config>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012b34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d003      	beq.n	8012b44 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8012b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b4c:	2100      	movs	r1, #0
 8012b4e:	6039      	str	r1, [r7, #0]
 8012b50:	f003 0320 	and.w	r3, r3, #32
 8012b54:	607b      	str	r3, [r7, #4]
 8012b56:	e9d7 1200 	ldrd	r1, r2, [r7]
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	4313      	orrs	r3, r2
 8012b5e:	d011      	beq.n	8012b84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012b64:	3328      	adds	r3, #40	@ 0x28
 8012b66:	2102      	movs	r1, #2
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f001 f9af 	bl	8013ecc <RCCEx_PLL3_Config>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8012b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d003      	beq.n	8012b84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8012b80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8012b84:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d101      	bne.n	8012b90 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	e000      	b.n	8012b92 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8012b90:	2301      	movs	r3, #1
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012b9e:	bf00      	nop
 8012ba0:	58024400 	.word	0x58024400

08012ba4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b090      	sub	sp, #64	@ 0x40
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8012bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012bb2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8012bb6:	430b      	orrs	r3, r1
 8012bb8:	f040 8094 	bne.w	8012ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8012bbc:	4b9b      	ldr	r3, [pc, #620]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012bc0:	f003 0307 	and.w	r3, r3, #7
 8012bc4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bc8:	2b04      	cmp	r3, #4
 8012bca:	f200 8087 	bhi.w	8012cdc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8012bce:	a201      	add	r2, pc, #4	@ (adr r2, 8012bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8012bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bd4:	08012be9 	.word	0x08012be9
 8012bd8:	08012c11 	.word	0x08012c11
 8012bdc:	08012c39 	.word	0x08012c39
 8012be0:	08012cd5 	.word	0x08012cd5
 8012be4:	08012c61 	.word	0x08012c61
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012be8:	4b90      	ldr	r3, [pc, #576]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012bf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012bf4:	d108      	bne.n	8012c08 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f000 ff62 	bl	8013ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c04:	f000 bc93 	b.w	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c0c:	f000 bc8f 	b.w	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012c10:	4b86      	ldr	r3, [pc, #536]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012c18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012c1c:	d108      	bne.n	8012c30 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012c1e:	f107 0318 	add.w	r3, r7, #24
 8012c22:	4618      	mov	r0, r3
 8012c24:	f000 fca6 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c2c:	f000 bc7f 	b.w	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c30:	2300      	movs	r3, #0
 8012c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c34:	f000 bc7b 	b.w	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012c38:	4b7c      	ldr	r3, [pc, #496]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012c40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012c44:	d108      	bne.n	8012c58 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c46:	f107 030c 	add.w	r3, r7, #12
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f000 fde6 	bl	801381c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012c54:	f000 bc6b 	b.w	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012c5c:	f000 bc67 	b.w	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012c60:	4b72      	ldr	r3, [pc, #456]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012c68:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012c6a:	4b70      	ldr	r3, [pc, #448]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	f003 0304 	and.w	r3, r3, #4
 8012c72:	2b04      	cmp	r3, #4
 8012c74:	d10c      	bne.n	8012c90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8012c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d109      	bne.n	8012c90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012c7c:	4b6b      	ldr	r3, [pc, #428]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	08db      	lsrs	r3, r3, #3
 8012c82:	f003 0303 	and.w	r3, r3, #3
 8012c86:	4a6a      	ldr	r2, [pc, #424]	@ (8012e30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8012c88:	fa22 f303 	lsr.w	r3, r2, r3
 8012c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012c8e:	e01f      	b.n	8012cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012c90:	4b66      	ldr	r3, [pc, #408]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012c98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012c9c:	d106      	bne.n	8012cac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8012c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ca0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012ca4:	d102      	bne.n	8012cac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012ca6:	4b63      	ldr	r3, [pc, #396]	@ (8012e34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8012ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012caa:	e011      	b.n	8012cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012cac:	4b5f      	ldr	r3, [pc, #380]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012cb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012cb8:	d106      	bne.n	8012cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8012cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012cc0:	d102      	bne.n	8012cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8012e38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8012cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012cc6:	e003      	b.n	8012cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012cc8:	2300      	movs	r3, #0
 8012cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012ccc:	f000 bc2f 	b.w	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012cd0:	f000 bc2d 	b.w	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012cd4:	4b59      	ldr	r3, [pc, #356]	@ (8012e3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8012cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012cd8:	f000 bc29 	b.w	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ce0:	f000 bc25 	b.w	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8012ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012ce8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8012cec:	430b      	orrs	r3, r1
 8012cee:	f040 80a7 	bne.w	8012e40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8012cf2:	4b4e      	ldr	r3, [pc, #312]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012cf6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8012cfa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012d02:	d054      	beq.n	8012dae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8012d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012d0a:	f200 808b 	bhi.w	8012e24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8012d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012d14:	f000 8083 	beq.w	8012e1e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8012d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012d1e:	f200 8081 	bhi.w	8012e24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8012d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012d28:	d02f      	beq.n	8012d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8012d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012d30:	d878      	bhi.n	8012e24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8012d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d004      	beq.n	8012d42 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8012d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012d3e:	d012      	beq.n	8012d66 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8012d40:	e070      	b.n	8012e24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012d42:	4b3a      	ldr	r3, [pc, #232]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012d4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012d4e:	d107      	bne.n	8012d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012d54:	4618      	mov	r0, r3
 8012d56:	f000 feb5 	bl	8013ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012d5e:	e3e6      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012d60:	2300      	movs	r3, #0
 8012d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d64:	e3e3      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012d66:	4b31      	ldr	r3, [pc, #196]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012d72:	d107      	bne.n	8012d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012d74:	f107 0318 	add.w	r3, r7, #24
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f000 fbfb 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012d7e:	69bb      	ldr	r3, [r7, #24]
 8012d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012d82:	e3d4      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012d84:	2300      	movs	r3, #0
 8012d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012d88:	e3d1      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012d8a:	4b28      	ldr	r3, [pc, #160]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012d96:	d107      	bne.n	8012da8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012d98:	f107 030c 	add.w	r3, r7, #12
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f000 fd3d 	bl	801381c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012da6:	e3c2      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012da8:	2300      	movs	r3, #0
 8012daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012dac:	e3bf      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012dae:	4b1f      	ldr	r3, [pc, #124]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012db2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012db6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012db8:	4b1c      	ldr	r3, [pc, #112]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	f003 0304 	and.w	r3, r3, #4
 8012dc0:	2b04      	cmp	r3, #4
 8012dc2:	d10c      	bne.n	8012dde <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8012dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d109      	bne.n	8012dde <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012dca:	4b18      	ldr	r3, [pc, #96]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	08db      	lsrs	r3, r3, #3
 8012dd0:	f003 0303 	and.w	r3, r3, #3
 8012dd4:	4a16      	ldr	r2, [pc, #88]	@ (8012e30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8012dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8012dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ddc:	e01e      	b.n	8012e1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012dde:	4b13      	ldr	r3, [pc, #76]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012dea:	d106      	bne.n	8012dfa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8012dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012dee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012df2:	d102      	bne.n	8012dfa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012df4:	4b0f      	ldr	r3, [pc, #60]	@ (8012e34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8012df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012df8:	e010      	b.n	8012e1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8012e2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012e02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012e06:	d106      	bne.n	8012e16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8012e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e0e:	d102      	bne.n	8012e16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012e10:	4b09      	ldr	r3, [pc, #36]	@ (8012e38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8012e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012e14:	e002      	b.n	8012e1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012e16:	2300      	movs	r3, #0
 8012e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012e1a:	e388      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012e1c:	e387      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012e1e:	4b07      	ldr	r3, [pc, #28]	@ (8012e3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8012e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e22:	e384      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012e24:	2300      	movs	r3, #0
 8012e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012e28:	e381      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012e2a:	bf00      	nop
 8012e2c:	58024400 	.word	0x58024400
 8012e30:	03d09000 	.word	0x03d09000
 8012e34:	003d0900 	.word	0x003d0900
 8012e38:	016e3600 	.word	0x016e3600
 8012e3c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8012e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e44:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8012e48:	430b      	orrs	r3, r1
 8012e4a:	f040 809c 	bne.w	8012f86 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8012e4e:	4b9e      	ldr	r3, [pc, #632]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e52:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8012e56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8012e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012e5e:	d054      	beq.n	8012f0a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8012e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012e66:	f200 808b 	bhi.w	8012f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8012e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012e70:	f000 8083 	beq.w	8012f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8012e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012e7a:	f200 8081 	bhi.w	8012f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8012e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012e84:	d02f      	beq.n	8012ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8012e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012e8c:	d878      	bhi.n	8012f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8012e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d004      	beq.n	8012e9e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8012e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012e9a:	d012      	beq.n	8012ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8012e9c:	e070      	b.n	8012f80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012e9e:	4b8a      	ldr	r3, [pc, #552]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012ea6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012eaa:	d107      	bne.n	8012ebc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f000 fe07 	bl	8013ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012eba:	e338      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ec0:	e335      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012ec2:	4b81      	ldr	r3, [pc, #516]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012eca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012ece:	d107      	bne.n	8012ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012ed0:	f107 0318 	add.w	r3, r7, #24
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f000 fb4d 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012ede:	e326      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012ee4:	e323      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012ee6:	4b78      	ldr	r3, [pc, #480]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012ef2:	d107      	bne.n	8012f04 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012ef4:	f107 030c 	add.w	r3, r7, #12
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f000 fc8f 	bl	801381c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012f02:	e314      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8012f04:	2300      	movs	r3, #0
 8012f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f08:	e311      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012f0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012f12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012f14:	4b6c      	ldr	r3, [pc, #432]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	f003 0304 	and.w	r3, r3, #4
 8012f1c:	2b04      	cmp	r3, #4
 8012f1e:	d10c      	bne.n	8012f3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8012f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d109      	bne.n	8012f3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012f26:	4b68      	ldr	r3, [pc, #416]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	08db      	lsrs	r3, r3, #3
 8012f2c:	f003 0303 	and.w	r3, r3, #3
 8012f30:	4a66      	ldr	r2, [pc, #408]	@ (80130cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8012f32:	fa22 f303 	lsr.w	r3, r2, r3
 8012f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012f38:	e01e      	b.n	8012f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012f3a:	4b63      	ldr	r3, [pc, #396]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012f46:	d106      	bne.n	8012f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8012f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012f4e:	d102      	bne.n	8012f56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012f50:	4b5f      	ldr	r3, [pc, #380]	@ (80130d0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8012f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012f54:	e010      	b.n	8012f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012f56:	4b5c      	ldr	r3, [pc, #368]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012f5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012f62:	d106      	bne.n	8012f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8012f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012f6a:	d102      	bne.n	8012f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012f6c:	4b59      	ldr	r3, [pc, #356]	@ (80130d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012f70:	e002      	b.n	8012f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012f72:	2300      	movs	r3, #0
 8012f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012f76:	e2da      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8012f78:	e2d9      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012f7a:	4b57      	ldr	r3, [pc, #348]	@ (80130d8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8012f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f7e:	e2d6      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8012f80:	2300      	movs	r3, #0
 8012f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f84:	e2d3      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8012f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012f8a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8012f8e:	430b      	orrs	r3, r1
 8012f90:	f040 80a7 	bne.w	80130e2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8012f94:	4b4c      	ldr	r3, [pc, #304]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f98:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8012f9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fa0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012fa4:	d055      	beq.n	8013052 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8012fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012fac:	f200 8096 	bhi.w	80130dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012fb6:	f000 8084 	beq.w	80130c2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8012fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012fc0:	f200 808c 	bhi.w	80130dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012fca:	d030      	beq.n	801302e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8012fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012fd2:	f200 8083 	bhi.w	80130dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8012fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d004      	beq.n	8012fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8012fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012fe2:	d012      	beq.n	801300a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8012fe4:	e07a      	b.n	80130dc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012fe6:	4b38      	ldr	r3, [pc, #224]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012fee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012ff2:	d107      	bne.n	8013004 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f000 fd63 	bl	8013ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013002:	e294      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013004:	2300      	movs	r3, #0
 8013006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013008:	e291      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801300a:	4b2f      	ldr	r3, [pc, #188]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013012:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013016:	d107      	bne.n	8013028 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013018:	f107 0318 	add.w	r3, r7, #24
 801301c:	4618      	mov	r0, r3
 801301e:	f000 faa9 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013022:	69bb      	ldr	r3, [r7, #24]
 8013024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013026:	e282      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013028:	2300      	movs	r3, #0
 801302a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801302c:	e27f      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801302e:	4b26      	ldr	r3, [pc, #152]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801303a:	d107      	bne.n	801304c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801303c:	f107 030c 	add.w	r3, r7, #12
 8013040:	4618      	mov	r0, r3
 8013042:	f000 fbeb 	bl	801381c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801304a:	e270      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801304c:	2300      	movs	r3, #0
 801304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013050:	e26d      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013052:	4b1d      	ldr	r3, [pc, #116]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013056:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801305a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801305c:	4b1a      	ldr	r3, [pc, #104]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	f003 0304 	and.w	r3, r3, #4
 8013064:	2b04      	cmp	r3, #4
 8013066:	d10c      	bne.n	8013082 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8013068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801306a:	2b00      	cmp	r3, #0
 801306c:	d109      	bne.n	8013082 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801306e:	4b16      	ldr	r3, [pc, #88]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	08db      	lsrs	r3, r3, #3
 8013074:	f003 0303 	and.w	r3, r3, #3
 8013078:	4a14      	ldr	r2, [pc, #80]	@ (80130cc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801307a:	fa22 f303 	lsr.w	r3, r2, r3
 801307e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013080:	e01e      	b.n	80130c0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013082:	4b11      	ldr	r3, [pc, #68]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801308a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801308e:	d106      	bne.n	801309e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8013090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013096:	d102      	bne.n	801309e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013098:	4b0d      	ldr	r3, [pc, #52]	@ (80130d0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801309a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801309c:	e010      	b.n	80130c0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801309e:	4b0a      	ldr	r3, [pc, #40]	@ (80130c8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80130a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80130aa:	d106      	bne.n	80130ba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80130ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80130b2:	d102      	bne.n	80130ba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80130b4:	4b07      	ldr	r3, [pc, #28]	@ (80130d4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80130b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80130b8:	e002      	b.n	80130c0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80130ba:	2300      	movs	r3, #0
 80130bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80130be:	e236      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80130c0:	e235      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80130c2:	4b05      	ldr	r3, [pc, #20]	@ (80130d8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80130c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130c6:	e232      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80130c8:	58024400 	.word	0x58024400
 80130cc:	03d09000 	.word	0x03d09000
 80130d0:	003d0900 	.word	0x003d0900
 80130d4:	016e3600 	.word	0x016e3600
 80130d8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80130dc:	2300      	movs	r3, #0
 80130de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80130e0:	e225      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80130e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80130e6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80130ea:	430b      	orrs	r3, r1
 80130ec:	f040 8085 	bne.w	80131fa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80130f0:	4b9c      	ldr	r3, [pc, #624]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80130f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80130f4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80130f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80130fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013100:	d06b      	beq.n	80131da <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8013102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013108:	d874      	bhi.n	80131f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801310a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801310c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013110:	d056      	beq.n	80131c0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8013112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013114:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013118:	d86c      	bhi.n	80131f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801311a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801311c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013120:	d03b      	beq.n	801319a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8013122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013124:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013128:	d864      	bhi.n	80131f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801312a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801312c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013130:	d021      	beq.n	8013176 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8013132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013138:	d85c      	bhi.n	80131f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801313c:	2b00      	cmp	r3, #0
 801313e:	d004      	beq.n	801314a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8013140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013146:	d004      	beq.n	8013152 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8013148:	e054      	b.n	80131f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801314a:	f7fe fb5f 	bl	801180c <HAL_RCC_GetPCLK1Freq>
 801314e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013150:	e1ed      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013152:	4b84      	ldr	r3, [pc, #528]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801315a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801315e:	d107      	bne.n	8013170 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013160:	f107 0318 	add.w	r3, r7, #24
 8013164:	4618      	mov	r0, r3
 8013166:	f000 fa05 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801316a:	69fb      	ldr	r3, [r7, #28]
 801316c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801316e:	e1de      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013170:	2300      	movs	r3, #0
 8013172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013174:	e1db      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013176:	4b7b      	ldr	r3, [pc, #492]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801317e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013182:	d107      	bne.n	8013194 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013184:	f107 030c 	add.w	r3, r7, #12
 8013188:	4618      	mov	r0, r3
 801318a:	f000 fb47 	bl	801381c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013192:	e1cc      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013194:	2300      	movs	r3, #0
 8013196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013198:	e1c9      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801319a:	4b72      	ldr	r3, [pc, #456]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	f003 0304 	and.w	r3, r3, #4
 80131a2:	2b04      	cmp	r3, #4
 80131a4:	d109      	bne.n	80131ba <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80131a6:	4b6f      	ldr	r3, [pc, #444]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	08db      	lsrs	r3, r3, #3
 80131ac:	f003 0303 	and.w	r3, r3, #3
 80131b0:	4a6d      	ldr	r2, [pc, #436]	@ (8013368 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80131b2:	fa22 f303 	lsr.w	r3, r2, r3
 80131b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80131b8:	e1b9      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80131ba:	2300      	movs	r3, #0
 80131bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131be:	e1b6      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80131c0:	4b68      	ldr	r3, [pc, #416]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80131c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80131cc:	d102      	bne.n	80131d4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80131ce:	4b67      	ldr	r3, [pc, #412]	@ (801336c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80131d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80131d2:	e1ac      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80131d4:	2300      	movs	r3, #0
 80131d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131d8:	e1a9      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80131da:	4b62      	ldr	r3, [pc, #392]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80131e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80131e6:	d102      	bne.n	80131ee <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80131e8:	4b61      	ldr	r3, [pc, #388]	@ (8013370 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80131ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80131ec:	e19f      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80131ee:	2300      	movs	r3, #0
 80131f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131f2:	e19c      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80131f4:	2300      	movs	r3, #0
 80131f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80131f8:	e199      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80131fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131fe:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8013202:	430b      	orrs	r3, r1
 8013204:	d173      	bne.n	80132ee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8013206:	4b57      	ldr	r3, [pc, #348]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801320a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801320e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013216:	d02f      	beq.n	8013278 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8013218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801321a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801321e:	d863      	bhi.n	80132e8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8013220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013222:	2b00      	cmp	r3, #0
 8013224:	d004      	beq.n	8013230 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8013226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801322c:	d012      	beq.n	8013254 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801322e:	e05b      	b.n	80132e8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013230:	4b4c      	ldr	r3, [pc, #304]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801323c:	d107      	bne.n	801324e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801323e:	f107 0318 	add.w	r3, r7, #24
 8013242:	4618      	mov	r0, r3
 8013244:	f000 f996 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013248:	69bb      	ldr	r3, [r7, #24]
 801324a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801324c:	e16f      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801324e:	2300      	movs	r3, #0
 8013250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013252:	e16c      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013254:	4b43      	ldr	r3, [pc, #268]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801325c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013260:	d107      	bne.n	8013272 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013262:	f107 030c 	add.w	r3, r7, #12
 8013266:	4618      	mov	r0, r3
 8013268:	f000 fad8 	bl	801381c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013270:	e15d      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013272:	2300      	movs	r3, #0
 8013274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013276:	e15a      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013278:	4b3a      	ldr	r3, [pc, #232]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801327a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801327c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013280:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013282:	4b38      	ldr	r3, [pc, #224]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	f003 0304 	and.w	r3, r3, #4
 801328a:	2b04      	cmp	r3, #4
 801328c:	d10c      	bne.n	80132a8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801328e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013290:	2b00      	cmp	r3, #0
 8013292:	d109      	bne.n	80132a8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013294:	4b33      	ldr	r3, [pc, #204]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	08db      	lsrs	r3, r3, #3
 801329a:	f003 0303 	and.w	r3, r3, #3
 801329e:	4a32      	ldr	r2, [pc, #200]	@ (8013368 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80132a0:	fa22 f303 	lsr.w	r3, r2, r3
 80132a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132a6:	e01e      	b.n	80132e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80132a8:	4b2e      	ldr	r3, [pc, #184]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80132b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80132b4:	d106      	bne.n	80132c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80132b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80132bc:	d102      	bne.n	80132c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80132be:	4b2b      	ldr	r3, [pc, #172]	@ (801336c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80132c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132c2:	e010      	b.n	80132e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80132c4:	4b27      	ldr	r3, [pc, #156]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80132cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80132d0:	d106      	bne.n	80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80132d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80132d8:	d102      	bne.n	80132e0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80132da:	4b25      	ldr	r3, [pc, #148]	@ (8013370 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80132dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132de:	e002      	b.n	80132e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80132e0:	2300      	movs	r3, #0
 80132e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80132e4:	e123      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80132e6:	e122      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80132e8:	2300      	movs	r3, #0
 80132ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132ec:	e11f      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80132ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80132f2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80132f6:	430b      	orrs	r3, r1
 80132f8:	d13c      	bne.n	8013374 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80132fa:	4b1a      	ldr	r3, [pc, #104]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80132fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013302:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013306:	2b00      	cmp	r3, #0
 8013308:	d004      	beq.n	8013314 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801330a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801330c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013310:	d012      	beq.n	8013338 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8013312:	e023      	b.n	801335c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013314:	4b13      	ldr	r3, [pc, #76]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801331c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013320:	d107      	bne.n	8013332 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013326:	4618      	mov	r0, r3
 8013328:	f000 fbcc 	bl	8013ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801332c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801332e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013330:	e0fd      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013332:	2300      	movs	r3, #0
 8013334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013336:	e0fa      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013338:	4b0a      	ldr	r3, [pc, #40]	@ (8013364 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013344:	d107      	bne.n	8013356 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013346:	f107 0318 	add.w	r3, r7, #24
 801334a:	4618      	mov	r0, r3
 801334c:	f000 f912 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013350:	6a3b      	ldr	r3, [r7, #32]
 8013352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013354:	e0eb      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013356:	2300      	movs	r3, #0
 8013358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801335a:	e0e8      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801335c:	2300      	movs	r3, #0
 801335e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013360:	e0e5      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8013362:	bf00      	nop
 8013364:	58024400 	.word	0x58024400
 8013368:	03d09000 	.word	0x03d09000
 801336c:	003d0900 	.word	0x003d0900
 8013370:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013378:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801337c:	430b      	orrs	r3, r1
 801337e:	f040 8085 	bne.w	801348c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8013382:	4b6d      	ldr	r3, [pc, #436]	@ (8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013386:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801338a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801338c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801338e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013392:	d06b      	beq.n	801346c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8013394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801339a:	d874      	bhi.n	8013486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801339c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801339e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80133a2:	d056      	beq.n	8013452 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80133a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80133aa:	d86c      	bhi.n	8013486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80133ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80133b2:	d03b      	beq.n	801342c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80133b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80133ba:	d864      	bhi.n	8013486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80133bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80133c2:	d021      	beq.n	8013408 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80133c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80133ca:	d85c      	bhi.n	8013486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80133cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d004      	beq.n	80133dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80133d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80133d8:	d004      	beq.n	80133e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80133da:	e054      	b.n	8013486 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80133dc:	f000 f8b4 	bl	8013548 <HAL_RCCEx_GetD3PCLK1Freq>
 80133e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80133e2:	e0a4      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80133e4:	4b54      	ldr	r3, [pc, #336]	@ (8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80133ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80133f0:	d107      	bne.n	8013402 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80133f2:	f107 0318 	add.w	r3, r7, #24
 80133f6:	4618      	mov	r0, r3
 80133f8:	f000 f8bc 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80133fc:	69fb      	ldr	r3, [r7, #28]
 80133fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013400:	e095      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013402:	2300      	movs	r3, #0
 8013404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013406:	e092      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013408:	4b4b      	ldr	r3, [pc, #300]	@ (8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013414:	d107      	bne.n	8013426 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013416:	f107 030c 	add.w	r3, r7, #12
 801341a:	4618      	mov	r0, r3
 801341c:	f000 f9fe 	bl	801381c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013424:	e083      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013426:	2300      	movs	r3, #0
 8013428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801342a:	e080      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801342c:	4b42      	ldr	r3, [pc, #264]	@ (8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	f003 0304 	and.w	r3, r3, #4
 8013434:	2b04      	cmp	r3, #4
 8013436:	d109      	bne.n	801344c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013438:	4b3f      	ldr	r3, [pc, #252]	@ (8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	08db      	lsrs	r3, r3, #3
 801343e:	f003 0303 	and.w	r3, r3, #3
 8013442:	4a3e      	ldr	r2, [pc, #248]	@ (801353c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8013444:	fa22 f303 	lsr.w	r3, r2, r3
 8013448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801344a:	e070      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801344c:	2300      	movs	r3, #0
 801344e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013450:	e06d      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8013452:	4b39      	ldr	r3, [pc, #228]	@ (8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801345a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801345e:	d102      	bne.n	8013466 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8013460:	4b37      	ldr	r3, [pc, #220]	@ (8013540 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8013462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013464:	e063      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013466:	2300      	movs	r3, #0
 8013468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801346a:	e060      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801346c:	4b32      	ldr	r3, [pc, #200]	@ (8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013478:	d102      	bne.n	8013480 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801347a:	4b32      	ldr	r3, [pc, #200]	@ (8013544 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801347c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801347e:	e056      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8013480:	2300      	movs	r3, #0
 8013482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013484:	e053      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8013486:	2300      	movs	r3, #0
 8013488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801348a:	e050      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801348c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013490:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8013494:	430b      	orrs	r3, r1
 8013496:	d148      	bne.n	801352a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8013498:	4b27      	ldr	r3, [pc, #156]	@ (8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801349a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801349c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80134a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80134a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80134a8:	d02a      	beq.n	8013500 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80134aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80134b0:	d838      	bhi.n	8013524 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80134b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d004      	beq.n	80134c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80134b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80134be:	d00d      	beq.n	80134dc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80134c0:	e030      	b.n	8013524 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80134c2:	4b1d      	ldr	r3, [pc, #116]	@ (8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80134ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80134ce:	d102      	bne.n	80134d6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80134d0:	4b1c      	ldr	r3, [pc, #112]	@ (8013544 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80134d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80134d4:	e02b      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80134d6:	2300      	movs	r3, #0
 80134d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134da:	e028      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80134dc:	4b16      	ldr	r3, [pc, #88]	@ (8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80134e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80134e8:	d107      	bne.n	80134fa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80134ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80134ee:	4618      	mov	r0, r3
 80134f0:	f000 fae8 	bl	8013ac4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80134f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80134f8:	e019      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80134fa:	2300      	movs	r3, #0
 80134fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80134fe:	e016      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013500:	4b0d      	ldr	r3, [pc, #52]	@ (8013538 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801350c:	d107      	bne.n	801351e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801350e:	f107 0318 	add.w	r3, r7, #24
 8013512:	4618      	mov	r0, r3
 8013514:	f000 f82e 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013518:	69fb      	ldr	r3, [r7, #28]
 801351a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801351c:	e007      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801351e:	2300      	movs	r3, #0
 8013520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013522:	e004      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8013524:	2300      	movs	r3, #0
 8013526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013528:	e001      	b.n	801352e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 801352a:	2300      	movs	r3, #0
 801352c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801352e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013530:	4618      	mov	r0, r3
 8013532:	3740      	adds	r7, #64	@ 0x40
 8013534:	46bd      	mov	sp, r7
 8013536:	bd80      	pop	{r7, pc}
 8013538:	58024400 	.word	0x58024400
 801353c:	03d09000 	.word	0x03d09000
 8013540:	003d0900 	.word	0x003d0900
 8013544:	016e3600 	.word	0x016e3600

08013548 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801354c:	f7fe f92e 	bl	80117ac <HAL_RCC_GetHCLKFreq>
 8013550:	4602      	mov	r2, r0
 8013552:	4b06      	ldr	r3, [pc, #24]	@ (801356c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013554:	6a1b      	ldr	r3, [r3, #32]
 8013556:	091b      	lsrs	r3, r3, #4
 8013558:	f003 0307 	and.w	r3, r3, #7
 801355c:	4904      	ldr	r1, [pc, #16]	@ (8013570 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801355e:	5ccb      	ldrb	r3, [r1, r3]
 8013560:	f003 031f 	and.w	r3, r3, #31
 8013564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013568:	4618      	mov	r0, r3
 801356a:	bd80      	pop	{r7, pc}
 801356c:	58024400 	.word	0x58024400
 8013570:	0801e37c 	.word	0x0801e37c

08013574 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8013574:	b480      	push	{r7}
 8013576:	b089      	sub	sp, #36	@ 0x24
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801357c:	4ba1      	ldr	r3, [pc, #644]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013580:	f003 0303 	and.w	r3, r3, #3
 8013584:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8013586:	4b9f      	ldr	r3, [pc, #636]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801358a:	0b1b      	lsrs	r3, r3, #12
 801358c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013590:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013592:	4b9c      	ldr	r3, [pc, #624]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013596:	091b      	lsrs	r3, r3, #4
 8013598:	f003 0301 	and.w	r3, r3, #1
 801359c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801359e:	4b99      	ldr	r3, [pc, #612]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80135a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135a2:	08db      	lsrs	r3, r3, #3
 80135a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80135a8:	693a      	ldr	r2, [r7, #16]
 80135aa:	fb02 f303 	mul.w	r3, r2, r3
 80135ae:	ee07 3a90 	vmov	s15, r3
 80135b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80135b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	f000 8111 	beq.w	80137e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80135c2:	69bb      	ldr	r3, [r7, #24]
 80135c4:	2b02      	cmp	r3, #2
 80135c6:	f000 8083 	beq.w	80136d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	2b02      	cmp	r3, #2
 80135ce:	f200 80a1 	bhi.w	8013714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80135d2:	69bb      	ldr	r3, [r7, #24]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d003      	beq.n	80135e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	2b01      	cmp	r3, #1
 80135dc:	d056      	beq.n	801368c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80135de:	e099      	b.n	8013714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80135e0:	4b88      	ldr	r3, [pc, #544]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	f003 0320 	and.w	r3, r3, #32
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d02d      	beq.n	8013648 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80135ec:	4b85      	ldr	r3, [pc, #532]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	08db      	lsrs	r3, r3, #3
 80135f2:	f003 0303 	and.w	r3, r3, #3
 80135f6:	4a84      	ldr	r2, [pc, #528]	@ (8013808 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80135f8:	fa22 f303 	lsr.w	r3, r2, r3
 80135fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	ee07 3a90 	vmov	s15, r3
 8013604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	ee07 3a90 	vmov	s15, r3
 801360e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013616:	4b7b      	ldr	r3, [pc, #492]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801361a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801361e:	ee07 3a90 	vmov	s15, r3
 8013622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013626:	ed97 6a03 	vldr	s12, [r7, #12]
 801362a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801380c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801362e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801363a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801363e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013642:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013646:	e087      	b.n	8013758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	ee07 3a90 	vmov	s15, r3
 801364e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013652:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013810 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8013656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801365a:	4b6a      	ldr	r3, [pc, #424]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801365c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801365e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013662:	ee07 3a90 	vmov	s15, r3
 8013666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801366a:	ed97 6a03 	vldr	s12, [r7, #12]
 801366e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801380c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801367a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801367e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801368a:	e065      	b.n	8013758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801368c:	697b      	ldr	r3, [r7, #20]
 801368e:	ee07 3a90 	vmov	s15, r3
 8013692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013696:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801369a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801369e:	4b59      	ldr	r3, [pc, #356]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80136a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136a6:	ee07 3a90 	vmov	s15, r3
 80136aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80136ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80136b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801380c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80136b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80136ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80136be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80136c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80136ce:	e043      	b.n	8013758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	ee07 3a90 	vmov	s15, r3
 80136d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80136da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80136de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80136e2:	4b48      	ldr	r3, [pc, #288]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80136e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136ea:	ee07 3a90 	vmov	s15, r3
 80136ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80136f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80136f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801380c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80136fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80136fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801370a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801370e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013712:	e021      	b.n	8013758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	ee07 3a90 	vmov	s15, r3
 801371a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801371e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8013722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013726:	4b37      	ldr	r3, [pc, #220]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801372a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801372e:	ee07 3a90 	vmov	s15, r3
 8013732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013736:	ed97 6a03 	vldr	s12, [r7, #12]
 801373a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801380c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801373e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801374a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801374e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013756:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8013758:	4b2a      	ldr	r3, [pc, #168]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801375a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801375c:	0a5b      	lsrs	r3, r3, #9
 801375e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013762:	ee07 3a90 	vmov	s15, r3
 8013766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801376a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801376e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013772:	edd7 6a07 	vldr	s13, [r7, #28]
 8013776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801377a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801377e:	ee17 2a90 	vmov	r2, s15
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8013786:	4b1f      	ldr	r3, [pc, #124]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801378a:	0c1b      	lsrs	r3, r3, #16
 801378c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013790:	ee07 3a90 	vmov	s15, r3
 8013794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013798:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801379c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80137a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80137a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80137a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80137ac:	ee17 2a90 	vmov	r2, s15
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80137b4:	4b13      	ldr	r3, [pc, #76]	@ (8013804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80137b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137b8:	0e1b      	lsrs	r3, r3, #24
 80137ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80137be:	ee07 3a90 	vmov	s15, r3
 80137c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80137ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80137ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80137d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80137d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80137da:	ee17 2a90 	vmov	r2, s15
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80137e2:	e008      	b.n	80137f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2200      	movs	r2, #0
 80137e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2200      	movs	r2, #0
 80137ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2200      	movs	r2, #0
 80137f4:	609a      	str	r2, [r3, #8]
}
 80137f6:	bf00      	nop
 80137f8:	3724      	adds	r7, #36	@ 0x24
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr
 8013802:	bf00      	nop
 8013804:	58024400 	.word	0x58024400
 8013808:	03d09000 	.word	0x03d09000
 801380c:	46000000 	.word	0x46000000
 8013810:	4c742400 	.word	0x4c742400
 8013814:	4a742400 	.word	0x4a742400
 8013818:	4bb71b00 	.word	0x4bb71b00

0801381c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801381c:	b480      	push	{r7}
 801381e:	b089      	sub	sp, #36	@ 0x24
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013824:	4ba1      	ldr	r3, [pc, #644]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013828:	f003 0303 	and.w	r3, r3, #3
 801382c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801382e:	4b9f      	ldr	r3, [pc, #636]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013832:	0d1b      	lsrs	r3, r3, #20
 8013834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013838:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801383a:	4b9c      	ldr	r3, [pc, #624]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801383e:	0a1b      	lsrs	r3, r3, #8
 8013840:	f003 0301 	and.w	r3, r3, #1
 8013844:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8013846:	4b99      	ldr	r3, [pc, #612]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801384a:	08db      	lsrs	r3, r3, #3
 801384c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013850:	693a      	ldr	r2, [r7, #16]
 8013852:	fb02 f303 	mul.w	r3, r2, r3
 8013856:	ee07 3a90 	vmov	s15, r3
 801385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801385e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	2b00      	cmp	r3, #0
 8013866:	f000 8111 	beq.w	8013a8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801386a:	69bb      	ldr	r3, [r7, #24]
 801386c:	2b02      	cmp	r3, #2
 801386e:	f000 8083 	beq.w	8013978 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	2b02      	cmp	r3, #2
 8013876:	f200 80a1 	bhi.w	80139bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801387a:	69bb      	ldr	r3, [r7, #24]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d003      	beq.n	8013888 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8013880:	69bb      	ldr	r3, [r7, #24]
 8013882:	2b01      	cmp	r3, #1
 8013884:	d056      	beq.n	8013934 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8013886:	e099      	b.n	80139bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013888:	4b88      	ldr	r3, [pc, #544]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	f003 0320 	and.w	r3, r3, #32
 8013890:	2b00      	cmp	r3, #0
 8013892:	d02d      	beq.n	80138f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013894:	4b85      	ldr	r3, [pc, #532]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	08db      	lsrs	r3, r3, #3
 801389a:	f003 0303 	and.w	r3, r3, #3
 801389e:	4a84      	ldr	r2, [pc, #528]	@ (8013ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80138a0:	fa22 f303 	lsr.w	r3, r2, r3
 80138a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	ee07 3a90 	vmov	s15, r3
 80138ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	ee07 3a90 	vmov	s15, r3
 80138b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80138ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80138be:	4b7b      	ldr	r3, [pc, #492]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80138c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80138c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138c6:	ee07 3a90 	vmov	s15, r3
 80138ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80138ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80138d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8013ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80138d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80138da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80138de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80138e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80138e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80138ee:	e087      	b.n	8013a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	ee07 3a90 	vmov	s15, r3
 80138f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80138fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8013ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80138fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013902:	4b6a      	ldr	r3, [pc, #424]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801390a:	ee07 3a90 	vmov	s15, r3
 801390e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013912:	ed97 6a03 	vldr	s12, [r7, #12]
 8013916:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8013ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801391a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801391e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801392e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013932:	e065      	b.n	8013a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	ee07 3a90 	vmov	s15, r3
 801393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801393e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8013abc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013946:	4b59      	ldr	r3, [pc, #356]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801394e:	ee07 3a90 	vmov	s15, r3
 8013952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013956:	ed97 6a03 	vldr	s12, [r7, #12]
 801395a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8013ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801395e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801396a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013976:	e043      	b.n	8013a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013978:	697b      	ldr	r3, [r7, #20]
 801397a:	ee07 3a90 	vmov	s15, r3
 801397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013982:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8013986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801398a:	4b48      	ldr	r3, [pc, #288]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013992:	ee07 3a90 	vmov	s15, r3
 8013996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801399a:	ed97 6a03 	vldr	s12, [r7, #12]
 801399e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8013ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80139a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80139a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80139aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80139ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80139ba:	e021      	b.n	8013a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	ee07 3a90 	vmov	s15, r3
 80139c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80139c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8013abc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80139ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80139ce:	4b37      	ldr	r3, [pc, #220]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80139d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139d6:	ee07 3a90 	vmov	s15, r3
 80139da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80139de:	ed97 6a03 	vldr	s12, [r7, #12]
 80139e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8013ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80139e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80139ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80139ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80139f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80139f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80139fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80139fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8013a00:	4b2a      	ldr	r3, [pc, #168]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a04:	0a5b      	lsrs	r3, r3, #9
 8013a06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013a0a:	ee07 3a90 	vmov	s15, r3
 8013a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8013a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a26:	ee17 2a90 	vmov	r2, s15
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8013a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a32:	0c1b      	lsrs	r3, r3, #16
 8013a34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013a38:	ee07 3a90 	vmov	s15, r3
 8013a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013a44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8013a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a54:	ee17 2a90 	vmov	r2, s15
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8013a5c:	4b13      	ldr	r3, [pc, #76]	@ (8013aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a60:	0e1b      	lsrs	r3, r3, #24
 8013a62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013a66:	ee07 3a90 	vmov	s15, r3
 8013a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013a6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8013a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013a82:	ee17 2a90 	vmov	r2, s15
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8013a8a:	e008      	b.n	8013a9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2200      	movs	r2, #0
 8013a96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	609a      	str	r2, [r3, #8]
}
 8013a9e:	bf00      	nop
 8013aa0:	3724      	adds	r7, #36	@ 0x24
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa8:	4770      	bx	lr
 8013aaa:	bf00      	nop
 8013aac:	58024400 	.word	0x58024400
 8013ab0:	03d09000 	.word	0x03d09000
 8013ab4:	46000000 	.word	0x46000000
 8013ab8:	4c742400 	.word	0x4c742400
 8013abc:	4a742400 	.word	0x4a742400
 8013ac0:	4bb71b00 	.word	0x4bb71b00

08013ac4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b089      	sub	sp, #36	@ 0x24
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013acc:	4ba0      	ldr	r3, [pc, #640]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ad0:	f003 0303 	and.w	r3, r3, #3
 8013ad4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8013ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ada:	091b      	lsrs	r3, r3, #4
 8013adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013ae0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8013ae2:	4b9b      	ldr	r3, [pc, #620]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ae6:	f003 0301 	and.w	r3, r3, #1
 8013aea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8013aec:	4b98      	ldr	r3, [pc, #608]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013af0:	08db      	lsrs	r3, r3, #3
 8013af2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013af6:	693a      	ldr	r2, [r7, #16]
 8013af8:	fb02 f303 	mul.w	r3, r2, r3
 8013afc:	ee07 3a90 	vmov	s15, r3
 8013b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	f000 8111 	beq.w	8013d32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8013b10:	69bb      	ldr	r3, [r7, #24]
 8013b12:	2b02      	cmp	r3, #2
 8013b14:	f000 8083 	beq.w	8013c1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8013b18:	69bb      	ldr	r3, [r7, #24]
 8013b1a:	2b02      	cmp	r3, #2
 8013b1c:	f200 80a1 	bhi.w	8013c62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8013b20:	69bb      	ldr	r3, [r7, #24]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d003      	beq.n	8013b2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8013b26:	69bb      	ldr	r3, [r7, #24]
 8013b28:	2b01      	cmp	r3, #1
 8013b2a:	d056      	beq.n	8013bda <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8013b2c:	e099      	b.n	8013c62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013b2e:	4b88      	ldr	r3, [pc, #544]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	f003 0320 	and.w	r3, r3, #32
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d02d      	beq.n	8013b96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013b3a:	4b85      	ldr	r3, [pc, #532]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	08db      	lsrs	r3, r3, #3
 8013b40:	f003 0303 	and.w	r3, r3, #3
 8013b44:	4a83      	ldr	r2, [pc, #524]	@ (8013d54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8013b46:	fa22 f303 	lsr.w	r3, r2, r3
 8013b4a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	ee07 3a90 	vmov	s15, r3
 8013b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	ee07 3a90 	vmov	s15, r3
 8013b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b64:	4b7a      	ldr	r3, [pc, #488]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b6c:	ee07 3a90 	vmov	s15, r3
 8013b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b74:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b78:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8013d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013b7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013b94:	e087      	b.n	8013ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013b96:	697b      	ldr	r3, [r7, #20]
 8013b98:	ee07 3a90 	vmov	s15, r3
 8013b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ba0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8013d5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ba8:	4b69      	ldr	r3, [pc, #420]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bb0:	ee07 3a90 	vmov	s15, r3
 8013bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bbc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8013d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013bd8:	e065      	b.n	8013ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	ee07 3a90 	vmov	s15, r3
 8013be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013be4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8013d60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8013be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013bec:	4b58      	ldr	r3, [pc, #352]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bf4:	ee07 3a90 	vmov	s15, r3
 8013bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c00:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8013d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013c1c:	e043      	b.n	8013ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	ee07 3a90 	vmov	s15, r3
 8013c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c28:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8013d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8013c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c30:	4b47      	ldr	r3, [pc, #284]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c38:	ee07 3a90 	vmov	s15, r3
 8013c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c40:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c44:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8013d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013c60:	e021      	b.n	8013ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	ee07 3a90 	vmov	s15, r3
 8013c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c6c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8013d5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c74:	4b36      	ldr	r3, [pc, #216]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c7c:	ee07 3a90 	vmov	s15, r3
 8013c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c84:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c88:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8013d58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ca0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013ca4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8013ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013caa:	0a5b      	lsrs	r3, r3, #9
 8013cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013cb0:	ee07 3a90 	vmov	s15, r3
 8013cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013cbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8013cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ccc:	ee17 2a90 	vmov	r2, s15
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8013cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013cd8:	0c1b      	lsrs	r3, r3, #16
 8013cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013cde:	ee07 3a90 	vmov	s15, r3
 8013ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8013cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cfa:	ee17 2a90 	vmov	r2, s15
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8013d02:	4b13      	ldr	r3, [pc, #76]	@ (8013d50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8013d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d06:	0e1b      	lsrs	r3, r3, #24
 8013d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d0c:	ee07 3a90 	vmov	s15, r3
 8013d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013d18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8013d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d28:	ee17 2a90 	vmov	r2, s15
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8013d30:	e008      	b.n	8013d44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2200      	movs	r2, #0
 8013d36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2200      	movs	r2, #0
 8013d42:	609a      	str	r2, [r3, #8]
}
 8013d44:	bf00      	nop
 8013d46:	3724      	adds	r7, #36	@ 0x24
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4e:	4770      	bx	lr
 8013d50:	58024400 	.word	0x58024400
 8013d54:	03d09000 	.word	0x03d09000
 8013d58:	46000000 	.word	0x46000000
 8013d5c:	4c742400 	.word	0x4c742400
 8013d60:	4a742400 	.word	0x4a742400
 8013d64:	4bb71b00 	.word	0x4bb71b00

08013d68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b084      	sub	sp, #16
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013d72:	2300      	movs	r3, #0
 8013d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013d76:	4b53      	ldr	r3, [pc, #332]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d7a:	f003 0303 	and.w	r3, r3, #3
 8013d7e:	2b03      	cmp	r3, #3
 8013d80:	d101      	bne.n	8013d86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8013d82:	2301      	movs	r3, #1
 8013d84:	e099      	b.n	8013eba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8013d86:	4b4f      	ldr	r3, [pc, #316]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	4a4e      	ldr	r2, [pc, #312]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013d8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013d92:	f7f4 ffab 	bl	8008cec <HAL_GetTick>
 8013d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013d98:	e008      	b.n	8013dac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013d9a:	f7f4 ffa7 	bl	8008cec <HAL_GetTick>
 8013d9e:	4602      	mov	r2, r0
 8013da0:	68bb      	ldr	r3, [r7, #8]
 8013da2:	1ad3      	subs	r3, r2, r3
 8013da4:	2b02      	cmp	r3, #2
 8013da6:	d901      	bls.n	8013dac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013da8:	2303      	movs	r3, #3
 8013daa:	e086      	b.n	8013eba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013dac:	4b45      	ldr	r3, [pc, #276]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d1f0      	bne.n	8013d9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8013db8:	4b42      	ldr	r3, [pc, #264]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013dbc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	031b      	lsls	r3, r3, #12
 8013dc6:	493f      	ldr	r1, [pc, #252]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013dc8:	4313      	orrs	r3, r2
 8013dca:	628b      	str	r3, [r1, #40]	@ 0x28
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	685b      	ldr	r3, [r3, #4]
 8013dd0:	3b01      	subs	r3, #1
 8013dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	689b      	ldr	r3, [r3, #8]
 8013dda:	3b01      	subs	r3, #1
 8013ddc:	025b      	lsls	r3, r3, #9
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	431a      	orrs	r2, r3
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	3b01      	subs	r3, #1
 8013de8:	041b      	lsls	r3, r3, #16
 8013dea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013dee:	431a      	orrs	r2, r3
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	691b      	ldr	r3, [r3, #16]
 8013df4:	3b01      	subs	r3, #1
 8013df6:	061b      	lsls	r3, r3, #24
 8013df8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013dfc:	4931      	ldr	r1, [pc, #196]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013dfe:	4313      	orrs	r3, r2
 8013e00:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8013e02:	4b30      	ldr	r3, [pc, #192]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	695b      	ldr	r3, [r3, #20]
 8013e0e:	492d      	ldr	r1, [pc, #180]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e10:	4313      	orrs	r3, r2
 8013e12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8013e14:	4b2b      	ldr	r3, [pc, #172]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e18:	f023 0220 	bic.w	r2, r3, #32
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	699b      	ldr	r3, [r3, #24]
 8013e20:	4928      	ldr	r1, [pc, #160]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e22:	4313      	orrs	r3, r2
 8013e24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8013e26:	4b27      	ldr	r3, [pc, #156]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e2a:	4a26      	ldr	r2, [pc, #152]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e2c:	f023 0310 	bic.w	r3, r3, #16
 8013e30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8013e32:	4b24      	ldr	r3, [pc, #144]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013e36:	4b24      	ldr	r3, [pc, #144]	@ (8013ec8 <RCCEx_PLL2_Config+0x160>)
 8013e38:	4013      	ands	r3, r2
 8013e3a:	687a      	ldr	r2, [r7, #4]
 8013e3c:	69d2      	ldr	r2, [r2, #28]
 8013e3e:	00d2      	lsls	r2, r2, #3
 8013e40:	4920      	ldr	r1, [pc, #128]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e42:	4313      	orrs	r3, r2
 8013e44:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8013e46:	4b1f      	ldr	r3, [pc, #124]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e4c:	f043 0310 	orr.w	r3, r3, #16
 8013e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d106      	bne.n	8013e66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8013e58:	4b1a      	ldr	r3, [pc, #104]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e5c:	4a19      	ldr	r2, [pc, #100]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013e62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013e64:	e00f      	b.n	8013e86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	2b01      	cmp	r3, #1
 8013e6a:	d106      	bne.n	8013e7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8013e6c:	4b15      	ldr	r3, [pc, #84]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e70:	4a14      	ldr	r2, [pc, #80]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013e76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013e78:	e005      	b.n	8013e86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8013e7a:	4b12      	ldr	r3, [pc, #72]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e7e:	4a11      	ldr	r2, [pc, #68]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013e84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8013e86:	4b0f      	ldr	r3, [pc, #60]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013e8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8013e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013e92:	f7f4 ff2b 	bl	8008cec <HAL_GetTick>
 8013e96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013e98:	e008      	b.n	8013eac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8013e9a:	f7f4 ff27 	bl	8008cec <HAL_GetTick>
 8013e9e:	4602      	mov	r2, r0
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	1ad3      	subs	r3, r2, r3
 8013ea4:	2b02      	cmp	r3, #2
 8013ea6:	d901      	bls.n	8013eac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8013ea8:	2303      	movs	r3, #3
 8013eaa:	e006      	b.n	8013eba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013eac:	4b05      	ldr	r3, [pc, #20]	@ (8013ec4 <RCCEx_PLL2_Config+0x15c>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d0f0      	beq.n	8013e9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8013eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eba:	4618      	mov	r0, r3
 8013ebc:	3710      	adds	r7, #16
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}
 8013ec2:	bf00      	nop
 8013ec4:	58024400 	.word	0x58024400
 8013ec8:	ffff0007 	.word	0xffff0007

08013ecc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b084      	sub	sp, #16
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8013eda:	4b53      	ldr	r3, [pc, #332]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ede:	f003 0303 	and.w	r3, r3, #3
 8013ee2:	2b03      	cmp	r3, #3
 8013ee4:	d101      	bne.n	8013eea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	e099      	b.n	801401e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8013eea:	4b4f      	ldr	r3, [pc, #316]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	4a4e      	ldr	r2, [pc, #312]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013ef6:	f7f4 fef9 	bl	8008cec <HAL_GetTick>
 8013efa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013efc:	e008      	b.n	8013f10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013efe:	f7f4 fef5 	bl	8008cec <HAL_GetTick>
 8013f02:	4602      	mov	r2, r0
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	1ad3      	subs	r3, r2, r3
 8013f08:	2b02      	cmp	r3, #2
 8013f0a:	d901      	bls.n	8013f10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8013f0c:	2303      	movs	r3, #3
 8013f0e:	e086      	b.n	801401e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8013f10:	4b45      	ldr	r3, [pc, #276]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d1f0      	bne.n	8013efe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8013f1c:	4b42      	ldr	r3, [pc, #264]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f20:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	051b      	lsls	r3, r3, #20
 8013f2a:	493f      	ldr	r1, [pc, #252]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013f2c:	4313      	orrs	r3, r2
 8013f2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	685b      	ldr	r3, [r3, #4]
 8013f34:	3b01      	subs	r3, #1
 8013f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	689b      	ldr	r3, [r3, #8]
 8013f3e:	3b01      	subs	r3, #1
 8013f40:	025b      	lsls	r3, r3, #9
 8013f42:	b29b      	uxth	r3, r3
 8013f44:	431a      	orrs	r2, r3
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	68db      	ldr	r3, [r3, #12]
 8013f4a:	3b01      	subs	r3, #1
 8013f4c:	041b      	lsls	r3, r3, #16
 8013f4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013f52:	431a      	orrs	r2, r3
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	691b      	ldr	r3, [r3, #16]
 8013f58:	3b01      	subs	r3, #1
 8013f5a:	061b      	lsls	r3, r3, #24
 8013f5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013f60:	4931      	ldr	r1, [pc, #196]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013f62:	4313      	orrs	r3, r2
 8013f64:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8013f66:	4b30      	ldr	r3, [pc, #192]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	695b      	ldr	r3, [r3, #20]
 8013f72:	492d      	ldr	r1, [pc, #180]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013f74:	4313      	orrs	r3, r2
 8013f76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8013f78:	4b2b      	ldr	r3, [pc, #172]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f7c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	699b      	ldr	r3, [r3, #24]
 8013f84:	4928      	ldr	r1, [pc, #160]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013f86:	4313      	orrs	r3, r2
 8013f88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8013f8a:	4b27      	ldr	r3, [pc, #156]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f8e:	4a26      	ldr	r2, [pc, #152]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013f94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8013f96:	4b24      	ldr	r3, [pc, #144]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013f9a:	4b24      	ldr	r3, [pc, #144]	@ (801402c <RCCEx_PLL3_Config+0x160>)
 8013f9c:	4013      	ands	r3, r2
 8013f9e:	687a      	ldr	r2, [r7, #4]
 8013fa0:	69d2      	ldr	r2, [r2, #28]
 8013fa2:	00d2      	lsls	r2, r2, #3
 8013fa4:	4920      	ldr	r1, [pc, #128]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013fa6:	4313      	orrs	r3, r2
 8013fa8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8013faa:	4b1f      	ldr	r3, [pc, #124]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fae:	4a1e      	ldr	r2, [pc, #120]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8013fb6:	683b      	ldr	r3, [r7, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d106      	bne.n	8013fca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8013fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fc0:	4a19      	ldr	r2, [pc, #100]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013fc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8013fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013fc8:	e00f      	b.n	8013fea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	2b01      	cmp	r3, #1
 8013fce:	d106      	bne.n	8013fde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8013fd0:	4b15      	ldr	r3, [pc, #84]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fd4:	4a14      	ldr	r2, [pc, #80]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013fd6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8013fda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013fdc:	e005      	b.n	8013fea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8013fde:	4b12      	ldr	r3, [pc, #72]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fe2:	4a11      	ldr	r2, [pc, #68]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013fe4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8013fea:	4b0f      	ldr	r3, [pc, #60]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	4a0e      	ldr	r2, [pc, #56]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8013ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013ff6:	f7f4 fe79 	bl	8008cec <HAL_GetTick>
 8013ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8013ffc:	e008      	b.n	8014010 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8013ffe:	f7f4 fe75 	bl	8008cec <HAL_GetTick>
 8014002:	4602      	mov	r2, r0
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	1ad3      	subs	r3, r2, r3
 8014008:	2b02      	cmp	r3, #2
 801400a:	d901      	bls.n	8014010 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801400c:	2303      	movs	r3, #3
 801400e:	e006      	b.n	801401e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014010:	4b05      	ldr	r3, [pc, #20]	@ (8014028 <RCCEx_PLL3_Config+0x15c>)
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014018:	2b00      	cmp	r3, #0
 801401a:	d0f0      	beq.n	8013ffe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801401c:	7bfb      	ldrb	r3, [r7, #15]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3710      	adds	r7, #16
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}
 8014026:	bf00      	nop
 8014028:	58024400 	.word	0x58024400
 801402c:	ffff0007 	.word	0xffff0007

08014030 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d101      	bne.n	8014042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801403e:	2301      	movs	r3, #1
 8014040:	e10f      	b.n	8014262 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2200      	movs	r2, #0
 8014046:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	4a87      	ldr	r2, [pc, #540]	@ (801426c <HAL_SPI_Init+0x23c>)
 801404e:	4293      	cmp	r3, r2
 8014050:	d00f      	beq.n	8014072 <HAL_SPI_Init+0x42>
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	4a86      	ldr	r2, [pc, #536]	@ (8014270 <HAL_SPI_Init+0x240>)
 8014058:	4293      	cmp	r3, r2
 801405a:	d00a      	beq.n	8014072 <HAL_SPI_Init+0x42>
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	4a84      	ldr	r2, [pc, #528]	@ (8014274 <HAL_SPI_Init+0x244>)
 8014062:	4293      	cmp	r3, r2
 8014064:	d005      	beq.n	8014072 <HAL_SPI_Init+0x42>
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	68db      	ldr	r3, [r3, #12]
 801406a:	2b0f      	cmp	r3, #15
 801406c:	d901      	bls.n	8014072 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801406e:	2301      	movs	r3, #1
 8014070:	e0f7      	b.n	8014262 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8014072:	6878      	ldr	r0, [r7, #4]
 8014074:	f001 fd22 	bl	8015abc <SPI_GetPacketSize>
 8014078:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	4a7b      	ldr	r2, [pc, #492]	@ (801426c <HAL_SPI_Init+0x23c>)
 8014080:	4293      	cmp	r3, r2
 8014082:	d00c      	beq.n	801409e <HAL_SPI_Init+0x6e>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	4a79      	ldr	r2, [pc, #484]	@ (8014270 <HAL_SPI_Init+0x240>)
 801408a:	4293      	cmp	r3, r2
 801408c:	d007      	beq.n	801409e <HAL_SPI_Init+0x6e>
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	4a78      	ldr	r2, [pc, #480]	@ (8014274 <HAL_SPI_Init+0x244>)
 8014094:	4293      	cmp	r3, r2
 8014096:	d002      	beq.n	801409e <HAL_SPI_Init+0x6e>
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	2b08      	cmp	r3, #8
 801409c:	d811      	bhi.n	80140c2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80140a2:	4a72      	ldr	r2, [pc, #456]	@ (801426c <HAL_SPI_Init+0x23c>)
 80140a4:	4293      	cmp	r3, r2
 80140a6:	d009      	beq.n	80140bc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	4a70      	ldr	r2, [pc, #448]	@ (8014270 <HAL_SPI_Init+0x240>)
 80140ae:	4293      	cmp	r3, r2
 80140b0:	d004      	beq.n	80140bc <HAL_SPI_Init+0x8c>
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	4a6f      	ldr	r2, [pc, #444]	@ (8014274 <HAL_SPI_Init+0x244>)
 80140b8:	4293      	cmp	r3, r2
 80140ba:	d104      	bne.n	80140c6 <HAL_SPI_Init+0x96>
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	2b10      	cmp	r3, #16
 80140c0:	d901      	bls.n	80140c6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80140c2:	2301      	movs	r3, #1
 80140c4:	e0cd      	b.n	8014262 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80140cc:	b2db      	uxtb	r3, r3
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d106      	bne.n	80140e0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2200      	movs	r2, #0
 80140d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80140da:	6878      	ldr	r0, [r7, #4]
 80140dc:	f7f3 fb5a 	bl	8007794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2202      	movs	r2, #2
 80140e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	f022 0201 	bic.w	r2, r2, #1
 80140f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	689b      	ldr	r3, [r3, #8]
 80140fe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8014102:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	699b      	ldr	r3, [r3, #24]
 8014108:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801410c:	d119      	bne.n	8014142 <HAL_SPI_Init+0x112>
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014116:	d103      	bne.n	8014120 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801411c:	2b00      	cmp	r3, #0
 801411e:	d008      	beq.n	8014132 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8014124:	2b00      	cmp	r3, #0
 8014126:	d10c      	bne.n	8014142 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801412c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014130:	d107      	bne.n	8014142 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	681a      	ldr	r2, [r3, #0]
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8014140:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	685b      	ldr	r3, [r3, #4]
 8014146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801414a:	2b00      	cmp	r3, #0
 801414c:	d00f      	beq.n	801416e <HAL_SPI_Init+0x13e>
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	68db      	ldr	r3, [r3, #12]
 8014152:	2b06      	cmp	r3, #6
 8014154:	d90b      	bls.n	801416e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	430a      	orrs	r2, r1
 801416a:	601a      	str	r2, [r3, #0]
 801416c:	e007      	b.n	801417e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	681a      	ldr	r2, [r3, #0]
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801417c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	69da      	ldr	r2, [r3, #28]
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014186:	431a      	orrs	r2, r3
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	431a      	orrs	r2, r3
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014190:	ea42 0103 	orr.w	r1, r2, r3
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	68da      	ldr	r2, [r3, #12]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	430a      	orrs	r2, r1
 801419e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141a8:	431a      	orrs	r2, r3
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80141ae:	431a      	orrs	r2, r3
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	699b      	ldr	r3, [r3, #24]
 80141b4:	431a      	orrs	r2, r3
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	691b      	ldr	r3, [r3, #16]
 80141ba:	431a      	orrs	r2, r3
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	695b      	ldr	r3, [r3, #20]
 80141c0:	431a      	orrs	r2, r3
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6a1b      	ldr	r3, [r3, #32]
 80141c6:	431a      	orrs	r2, r3
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	685b      	ldr	r3, [r3, #4]
 80141cc:	431a      	orrs	r2, r3
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80141d2:	431a      	orrs	r2, r3
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	689b      	ldr	r3, [r3, #8]
 80141d8:	431a      	orrs	r2, r3
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80141de:	ea42 0103 	orr.w	r1, r2, r3
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	430a      	orrs	r2, r1
 80141ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d113      	bne.n	801421e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	689b      	ldr	r3, [r3, #8]
 80141fc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8014208:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	689b      	ldr	r3, [r3, #8]
 8014210:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801421c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	f022 0201 	bic.w	r2, r2, #1
 801422c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	685b      	ldr	r3, [r3, #4]
 8014232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014236:	2b00      	cmp	r3, #0
 8014238:	d00a      	beq.n	8014250 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	68db      	ldr	r3, [r3, #12]
 8014240:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	430a      	orrs	r2, r1
 801424e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2200      	movs	r2, #0
 8014254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2201      	movs	r2, #1
 801425c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8014260:	2300      	movs	r3, #0
}
 8014262:	4618      	mov	r0, r3
 8014264:	3710      	adds	r7, #16
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}
 801426a:	bf00      	nop
 801426c:	40013000 	.word	0x40013000
 8014270:	40003800 	.word	0x40003800
 8014274:	40003c00 	.word	0x40003c00

08014278 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b088      	sub	sp, #32
 801427c:	af02      	add	r7, sp, #8
 801427e:	60f8      	str	r0, [r7, #12]
 8014280:	60b9      	str	r1, [r7, #8]
 8014282:	603b      	str	r3, [r7, #0]
 8014284:	4613      	mov	r3, r2
 8014286:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	3320      	adds	r3, #32
 801428e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014290:	f7f4 fd2c 	bl	8008cec <HAL_GetTick>
 8014294:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801429c:	b2db      	uxtb	r3, r3
 801429e:	2b01      	cmp	r3, #1
 80142a0:	d001      	beq.n	80142a6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80142a2:	2302      	movs	r3, #2
 80142a4:	e1d1      	b.n	801464a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d002      	beq.n	80142b2 <HAL_SPI_Transmit+0x3a>
 80142ac:	88fb      	ldrh	r3, [r7, #6]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d101      	bne.n	80142b6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80142b2:	2301      	movs	r3, #1
 80142b4:	e1c9      	b.n	801464a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80142bc:	2b01      	cmp	r3, #1
 80142be:	d101      	bne.n	80142c4 <HAL_SPI_Transmit+0x4c>
 80142c0:	2302      	movs	r3, #2
 80142c2:	e1c2      	b.n	801464a <HAL_SPI_Transmit+0x3d2>
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	2201      	movs	r2, #1
 80142c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2203      	movs	r2, #3
 80142d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	2200      	movs	r2, #0
 80142d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	68ba      	ldr	r2, [r7, #8]
 80142e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	88fa      	ldrh	r2, [r7, #6]
 80142e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	88fa      	ldrh	r2, [r7, #6]
 80142ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	2200      	movs	r2, #0
 80142f6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	2200      	movs	r2, #0
 80142fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	2200      	movs	r2, #0
 8014304:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	2200      	movs	r2, #0
 801430c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	2200      	movs	r2, #0
 8014312:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	689b      	ldr	r3, [r3, #8]
 8014318:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801431c:	d108      	bne.n	8014330 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	681a      	ldr	r2, [r3, #0]
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801432c:	601a      	str	r2, [r3, #0]
 801432e:	e009      	b.n	8014344 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	68db      	ldr	r3, [r3, #12]
 8014336:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8014342:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	685a      	ldr	r2, [r3, #4]
 801434a:	4b96      	ldr	r3, [pc, #600]	@ (80145a4 <HAL_SPI_Transmit+0x32c>)
 801434c:	4013      	ands	r3, r2
 801434e:	88f9      	ldrh	r1, [r7, #6]
 8014350:	68fa      	ldr	r2, [r7, #12]
 8014352:	6812      	ldr	r2, [r2, #0]
 8014354:	430b      	orrs	r3, r1
 8014356:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	681a      	ldr	r2, [r3, #0]
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	f042 0201 	orr.w	r2, r2, #1
 8014366:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	685b      	ldr	r3, [r3, #4]
 801436c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014370:	d107      	bne.n	8014382 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	681a      	ldr	r2, [r3, #0]
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014380:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	68db      	ldr	r3, [r3, #12]
 8014386:	2b0f      	cmp	r3, #15
 8014388:	d947      	bls.n	801441a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801438a:	e03f      	b.n	801440c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	695b      	ldr	r3, [r3, #20]
 8014392:	f003 0302 	and.w	r3, r3, #2
 8014396:	2b02      	cmp	r3, #2
 8014398:	d114      	bne.n	80143c4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	6812      	ldr	r2, [r2, #0]
 80143a4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80143aa:	1d1a      	adds	r2, r3, #4
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80143b6:	b29b      	uxth	r3, r3
 80143b8:	3b01      	subs	r3, #1
 80143ba:	b29a      	uxth	r2, r3
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80143c2:	e023      	b.n	801440c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80143c4:	f7f4 fc92 	bl	8008cec <HAL_GetTick>
 80143c8:	4602      	mov	r2, r0
 80143ca:	693b      	ldr	r3, [r7, #16]
 80143cc:	1ad3      	subs	r3, r2, r3
 80143ce:	683a      	ldr	r2, [r7, #0]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d803      	bhi.n	80143dc <HAL_SPI_Transmit+0x164>
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143da:	d102      	bne.n	80143e2 <HAL_SPI_Transmit+0x16a>
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d114      	bne.n	801440c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80143e2:	68f8      	ldr	r0, [r7, #12]
 80143e4:	f001 fa9c 	bl	8015920 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80143ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	2201      	movs	r2, #1
 80143fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	2200      	movs	r2, #0
 8014404:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014408:	2303      	movs	r3, #3
 801440a:	e11e      	b.n	801464a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014412:	b29b      	uxth	r3, r3
 8014414:	2b00      	cmp	r3, #0
 8014416:	d1b9      	bne.n	801438c <HAL_SPI_Transmit+0x114>
 8014418:	e0f1      	b.n	80145fe <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	68db      	ldr	r3, [r3, #12]
 801441e:	2b07      	cmp	r3, #7
 8014420:	f240 80e6 	bls.w	80145f0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8014424:	e05d      	b.n	80144e2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	695b      	ldr	r3, [r3, #20]
 801442c:	f003 0302 	and.w	r3, r3, #2
 8014430:	2b02      	cmp	r3, #2
 8014432:	d132      	bne.n	801449a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801443a:	b29b      	uxth	r3, r3
 801443c:	2b01      	cmp	r3, #1
 801443e:	d918      	bls.n	8014472 <HAL_SPI_Transmit+0x1fa>
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014444:	2b00      	cmp	r3, #0
 8014446:	d014      	beq.n	8014472 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	6812      	ldr	r2, [r2, #0]
 8014452:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014458:	1d1a      	adds	r2, r3, #4
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014464:	b29b      	uxth	r3, r3
 8014466:	3b02      	subs	r3, #2
 8014468:	b29a      	uxth	r2, r3
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014470:	e037      	b.n	80144e2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014476:	881a      	ldrh	r2, [r3, #0]
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014480:	1c9a      	adds	r2, r3, #2
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801448c:	b29b      	uxth	r3, r3
 801448e:	3b01      	subs	r3, #1
 8014490:	b29a      	uxth	r2, r3
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014498:	e023      	b.n	80144e2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801449a:	f7f4 fc27 	bl	8008cec <HAL_GetTick>
 801449e:	4602      	mov	r2, r0
 80144a0:	693b      	ldr	r3, [r7, #16]
 80144a2:	1ad3      	subs	r3, r2, r3
 80144a4:	683a      	ldr	r2, [r7, #0]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d803      	bhi.n	80144b2 <HAL_SPI_Transmit+0x23a>
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144b0:	d102      	bne.n	80144b8 <HAL_SPI_Transmit+0x240>
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d114      	bne.n	80144e2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80144b8:	68f8      	ldr	r0, [r7, #12]
 80144ba:	f001 fa31 	bl	8015920 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80144c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	2201      	movs	r2, #1
 80144d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	2200      	movs	r2, #0
 80144da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80144de:	2303      	movs	r3, #3
 80144e0:	e0b3      	b.n	801464a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80144e8:	b29b      	uxth	r3, r3
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d19b      	bne.n	8014426 <HAL_SPI_Transmit+0x1ae>
 80144ee:	e086      	b.n	80145fe <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	695b      	ldr	r3, [r3, #20]
 80144f6:	f003 0302 	and.w	r3, r3, #2
 80144fa:	2b02      	cmp	r3, #2
 80144fc:	d154      	bne.n	80145a8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014504:	b29b      	uxth	r3, r3
 8014506:	2b03      	cmp	r3, #3
 8014508:	d918      	bls.n	801453c <HAL_SPI_Transmit+0x2c4>
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801450e:	2b40      	cmp	r3, #64	@ 0x40
 8014510:	d914      	bls.n	801453c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	6812      	ldr	r2, [r2, #0]
 801451c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014522:	1d1a      	adds	r2, r3, #4
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801452e:	b29b      	uxth	r3, r3
 8014530:	3b04      	subs	r3, #4
 8014532:	b29a      	uxth	r2, r3
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801453a:	e059      	b.n	80145f0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014542:	b29b      	uxth	r3, r3
 8014544:	2b01      	cmp	r3, #1
 8014546:	d917      	bls.n	8014578 <HAL_SPI_Transmit+0x300>
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801454c:	2b00      	cmp	r3, #0
 801454e:	d013      	beq.n	8014578 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014554:	881a      	ldrh	r2, [r3, #0]
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801455e:	1c9a      	adds	r2, r3, #2
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801456a:	b29b      	uxth	r3, r3
 801456c:	3b02      	subs	r3, #2
 801456e:	b29a      	uxth	r2, r3
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8014576:	e03b      	b.n	80145f0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	3320      	adds	r3, #32
 8014582:	7812      	ldrb	r2, [r2, #0]
 8014584:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801458a:	1c5a      	adds	r2, r3, #1
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014596:	b29b      	uxth	r3, r3
 8014598:	3b01      	subs	r3, #1
 801459a:	b29a      	uxth	r2, r3
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80145a2:	e025      	b.n	80145f0 <HAL_SPI_Transmit+0x378>
 80145a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80145a8:	f7f4 fba0 	bl	8008cec <HAL_GetTick>
 80145ac:	4602      	mov	r2, r0
 80145ae:	693b      	ldr	r3, [r7, #16]
 80145b0:	1ad3      	subs	r3, r2, r3
 80145b2:	683a      	ldr	r2, [r7, #0]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d803      	bhi.n	80145c0 <HAL_SPI_Transmit+0x348>
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145be:	d102      	bne.n	80145c6 <HAL_SPI_Transmit+0x34e>
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d114      	bne.n	80145f0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80145c6:	68f8      	ldr	r0, [r7, #12]
 80145c8:	f001 f9aa 	bl	8015920 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80145d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	2201      	movs	r2, #1
 80145e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	2200      	movs	r2, #0
 80145e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80145ec:	2303      	movs	r3, #3
 80145ee:	e02c      	b.n	801464a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80145f6:	b29b      	uxth	r3, r3
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	f47f af79 	bne.w	80144f0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	9300      	str	r3, [sp, #0]
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	2200      	movs	r2, #0
 8014606:	2108      	movs	r1, #8
 8014608:	68f8      	ldr	r0, [r7, #12]
 801460a:	f001 fa29 	bl	8015a60 <SPI_WaitOnFlagUntilTimeout>
 801460e:	4603      	mov	r3, r0
 8014610:	2b00      	cmp	r3, #0
 8014612:	d007      	beq.n	8014624 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801461a:	f043 0220 	orr.w	r2, r3, #32
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014624:	68f8      	ldr	r0, [r7, #12]
 8014626:	f001 f97b 	bl	8015920 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	2201      	movs	r2, #1
 801462e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	2200      	movs	r2, #0
 8014636:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014640:	2b00      	cmp	r3, #0
 8014642:	d001      	beq.n	8014648 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8014644:	2301      	movs	r3, #1
 8014646:	e000      	b.n	801464a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8014648:	2300      	movs	r3, #0
  }
}
 801464a:	4618      	mov	r0, r3
 801464c:	3718      	adds	r7, #24
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}
 8014652:	bf00      	nop

08014654 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b088      	sub	sp, #32
 8014658:	af00      	add	r7, sp, #0
 801465a:	60f8      	str	r0, [r7, #12]
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	603b      	str	r3, [r7, #0]
 8014660:	4613      	mov	r3, r2
 8014662:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014668:	095b      	lsrs	r3, r3, #5
 801466a:	b29b      	uxth	r3, r3
 801466c:	3301      	adds	r3, #1
 801466e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	3330      	adds	r3, #48	@ 0x30
 8014676:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014678:	f7f4 fb38 	bl	8008cec <HAL_GetTick>
 801467c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014684:	b2db      	uxtb	r3, r3
 8014686:	2b01      	cmp	r3, #1
 8014688:	d001      	beq.n	801468e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 801468a:	2302      	movs	r3, #2
 801468c:	e250      	b.n	8014b30 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d002      	beq.n	801469a <HAL_SPI_Receive+0x46>
 8014694:	88fb      	ldrh	r3, [r7, #6]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d101      	bne.n	801469e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 801469a:	2301      	movs	r3, #1
 801469c:	e248      	b.n	8014b30 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80146a4:	2b01      	cmp	r3, #1
 80146a6:	d101      	bne.n	80146ac <HAL_SPI_Receive+0x58>
 80146a8:	2302      	movs	r3, #2
 80146aa:	e241      	b.n	8014b30 <HAL_SPI_Receive+0x4dc>
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	2201      	movs	r2, #1
 80146b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	2204      	movs	r2, #4
 80146b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	2200      	movs	r2, #0
 80146c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	68ba      	ldr	r2, [r7, #8]
 80146c8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	88fa      	ldrh	r2, [r7, #6]
 80146ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	88fa      	ldrh	r2, [r7, #6]
 80146d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	2200      	movs	r2, #0
 80146de:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	2200      	movs	r2, #0
 80146e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	2200      	movs	r2, #0
 80146ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	2200      	movs	r2, #0
 80146f4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	2200      	movs	r2, #0
 80146fa:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	689b      	ldr	r3, [r3, #8]
 8014700:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8014704:	d108      	bne.n	8014718 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	681a      	ldr	r2, [r3, #0]
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8014714:	601a      	str	r2, [r3, #0]
 8014716:	e009      	b.n	801472c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	68db      	ldr	r3, [r3, #12]
 801471e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801472a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	685a      	ldr	r2, [r3, #4]
 8014732:	4b95      	ldr	r3, [pc, #596]	@ (8014988 <HAL_SPI_Receive+0x334>)
 8014734:	4013      	ands	r3, r2
 8014736:	88f9      	ldrh	r1, [r7, #6]
 8014738:	68fa      	ldr	r2, [r7, #12]
 801473a:	6812      	ldr	r2, [r2, #0]
 801473c:	430b      	orrs	r3, r1
 801473e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	681a      	ldr	r2, [r3, #0]
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	f042 0201 	orr.w	r2, r2, #1
 801474e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	685b      	ldr	r3, [r3, #4]
 8014754:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014758:	d107      	bne.n	801476a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	681a      	ldr	r2, [r3, #0]
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014768:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	68db      	ldr	r3, [r3, #12]
 801476e:	2b0f      	cmp	r3, #15
 8014770:	d96c      	bls.n	801484c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014772:	e064      	b.n	801483e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	695b      	ldr	r3, [r3, #20]
 801477a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	695b      	ldr	r3, [r3, #20]
 8014782:	f003 0301 	and.w	r3, r3, #1
 8014786:	2b01      	cmp	r3, #1
 8014788:	d114      	bne.n	80147b4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	681a      	ldr	r2, [r3, #0]
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014792:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014794:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801479a:	1d1a      	adds	r2, r3, #4
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147a6:	b29b      	uxth	r3, r3
 80147a8:	3b01      	subs	r3, #1
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80147b2:	e044      	b.n	801483e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147ba:	b29b      	uxth	r3, r3
 80147bc:	8bfa      	ldrh	r2, [r7, #30]
 80147be:	429a      	cmp	r2, r3
 80147c0:	d919      	bls.n	80147f6 <HAL_SPI_Receive+0x1a2>
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d014      	beq.n	80147f6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	681a      	ldr	r2, [r3, #0]
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80147d6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80147dc:	1d1a      	adds	r2, r3, #4
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	3b01      	subs	r3, #1
 80147ec:	b29a      	uxth	r2, r3
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80147f4:	e023      	b.n	801483e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80147f6:	f7f4 fa79 	bl	8008cec <HAL_GetTick>
 80147fa:	4602      	mov	r2, r0
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	1ad3      	subs	r3, r2, r3
 8014800:	683a      	ldr	r2, [r7, #0]
 8014802:	429a      	cmp	r2, r3
 8014804:	d803      	bhi.n	801480e <HAL_SPI_Receive+0x1ba>
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801480c:	d102      	bne.n	8014814 <HAL_SPI_Receive+0x1c0>
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d114      	bne.n	801483e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014814:	68f8      	ldr	r0, [r7, #12]
 8014816:	f001 f883 	bl	8015920 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014820:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	2201      	movs	r2, #1
 801482e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	2200      	movs	r2, #0
 8014836:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801483a:	2303      	movs	r3, #3
 801483c:	e178      	b.n	8014b30 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014844:	b29b      	uxth	r3, r3
 8014846:	2b00      	cmp	r3, #0
 8014848:	d194      	bne.n	8014774 <HAL_SPI_Receive+0x120>
 801484a:	e15e      	b.n	8014b0a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	68db      	ldr	r3, [r3, #12]
 8014850:	2b07      	cmp	r3, #7
 8014852:	f240 8153 	bls.w	8014afc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8014856:	e08f      	b.n	8014978 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	695b      	ldr	r3, [r3, #20]
 801485e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	695b      	ldr	r3, [r3, #20]
 8014866:	f003 0301 	and.w	r3, r3, #1
 801486a:	2b01      	cmp	r3, #1
 801486c:	d114      	bne.n	8014898 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014872:	69ba      	ldr	r2, [r7, #24]
 8014874:	8812      	ldrh	r2, [r2, #0]
 8014876:	b292      	uxth	r2, r2
 8014878:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801487e:	1c9a      	adds	r2, r3, #2
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801488a:	b29b      	uxth	r3, r3
 801488c:	3b01      	subs	r3, #1
 801488e:	b29a      	uxth	r2, r3
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014896:	e06f      	b.n	8014978 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801489e:	b29b      	uxth	r3, r3
 80148a0:	8bfa      	ldrh	r2, [r7, #30]
 80148a2:	429a      	cmp	r2, r3
 80148a4:	d924      	bls.n	80148f0 <HAL_SPI_Receive+0x29c>
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d01f      	beq.n	80148f0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80148b4:	69ba      	ldr	r2, [r7, #24]
 80148b6:	8812      	ldrh	r2, [r2, #0]
 80148b8:	b292      	uxth	r2, r2
 80148ba:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80148c0:	1c9a      	adds	r2, r3, #2
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80148ca:	69ba      	ldr	r2, [r7, #24]
 80148cc:	8812      	ldrh	r2, [r2, #0]
 80148ce:	b292      	uxth	r2, r2
 80148d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80148d6:	1c9a      	adds	r2, r3, #2
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80148e2:	b29b      	uxth	r3, r3
 80148e4:	3b02      	subs	r3, #2
 80148e6:	b29a      	uxth	r2, r3
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80148ee:	e043      	b.n	8014978 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80148f6:	b29b      	uxth	r3, r3
 80148f8:	2b01      	cmp	r3, #1
 80148fa:	d119      	bne.n	8014930 <HAL_SPI_Receive+0x2dc>
 80148fc:	693b      	ldr	r3, [r7, #16]
 80148fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014902:	2b00      	cmp	r3, #0
 8014904:	d014      	beq.n	8014930 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801490a:	69ba      	ldr	r2, [r7, #24]
 801490c:	8812      	ldrh	r2, [r2, #0]
 801490e:	b292      	uxth	r2, r2
 8014910:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014916:	1c9a      	adds	r2, r3, #2
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014922:	b29b      	uxth	r3, r3
 8014924:	3b01      	subs	r3, #1
 8014926:	b29a      	uxth	r2, r3
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801492e:	e023      	b.n	8014978 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014930:	f7f4 f9dc 	bl	8008cec <HAL_GetTick>
 8014934:	4602      	mov	r2, r0
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	1ad3      	subs	r3, r2, r3
 801493a:	683a      	ldr	r2, [r7, #0]
 801493c:	429a      	cmp	r2, r3
 801493e:	d803      	bhi.n	8014948 <HAL_SPI_Receive+0x2f4>
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014946:	d102      	bne.n	801494e <HAL_SPI_Receive+0x2fa>
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d114      	bne.n	8014978 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801494e:	68f8      	ldr	r0, [r7, #12]
 8014950:	f000 ffe6 	bl	8015920 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801495a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2201      	movs	r2, #1
 8014968:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	2200      	movs	r2, #0
 8014970:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014974:	2303      	movs	r3, #3
 8014976:	e0db      	b.n	8014b30 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801497e:	b29b      	uxth	r3, r3
 8014980:	2b00      	cmp	r3, #0
 8014982:	f47f af69 	bne.w	8014858 <HAL_SPI_Receive+0x204>
 8014986:	e0c0      	b.n	8014b0a <HAL_SPI_Receive+0x4b6>
 8014988:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	695b      	ldr	r3, [r3, #20]
 8014992:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	695b      	ldr	r3, [r3, #20]
 801499a:	f003 0301 	and.w	r3, r3, #1
 801499e:	2b01      	cmp	r3, #1
 80149a0:	d117      	bne.n	80149d2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80149ae:	7812      	ldrb	r2, [r2, #0]
 80149b0:	b2d2      	uxtb	r2, r2
 80149b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80149b8:	1c5a      	adds	r2, r3, #1
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80149c4:	b29b      	uxth	r3, r3
 80149c6:	3b01      	subs	r3, #1
 80149c8:	b29a      	uxth	r2, r3
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80149d0:	e094      	b.n	8014afc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80149d8:	b29b      	uxth	r3, r3
 80149da:	8bfa      	ldrh	r2, [r7, #30]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d946      	bls.n	8014a6e <HAL_SPI_Receive+0x41a>
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d041      	beq.n	8014a6e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80149f6:	7812      	ldrb	r2, [r2, #0]
 80149f8:	b2d2      	uxtb	r2, r2
 80149fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a00:	1c5a      	adds	r2, r3, #1
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a12:	7812      	ldrb	r2, [r2, #0]
 8014a14:	b2d2      	uxtb	r2, r2
 8014a16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a1c:	1c5a      	adds	r2, r3, #1
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a2e:	7812      	ldrb	r2, [r2, #0]
 8014a30:	b2d2      	uxtb	r2, r2
 8014a32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a38:	1c5a      	adds	r2, r3, #1
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a4a:	7812      	ldrb	r2, [r2, #0]
 8014a4c:	b2d2      	uxtb	r2, r2
 8014a4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a54:	1c5a      	adds	r2, r3, #1
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	3b04      	subs	r3, #4
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014a6c:	e046      	b.n	8014afc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014a74:	b29b      	uxth	r3, r3
 8014a76:	2b03      	cmp	r3, #3
 8014a78:	d81c      	bhi.n	8014ab4 <HAL_SPI_Receive+0x460>
 8014a7a:	693b      	ldr	r3, [r7, #16]
 8014a7c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d017      	beq.n	8014ab4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a90:	7812      	ldrb	r2, [r2, #0]
 8014a92:	b2d2      	uxtb	r2, r2
 8014a94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014a9a:	1c5a      	adds	r2, r3, #1
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	3b01      	subs	r3, #1
 8014aaa:	b29a      	uxth	r2, r3
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014ab2:	e023      	b.n	8014afc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014ab4:	f7f4 f91a 	bl	8008cec <HAL_GetTick>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	1ad3      	subs	r3, r2, r3
 8014abe:	683a      	ldr	r2, [r7, #0]
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	d803      	bhi.n	8014acc <HAL_SPI_Receive+0x478>
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aca:	d102      	bne.n	8014ad2 <HAL_SPI_Receive+0x47e>
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d114      	bne.n	8014afc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8014ad2:	68f8      	ldr	r0, [r7, #12]
 8014ad4:	f000 ff24 	bl	8015920 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014ade:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	2201      	movs	r2, #1
 8014aec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	2200      	movs	r2, #0
 8014af4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8014af8:	2303      	movs	r3, #3
 8014afa:	e019      	b.n	8014b30 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	f47f af41 	bne.w	801498c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8014b0a:	68f8      	ldr	r0, [r7, #12]
 8014b0c:	f000 ff08 	bl	8015920 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	2201      	movs	r2, #1
 8014b14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d001      	beq.n	8014b2e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	e000      	b.n	8014b30 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8014b2e:	2300      	movs	r3, #0
  }
}
 8014b30:	4618      	mov	r0, r3
 8014b32:	3720      	adds	r7, #32
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}

08014b38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b08e      	sub	sp, #56	@ 0x38
 8014b3c:	af02      	add	r7, sp, #8
 8014b3e:	60f8      	str	r0, [r7, #12]
 8014b40:	60b9      	str	r1, [r7, #8]
 8014b42:	607a      	str	r2, [r7, #4]
 8014b44:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	3320      	adds	r3, #32
 8014b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	3330      	adds	r3, #48	@ 0x30
 8014b54:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b5a:	095b      	lsrs	r3, r3, #5
 8014b5c:	b29b      	uxth	r3, r3
 8014b5e:	3301      	adds	r3, #1
 8014b60:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014b62:	f7f4 f8c3 	bl	8008cec <HAL_GetTick>
 8014b66:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8014b68:	887b      	ldrh	r3, [r7, #2]
 8014b6a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8014b6c:	887b      	ldrh	r3, [r7, #2]
 8014b6e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8014b76:	b2db      	uxtb	r3, r3
 8014b78:	2b01      	cmp	r3, #1
 8014b7a:	d001      	beq.n	8014b80 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8014b7c:	2302      	movs	r3, #2
 8014b7e:	e310      	b.n	80151a2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8014b80:	68bb      	ldr	r3, [r7, #8]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d005      	beq.n	8014b92 <HAL_SPI_TransmitReceive+0x5a>
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d002      	beq.n	8014b92 <HAL_SPI_TransmitReceive+0x5a>
 8014b8c:	887b      	ldrh	r3, [r7, #2]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d101      	bne.n	8014b96 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8014b92:	2301      	movs	r3, #1
 8014b94:	e305      	b.n	80151a2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014b9c:	2b01      	cmp	r3, #1
 8014b9e:	d101      	bne.n	8014ba4 <HAL_SPI_TransmitReceive+0x6c>
 8014ba0:	2302      	movs	r3, #2
 8014ba2:	e2fe      	b.n	80151a2 <HAL_SPI_TransmitReceive+0x66a>
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	2201      	movs	r2, #1
 8014ba8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	2205      	movs	r2, #5
 8014bb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	887a      	ldrh	r2, [r7, #2]
 8014bc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	887a      	ldrh	r2, [r7, #2]
 8014bce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	68ba      	ldr	r2, [r7, #8]
 8014bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	887a      	ldrh	r2, [r7, #2]
 8014bdc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	887a      	ldrh	r2, [r7, #2]
 8014be4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	2200      	movs	r2, #0
 8014bec:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	2200      	movs	r2, #0
 8014bf2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	68da      	ldr	r2, [r3, #12]
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8014c02:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	4a70      	ldr	r2, [pc, #448]	@ (8014dcc <HAL_SPI_TransmitReceive+0x294>)
 8014c0a:	4293      	cmp	r3, r2
 8014c0c:	d009      	beq.n	8014c22 <HAL_SPI_TransmitReceive+0xea>
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	4a6f      	ldr	r2, [pc, #444]	@ (8014dd0 <HAL_SPI_TransmitReceive+0x298>)
 8014c14:	4293      	cmp	r3, r2
 8014c16:	d004      	beq.n	8014c22 <HAL_SPI_TransmitReceive+0xea>
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	4a6d      	ldr	r2, [pc, #436]	@ (8014dd4 <HAL_SPI_TransmitReceive+0x29c>)
 8014c1e:	4293      	cmp	r3, r2
 8014c20:	d102      	bne.n	8014c28 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8014c22:	2310      	movs	r3, #16
 8014c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014c26:	e001      	b.n	8014c2c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8014c28:	2308      	movs	r3, #8
 8014c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	685a      	ldr	r2, [r3, #4]
 8014c32:	4b69      	ldr	r3, [pc, #420]	@ (8014dd8 <HAL_SPI_TransmitReceive+0x2a0>)
 8014c34:	4013      	ands	r3, r2
 8014c36:	8879      	ldrh	r1, [r7, #2]
 8014c38:	68fa      	ldr	r2, [r7, #12]
 8014c3a:	6812      	ldr	r2, [r2, #0]
 8014c3c:	430b      	orrs	r3, r1
 8014c3e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	681a      	ldr	r2, [r3, #0]
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	f042 0201 	orr.w	r2, r2, #1
 8014c4e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	685b      	ldr	r3, [r3, #4]
 8014c54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8014c58:	d107      	bne.n	8014c6a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	681a      	ldr	r2, [r3, #0]
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014c68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	68db      	ldr	r3, [r3, #12]
 8014c6e:	2b0f      	cmp	r3, #15
 8014c70:	f240 80a2 	bls.w	8014db8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8014c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c76:	089b      	lsrs	r3, r3, #2
 8014c78:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014c7a:	e094      	b.n	8014da6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	695b      	ldr	r3, [r3, #20]
 8014c82:	f003 0302 	and.w	r3, r3, #2
 8014c86:	2b02      	cmp	r3, #2
 8014c88:	d120      	bne.n	8014ccc <HAL_SPI_TransmitReceive+0x194>
 8014c8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d01d      	beq.n	8014ccc <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014c90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014c92:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c96:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d217      	bcs.n	8014ccc <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	6812      	ldr	r2, [r2, #0]
 8014ca6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cac:	1d1a      	adds	r2, r3, #4
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	3b01      	subs	r3, #1
 8014cbc:	b29a      	uxth	r2, r3
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014cca:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	695b      	ldr	r3, [r3, #20]
 8014cd2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8014cd4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d065      	beq.n	8014da6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	695b      	ldr	r3, [r3, #20]
 8014ce0:	f003 0301 	and.w	r3, r3, #1
 8014ce4:	2b01      	cmp	r3, #1
 8014ce6:	d118      	bne.n	8014d1a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	681a      	ldr	r2, [r3, #0]
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014cf0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014cf2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014cf8:	1d1a      	adds	r2, r3, #4
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d04:	b29b      	uxth	r3, r3
 8014d06:	3b01      	subs	r3, #1
 8014d08:	b29a      	uxth	r2, r3
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d16:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014d18:	e045      	b.n	8014da6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014d1a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014d1c:	8bfb      	ldrh	r3, [r7, #30]
 8014d1e:	429a      	cmp	r2, r3
 8014d20:	d21d      	bcs.n	8014d5e <HAL_SPI_TransmitReceive+0x226>
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d018      	beq.n	8014d5e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	681a      	ldr	r2, [r3, #0]
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8014d36:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014d3c:	1d1a      	adds	r2, r3, #4
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d48:	b29b      	uxth	r3, r3
 8014d4a:	3b01      	subs	r3, #1
 8014d4c:	b29a      	uxth	r2, r3
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014d5a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014d5c:	e023      	b.n	8014da6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014d5e:	f7f3 ffc5 	bl	8008cec <HAL_GetTick>
 8014d62:	4602      	mov	r2, r0
 8014d64:	69bb      	ldr	r3, [r7, #24]
 8014d66:	1ad3      	subs	r3, r2, r3
 8014d68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d803      	bhi.n	8014d76 <HAL_SPI_TransmitReceive+0x23e>
 8014d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d74:	d102      	bne.n	8014d7c <HAL_SPI_TransmitReceive+0x244>
 8014d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d114      	bne.n	8014da6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014d7c:	68f8      	ldr	r0, [r7, #12]
 8014d7e:	f000 fdcf 	bl	8015920 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	2201      	movs	r2, #1
 8014d96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8014da2:	2303      	movs	r3, #3
 8014da4:	e1fd      	b.n	80151a2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014da6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	f47f af67 	bne.w	8014c7c <HAL_SPI_TransmitReceive+0x144>
 8014dae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	f47f af63 	bne.w	8014c7c <HAL_SPI_TransmitReceive+0x144>
 8014db6:	e1ce      	b.n	8015156 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	68db      	ldr	r3, [r3, #12]
 8014dbc:	2b07      	cmp	r3, #7
 8014dbe:	f240 81c2 	bls.w	8015146 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8014dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dc4:	085b      	lsrs	r3, r3, #1
 8014dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014dc8:	e0c9      	b.n	8014f5e <HAL_SPI_TransmitReceive+0x426>
 8014dca:	bf00      	nop
 8014dcc:	40013000 	.word	0x40013000
 8014dd0:	40003800 	.word	0x40003800
 8014dd4:	40003c00 	.word	0x40003c00
 8014dd8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	695b      	ldr	r3, [r3, #20]
 8014de2:	f003 0302 	and.w	r3, r3, #2
 8014de6:	2b02      	cmp	r3, #2
 8014de8:	d11f      	bne.n	8014e2a <HAL_SPI_TransmitReceive+0x2f2>
 8014dea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d01c      	beq.n	8014e2a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014df0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014df2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014df6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d216      	bcs.n	8014e2a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014e00:	881a      	ldrh	r2, [r3, #0]
 8014e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e04:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014e0a:	1c9a      	adds	r2, r3, #2
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014e16:	b29b      	uxth	r3, r3
 8014e18:	3b01      	subs	r3, #1
 8014e1a:	b29a      	uxth	r2, r3
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014e28:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	695b      	ldr	r3, [r3, #20]
 8014e30:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8014e32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	f000 8092 	beq.w	8014f5e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	695b      	ldr	r3, [r3, #20]
 8014e40:	f003 0301 	and.w	r3, r3, #1
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	d118      	bne.n	8014e7a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e4c:	6a3a      	ldr	r2, [r7, #32]
 8014e4e:	8812      	ldrh	r2, [r2, #0]
 8014e50:	b292      	uxth	r2, r2
 8014e52:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e58:	1c9a      	adds	r2, r3, #2
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	3b01      	subs	r3, #1
 8014e68:	b29a      	uxth	r2, r3
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e76:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014e78:	e071      	b.n	8014f5e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8014e7a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014e7c:	8bfb      	ldrh	r3, [r7, #30]
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d228      	bcs.n	8014ed4 <HAL_SPI_TransmitReceive+0x39c>
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d023      	beq.n	8014ed4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e90:	6a3a      	ldr	r2, [r7, #32]
 8014e92:	8812      	ldrh	r2, [r2, #0]
 8014e94:	b292      	uxth	r2, r2
 8014e96:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014e9c:	1c9a      	adds	r2, r3, #2
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ea6:	6a3a      	ldr	r2, [r7, #32]
 8014ea8:	8812      	ldrh	r2, [r2, #0]
 8014eaa:	b292      	uxth	r2, r2
 8014eac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014eb2:	1c9a      	adds	r2, r3, #2
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ebe:	b29b      	uxth	r3, r3
 8014ec0:	3b02      	subs	r3, #2
 8014ec2:	b29a      	uxth	r2, r3
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014ed0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014ed2:	e044      	b.n	8014f5e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8014ed4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014ed6:	2b01      	cmp	r3, #1
 8014ed8:	d11d      	bne.n	8014f16 <HAL_SPI_TransmitReceive+0x3de>
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d018      	beq.n	8014f16 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ee8:	6a3a      	ldr	r2, [r7, #32]
 8014eea:	8812      	ldrh	r2, [r2, #0]
 8014eec:	b292      	uxth	r2, r2
 8014eee:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ef4:	1c9a      	adds	r2, r3, #2
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	3b01      	subs	r3, #1
 8014f04:	b29a      	uxth	r2, r3
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014f12:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014f14:	e023      	b.n	8014f5e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8014f16:	f7f3 fee9 	bl	8008cec <HAL_GetTick>
 8014f1a:	4602      	mov	r2, r0
 8014f1c:	69bb      	ldr	r3, [r7, #24]
 8014f1e:	1ad3      	subs	r3, r2, r3
 8014f20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d803      	bhi.n	8014f2e <HAL_SPI_TransmitReceive+0x3f6>
 8014f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f2c:	d102      	bne.n	8014f34 <HAL_SPI_TransmitReceive+0x3fc>
 8014f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d114      	bne.n	8014f5e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8014f34:	68f8      	ldr	r0, [r7, #12]
 8014f36:	f000 fcf3 	bl	8015920 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014f40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	2201      	movs	r2, #1
 8014f4e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	2200      	movs	r2, #0
 8014f56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8014f5a:	2303      	movs	r3, #3
 8014f5c:	e121      	b.n	80151a2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8014f5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	f47f af3b 	bne.w	8014ddc <HAL_SPI_TransmitReceive+0x2a4>
 8014f66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	f47f af37 	bne.w	8014ddc <HAL_SPI_TransmitReceive+0x2a4>
 8014f6e:	e0f2      	b.n	8015156 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	695b      	ldr	r3, [r3, #20]
 8014f76:	f003 0302 	and.w	r3, r3, #2
 8014f7a:	2b02      	cmp	r3, #2
 8014f7c:	d121      	bne.n	8014fc2 <HAL_SPI_TransmitReceive+0x48a>
 8014f7e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d01e      	beq.n	8014fc2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8014f84:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014f86:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8014f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f8a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d218      	bcs.n	8014fc2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	3320      	adds	r3, #32
 8014f9a:	7812      	ldrb	r2, [r2, #0]
 8014f9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014fa2:	1c5a      	adds	r2, r3, #1
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014fae:	b29b      	uxth	r3, r3
 8014fb0:	3b01      	subs	r3, #1
 8014fb2:	b29a      	uxth	r2, r3
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014fc0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	695b      	ldr	r3, [r3, #20]
 8014fc8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8014fca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	f000 80ba 	beq.w	8015146 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	695b      	ldr	r3, [r3, #20]
 8014fd8:	f003 0301 	and.w	r3, r3, #1
 8014fdc:	2b01      	cmp	r3, #1
 8014fde:	d11b      	bne.n	8015018 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014fec:	7812      	ldrb	r2, [r2, #0]
 8014fee:	b2d2      	uxtb	r2, r2
 8014ff0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014ff6:	1c5a      	adds	r2, r3, #1
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015002:	b29b      	uxth	r3, r3
 8015004:	3b01      	subs	r3, #1
 8015006:	b29a      	uxth	r2, r3
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015014:	853b      	strh	r3, [r7, #40]	@ 0x28
 8015016:	e096      	b.n	8015146 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8015018:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801501a:	8bfb      	ldrh	r3, [r7, #30]
 801501c:	429a      	cmp	r2, r3
 801501e:	d24a      	bcs.n	80150b6 <HAL_SPI_TransmitReceive+0x57e>
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015026:	2b00      	cmp	r3, #0
 8015028:	d045      	beq.n	80150b6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015036:	7812      	ldrb	r2, [r2, #0]
 8015038:	b2d2      	uxtb	r2, r2
 801503a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015040:	1c5a      	adds	r2, r3, #1
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015052:	7812      	ldrb	r2, [r2, #0]
 8015054:	b2d2      	uxtb	r2, r2
 8015056:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801505c:	1c5a      	adds	r2, r3, #1
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801506e:	7812      	ldrb	r2, [r2, #0]
 8015070:	b2d2      	uxtb	r2, r2
 8015072:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015078:	1c5a      	adds	r2, r3, #1
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801508a:	7812      	ldrb	r2, [r2, #0]
 801508c:	b2d2      	uxtb	r2, r2
 801508e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015094:	1c5a      	adds	r2, r3, #1
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150a0:	b29b      	uxth	r3, r3
 80150a2:	3b04      	subs	r3, #4
 80150a4:	b29a      	uxth	r2, r3
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80150b4:	e047      	b.n	8015146 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80150b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80150b8:	2b03      	cmp	r3, #3
 80150ba:	d820      	bhi.n	80150fe <HAL_SPI_TransmitReceive+0x5c6>
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d01b      	beq.n	80150fe <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150d2:	7812      	ldrb	r2, [r2, #0]
 80150d4:	b2d2      	uxtb	r2, r2
 80150d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80150dc:	1c5a      	adds	r2, r3, #1
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150e8:	b29b      	uxth	r3, r3
 80150ea:	3b01      	subs	r3, #1
 80150ec:	b29a      	uxth	r2, r3
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80150fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80150fc:	e023      	b.n	8015146 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80150fe:	f7f3 fdf5 	bl	8008cec <HAL_GetTick>
 8015102:	4602      	mov	r2, r0
 8015104:	69bb      	ldr	r3, [r7, #24]
 8015106:	1ad3      	subs	r3, r2, r3
 8015108:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801510a:	429a      	cmp	r2, r3
 801510c:	d803      	bhi.n	8015116 <HAL_SPI_TransmitReceive+0x5de>
 801510e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015114:	d102      	bne.n	801511c <HAL_SPI_TransmitReceive+0x5e4>
 8015116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015118:	2b00      	cmp	r3, #0
 801511a:	d114      	bne.n	8015146 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 801511c:	68f8      	ldr	r0, [r7, #12]
 801511e:	f000 fbff 	bl	8015920 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015128:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	2201      	movs	r2, #1
 8015136:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	2200      	movs	r2, #0
 801513e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8015142:	2303      	movs	r3, #3
 8015144:	e02d      	b.n	80151a2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8015146:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015148:	2b00      	cmp	r3, #0
 801514a:	f47f af11 	bne.w	8014f70 <HAL_SPI_TransmitReceive+0x438>
 801514e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8015150:	2b00      	cmp	r3, #0
 8015152:	f47f af0d 	bne.w	8014f70 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8015156:	69bb      	ldr	r3, [r7, #24]
 8015158:	9300      	str	r3, [sp, #0]
 801515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801515c:	2200      	movs	r2, #0
 801515e:	2108      	movs	r1, #8
 8015160:	68f8      	ldr	r0, [r7, #12]
 8015162:	f000 fc7d 	bl	8015a60 <SPI_WaitOnFlagUntilTimeout>
 8015166:	4603      	mov	r3, r0
 8015168:	2b00      	cmp	r3, #0
 801516a:	d007      	beq.n	801517c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015172:	f043 0220 	orr.w	r2, r3, #32
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801517c:	68f8      	ldr	r0, [r7, #12]
 801517e:	f000 fbcf 	bl	8015920 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	2201      	movs	r2, #1
 8015186:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	2200      	movs	r2, #0
 801518e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015198:	2b00      	cmp	r3, #0
 801519a:	d001      	beq.n	80151a0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 801519c:	2301      	movs	r3, #1
 801519e:	e000      	b.n	80151a2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80151a0:	2300      	movs	r3, #0
  }
}
 80151a2:	4618      	mov	r0, r3
 80151a4:	3730      	adds	r7, #48	@ 0x30
 80151a6:	46bd      	mov	sp, r7
 80151a8:	bd80      	pop	{r7, pc}
 80151aa:	bf00      	nop

080151ac <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b084      	sub	sp, #16
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	60f8      	str	r0, [r7, #12]
 80151b4:	60b9      	str	r1, [r7, #8]
 80151b6:	4613      	mov	r3, r2
 80151b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80151c0:	b2db      	uxtb	r3, r3
 80151c2:	2b01      	cmp	r3, #1
 80151c4:	d001      	beq.n	80151ca <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80151c6:	2302      	movs	r3, #2
 80151c8:	e126      	b.n	8015418 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d002      	beq.n	80151d6 <HAL_SPI_Transmit_DMA+0x2a>
 80151d0:	88fb      	ldrh	r3, [r7, #6]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d101      	bne.n	80151da <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80151d6:	2301      	movs	r3, #1
 80151d8:	e11e      	b.n	8015418 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80151e0:	2b01      	cmp	r3, #1
 80151e2:	d101      	bne.n	80151e8 <HAL_SPI_Transmit_DMA+0x3c>
 80151e4:	2302      	movs	r3, #2
 80151e6:	e117      	b.n	8015418 <HAL_SPI_Transmit_DMA+0x26c>
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	2201      	movs	r2, #1
 80151ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	2203      	movs	r2, #3
 80151f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	2200      	movs	r2, #0
 80151fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	68ba      	ldr	r2, [r7, #8]
 8015204:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	88fa      	ldrh	r2, [r7, #6]
 801520a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	88fa      	ldrh	r2, [r7, #6]
 8015212:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	2200      	movs	r2, #0
 801521a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	2200      	movs	r2, #0
 8015220:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2200      	movs	r2, #0
 8015226:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	2200      	movs	r2, #0
 801522c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	2200      	movs	r2, #0
 8015234:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	689b      	ldr	r3, [r3, #8]
 801523c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8015240:	d108      	bne.n	8015254 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015250:	601a      	str	r2, [r3, #0]
 8015252:	e009      	b.n	8015268 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	68db      	ldr	r3, [r3, #12]
 801525a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015266:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	68db      	ldr	r3, [r3, #12]
 801526c:	2b0f      	cmp	r3, #15
 801526e:	d905      	bls.n	801527c <HAL_SPI_Transmit_DMA+0xd0>
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015274:	699b      	ldr	r3, [r3, #24]
 8015276:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801527a:	d10f      	bne.n	801529c <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8015280:	2b07      	cmp	r3, #7
 8015282:	d911      	bls.n	80152a8 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015288:	699b      	ldr	r3, [r3, #24]
 801528a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801528e:	d00b      	beq.n	80152a8 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015294:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8015296:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801529a:	d005      	beq.n	80152a8 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	2200      	movs	r2, #0
 80152a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 80152a4:	2301      	movs	r3, #1
 80152a6:	e0b7      	b.n	8015418 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	68db      	ldr	r3, [r3, #12]
 80152ac:	2b07      	cmp	r3, #7
 80152ae:	d820      	bhi.n	80152f2 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80152b4:	699b      	ldr	r3, [r3, #24]
 80152b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80152ba:	d109      	bne.n	80152d0 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	3301      	adds	r3, #1
 80152c6:	105b      	asrs	r3, r3, #1
 80152c8:	b29a      	uxth	r2, r3
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80152d4:	699b      	ldr	r3, [r3, #24]
 80152d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80152da:	d11e      	bne.n	801531a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80152e2:	b29b      	uxth	r3, r3
 80152e4:	3303      	adds	r3, #3
 80152e6:	109b      	asrs	r3, r3, #2
 80152e8:	b29a      	uxth	r2, r3
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80152f0:	e013      	b.n	801531a <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	68db      	ldr	r3, [r3, #12]
 80152f6:	2b0f      	cmp	r3, #15
 80152f8:	d80f      	bhi.n	801531a <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80152fe:	699b      	ldr	r3, [r3, #24]
 8015300:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015304:	d109      	bne.n	801531a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801530c:	b29b      	uxth	r3, r3
 801530e:	3301      	adds	r3, #1
 8015310:	105b      	asrs	r3, r3, #1
 8015312:	b29a      	uxth	r2, r3
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801531e:	4a40      	ldr	r2, [pc, #256]	@ (8015420 <HAL_SPI_Transmit_DMA+0x274>)
 8015320:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015326:	4a3f      	ldr	r2, [pc, #252]	@ (8015424 <HAL_SPI_Transmit_DMA+0x278>)
 8015328:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801532e:	4a3e      	ldr	r2, [pc, #248]	@ (8015428 <HAL_SPI_Transmit_DMA+0x27c>)
 8015330:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015336:	2200      	movs	r2, #0
 8015338:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	689a      	ldr	r2, [r3, #8]
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8015348:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015352:	4619      	mov	r1, r3
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	3320      	adds	r3, #32
 801535a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015362:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8015364:	f7f6 f972 	bl	800b64c <HAL_DMA_Start_IT>
 8015368:	4603      	mov	r3, r0
 801536a:	2b00      	cmp	r3, #0
 801536c:	d011      	beq.n	8015392 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015374:	f043 0210 	orr.w	r2, r3, #16
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	2201      	movs	r2, #1
 8015382:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	2200      	movs	r2, #0
 801538a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 801538e:	2301      	movs	r3, #1
 8015390:	e042      	b.n	8015418 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015396:	69db      	ldr	r3, [r3, #28]
 8015398:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801539c:	d108      	bne.n	80153b0 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	6859      	ldr	r1, [r3, #4]
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	681a      	ldr	r2, [r3, #0]
 80153a8:	4b20      	ldr	r3, [pc, #128]	@ (801542c <HAL_SPI_Transmit_DMA+0x280>)
 80153aa:	400b      	ands	r3, r1
 80153ac:	6053      	str	r3, [r2, #4]
 80153ae:	e009      	b.n	80153c4 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	685a      	ldr	r2, [r3, #4]
 80153b6:	4b1d      	ldr	r3, [pc, #116]	@ (801542c <HAL_SPI_Transmit_DMA+0x280>)
 80153b8:	4013      	ands	r3, r2
 80153ba:	88f9      	ldrh	r1, [r7, #6]
 80153bc:	68fa      	ldr	r2, [r7, #12]
 80153be:	6812      	ldr	r2, [r2, #0]
 80153c0:	430b      	orrs	r3, r1
 80153c2:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	689a      	ldr	r2, [r3, #8]
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80153d2:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	691a      	ldr	r2, [r3, #16]
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80153e2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	681a      	ldr	r2, [r3, #0]
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	f042 0201 	orr.w	r2, r2, #1
 80153f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	685b      	ldr	r3, [r3, #4]
 80153f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80153fc:	d107      	bne.n	801540e <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	681a      	ldr	r2, [r3, #0]
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801540c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	2200      	movs	r2, #0
 8015412:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8015416:	2300      	movs	r3, #0
}
 8015418:	4618      	mov	r0, r3
 801541a:	3710      	adds	r7, #16
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}
 8015420:	0801588b 	.word	0x0801588b
 8015424:	08015845 	.word	0x08015845
 8015428:	080158a7 	.word	0x080158a7
 801542c:	ffff0000 	.word	0xffff0000

08015430 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b08a      	sub	sp, #40	@ 0x28
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	691b      	ldr	r3, [r3, #16]
 801543e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	695b      	ldr	r3, [r3, #20]
 8015446:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8015448:	6a3a      	ldr	r2, [r7, #32]
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	4013      	ands	r3, r2
 801544e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	689b      	ldr	r3, [r3, #8]
 8015456:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8015458:	2300      	movs	r3, #0
 801545a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015462:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	3330      	adds	r3, #48	@ 0x30
 801546a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801546c:	69fb      	ldr	r3, [r7, #28]
 801546e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015472:	2b00      	cmp	r3, #0
 8015474:	d010      	beq.n	8015498 <HAL_SPI_IRQHandler+0x68>
 8015476:	6a3b      	ldr	r3, [r7, #32]
 8015478:	f003 0308 	and.w	r3, r3, #8
 801547c:	2b00      	cmp	r3, #0
 801547e:	d00b      	beq.n	8015498 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	699a      	ldr	r2, [r3, #24]
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801548e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	f000 f9cd 	bl	8015830 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8015496:	e192      	b.n	80157be <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8015498:	69bb      	ldr	r3, [r7, #24]
 801549a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d113      	bne.n	80154ca <HAL_SPI_IRQHandler+0x9a>
 80154a2:	69bb      	ldr	r3, [r7, #24]
 80154a4:	f003 0320 	and.w	r3, r3, #32
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d10e      	bne.n	80154ca <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80154ac:	69bb      	ldr	r3, [r7, #24]
 80154ae:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d009      	beq.n	80154ca <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	4798      	blx	r3
    hspi->RxISR(hspi);
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154c2:	6878      	ldr	r0, [r7, #4]
 80154c4:	4798      	blx	r3
    handled = 1UL;
 80154c6:	2301      	movs	r3, #1
 80154c8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80154ca:	69bb      	ldr	r3, [r7, #24]
 80154cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d10f      	bne.n	80154f4 <HAL_SPI_IRQHandler+0xc4>
 80154d4:	69bb      	ldr	r3, [r7, #24]
 80154d6:	f003 0301 	and.w	r3, r3, #1
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d00a      	beq.n	80154f4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80154de:	69bb      	ldr	r3, [r7, #24]
 80154e0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d105      	bne.n	80154f4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	4798      	blx	r3
    handled = 1UL;
 80154f0:	2301      	movs	r3, #1
 80154f2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80154f4:	69bb      	ldr	r3, [r7, #24]
 80154f6:	f003 0320 	and.w	r3, r3, #32
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d10f      	bne.n	801551e <HAL_SPI_IRQHandler+0xee>
 80154fe:	69bb      	ldr	r3, [r7, #24]
 8015500:	f003 0302 	and.w	r3, r3, #2
 8015504:	2b00      	cmp	r3, #0
 8015506:	d00a      	beq.n	801551e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8015508:	69bb      	ldr	r3, [r7, #24]
 801550a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801550e:	2b00      	cmp	r3, #0
 8015510:	d105      	bne.n	801551e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015516:	6878      	ldr	r0, [r7, #4]
 8015518:	4798      	blx	r3
    handled = 1UL;
 801551a:	2301      	movs	r3, #1
 801551c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015520:	2b00      	cmp	r3, #0
 8015522:	f040 8147 	bne.w	80157b4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8015526:	69bb      	ldr	r3, [r7, #24]
 8015528:	f003 0308 	and.w	r3, r3, #8
 801552c:	2b00      	cmp	r3, #0
 801552e:	f000 808b 	beq.w	8015648 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	699a      	ldr	r2, [r3, #24]
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	f042 0208 	orr.w	r2, r2, #8
 8015540:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	699a      	ldr	r2, [r3, #24]
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	f042 0210 	orr.w	r2, r2, #16
 8015550:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	699a      	ldr	r2, [r3, #24]
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8015560:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	691a      	ldr	r2, [r3, #16]
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	f022 0208 	bic.w	r2, r2, #8
 8015570:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	689b      	ldr	r3, [r3, #8]
 8015578:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801557c:	2b00      	cmp	r3, #0
 801557e:	d13d      	bne.n	80155fc <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8015580:	e036      	b.n	80155f0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	68db      	ldr	r3, [r3, #12]
 8015586:	2b0f      	cmp	r3, #15
 8015588:	d90b      	bls.n	80155a2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015592:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8015594:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801559a:	1d1a      	adds	r2, r3, #4
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	665a      	str	r2, [r3, #100]	@ 0x64
 80155a0:	e01d      	b.n	80155de <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	68db      	ldr	r3, [r3, #12]
 80155a6:	2b07      	cmp	r3, #7
 80155a8:	d90b      	bls.n	80155c2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155ae:	68fa      	ldr	r2, [r7, #12]
 80155b0:	8812      	ldrh	r2, [r2, #0]
 80155b2:	b292      	uxth	r2, r2
 80155b4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155ba:	1c9a      	adds	r2, r3, #2
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	665a      	str	r2, [r3, #100]	@ 0x64
 80155c0:	e00d      	b.n	80155de <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155ce:	7812      	ldrb	r2, [r2, #0]
 80155d0:	b2d2      	uxtb	r2, r2
 80155d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80155d8:	1c5a      	adds	r2, r3, #1
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155e4:	b29b      	uxth	r3, r3
 80155e6:	3b01      	subs	r3, #1
 80155e8:	b29a      	uxth	r2, r3
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80155f6:	b29b      	uxth	r3, r3
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d1c2      	bne.n	8015582 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f000 f98f 	bl	8015920 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	2201      	movs	r2, #1
 8015606:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015610:	2b00      	cmp	r3, #0
 8015612:	d003      	beq.n	801561c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f000 f901 	bl	801581c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801561a:	e0d0      	b.n	80157be <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801561c:	7cfb      	ldrb	r3, [r7, #19]
 801561e:	2b05      	cmp	r3, #5
 8015620:	d103      	bne.n	801562a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f000 f8e6 	bl	80157f4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8015628:	e0c6      	b.n	80157b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801562a:	7cfb      	ldrb	r3, [r7, #19]
 801562c:	2b04      	cmp	r3, #4
 801562e:	d103      	bne.n	8015638 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f000 f8d5 	bl	80157e0 <HAL_SPI_RxCpltCallback>
    return;
 8015636:	e0bf      	b.n	80157b8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8015638:	7cfb      	ldrb	r3, [r7, #19]
 801563a:	2b03      	cmp	r3, #3
 801563c:	f040 80bc 	bne.w	80157b8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f000 f8c3 	bl	80157cc <HAL_SPI_TxCpltCallback>
    return;
 8015646:	e0b7      	b.n	80157b8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8015648:	69bb      	ldr	r3, [r7, #24]
 801564a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801564e:	2b00      	cmp	r3, #0
 8015650:	f000 80b5 	beq.w	80157be <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801565a:	2b00      	cmp	r3, #0
 801565c:	d00f      	beq.n	801567e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015664:	f043 0204 	orr.w	r2, r3, #4
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	699a      	ldr	r2, [r3, #24]
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801567c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801567e:	69bb      	ldr	r3, [r7, #24]
 8015680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015684:	2b00      	cmp	r3, #0
 8015686:	d00f      	beq.n	80156a8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801568e:	f043 0201 	orr.w	r2, r3, #1
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	699a      	ldr	r2, [r3, #24]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80156a6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80156a8:	69bb      	ldr	r3, [r7, #24]
 80156aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d00f      	beq.n	80156d2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156b8:	f043 0208 	orr.w	r2, r3, #8
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	699a      	ldr	r2, [r3, #24]
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80156d0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80156d2:	69bb      	ldr	r3, [r7, #24]
 80156d4:	f003 0320 	and.w	r3, r3, #32
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d00f      	beq.n	80156fc <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80156e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	699a      	ldr	r2, [r3, #24]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	f042 0220 	orr.w	r2, r2, #32
 80156fa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015702:	2b00      	cmp	r3, #0
 8015704:	d05a      	beq.n	80157bc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	681a      	ldr	r2, [r3, #0]
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	f022 0201 	bic.w	r2, r2, #1
 8015714:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	6919      	ldr	r1, [r3, #16]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681a      	ldr	r2, [r3, #0]
 8015720:	4b28      	ldr	r3, [pc, #160]	@ (80157c4 <HAL_SPI_IRQHandler+0x394>)
 8015722:	400b      	ands	r3, r1
 8015724:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801572c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8015730:	d138      	bne.n	80157a4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	689a      	ldr	r2, [r3, #8]
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8015740:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015746:	2b00      	cmp	r3, #0
 8015748:	d013      	beq.n	8015772 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801574e:	4a1e      	ldr	r2, [pc, #120]	@ (80157c8 <HAL_SPI_IRQHandler+0x398>)
 8015750:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015756:	4618      	mov	r0, r3
 8015758:	f7f6 fd00 	bl	800c15c <HAL_DMA_Abort_IT>
 801575c:	4603      	mov	r3, r0
 801575e:	2b00      	cmp	r3, #0
 8015760:	d007      	beq.n	8015772 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015768:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015776:	2b00      	cmp	r3, #0
 8015778:	d020      	beq.n	80157bc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801577e:	4a12      	ldr	r2, [pc, #72]	@ (80157c8 <HAL_SPI_IRQHandler+0x398>)
 8015780:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015786:	4618      	mov	r0, r3
 8015788:	f7f6 fce8 	bl	800c15c <HAL_DMA_Abort_IT>
 801578c:	4603      	mov	r3, r0
 801578e:	2b00      	cmp	r3, #0
 8015790:	d014      	beq.n	80157bc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015798:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80157a2:	e00b      	b.n	80157bc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2201      	movs	r2, #1
 80157a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f000 f835 	bl	801581c <HAL_SPI_ErrorCallback>
    return;
 80157b2:	e003      	b.n	80157bc <HAL_SPI_IRQHandler+0x38c>
    return;
 80157b4:	bf00      	nop
 80157b6:	e002      	b.n	80157be <HAL_SPI_IRQHandler+0x38e>
    return;
 80157b8:	bf00      	nop
 80157ba:	e000      	b.n	80157be <HAL_SPI_IRQHandler+0x38e>
    return;
 80157bc:	bf00      	nop
  }
}
 80157be:	3728      	adds	r7, #40	@ 0x28
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	fffffc94 	.word	0xfffffc94
 80157c8:	080158ed 	.word	0x080158ed

080157cc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80157cc:	b480      	push	{r7}
 80157ce:	b083      	sub	sp, #12
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80157d4:	bf00      	nop
 80157d6:	370c      	adds	r7, #12
 80157d8:	46bd      	mov	sp, r7
 80157da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157de:	4770      	bx	lr

080157e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80157e0:	b480      	push	{r7}
 80157e2:	b083      	sub	sp, #12
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80157e8:	bf00      	nop
 80157ea:	370c      	adds	r7, #12
 80157ec:	46bd      	mov	sp, r7
 80157ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f2:	4770      	bx	lr

080157f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80157f4:	b480      	push	{r7}
 80157f6:	b083      	sub	sp, #12
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80157fc:	bf00      	nop
 80157fe:	370c      	adds	r7, #12
 8015800:	46bd      	mov	sp, r7
 8015802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015806:	4770      	bx	lr

08015808 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015808:	b480      	push	{r7}
 801580a:	b083      	sub	sp, #12
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8015810:	bf00      	nop
 8015812:	370c      	adds	r7, #12
 8015814:	46bd      	mov	sp, r7
 8015816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581a:	4770      	bx	lr

0801581c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801581c:	b480      	push	{r7}
 801581e:	b083      	sub	sp, #12
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8015824:	bf00      	nop
 8015826:	370c      	adds	r7, #12
 8015828:	46bd      	mov	sp, r7
 801582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582e:	4770      	bx	lr

08015830 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015830:	b480      	push	{r7}
 8015832:	b083      	sub	sp, #12
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8015838:	bf00      	nop
 801583a:	370c      	adds	r7, #12
 801583c:	46bd      	mov	sp, r7
 801583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015842:	4770      	bx	lr

08015844 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b084      	sub	sp, #16
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015850:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015858:	b2db      	uxtb	r3, r3
 801585a:	2b07      	cmp	r3, #7
 801585c:	d011      	beq.n	8015882 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015862:	69db      	ldr	r3, [r3, #28]
 8015864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015868:	d103      	bne.n	8015872 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 801586a:	68f8      	ldr	r0, [r7, #12]
 801586c:	f7ff ffae 	bl	80157cc <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8015870:	e007      	b.n	8015882 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	691a      	ldr	r2, [r3, #16]
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	f042 0208 	orr.w	r2, r2, #8
 8015880:	611a      	str	r2, [r3, #16]
}
 8015882:	bf00      	nop
 8015884:	3710      	adds	r7, #16
 8015886:	46bd      	mov	sp, r7
 8015888:	bd80      	pop	{r7, pc}

0801588a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801588a:	b580      	push	{r7, lr}
 801588c:	b084      	sub	sp, #16
 801588e:	af00      	add	r7, sp, #0
 8015890:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015896:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8015898:	68f8      	ldr	r0, [r7, #12]
 801589a:	f7ff ffb5 	bl	8015808 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801589e:	bf00      	nop
 80158a0:	3710      	adds	r7, #16
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}

080158a6 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80158a6:	b580      	push	{r7, lr}
 80158a8:	b084      	sub	sp, #16
 80158aa:	af00      	add	r7, sp, #0
 80158ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158b2:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f7f7 fdcf 	bl	800d458 <HAL_DMA_GetError>
 80158ba:	4603      	mov	r3, r0
 80158bc:	2b02      	cmp	r3, #2
 80158be:	d011      	beq.n	80158e4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80158c0:	68f8      	ldr	r0, [r7, #12]
 80158c2:	f000 f82d 	bl	8015920 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158cc:	f043 0210 	orr.w	r2, r3, #16
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	2201      	movs	r2, #1
 80158da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80158de:	68f8      	ldr	r0, [r7, #12]
 80158e0:	f7ff ff9c 	bl	801581c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80158e4:	bf00      	nop
 80158e6:	3710      	adds	r7, #16
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}

080158ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b084      	sub	sp, #16
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	2200      	movs	r2, #0
 80158fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	2200      	movs	r2, #0
 8015906:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	2201      	movs	r2, #1
 801590e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8015912:	68f8      	ldr	r0, [r7, #12]
 8015914:	f7ff ff82 	bl	801581c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8015918:	bf00      	nop
 801591a:	3710      	adds	r7, #16
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}

08015920 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8015920:	b480      	push	{r7}
 8015922:	b085      	sub	sp, #20
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	695b      	ldr	r3, [r3, #20]
 801592e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	699a      	ldr	r2, [r3, #24]
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	f042 0208 	orr.w	r2, r2, #8
 801593e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	699a      	ldr	r2, [r3, #24]
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	f042 0210 	orr.w	r2, r2, #16
 801594e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	681a      	ldr	r2, [r3, #0]
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	f022 0201 	bic.w	r2, r2, #1
 801595e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	6919      	ldr	r1, [r3, #16]
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	681a      	ldr	r2, [r3, #0]
 801596a:	4b3c      	ldr	r3, [pc, #240]	@ (8015a5c <SPI_CloseTransfer+0x13c>)
 801596c:	400b      	ands	r3, r1
 801596e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	689a      	ldr	r2, [r3, #8]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801597e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8015986:	b2db      	uxtb	r3, r3
 8015988:	2b04      	cmp	r3, #4
 801598a:	d014      	beq.n	80159b6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	f003 0320 	and.w	r3, r3, #32
 8015992:	2b00      	cmp	r3, #0
 8015994:	d00f      	beq.n	80159b6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801599c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	699a      	ldr	r2, [r3, #24]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	f042 0220 	orr.w	r2, r2, #32
 80159b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80159bc:	b2db      	uxtb	r3, r3
 80159be:	2b03      	cmp	r3, #3
 80159c0:	d014      	beq.n	80159ec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d00f      	beq.n	80159ec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159d2:	f043 0204 	orr.w	r2, r3, #4
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	699a      	ldr	r2, [r3, #24]
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80159ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d00f      	beq.n	8015a16 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80159fc:	f043 0201 	orr.w	r2, r3, #1
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	699a      	ldr	r2, [r3, #24]
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015a14:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d00f      	beq.n	8015a40 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015a26:	f043 0208 	orr.w	r2, r3, #8
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	699a      	ldr	r2, [r3, #24]
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015a3e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2200      	movs	r2, #0
 8015a44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8015a50:	bf00      	nop
 8015a52:	3714      	adds	r7, #20
 8015a54:	46bd      	mov	sp, r7
 8015a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5a:	4770      	bx	lr
 8015a5c:	fffffc90 	.word	0xfffffc90

08015a60 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b084      	sub	sp, #16
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	60b9      	str	r1, [r7, #8]
 8015a6a:	603b      	str	r3, [r7, #0]
 8015a6c:	4613      	mov	r3, r2
 8015a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015a70:	e010      	b.n	8015a94 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8015a72:	f7f3 f93b 	bl	8008cec <HAL_GetTick>
 8015a76:	4602      	mov	r2, r0
 8015a78:	69bb      	ldr	r3, [r7, #24]
 8015a7a:	1ad3      	subs	r3, r2, r3
 8015a7c:	683a      	ldr	r2, [r7, #0]
 8015a7e:	429a      	cmp	r2, r3
 8015a80:	d803      	bhi.n	8015a8a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8015a82:	683b      	ldr	r3, [r7, #0]
 8015a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a88:	d102      	bne.n	8015a90 <SPI_WaitOnFlagUntilTimeout+0x30>
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d101      	bne.n	8015a94 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8015a90:	2303      	movs	r3, #3
 8015a92:	e00f      	b.n	8015ab4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	695a      	ldr	r2, [r3, #20]
 8015a9a:	68bb      	ldr	r3, [r7, #8]
 8015a9c:	4013      	ands	r3, r2
 8015a9e:	68ba      	ldr	r2, [r7, #8]
 8015aa0:	429a      	cmp	r2, r3
 8015aa2:	bf0c      	ite	eq
 8015aa4:	2301      	moveq	r3, #1
 8015aa6:	2300      	movne	r3, #0
 8015aa8:	b2db      	uxtb	r3, r3
 8015aaa:	461a      	mov	r2, r3
 8015aac:	79fb      	ldrb	r3, [r7, #7]
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	d0df      	beq.n	8015a72 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8015ab2:	2300      	movs	r3, #0
}
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	3710      	adds	r7, #16
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}

08015abc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8015abc:	b480      	push	{r7}
 8015abe:	b085      	sub	sp, #20
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ac8:	095b      	lsrs	r3, r3, #5
 8015aca:	3301      	adds	r3, #1
 8015acc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	68db      	ldr	r3, [r3, #12]
 8015ad2:	3301      	adds	r3, #1
 8015ad4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8015ad6:	68bb      	ldr	r3, [r7, #8]
 8015ad8:	3307      	adds	r3, #7
 8015ada:	08db      	lsrs	r3, r3, #3
 8015adc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8015ade:	68bb      	ldr	r3, [r7, #8]
 8015ae0:	68fa      	ldr	r2, [r7, #12]
 8015ae2:	fb02 f303 	mul.w	r3, r2, r3
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3714      	adds	r7, #20
 8015aea:	46bd      	mov	sp, r7
 8015aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af0:	4770      	bx	lr

08015af2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015af2:	b580      	push	{r7, lr}
 8015af4:	b082      	sub	sp, #8
 8015af6:	af00      	add	r7, sp, #0
 8015af8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d101      	bne.n	8015b04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015b00:	2301      	movs	r3, #1
 8015b02:	e049      	b.n	8015b98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015b0a:	b2db      	uxtb	r3, r3
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d106      	bne.n	8015b1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	2200      	movs	r2, #0
 8015b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f7f2 fef1 	bl	8008900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2202      	movs	r2, #2
 8015b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681a      	ldr	r2, [r3, #0]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	3304      	adds	r3, #4
 8015b2e:	4619      	mov	r1, r3
 8015b30:	4610      	mov	r0, r2
 8015b32:	f000 fedb 	bl	80168ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	2201      	movs	r2, #1
 8015b3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2201      	movs	r2, #1
 8015b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	2201      	movs	r2, #1
 8015b4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	2201      	movs	r2, #1
 8015b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2201      	movs	r2, #1
 8015b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2201      	movs	r2, #1
 8015b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	2201      	movs	r2, #1
 8015b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	2201      	movs	r2, #1
 8015b72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	2201      	movs	r2, #1
 8015b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	2201      	movs	r2, #1
 8015b82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	2201      	movs	r2, #1
 8015b8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2201      	movs	r2, #1
 8015b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015b96:	2300      	movs	r3, #0
}
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3708      	adds	r7, #8
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015ba0:	b480      	push	{r7}
 8015ba2:	b085      	sub	sp, #20
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015bae:	b2db      	uxtb	r3, r3
 8015bb0:	2b01      	cmp	r3, #1
 8015bb2:	d001      	beq.n	8015bb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	e056      	b.n	8015c66 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2202      	movs	r2, #2
 8015bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8015c74 <HAL_TIM_Base_Start+0xd4>)
 8015bc6:	4293      	cmp	r3, r2
 8015bc8:	d02c      	beq.n	8015c24 <HAL_TIM_Base_Start+0x84>
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015bd2:	d027      	beq.n	8015c24 <HAL_TIM_Base_Start+0x84>
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	4a27      	ldr	r2, [pc, #156]	@ (8015c78 <HAL_TIM_Base_Start+0xd8>)
 8015bda:	4293      	cmp	r3, r2
 8015bdc:	d022      	beq.n	8015c24 <HAL_TIM_Base_Start+0x84>
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	4a26      	ldr	r2, [pc, #152]	@ (8015c7c <HAL_TIM_Base_Start+0xdc>)
 8015be4:	4293      	cmp	r3, r2
 8015be6:	d01d      	beq.n	8015c24 <HAL_TIM_Base_Start+0x84>
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	4a24      	ldr	r2, [pc, #144]	@ (8015c80 <HAL_TIM_Base_Start+0xe0>)
 8015bee:	4293      	cmp	r3, r2
 8015bf0:	d018      	beq.n	8015c24 <HAL_TIM_Base_Start+0x84>
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	4a23      	ldr	r2, [pc, #140]	@ (8015c84 <HAL_TIM_Base_Start+0xe4>)
 8015bf8:	4293      	cmp	r3, r2
 8015bfa:	d013      	beq.n	8015c24 <HAL_TIM_Base_Start+0x84>
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	4a21      	ldr	r2, [pc, #132]	@ (8015c88 <HAL_TIM_Base_Start+0xe8>)
 8015c02:	4293      	cmp	r3, r2
 8015c04:	d00e      	beq.n	8015c24 <HAL_TIM_Base_Start+0x84>
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4a20      	ldr	r2, [pc, #128]	@ (8015c8c <HAL_TIM_Base_Start+0xec>)
 8015c0c:	4293      	cmp	r3, r2
 8015c0e:	d009      	beq.n	8015c24 <HAL_TIM_Base_Start+0x84>
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	4a1e      	ldr	r2, [pc, #120]	@ (8015c90 <HAL_TIM_Base_Start+0xf0>)
 8015c16:	4293      	cmp	r3, r2
 8015c18:	d004      	beq.n	8015c24 <HAL_TIM_Base_Start+0x84>
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8015c94 <HAL_TIM_Base_Start+0xf4>)
 8015c20:	4293      	cmp	r3, r2
 8015c22:	d115      	bne.n	8015c50 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	689a      	ldr	r2, [r3, #8]
 8015c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8015c98 <HAL_TIM_Base_Start+0xf8>)
 8015c2c:	4013      	ands	r3, r2
 8015c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2b06      	cmp	r3, #6
 8015c34:	d015      	beq.n	8015c62 <HAL_TIM_Base_Start+0xc2>
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015c3c:	d011      	beq.n	8015c62 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	681a      	ldr	r2, [r3, #0]
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	f042 0201 	orr.w	r2, r2, #1
 8015c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c4e:	e008      	b.n	8015c62 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	681a      	ldr	r2, [r3, #0]
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	f042 0201 	orr.w	r2, r2, #1
 8015c5e:	601a      	str	r2, [r3, #0]
 8015c60:	e000      	b.n	8015c64 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015c64:	2300      	movs	r3, #0
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	3714      	adds	r7, #20
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c70:	4770      	bx	lr
 8015c72:	bf00      	nop
 8015c74:	40010000 	.word	0x40010000
 8015c78:	40000400 	.word	0x40000400
 8015c7c:	40000800 	.word	0x40000800
 8015c80:	40000c00 	.word	0x40000c00
 8015c84:	40010400 	.word	0x40010400
 8015c88:	40001800 	.word	0x40001800
 8015c8c:	40014000 	.word	0x40014000
 8015c90:	4000e000 	.word	0x4000e000
 8015c94:	4000e400 	.word	0x4000e400
 8015c98:	00010007 	.word	0x00010007

08015c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015c9c:	b480      	push	{r7}
 8015c9e:	b085      	sub	sp, #20
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	2b01      	cmp	r3, #1
 8015cae:	d001      	beq.n	8015cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015cb0:	2301      	movs	r3, #1
 8015cb2:	e05e      	b.n	8015d72 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	2202      	movs	r2, #2
 8015cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	68da      	ldr	r2, [r3, #12]
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	f042 0201 	orr.w	r2, r2, #1
 8015cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8015d80 <HAL_TIM_Base_Start_IT+0xe4>)
 8015cd2:	4293      	cmp	r3, r2
 8015cd4:	d02c      	beq.n	8015d30 <HAL_TIM_Base_Start_IT+0x94>
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015cde:	d027      	beq.n	8015d30 <HAL_TIM_Base_Start_IT+0x94>
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	4a27      	ldr	r2, [pc, #156]	@ (8015d84 <HAL_TIM_Base_Start_IT+0xe8>)
 8015ce6:	4293      	cmp	r3, r2
 8015ce8:	d022      	beq.n	8015d30 <HAL_TIM_Base_Start_IT+0x94>
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	4a26      	ldr	r2, [pc, #152]	@ (8015d88 <HAL_TIM_Base_Start_IT+0xec>)
 8015cf0:	4293      	cmp	r3, r2
 8015cf2:	d01d      	beq.n	8015d30 <HAL_TIM_Base_Start_IT+0x94>
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	4a24      	ldr	r2, [pc, #144]	@ (8015d8c <HAL_TIM_Base_Start_IT+0xf0>)
 8015cfa:	4293      	cmp	r3, r2
 8015cfc:	d018      	beq.n	8015d30 <HAL_TIM_Base_Start_IT+0x94>
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	4a23      	ldr	r2, [pc, #140]	@ (8015d90 <HAL_TIM_Base_Start_IT+0xf4>)
 8015d04:	4293      	cmp	r3, r2
 8015d06:	d013      	beq.n	8015d30 <HAL_TIM_Base_Start_IT+0x94>
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	4a21      	ldr	r2, [pc, #132]	@ (8015d94 <HAL_TIM_Base_Start_IT+0xf8>)
 8015d0e:	4293      	cmp	r3, r2
 8015d10:	d00e      	beq.n	8015d30 <HAL_TIM_Base_Start_IT+0x94>
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	4a20      	ldr	r2, [pc, #128]	@ (8015d98 <HAL_TIM_Base_Start_IT+0xfc>)
 8015d18:	4293      	cmp	r3, r2
 8015d1a:	d009      	beq.n	8015d30 <HAL_TIM_Base_Start_IT+0x94>
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	4a1e      	ldr	r2, [pc, #120]	@ (8015d9c <HAL_TIM_Base_Start_IT+0x100>)
 8015d22:	4293      	cmp	r3, r2
 8015d24:	d004      	beq.n	8015d30 <HAL_TIM_Base_Start_IT+0x94>
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8015da0 <HAL_TIM_Base_Start_IT+0x104>)
 8015d2c:	4293      	cmp	r3, r2
 8015d2e:	d115      	bne.n	8015d5c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	689a      	ldr	r2, [r3, #8]
 8015d36:	4b1b      	ldr	r3, [pc, #108]	@ (8015da4 <HAL_TIM_Base_Start_IT+0x108>)
 8015d38:	4013      	ands	r3, r2
 8015d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	2b06      	cmp	r3, #6
 8015d40:	d015      	beq.n	8015d6e <HAL_TIM_Base_Start_IT+0xd2>
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d48:	d011      	beq.n	8015d6e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	681a      	ldr	r2, [r3, #0]
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	f042 0201 	orr.w	r2, r2, #1
 8015d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015d5a:	e008      	b.n	8015d6e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	681a      	ldr	r2, [r3, #0]
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	f042 0201 	orr.w	r2, r2, #1
 8015d6a:	601a      	str	r2, [r3, #0]
 8015d6c:	e000      	b.n	8015d70 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015d70:	2300      	movs	r3, #0
}
 8015d72:	4618      	mov	r0, r3
 8015d74:	3714      	adds	r7, #20
 8015d76:	46bd      	mov	sp, r7
 8015d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d7c:	4770      	bx	lr
 8015d7e:	bf00      	nop
 8015d80:	40010000 	.word	0x40010000
 8015d84:	40000400 	.word	0x40000400
 8015d88:	40000800 	.word	0x40000800
 8015d8c:	40000c00 	.word	0x40000c00
 8015d90:	40010400 	.word	0x40010400
 8015d94:	40001800 	.word	0x40001800
 8015d98:	40014000 	.word	0x40014000
 8015d9c:	4000e000 	.word	0x4000e000
 8015da0:	4000e400 	.word	0x4000e400
 8015da4:	00010007 	.word	0x00010007

08015da8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b082      	sub	sp, #8
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d101      	bne.n	8015dba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015db6:	2301      	movs	r3, #1
 8015db8:	e049      	b.n	8015e4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015dc0:	b2db      	uxtb	r3, r3
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d106      	bne.n	8015dd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2200      	movs	r2, #0
 8015dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f7f2 fd0c 	bl	80087ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2202      	movs	r2, #2
 8015dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	3304      	adds	r3, #4
 8015de4:	4619      	mov	r1, r3
 8015de6:	4610      	mov	r0, r2
 8015de8:	f000 fd80 	bl	80168ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2201      	movs	r2, #1
 8015df0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2201      	movs	r2, #1
 8015df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2201      	movs	r2, #1
 8015e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	2201      	movs	r2, #1
 8015e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	2201      	movs	r2, #1
 8015e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	2201      	movs	r2, #1
 8015e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2201      	movs	r2, #1
 8015e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	2201      	movs	r2, #1
 8015e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2201      	movs	r2, #1
 8015e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	2201      	movs	r2, #1
 8015e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	2201      	movs	r2, #1
 8015e40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	2201      	movs	r2, #1
 8015e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015e4c:	2300      	movs	r3, #0
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	3708      	adds	r7, #8
 8015e52:	46bd      	mov	sp, r7
 8015e54:	bd80      	pop	{r7, pc}
	...

08015e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b084      	sub	sp, #16
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
 8015e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d109      	bne.n	8015e7c <HAL_TIM_PWM_Start+0x24>
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8015e6e:	b2db      	uxtb	r3, r3
 8015e70:	2b01      	cmp	r3, #1
 8015e72:	bf14      	ite	ne
 8015e74:	2301      	movne	r3, #1
 8015e76:	2300      	moveq	r3, #0
 8015e78:	b2db      	uxtb	r3, r3
 8015e7a:	e03c      	b.n	8015ef6 <HAL_TIM_PWM_Start+0x9e>
 8015e7c:	683b      	ldr	r3, [r7, #0]
 8015e7e:	2b04      	cmp	r3, #4
 8015e80:	d109      	bne.n	8015e96 <HAL_TIM_PWM_Start+0x3e>
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8015e88:	b2db      	uxtb	r3, r3
 8015e8a:	2b01      	cmp	r3, #1
 8015e8c:	bf14      	ite	ne
 8015e8e:	2301      	movne	r3, #1
 8015e90:	2300      	moveq	r3, #0
 8015e92:	b2db      	uxtb	r3, r3
 8015e94:	e02f      	b.n	8015ef6 <HAL_TIM_PWM_Start+0x9e>
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	2b08      	cmp	r3, #8
 8015e9a:	d109      	bne.n	8015eb0 <HAL_TIM_PWM_Start+0x58>
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8015ea2:	b2db      	uxtb	r3, r3
 8015ea4:	2b01      	cmp	r3, #1
 8015ea6:	bf14      	ite	ne
 8015ea8:	2301      	movne	r3, #1
 8015eaa:	2300      	moveq	r3, #0
 8015eac:	b2db      	uxtb	r3, r3
 8015eae:	e022      	b.n	8015ef6 <HAL_TIM_PWM_Start+0x9e>
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	2b0c      	cmp	r3, #12
 8015eb4:	d109      	bne.n	8015eca <HAL_TIM_PWM_Start+0x72>
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015ebc:	b2db      	uxtb	r3, r3
 8015ebe:	2b01      	cmp	r3, #1
 8015ec0:	bf14      	ite	ne
 8015ec2:	2301      	movne	r3, #1
 8015ec4:	2300      	moveq	r3, #0
 8015ec6:	b2db      	uxtb	r3, r3
 8015ec8:	e015      	b.n	8015ef6 <HAL_TIM_PWM_Start+0x9e>
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	2b10      	cmp	r3, #16
 8015ece:	d109      	bne.n	8015ee4 <HAL_TIM_PWM_Start+0x8c>
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015ed6:	b2db      	uxtb	r3, r3
 8015ed8:	2b01      	cmp	r3, #1
 8015eda:	bf14      	ite	ne
 8015edc:	2301      	movne	r3, #1
 8015ede:	2300      	moveq	r3, #0
 8015ee0:	b2db      	uxtb	r3, r3
 8015ee2:	e008      	b.n	8015ef6 <HAL_TIM_PWM_Start+0x9e>
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015eea:	b2db      	uxtb	r3, r3
 8015eec:	2b01      	cmp	r3, #1
 8015eee:	bf14      	ite	ne
 8015ef0:	2301      	movne	r3, #1
 8015ef2:	2300      	moveq	r3, #0
 8015ef4:	b2db      	uxtb	r3, r3
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d001      	beq.n	8015efe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8015efa:	2301      	movs	r3, #1
 8015efc:	e0ab      	b.n	8016056 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015efe:	683b      	ldr	r3, [r7, #0]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d104      	bne.n	8015f0e <HAL_TIM_PWM_Start+0xb6>
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	2202      	movs	r2, #2
 8015f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015f0c:	e023      	b.n	8015f56 <HAL_TIM_PWM_Start+0xfe>
 8015f0e:	683b      	ldr	r3, [r7, #0]
 8015f10:	2b04      	cmp	r3, #4
 8015f12:	d104      	bne.n	8015f1e <HAL_TIM_PWM_Start+0xc6>
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	2202      	movs	r2, #2
 8015f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8015f1c:	e01b      	b.n	8015f56 <HAL_TIM_PWM_Start+0xfe>
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	2b08      	cmp	r3, #8
 8015f22:	d104      	bne.n	8015f2e <HAL_TIM_PWM_Start+0xd6>
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	2202      	movs	r2, #2
 8015f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015f2c:	e013      	b.n	8015f56 <HAL_TIM_PWM_Start+0xfe>
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	2b0c      	cmp	r3, #12
 8015f32:	d104      	bne.n	8015f3e <HAL_TIM_PWM_Start+0xe6>
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	2202      	movs	r2, #2
 8015f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8015f3c:	e00b      	b.n	8015f56 <HAL_TIM_PWM_Start+0xfe>
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	2b10      	cmp	r3, #16
 8015f42:	d104      	bne.n	8015f4e <HAL_TIM_PWM_Start+0xf6>
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	2202      	movs	r2, #2
 8015f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015f4c:	e003      	b.n	8015f56 <HAL_TIM_PWM_Start+0xfe>
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2202      	movs	r2, #2
 8015f52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	2201      	movs	r2, #1
 8015f5c:	6839      	ldr	r1, [r7, #0]
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f001 fa20 	bl	80173a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	4a3d      	ldr	r2, [pc, #244]	@ (8016060 <HAL_TIM_PWM_Start+0x208>)
 8015f6a:	4293      	cmp	r3, r2
 8015f6c:	d013      	beq.n	8015f96 <HAL_TIM_PWM_Start+0x13e>
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	4a3c      	ldr	r2, [pc, #240]	@ (8016064 <HAL_TIM_PWM_Start+0x20c>)
 8015f74:	4293      	cmp	r3, r2
 8015f76:	d00e      	beq.n	8015f96 <HAL_TIM_PWM_Start+0x13e>
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8016068 <HAL_TIM_PWM_Start+0x210>)
 8015f7e:	4293      	cmp	r3, r2
 8015f80:	d009      	beq.n	8015f96 <HAL_TIM_PWM_Start+0x13e>
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	4a39      	ldr	r2, [pc, #228]	@ (801606c <HAL_TIM_PWM_Start+0x214>)
 8015f88:	4293      	cmp	r3, r2
 8015f8a:	d004      	beq.n	8015f96 <HAL_TIM_PWM_Start+0x13e>
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	4a37      	ldr	r2, [pc, #220]	@ (8016070 <HAL_TIM_PWM_Start+0x218>)
 8015f92:	4293      	cmp	r3, r2
 8015f94:	d101      	bne.n	8015f9a <HAL_TIM_PWM_Start+0x142>
 8015f96:	2301      	movs	r3, #1
 8015f98:	e000      	b.n	8015f9c <HAL_TIM_PWM_Start+0x144>
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d007      	beq.n	8015fb0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8015fae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8016060 <HAL_TIM_PWM_Start+0x208>)
 8015fb6:	4293      	cmp	r3, r2
 8015fb8:	d02c      	beq.n	8016014 <HAL_TIM_PWM_Start+0x1bc>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015fc2:	d027      	beq.n	8016014 <HAL_TIM_PWM_Start+0x1bc>
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8016074 <HAL_TIM_PWM_Start+0x21c>)
 8015fca:	4293      	cmp	r3, r2
 8015fcc:	d022      	beq.n	8016014 <HAL_TIM_PWM_Start+0x1bc>
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	4a29      	ldr	r2, [pc, #164]	@ (8016078 <HAL_TIM_PWM_Start+0x220>)
 8015fd4:	4293      	cmp	r3, r2
 8015fd6:	d01d      	beq.n	8016014 <HAL_TIM_PWM_Start+0x1bc>
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	4a27      	ldr	r2, [pc, #156]	@ (801607c <HAL_TIM_PWM_Start+0x224>)
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	d018      	beq.n	8016014 <HAL_TIM_PWM_Start+0x1bc>
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8016064 <HAL_TIM_PWM_Start+0x20c>)
 8015fe8:	4293      	cmp	r3, r2
 8015fea:	d013      	beq.n	8016014 <HAL_TIM_PWM_Start+0x1bc>
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	4a23      	ldr	r2, [pc, #140]	@ (8016080 <HAL_TIM_PWM_Start+0x228>)
 8015ff2:	4293      	cmp	r3, r2
 8015ff4:	d00e      	beq.n	8016014 <HAL_TIM_PWM_Start+0x1bc>
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8016068 <HAL_TIM_PWM_Start+0x210>)
 8015ffc:	4293      	cmp	r3, r2
 8015ffe:	d009      	beq.n	8016014 <HAL_TIM_PWM_Start+0x1bc>
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	4a1f      	ldr	r2, [pc, #124]	@ (8016084 <HAL_TIM_PWM_Start+0x22c>)
 8016006:	4293      	cmp	r3, r2
 8016008:	d004      	beq.n	8016014 <HAL_TIM_PWM_Start+0x1bc>
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	4a1e      	ldr	r2, [pc, #120]	@ (8016088 <HAL_TIM_PWM_Start+0x230>)
 8016010:	4293      	cmp	r3, r2
 8016012:	d115      	bne.n	8016040 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	689a      	ldr	r2, [r3, #8]
 801601a:	4b1c      	ldr	r3, [pc, #112]	@ (801608c <HAL_TIM_PWM_Start+0x234>)
 801601c:	4013      	ands	r3, r2
 801601e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	2b06      	cmp	r3, #6
 8016024:	d015      	beq.n	8016052 <HAL_TIM_PWM_Start+0x1fa>
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801602c:	d011      	beq.n	8016052 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	681a      	ldr	r2, [r3, #0]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	f042 0201 	orr.w	r2, r2, #1
 801603c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801603e:	e008      	b.n	8016052 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	681a      	ldr	r2, [r3, #0]
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	f042 0201 	orr.w	r2, r2, #1
 801604e:	601a      	str	r2, [r3, #0]
 8016050:	e000      	b.n	8016054 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016054:	2300      	movs	r3, #0
}
 8016056:	4618      	mov	r0, r3
 8016058:	3710      	adds	r7, #16
 801605a:	46bd      	mov	sp, r7
 801605c:	bd80      	pop	{r7, pc}
 801605e:	bf00      	nop
 8016060:	40010000 	.word	0x40010000
 8016064:	40010400 	.word	0x40010400
 8016068:	40014000 	.word	0x40014000
 801606c:	40014400 	.word	0x40014400
 8016070:	40014800 	.word	0x40014800
 8016074:	40000400 	.word	0x40000400
 8016078:	40000800 	.word	0x40000800
 801607c:	40000c00 	.word	0x40000c00
 8016080:	40001800 	.word	0x40001800
 8016084:	4000e000 	.word	0x4000e000
 8016088:	4000e400 	.word	0x4000e400
 801608c:	00010007 	.word	0x00010007

08016090 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d101      	bne.n	80160a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801609e:	2301      	movs	r3, #1
 80160a0:	e049      	b.n	8016136 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d106      	bne.n	80160bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	2200      	movs	r2, #0
 80160b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f7f2 fbd2 	bl	8008860 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2202      	movs	r2, #2
 80160c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681a      	ldr	r2, [r3, #0]
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	3304      	adds	r3, #4
 80160cc:	4619      	mov	r1, r3
 80160ce:	4610      	mov	r0, r2
 80160d0:	f000 fc0c 	bl	80168ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	2201      	movs	r2, #1
 80160d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2201      	movs	r2, #1
 80160e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	2201      	movs	r2, #1
 80160e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2201      	movs	r2, #1
 80160f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2201      	movs	r2, #1
 80160f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	2201      	movs	r2, #1
 8016100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2201      	movs	r2, #1
 8016108:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2201      	movs	r2, #1
 8016110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	2201      	movs	r2, #1
 8016118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	2201      	movs	r2, #1
 8016120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2201      	movs	r2, #1
 8016128:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	2201      	movs	r2, #1
 8016130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016134:	2300      	movs	r3, #0
}
 8016136:	4618      	mov	r0, r3
 8016138:	3708      	adds	r7, #8
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}

0801613e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801613e:	b580      	push	{r7, lr}
 8016140:	b084      	sub	sp, #16
 8016142:	af00      	add	r7, sp, #0
 8016144:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	68db      	ldr	r3, [r3, #12]
 801614c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	691b      	ldr	r3, [r3, #16]
 8016154:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	f003 0302 	and.w	r3, r3, #2
 801615c:	2b00      	cmp	r3, #0
 801615e:	d020      	beq.n	80161a2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	f003 0302 	and.w	r3, r3, #2
 8016166:	2b00      	cmp	r3, #0
 8016168:	d01b      	beq.n	80161a2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	f06f 0202 	mvn.w	r2, #2
 8016172:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	2201      	movs	r2, #1
 8016178:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	699b      	ldr	r3, [r3, #24]
 8016180:	f003 0303 	and.w	r3, r3, #3
 8016184:	2b00      	cmp	r3, #0
 8016186:	d003      	beq.n	8016190 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f000 fb91 	bl	80168b0 <HAL_TIM_IC_CaptureCallback>
 801618e:	e005      	b.n	801619c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	f000 fb83 	bl	801689c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	f000 fb94 	bl	80168c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2200      	movs	r2, #0
 80161a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80161a2:	68bb      	ldr	r3, [r7, #8]
 80161a4:	f003 0304 	and.w	r3, r3, #4
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d020      	beq.n	80161ee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	f003 0304 	and.w	r3, r3, #4
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d01b      	beq.n	80161ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	f06f 0204 	mvn.w	r2, #4
 80161be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	2202      	movs	r2, #2
 80161c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	699b      	ldr	r3, [r3, #24]
 80161cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d003      	beq.n	80161dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f000 fb6b 	bl	80168b0 <HAL_TIM_IC_CaptureCallback>
 80161da:	e005      	b.n	80161e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80161dc:	6878      	ldr	r0, [r7, #4]
 80161de:	f000 fb5d 	bl	801689c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 fb6e 	bl	80168c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	2200      	movs	r2, #0
 80161ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	f003 0308 	and.w	r3, r3, #8
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d020      	beq.n	801623a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	f003 0308 	and.w	r3, r3, #8
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d01b      	beq.n	801623a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	f06f 0208 	mvn.w	r2, #8
 801620a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2204      	movs	r2, #4
 8016210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	69db      	ldr	r3, [r3, #28]
 8016218:	f003 0303 	and.w	r3, r3, #3
 801621c:	2b00      	cmp	r3, #0
 801621e:	d003      	beq.n	8016228 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	f000 fb45 	bl	80168b0 <HAL_TIM_IC_CaptureCallback>
 8016226:	e005      	b.n	8016234 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f000 fb37 	bl	801689c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801622e:	6878      	ldr	r0, [r7, #4]
 8016230:	f000 fb48 	bl	80168c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	2200      	movs	r2, #0
 8016238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801623a:	68bb      	ldr	r3, [r7, #8]
 801623c:	f003 0310 	and.w	r3, r3, #16
 8016240:	2b00      	cmp	r3, #0
 8016242:	d020      	beq.n	8016286 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	f003 0310 	and.w	r3, r3, #16
 801624a:	2b00      	cmp	r3, #0
 801624c:	d01b      	beq.n	8016286 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	f06f 0210 	mvn.w	r2, #16
 8016256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	2208      	movs	r2, #8
 801625c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	69db      	ldr	r3, [r3, #28]
 8016264:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016268:	2b00      	cmp	r3, #0
 801626a:	d003      	beq.n	8016274 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	f000 fb1f 	bl	80168b0 <HAL_TIM_IC_CaptureCallback>
 8016272:	e005      	b.n	8016280 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016274:	6878      	ldr	r0, [r7, #4]
 8016276:	f000 fb11 	bl	801689c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f000 fb22 	bl	80168c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2200      	movs	r2, #0
 8016284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	f003 0301 	and.w	r3, r3, #1
 801628c:	2b00      	cmp	r3, #0
 801628e:	d00c      	beq.n	80162aa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	f003 0301 	and.w	r3, r3, #1
 8016296:	2b00      	cmp	r3, #0
 8016298:	d007      	beq.n	80162aa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	f06f 0201 	mvn.w	r2, #1
 80162a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f7ef fd0f 	bl	8005cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80162aa:	68bb      	ldr	r3, [r7, #8]
 80162ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d104      	bne.n	80162be <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d00c      	beq.n	80162d8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d007      	beq.n	80162d8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80162d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f001 f9be 	bl	8017654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80162d8:	68bb      	ldr	r3, [r7, #8]
 80162da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d00c      	beq.n	80162fc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d007      	beq.n	80162fc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80162f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f001 f9b6 	bl	8017668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80162fc:	68bb      	ldr	r3, [r7, #8]
 80162fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016302:	2b00      	cmp	r3, #0
 8016304:	d00c      	beq.n	8016320 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801630c:	2b00      	cmp	r3, #0
 801630e:	d007      	beq.n	8016320 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f000 fadc 	bl	80168d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	f003 0320 	and.w	r3, r3, #32
 8016326:	2b00      	cmp	r3, #0
 8016328:	d00c      	beq.n	8016344 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	f003 0320 	and.w	r3, r3, #32
 8016330:	2b00      	cmp	r3, #0
 8016332:	d007      	beq.n	8016344 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	f06f 0220 	mvn.w	r2, #32
 801633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801633e:	6878      	ldr	r0, [r7, #4]
 8016340:	f001 f97e 	bl	8017640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016344:	bf00      	nop
 8016346:	3710      	adds	r7, #16
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}

0801634c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b086      	sub	sp, #24
 8016350:	af00      	add	r7, sp, #0
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	60b9      	str	r1, [r7, #8]
 8016356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016358:	2300      	movs	r3, #0
 801635a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016362:	2b01      	cmp	r3, #1
 8016364:	d101      	bne.n	801636a <HAL_TIM_IC_ConfigChannel+0x1e>
 8016366:	2302      	movs	r3, #2
 8016368:	e088      	b.n	801647c <HAL_TIM_IC_ConfigChannel+0x130>
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	2201      	movs	r2, #1
 801636e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d11b      	bne.n	80163b0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8016380:	68bb      	ldr	r3, [r7, #8]
 8016382:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8016388:	f000 fe38 	bl	8016ffc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	699a      	ldr	r2, [r3, #24]
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	f022 020c 	bic.w	r2, r2, #12
 801639a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	6999      	ldr	r1, [r3, #24]
 80163a2:	68bb      	ldr	r3, [r7, #8]
 80163a4:	689a      	ldr	r2, [r3, #8]
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	430a      	orrs	r2, r1
 80163ac:	619a      	str	r2, [r3, #24]
 80163ae:	e060      	b.n	8016472 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2b04      	cmp	r3, #4
 80163b4:	d11c      	bne.n	80163f0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80163ba:	68bb      	ldr	r3, [r7, #8]
 80163bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80163c6:	f000 fec8 	bl	801715a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	699a      	ldr	r2, [r3, #24]
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80163d8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	6999      	ldr	r1, [r3, #24]
 80163e0:	68bb      	ldr	r3, [r7, #8]
 80163e2:	689b      	ldr	r3, [r3, #8]
 80163e4:	021a      	lsls	r2, r3, #8
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	430a      	orrs	r2, r1
 80163ec:	619a      	str	r2, [r3, #24]
 80163ee:	e040      	b.n	8016472 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	2b08      	cmp	r3, #8
 80163f4:	d11b      	bne.n	801642e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80163fe:	68bb      	ldr	r3, [r7, #8]
 8016400:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8016406:	f000 ff15 	bl	8017234 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	69da      	ldr	r2, [r3, #28]
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	f022 020c 	bic.w	r2, r2, #12
 8016418:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	69d9      	ldr	r1, [r3, #28]
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	689a      	ldr	r2, [r3, #8]
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	430a      	orrs	r2, r1
 801642a:	61da      	str	r2, [r3, #28]
 801642c:	e021      	b.n	8016472 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	2b0c      	cmp	r3, #12
 8016432:	d11c      	bne.n	801646e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8016438:	68bb      	ldr	r3, [r7, #8]
 801643a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801643c:	68bb      	ldr	r3, [r7, #8]
 801643e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8016440:	68bb      	ldr	r3, [r7, #8]
 8016442:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8016444:	f000 ff32 	bl	80172ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	69da      	ldr	r2, [r3, #28]
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8016456:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	69d9      	ldr	r1, [r3, #28]
 801645e:	68bb      	ldr	r3, [r7, #8]
 8016460:	689b      	ldr	r3, [r3, #8]
 8016462:	021a      	lsls	r2, r3, #8
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	430a      	orrs	r2, r1
 801646a:	61da      	str	r2, [r3, #28]
 801646c:	e001      	b.n	8016472 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801646e:	2301      	movs	r3, #1
 8016470:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	2200      	movs	r2, #0
 8016476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801647a:	7dfb      	ldrb	r3, [r7, #23]
}
 801647c:	4618      	mov	r0, r3
 801647e:	3718      	adds	r7, #24
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}

08016484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b086      	sub	sp, #24
 8016488:	af00      	add	r7, sp, #0
 801648a:	60f8      	str	r0, [r7, #12]
 801648c:	60b9      	str	r1, [r7, #8]
 801648e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016490:	2300      	movs	r3, #0
 8016492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801649a:	2b01      	cmp	r3, #1
 801649c:	d101      	bne.n	80164a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801649e:	2302      	movs	r3, #2
 80164a0:	e0ff      	b.n	80166a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	2201      	movs	r2, #1
 80164a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	2b14      	cmp	r3, #20
 80164ae:	f200 80f0 	bhi.w	8016692 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80164b2:	a201      	add	r2, pc, #4	@ (adr r2, 80164b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80164b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164b8:	0801650d 	.word	0x0801650d
 80164bc:	08016693 	.word	0x08016693
 80164c0:	08016693 	.word	0x08016693
 80164c4:	08016693 	.word	0x08016693
 80164c8:	0801654d 	.word	0x0801654d
 80164cc:	08016693 	.word	0x08016693
 80164d0:	08016693 	.word	0x08016693
 80164d4:	08016693 	.word	0x08016693
 80164d8:	0801658f 	.word	0x0801658f
 80164dc:	08016693 	.word	0x08016693
 80164e0:	08016693 	.word	0x08016693
 80164e4:	08016693 	.word	0x08016693
 80164e8:	080165cf 	.word	0x080165cf
 80164ec:	08016693 	.word	0x08016693
 80164f0:	08016693 	.word	0x08016693
 80164f4:	08016693 	.word	0x08016693
 80164f8:	08016611 	.word	0x08016611
 80164fc:	08016693 	.word	0x08016693
 8016500:	08016693 	.word	0x08016693
 8016504:	08016693 	.word	0x08016693
 8016508:	08016651 	.word	0x08016651
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	68b9      	ldr	r1, [r7, #8]
 8016512:	4618      	mov	r0, r3
 8016514:	f000 fa9c 	bl	8016a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	699a      	ldr	r2, [r3, #24]
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	f042 0208 	orr.w	r2, r2, #8
 8016526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	699a      	ldr	r2, [r3, #24]
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	f022 0204 	bic.w	r2, r2, #4
 8016536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	6999      	ldr	r1, [r3, #24]
 801653e:	68bb      	ldr	r3, [r7, #8]
 8016540:	691a      	ldr	r2, [r3, #16]
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	430a      	orrs	r2, r1
 8016548:	619a      	str	r2, [r3, #24]
      break;
 801654a:	e0a5      	b.n	8016698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	68b9      	ldr	r1, [r7, #8]
 8016552:	4618      	mov	r0, r3
 8016554:	f000 fb0c 	bl	8016b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	699a      	ldr	r2, [r3, #24]
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	699a      	ldr	r2, [r3, #24]
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8016576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	6999      	ldr	r1, [r3, #24]
 801657e:	68bb      	ldr	r3, [r7, #8]
 8016580:	691b      	ldr	r3, [r3, #16]
 8016582:	021a      	lsls	r2, r3, #8
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	430a      	orrs	r2, r1
 801658a:	619a      	str	r2, [r3, #24]
      break;
 801658c:	e084      	b.n	8016698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	68b9      	ldr	r1, [r7, #8]
 8016594:	4618      	mov	r0, r3
 8016596:	f000 fb75 	bl	8016c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	69da      	ldr	r2, [r3, #28]
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	f042 0208 	orr.w	r2, r2, #8
 80165a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	69da      	ldr	r2, [r3, #28]
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	f022 0204 	bic.w	r2, r2, #4
 80165b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	69d9      	ldr	r1, [r3, #28]
 80165c0:	68bb      	ldr	r3, [r7, #8]
 80165c2:	691a      	ldr	r2, [r3, #16]
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	430a      	orrs	r2, r1
 80165ca:	61da      	str	r2, [r3, #28]
      break;
 80165cc:	e064      	b.n	8016698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	68b9      	ldr	r1, [r7, #8]
 80165d4:	4618      	mov	r0, r3
 80165d6:	f000 fbdd 	bl	8016d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	69da      	ldr	r2, [r3, #28]
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80165e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	69da      	ldr	r2, [r3, #28]
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80165f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	69d9      	ldr	r1, [r3, #28]
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	691b      	ldr	r3, [r3, #16]
 8016604:	021a      	lsls	r2, r3, #8
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	430a      	orrs	r2, r1
 801660c:	61da      	str	r2, [r3, #28]
      break;
 801660e:	e043      	b.n	8016698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	68b9      	ldr	r1, [r7, #8]
 8016616:	4618      	mov	r0, r3
 8016618:	f000 fc26 	bl	8016e68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	f042 0208 	orr.w	r2, r2, #8
 801662a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	f022 0204 	bic.w	r2, r2, #4
 801663a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016642:	68bb      	ldr	r3, [r7, #8]
 8016644:	691a      	ldr	r2, [r3, #16]
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	430a      	orrs	r2, r1
 801664c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801664e:	e023      	b.n	8016698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	68b9      	ldr	r1, [r7, #8]
 8016656:	4618      	mov	r0, r3
 8016658:	f000 fc6a 	bl	8016f30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801666a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801667a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8016682:	68bb      	ldr	r3, [r7, #8]
 8016684:	691b      	ldr	r3, [r3, #16]
 8016686:	021a      	lsls	r2, r3, #8
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	430a      	orrs	r2, r1
 801668e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8016690:	e002      	b.n	8016698 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8016692:	2301      	movs	r3, #1
 8016694:	75fb      	strb	r3, [r7, #23]
      break;
 8016696:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	2200      	movs	r2, #0
 801669c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80166a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	3718      	adds	r7, #24
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
 80166aa:	bf00      	nop

080166ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b084      	sub	sp, #16
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
 80166b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80166b6:	2300      	movs	r3, #0
 80166b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d101      	bne.n	80166c8 <HAL_TIM_ConfigClockSource+0x1c>
 80166c4:	2302      	movs	r3, #2
 80166c6:	e0dc      	b.n	8016882 <HAL_TIM_ConfigClockSource+0x1d6>
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2201      	movs	r2, #1
 80166cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2202      	movs	r2, #2
 80166d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	689b      	ldr	r3, [r3, #8]
 80166de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80166e0:	68ba      	ldr	r2, [r7, #8]
 80166e2:	4b6a      	ldr	r3, [pc, #424]	@ (801688c <HAL_TIM_ConfigClockSource+0x1e0>)
 80166e4:	4013      	ands	r3, r2
 80166e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80166ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	68ba      	ldr	r2, [r7, #8]
 80166f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	4a64      	ldr	r2, [pc, #400]	@ (8016890 <HAL_TIM_ConfigClockSource+0x1e4>)
 80166fe:	4293      	cmp	r3, r2
 8016700:	f000 80a9 	beq.w	8016856 <HAL_TIM_ConfigClockSource+0x1aa>
 8016704:	4a62      	ldr	r2, [pc, #392]	@ (8016890 <HAL_TIM_ConfigClockSource+0x1e4>)
 8016706:	4293      	cmp	r3, r2
 8016708:	f200 80ae 	bhi.w	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 801670c:	4a61      	ldr	r2, [pc, #388]	@ (8016894 <HAL_TIM_ConfigClockSource+0x1e8>)
 801670e:	4293      	cmp	r3, r2
 8016710:	f000 80a1 	beq.w	8016856 <HAL_TIM_ConfigClockSource+0x1aa>
 8016714:	4a5f      	ldr	r2, [pc, #380]	@ (8016894 <HAL_TIM_ConfigClockSource+0x1e8>)
 8016716:	4293      	cmp	r3, r2
 8016718:	f200 80a6 	bhi.w	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 801671c:	4a5e      	ldr	r2, [pc, #376]	@ (8016898 <HAL_TIM_ConfigClockSource+0x1ec>)
 801671e:	4293      	cmp	r3, r2
 8016720:	f000 8099 	beq.w	8016856 <HAL_TIM_ConfigClockSource+0x1aa>
 8016724:	4a5c      	ldr	r2, [pc, #368]	@ (8016898 <HAL_TIM_ConfigClockSource+0x1ec>)
 8016726:	4293      	cmp	r3, r2
 8016728:	f200 809e 	bhi.w	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 801672c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016730:	f000 8091 	beq.w	8016856 <HAL_TIM_ConfigClockSource+0x1aa>
 8016734:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8016738:	f200 8096 	bhi.w	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 801673c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016740:	f000 8089 	beq.w	8016856 <HAL_TIM_ConfigClockSource+0x1aa>
 8016744:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016748:	f200 808e 	bhi.w	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 801674c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016750:	d03e      	beq.n	80167d0 <HAL_TIM_ConfigClockSource+0x124>
 8016752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016756:	f200 8087 	bhi.w	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 801675a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801675e:	f000 8086 	beq.w	801686e <HAL_TIM_ConfigClockSource+0x1c2>
 8016762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016766:	d87f      	bhi.n	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 8016768:	2b70      	cmp	r3, #112	@ 0x70
 801676a:	d01a      	beq.n	80167a2 <HAL_TIM_ConfigClockSource+0xf6>
 801676c:	2b70      	cmp	r3, #112	@ 0x70
 801676e:	d87b      	bhi.n	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 8016770:	2b60      	cmp	r3, #96	@ 0x60
 8016772:	d050      	beq.n	8016816 <HAL_TIM_ConfigClockSource+0x16a>
 8016774:	2b60      	cmp	r3, #96	@ 0x60
 8016776:	d877      	bhi.n	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 8016778:	2b50      	cmp	r3, #80	@ 0x50
 801677a:	d03c      	beq.n	80167f6 <HAL_TIM_ConfigClockSource+0x14a>
 801677c:	2b50      	cmp	r3, #80	@ 0x50
 801677e:	d873      	bhi.n	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 8016780:	2b40      	cmp	r3, #64	@ 0x40
 8016782:	d058      	beq.n	8016836 <HAL_TIM_ConfigClockSource+0x18a>
 8016784:	2b40      	cmp	r3, #64	@ 0x40
 8016786:	d86f      	bhi.n	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 8016788:	2b30      	cmp	r3, #48	@ 0x30
 801678a:	d064      	beq.n	8016856 <HAL_TIM_ConfigClockSource+0x1aa>
 801678c:	2b30      	cmp	r3, #48	@ 0x30
 801678e:	d86b      	bhi.n	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 8016790:	2b20      	cmp	r3, #32
 8016792:	d060      	beq.n	8016856 <HAL_TIM_ConfigClockSource+0x1aa>
 8016794:	2b20      	cmp	r3, #32
 8016796:	d867      	bhi.n	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
 8016798:	2b00      	cmp	r3, #0
 801679a:	d05c      	beq.n	8016856 <HAL_TIM_ConfigClockSource+0x1aa>
 801679c:	2b10      	cmp	r3, #16
 801679e:	d05a      	beq.n	8016856 <HAL_TIM_ConfigClockSource+0x1aa>
 80167a0:	e062      	b.n	8016868 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80167a6:	683b      	ldr	r3, [r7, #0]
 80167a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80167ae:	683b      	ldr	r3, [r7, #0]
 80167b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80167b2:	f000 fdd7 	bl	8017364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	689b      	ldr	r3, [r3, #8]
 80167bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80167be:	68bb      	ldr	r3, [r7, #8]
 80167c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80167c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	68ba      	ldr	r2, [r7, #8]
 80167cc:	609a      	str	r2, [r3, #8]
      break;
 80167ce:	e04f      	b.n	8016870 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80167d4:	683b      	ldr	r3, [r7, #0]
 80167d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80167d8:	683b      	ldr	r3, [r7, #0]
 80167da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80167e0:	f000 fdc0 	bl	8017364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	689a      	ldr	r2, [r3, #8]
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80167f2:	609a      	str	r2, [r3, #8]
      break;
 80167f4:	e03c      	b.n	8016870 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016802:	461a      	mov	r2, r3
 8016804:	f000 fc7a 	bl	80170fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	2150      	movs	r1, #80	@ 0x50
 801680e:	4618      	mov	r0, r3
 8016810:	f000 fd8a 	bl	8017328 <TIM_ITRx_SetConfig>
      break;
 8016814:	e02c      	b.n	8016870 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801681e:	683b      	ldr	r3, [r7, #0]
 8016820:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016822:	461a      	mov	r2, r3
 8016824:	f000 fcd6 	bl	80171d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	2160      	movs	r1, #96	@ 0x60
 801682e:	4618      	mov	r0, r3
 8016830:	f000 fd7a 	bl	8017328 <TIM_ITRx_SetConfig>
      break;
 8016834:	e01c      	b.n	8016870 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801683a:	683b      	ldr	r3, [r7, #0]
 801683c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016842:	461a      	mov	r2, r3
 8016844:	f000 fc5a 	bl	80170fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	2140      	movs	r1, #64	@ 0x40
 801684e:	4618      	mov	r0, r3
 8016850:	f000 fd6a 	bl	8017328 <TIM_ITRx_SetConfig>
      break;
 8016854:	e00c      	b.n	8016870 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	681a      	ldr	r2, [r3, #0]
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	4619      	mov	r1, r3
 8016860:	4610      	mov	r0, r2
 8016862:	f000 fd61 	bl	8017328 <TIM_ITRx_SetConfig>
      break;
 8016866:	e003      	b.n	8016870 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8016868:	2301      	movs	r3, #1
 801686a:	73fb      	strb	r3, [r7, #15]
      break;
 801686c:	e000      	b.n	8016870 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801686e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	2201      	movs	r2, #1
 8016874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	2200      	movs	r2, #0
 801687c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8016880:	7bfb      	ldrb	r3, [r7, #15]
}
 8016882:	4618      	mov	r0, r3
 8016884:	3710      	adds	r7, #16
 8016886:	46bd      	mov	sp, r7
 8016888:	bd80      	pop	{r7, pc}
 801688a:	bf00      	nop
 801688c:	ffceff88 	.word	0xffceff88
 8016890:	00100040 	.word	0x00100040
 8016894:	00100030 	.word	0x00100030
 8016898:	00100020 	.word	0x00100020

0801689c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801689c:	b480      	push	{r7}
 801689e:	b083      	sub	sp, #12
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80168a4:	bf00      	nop
 80168a6:	370c      	adds	r7, #12
 80168a8:	46bd      	mov	sp, r7
 80168aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ae:	4770      	bx	lr

080168b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80168b0:	b480      	push	{r7}
 80168b2:	b083      	sub	sp, #12
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80168b8:	bf00      	nop
 80168ba:	370c      	adds	r7, #12
 80168bc:	46bd      	mov	sp, r7
 80168be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c2:	4770      	bx	lr

080168c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80168c4:	b480      	push	{r7}
 80168c6:	b083      	sub	sp, #12
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80168cc:	bf00      	nop
 80168ce:	370c      	adds	r7, #12
 80168d0:	46bd      	mov	sp, r7
 80168d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d6:	4770      	bx	lr

080168d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80168d8:	b480      	push	{r7}
 80168da:	b083      	sub	sp, #12
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80168e0:	bf00      	nop
 80168e2:	370c      	adds	r7, #12
 80168e4:	46bd      	mov	sp, r7
 80168e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ea:	4770      	bx	lr

080168ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80168ec:	b480      	push	{r7}
 80168ee:	b085      	sub	sp, #20
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
 80168f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	4a4a      	ldr	r2, [pc, #296]	@ (8016a28 <TIM_Base_SetConfig+0x13c>)
 8016900:	4293      	cmp	r3, r2
 8016902:	d013      	beq.n	801692c <TIM_Base_SetConfig+0x40>
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801690a:	d00f      	beq.n	801692c <TIM_Base_SetConfig+0x40>
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	4a47      	ldr	r2, [pc, #284]	@ (8016a2c <TIM_Base_SetConfig+0x140>)
 8016910:	4293      	cmp	r3, r2
 8016912:	d00b      	beq.n	801692c <TIM_Base_SetConfig+0x40>
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	4a46      	ldr	r2, [pc, #280]	@ (8016a30 <TIM_Base_SetConfig+0x144>)
 8016918:	4293      	cmp	r3, r2
 801691a:	d007      	beq.n	801692c <TIM_Base_SetConfig+0x40>
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	4a45      	ldr	r2, [pc, #276]	@ (8016a34 <TIM_Base_SetConfig+0x148>)
 8016920:	4293      	cmp	r3, r2
 8016922:	d003      	beq.n	801692c <TIM_Base_SetConfig+0x40>
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	4a44      	ldr	r2, [pc, #272]	@ (8016a38 <TIM_Base_SetConfig+0x14c>)
 8016928:	4293      	cmp	r3, r2
 801692a:	d108      	bne.n	801693e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016934:	683b      	ldr	r3, [r7, #0]
 8016936:	685b      	ldr	r3, [r3, #4]
 8016938:	68fa      	ldr	r2, [r7, #12]
 801693a:	4313      	orrs	r3, r2
 801693c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	4a39      	ldr	r2, [pc, #228]	@ (8016a28 <TIM_Base_SetConfig+0x13c>)
 8016942:	4293      	cmp	r3, r2
 8016944:	d027      	beq.n	8016996 <TIM_Base_SetConfig+0xaa>
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801694c:	d023      	beq.n	8016996 <TIM_Base_SetConfig+0xaa>
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	4a36      	ldr	r2, [pc, #216]	@ (8016a2c <TIM_Base_SetConfig+0x140>)
 8016952:	4293      	cmp	r3, r2
 8016954:	d01f      	beq.n	8016996 <TIM_Base_SetConfig+0xaa>
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	4a35      	ldr	r2, [pc, #212]	@ (8016a30 <TIM_Base_SetConfig+0x144>)
 801695a:	4293      	cmp	r3, r2
 801695c:	d01b      	beq.n	8016996 <TIM_Base_SetConfig+0xaa>
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	4a34      	ldr	r2, [pc, #208]	@ (8016a34 <TIM_Base_SetConfig+0x148>)
 8016962:	4293      	cmp	r3, r2
 8016964:	d017      	beq.n	8016996 <TIM_Base_SetConfig+0xaa>
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	4a33      	ldr	r2, [pc, #204]	@ (8016a38 <TIM_Base_SetConfig+0x14c>)
 801696a:	4293      	cmp	r3, r2
 801696c:	d013      	beq.n	8016996 <TIM_Base_SetConfig+0xaa>
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	4a32      	ldr	r2, [pc, #200]	@ (8016a3c <TIM_Base_SetConfig+0x150>)
 8016972:	4293      	cmp	r3, r2
 8016974:	d00f      	beq.n	8016996 <TIM_Base_SetConfig+0xaa>
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	4a31      	ldr	r2, [pc, #196]	@ (8016a40 <TIM_Base_SetConfig+0x154>)
 801697a:	4293      	cmp	r3, r2
 801697c:	d00b      	beq.n	8016996 <TIM_Base_SetConfig+0xaa>
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	4a30      	ldr	r2, [pc, #192]	@ (8016a44 <TIM_Base_SetConfig+0x158>)
 8016982:	4293      	cmp	r3, r2
 8016984:	d007      	beq.n	8016996 <TIM_Base_SetConfig+0xaa>
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	4a2f      	ldr	r2, [pc, #188]	@ (8016a48 <TIM_Base_SetConfig+0x15c>)
 801698a:	4293      	cmp	r3, r2
 801698c:	d003      	beq.n	8016996 <TIM_Base_SetConfig+0xaa>
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	4a2e      	ldr	r2, [pc, #184]	@ (8016a4c <TIM_Base_SetConfig+0x160>)
 8016992:	4293      	cmp	r3, r2
 8016994:	d108      	bne.n	80169a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801699c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801699e:	683b      	ldr	r3, [r7, #0]
 80169a0:	68db      	ldr	r3, [r3, #12]
 80169a2:	68fa      	ldr	r2, [r7, #12]
 80169a4:	4313      	orrs	r3, r2
 80169a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80169ae:	683b      	ldr	r3, [r7, #0]
 80169b0:	695b      	ldr	r3, [r3, #20]
 80169b2:	4313      	orrs	r3, r2
 80169b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	68fa      	ldr	r2, [r7, #12]
 80169ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80169bc:	683b      	ldr	r3, [r7, #0]
 80169be:	689a      	ldr	r2, [r3, #8]
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	681a      	ldr	r2, [r3, #0]
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	4a16      	ldr	r2, [pc, #88]	@ (8016a28 <TIM_Base_SetConfig+0x13c>)
 80169d0:	4293      	cmp	r3, r2
 80169d2:	d00f      	beq.n	80169f4 <TIM_Base_SetConfig+0x108>
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	4a18      	ldr	r2, [pc, #96]	@ (8016a38 <TIM_Base_SetConfig+0x14c>)
 80169d8:	4293      	cmp	r3, r2
 80169da:	d00b      	beq.n	80169f4 <TIM_Base_SetConfig+0x108>
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	4a17      	ldr	r2, [pc, #92]	@ (8016a3c <TIM_Base_SetConfig+0x150>)
 80169e0:	4293      	cmp	r3, r2
 80169e2:	d007      	beq.n	80169f4 <TIM_Base_SetConfig+0x108>
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	4a16      	ldr	r2, [pc, #88]	@ (8016a40 <TIM_Base_SetConfig+0x154>)
 80169e8:	4293      	cmp	r3, r2
 80169ea:	d003      	beq.n	80169f4 <TIM_Base_SetConfig+0x108>
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	4a15      	ldr	r2, [pc, #84]	@ (8016a44 <TIM_Base_SetConfig+0x158>)
 80169f0:	4293      	cmp	r3, r2
 80169f2:	d103      	bne.n	80169fc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	691a      	ldr	r2, [r3, #16]
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2201      	movs	r2, #1
 8016a00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	691b      	ldr	r3, [r3, #16]
 8016a06:	f003 0301 	and.w	r3, r3, #1
 8016a0a:	2b01      	cmp	r3, #1
 8016a0c:	d105      	bne.n	8016a1a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	691b      	ldr	r3, [r3, #16]
 8016a12:	f023 0201 	bic.w	r2, r3, #1
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	611a      	str	r2, [r3, #16]
  }
}
 8016a1a:	bf00      	nop
 8016a1c:	3714      	adds	r7, #20
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a24:	4770      	bx	lr
 8016a26:	bf00      	nop
 8016a28:	40010000 	.word	0x40010000
 8016a2c:	40000400 	.word	0x40000400
 8016a30:	40000800 	.word	0x40000800
 8016a34:	40000c00 	.word	0x40000c00
 8016a38:	40010400 	.word	0x40010400
 8016a3c:	40014000 	.word	0x40014000
 8016a40:	40014400 	.word	0x40014400
 8016a44:	40014800 	.word	0x40014800
 8016a48:	4000e000 	.word	0x4000e000
 8016a4c:	4000e400 	.word	0x4000e400

08016a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016a50:	b480      	push	{r7}
 8016a52:	b087      	sub	sp, #28
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
 8016a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	6a1b      	ldr	r3, [r3, #32]
 8016a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	6a1b      	ldr	r3, [r3, #32]
 8016a64:	f023 0201 	bic.w	r2, r3, #1
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	685b      	ldr	r3, [r3, #4]
 8016a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	699b      	ldr	r3, [r3, #24]
 8016a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016a78:	68fa      	ldr	r2, [r7, #12]
 8016a7a:	4b37      	ldr	r3, [pc, #220]	@ (8016b58 <TIM_OC1_SetConfig+0x108>)
 8016a7c:	4013      	ands	r3, r2
 8016a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	f023 0303 	bic.w	r3, r3, #3
 8016a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016a88:	683b      	ldr	r3, [r7, #0]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	68fa      	ldr	r2, [r7, #12]
 8016a8e:	4313      	orrs	r3, r2
 8016a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	f023 0302 	bic.w	r3, r3, #2
 8016a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016a9a:	683b      	ldr	r3, [r7, #0]
 8016a9c:	689b      	ldr	r3, [r3, #8]
 8016a9e:	697a      	ldr	r2, [r7, #20]
 8016aa0:	4313      	orrs	r3, r2
 8016aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8016b5c <TIM_OC1_SetConfig+0x10c>)
 8016aa8:	4293      	cmp	r3, r2
 8016aaa:	d00f      	beq.n	8016acc <TIM_OC1_SetConfig+0x7c>
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	4a2c      	ldr	r2, [pc, #176]	@ (8016b60 <TIM_OC1_SetConfig+0x110>)
 8016ab0:	4293      	cmp	r3, r2
 8016ab2:	d00b      	beq.n	8016acc <TIM_OC1_SetConfig+0x7c>
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8016b64 <TIM_OC1_SetConfig+0x114>)
 8016ab8:	4293      	cmp	r3, r2
 8016aba:	d007      	beq.n	8016acc <TIM_OC1_SetConfig+0x7c>
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	4a2a      	ldr	r2, [pc, #168]	@ (8016b68 <TIM_OC1_SetConfig+0x118>)
 8016ac0:	4293      	cmp	r3, r2
 8016ac2:	d003      	beq.n	8016acc <TIM_OC1_SetConfig+0x7c>
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	4a29      	ldr	r2, [pc, #164]	@ (8016b6c <TIM_OC1_SetConfig+0x11c>)
 8016ac8:	4293      	cmp	r3, r2
 8016aca:	d10c      	bne.n	8016ae6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016acc:	697b      	ldr	r3, [r7, #20]
 8016ace:	f023 0308 	bic.w	r3, r3, #8
 8016ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	68db      	ldr	r3, [r3, #12]
 8016ad8:	697a      	ldr	r2, [r7, #20]
 8016ada:	4313      	orrs	r3, r2
 8016adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016ade:	697b      	ldr	r3, [r7, #20]
 8016ae0:	f023 0304 	bic.w	r3, r3, #4
 8016ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8016b5c <TIM_OC1_SetConfig+0x10c>)
 8016aea:	4293      	cmp	r3, r2
 8016aec:	d00f      	beq.n	8016b0e <TIM_OC1_SetConfig+0xbe>
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	4a1b      	ldr	r2, [pc, #108]	@ (8016b60 <TIM_OC1_SetConfig+0x110>)
 8016af2:	4293      	cmp	r3, r2
 8016af4:	d00b      	beq.n	8016b0e <TIM_OC1_SetConfig+0xbe>
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	4a1a      	ldr	r2, [pc, #104]	@ (8016b64 <TIM_OC1_SetConfig+0x114>)
 8016afa:	4293      	cmp	r3, r2
 8016afc:	d007      	beq.n	8016b0e <TIM_OC1_SetConfig+0xbe>
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	4a19      	ldr	r2, [pc, #100]	@ (8016b68 <TIM_OC1_SetConfig+0x118>)
 8016b02:	4293      	cmp	r3, r2
 8016b04:	d003      	beq.n	8016b0e <TIM_OC1_SetConfig+0xbe>
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	4a18      	ldr	r2, [pc, #96]	@ (8016b6c <TIM_OC1_SetConfig+0x11c>)
 8016b0a:	4293      	cmp	r3, r2
 8016b0c:	d111      	bne.n	8016b32 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8016b16:	693b      	ldr	r3, [r7, #16]
 8016b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	695b      	ldr	r3, [r3, #20]
 8016b22:	693a      	ldr	r2, [r7, #16]
 8016b24:	4313      	orrs	r3, r2
 8016b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016b28:	683b      	ldr	r3, [r7, #0]
 8016b2a:	699b      	ldr	r3, [r3, #24]
 8016b2c:	693a      	ldr	r2, [r7, #16]
 8016b2e:	4313      	orrs	r3, r2
 8016b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	693a      	ldr	r2, [r7, #16]
 8016b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	68fa      	ldr	r2, [r7, #12]
 8016b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	685a      	ldr	r2, [r3, #4]
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	697a      	ldr	r2, [r7, #20]
 8016b4a:	621a      	str	r2, [r3, #32]
}
 8016b4c:	bf00      	nop
 8016b4e:	371c      	adds	r7, #28
 8016b50:	46bd      	mov	sp, r7
 8016b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b56:	4770      	bx	lr
 8016b58:	fffeff8f 	.word	0xfffeff8f
 8016b5c:	40010000 	.word	0x40010000
 8016b60:	40010400 	.word	0x40010400
 8016b64:	40014000 	.word	0x40014000
 8016b68:	40014400 	.word	0x40014400
 8016b6c:	40014800 	.word	0x40014800

08016b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016b70:	b480      	push	{r7}
 8016b72:	b087      	sub	sp, #28
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]
 8016b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	6a1b      	ldr	r3, [r3, #32]
 8016b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	6a1b      	ldr	r3, [r3, #32]
 8016b84:	f023 0210 	bic.w	r2, r3, #16
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	685b      	ldr	r3, [r3, #4]
 8016b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	699b      	ldr	r3, [r3, #24]
 8016b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016b98:	68fa      	ldr	r2, [r7, #12]
 8016b9a:	4b34      	ldr	r3, [pc, #208]	@ (8016c6c <TIM_OC2_SetConfig+0xfc>)
 8016b9c:	4013      	ands	r3, r2
 8016b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	021b      	lsls	r3, r3, #8
 8016bae:	68fa      	ldr	r2, [r7, #12]
 8016bb0:	4313      	orrs	r3, r2
 8016bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016bb4:	697b      	ldr	r3, [r7, #20]
 8016bb6:	f023 0320 	bic.w	r3, r3, #32
 8016bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	689b      	ldr	r3, [r3, #8]
 8016bc0:	011b      	lsls	r3, r3, #4
 8016bc2:	697a      	ldr	r2, [r7, #20]
 8016bc4:	4313      	orrs	r3, r2
 8016bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	4a29      	ldr	r2, [pc, #164]	@ (8016c70 <TIM_OC2_SetConfig+0x100>)
 8016bcc:	4293      	cmp	r3, r2
 8016bce:	d003      	beq.n	8016bd8 <TIM_OC2_SetConfig+0x68>
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	4a28      	ldr	r2, [pc, #160]	@ (8016c74 <TIM_OC2_SetConfig+0x104>)
 8016bd4:	4293      	cmp	r3, r2
 8016bd6:	d10d      	bne.n	8016bf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8016bd8:	697b      	ldr	r3, [r7, #20]
 8016bda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8016be0:	683b      	ldr	r3, [r7, #0]
 8016be2:	68db      	ldr	r3, [r3, #12]
 8016be4:	011b      	lsls	r3, r3, #4
 8016be6:	697a      	ldr	r2, [r7, #20]
 8016be8:	4313      	orrs	r3, r2
 8016bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8016bec:	697b      	ldr	r3, [r7, #20]
 8016bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016bf2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8016c70 <TIM_OC2_SetConfig+0x100>)
 8016bf8:	4293      	cmp	r3, r2
 8016bfa:	d00f      	beq.n	8016c1c <TIM_OC2_SetConfig+0xac>
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8016c74 <TIM_OC2_SetConfig+0x104>)
 8016c00:	4293      	cmp	r3, r2
 8016c02:	d00b      	beq.n	8016c1c <TIM_OC2_SetConfig+0xac>
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	4a1c      	ldr	r2, [pc, #112]	@ (8016c78 <TIM_OC2_SetConfig+0x108>)
 8016c08:	4293      	cmp	r3, r2
 8016c0a:	d007      	beq.n	8016c1c <TIM_OC2_SetConfig+0xac>
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8016c7c <TIM_OC2_SetConfig+0x10c>)
 8016c10:	4293      	cmp	r3, r2
 8016c12:	d003      	beq.n	8016c1c <TIM_OC2_SetConfig+0xac>
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	4a1a      	ldr	r2, [pc, #104]	@ (8016c80 <TIM_OC2_SetConfig+0x110>)
 8016c18:	4293      	cmp	r3, r2
 8016c1a:	d113      	bne.n	8016c44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8016c1c:	693b      	ldr	r3, [r7, #16]
 8016c1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8016c24:	693b      	ldr	r3, [r7, #16]
 8016c26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8016c2c:	683b      	ldr	r3, [r7, #0]
 8016c2e:	695b      	ldr	r3, [r3, #20]
 8016c30:	009b      	lsls	r3, r3, #2
 8016c32:	693a      	ldr	r2, [r7, #16]
 8016c34:	4313      	orrs	r3, r2
 8016c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	699b      	ldr	r3, [r3, #24]
 8016c3c:	009b      	lsls	r3, r3, #2
 8016c3e:	693a      	ldr	r2, [r7, #16]
 8016c40:	4313      	orrs	r3, r2
 8016c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	693a      	ldr	r2, [r7, #16]
 8016c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	68fa      	ldr	r2, [r7, #12]
 8016c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016c50:	683b      	ldr	r3, [r7, #0]
 8016c52:	685a      	ldr	r2, [r3, #4]
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	697a      	ldr	r2, [r7, #20]
 8016c5c:	621a      	str	r2, [r3, #32]
}
 8016c5e:	bf00      	nop
 8016c60:	371c      	adds	r7, #28
 8016c62:	46bd      	mov	sp, r7
 8016c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c68:	4770      	bx	lr
 8016c6a:	bf00      	nop
 8016c6c:	feff8fff 	.word	0xfeff8fff
 8016c70:	40010000 	.word	0x40010000
 8016c74:	40010400 	.word	0x40010400
 8016c78:	40014000 	.word	0x40014000
 8016c7c:	40014400 	.word	0x40014400
 8016c80:	40014800 	.word	0x40014800

08016c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016c84:	b480      	push	{r7}
 8016c86:	b087      	sub	sp, #28
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	6a1b      	ldr	r3, [r3, #32]
 8016c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	6a1b      	ldr	r3, [r3, #32]
 8016c98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	685b      	ldr	r3, [r3, #4]
 8016ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	69db      	ldr	r3, [r3, #28]
 8016caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016cac:	68fa      	ldr	r2, [r7, #12]
 8016cae:	4b33      	ldr	r3, [pc, #204]	@ (8016d7c <TIM_OC3_SetConfig+0xf8>)
 8016cb0:	4013      	ands	r3, r2
 8016cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	f023 0303 	bic.w	r3, r3, #3
 8016cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016cbc:	683b      	ldr	r3, [r7, #0]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	68fa      	ldr	r2, [r7, #12]
 8016cc2:	4313      	orrs	r3, r2
 8016cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016cc6:	697b      	ldr	r3, [r7, #20]
 8016cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8016ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016cce:	683b      	ldr	r3, [r7, #0]
 8016cd0:	689b      	ldr	r3, [r3, #8]
 8016cd2:	021b      	lsls	r3, r3, #8
 8016cd4:	697a      	ldr	r2, [r7, #20]
 8016cd6:	4313      	orrs	r3, r2
 8016cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	4a28      	ldr	r2, [pc, #160]	@ (8016d80 <TIM_OC3_SetConfig+0xfc>)
 8016cde:	4293      	cmp	r3, r2
 8016ce0:	d003      	beq.n	8016cea <TIM_OC3_SetConfig+0x66>
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	4a27      	ldr	r2, [pc, #156]	@ (8016d84 <TIM_OC3_SetConfig+0x100>)
 8016ce6:	4293      	cmp	r3, r2
 8016ce8:	d10d      	bne.n	8016d06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8016cea:	697b      	ldr	r3, [r7, #20]
 8016cec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016cf2:	683b      	ldr	r3, [r7, #0]
 8016cf4:	68db      	ldr	r3, [r3, #12]
 8016cf6:	021b      	lsls	r3, r3, #8
 8016cf8:	697a      	ldr	r2, [r7, #20]
 8016cfa:	4313      	orrs	r3, r2
 8016cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8016d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	4a1d      	ldr	r2, [pc, #116]	@ (8016d80 <TIM_OC3_SetConfig+0xfc>)
 8016d0a:	4293      	cmp	r3, r2
 8016d0c:	d00f      	beq.n	8016d2e <TIM_OC3_SetConfig+0xaa>
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	4a1c      	ldr	r2, [pc, #112]	@ (8016d84 <TIM_OC3_SetConfig+0x100>)
 8016d12:	4293      	cmp	r3, r2
 8016d14:	d00b      	beq.n	8016d2e <TIM_OC3_SetConfig+0xaa>
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	4a1b      	ldr	r2, [pc, #108]	@ (8016d88 <TIM_OC3_SetConfig+0x104>)
 8016d1a:	4293      	cmp	r3, r2
 8016d1c:	d007      	beq.n	8016d2e <TIM_OC3_SetConfig+0xaa>
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	4a1a      	ldr	r2, [pc, #104]	@ (8016d8c <TIM_OC3_SetConfig+0x108>)
 8016d22:	4293      	cmp	r3, r2
 8016d24:	d003      	beq.n	8016d2e <TIM_OC3_SetConfig+0xaa>
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	4a19      	ldr	r2, [pc, #100]	@ (8016d90 <TIM_OC3_SetConfig+0x10c>)
 8016d2a:	4293      	cmp	r3, r2
 8016d2c:	d113      	bne.n	8016d56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8016d2e:	693b      	ldr	r3, [r7, #16]
 8016d30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8016d36:	693b      	ldr	r3, [r7, #16]
 8016d38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8016d3e:	683b      	ldr	r3, [r7, #0]
 8016d40:	695b      	ldr	r3, [r3, #20]
 8016d42:	011b      	lsls	r3, r3, #4
 8016d44:	693a      	ldr	r2, [r7, #16]
 8016d46:	4313      	orrs	r3, r2
 8016d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	699b      	ldr	r3, [r3, #24]
 8016d4e:	011b      	lsls	r3, r3, #4
 8016d50:	693a      	ldr	r2, [r7, #16]
 8016d52:	4313      	orrs	r3, r2
 8016d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	693a      	ldr	r2, [r7, #16]
 8016d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	68fa      	ldr	r2, [r7, #12]
 8016d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016d62:	683b      	ldr	r3, [r7, #0]
 8016d64:	685a      	ldr	r2, [r3, #4]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	697a      	ldr	r2, [r7, #20]
 8016d6e:	621a      	str	r2, [r3, #32]
}
 8016d70:	bf00      	nop
 8016d72:	371c      	adds	r7, #28
 8016d74:	46bd      	mov	sp, r7
 8016d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7a:	4770      	bx	lr
 8016d7c:	fffeff8f 	.word	0xfffeff8f
 8016d80:	40010000 	.word	0x40010000
 8016d84:	40010400 	.word	0x40010400
 8016d88:	40014000 	.word	0x40014000
 8016d8c:	40014400 	.word	0x40014400
 8016d90:	40014800 	.word	0x40014800

08016d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016d94:	b480      	push	{r7}
 8016d96:	b087      	sub	sp, #28
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
 8016d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	6a1b      	ldr	r3, [r3, #32]
 8016da2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6a1b      	ldr	r3, [r3, #32]
 8016da8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	685b      	ldr	r3, [r3, #4]
 8016db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	69db      	ldr	r3, [r3, #28]
 8016dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016dbc:	68fa      	ldr	r2, [r7, #12]
 8016dbe:	4b24      	ldr	r3, [pc, #144]	@ (8016e50 <TIM_OC4_SetConfig+0xbc>)
 8016dc0:	4013      	ands	r3, r2
 8016dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8016dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016dcc:	683b      	ldr	r3, [r7, #0]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	021b      	lsls	r3, r3, #8
 8016dd2:	68fa      	ldr	r2, [r7, #12]
 8016dd4:	4313      	orrs	r3, r2
 8016dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016de0:	683b      	ldr	r3, [r7, #0]
 8016de2:	689b      	ldr	r3, [r3, #8]
 8016de4:	031b      	lsls	r3, r3, #12
 8016de6:	693a      	ldr	r2, [r7, #16]
 8016de8:	4313      	orrs	r3, r2
 8016dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	4a19      	ldr	r2, [pc, #100]	@ (8016e54 <TIM_OC4_SetConfig+0xc0>)
 8016df0:	4293      	cmp	r3, r2
 8016df2:	d00f      	beq.n	8016e14 <TIM_OC4_SetConfig+0x80>
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	4a18      	ldr	r2, [pc, #96]	@ (8016e58 <TIM_OC4_SetConfig+0xc4>)
 8016df8:	4293      	cmp	r3, r2
 8016dfa:	d00b      	beq.n	8016e14 <TIM_OC4_SetConfig+0x80>
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	4a17      	ldr	r2, [pc, #92]	@ (8016e5c <TIM_OC4_SetConfig+0xc8>)
 8016e00:	4293      	cmp	r3, r2
 8016e02:	d007      	beq.n	8016e14 <TIM_OC4_SetConfig+0x80>
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	4a16      	ldr	r2, [pc, #88]	@ (8016e60 <TIM_OC4_SetConfig+0xcc>)
 8016e08:	4293      	cmp	r3, r2
 8016e0a:	d003      	beq.n	8016e14 <TIM_OC4_SetConfig+0x80>
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	4a15      	ldr	r2, [pc, #84]	@ (8016e64 <TIM_OC4_SetConfig+0xd0>)
 8016e10:	4293      	cmp	r3, r2
 8016e12:	d109      	bne.n	8016e28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016e14:	697b      	ldr	r3, [r7, #20]
 8016e16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	695b      	ldr	r3, [r3, #20]
 8016e20:	019b      	lsls	r3, r3, #6
 8016e22:	697a      	ldr	r2, [r7, #20]
 8016e24:	4313      	orrs	r3, r2
 8016e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	697a      	ldr	r2, [r7, #20]
 8016e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	68fa      	ldr	r2, [r7, #12]
 8016e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	685a      	ldr	r2, [r3, #4]
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	693a      	ldr	r2, [r7, #16]
 8016e40:	621a      	str	r2, [r3, #32]
}
 8016e42:	bf00      	nop
 8016e44:	371c      	adds	r7, #28
 8016e46:	46bd      	mov	sp, r7
 8016e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4c:	4770      	bx	lr
 8016e4e:	bf00      	nop
 8016e50:	feff8fff 	.word	0xfeff8fff
 8016e54:	40010000 	.word	0x40010000
 8016e58:	40010400 	.word	0x40010400
 8016e5c:	40014000 	.word	0x40014000
 8016e60:	40014400 	.word	0x40014400
 8016e64:	40014800 	.word	0x40014800

08016e68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016e68:	b480      	push	{r7}
 8016e6a:	b087      	sub	sp, #28
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	6a1b      	ldr	r3, [r3, #32]
 8016e76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	6a1b      	ldr	r3, [r3, #32]
 8016e7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8016e90:	68fa      	ldr	r2, [r7, #12]
 8016e92:	4b21      	ldr	r3, [pc, #132]	@ (8016f18 <TIM_OC5_SetConfig+0xb0>)
 8016e94:	4013      	ands	r3, r2
 8016e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016e98:	683b      	ldr	r3, [r7, #0]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	68fa      	ldr	r2, [r7, #12]
 8016e9e:	4313      	orrs	r3, r2
 8016ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8016ea2:	693b      	ldr	r3, [r7, #16]
 8016ea4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8016ea8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	689b      	ldr	r3, [r3, #8]
 8016eae:	041b      	lsls	r3, r3, #16
 8016eb0:	693a      	ldr	r2, [r7, #16]
 8016eb2:	4313      	orrs	r3, r2
 8016eb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	4a18      	ldr	r2, [pc, #96]	@ (8016f1c <TIM_OC5_SetConfig+0xb4>)
 8016eba:	4293      	cmp	r3, r2
 8016ebc:	d00f      	beq.n	8016ede <TIM_OC5_SetConfig+0x76>
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	4a17      	ldr	r2, [pc, #92]	@ (8016f20 <TIM_OC5_SetConfig+0xb8>)
 8016ec2:	4293      	cmp	r3, r2
 8016ec4:	d00b      	beq.n	8016ede <TIM_OC5_SetConfig+0x76>
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	4a16      	ldr	r2, [pc, #88]	@ (8016f24 <TIM_OC5_SetConfig+0xbc>)
 8016eca:	4293      	cmp	r3, r2
 8016ecc:	d007      	beq.n	8016ede <TIM_OC5_SetConfig+0x76>
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	4a15      	ldr	r2, [pc, #84]	@ (8016f28 <TIM_OC5_SetConfig+0xc0>)
 8016ed2:	4293      	cmp	r3, r2
 8016ed4:	d003      	beq.n	8016ede <TIM_OC5_SetConfig+0x76>
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	4a14      	ldr	r2, [pc, #80]	@ (8016f2c <TIM_OC5_SetConfig+0xc4>)
 8016eda:	4293      	cmp	r3, r2
 8016edc:	d109      	bne.n	8016ef2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8016ede:	697b      	ldr	r3, [r7, #20]
 8016ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8016ee6:	683b      	ldr	r3, [r7, #0]
 8016ee8:	695b      	ldr	r3, [r3, #20]
 8016eea:	021b      	lsls	r3, r3, #8
 8016eec:	697a      	ldr	r2, [r7, #20]
 8016eee:	4313      	orrs	r3, r2
 8016ef0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	697a      	ldr	r2, [r7, #20]
 8016ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	68fa      	ldr	r2, [r7, #12]
 8016efc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	685a      	ldr	r2, [r3, #4]
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	693a      	ldr	r2, [r7, #16]
 8016f0a:	621a      	str	r2, [r3, #32]
}
 8016f0c:	bf00      	nop
 8016f0e:	371c      	adds	r7, #28
 8016f10:	46bd      	mov	sp, r7
 8016f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f16:	4770      	bx	lr
 8016f18:	fffeff8f 	.word	0xfffeff8f
 8016f1c:	40010000 	.word	0x40010000
 8016f20:	40010400 	.word	0x40010400
 8016f24:	40014000 	.word	0x40014000
 8016f28:	40014400 	.word	0x40014400
 8016f2c:	40014800 	.word	0x40014800

08016f30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8016f30:	b480      	push	{r7}
 8016f32:	b087      	sub	sp, #28
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
 8016f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	6a1b      	ldr	r3, [r3, #32]
 8016f3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6a1b      	ldr	r3, [r3, #32]
 8016f44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	685b      	ldr	r3, [r3, #4]
 8016f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8016f58:	68fa      	ldr	r2, [r7, #12]
 8016f5a:	4b22      	ldr	r3, [pc, #136]	@ (8016fe4 <TIM_OC6_SetConfig+0xb4>)
 8016f5c:	4013      	ands	r3, r2
 8016f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	021b      	lsls	r3, r3, #8
 8016f66:	68fa      	ldr	r2, [r7, #12]
 8016f68:	4313      	orrs	r3, r2
 8016f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8016f6c:	693b      	ldr	r3, [r7, #16]
 8016f6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	689b      	ldr	r3, [r3, #8]
 8016f78:	051b      	lsls	r3, r3, #20
 8016f7a:	693a      	ldr	r2, [r7, #16]
 8016f7c:	4313      	orrs	r3, r2
 8016f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	4a19      	ldr	r2, [pc, #100]	@ (8016fe8 <TIM_OC6_SetConfig+0xb8>)
 8016f84:	4293      	cmp	r3, r2
 8016f86:	d00f      	beq.n	8016fa8 <TIM_OC6_SetConfig+0x78>
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	4a18      	ldr	r2, [pc, #96]	@ (8016fec <TIM_OC6_SetConfig+0xbc>)
 8016f8c:	4293      	cmp	r3, r2
 8016f8e:	d00b      	beq.n	8016fa8 <TIM_OC6_SetConfig+0x78>
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	4a17      	ldr	r2, [pc, #92]	@ (8016ff0 <TIM_OC6_SetConfig+0xc0>)
 8016f94:	4293      	cmp	r3, r2
 8016f96:	d007      	beq.n	8016fa8 <TIM_OC6_SetConfig+0x78>
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	4a16      	ldr	r2, [pc, #88]	@ (8016ff4 <TIM_OC6_SetConfig+0xc4>)
 8016f9c:	4293      	cmp	r3, r2
 8016f9e:	d003      	beq.n	8016fa8 <TIM_OC6_SetConfig+0x78>
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	4a15      	ldr	r2, [pc, #84]	@ (8016ff8 <TIM_OC6_SetConfig+0xc8>)
 8016fa4:	4293      	cmp	r3, r2
 8016fa6:	d109      	bne.n	8016fbc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8016fa8:	697b      	ldr	r3, [r7, #20]
 8016faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016fae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8016fb0:	683b      	ldr	r3, [r7, #0]
 8016fb2:	695b      	ldr	r3, [r3, #20]
 8016fb4:	029b      	lsls	r3, r3, #10
 8016fb6:	697a      	ldr	r2, [r7, #20]
 8016fb8:	4313      	orrs	r3, r2
 8016fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	697a      	ldr	r2, [r7, #20]
 8016fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	68fa      	ldr	r2, [r7, #12]
 8016fc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8016fc8:	683b      	ldr	r3, [r7, #0]
 8016fca:	685a      	ldr	r2, [r3, #4]
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	693a      	ldr	r2, [r7, #16]
 8016fd4:	621a      	str	r2, [r3, #32]
}
 8016fd6:	bf00      	nop
 8016fd8:	371c      	adds	r7, #28
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe0:	4770      	bx	lr
 8016fe2:	bf00      	nop
 8016fe4:	feff8fff 	.word	0xfeff8fff
 8016fe8:	40010000 	.word	0x40010000
 8016fec:	40010400 	.word	0x40010400
 8016ff0:	40014000 	.word	0x40014000
 8016ff4:	40014400 	.word	0x40014400
 8016ff8:	40014800 	.word	0x40014800

08016ffc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b087      	sub	sp, #28
 8017000:	af00      	add	r7, sp, #0
 8017002:	60f8      	str	r0, [r7, #12]
 8017004:	60b9      	str	r1, [r7, #8]
 8017006:	607a      	str	r2, [r7, #4]
 8017008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	6a1b      	ldr	r3, [r3, #32]
 801700e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	6a1b      	ldr	r3, [r3, #32]
 8017014:	f023 0201 	bic.w	r2, r3, #1
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	699b      	ldr	r3, [r3, #24]
 8017020:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	4a2c      	ldr	r2, [pc, #176]	@ (80170d8 <TIM_TI1_SetConfig+0xdc>)
 8017026:	4293      	cmp	r3, r2
 8017028:	d023      	beq.n	8017072 <TIM_TI1_SetConfig+0x76>
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017030:	d01f      	beq.n	8017072 <TIM_TI1_SetConfig+0x76>
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	4a29      	ldr	r2, [pc, #164]	@ (80170dc <TIM_TI1_SetConfig+0xe0>)
 8017036:	4293      	cmp	r3, r2
 8017038:	d01b      	beq.n	8017072 <TIM_TI1_SetConfig+0x76>
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	4a28      	ldr	r2, [pc, #160]	@ (80170e0 <TIM_TI1_SetConfig+0xe4>)
 801703e:	4293      	cmp	r3, r2
 8017040:	d017      	beq.n	8017072 <TIM_TI1_SetConfig+0x76>
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	4a27      	ldr	r2, [pc, #156]	@ (80170e4 <TIM_TI1_SetConfig+0xe8>)
 8017046:	4293      	cmp	r3, r2
 8017048:	d013      	beq.n	8017072 <TIM_TI1_SetConfig+0x76>
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	4a26      	ldr	r2, [pc, #152]	@ (80170e8 <TIM_TI1_SetConfig+0xec>)
 801704e:	4293      	cmp	r3, r2
 8017050:	d00f      	beq.n	8017072 <TIM_TI1_SetConfig+0x76>
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	4a25      	ldr	r2, [pc, #148]	@ (80170ec <TIM_TI1_SetConfig+0xf0>)
 8017056:	4293      	cmp	r3, r2
 8017058:	d00b      	beq.n	8017072 <TIM_TI1_SetConfig+0x76>
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	4a24      	ldr	r2, [pc, #144]	@ (80170f0 <TIM_TI1_SetConfig+0xf4>)
 801705e:	4293      	cmp	r3, r2
 8017060:	d007      	beq.n	8017072 <TIM_TI1_SetConfig+0x76>
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	4a23      	ldr	r2, [pc, #140]	@ (80170f4 <TIM_TI1_SetConfig+0xf8>)
 8017066:	4293      	cmp	r3, r2
 8017068:	d003      	beq.n	8017072 <TIM_TI1_SetConfig+0x76>
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	4a22      	ldr	r2, [pc, #136]	@ (80170f8 <TIM_TI1_SetConfig+0xfc>)
 801706e:	4293      	cmp	r3, r2
 8017070:	d101      	bne.n	8017076 <TIM_TI1_SetConfig+0x7a>
 8017072:	2301      	movs	r3, #1
 8017074:	e000      	b.n	8017078 <TIM_TI1_SetConfig+0x7c>
 8017076:	2300      	movs	r3, #0
 8017078:	2b00      	cmp	r3, #0
 801707a:	d008      	beq.n	801708e <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801707c:	697b      	ldr	r3, [r7, #20]
 801707e:	f023 0303 	bic.w	r3, r3, #3
 8017082:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8017084:	697a      	ldr	r2, [r7, #20]
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	4313      	orrs	r3, r2
 801708a:	617b      	str	r3, [r7, #20]
 801708c:	e003      	b.n	8017096 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801708e:	697b      	ldr	r3, [r7, #20]
 8017090:	f043 0301 	orr.w	r3, r3, #1
 8017094:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017096:	697b      	ldr	r3, [r7, #20]
 8017098:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801709c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801709e:	683b      	ldr	r3, [r7, #0]
 80170a0:	011b      	lsls	r3, r3, #4
 80170a2:	b2db      	uxtb	r3, r3
 80170a4:	697a      	ldr	r2, [r7, #20]
 80170a6:	4313      	orrs	r3, r2
 80170a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80170aa:	693b      	ldr	r3, [r7, #16]
 80170ac:	f023 030a 	bic.w	r3, r3, #10
 80170b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80170b2:	68bb      	ldr	r3, [r7, #8]
 80170b4:	f003 030a 	and.w	r3, r3, #10
 80170b8:	693a      	ldr	r2, [r7, #16]
 80170ba:	4313      	orrs	r3, r2
 80170bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	697a      	ldr	r2, [r7, #20]
 80170c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	693a      	ldr	r2, [r7, #16]
 80170c8:	621a      	str	r2, [r3, #32]
}
 80170ca:	bf00      	nop
 80170cc:	371c      	adds	r7, #28
 80170ce:	46bd      	mov	sp, r7
 80170d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d4:	4770      	bx	lr
 80170d6:	bf00      	nop
 80170d8:	40010000 	.word	0x40010000
 80170dc:	40000400 	.word	0x40000400
 80170e0:	40000800 	.word	0x40000800
 80170e4:	40000c00 	.word	0x40000c00
 80170e8:	40010400 	.word	0x40010400
 80170ec:	40001800 	.word	0x40001800
 80170f0:	40014000 	.word	0x40014000
 80170f4:	4000e000 	.word	0x4000e000
 80170f8:	4000e400 	.word	0x4000e400

080170fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80170fc:	b480      	push	{r7}
 80170fe:	b087      	sub	sp, #28
 8017100:	af00      	add	r7, sp, #0
 8017102:	60f8      	str	r0, [r7, #12]
 8017104:	60b9      	str	r1, [r7, #8]
 8017106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	6a1b      	ldr	r3, [r3, #32]
 801710c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	6a1b      	ldr	r3, [r3, #32]
 8017112:	f023 0201 	bic.w	r2, r3, #1
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	699b      	ldr	r3, [r3, #24]
 801711e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017120:	693b      	ldr	r3, [r7, #16]
 8017122:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	011b      	lsls	r3, r3, #4
 801712c:	693a      	ldr	r2, [r7, #16]
 801712e:	4313      	orrs	r3, r2
 8017130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017132:	697b      	ldr	r3, [r7, #20]
 8017134:	f023 030a 	bic.w	r3, r3, #10
 8017138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801713a:	697a      	ldr	r2, [r7, #20]
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	4313      	orrs	r3, r2
 8017140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	693a      	ldr	r2, [r7, #16]
 8017146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	697a      	ldr	r2, [r7, #20]
 801714c:	621a      	str	r2, [r3, #32]
}
 801714e:	bf00      	nop
 8017150:	371c      	adds	r7, #28
 8017152:	46bd      	mov	sp, r7
 8017154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017158:	4770      	bx	lr

0801715a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801715a:	b480      	push	{r7}
 801715c:	b087      	sub	sp, #28
 801715e:	af00      	add	r7, sp, #0
 8017160:	60f8      	str	r0, [r7, #12]
 8017162:	60b9      	str	r1, [r7, #8]
 8017164:	607a      	str	r2, [r7, #4]
 8017166:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	6a1b      	ldr	r3, [r3, #32]
 801716c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	6a1b      	ldr	r3, [r3, #32]
 8017172:	f023 0210 	bic.w	r2, r3, #16
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	699b      	ldr	r3, [r3, #24]
 801717e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8017180:	693b      	ldr	r3, [r7, #16]
 8017182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	021b      	lsls	r3, r3, #8
 801718c:	693a      	ldr	r2, [r7, #16]
 801718e:	4313      	orrs	r3, r2
 8017190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017192:	693b      	ldr	r3, [r7, #16]
 8017194:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017198:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	031b      	lsls	r3, r3, #12
 801719e:	b29b      	uxth	r3, r3
 80171a0:	693a      	ldr	r2, [r7, #16]
 80171a2:	4313      	orrs	r3, r2
 80171a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80171a6:	697b      	ldr	r3, [r7, #20]
 80171a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80171ac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80171ae:	68bb      	ldr	r3, [r7, #8]
 80171b0:	011b      	lsls	r3, r3, #4
 80171b2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80171b6:	697a      	ldr	r2, [r7, #20]
 80171b8:	4313      	orrs	r3, r2
 80171ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	693a      	ldr	r2, [r7, #16]
 80171c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	697a      	ldr	r2, [r7, #20]
 80171c6:	621a      	str	r2, [r3, #32]
}
 80171c8:	bf00      	nop
 80171ca:	371c      	adds	r7, #28
 80171cc:	46bd      	mov	sp, r7
 80171ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d2:	4770      	bx	lr

080171d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80171d4:	b480      	push	{r7}
 80171d6:	b087      	sub	sp, #28
 80171d8:	af00      	add	r7, sp, #0
 80171da:	60f8      	str	r0, [r7, #12]
 80171dc:	60b9      	str	r1, [r7, #8]
 80171de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	6a1b      	ldr	r3, [r3, #32]
 80171e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	6a1b      	ldr	r3, [r3, #32]
 80171ea:	f023 0210 	bic.w	r2, r3, #16
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	699b      	ldr	r3, [r3, #24]
 80171f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80171f8:	693b      	ldr	r3, [r7, #16]
 80171fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80171fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	031b      	lsls	r3, r3, #12
 8017204:	693a      	ldr	r2, [r7, #16]
 8017206:	4313      	orrs	r3, r2
 8017208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801720a:	697b      	ldr	r3, [r7, #20]
 801720c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017210:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017212:	68bb      	ldr	r3, [r7, #8]
 8017214:	011b      	lsls	r3, r3, #4
 8017216:	697a      	ldr	r2, [r7, #20]
 8017218:	4313      	orrs	r3, r2
 801721a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	693a      	ldr	r2, [r7, #16]
 8017220:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	697a      	ldr	r2, [r7, #20]
 8017226:	621a      	str	r2, [r3, #32]
}
 8017228:	bf00      	nop
 801722a:	371c      	adds	r7, #28
 801722c:	46bd      	mov	sp, r7
 801722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017232:	4770      	bx	lr

08017234 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017234:	b480      	push	{r7}
 8017236:	b087      	sub	sp, #28
 8017238:	af00      	add	r7, sp, #0
 801723a:	60f8      	str	r0, [r7, #12]
 801723c:	60b9      	str	r1, [r7, #8]
 801723e:	607a      	str	r2, [r7, #4]
 8017240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	6a1b      	ldr	r3, [r3, #32]
 8017246:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	6a1b      	ldr	r3, [r3, #32]
 801724c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	69db      	ldr	r3, [r3, #28]
 8017258:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801725a:	693b      	ldr	r3, [r7, #16]
 801725c:	f023 0303 	bic.w	r3, r3, #3
 8017260:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8017262:	693a      	ldr	r2, [r7, #16]
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	4313      	orrs	r3, r2
 8017268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801726a:	693b      	ldr	r3, [r7, #16]
 801726c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017270:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	011b      	lsls	r3, r3, #4
 8017276:	b2db      	uxtb	r3, r3
 8017278:	693a      	ldr	r2, [r7, #16]
 801727a:	4313      	orrs	r3, r2
 801727c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8017284:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8017286:	68bb      	ldr	r3, [r7, #8]
 8017288:	021b      	lsls	r3, r3, #8
 801728a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 801728e:	697a      	ldr	r2, [r7, #20]
 8017290:	4313      	orrs	r3, r2
 8017292:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	693a      	ldr	r2, [r7, #16]
 8017298:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	697a      	ldr	r2, [r7, #20]
 801729e:	621a      	str	r2, [r3, #32]
}
 80172a0:	bf00      	nop
 80172a2:	371c      	adds	r7, #28
 80172a4:	46bd      	mov	sp, r7
 80172a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172aa:	4770      	bx	lr

080172ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80172ac:	b480      	push	{r7}
 80172ae:	b087      	sub	sp, #28
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	60f8      	str	r0, [r7, #12]
 80172b4:	60b9      	str	r1, [r7, #8]
 80172b6:	607a      	str	r2, [r7, #4]
 80172b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	6a1b      	ldr	r3, [r3, #32]
 80172be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	6a1b      	ldr	r3, [r3, #32]
 80172c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	69db      	ldr	r3, [r3, #28]
 80172d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80172d2:	693b      	ldr	r3, [r7, #16]
 80172d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80172d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	021b      	lsls	r3, r3, #8
 80172de:	693a      	ldr	r2, [r7, #16]
 80172e0:	4313      	orrs	r3, r2
 80172e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80172e4:	693b      	ldr	r3, [r7, #16]
 80172e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80172ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80172ec:	683b      	ldr	r3, [r7, #0]
 80172ee:	031b      	lsls	r3, r3, #12
 80172f0:	b29b      	uxth	r3, r3
 80172f2:	693a      	ldr	r2, [r7, #16]
 80172f4:	4313      	orrs	r3, r2
 80172f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80172f8:	697b      	ldr	r3, [r7, #20]
 80172fa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80172fe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017300:	68bb      	ldr	r3, [r7, #8]
 8017302:	031b      	lsls	r3, r3, #12
 8017304:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8017308:	697a      	ldr	r2, [r7, #20]
 801730a:	4313      	orrs	r3, r2
 801730c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	693a      	ldr	r2, [r7, #16]
 8017312:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	697a      	ldr	r2, [r7, #20]
 8017318:	621a      	str	r2, [r3, #32]
}
 801731a:	bf00      	nop
 801731c:	371c      	adds	r7, #28
 801731e:	46bd      	mov	sp, r7
 8017320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017324:	4770      	bx	lr
	...

08017328 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017328:	b480      	push	{r7}
 801732a:	b085      	sub	sp, #20
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
 8017330:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	689b      	ldr	r3, [r3, #8]
 8017336:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017338:	68fa      	ldr	r2, [r7, #12]
 801733a:	4b09      	ldr	r3, [pc, #36]	@ (8017360 <TIM_ITRx_SetConfig+0x38>)
 801733c:	4013      	ands	r3, r2
 801733e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017340:	683a      	ldr	r2, [r7, #0]
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	4313      	orrs	r3, r2
 8017346:	f043 0307 	orr.w	r3, r3, #7
 801734a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	68fa      	ldr	r2, [r7, #12]
 8017350:	609a      	str	r2, [r3, #8]
}
 8017352:	bf00      	nop
 8017354:	3714      	adds	r7, #20
 8017356:	46bd      	mov	sp, r7
 8017358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735c:	4770      	bx	lr
 801735e:	bf00      	nop
 8017360:	ffcfff8f 	.word	0xffcfff8f

08017364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017364:	b480      	push	{r7}
 8017366:	b087      	sub	sp, #28
 8017368:	af00      	add	r7, sp, #0
 801736a:	60f8      	str	r0, [r7, #12]
 801736c:	60b9      	str	r1, [r7, #8]
 801736e:	607a      	str	r2, [r7, #4]
 8017370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	689b      	ldr	r3, [r3, #8]
 8017376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017378:	697b      	ldr	r3, [r7, #20]
 801737a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801737e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017380:	683b      	ldr	r3, [r7, #0]
 8017382:	021a      	lsls	r2, r3, #8
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	431a      	orrs	r2, r3
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	4313      	orrs	r3, r2
 801738c:	697a      	ldr	r2, [r7, #20]
 801738e:	4313      	orrs	r3, r2
 8017390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	697a      	ldr	r2, [r7, #20]
 8017396:	609a      	str	r2, [r3, #8]
}
 8017398:	bf00      	nop
 801739a:	371c      	adds	r7, #28
 801739c:	46bd      	mov	sp, r7
 801739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a2:	4770      	bx	lr

080173a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80173a4:	b480      	push	{r7}
 80173a6:	b087      	sub	sp, #28
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	60f8      	str	r0, [r7, #12]
 80173ac:	60b9      	str	r1, [r7, #8]
 80173ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	f003 031f 	and.w	r3, r3, #31
 80173b6:	2201      	movs	r2, #1
 80173b8:	fa02 f303 	lsl.w	r3, r2, r3
 80173bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	6a1a      	ldr	r2, [r3, #32]
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	43db      	mvns	r3, r3
 80173c6:	401a      	ands	r2, r3
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	6a1a      	ldr	r2, [r3, #32]
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	f003 031f 	and.w	r3, r3, #31
 80173d6:	6879      	ldr	r1, [r7, #4]
 80173d8:	fa01 f303 	lsl.w	r3, r1, r3
 80173dc:	431a      	orrs	r2, r3
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	621a      	str	r2, [r3, #32]
}
 80173e2:	bf00      	nop
 80173e4:	371c      	adds	r7, #28
 80173e6:	46bd      	mov	sp, r7
 80173e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ec:	4770      	bx	lr
	...

080173f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80173f0:	b480      	push	{r7}
 80173f2:	b085      	sub	sp, #20
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
 80173f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017400:	2b01      	cmp	r3, #1
 8017402:	d101      	bne.n	8017408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017404:	2302      	movs	r3, #2
 8017406:	e077      	b.n	80174f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2201      	movs	r2, #1
 801740c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	2202      	movs	r2, #2
 8017414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	685b      	ldr	r3, [r3, #4]
 801741e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	689b      	ldr	r3, [r3, #8]
 8017426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	4a35      	ldr	r2, [pc, #212]	@ (8017504 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801742e:	4293      	cmp	r3, r2
 8017430:	d004      	beq.n	801743c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	4a34      	ldr	r2, [pc, #208]	@ (8017508 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017438:	4293      	cmp	r3, r2
 801743a:	d108      	bne.n	801744e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8017442:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017444:	683b      	ldr	r3, [r7, #0]
 8017446:	685b      	ldr	r3, [r3, #4]
 8017448:	68fa      	ldr	r2, [r7, #12]
 801744a:	4313      	orrs	r3, r2
 801744c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017454:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	68fa      	ldr	r2, [r7, #12]
 801745c:	4313      	orrs	r3, r2
 801745e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	68fa      	ldr	r2, [r7, #12]
 8017466:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	4a25      	ldr	r2, [pc, #148]	@ (8017504 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801746e:	4293      	cmp	r3, r2
 8017470:	d02c      	beq.n	80174cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801747a:	d027      	beq.n	80174cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	4a22      	ldr	r2, [pc, #136]	@ (801750c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8017482:	4293      	cmp	r3, r2
 8017484:	d022      	beq.n	80174cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	4a21      	ldr	r2, [pc, #132]	@ (8017510 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801748c:	4293      	cmp	r3, r2
 801748e:	d01d      	beq.n	80174cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	4a1f      	ldr	r2, [pc, #124]	@ (8017514 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8017496:	4293      	cmp	r3, r2
 8017498:	d018      	beq.n	80174cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	4a1a      	ldr	r2, [pc, #104]	@ (8017508 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80174a0:	4293      	cmp	r3, r2
 80174a2:	d013      	beq.n	80174cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	4a1b      	ldr	r2, [pc, #108]	@ (8017518 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80174aa:	4293      	cmp	r3, r2
 80174ac:	d00e      	beq.n	80174cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	4a1a      	ldr	r2, [pc, #104]	@ (801751c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80174b4:	4293      	cmp	r3, r2
 80174b6:	d009      	beq.n	80174cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	4a18      	ldr	r2, [pc, #96]	@ (8017520 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80174be:	4293      	cmp	r3, r2
 80174c0:	d004      	beq.n	80174cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	4a17      	ldr	r2, [pc, #92]	@ (8017524 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80174c8:	4293      	cmp	r3, r2
 80174ca:	d10c      	bne.n	80174e6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80174d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80174d4:	683b      	ldr	r3, [r7, #0]
 80174d6:	689b      	ldr	r3, [r3, #8]
 80174d8:	68ba      	ldr	r2, [r7, #8]
 80174da:	4313      	orrs	r3, r2
 80174dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	68ba      	ldr	r2, [r7, #8]
 80174e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	2201      	movs	r2, #1
 80174ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	2200      	movs	r2, #0
 80174f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80174f6:	2300      	movs	r3, #0
}
 80174f8:	4618      	mov	r0, r3
 80174fa:	3714      	adds	r7, #20
 80174fc:	46bd      	mov	sp, r7
 80174fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017502:	4770      	bx	lr
 8017504:	40010000 	.word	0x40010000
 8017508:	40010400 	.word	0x40010400
 801750c:	40000400 	.word	0x40000400
 8017510:	40000800 	.word	0x40000800
 8017514:	40000c00 	.word	0x40000c00
 8017518:	40001800 	.word	0x40001800
 801751c:	40014000 	.word	0x40014000
 8017520:	4000e000 	.word	0x4000e000
 8017524:	4000e400 	.word	0x4000e400

08017528 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017528:	b480      	push	{r7}
 801752a:	b085      	sub	sp, #20
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
 8017530:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017532:	2300      	movs	r3, #0
 8017534:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801753c:	2b01      	cmp	r3, #1
 801753e:	d101      	bne.n	8017544 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017540:	2302      	movs	r3, #2
 8017542:	e073      	b.n	801762c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2201      	movs	r2, #1
 8017548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017552:	683b      	ldr	r3, [r7, #0]
 8017554:	68db      	ldr	r3, [r3, #12]
 8017556:	4313      	orrs	r3, r2
 8017558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017560:	683b      	ldr	r3, [r7, #0]
 8017562:	689b      	ldr	r3, [r3, #8]
 8017564:	4313      	orrs	r3, r2
 8017566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801756e:	683b      	ldr	r3, [r7, #0]
 8017570:	685b      	ldr	r3, [r3, #4]
 8017572:	4313      	orrs	r3, r2
 8017574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801757c:	683b      	ldr	r3, [r7, #0]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	4313      	orrs	r3, r2
 8017582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	691b      	ldr	r3, [r3, #16]
 801758e:	4313      	orrs	r3, r2
 8017590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	695b      	ldr	r3, [r3, #20]
 801759c:	4313      	orrs	r3, r2
 801759e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80175a6:	683b      	ldr	r3, [r7, #0]
 80175a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80175aa:	4313      	orrs	r3, r2
 80175ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80175b4:	683b      	ldr	r3, [r7, #0]
 80175b6:	699b      	ldr	r3, [r3, #24]
 80175b8:	041b      	lsls	r3, r3, #16
 80175ba:	4313      	orrs	r3, r2
 80175bc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	69db      	ldr	r3, [r3, #28]
 80175c8:	4313      	orrs	r3, r2
 80175ca:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	4a19      	ldr	r2, [pc, #100]	@ (8017638 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80175d2:	4293      	cmp	r3, r2
 80175d4:	d004      	beq.n	80175e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	4a18      	ldr	r2, [pc, #96]	@ (801763c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80175dc:	4293      	cmp	r3, r2
 80175de:	d11c      	bne.n	801761a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80175e6:	683b      	ldr	r3, [r7, #0]
 80175e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175ea:	051b      	lsls	r3, r3, #20
 80175ec:	4313      	orrs	r3, r2
 80175ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80175f6:	683b      	ldr	r3, [r7, #0]
 80175f8:	6a1b      	ldr	r3, [r3, #32]
 80175fa:	4313      	orrs	r3, r2
 80175fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8017604:	683b      	ldr	r3, [r7, #0]
 8017606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017608:	4313      	orrs	r3, r2
 801760a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8017612:	683b      	ldr	r3, [r7, #0]
 8017614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017616:	4313      	orrs	r3, r2
 8017618:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	68fa      	ldr	r2, [r7, #12]
 8017620:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	2200      	movs	r2, #0
 8017626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801762a:	2300      	movs	r3, #0
}
 801762c:	4618      	mov	r0, r3
 801762e:	3714      	adds	r7, #20
 8017630:	46bd      	mov	sp, r7
 8017632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017636:	4770      	bx	lr
 8017638:	40010000 	.word	0x40010000
 801763c:	40010400 	.word	0x40010400

08017640 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017640:	b480      	push	{r7}
 8017642:	b083      	sub	sp, #12
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017648:	bf00      	nop
 801764a:	370c      	adds	r7, #12
 801764c:	46bd      	mov	sp, r7
 801764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017652:	4770      	bx	lr

08017654 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017654:	b480      	push	{r7}
 8017656:	b083      	sub	sp, #12
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801765c:	bf00      	nop
 801765e:	370c      	adds	r7, #12
 8017660:	46bd      	mov	sp, r7
 8017662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017666:	4770      	bx	lr

08017668 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017668:	b480      	push	{r7}
 801766a:	b083      	sub	sp, #12
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017670:	bf00      	nop
 8017672:	370c      	adds	r7, #12
 8017674:	46bd      	mov	sp, r7
 8017676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767a:	4770      	bx	lr

0801767c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b082      	sub	sp, #8
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d101      	bne.n	801768e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801768a:	2301      	movs	r3, #1
 801768c:	e042      	b.n	8017714 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017694:	2b00      	cmp	r3, #0
 8017696:	d106      	bne.n	80176a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	2200      	movs	r2, #0
 801769c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f7f1 fa01 	bl	8008aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2224      	movs	r2, #36	@ 0x24
 80176aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	681a      	ldr	r2, [r3, #0]
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	f022 0201 	bic.w	r2, r2, #1
 80176bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d002      	beq.n	80176cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80176c6:	6878      	ldr	r0, [r7, #4]
 80176c8:	f001 fbdc 	bl	8018e84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80176cc:	6878      	ldr	r0, [r7, #4]
 80176ce:	f000 fd6d 	bl	80181ac <UART_SetConfig>
 80176d2:	4603      	mov	r3, r0
 80176d4:	2b01      	cmp	r3, #1
 80176d6:	d101      	bne.n	80176dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80176d8:	2301      	movs	r3, #1
 80176da:	e01b      	b.n	8017714 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	685a      	ldr	r2, [r3, #4]
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80176ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	689a      	ldr	r2, [r3, #8]
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80176fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	681a      	ldr	r2, [r3, #0]
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	f042 0201 	orr.w	r2, r2, #1
 801770a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801770c:	6878      	ldr	r0, [r7, #4]
 801770e:	f001 fc5b 	bl	8018fc8 <UART_CheckIdleState>
 8017712:	4603      	mov	r3, r0
}
 8017714:	4618      	mov	r0, r3
 8017716:	3708      	adds	r7, #8
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}

0801771c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b08a      	sub	sp, #40	@ 0x28
 8017720:	af02      	add	r7, sp, #8
 8017722:	60f8      	str	r0, [r7, #12]
 8017724:	60b9      	str	r1, [r7, #8]
 8017726:	603b      	str	r3, [r7, #0]
 8017728:	4613      	mov	r3, r2
 801772a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017732:	2b20      	cmp	r3, #32
 8017734:	d17b      	bne.n	801782e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8017736:	68bb      	ldr	r3, [r7, #8]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d002      	beq.n	8017742 <HAL_UART_Transmit+0x26>
 801773c:	88fb      	ldrh	r3, [r7, #6]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d101      	bne.n	8017746 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8017742:	2301      	movs	r3, #1
 8017744:	e074      	b.n	8017830 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	2200      	movs	r2, #0
 801774a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	2221      	movs	r2, #33	@ 0x21
 8017752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017756:	f7f1 fac9 	bl	8008cec <HAL_GetTick>
 801775a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	88fa      	ldrh	r2, [r7, #6]
 8017760:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	88fa      	ldrh	r2, [r7, #6]
 8017768:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	689b      	ldr	r3, [r3, #8]
 8017770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017774:	d108      	bne.n	8017788 <HAL_UART_Transmit+0x6c>
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	691b      	ldr	r3, [r3, #16]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d104      	bne.n	8017788 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801777e:	2300      	movs	r3, #0
 8017780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017782:	68bb      	ldr	r3, [r7, #8]
 8017784:	61bb      	str	r3, [r7, #24]
 8017786:	e003      	b.n	8017790 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801778c:	2300      	movs	r3, #0
 801778e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017790:	e030      	b.n	80177f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017792:	683b      	ldr	r3, [r7, #0]
 8017794:	9300      	str	r3, [sp, #0]
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	2200      	movs	r2, #0
 801779a:	2180      	movs	r1, #128	@ 0x80
 801779c:	68f8      	ldr	r0, [r7, #12]
 801779e:	f001 fcbd 	bl	801911c <UART_WaitOnFlagUntilTimeout>
 80177a2:	4603      	mov	r3, r0
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d005      	beq.n	80177b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	2220      	movs	r2, #32
 80177ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80177b0:	2303      	movs	r3, #3
 80177b2:	e03d      	b.n	8017830 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80177b4:	69fb      	ldr	r3, [r7, #28]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d10b      	bne.n	80177d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	881b      	ldrh	r3, [r3, #0]
 80177be:	461a      	mov	r2, r3
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80177c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80177ca:	69bb      	ldr	r3, [r7, #24]
 80177cc:	3302      	adds	r3, #2
 80177ce:	61bb      	str	r3, [r7, #24]
 80177d0:	e007      	b.n	80177e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80177d2:	69fb      	ldr	r3, [r7, #28]
 80177d4:	781a      	ldrb	r2, [r3, #0]
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80177dc:	69fb      	ldr	r3, [r7, #28]
 80177de:	3301      	adds	r3, #1
 80177e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80177e8:	b29b      	uxth	r3, r3
 80177ea:	3b01      	subs	r3, #1
 80177ec:	b29a      	uxth	r2, r3
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80177fa:	b29b      	uxth	r3, r3
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d1c8      	bne.n	8017792 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017800:	683b      	ldr	r3, [r7, #0]
 8017802:	9300      	str	r3, [sp, #0]
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	2200      	movs	r2, #0
 8017808:	2140      	movs	r1, #64	@ 0x40
 801780a:	68f8      	ldr	r0, [r7, #12]
 801780c:	f001 fc86 	bl	801911c <UART_WaitOnFlagUntilTimeout>
 8017810:	4603      	mov	r3, r0
 8017812:	2b00      	cmp	r3, #0
 8017814:	d005      	beq.n	8017822 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	2220      	movs	r2, #32
 801781a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801781e:	2303      	movs	r3, #3
 8017820:	e006      	b.n	8017830 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	2220      	movs	r2, #32
 8017826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 801782a:	2300      	movs	r3, #0
 801782c:	e000      	b.n	8017830 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801782e:	2302      	movs	r3, #2
  }
}
 8017830:	4618      	mov	r0, r3
 8017832:	3720      	adds	r7, #32
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}

08017838 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017838:	b480      	push	{r7}
 801783a:	b091      	sub	sp, #68	@ 0x44
 801783c:	af00      	add	r7, sp, #0
 801783e:	60f8      	str	r0, [r7, #12]
 8017840:	60b9      	str	r1, [r7, #8]
 8017842:	4613      	mov	r3, r2
 8017844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801784c:	2b20      	cmp	r3, #32
 801784e:	d178      	bne.n	8017942 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017850:	68bb      	ldr	r3, [r7, #8]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d002      	beq.n	801785c <HAL_UART_Transmit_IT+0x24>
 8017856:	88fb      	ldrh	r3, [r7, #6]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d101      	bne.n	8017860 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 801785c:	2301      	movs	r3, #1
 801785e:	e071      	b.n	8017944 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	68ba      	ldr	r2, [r7, #8]
 8017864:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	88fa      	ldrh	r2, [r7, #6]
 801786a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	88fa      	ldrh	r2, [r7, #6]
 8017872:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	2200      	movs	r2, #0
 801787a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	2200      	movs	r2, #0
 8017880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	2221      	movs	r2, #33	@ 0x21
 8017888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017894:	d12a      	bne.n	80178ec <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	689b      	ldr	r3, [r3, #8]
 801789a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801789e:	d107      	bne.n	80178b0 <HAL_UART_Transmit_IT+0x78>
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	691b      	ldr	r3, [r3, #16]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d103      	bne.n	80178b0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	4a29      	ldr	r2, [pc, #164]	@ (8017950 <HAL_UART_Transmit_IT+0x118>)
 80178ac:	679a      	str	r2, [r3, #120]	@ 0x78
 80178ae:	e002      	b.n	80178b6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	4a28      	ldr	r2, [pc, #160]	@ (8017954 <HAL_UART_Transmit_IT+0x11c>)
 80178b4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	3308      	adds	r3, #8
 80178bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178c0:	e853 3f00 	ldrex	r3, [r3]
 80178c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80178c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80178cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	3308      	adds	r3, #8
 80178d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80178d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80178d8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80178dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80178de:	e841 2300 	strex	r3, r2, [r1]
 80178e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80178e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d1e5      	bne.n	80178b6 <HAL_UART_Transmit_IT+0x7e>
 80178ea:	e028      	b.n	801793e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	689b      	ldr	r3, [r3, #8]
 80178f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80178f4:	d107      	bne.n	8017906 <HAL_UART_Transmit_IT+0xce>
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	691b      	ldr	r3, [r3, #16]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d103      	bne.n	8017906 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	4a15      	ldr	r2, [pc, #84]	@ (8017958 <HAL_UART_Transmit_IT+0x120>)
 8017902:	679a      	str	r2, [r3, #120]	@ 0x78
 8017904:	e002      	b.n	801790c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	4a14      	ldr	r2, [pc, #80]	@ (801795c <HAL_UART_Transmit_IT+0x124>)
 801790a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017912:	697b      	ldr	r3, [r7, #20]
 8017914:	e853 3f00 	ldrex	r3, [r3]
 8017918:	613b      	str	r3, [r7, #16]
   return(result);
 801791a:	693b      	ldr	r3, [r7, #16]
 801791c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	461a      	mov	r2, r3
 8017928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801792a:	623b      	str	r3, [r7, #32]
 801792c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801792e:	69f9      	ldr	r1, [r7, #28]
 8017930:	6a3a      	ldr	r2, [r7, #32]
 8017932:	e841 2300 	strex	r3, r2, [r1]
 8017936:	61bb      	str	r3, [r7, #24]
   return(result);
 8017938:	69bb      	ldr	r3, [r7, #24]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d1e6      	bne.n	801790c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 801793e:	2300      	movs	r3, #0
 8017940:	e000      	b.n	8017944 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8017942:	2302      	movs	r3, #2
  }
}
 8017944:	4618      	mov	r0, r3
 8017946:	3744      	adds	r7, #68	@ 0x44
 8017948:	46bd      	mov	sp, r7
 801794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794e:	4770      	bx	lr
 8017950:	0801978f 	.word	0x0801978f
 8017954:	080196af 	.word	0x080196af
 8017958:	080195ed 	.word	0x080195ed
 801795c:	08019535 	.word	0x08019535

08017960 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b08a      	sub	sp, #40	@ 0x28
 8017964:	af00      	add	r7, sp, #0
 8017966:	60f8      	str	r0, [r7, #12]
 8017968:	60b9      	str	r1, [r7, #8]
 801796a:	4613      	mov	r3, r2
 801796c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017974:	2b20      	cmp	r3, #32
 8017976:	d137      	bne.n	80179e8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8017978:	68bb      	ldr	r3, [r7, #8]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d002      	beq.n	8017984 <HAL_UART_Receive_IT+0x24>
 801797e:	88fb      	ldrh	r3, [r7, #6]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d101      	bne.n	8017988 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8017984:	2301      	movs	r3, #1
 8017986:	e030      	b.n	80179ea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	2200      	movs	r2, #0
 801798c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	4a18      	ldr	r2, [pc, #96]	@ (80179f4 <HAL_UART_Receive_IT+0x94>)
 8017994:	4293      	cmp	r3, r2
 8017996:	d01f      	beq.n	80179d8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	685b      	ldr	r3, [r3, #4]
 801799e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d018      	beq.n	80179d8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179ac:	697b      	ldr	r3, [r7, #20]
 80179ae:	e853 3f00 	ldrex	r3, [r3]
 80179b2:	613b      	str	r3, [r7, #16]
   return(result);
 80179b4:	693b      	ldr	r3, [r7, #16]
 80179b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80179ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	461a      	mov	r2, r3
 80179c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179c4:	623b      	str	r3, [r7, #32]
 80179c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179c8:	69f9      	ldr	r1, [r7, #28]
 80179ca:	6a3a      	ldr	r2, [r7, #32]
 80179cc:	e841 2300 	strex	r3, r2, [r1]
 80179d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80179d2:	69bb      	ldr	r3, [r7, #24]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d1e6      	bne.n	80179a6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80179d8:	88fb      	ldrh	r3, [r7, #6]
 80179da:	461a      	mov	r2, r3
 80179dc:	68b9      	ldr	r1, [r7, #8]
 80179de:	68f8      	ldr	r0, [r7, #12]
 80179e0:	f001 fc0a 	bl	80191f8 <UART_Start_Receive_IT>
 80179e4:	4603      	mov	r3, r0
 80179e6:	e000      	b.n	80179ea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80179e8:	2302      	movs	r3, #2
  }
}
 80179ea:	4618      	mov	r0, r3
 80179ec:	3728      	adds	r7, #40	@ 0x28
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd80      	pop	{r7, pc}
 80179f2:	bf00      	nop
 80179f4:	58000c00 	.word	0x58000c00

080179f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b0ba      	sub	sp, #232	@ 0xe8
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	69db      	ldr	r3, [r3, #28]
 8017a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	689b      	ldr	r3, [r3, #8]
 8017a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017a1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8017a22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8017a26:	4013      	ands	r3, r2
 8017a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8017a2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d11b      	bne.n	8017a6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a38:	f003 0320 	and.w	r3, r3, #32
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d015      	beq.n	8017a6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017a44:	f003 0320 	and.w	r3, r3, #32
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d105      	bne.n	8017a58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d009      	beq.n	8017a6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	f000 8377 	beq.w	8018150 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017a66:	6878      	ldr	r0, [r7, #4]
 8017a68:	4798      	blx	r3
      }
      return;
 8017a6a:	e371      	b.n	8018150 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	f000 8123 	beq.w	8017cbc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017a76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017a7a:	4b8d      	ldr	r3, [pc, #564]	@ (8017cb0 <HAL_UART_IRQHandler+0x2b8>)
 8017a7c:	4013      	ands	r3, r2
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d106      	bne.n	8017a90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017a82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8017a86:	4b8b      	ldr	r3, [pc, #556]	@ (8017cb4 <HAL_UART_IRQHandler+0x2bc>)
 8017a88:	4013      	ands	r3, r2
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	f000 8116 	beq.w	8017cbc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017a94:	f003 0301 	and.w	r3, r3, #1
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d011      	beq.n	8017ac0 <HAL_UART_IRQHandler+0xc8>
 8017a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d00b      	beq.n	8017ac0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	2201      	movs	r2, #1
 8017aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017ab6:	f043 0201 	orr.w	r2, r3, #1
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ac4:	f003 0302 	and.w	r3, r3, #2
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d011      	beq.n	8017af0 <HAL_UART_IRQHandler+0xf8>
 8017acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017ad0:	f003 0301 	and.w	r3, r3, #1
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d00b      	beq.n	8017af0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	2202      	movs	r2, #2
 8017ade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017ae6:	f043 0204 	orr.w	r2, r3, #4
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017af4:	f003 0304 	and.w	r3, r3, #4
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d011      	beq.n	8017b20 <HAL_UART_IRQHandler+0x128>
 8017afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017b00:	f003 0301 	and.w	r3, r3, #1
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d00b      	beq.n	8017b20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	2204      	movs	r2, #4
 8017b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017b16:	f043 0202 	orr.w	r2, r3, #2
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017b24:	f003 0308 	and.w	r3, r3, #8
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d017      	beq.n	8017b5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017b30:	f003 0320 	and.w	r3, r3, #32
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d105      	bne.n	8017b44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017b38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8017b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8017cb0 <HAL_UART_IRQHandler+0x2b8>)
 8017b3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d00b      	beq.n	8017b5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	2208      	movs	r2, #8
 8017b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017b52:	f043 0208 	orr.w	r2, r3, #8
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d012      	beq.n	8017b8e <HAL_UART_IRQHandler+0x196>
 8017b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017b6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d00c      	beq.n	8017b8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017b7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017b84:	f043 0220 	orr.w	r2, r3, #32
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	f000 82dd 	beq.w	8018154 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017b9e:	f003 0320 	and.w	r3, r3, #32
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d013      	beq.n	8017bce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017baa:	f003 0320 	and.w	r3, r3, #32
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d105      	bne.n	8017bbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d007      	beq.n	8017bce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d003      	beq.n	8017bce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017bca:	6878      	ldr	r0, [r7, #4]
 8017bcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017bd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	689b      	ldr	r3, [r3, #8]
 8017bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017be2:	2b40      	cmp	r3, #64	@ 0x40
 8017be4:	d005      	beq.n	8017bf2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017bea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d054      	beq.n	8017c9c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017bf2:	6878      	ldr	r0, [r7, #4]
 8017bf4:	f001 fc22 	bl	801943c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	689b      	ldr	r3, [r3, #8]
 8017bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017c02:	2b40      	cmp	r3, #64	@ 0x40
 8017c04:	d146      	bne.n	8017c94 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	3308      	adds	r3, #8
 8017c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017c14:	e853 3f00 	ldrex	r3, [r3]
 8017c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8017c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	3308      	adds	r3, #8
 8017c2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8017c32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8017c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8017c3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8017c42:	e841 2300 	strex	r3, r2, [r1]
 8017c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8017c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d1d9      	bne.n	8017c06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d017      	beq.n	8017c8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c62:	4a15      	ldr	r2, [pc, #84]	@ (8017cb8 <HAL_UART_IRQHandler+0x2c0>)
 8017c64:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	f7f4 fa75 	bl	800c15c <HAL_DMA_Abort_IT>
 8017c72:	4603      	mov	r3, r0
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d019      	beq.n	8017cac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017c80:	687a      	ldr	r2, [r7, #4]
 8017c82:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8017c86:	4610      	mov	r0, r2
 8017c88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c8a:	e00f      	b.n	8017cac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017c8c:	6878      	ldr	r0, [r7, #4]
 8017c8e:	f000 fa77 	bl	8018180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c92:	e00b      	b.n	8017cac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017c94:	6878      	ldr	r0, [r7, #4]
 8017c96:	f000 fa73 	bl	8018180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c9a:	e007      	b.n	8017cac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017c9c:	6878      	ldr	r0, [r7, #4]
 8017c9e:	f000 fa6f 	bl	8018180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8017caa:	e253      	b.n	8018154 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017cac:	bf00      	nop
    return;
 8017cae:	e251      	b.n	8018154 <HAL_UART_IRQHandler+0x75c>
 8017cb0:	10000001 	.word	0x10000001
 8017cb4:	04000120 	.word	0x04000120
 8017cb8:	08019509 	.word	0x08019509

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017cc0:	2b01      	cmp	r3, #1
 8017cc2:	f040 81e7 	bne.w	8018094 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8017cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017cca:	f003 0310 	and.w	r3, r3, #16
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	f000 81e0 	beq.w	8018094 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017cd8:	f003 0310 	and.w	r3, r3, #16
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	f000 81d9 	beq.w	8018094 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	2210      	movs	r2, #16
 8017ce8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	689b      	ldr	r3, [r3, #8]
 8017cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017cf4:	2b40      	cmp	r3, #64	@ 0x40
 8017cf6:	f040 8151 	bne.w	8017f9c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	4a96      	ldr	r2, [pc, #600]	@ (8017f5c <HAL_UART_IRQHandler+0x564>)
 8017d04:	4293      	cmp	r3, r2
 8017d06:	d068      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	4a93      	ldr	r2, [pc, #588]	@ (8017f60 <HAL_UART_IRQHandler+0x568>)
 8017d12:	4293      	cmp	r3, r2
 8017d14:	d061      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	4a91      	ldr	r2, [pc, #580]	@ (8017f64 <HAL_UART_IRQHandler+0x56c>)
 8017d20:	4293      	cmp	r3, r2
 8017d22:	d05a      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	4a8e      	ldr	r2, [pc, #568]	@ (8017f68 <HAL_UART_IRQHandler+0x570>)
 8017d2e:	4293      	cmp	r3, r2
 8017d30:	d053      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	4a8c      	ldr	r2, [pc, #560]	@ (8017f6c <HAL_UART_IRQHandler+0x574>)
 8017d3c:	4293      	cmp	r3, r2
 8017d3e:	d04c      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	4a89      	ldr	r2, [pc, #548]	@ (8017f70 <HAL_UART_IRQHandler+0x578>)
 8017d4a:	4293      	cmp	r3, r2
 8017d4c:	d045      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	4a87      	ldr	r2, [pc, #540]	@ (8017f74 <HAL_UART_IRQHandler+0x57c>)
 8017d58:	4293      	cmp	r3, r2
 8017d5a:	d03e      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	4a84      	ldr	r2, [pc, #528]	@ (8017f78 <HAL_UART_IRQHandler+0x580>)
 8017d66:	4293      	cmp	r3, r2
 8017d68:	d037      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	4a82      	ldr	r2, [pc, #520]	@ (8017f7c <HAL_UART_IRQHandler+0x584>)
 8017d74:	4293      	cmp	r3, r2
 8017d76:	d030      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	4a7f      	ldr	r2, [pc, #508]	@ (8017f80 <HAL_UART_IRQHandler+0x588>)
 8017d82:	4293      	cmp	r3, r2
 8017d84:	d029      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	4a7d      	ldr	r2, [pc, #500]	@ (8017f84 <HAL_UART_IRQHandler+0x58c>)
 8017d90:	4293      	cmp	r3, r2
 8017d92:	d022      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	4a7a      	ldr	r2, [pc, #488]	@ (8017f88 <HAL_UART_IRQHandler+0x590>)
 8017d9e:	4293      	cmp	r3, r2
 8017da0:	d01b      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	4a78      	ldr	r2, [pc, #480]	@ (8017f8c <HAL_UART_IRQHandler+0x594>)
 8017dac:	4293      	cmp	r3, r2
 8017dae:	d014      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	4a75      	ldr	r2, [pc, #468]	@ (8017f90 <HAL_UART_IRQHandler+0x598>)
 8017dba:	4293      	cmp	r3, r2
 8017dbc:	d00d      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	4a73      	ldr	r2, [pc, #460]	@ (8017f94 <HAL_UART_IRQHandler+0x59c>)
 8017dc8:	4293      	cmp	r3, r2
 8017dca:	d006      	beq.n	8017dda <HAL_UART_IRQHandler+0x3e2>
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	4a70      	ldr	r2, [pc, #448]	@ (8017f98 <HAL_UART_IRQHandler+0x5a0>)
 8017dd6:	4293      	cmp	r3, r2
 8017dd8:	d106      	bne.n	8017de8 <HAL_UART_IRQHandler+0x3f0>
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	685b      	ldr	r3, [r3, #4]
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	e005      	b.n	8017df4 <HAL_UART_IRQHandler+0x3fc>
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	685b      	ldr	r3, [r3, #4]
 8017df2:	b29b      	uxth	r3, r3
 8017df4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017df8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	f000 81ab 	beq.w	8018158 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017e08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017e0c:	429a      	cmp	r2, r3
 8017e0e:	f080 81a3 	bcs.w	8018158 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017e18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017e22:	69db      	ldr	r3, [r3, #28]
 8017e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017e28:	f000 8087 	beq.w	8017f3a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017e38:	e853 3f00 	ldrex	r3, [r3]
 8017e3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8017e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017e48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	461a      	mov	r2, r3
 8017e52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017e56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8017e5a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8017e62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8017e66:	e841 2300 	strex	r3, r2, [r1]
 8017e6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8017e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d1da      	bne.n	8017e2c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	3308      	adds	r3, #8
 8017e7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017e80:	e853 3f00 	ldrex	r3, [r3]
 8017e84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8017e86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017e88:	f023 0301 	bic.w	r3, r3, #1
 8017e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	3308      	adds	r3, #8
 8017e96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8017e9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8017e9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ea0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8017ea2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017ea6:	e841 2300 	strex	r3, r2, [r1]
 8017eaa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8017eac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d1e1      	bne.n	8017e76 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	3308      	adds	r3, #8
 8017eb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017eba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017ebc:	e853 3f00 	ldrex	r3, [r3]
 8017ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8017ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017ec4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	3308      	adds	r3, #8
 8017ed2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017ed6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8017ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017eda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017edc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017ede:	e841 2300 	strex	r3, r2, [r1]
 8017ee2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8017ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d1e3      	bne.n	8017eb2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	2220      	movs	r2, #32
 8017eee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f00:	e853 3f00 	ldrex	r3, [r3]
 8017f04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8017f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f08:	f023 0310 	bic.w	r3, r3, #16
 8017f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	461a      	mov	r2, r3
 8017f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017f1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017f20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017f22:	e841 2300 	strex	r3, r2, [r1]
 8017f26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8017f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d1e4      	bne.n	8017ef8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017f34:	4618      	mov	r0, r3
 8017f36:	f7f3 fdf3 	bl	800bb20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	2202      	movs	r2, #2
 8017f3e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	1ad3      	subs	r3, r2, r3
 8017f50:	b29b      	uxth	r3, r3
 8017f52:	4619      	mov	r1, r3
 8017f54:	6878      	ldr	r0, [r7, #4]
 8017f56:	f000 f91d 	bl	8018194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017f5a:	e0fd      	b.n	8018158 <HAL_UART_IRQHandler+0x760>
 8017f5c:	40020010 	.word	0x40020010
 8017f60:	40020028 	.word	0x40020028
 8017f64:	40020040 	.word	0x40020040
 8017f68:	40020058 	.word	0x40020058
 8017f6c:	40020070 	.word	0x40020070
 8017f70:	40020088 	.word	0x40020088
 8017f74:	400200a0 	.word	0x400200a0
 8017f78:	400200b8 	.word	0x400200b8
 8017f7c:	40020410 	.word	0x40020410
 8017f80:	40020428 	.word	0x40020428
 8017f84:	40020440 	.word	0x40020440
 8017f88:	40020458 	.word	0x40020458
 8017f8c:	40020470 	.word	0x40020470
 8017f90:	40020488 	.word	0x40020488
 8017f94:	400204a0 	.word	0x400204a0
 8017f98:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017fa8:	b29b      	uxth	r3, r3
 8017faa:	1ad3      	subs	r3, r2, r3
 8017fac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017fb6:	b29b      	uxth	r3, r3
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	f000 80cf 	beq.w	801815c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8017fbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	f000 80ca 	beq.w	801815c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fd0:	e853 3f00 	ldrex	r3, [r3]
 8017fd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017fd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	461a      	mov	r2, r3
 8017fe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017fea:	647b      	str	r3, [r7, #68]	@ 0x44
 8017fec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017fee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017ff0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017ff2:	e841 2300 	strex	r3, r2, [r1]
 8017ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d1e4      	bne.n	8017fc8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	3308      	adds	r3, #8
 8018004:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018008:	e853 3f00 	ldrex	r3, [r3]
 801800c:	623b      	str	r3, [r7, #32]
   return(result);
 801800e:	6a3a      	ldr	r2, [r7, #32]
 8018010:	4b55      	ldr	r3, [pc, #340]	@ (8018168 <HAL_UART_IRQHandler+0x770>)
 8018012:	4013      	ands	r3, r2
 8018014:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	3308      	adds	r3, #8
 801801e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8018022:	633a      	str	r2, [r7, #48]	@ 0x30
 8018024:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801802a:	e841 2300 	strex	r3, r2, [r1]
 801802e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8018030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018032:	2b00      	cmp	r3, #0
 8018034:	d1e3      	bne.n	8017ffe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	2220      	movs	r2, #32
 801803a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	2200      	movs	r2, #0
 8018042:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2200      	movs	r2, #0
 8018048:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	e853 3f00 	ldrex	r3, [r3]
 8018056:	60fb      	str	r3, [r7, #12]
   return(result);
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	f023 0310 	bic.w	r3, r3, #16
 801805e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	461a      	mov	r2, r3
 8018068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801806c:	61fb      	str	r3, [r7, #28]
 801806e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018070:	69b9      	ldr	r1, [r7, #24]
 8018072:	69fa      	ldr	r2, [r7, #28]
 8018074:	e841 2300 	strex	r3, r2, [r1]
 8018078:	617b      	str	r3, [r7, #20]
   return(result);
 801807a:	697b      	ldr	r3, [r7, #20]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d1e4      	bne.n	801804a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	2202      	movs	r2, #2
 8018084:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8018086:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801808a:	4619      	mov	r1, r3
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f000 f881 	bl	8018194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8018092:	e063      	b.n	801815c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8018094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801809c:	2b00      	cmp	r3, #0
 801809e:	d00e      	beq.n	80180be <HAL_UART_IRQHandler+0x6c6>
 80180a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80180a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d008      	beq.n	80180be <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80180b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80180b6:	6878      	ldr	r0, [r7, #4]
 80180b8:	f002 f926 	bl	801a308 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80180bc:	e051      	b.n	8018162 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80180be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80180c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d014      	beq.n	80180f4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80180ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80180ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d105      	bne.n	80180e2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80180d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80180da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d008      	beq.n	80180f4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d03a      	beq.n	8018160 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80180ee:	6878      	ldr	r0, [r7, #4]
 80180f0:	4798      	blx	r3
    }
    return;
 80180f2:	e035      	b.n	8018160 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80180f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80180f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d009      	beq.n	8018114 <HAL_UART_IRQHandler+0x71c>
 8018100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018108:	2b00      	cmp	r3, #0
 801810a:	d003      	beq.n	8018114 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801810c:	6878      	ldr	r0, [r7, #4]
 801810e:	f001 fbb3 	bl	8019878 <UART_EndTransmit_IT>
    return;
 8018112:	e026      	b.n	8018162 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8018114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801811c:	2b00      	cmp	r3, #0
 801811e:	d009      	beq.n	8018134 <HAL_UART_IRQHandler+0x73c>
 8018120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018124:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018128:	2b00      	cmp	r3, #0
 801812a:	d003      	beq.n	8018134 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801812c:	6878      	ldr	r0, [r7, #4]
 801812e:	f002 f8ff 	bl	801a330 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8018132:	e016      	b.n	8018162 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8018134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801813c:	2b00      	cmp	r3, #0
 801813e:	d010      	beq.n	8018162 <HAL_UART_IRQHandler+0x76a>
 8018140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018144:	2b00      	cmp	r3, #0
 8018146:	da0c      	bge.n	8018162 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8018148:	6878      	ldr	r0, [r7, #4]
 801814a:	f002 f8e7 	bl	801a31c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801814e:	e008      	b.n	8018162 <HAL_UART_IRQHandler+0x76a>
      return;
 8018150:	bf00      	nop
 8018152:	e006      	b.n	8018162 <HAL_UART_IRQHandler+0x76a>
    return;
 8018154:	bf00      	nop
 8018156:	e004      	b.n	8018162 <HAL_UART_IRQHandler+0x76a>
      return;
 8018158:	bf00      	nop
 801815a:	e002      	b.n	8018162 <HAL_UART_IRQHandler+0x76a>
      return;
 801815c:	bf00      	nop
 801815e:	e000      	b.n	8018162 <HAL_UART_IRQHandler+0x76a>
    return;
 8018160:	bf00      	nop
  }
}
 8018162:	37e8      	adds	r7, #232	@ 0xe8
 8018164:	46bd      	mov	sp, r7
 8018166:	bd80      	pop	{r7, pc}
 8018168:	effffffe 	.word	0xeffffffe

0801816c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801816c:	b480      	push	{r7}
 801816e:	b083      	sub	sp, #12
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018174:	bf00      	nop
 8018176:	370c      	adds	r7, #12
 8018178:	46bd      	mov	sp, r7
 801817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817e:	4770      	bx	lr

08018180 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018180:	b480      	push	{r7}
 8018182:	b083      	sub	sp, #12
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8018188:	bf00      	nop
 801818a:	370c      	adds	r7, #12
 801818c:	46bd      	mov	sp, r7
 801818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018192:	4770      	bx	lr

08018194 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018194:	b480      	push	{r7}
 8018196:	b083      	sub	sp, #12
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
 801819c:	460b      	mov	r3, r1
 801819e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80181a0:	bf00      	nop
 80181a2:	370c      	adds	r7, #12
 80181a4:	46bd      	mov	sp, r7
 80181a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181aa:	4770      	bx	lr

080181ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80181ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80181b0:	b092      	sub	sp, #72	@ 0x48
 80181b2:	af00      	add	r7, sp, #0
 80181b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80181b6:	2300      	movs	r3, #0
 80181b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80181bc:	697b      	ldr	r3, [r7, #20]
 80181be:	689a      	ldr	r2, [r3, #8]
 80181c0:	697b      	ldr	r3, [r7, #20]
 80181c2:	691b      	ldr	r3, [r3, #16]
 80181c4:	431a      	orrs	r2, r3
 80181c6:	697b      	ldr	r3, [r7, #20]
 80181c8:	695b      	ldr	r3, [r3, #20]
 80181ca:	431a      	orrs	r2, r3
 80181cc:	697b      	ldr	r3, [r7, #20]
 80181ce:	69db      	ldr	r3, [r3, #28]
 80181d0:	4313      	orrs	r3, r2
 80181d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80181d4:	697b      	ldr	r3, [r7, #20]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	681a      	ldr	r2, [r3, #0]
 80181da:	4bbe      	ldr	r3, [pc, #760]	@ (80184d4 <UART_SetConfig+0x328>)
 80181dc:	4013      	ands	r3, r2
 80181de:	697a      	ldr	r2, [r7, #20]
 80181e0:	6812      	ldr	r2, [r2, #0]
 80181e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80181e4:	430b      	orrs	r3, r1
 80181e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80181e8:	697b      	ldr	r3, [r7, #20]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	685b      	ldr	r3, [r3, #4]
 80181ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80181f2:	697b      	ldr	r3, [r7, #20]
 80181f4:	68da      	ldr	r2, [r3, #12]
 80181f6:	697b      	ldr	r3, [r7, #20]
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	430a      	orrs	r2, r1
 80181fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80181fe:	697b      	ldr	r3, [r7, #20]
 8018200:	699b      	ldr	r3, [r3, #24]
 8018202:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018204:	697b      	ldr	r3, [r7, #20]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	4ab3      	ldr	r2, [pc, #716]	@ (80184d8 <UART_SetConfig+0x32c>)
 801820a:	4293      	cmp	r3, r2
 801820c:	d004      	beq.n	8018218 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801820e:	697b      	ldr	r3, [r7, #20]
 8018210:	6a1b      	ldr	r3, [r3, #32]
 8018212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018214:	4313      	orrs	r3, r2
 8018216:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018218:	697b      	ldr	r3, [r7, #20]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	689a      	ldr	r2, [r3, #8]
 801821e:	4baf      	ldr	r3, [pc, #700]	@ (80184dc <UART_SetConfig+0x330>)
 8018220:	4013      	ands	r3, r2
 8018222:	697a      	ldr	r2, [r7, #20]
 8018224:	6812      	ldr	r2, [r2, #0]
 8018226:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8018228:	430b      	orrs	r3, r1
 801822a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801822c:	697b      	ldr	r3, [r7, #20]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018232:	f023 010f 	bic.w	r1, r3, #15
 8018236:	697b      	ldr	r3, [r7, #20]
 8018238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801823a:	697b      	ldr	r3, [r7, #20]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	430a      	orrs	r2, r1
 8018240:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018242:	697b      	ldr	r3, [r7, #20]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	4aa6      	ldr	r2, [pc, #664]	@ (80184e0 <UART_SetConfig+0x334>)
 8018248:	4293      	cmp	r3, r2
 801824a:	d177      	bne.n	801833c <UART_SetConfig+0x190>
 801824c:	4ba5      	ldr	r3, [pc, #660]	@ (80184e4 <UART_SetConfig+0x338>)
 801824e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018250:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018254:	2b28      	cmp	r3, #40	@ 0x28
 8018256:	d86d      	bhi.n	8018334 <UART_SetConfig+0x188>
 8018258:	a201      	add	r2, pc, #4	@ (adr r2, 8018260 <UART_SetConfig+0xb4>)
 801825a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801825e:	bf00      	nop
 8018260:	08018305 	.word	0x08018305
 8018264:	08018335 	.word	0x08018335
 8018268:	08018335 	.word	0x08018335
 801826c:	08018335 	.word	0x08018335
 8018270:	08018335 	.word	0x08018335
 8018274:	08018335 	.word	0x08018335
 8018278:	08018335 	.word	0x08018335
 801827c:	08018335 	.word	0x08018335
 8018280:	0801830d 	.word	0x0801830d
 8018284:	08018335 	.word	0x08018335
 8018288:	08018335 	.word	0x08018335
 801828c:	08018335 	.word	0x08018335
 8018290:	08018335 	.word	0x08018335
 8018294:	08018335 	.word	0x08018335
 8018298:	08018335 	.word	0x08018335
 801829c:	08018335 	.word	0x08018335
 80182a0:	08018315 	.word	0x08018315
 80182a4:	08018335 	.word	0x08018335
 80182a8:	08018335 	.word	0x08018335
 80182ac:	08018335 	.word	0x08018335
 80182b0:	08018335 	.word	0x08018335
 80182b4:	08018335 	.word	0x08018335
 80182b8:	08018335 	.word	0x08018335
 80182bc:	08018335 	.word	0x08018335
 80182c0:	0801831d 	.word	0x0801831d
 80182c4:	08018335 	.word	0x08018335
 80182c8:	08018335 	.word	0x08018335
 80182cc:	08018335 	.word	0x08018335
 80182d0:	08018335 	.word	0x08018335
 80182d4:	08018335 	.word	0x08018335
 80182d8:	08018335 	.word	0x08018335
 80182dc:	08018335 	.word	0x08018335
 80182e0:	08018325 	.word	0x08018325
 80182e4:	08018335 	.word	0x08018335
 80182e8:	08018335 	.word	0x08018335
 80182ec:	08018335 	.word	0x08018335
 80182f0:	08018335 	.word	0x08018335
 80182f4:	08018335 	.word	0x08018335
 80182f8:	08018335 	.word	0x08018335
 80182fc:	08018335 	.word	0x08018335
 8018300:	0801832d 	.word	0x0801832d
 8018304:	2301      	movs	r3, #1
 8018306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801830a:	e326      	b.n	801895a <UART_SetConfig+0x7ae>
 801830c:	2304      	movs	r3, #4
 801830e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018312:	e322      	b.n	801895a <UART_SetConfig+0x7ae>
 8018314:	2308      	movs	r3, #8
 8018316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801831a:	e31e      	b.n	801895a <UART_SetConfig+0x7ae>
 801831c:	2310      	movs	r3, #16
 801831e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018322:	e31a      	b.n	801895a <UART_SetConfig+0x7ae>
 8018324:	2320      	movs	r3, #32
 8018326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801832a:	e316      	b.n	801895a <UART_SetConfig+0x7ae>
 801832c:	2340      	movs	r3, #64	@ 0x40
 801832e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018332:	e312      	b.n	801895a <UART_SetConfig+0x7ae>
 8018334:	2380      	movs	r3, #128	@ 0x80
 8018336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801833a:	e30e      	b.n	801895a <UART_SetConfig+0x7ae>
 801833c:	697b      	ldr	r3, [r7, #20]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	4a69      	ldr	r2, [pc, #420]	@ (80184e8 <UART_SetConfig+0x33c>)
 8018342:	4293      	cmp	r3, r2
 8018344:	d130      	bne.n	80183a8 <UART_SetConfig+0x1fc>
 8018346:	4b67      	ldr	r3, [pc, #412]	@ (80184e4 <UART_SetConfig+0x338>)
 8018348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801834a:	f003 0307 	and.w	r3, r3, #7
 801834e:	2b05      	cmp	r3, #5
 8018350:	d826      	bhi.n	80183a0 <UART_SetConfig+0x1f4>
 8018352:	a201      	add	r2, pc, #4	@ (adr r2, 8018358 <UART_SetConfig+0x1ac>)
 8018354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018358:	08018371 	.word	0x08018371
 801835c:	08018379 	.word	0x08018379
 8018360:	08018381 	.word	0x08018381
 8018364:	08018389 	.word	0x08018389
 8018368:	08018391 	.word	0x08018391
 801836c:	08018399 	.word	0x08018399
 8018370:	2300      	movs	r3, #0
 8018372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018376:	e2f0      	b.n	801895a <UART_SetConfig+0x7ae>
 8018378:	2304      	movs	r3, #4
 801837a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801837e:	e2ec      	b.n	801895a <UART_SetConfig+0x7ae>
 8018380:	2308      	movs	r3, #8
 8018382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018386:	e2e8      	b.n	801895a <UART_SetConfig+0x7ae>
 8018388:	2310      	movs	r3, #16
 801838a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801838e:	e2e4      	b.n	801895a <UART_SetConfig+0x7ae>
 8018390:	2320      	movs	r3, #32
 8018392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018396:	e2e0      	b.n	801895a <UART_SetConfig+0x7ae>
 8018398:	2340      	movs	r3, #64	@ 0x40
 801839a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801839e:	e2dc      	b.n	801895a <UART_SetConfig+0x7ae>
 80183a0:	2380      	movs	r3, #128	@ 0x80
 80183a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183a6:	e2d8      	b.n	801895a <UART_SetConfig+0x7ae>
 80183a8:	697b      	ldr	r3, [r7, #20]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	4a4f      	ldr	r2, [pc, #316]	@ (80184ec <UART_SetConfig+0x340>)
 80183ae:	4293      	cmp	r3, r2
 80183b0:	d130      	bne.n	8018414 <UART_SetConfig+0x268>
 80183b2:	4b4c      	ldr	r3, [pc, #304]	@ (80184e4 <UART_SetConfig+0x338>)
 80183b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80183b6:	f003 0307 	and.w	r3, r3, #7
 80183ba:	2b05      	cmp	r3, #5
 80183bc:	d826      	bhi.n	801840c <UART_SetConfig+0x260>
 80183be:	a201      	add	r2, pc, #4	@ (adr r2, 80183c4 <UART_SetConfig+0x218>)
 80183c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183c4:	080183dd 	.word	0x080183dd
 80183c8:	080183e5 	.word	0x080183e5
 80183cc:	080183ed 	.word	0x080183ed
 80183d0:	080183f5 	.word	0x080183f5
 80183d4:	080183fd 	.word	0x080183fd
 80183d8:	08018405 	.word	0x08018405
 80183dc:	2300      	movs	r3, #0
 80183de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183e2:	e2ba      	b.n	801895a <UART_SetConfig+0x7ae>
 80183e4:	2304      	movs	r3, #4
 80183e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183ea:	e2b6      	b.n	801895a <UART_SetConfig+0x7ae>
 80183ec:	2308      	movs	r3, #8
 80183ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183f2:	e2b2      	b.n	801895a <UART_SetConfig+0x7ae>
 80183f4:	2310      	movs	r3, #16
 80183f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80183fa:	e2ae      	b.n	801895a <UART_SetConfig+0x7ae>
 80183fc:	2320      	movs	r3, #32
 80183fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018402:	e2aa      	b.n	801895a <UART_SetConfig+0x7ae>
 8018404:	2340      	movs	r3, #64	@ 0x40
 8018406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801840a:	e2a6      	b.n	801895a <UART_SetConfig+0x7ae>
 801840c:	2380      	movs	r3, #128	@ 0x80
 801840e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018412:	e2a2      	b.n	801895a <UART_SetConfig+0x7ae>
 8018414:	697b      	ldr	r3, [r7, #20]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	4a35      	ldr	r2, [pc, #212]	@ (80184f0 <UART_SetConfig+0x344>)
 801841a:	4293      	cmp	r3, r2
 801841c:	d130      	bne.n	8018480 <UART_SetConfig+0x2d4>
 801841e:	4b31      	ldr	r3, [pc, #196]	@ (80184e4 <UART_SetConfig+0x338>)
 8018420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018422:	f003 0307 	and.w	r3, r3, #7
 8018426:	2b05      	cmp	r3, #5
 8018428:	d826      	bhi.n	8018478 <UART_SetConfig+0x2cc>
 801842a:	a201      	add	r2, pc, #4	@ (adr r2, 8018430 <UART_SetConfig+0x284>)
 801842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018430:	08018449 	.word	0x08018449
 8018434:	08018451 	.word	0x08018451
 8018438:	08018459 	.word	0x08018459
 801843c:	08018461 	.word	0x08018461
 8018440:	08018469 	.word	0x08018469
 8018444:	08018471 	.word	0x08018471
 8018448:	2300      	movs	r3, #0
 801844a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801844e:	e284      	b.n	801895a <UART_SetConfig+0x7ae>
 8018450:	2304      	movs	r3, #4
 8018452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018456:	e280      	b.n	801895a <UART_SetConfig+0x7ae>
 8018458:	2308      	movs	r3, #8
 801845a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801845e:	e27c      	b.n	801895a <UART_SetConfig+0x7ae>
 8018460:	2310      	movs	r3, #16
 8018462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018466:	e278      	b.n	801895a <UART_SetConfig+0x7ae>
 8018468:	2320      	movs	r3, #32
 801846a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801846e:	e274      	b.n	801895a <UART_SetConfig+0x7ae>
 8018470:	2340      	movs	r3, #64	@ 0x40
 8018472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018476:	e270      	b.n	801895a <UART_SetConfig+0x7ae>
 8018478:	2380      	movs	r3, #128	@ 0x80
 801847a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801847e:	e26c      	b.n	801895a <UART_SetConfig+0x7ae>
 8018480:	697b      	ldr	r3, [r7, #20]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	4a1b      	ldr	r2, [pc, #108]	@ (80184f4 <UART_SetConfig+0x348>)
 8018486:	4293      	cmp	r3, r2
 8018488:	d142      	bne.n	8018510 <UART_SetConfig+0x364>
 801848a:	4b16      	ldr	r3, [pc, #88]	@ (80184e4 <UART_SetConfig+0x338>)
 801848c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801848e:	f003 0307 	and.w	r3, r3, #7
 8018492:	2b05      	cmp	r3, #5
 8018494:	d838      	bhi.n	8018508 <UART_SetConfig+0x35c>
 8018496:	a201      	add	r2, pc, #4	@ (adr r2, 801849c <UART_SetConfig+0x2f0>)
 8018498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801849c:	080184b5 	.word	0x080184b5
 80184a0:	080184bd 	.word	0x080184bd
 80184a4:	080184c5 	.word	0x080184c5
 80184a8:	080184cd 	.word	0x080184cd
 80184ac:	080184f9 	.word	0x080184f9
 80184b0:	08018501 	.word	0x08018501
 80184b4:	2300      	movs	r3, #0
 80184b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80184ba:	e24e      	b.n	801895a <UART_SetConfig+0x7ae>
 80184bc:	2304      	movs	r3, #4
 80184be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80184c2:	e24a      	b.n	801895a <UART_SetConfig+0x7ae>
 80184c4:	2308      	movs	r3, #8
 80184c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80184ca:	e246      	b.n	801895a <UART_SetConfig+0x7ae>
 80184cc:	2310      	movs	r3, #16
 80184ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80184d2:	e242      	b.n	801895a <UART_SetConfig+0x7ae>
 80184d4:	cfff69f3 	.word	0xcfff69f3
 80184d8:	58000c00 	.word	0x58000c00
 80184dc:	11fff4ff 	.word	0x11fff4ff
 80184e0:	40011000 	.word	0x40011000
 80184e4:	58024400 	.word	0x58024400
 80184e8:	40004400 	.word	0x40004400
 80184ec:	40004800 	.word	0x40004800
 80184f0:	40004c00 	.word	0x40004c00
 80184f4:	40005000 	.word	0x40005000
 80184f8:	2320      	movs	r3, #32
 80184fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80184fe:	e22c      	b.n	801895a <UART_SetConfig+0x7ae>
 8018500:	2340      	movs	r3, #64	@ 0x40
 8018502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018506:	e228      	b.n	801895a <UART_SetConfig+0x7ae>
 8018508:	2380      	movs	r3, #128	@ 0x80
 801850a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801850e:	e224      	b.n	801895a <UART_SetConfig+0x7ae>
 8018510:	697b      	ldr	r3, [r7, #20]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	4ab1      	ldr	r2, [pc, #708]	@ (80187dc <UART_SetConfig+0x630>)
 8018516:	4293      	cmp	r3, r2
 8018518:	d176      	bne.n	8018608 <UART_SetConfig+0x45c>
 801851a:	4bb1      	ldr	r3, [pc, #708]	@ (80187e0 <UART_SetConfig+0x634>)
 801851c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801851e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018522:	2b28      	cmp	r3, #40	@ 0x28
 8018524:	d86c      	bhi.n	8018600 <UART_SetConfig+0x454>
 8018526:	a201      	add	r2, pc, #4	@ (adr r2, 801852c <UART_SetConfig+0x380>)
 8018528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801852c:	080185d1 	.word	0x080185d1
 8018530:	08018601 	.word	0x08018601
 8018534:	08018601 	.word	0x08018601
 8018538:	08018601 	.word	0x08018601
 801853c:	08018601 	.word	0x08018601
 8018540:	08018601 	.word	0x08018601
 8018544:	08018601 	.word	0x08018601
 8018548:	08018601 	.word	0x08018601
 801854c:	080185d9 	.word	0x080185d9
 8018550:	08018601 	.word	0x08018601
 8018554:	08018601 	.word	0x08018601
 8018558:	08018601 	.word	0x08018601
 801855c:	08018601 	.word	0x08018601
 8018560:	08018601 	.word	0x08018601
 8018564:	08018601 	.word	0x08018601
 8018568:	08018601 	.word	0x08018601
 801856c:	080185e1 	.word	0x080185e1
 8018570:	08018601 	.word	0x08018601
 8018574:	08018601 	.word	0x08018601
 8018578:	08018601 	.word	0x08018601
 801857c:	08018601 	.word	0x08018601
 8018580:	08018601 	.word	0x08018601
 8018584:	08018601 	.word	0x08018601
 8018588:	08018601 	.word	0x08018601
 801858c:	080185e9 	.word	0x080185e9
 8018590:	08018601 	.word	0x08018601
 8018594:	08018601 	.word	0x08018601
 8018598:	08018601 	.word	0x08018601
 801859c:	08018601 	.word	0x08018601
 80185a0:	08018601 	.word	0x08018601
 80185a4:	08018601 	.word	0x08018601
 80185a8:	08018601 	.word	0x08018601
 80185ac:	080185f1 	.word	0x080185f1
 80185b0:	08018601 	.word	0x08018601
 80185b4:	08018601 	.word	0x08018601
 80185b8:	08018601 	.word	0x08018601
 80185bc:	08018601 	.word	0x08018601
 80185c0:	08018601 	.word	0x08018601
 80185c4:	08018601 	.word	0x08018601
 80185c8:	08018601 	.word	0x08018601
 80185cc:	080185f9 	.word	0x080185f9
 80185d0:	2301      	movs	r3, #1
 80185d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185d6:	e1c0      	b.n	801895a <UART_SetConfig+0x7ae>
 80185d8:	2304      	movs	r3, #4
 80185da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185de:	e1bc      	b.n	801895a <UART_SetConfig+0x7ae>
 80185e0:	2308      	movs	r3, #8
 80185e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185e6:	e1b8      	b.n	801895a <UART_SetConfig+0x7ae>
 80185e8:	2310      	movs	r3, #16
 80185ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185ee:	e1b4      	b.n	801895a <UART_SetConfig+0x7ae>
 80185f0:	2320      	movs	r3, #32
 80185f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185f6:	e1b0      	b.n	801895a <UART_SetConfig+0x7ae>
 80185f8:	2340      	movs	r3, #64	@ 0x40
 80185fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80185fe:	e1ac      	b.n	801895a <UART_SetConfig+0x7ae>
 8018600:	2380      	movs	r3, #128	@ 0x80
 8018602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018606:	e1a8      	b.n	801895a <UART_SetConfig+0x7ae>
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	4a75      	ldr	r2, [pc, #468]	@ (80187e4 <UART_SetConfig+0x638>)
 801860e:	4293      	cmp	r3, r2
 8018610:	d130      	bne.n	8018674 <UART_SetConfig+0x4c8>
 8018612:	4b73      	ldr	r3, [pc, #460]	@ (80187e0 <UART_SetConfig+0x634>)
 8018614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018616:	f003 0307 	and.w	r3, r3, #7
 801861a:	2b05      	cmp	r3, #5
 801861c:	d826      	bhi.n	801866c <UART_SetConfig+0x4c0>
 801861e:	a201      	add	r2, pc, #4	@ (adr r2, 8018624 <UART_SetConfig+0x478>)
 8018620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018624:	0801863d 	.word	0x0801863d
 8018628:	08018645 	.word	0x08018645
 801862c:	0801864d 	.word	0x0801864d
 8018630:	08018655 	.word	0x08018655
 8018634:	0801865d 	.word	0x0801865d
 8018638:	08018665 	.word	0x08018665
 801863c:	2300      	movs	r3, #0
 801863e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018642:	e18a      	b.n	801895a <UART_SetConfig+0x7ae>
 8018644:	2304      	movs	r3, #4
 8018646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801864a:	e186      	b.n	801895a <UART_SetConfig+0x7ae>
 801864c:	2308      	movs	r3, #8
 801864e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018652:	e182      	b.n	801895a <UART_SetConfig+0x7ae>
 8018654:	2310      	movs	r3, #16
 8018656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801865a:	e17e      	b.n	801895a <UART_SetConfig+0x7ae>
 801865c:	2320      	movs	r3, #32
 801865e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018662:	e17a      	b.n	801895a <UART_SetConfig+0x7ae>
 8018664:	2340      	movs	r3, #64	@ 0x40
 8018666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801866a:	e176      	b.n	801895a <UART_SetConfig+0x7ae>
 801866c:	2380      	movs	r3, #128	@ 0x80
 801866e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018672:	e172      	b.n	801895a <UART_SetConfig+0x7ae>
 8018674:	697b      	ldr	r3, [r7, #20]
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	4a5b      	ldr	r2, [pc, #364]	@ (80187e8 <UART_SetConfig+0x63c>)
 801867a:	4293      	cmp	r3, r2
 801867c:	d130      	bne.n	80186e0 <UART_SetConfig+0x534>
 801867e:	4b58      	ldr	r3, [pc, #352]	@ (80187e0 <UART_SetConfig+0x634>)
 8018680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018682:	f003 0307 	and.w	r3, r3, #7
 8018686:	2b05      	cmp	r3, #5
 8018688:	d826      	bhi.n	80186d8 <UART_SetConfig+0x52c>
 801868a:	a201      	add	r2, pc, #4	@ (adr r2, 8018690 <UART_SetConfig+0x4e4>)
 801868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018690:	080186a9 	.word	0x080186a9
 8018694:	080186b1 	.word	0x080186b1
 8018698:	080186b9 	.word	0x080186b9
 801869c:	080186c1 	.word	0x080186c1
 80186a0:	080186c9 	.word	0x080186c9
 80186a4:	080186d1 	.word	0x080186d1
 80186a8:	2300      	movs	r3, #0
 80186aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186ae:	e154      	b.n	801895a <UART_SetConfig+0x7ae>
 80186b0:	2304      	movs	r3, #4
 80186b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186b6:	e150      	b.n	801895a <UART_SetConfig+0x7ae>
 80186b8:	2308      	movs	r3, #8
 80186ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186be:	e14c      	b.n	801895a <UART_SetConfig+0x7ae>
 80186c0:	2310      	movs	r3, #16
 80186c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186c6:	e148      	b.n	801895a <UART_SetConfig+0x7ae>
 80186c8:	2320      	movs	r3, #32
 80186ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186ce:	e144      	b.n	801895a <UART_SetConfig+0x7ae>
 80186d0:	2340      	movs	r3, #64	@ 0x40
 80186d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186d6:	e140      	b.n	801895a <UART_SetConfig+0x7ae>
 80186d8:	2380      	movs	r3, #128	@ 0x80
 80186da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80186de:	e13c      	b.n	801895a <UART_SetConfig+0x7ae>
 80186e0:	697b      	ldr	r3, [r7, #20]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	4a41      	ldr	r2, [pc, #260]	@ (80187ec <UART_SetConfig+0x640>)
 80186e6:	4293      	cmp	r3, r2
 80186e8:	f040 8082 	bne.w	80187f0 <UART_SetConfig+0x644>
 80186ec:	4b3c      	ldr	r3, [pc, #240]	@ (80187e0 <UART_SetConfig+0x634>)
 80186ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80186f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80186f4:	2b28      	cmp	r3, #40	@ 0x28
 80186f6:	d86d      	bhi.n	80187d4 <UART_SetConfig+0x628>
 80186f8:	a201      	add	r2, pc, #4	@ (adr r2, 8018700 <UART_SetConfig+0x554>)
 80186fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186fe:	bf00      	nop
 8018700:	080187a5 	.word	0x080187a5
 8018704:	080187d5 	.word	0x080187d5
 8018708:	080187d5 	.word	0x080187d5
 801870c:	080187d5 	.word	0x080187d5
 8018710:	080187d5 	.word	0x080187d5
 8018714:	080187d5 	.word	0x080187d5
 8018718:	080187d5 	.word	0x080187d5
 801871c:	080187d5 	.word	0x080187d5
 8018720:	080187ad 	.word	0x080187ad
 8018724:	080187d5 	.word	0x080187d5
 8018728:	080187d5 	.word	0x080187d5
 801872c:	080187d5 	.word	0x080187d5
 8018730:	080187d5 	.word	0x080187d5
 8018734:	080187d5 	.word	0x080187d5
 8018738:	080187d5 	.word	0x080187d5
 801873c:	080187d5 	.word	0x080187d5
 8018740:	080187b5 	.word	0x080187b5
 8018744:	080187d5 	.word	0x080187d5
 8018748:	080187d5 	.word	0x080187d5
 801874c:	080187d5 	.word	0x080187d5
 8018750:	080187d5 	.word	0x080187d5
 8018754:	080187d5 	.word	0x080187d5
 8018758:	080187d5 	.word	0x080187d5
 801875c:	080187d5 	.word	0x080187d5
 8018760:	080187bd 	.word	0x080187bd
 8018764:	080187d5 	.word	0x080187d5
 8018768:	080187d5 	.word	0x080187d5
 801876c:	080187d5 	.word	0x080187d5
 8018770:	080187d5 	.word	0x080187d5
 8018774:	080187d5 	.word	0x080187d5
 8018778:	080187d5 	.word	0x080187d5
 801877c:	080187d5 	.word	0x080187d5
 8018780:	080187c5 	.word	0x080187c5
 8018784:	080187d5 	.word	0x080187d5
 8018788:	080187d5 	.word	0x080187d5
 801878c:	080187d5 	.word	0x080187d5
 8018790:	080187d5 	.word	0x080187d5
 8018794:	080187d5 	.word	0x080187d5
 8018798:	080187d5 	.word	0x080187d5
 801879c:	080187d5 	.word	0x080187d5
 80187a0:	080187cd 	.word	0x080187cd
 80187a4:	2301      	movs	r3, #1
 80187a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187aa:	e0d6      	b.n	801895a <UART_SetConfig+0x7ae>
 80187ac:	2304      	movs	r3, #4
 80187ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187b2:	e0d2      	b.n	801895a <UART_SetConfig+0x7ae>
 80187b4:	2308      	movs	r3, #8
 80187b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187ba:	e0ce      	b.n	801895a <UART_SetConfig+0x7ae>
 80187bc:	2310      	movs	r3, #16
 80187be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187c2:	e0ca      	b.n	801895a <UART_SetConfig+0x7ae>
 80187c4:	2320      	movs	r3, #32
 80187c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187ca:	e0c6      	b.n	801895a <UART_SetConfig+0x7ae>
 80187cc:	2340      	movs	r3, #64	@ 0x40
 80187ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187d2:	e0c2      	b.n	801895a <UART_SetConfig+0x7ae>
 80187d4:	2380      	movs	r3, #128	@ 0x80
 80187d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80187da:	e0be      	b.n	801895a <UART_SetConfig+0x7ae>
 80187dc:	40011400 	.word	0x40011400
 80187e0:	58024400 	.word	0x58024400
 80187e4:	40007800 	.word	0x40007800
 80187e8:	40007c00 	.word	0x40007c00
 80187ec:	40011800 	.word	0x40011800
 80187f0:	697b      	ldr	r3, [r7, #20]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	4aad      	ldr	r2, [pc, #692]	@ (8018aac <UART_SetConfig+0x900>)
 80187f6:	4293      	cmp	r3, r2
 80187f8:	d176      	bne.n	80188e8 <UART_SetConfig+0x73c>
 80187fa:	4bad      	ldr	r3, [pc, #692]	@ (8018ab0 <UART_SetConfig+0x904>)
 80187fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80187fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018802:	2b28      	cmp	r3, #40	@ 0x28
 8018804:	d86c      	bhi.n	80188e0 <UART_SetConfig+0x734>
 8018806:	a201      	add	r2, pc, #4	@ (adr r2, 801880c <UART_SetConfig+0x660>)
 8018808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801880c:	080188b1 	.word	0x080188b1
 8018810:	080188e1 	.word	0x080188e1
 8018814:	080188e1 	.word	0x080188e1
 8018818:	080188e1 	.word	0x080188e1
 801881c:	080188e1 	.word	0x080188e1
 8018820:	080188e1 	.word	0x080188e1
 8018824:	080188e1 	.word	0x080188e1
 8018828:	080188e1 	.word	0x080188e1
 801882c:	080188b9 	.word	0x080188b9
 8018830:	080188e1 	.word	0x080188e1
 8018834:	080188e1 	.word	0x080188e1
 8018838:	080188e1 	.word	0x080188e1
 801883c:	080188e1 	.word	0x080188e1
 8018840:	080188e1 	.word	0x080188e1
 8018844:	080188e1 	.word	0x080188e1
 8018848:	080188e1 	.word	0x080188e1
 801884c:	080188c1 	.word	0x080188c1
 8018850:	080188e1 	.word	0x080188e1
 8018854:	080188e1 	.word	0x080188e1
 8018858:	080188e1 	.word	0x080188e1
 801885c:	080188e1 	.word	0x080188e1
 8018860:	080188e1 	.word	0x080188e1
 8018864:	080188e1 	.word	0x080188e1
 8018868:	080188e1 	.word	0x080188e1
 801886c:	080188c9 	.word	0x080188c9
 8018870:	080188e1 	.word	0x080188e1
 8018874:	080188e1 	.word	0x080188e1
 8018878:	080188e1 	.word	0x080188e1
 801887c:	080188e1 	.word	0x080188e1
 8018880:	080188e1 	.word	0x080188e1
 8018884:	080188e1 	.word	0x080188e1
 8018888:	080188e1 	.word	0x080188e1
 801888c:	080188d1 	.word	0x080188d1
 8018890:	080188e1 	.word	0x080188e1
 8018894:	080188e1 	.word	0x080188e1
 8018898:	080188e1 	.word	0x080188e1
 801889c:	080188e1 	.word	0x080188e1
 80188a0:	080188e1 	.word	0x080188e1
 80188a4:	080188e1 	.word	0x080188e1
 80188a8:	080188e1 	.word	0x080188e1
 80188ac:	080188d9 	.word	0x080188d9
 80188b0:	2301      	movs	r3, #1
 80188b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188b6:	e050      	b.n	801895a <UART_SetConfig+0x7ae>
 80188b8:	2304      	movs	r3, #4
 80188ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188be:	e04c      	b.n	801895a <UART_SetConfig+0x7ae>
 80188c0:	2308      	movs	r3, #8
 80188c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188c6:	e048      	b.n	801895a <UART_SetConfig+0x7ae>
 80188c8:	2310      	movs	r3, #16
 80188ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188ce:	e044      	b.n	801895a <UART_SetConfig+0x7ae>
 80188d0:	2320      	movs	r3, #32
 80188d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188d6:	e040      	b.n	801895a <UART_SetConfig+0x7ae>
 80188d8:	2340      	movs	r3, #64	@ 0x40
 80188da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188de:	e03c      	b.n	801895a <UART_SetConfig+0x7ae>
 80188e0:	2380      	movs	r3, #128	@ 0x80
 80188e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80188e6:	e038      	b.n	801895a <UART_SetConfig+0x7ae>
 80188e8:	697b      	ldr	r3, [r7, #20]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	4a71      	ldr	r2, [pc, #452]	@ (8018ab4 <UART_SetConfig+0x908>)
 80188ee:	4293      	cmp	r3, r2
 80188f0:	d130      	bne.n	8018954 <UART_SetConfig+0x7a8>
 80188f2:	4b6f      	ldr	r3, [pc, #444]	@ (8018ab0 <UART_SetConfig+0x904>)
 80188f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80188f6:	f003 0307 	and.w	r3, r3, #7
 80188fa:	2b05      	cmp	r3, #5
 80188fc:	d826      	bhi.n	801894c <UART_SetConfig+0x7a0>
 80188fe:	a201      	add	r2, pc, #4	@ (adr r2, 8018904 <UART_SetConfig+0x758>)
 8018900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018904:	0801891d 	.word	0x0801891d
 8018908:	08018925 	.word	0x08018925
 801890c:	0801892d 	.word	0x0801892d
 8018910:	08018935 	.word	0x08018935
 8018914:	0801893d 	.word	0x0801893d
 8018918:	08018945 	.word	0x08018945
 801891c:	2302      	movs	r3, #2
 801891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018922:	e01a      	b.n	801895a <UART_SetConfig+0x7ae>
 8018924:	2304      	movs	r3, #4
 8018926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801892a:	e016      	b.n	801895a <UART_SetConfig+0x7ae>
 801892c:	2308      	movs	r3, #8
 801892e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018932:	e012      	b.n	801895a <UART_SetConfig+0x7ae>
 8018934:	2310      	movs	r3, #16
 8018936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801893a:	e00e      	b.n	801895a <UART_SetConfig+0x7ae>
 801893c:	2320      	movs	r3, #32
 801893e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018942:	e00a      	b.n	801895a <UART_SetConfig+0x7ae>
 8018944:	2340      	movs	r3, #64	@ 0x40
 8018946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801894a:	e006      	b.n	801895a <UART_SetConfig+0x7ae>
 801894c:	2380      	movs	r3, #128	@ 0x80
 801894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8018952:	e002      	b.n	801895a <UART_SetConfig+0x7ae>
 8018954:	2380      	movs	r3, #128	@ 0x80
 8018956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801895a:	697b      	ldr	r3, [r7, #20]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	4a55      	ldr	r2, [pc, #340]	@ (8018ab4 <UART_SetConfig+0x908>)
 8018960:	4293      	cmp	r3, r2
 8018962:	f040 80f8 	bne.w	8018b56 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018966:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801896a:	2b20      	cmp	r3, #32
 801896c:	dc46      	bgt.n	80189fc <UART_SetConfig+0x850>
 801896e:	2b02      	cmp	r3, #2
 8018970:	db75      	blt.n	8018a5e <UART_SetConfig+0x8b2>
 8018972:	3b02      	subs	r3, #2
 8018974:	2b1e      	cmp	r3, #30
 8018976:	d872      	bhi.n	8018a5e <UART_SetConfig+0x8b2>
 8018978:	a201      	add	r2, pc, #4	@ (adr r2, 8018980 <UART_SetConfig+0x7d4>)
 801897a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801897e:	bf00      	nop
 8018980:	08018a03 	.word	0x08018a03
 8018984:	08018a5f 	.word	0x08018a5f
 8018988:	08018a0b 	.word	0x08018a0b
 801898c:	08018a5f 	.word	0x08018a5f
 8018990:	08018a5f 	.word	0x08018a5f
 8018994:	08018a5f 	.word	0x08018a5f
 8018998:	08018a1b 	.word	0x08018a1b
 801899c:	08018a5f 	.word	0x08018a5f
 80189a0:	08018a5f 	.word	0x08018a5f
 80189a4:	08018a5f 	.word	0x08018a5f
 80189a8:	08018a5f 	.word	0x08018a5f
 80189ac:	08018a5f 	.word	0x08018a5f
 80189b0:	08018a5f 	.word	0x08018a5f
 80189b4:	08018a5f 	.word	0x08018a5f
 80189b8:	08018a2b 	.word	0x08018a2b
 80189bc:	08018a5f 	.word	0x08018a5f
 80189c0:	08018a5f 	.word	0x08018a5f
 80189c4:	08018a5f 	.word	0x08018a5f
 80189c8:	08018a5f 	.word	0x08018a5f
 80189cc:	08018a5f 	.word	0x08018a5f
 80189d0:	08018a5f 	.word	0x08018a5f
 80189d4:	08018a5f 	.word	0x08018a5f
 80189d8:	08018a5f 	.word	0x08018a5f
 80189dc:	08018a5f 	.word	0x08018a5f
 80189e0:	08018a5f 	.word	0x08018a5f
 80189e4:	08018a5f 	.word	0x08018a5f
 80189e8:	08018a5f 	.word	0x08018a5f
 80189ec:	08018a5f 	.word	0x08018a5f
 80189f0:	08018a5f 	.word	0x08018a5f
 80189f4:	08018a5f 	.word	0x08018a5f
 80189f8:	08018a51 	.word	0x08018a51
 80189fc:	2b40      	cmp	r3, #64	@ 0x40
 80189fe:	d02a      	beq.n	8018a56 <UART_SetConfig+0x8aa>
 8018a00:	e02d      	b.n	8018a5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8018a02:	f7fa fda1 	bl	8013548 <HAL_RCCEx_GetD3PCLK1Freq>
 8018a06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018a08:	e02f      	b.n	8018a6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7fa fdb0 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a18:	e027      	b.n	8018a6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018a1a:	f107 0318 	add.w	r3, r7, #24
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f7fa fefc 	bl	801381c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018a24:	69fb      	ldr	r3, [r7, #28]
 8018a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a28:	e01f      	b.n	8018a6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018a2a:	4b21      	ldr	r3, [pc, #132]	@ (8018ab0 <UART_SetConfig+0x904>)
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	f003 0320 	and.w	r3, r3, #32
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d009      	beq.n	8018a4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018a36:	4b1e      	ldr	r3, [pc, #120]	@ (8018ab0 <UART_SetConfig+0x904>)
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	08db      	lsrs	r3, r3, #3
 8018a3c:	f003 0303 	and.w	r3, r3, #3
 8018a40:	4a1d      	ldr	r2, [pc, #116]	@ (8018ab8 <UART_SetConfig+0x90c>)
 8018a42:	fa22 f303 	lsr.w	r3, r2, r3
 8018a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018a48:	e00f      	b.n	8018a6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8018a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8018ab8 <UART_SetConfig+0x90c>)
 8018a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a4e:	e00c      	b.n	8018a6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018a50:	4b1a      	ldr	r3, [pc, #104]	@ (8018abc <UART_SetConfig+0x910>)
 8018a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a54:	e009      	b.n	8018a6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018a56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018a5c:	e005      	b.n	8018a6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8018a5e:	2300      	movs	r3, #0
 8018a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018a62:	2301      	movs	r3, #1
 8018a64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018a68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8018a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	f000 81ee 	beq.w	8018e4e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018a72:	697b      	ldr	r3, [r7, #20]
 8018a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a76:	4a12      	ldr	r2, [pc, #72]	@ (8018ac0 <UART_SetConfig+0x914>)
 8018a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018a7c:	461a      	mov	r2, r3
 8018a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a80:	fbb3 f3f2 	udiv	r3, r3, r2
 8018a84:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018a86:	697b      	ldr	r3, [r7, #20]
 8018a88:	685a      	ldr	r2, [r3, #4]
 8018a8a:	4613      	mov	r3, r2
 8018a8c:	005b      	lsls	r3, r3, #1
 8018a8e:	4413      	add	r3, r2
 8018a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018a92:	429a      	cmp	r2, r3
 8018a94:	d305      	bcc.n	8018aa2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018a96:	697b      	ldr	r3, [r7, #20]
 8018a98:	685b      	ldr	r3, [r3, #4]
 8018a9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018a9e:	429a      	cmp	r2, r3
 8018aa0:	d910      	bls.n	8018ac4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018aa8:	e1d1      	b.n	8018e4e <UART_SetConfig+0xca2>
 8018aaa:	bf00      	nop
 8018aac:	40011c00 	.word	0x40011c00
 8018ab0:	58024400 	.word	0x58024400
 8018ab4:	58000c00 	.word	0x58000c00
 8018ab8:	03d09000 	.word	0x03d09000
 8018abc:	003d0900 	.word	0x003d0900
 8018ac0:	0801e394 	.word	0x0801e394
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ac6:	2200      	movs	r2, #0
 8018ac8:	60bb      	str	r3, [r7, #8]
 8018aca:	60fa      	str	r2, [r7, #12]
 8018acc:	697b      	ldr	r3, [r7, #20]
 8018ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ad0:	4ac0      	ldr	r2, [pc, #768]	@ (8018dd4 <UART_SetConfig+0xc28>)
 8018ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018ad6:	b29b      	uxth	r3, r3
 8018ad8:	2200      	movs	r2, #0
 8018ada:	603b      	str	r3, [r7, #0]
 8018adc:	607a      	str	r2, [r7, #4]
 8018ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8018ae6:	f7e7 fc63 	bl	80003b0 <__aeabi_uldivmod>
 8018aea:	4602      	mov	r2, r0
 8018aec:	460b      	mov	r3, r1
 8018aee:	4610      	mov	r0, r2
 8018af0:	4619      	mov	r1, r3
 8018af2:	f04f 0200 	mov.w	r2, #0
 8018af6:	f04f 0300 	mov.w	r3, #0
 8018afa:	020b      	lsls	r3, r1, #8
 8018afc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8018b00:	0202      	lsls	r2, r0, #8
 8018b02:	6979      	ldr	r1, [r7, #20]
 8018b04:	6849      	ldr	r1, [r1, #4]
 8018b06:	0849      	lsrs	r1, r1, #1
 8018b08:	2000      	movs	r0, #0
 8018b0a:	460c      	mov	r4, r1
 8018b0c:	4605      	mov	r5, r0
 8018b0e:	eb12 0804 	adds.w	r8, r2, r4
 8018b12:	eb43 0905 	adc.w	r9, r3, r5
 8018b16:	697b      	ldr	r3, [r7, #20]
 8018b18:	685b      	ldr	r3, [r3, #4]
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	469a      	mov	sl, r3
 8018b1e:	4693      	mov	fp, r2
 8018b20:	4652      	mov	r2, sl
 8018b22:	465b      	mov	r3, fp
 8018b24:	4640      	mov	r0, r8
 8018b26:	4649      	mov	r1, r9
 8018b28:	f7e7 fc42 	bl	80003b0 <__aeabi_uldivmod>
 8018b2c:	4602      	mov	r2, r0
 8018b2e:	460b      	mov	r3, r1
 8018b30:	4613      	mov	r3, r2
 8018b32:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018b3a:	d308      	bcc.n	8018b4e <UART_SetConfig+0x9a2>
 8018b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018b42:	d204      	bcs.n	8018b4e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8018b44:	697b      	ldr	r3, [r7, #20]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018b4a:	60da      	str	r2, [r3, #12]
 8018b4c:	e17f      	b.n	8018e4e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8018b4e:	2301      	movs	r3, #1
 8018b50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018b54:	e17b      	b.n	8018e4e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018b56:	697b      	ldr	r3, [r7, #20]
 8018b58:	69db      	ldr	r3, [r3, #28]
 8018b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018b5e:	f040 80bd 	bne.w	8018cdc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8018b62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018b66:	2b20      	cmp	r3, #32
 8018b68:	dc48      	bgt.n	8018bfc <UART_SetConfig+0xa50>
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	db7b      	blt.n	8018c66 <UART_SetConfig+0xaba>
 8018b6e:	2b20      	cmp	r3, #32
 8018b70:	d879      	bhi.n	8018c66 <UART_SetConfig+0xaba>
 8018b72:	a201      	add	r2, pc, #4	@ (adr r2, 8018b78 <UART_SetConfig+0x9cc>)
 8018b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b78:	08018c03 	.word	0x08018c03
 8018b7c:	08018c0b 	.word	0x08018c0b
 8018b80:	08018c67 	.word	0x08018c67
 8018b84:	08018c67 	.word	0x08018c67
 8018b88:	08018c13 	.word	0x08018c13
 8018b8c:	08018c67 	.word	0x08018c67
 8018b90:	08018c67 	.word	0x08018c67
 8018b94:	08018c67 	.word	0x08018c67
 8018b98:	08018c23 	.word	0x08018c23
 8018b9c:	08018c67 	.word	0x08018c67
 8018ba0:	08018c67 	.word	0x08018c67
 8018ba4:	08018c67 	.word	0x08018c67
 8018ba8:	08018c67 	.word	0x08018c67
 8018bac:	08018c67 	.word	0x08018c67
 8018bb0:	08018c67 	.word	0x08018c67
 8018bb4:	08018c67 	.word	0x08018c67
 8018bb8:	08018c33 	.word	0x08018c33
 8018bbc:	08018c67 	.word	0x08018c67
 8018bc0:	08018c67 	.word	0x08018c67
 8018bc4:	08018c67 	.word	0x08018c67
 8018bc8:	08018c67 	.word	0x08018c67
 8018bcc:	08018c67 	.word	0x08018c67
 8018bd0:	08018c67 	.word	0x08018c67
 8018bd4:	08018c67 	.word	0x08018c67
 8018bd8:	08018c67 	.word	0x08018c67
 8018bdc:	08018c67 	.word	0x08018c67
 8018be0:	08018c67 	.word	0x08018c67
 8018be4:	08018c67 	.word	0x08018c67
 8018be8:	08018c67 	.word	0x08018c67
 8018bec:	08018c67 	.word	0x08018c67
 8018bf0:	08018c67 	.word	0x08018c67
 8018bf4:	08018c67 	.word	0x08018c67
 8018bf8:	08018c59 	.word	0x08018c59
 8018bfc:	2b40      	cmp	r3, #64	@ 0x40
 8018bfe:	d02e      	beq.n	8018c5e <UART_SetConfig+0xab2>
 8018c00:	e031      	b.n	8018c66 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018c02:	f7f8 fe03 	bl	801180c <HAL_RCC_GetPCLK1Freq>
 8018c06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018c08:	e033      	b.n	8018c72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018c0a:	f7f8 fe15 	bl	8011838 <HAL_RCC_GetPCLK2Freq>
 8018c0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018c10:	e02f      	b.n	8018c72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018c16:	4618      	mov	r0, r3
 8018c18:	f7fa fcac 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c20:	e027      	b.n	8018c72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018c22:	f107 0318 	add.w	r3, r7, #24
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7fa fdf8 	bl	801381c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018c2c:	69fb      	ldr	r3, [r7, #28]
 8018c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c30:	e01f      	b.n	8018c72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018c32:	4b69      	ldr	r3, [pc, #420]	@ (8018dd8 <UART_SetConfig+0xc2c>)
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	f003 0320 	and.w	r3, r3, #32
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d009      	beq.n	8018c52 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018c3e:	4b66      	ldr	r3, [pc, #408]	@ (8018dd8 <UART_SetConfig+0xc2c>)
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	08db      	lsrs	r3, r3, #3
 8018c44:	f003 0303 	and.w	r3, r3, #3
 8018c48:	4a64      	ldr	r2, [pc, #400]	@ (8018ddc <UART_SetConfig+0xc30>)
 8018c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8018c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018c50:	e00f      	b.n	8018c72 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8018c52:	4b62      	ldr	r3, [pc, #392]	@ (8018ddc <UART_SetConfig+0xc30>)
 8018c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c56:	e00c      	b.n	8018c72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018c58:	4b61      	ldr	r3, [pc, #388]	@ (8018de0 <UART_SetConfig+0xc34>)
 8018c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c5c:	e009      	b.n	8018c72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018c64:	e005      	b.n	8018c72 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8018c66:	2300      	movs	r3, #0
 8018c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018c6a:	2301      	movs	r3, #1
 8018c6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	f000 80ea 	beq.w	8018e4e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018c7a:	697b      	ldr	r3, [r7, #20]
 8018c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c7e:	4a55      	ldr	r2, [pc, #340]	@ (8018dd4 <UART_SetConfig+0xc28>)
 8018c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018c84:	461a      	mov	r2, r3
 8018c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c8c:	005a      	lsls	r2, r3, #1
 8018c8e:	697b      	ldr	r3, [r7, #20]
 8018c90:	685b      	ldr	r3, [r3, #4]
 8018c92:	085b      	lsrs	r3, r3, #1
 8018c94:	441a      	add	r2, r3
 8018c96:	697b      	ldr	r3, [r7, #20]
 8018c98:	685b      	ldr	r3, [r3, #4]
 8018c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ca2:	2b0f      	cmp	r3, #15
 8018ca4:	d916      	bls.n	8018cd4 <UART_SetConfig+0xb28>
 8018ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018cac:	d212      	bcs.n	8018cd4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018cb0:	b29b      	uxth	r3, r3
 8018cb2:	f023 030f 	bic.w	r3, r3, #15
 8018cb6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018cba:	085b      	lsrs	r3, r3, #1
 8018cbc:	b29b      	uxth	r3, r3
 8018cbe:	f003 0307 	and.w	r3, r3, #7
 8018cc2:	b29a      	uxth	r2, r3
 8018cc4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018cc6:	4313      	orrs	r3, r2
 8018cc8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8018cca:	697b      	ldr	r3, [r7, #20]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8018cd0:	60da      	str	r2, [r3, #12]
 8018cd2:	e0bc      	b.n	8018e4e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8018cd4:	2301      	movs	r3, #1
 8018cd6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8018cda:	e0b8      	b.n	8018e4e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018cdc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018ce0:	2b20      	cmp	r3, #32
 8018ce2:	dc4b      	bgt.n	8018d7c <UART_SetConfig+0xbd0>
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	f2c0 8087 	blt.w	8018df8 <UART_SetConfig+0xc4c>
 8018cea:	2b20      	cmp	r3, #32
 8018cec:	f200 8084 	bhi.w	8018df8 <UART_SetConfig+0xc4c>
 8018cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8018cf8 <UART_SetConfig+0xb4c>)
 8018cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018cf6:	bf00      	nop
 8018cf8:	08018d83 	.word	0x08018d83
 8018cfc:	08018d8b 	.word	0x08018d8b
 8018d00:	08018df9 	.word	0x08018df9
 8018d04:	08018df9 	.word	0x08018df9
 8018d08:	08018d93 	.word	0x08018d93
 8018d0c:	08018df9 	.word	0x08018df9
 8018d10:	08018df9 	.word	0x08018df9
 8018d14:	08018df9 	.word	0x08018df9
 8018d18:	08018da3 	.word	0x08018da3
 8018d1c:	08018df9 	.word	0x08018df9
 8018d20:	08018df9 	.word	0x08018df9
 8018d24:	08018df9 	.word	0x08018df9
 8018d28:	08018df9 	.word	0x08018df9
 8018d2c:	08018df9 	.word	0x08018df9
 8018d30:	08018df9 	.word	0x08018df9
 8018d34:	08018df9 	.word	0x08018df9
 8018d38:	08018db3 	.word	0x08018db3
 8018d3c:	08018df9 	.word	0x08018df9
 8018d40:	08018df9 	.word	0x08018df9
 8018d44:	08018df9 	.word	0x08018df9
 8018d48:	08018df9 	.word	0x08018df9
 8018d4c:	08018df9 	.word	0x08018df9
 8018d50:	08018df9 	.word	0x08018df9
 8018d54:	08018df9 	.word	0x08018df9
 8018d58:	08018df9 	.word	0x08018df9
 8018d5c:	08018df9 	.word	0x08018df9
 8018d60:	08018df9 	.word	0x08018df9
 8018d64:	08018df9 	.word	0x08018df9
 8018d68:	08018df9 	.word	0x08018df9
 8018d6c:	08018df9 	.word	0x08018df9
 8018d70:	08018df9 	.word	0x08018df9
 8018d74:	08018df9 	.word	0x08018df9
 8018d78:	08018deb 	.word	0x08018deb
 8018d7c:	2b40      	cmp	r3, #64	@ 0x40
 8018d7e:	d037      	beq.n	8018df0 <UART_SetConfig+0xc44>
 8018d80:	e03a      	b.n	8018df8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018d82:	f7f8 fd43 	bl	801180c <HAL_RCC_GetPCLK1Freq>
 8018d86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018d88:	e03c      	b.n	8018e04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018d8a:	f7f8 fd55 	bl	8011838 <HAL_RCC_GetPCLK2Freq>
 8018d8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8018d90:	e038      	b.n	8018e04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018d96:	4618      	mov	r0, r3
 8018d98:	f7fa fbec 	bl	8013574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8018d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018da0:	e030      	b.n	8018e04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018da2:	f107 0318 	add.w	r3, r7, #24
 8018da6:	4618      	mov	r0, r3
 8018da8:	f7fa fd38 	bl	801381c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8018dac:	69fb      	ldr	r3, [r7, #28]
 8018dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018db0:	e028      	b.n	8018e04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018db2:	4b09      	ldr	r3, [pc, #36]	@ (8018dd8 <UART_SetConfig+0xc2c>)
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	f003 0320 	and.w	r3, r3, #32
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d012      	beq.n	8018de4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018dbe:	4b06      	ldr	r3, [pc, #24]	@ (8018dd8 <UART_SetConfig+0xc2c>)
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	08db      	lsrs	r3, r3, #3
 8018dc4:	f003 0303 	and.w	r3, r3, #3
 8018dc8:	4a04      	ldr	r2, [pc, #16]	@ (8018ddc <UART_SetConfig+0xc30>)
 8018dca:	fa22 f303 	lsr.w	r3, r2, r3
 8018dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018dd0:	e018      	b.n	8018e04 <UART_SetConfig+0xc58>
 8018dd2:	bf00      	nop
 8018dd4:	0801e394 	.word	0x0801e394
 8018dd8:	58024400 	.word	0x58024400
 8018ddc:	03d09000 	.word	0x03d09000
 8018de0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8018de4:	4b24      	ldr	r3, [pc, #144]	@ (8018e78 <UART_SetConfig+0xccc>)
 8018de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018de8:	e00c      	b.n	8018e04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018dea:	4b24      	ldr	r3, [pc, #144]	@ (8018e7c <UART_SetConfig+0xcd0>)
 8018dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018dee:	e009      	b.n	8018e04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018df0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8018df6:	e005      	b.n	8018e04 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8018dfc:	2301      	movs	r3, #1
 8018dfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8018e02:	bf00      	nop
    }

    if (pclk != 0U)
 8018e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d021      	beq.n	8018e4e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018e0a:	697b      	ldr	r3, [r7, #20]
 8018e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8018e80 <UART_SetConfig+0xcd4>)
 8018e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018e14:	461a      	mov	r2, r3
 8018e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e18:	fbb3 f2f2 	udiv	r2, r3, r2
 8018e1c:	697b      	ldr	r3, [r7, #20]
 8018e1e:	685b      	ldr	r3, [r3, #4]
 8018e20:	085b      	lsrs	r3, r3, #1
 8018e22:	441a      	add	r2, r3
 8018e24:	697b      	ldr	r3, [r7, #20]
 8018e26:	685b      	ldr	r3, [r3, #4]
 8018e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e30:	2b0f      	cmp	r3, #15
 8018e32:	d909      	bls.n	8018e48 <UART_SetConfig+0xc9c>
 8018e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018e3a:	d205      	bcs.n	8018e48 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e3e:	b29a      	uxth	r2, r3
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	60da      	str	r2, [r3, #12]
 8018e46:	e002      	b.n	8018e4e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8018e48:	2301      	movs	r3, #1
 8018e4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018e4e:	697b      	ldr	r3, [r7, #20]
 8018e50:	2201      	movs	r2, #1
 8018e52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8018e56:	697b      	ldr	r3, [r7, #20]
 8018e58:	2201      	movs	r2, #1
 8018e5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018e5e:	697b      	ldr	r3, [r7, #20]
 8018e60:	2200      	movs	r2, #0
 8018e62:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8018e64:	697b      	ldr	r3, [r7, #20]
 8018e66:	2200      	movs	r2, #0
 8018e68:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8018e6a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8018e6e:	4618      	mov	r0, r3
 8018e70:	3748      	adds	r7, #72	@ 0x48
 8018e72:	46bd      	mov	sp, r7
 8018e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018e78:	03d09000 	.word	0x03d09000
 8018e7c:	003d0900 	.word	0x003d0900
 8018e80:	0801e394 	.word	0x0801e394

08018e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018e84:	b480      	push	{r7}
 8018e86:	b083      	sub	sp, #12
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e90:	f003 0308 	and.w	r3, r3, #8
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d00a      	beq.n	8018eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	685b      	ldr	r3, [r3, #4]
 8018e9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	430a      	orrs	r2, r1
 8018eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018eb2:	f003 0301 	and.w	r3, r3, #1
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d00a      	beq.n	8018ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	685b      	ldr	r3, [r3, #4]
 8018ec0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	430a      	orrs	r2, r1
 8018ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ed4:	f003 0302 	and.w	r3, r3, #2
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d00a      	beq.n	8018ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	685b      	ldr	r3, [r3, #4]
 8018ee2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	430a      	orrs	r2, r1
 8018ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ef6:	f003 0304 	and.w	r3, r3, #4
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d00a      	beq.n	8018f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	685b      	ldr	r3, [r3, #4]
 8018f04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	430a      	orrs	r2, r1
 8018f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f18:	f003 0310 	and.w	r3, r3, #16
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d00a      	beq.n	8018f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	689b      	ldr	r3, [r3, #8]
 8018f26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	430a      	orrs	r2, r1
 8018f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f3a:	f003 0320 	and.w	r3, r3, #32
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d00a      	beq.n	8018f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	689b      	ldr	r3, [r3, #8]
 8018f48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	430a      	orrs	r2, r1
 8018f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d01a      	beq.n	8018f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	685b      	ldr	r3, [r3, #4]
 8018f6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	430a      	orrs	r2, r1
 8018f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018f82:	d10a      	bne.n	8018f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	685b      	ldr	r3, [r3, #4]
 8018f8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	430a      	orrs	r2, r1
 8018f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d00a      	beq.n	8018fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	685b      	ldr	r3, [r3, #4]
 8018fac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	430a      	orrs	r2, r1
 8018fba:	605a      	str	r2, [r3, #4]
  }
}
 8018fbc:	bf00      	nop
 8018fbe:	370c      	adds	r7, #12
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc6:	4770      	bx	lr

08018fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b098      	sub	sp, #96	@ 0x60
 8018fcc:	af02      	add	r7, sp, #8
 8018fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018fd8:	f7ef fe88 	bl	8008cec <HAL_GetTick>
 8018fdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	f003 0308 	and.w	r3, r3, #8
 8018fe8:	2b08      	cmp	r3, #8
 8018fea:	d12f      	bne.n	801904c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018fec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8018ff0:	9300      	str	r3, [sp, #0]
 8018ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	f000 f88e 	bl	801911c <UART_WaitOnFlagUntilTimeout>
 8019000:	4603      	mov	r3, r0
 8019002:	2b00      	cmp	r3, #0
 8019004:	d022      	beq.n	801904c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801900c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801900e:	e853 3f00 	ldrex	r3, [r3]
 8019012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801901a:	653b      	str	r3, [r7, #80]	@ 0x50
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	461a      	mov	r2, r3
 8019022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019024:	647b      	str	r3, [r7, #68]	@ 0x44
 8019026:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801902a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801902c:	e841 2300 	strex	r3, r2, [r1]
 8019030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019034:	2b00      	cmp	r3, #0
 8019036:	d1e6      	bne.n	8019006 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	2220      	movs	r2, #32
 801903c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	2200      	movs	r2, #0
 8019044:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019048:	2303      	movs	r3, #3
 801904a:	e063      	b.n	8019114 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	f003 0304 	and.w	r3, r3, #4
 8019056:	2b04      	cmp	r3, #4
 8019058:	d149      	bne.n	80190ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801905a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801905e:	9300      	str	r3, [sp, #0]
 8019060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019062:	2200      	movs	r2, #0
 8019064:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019068:	6878      	ldr	r0, [r7, #4]
 801906a:	f000 f857 	bl	801911c <UART_WaitOnFlagUntilTimeout>
 801906e:	4603      	mov	r3, r0
 8019070:	2b00      	cmp	r3, #0
 8019072:	d03c      	beq.n	80190ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801907c:	e853 3f00 	ldrex	r3, [r3]
 8019080:	623b      	str	r3, [r7, #32]
   return(result);
 8019082:	6a3b      	ldr	r3, [r7, #32]
 8019084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	461a      	mov	r2, r3
 8019090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019092:	633b      	str	r3, [r7, #48]	@ 0x30
 8019094:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801909a:	e841 2300 	strex	r3, r2, [r1]
 801909e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80190a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d1e6      	bne.n	8019074 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	3308      	adds	r3, #8
 80190ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80190ae:	693b      	ldr	r3, [r7, #16]
 80190b0:	e853 3f00 	ldrex	r3, [r3]
 80190b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	f023 0301 	bic.w	r3, r3, #1
 80190bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	3308      	adds	r3, #8
 80190c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80190c6:	61fa      	str	r2, [r7, #28]
 80190c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190ca:	69b9      	ldr	r1, [r7, #24]
 80190cc:	69fa      	ldr	r2, [r7, #28]
 80190ce:	e841 2300 	strex	r3, r2, [r1]
 80190d2:	617b      	str	r3, [r7, #20]
   return(result);
 80190d4:	697b      	ldr	r3, [r7, #20]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d1e5      	bne.n	80190a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	2220      	movs	r2, #32
 80190de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	2200      	movs	r2, #0
 80190e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80190ea:	2303      	movs	r3, #3
 80190ec:	e012      	b.n	8019114 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	2220      	movs	r2, #32
 80190f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	2220      	movs	r2, #32
 80190fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	2200      	movs	r2, #0
 8019102:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	2200      	movs	r2, #0
 8019108:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	2200      	movs	r2, #0
 801910e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8019112:	2300      	movs	r3, #0
}
 8019114:	4618      	mov	r0, r3
 8019116:	3758      	adds	r7, #88	@ 0x58
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}

0801911c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b084      	sub	sp, #16
 8019120:	af00      	add	r7, sp, #0
 8019122:	60f8      	str	r0, [r7, #12]
 8019124:	60b9      	str	r1, [r7, #8]
 8019126:	603b      	str	r3, [r7, #0]
 8019128:	4613      	mov	r3, r2
 801912a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801912c:	e04f      	b.n	80191ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801912e:	69bb      	ldr	r3, [r7, #24]
 8019130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019134:	d04b      	beq.n	80191ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019136:	f7ef fdd9 	bl	8008cec <HAL_GetTick>
 801913a:	4602      	mov	r2, r0
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	1ad3      	subs	r3, r2, r3
 8019140:	69ba      	ldr	r2, [r7, #24]
 8019142:	429a      	cmp	r2, r3
 8019144:	d302      	bcc.n	801914c <UART_WaitOnFlagUntilTimeout+0x30>
 8019146:	69bb      	ldr	r3, [r7, #24]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d101      	bne.n	8019150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801914c:	2303      	movs	r3, #3
 801914e:	e04e      	b.n	80191ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	f003 0304 	and.w	r3, r3, #4
 801915a:	2b00      	cmp	r3, #0
 801915c:	d037      	beq.n	80191ce <UART_WaitOnFlagUntilTimeout+0xb2>
 801915e:	68bb      	ldr	r3, [r7, #8]
 8019160:	2b80      	cmp	r3, #128	@ 0x80
 8019162:	d034      	beq.n	80191ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8019164:	68bb      	ldr	r3, [r7, #8]
 8019166:	2b40      	cmp	r3, #64	@ 0x40
 8019168:	d031      	beq.n	80191ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	69db      	ldr	r3, [r3, #28]
 8019170:	f003 0308 	and.w	r3, r3, #8
 8019174:	2b08      	cmp	r3, #8
 8019176:	d110      	bne.n	801919a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	2208      	movs	r2, #8
 801917e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8019180:	68f8      	ldr	r0, [r7, #12]
 8019182:	f000 f95b 	bl	801943c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	2208      	movs	r2, #8
 801918a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	2200      	movs	r2, #0
 8019192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8019196:	2301      	movs	r3, #1
 8019198:	e029      	b.n	80191ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	69db      	ldr	r3, [r3, #28]
 80191a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80191a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80191a8:	d111      	bne.n	80191ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80191aa:	68fb      	ldr	r3, [r7, #12]
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80191b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80191b4:	68f8      	ldr	r0, [r7, #12]
 80191b6:	f000 f941 	bl	801943c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	2220      	movs	r2, #32
 80191be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	2200      	movs	r2, #0
 80191c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80191ca:	2303      	movs	r3, #3
 80191cc:	e00f      	b.n	80191ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	69da      	ldr	r2, [r3, #28]
 80191d4:	68bb      	ldr	r3, [r7, #8]
 80191d6:	4013      	ands	r3, r2
 80191d8:	68ba      	ldr	r2, [r7, #8]
 80191da:	429a      	cmp	r2, r3
 80191dc:	bf0c      	ite	eq
 80191de:	2301      	moveq	r3, #1
 80191e0:	2300      	movne	r3, #0
 80191e2:	b2db      	uxtb	r3, r3
 80191e4:	461a      	mov	r2, r3
 80191e6:	79fb      	ldrb	r3, [r7, #7]
 80191e8:	429a      	cmp	r2, r3
 80191ea:	d0a0      	beq.n	801912e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80191ec:	2300      	movs	r3, #0
}
 80191ee:	4618      	mov	r0, r3
 80191f0:	3710      	adds	r7, #16
 80191f2:	46bd      	mov	sp, r7
 80191f4:	bd80      	pop	{r7, pc}
	...

080191f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80191f8:	b480      	push	{r7}
 80191fa:	b0a3      	sub	sp, #140	@ 0x8c
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	60f8      	str	r0, [r7, #12]
 8019200:	60b9      	str	r1, [r7, #8]
 8019202:	4613      	mov	r3, r2
 8019204:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	68ba      	ldr	r2, [r7, #8]
 801920a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	88fa      	ldrh	r2, [r7, #6]
 8019210:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	88fa      	ldrh	r2, [r7, #6]
 8019218:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	2200      	movs	r2, #0
 8019220:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	689b      	ldr	r3, [r3, #8]
 8019226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801922a:	d10e      	bne.n	801924a <UART_Start_Receive_IT+0x52>
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	691b      	ldr	r3, [r3, #16]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d105      	bne.n	8019240 <UART_Start_Receive_IT+0x48>
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801923a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801923e:	e02d      	b.n	801929c <UART_Start_Receive_IT+0xa4>
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	22ff      	movs	r2, #255	@ 0xff
 8019244:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019248:	e028      	b.n	801929c <UART_Start_Receive_IT+0xa4>
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	689b      	ldr	r3, [r3, #8]
 801924e:	2b00      	cmp	r3, #0
 8019250:	d10d      	bne.n	801926e <UART_Start_Receive_IT+0x76>
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	691b      	ldr	r3, [r3, #16]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d104      	bne.n	8019264 <UART_Start_Receive_IT+0x6c>
 801925a:	68fb      	ldr	r3, [r7, #12]
 801925c:	22ff      	movs	r2, #255	@ 0xff
 801925e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019262:	e01b      	b.n	801929c <UART_Start_Receive_IT+0xa4>
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	227f      	movs	r2, #127	@ 0x7f
 8019268:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801926c:	e016      	b.n	801929c <UART_Start_Receive_IT+0xa4>
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	689b      	ldr	r3, [r3, #8]
 8019272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019276:	d10d      	bne.n	8019294 <UART_Start_Receive_IT+0x9c>
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	691b      	ldr	r3, [r3, #16]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d104      	bne.n	801928a <UART_Start_Receive_IT+0x92>
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	227f      	movs	r2, #127	@ 0x7f
 8019284:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019288:	e008      	b.n	801929c <UART_Start_Receive_IT+0xa4>
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	223f      	movs	r2, #63	@ 0x3f
 801928e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8019292:	e003      	b.n	801929c <UART_Start_Receive_IT+0xa4>
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	2200      	movs	r2, #0
 8019298:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	2200      	movs	r2, #0
 80192a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	2222      	movs	r2, #34	@ 0x22
 80192a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	3308      	adds	r3, #8
 80192b2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80192b6:	e853 3f00 	ldrex	r3, [r3]
 80192ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80192bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80192be:	f043 0301 	orr.w	r3, r3, #1
 80192c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	3308      	adds	r3, #8
 80192cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80192d0:	673a      	str	r2, [r7, #112]	@ 0x70
 80192d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192d4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80192d6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80192d8:	e841 2300 	strex	r3, r2, [r1]
 80192dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80192de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d1e3      	bne.n	80192ac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80192e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80192ec:	d14f      	bne.n	801938e <UART_Start_Receive_IT+0x196>
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80192f4:	88fa      	ldrh	r2, [r7, #6]
 80192f6:	429a      	cmp	r2, r3
 80192f8:	d349      	bcc.n	801938e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	689b      	ldr	r3, [r3, #8]
 80192fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019302:	d107      	bne.n	8019314 <UART_Start_Receive_IT+0x11c>
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	691b      	ldr	r3, [r3, #16]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d103      	bne.n	8019314 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	4a47      	ldr	r2, [pc, #284]	@ (801942c <UART_Start_Receive_IT+0x234>)
 8019310:	675a      	str	r2, [r3, #116]	@ 0x74
 8019312:	e002      	b.n	801931a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	4a46      	ldr	r2, [pc, #280]	@ (8019430 <UART_Start_Receive_IT+0x238>)
 8019318:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	691b      	ldr	r3, [r3, #16]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d01a      	beq.n	8019358 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801932a:	e853 3f00 	ldrex	r3, [r3]
 801932e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019336:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	461a      	mov	r2, r3
 8019340:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019344:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019346:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019348:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801934a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801934c:	e841 2300 	strex	r3, r2, [r1]
 8019350:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8019352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019354:	2b00      	cmp	r3, #0
 8019356:	d1e4      	bne.n	8019322 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	3308      	adds	r3, #8
 801935e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019362:	e853 3f00 	ldrex	r3, [r3]
 8019366:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801936a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801936e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	3308      	adds	r3, #8
 8019376:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019378:	64ba      	str	r2, [r7, #72]	@ 0x48
 801937a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801937c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801937e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019380:	e841 2300 	strex	r3, r2, [r1]
 8019384:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8019386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019388:	2b00      	cmp	r3, #0
 801938a:	d1e5      	bne.n	8019358 <UART_Start_Receive_IT+0x160>
 801938c:	e046      	b.n	801941c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	689b      	ldr	r3, [r3, #8]
 8019392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019396:	d107      	bne.n	80193a8 <UART_Start_Receive_IT+0x1b0>
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	691b      	ldr	r3, [r3, #16]
 801939c:	2b00      	cmp	r3, #0
 801939e:	d103      	bne.n	80193a8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	4a24      	ldr	r2, [pc, #144]	@ (8019434 <UART_Start_Receive_IT+0x23c>)
 80193a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80193a6:	e002      	b.n	80193ae <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	4a23      	ldr	r2, [pc, #140]	@ (8019438 <UART_Start_Receive_IT+0x240>)
 80193ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	691b      	ldr	r3, [r3, #16]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d019      	beq.n	80193ea <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193be:	e853 3f00 	ldrex	r3, [r3]
 80193c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80193c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193c6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80193ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	461a      	mov	r2, r3
 80193d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80193d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80193d6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80193da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80193dc:	e841 2300 	strex	r3, r2, [r1]
 80193e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80193e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d1e6      	bne.n	80193b6 <UART_Start_Receive_IT+0x1be>
 80193e8:	e018      	b.n	801941c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193f0:	697b      	ldr	r3, [r7, #20]
 80193f2:	e853 3f00 	ldrex	r3, [r3]
 80193f6:	613b      	str	r3, [r7, #16]
   return(result);
 80193f8:	693b      	ldr	r3, [r7, #16]
 80193fa:	f043 0320 	orr.w	r3, r3, #32
 80193fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	461a      	mov	r2, r3
 8019406:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019408:	623b      	str	r3, [r7, #32]
 801940a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801940c:	69f9      	ldr	r1, [r7, #28]
 801940e:	6a3a      	ldr	r2, [r7, #32]
 8019410:	e841 2300 	strex	r3, r2, [r1]
 8019414:	61bb      	str	r3, [r7, #24]
   return(result);
 8019416:	69bb      	ldr	r3, [r7, #24]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d1e6      	bne.n	80193ea <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801941c:	2300      	movs	r3, #0
}
 801941e:	4618      	mov	r0, r3
 8019420:	378c      	adds	r7, #140	@ 0x8c
 8019422:	46bd      	mov	sp, r7
 8019424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019428:	4770      	bx	lr
 801942a:	bf00      	nop
 801942c:	08019fa1 	.word	0x08019fa1
 8019430:	08019c41 	.word	0x08019c41
 8019434:	08019a89 	.word	0x08019a89
 8019438:	080198d1 	.word	0x080198d1

0801943c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801943c:	b480      	push	{r7}
 801943e:	b095      	sub	sp, #84	@ 0x54
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801944a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801944c:	e853 3f00 	ldrex	r3, [r3]
 8019450:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019458:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	461a      	mov	r2, r3
 8019460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019462:	643b      	str	r3, [r7, #64]	@ 0x40
 8019464:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019466:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019468:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801946a:	e841 2300 	strex	r3, r2, [r1]
 801946e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019472:	2b00      	cmp	r3, #0
 8019474:	d1e6      	bne.n	8019444 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	3308      	adds	r3, #8
 801947c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801947e:	6a3b      	ldr	r3, [r7, #32]
 8019480:	e853 3f00 	ldrex	r3, [r3]
 8019484:	61fb      	str	r3, [r7, #28]
   return(result);
 8019486:	69fa      	ldr	r2, [r7, #28]
 8019488:	4b1e      	ldr	r3, [pc, #120]	@ (8019504 <UART_EndRxTransfer+0xc8>)
 801948a:	4013      	ands	r3, r2
 801948c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	3308      	adds	r3, #8
 8019494:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8019496:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019498:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801949a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801949c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801949e:	e841 2300 	strex	r3, r2, [r1]
 80194a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80194a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d1e5      	bne.n	8019476 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80194ae:	2b01      	cmp	r3, #1
 80194b0:	d118      	bne.n	80194e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	e853 3f00 	ldrex	r3, [r3]
 80194be:	60bb      	str	r3, [r7, #8]
   return(result);
 80194c0:	68bb      	ldr	r3, [r7, #8]
 80194c2:	f023 0310 	bic.w	r3, r3, #16
 80194c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	461a      	mov	r2, r3
 80194ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80194d0:	61bb      	str	r3, [r7, #24]
 80194d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194d4:	6979      	ldr	r1, [r7, #20]
 80194d6:	69ba      	ldr	r2, [r7, #24]
 80194d8:	e841 2300 	strex	r3, r2, [r1]
 80194dc:	613b      	str	r3, [r7, #16]
   return(result);
 80194de:	693b      	ldr	r3, [r7, #16]
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d1e6      	bne.n	80194b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	2220      	movs	r2, #32
 80194e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	2200      	movs	r2, #0
 80194f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	2200      	movs	r2, #0
 80194f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80194f8:	bf00      	nop
 80194fa:	3754      	adds	r7, #84	@ 0x54
 80194fc:	46bd      	mov	sp, r7
 80194fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019502:	4770      	bx	lr
 8019504:	effffffe 	.word	0xeffffffe

08019508 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b084      	sub	sp, #16
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019514:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	2200      	movs	r2, #0
 801951a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	2200      	movs	r2, #0
 8019522:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8019526:	68f8      	ldr	r0, [r7, #12]
 8019528:	f7fe fe2a 	bl	8018180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801952c:	bf00      	nop
 801952e:	3710      	adds	r7, #16
 8019530:	46bd      	mov	sp, r7
 8019532:	bd80      	pop	{r7, pc}

08019534 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019534:	b480      	push	{r7}
 8019536:	b08f      	sub	sp, #60	@ 0x3c
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019542:	2b21      	cmp	r3, #33	@ 0x21
 8019544:	d14c      	bne.n	80195e0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801954c:	b29b      	uxth	r3, r3
 801954e:	2b00      	cmp	r3, #0
 8019550:	d132      	bne.n	80195b8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019558:	6a3b      	ldr	r3, [r7, #32]
 801955a:	e853 3f00 	ldrex	r3, [r3]
 801955e:	61fb      	str	r3, [r7, #28]
   return(result);
 8019560:	69fb      	ldr	r3, [r7, #28]
 8019562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019566:	637b      	str	r3, [r7, #52]	@ 0x34
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	461a      	mov	r2, r3
 801956e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019572:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019578:	e841 2300 	strex	r3, r2, [r1]
 801957c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019580:	2b00      	cmp	r3, #0
 8019582:	d1e6      	bne.n	8019552 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	e853 3f00 	ldrex	r3, [r3]
 8019590:	60bb      	str	r3, [r7, #8]
   return(result);
 8019592:	68bb      	ldr	r3, [r7, #8]
 8019594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019598:	633b      	str	r3, [r7, #48]	@ 0x30
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	461a      	mov	r2, r3
 80195a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195a2:	61bb      	str	r3, [r7, #24]
 80195a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80195a6:	6979      	ldr	r1, [r7, #20]
 80195a8:	69ba      	ldr	r2, [r7, #24]
 80195aa:	e841 2300 	strex	r3, r2, [r1]
 80195ae:	613b      	str	r3, [r7, #16]
   return(result);
 80195b0:	693b      	ldr	r3, [r7, #16]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d1e6      	bne.n	8019584 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80195b6:	e013      	b.n	80195e0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80195bc:	781a      	ldrb	r2, [r3, #0]
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80195c8:	1c5a      	adds	r2, r3, #1
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80195d4:	b29b      	uxth	r3, r3
 80195d6:	3b01      	subs	r3, #1
 80195d8:	b29a      	uxth	r2, r3
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80195e0:	bf00      	nop
 80195e2:	373c      	adds	r7, #60	@ 0x3c
 80195e4:	46bd      	mov	sp, r7
 80195e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ea:	4770      	bx	lr

080195ec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80195ec:	b480      	push	{r7}
 80195ee:	b091      	sub	sp, #68	@ 0x44
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80195fa:	2b21      	cmp	r3, #33	@ 0x21
 80195fc:	d151      	bne.n	80196a2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019604:	b29b      	uxth	r3, r3
 8019606:	2b00      	cmp	r3, #0
 8019608:	d132      	bne.n	8019670 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019612:	e853 3f00 	ldrex	r3, [r3]
 8019616:	623b      	str	r3, [r7, #32]
   return(result);
 8019618:	6a3b      	ldr	r3, [r7, #32]
 801961a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801961e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	461a      	mov	r2, r3
 8019626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019628:	633b      	str	r3, [r7, #48]	@ 0x30
 801962a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801962c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801962e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019630:	e841 2300 	strex	r3, r2, [r1]
 8019634:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019638:	2b00      	cmp	r3, #0
 801963a:	d1e6      	bne.n	801960a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019642:	693b      	ldr	r3, [r7, #16]
 8019644:	e853 3f00 	ldrex	r3, [r3]
 8019648:	60fb      	str	r3, [r7, #12]
   return(result);
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019650:	637b      	str	r3, [r7, #52]	@ 0x34
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	461a      	mov	r2, r3
 8019658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801965a:	61fb      	str	r3, [r7, #28]
 801965c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801965e:	69b9      	ldr	r1, [r7, #24]
 8019660:	69fa      	ldr	r2, [r7, #28]
 8019662:	e841 2300 	strex	r3, r2, [r1]
 8019666:	617b      	str	r3, [r7, #20]
   return(result);
 8019668:	697b      	ldr	r3, [r7, #20]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d1e6      	bne.n	801963c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801966e:	e018      	b.n	80196a2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019674:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019678:	881b      	ldrh	r3, [r3, #0]
 801967a:	461a      	mov	r2, r3
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019684:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801968a:	1c9a      	adds	r2, r3, #2
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019696:	b29b      	uxth	r3, r3
 8019698:	3b01      	subs	r3, #1
 801969a:	b29a      	uxth	r2, r3
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80196a2:	bf00      	nop
 80196a4:	3744      	adds	r7, #68	@ 0x44
 80196a6:	46bd      	mov	sp, r7
 80196a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ac:	4770      	bx	lr

080196ae <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80196ae:	b480      	push	{r7}
 80196b0:	b091      	sub	sp, #68	@ 0x44
 80196b2:	af00      	add	r7, sp, #0
 80196b4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80196bc:	2b21      	cmp	r3, #33	@ 0x21
 80196be:	d160      	bne.n	8019782 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80196c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80196c8:	e057      	b.n	801977a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80196d0:	b29b      	uxth	r3, r3
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d133      	bne.n	801973e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	3308      	adds	r3, #8
 80196dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80196de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196e0:	e853 3f00 	ldrex	r3, [r3]
 80196e4:	623b      	str	r3, [r7, #32]
   return(result);
 80196e6:	6a3b      	ldr	r3, [r7, #32]
 80196e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80196ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	3308      	adds	r3, #8
 80196f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80196f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80196f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80196fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80196fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80196fe:	e841 2300 	strex	r3, r2, [r1]
 8019702:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019706:	2b00      	cmp	r3, #0
 8019708:	d1e5      	bne.n	80196d6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019710:	693b      	ldr	r3, [r7, #16]
 8019712:	e853 3f00 	ldrex	r3, [r3]
 8019716:	60fb      	str	r3, [r7, #12]
   return(result);
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801971e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	461a      	mov	r2, r3
 8019726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019728:	61fb      	str	r3, [r7, #28]
 801972a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801972c:	69b9      	ldr	r1, [r7, #24]
 801972e:	69fa      	ldr	r2, [r7, #28]
 8019730:	e841 2300 	strex	r3, r2, [r1]
 8019734:	617b      	str	r3, [r7, #20]
   return(result);
 8019736:	697b      	ldr	r3, [r7, #20]
 8019738:	2b00      	cmp	r3, #0
 801973a:	d1e6      	bne.n	801970a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801973c:	e021      	b.n	8019782 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	69db      	ldr	r3, [r3, #28]
 8019744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019748:	2b00      	cmp	r3, #0
 801974a:	d013      	beq.n	8019774 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019750:	781a      	ldrb	r2, [r3, #0]
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801975c:	1c5a      	adds	r2, r3, #1
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019768:	b29b      	uxth	r3, r3
 801976a:	3b01      	subs	r3, #1
 801976c:	b29a      	uxth	r2, r3
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8019774:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019776:	3b01      	subs	r3, #1
 8019778:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801977a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801977c:	2b00      	cmp	r3, #0
 801977e:	d1a4      	bne.n	80196ca <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8019780:	e7ff      	b.n	8019782 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8019782:	bf00      	nop
 8019784:	3744      	adds	r7, #68	@ 0x44
 8019786:	46bd      	mov	sp, r7
 8019788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978c:	4770      	bx	lr

0801978e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801978e:	b480      	push	{r7}
 8019790:	b091      	sub	sp, #68	@ 0x44
 8019792:	af00      	add	r7, sp, #0
 8019794:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801979c:	2b21      	cmp	r3, #33	@ 0x21
 801979e:	d165      	bne.n	801986c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80197a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80197a8:	e05c      	b.n	8019864 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80197b0:	b29b      	uxth	r3, r3
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d133      	bne.n	801981e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	3308      	adds	r3, #8
 80197bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197be:	6a3b      	ldr	r3, [r7, #32]
 80197c0:	e853 3f00 	ldrex	r3, [r3]
 80197c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80197c6:	69fb      	ldr	r3, [r7, #28]
 80197c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80197cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	3308      	adds	r3, #8
 80197d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80197d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80197d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80197da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80197dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80197de:	e841 2300 	strex	r3, r2, [r1]
 80197e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80197e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d1e5      	bne.n	80197b6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	e853 3f00 	ldrex	r3, [r3]
 80197f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80197f8:	68bb      	ldr	r3, [r7, #8]
 80197fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80197fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	461a      	mov	r2, r3
 8019806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019808:	61bb      	str	r3, [r7, #24]
 801980a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801980c:	6979      	ldr	r1, [r7, #20]
 801980e:	69ba      	ldr	r2, [r7, #24]
 8019810:	e841 2300 	strex	r3, r2, [r1]
 8019814:	613b      	str	r3, [r7, #16]
   return(result);
 8019816:	693b      	ldr	r3, [r7, #16]
 8019818:	2b00      	cmp	r3, #0
 801981a:	d1e6      	bne.n	80197ea <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801981c:	e026      	b.n	801986c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	69db      	ldr	r3, [r3, #28]
 8019824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019828:	2b00      	cmp	r3, #0
 801982a:	d018      	beq.n	801985e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019830:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8019832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019834:	881b      	ldrh	r3, [r3, #0]
 8019836:	461a      	mov	r2, r3
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019840:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019846:	1c9a      	adds	r2, r3, #2
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019852:	b29b      	uxth	r3, r3
 8019854:	3b01      	subs	r3, #1
 8019856:	b29a      	uxth	r2, r3
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801985e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019860:	3b01      	subs	r3, #1
 8019862:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8019864:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019866:	2b00      	cmp	r3, #0
 8019868:	d19f      	bne.n	80197aa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801986a:	e7ff      	b.n	801986c <UART_TxISR_16BIT_FIFOEN+0xde>
 801986c:	bf00      	nop
 801986e:	3744      	adds	r7, #68	@ 0x44
 8019870:	46bd      	mov	sp, r7
 8019872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019876:	4770      	bx	lr

08019878 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b088      	sub	sp, #32
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	e853 3f00 	ldrex	r3, [r3]
 801988c:	60bb      	str	r3, [r7, #8]
   return(result);
 801988e:	68bb      	ldr	r3, [r7, #8]
 8019890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019894:	61fb      	str	r3, [r7, #28]
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	461a      	mov	r2, r3
 801989c:	69fb      	ldr	r3, [r7, #28]
 801989e:	61bb      	str	r3, [r7, #24]
 80198a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80198a2:	6979      	ldr	r1, [r7, #20]
 80198a4:	69ba      	ldr	r2, [r7, #24]
 80198a6:	e841 2300 	strex	r3, r2, [r1]
 80198aa:	613b      	str	r3, [r7, #16]
   return(result);
 80198ac:	693b      	ldr	r3, [r7, #16]
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d1e6      	bne.n	8019880 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	2220      	movs	r2, #32
 80198b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2200      	movs	r2, #0
 80198be:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80198c0:	6878      	ldr	r0, [r7, #4]
 80198c2:	f7fe fc53 	bl	801816c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80198c6:	bf00      	nop
 80198c8:	3720      	adds	r7, #32
 80198ca:	46bd      	mov	sp, r7
 80198cc:	bd80      	pop	{r7, pc}
	...

080198d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b09c      	sub	sp, #112	@ 0x70
 80198d4:	af00      	add	r7, sp, #0
 80198d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80198de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80198e8:	2b22      	cmp	r3, #34	@ 0x22
 80198ea:	f040 80be 	bne.w	8019a6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80198f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80198f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80198fc:	b2d9      	uxtb	r1, r3
 80198fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019902:	b2da      	uxtb	r2, r3
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019908:	400a      	ands	r2, r1
 801990a:	b2d2      	uxtb	r2, r2
 801990c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019912:	1c5a      	adds	r2, r3, #1
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801991e:	b29b      	uxth	r3, r3
 8019920:	3b01      	subs	r3, #1
 8019922:	b29a      	uxth	r2, r3
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019930:	b29b      	uxth	r3, r3
 8019932:	2b00      	cmp	r3, #0
 8019934:	f040 80a1 	bne.w	8019a7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801993e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019940:	e853 3f00 	ldrex	r3, [r3]
 8019944:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8019946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019948:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801994c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	461a      	mov	r2, r3
 8019954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019958:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801995a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801995c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801995e:	e841 2300 	strex	r3, r2, [r1]
 8019962:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8019964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019966:	2b00      	cmp	r3, #0
 8019968:	d1e6      	bne.n	8019938 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	3308      	adds	r3, #8
 8019970:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019974:	e853 3f00 	ldrex	r3, [r3]
 8019978:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801997a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801997c:	f023 0301 	bic.w	r3, r3, #1
 8019980:	667b      	str	r3, [r7, #100]	@ 0x64
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	3308      	adds	r3, #8
 8019988:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801998a:	647a      	str	r2, [r7, #68]	@ 0x44
 801998c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801998e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019992:	e841 2300 	strex	r3, r2, [r1]
 8019996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801999a:	2b00      	cmp	r3, #0
 801999c:	d1e5      	bne.n	801996a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	2220      	movs	r2, #32
 80199a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	2200      	movs	r2, #0
 80199aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	2200      	movs	r2, #0
 80199b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	4a33      	ldr	r2, [pc, #204]	@ (8019a84 <UART_RxISR_8BIT+0x1b4>)
 80199b8:	4293      	cmp	r3, r2
 80199ba:	d01f      	beq.n	80199fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	685b      	ldr	r3, [r3, #4]
 80199c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d018      	beq.n	80199fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80199d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199d2:	e853 3f00 	ldrex	r3, [r3]
 80199d6:	623b      	str	r3, [r7, #32]
   return(result);
 80199d8:	6a3b      	ldr	r3, [r7, #32]
 80199da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80199de:	663b      	str	r3, [r7, #96]	@ 0x60
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	461a      	mov	r2, r3
 80199e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80199e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80199ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80199ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80199ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80199f0:	e841 2300 	strex	r3, r2, [r1]
 80199f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80199f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d1e6      	bne.n	80199ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a00:	2b01      	cmp	r3, #1
 8019a02:	d12e      	bne.n	8019a62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	2200      	movs	r2, #0
 8019a08:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a10:	693b      	ldr	r3, [r7, #16]
 8019a12:	e853 3f00 	ldrex	r3, [r3]
 8019a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	f023 0310 	bic.w	r3, r3, #16
 8019a1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	461a      	mov	r2, r3
 8019a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019a28:	61fb      	str	r3, [r7, #28]
 8019a2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a2c:	69b9      	ldr	r1, [r7, #24]
 8019a2e:	69fa      	ldr	r2, [r7, #28]
 8019a30:	e841 2300 	strex	r3, r2, [r1]
 8019a34:	617b      	str	r3, [r7, #20]
   return(result);
 8019a36:	697b      	ldr	r3, [r7, #20]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d1e6      	bne.n	8019a0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	69db      	ldr	r3, [r3, #28]
 8019a42:	f003 0310 	and.w	r3, r3, #16
 8019a46:	2b10      	cmp	r3, #16
 8019a48:	d103      	bne.n	8019a52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	2210      	movs	r2, #16
 8019a50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019a58:	4619      	mov	r1, r3
 8019a5a:	6878      	ldr	r0, [r7, #4]
 8019a5c:	f7fe fb9a 	bl	8018194 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019a60:	e00b      	b.n	8019a7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019a62:	6878      	ldr	r0, [r7, #4]
 8019a64:	f7ec fbd6 	bl	8006214 <HAL_UART_RxCpltCallback>
}
 8019a68:	e007      	b.n	8019a7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	699a      	ldr	r2, [r3, #24]
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	f042 0208 	orr.w	r2, r2, #8
 8019a78:	619a      	str	r2, [r3, #24]
}
 8019a7a:	bf00      	nop
 8019a7c:	3770      	adds	r7, #112	@ 0x70
 8019a7e:	46bd      	mov	sp, r7
 8019a80:	bd80      	pop	{r7, pc}
 8019a82:	bf00      	nop
 8019a84:	58000c00 	.word	0x58000c00

08019a88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b09c      	sub	sp, #112	@ 0x70
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019a96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019aa0:	2b22      	cmp	r3, #34	@ 0x22
 8019aa2:	f040 80be 	bne.w	8019c22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019aac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8019ab6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8019aba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8019abe:	4013      	ands	r3, r2
 8019ac0:	b29a      	uxth	r2, r3
 8019ac2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019ac4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019aca:	1c9a      	adds	r2, r3, #2
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019ad6:	b29b      	uxth	r3, r3
 8019ad8:	3b01      	subs	r3, #1
 8019ada:	b29a      	uxth	r2, r3
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019ae8:	b29b      	uxth	r3, r3
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	f040 80a1 	bne.w	8019c32 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019af8:	e853 3f00 	ldrex	r3, [r3]
 8019afc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019b00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019b04:	667b      	str	r3, [r7, #100]	@ 0x64
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	461a      	mov	r2, r3
 8019b0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019b0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8019b10:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019b14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019b16:	e841 2300 	strex	r3, r2, [r1]
 8019b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019b1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d1e6      	bne.n	8019af0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	3308      	adds	r3, #8
 8019b28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b2c:	e853 3f00 	ldrex	r3, [r3]
 8019b30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b34:	f023 0301 	bic.w	r3, r3, #1
 8019b38:	663b      	str	r3, [r7, #96]	@ 0x60
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	3308      	adds	r3, #8
 8019b40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8019b42:	643a      	str	r2, [r7, #64]	@ 0x40
 8019b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019b46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019b48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019b4a:	e841 2300 	strex	r3, r2, [r1]
 8019b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d1e5      	bne.n	8019b22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	2220      	movs	r2, #32
 8019b5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	2200      	movs	r2, #0
 8019b62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	2200      	movs	r2, #0
 8019b68:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	4a33      	ldr	r2, [pc, #204]	@ (8019c3c <UART_RxISR_16BIT+0x1b4>)
 8019b70:	4293      	cmp	r3, r2
 8019b72:	d01f      	beq.n	8019bb4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	681b      	ldr	r3, [r3, #0]
 8019b78:	685b      	ldr	r3, [r3, #4]
 8019b7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d018      	beq.n	8019bb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019b88:	6a3b      	ldr	r3, [r7, #32]
 8019b8a:	e853 3f00 	ldrex	r3, [r3]
 8019b8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8019b90:	69fb      	ldr	r3, [r7, #28]
 8019b92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	461a      	mov	r2, r3
 8019b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ba2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ba4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019ba8:	e841 2300 	strex	r3, r2, [r1]
 8019bac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d1e6      	bne.n	8019b82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019bb8:	2b01      	cmp	r3, #1
 8019bba:	d12e      	bne.n	8019c1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	2200      	movs	r2, #0
 8019bc0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	e853 3f00 	ldrex	r3, [r3]
 8019bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8019bd0:	68bb      	ldr	r3, [r7, #8]
 8019bd2:	f023 0310 	bic.w	r3, r3, #16
 8019bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	461a      	mov	r2, r3
 8019bde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019be0:	61bb      	str	r3, [r7, #24]
 8019be2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019be4:	6979      	ldr	r1, [r7, #20]
 8019be6:	69ba      	ldr	r2, [r7, #24]
 8019be8:	e841 2300 	strex	r3, r2, [r1]
 8019bec:	613b      	str	r3, [r7, #16]
   return(result);
 8019bee:	693b      	ldr	r3, [r7, #16]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d1e6      	bne.n	8019bc2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	69db      	ldr	r3, [r3, #28]
 8019bfa:	f003 0310 	and.w	r3, r3, #16
 8019bfe:	2b10      	cmp	r3, #16
 8019c00:	d103      	bne.n	8019c0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	2210      	movs	r2, #16
 8019c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019c10:	4619      	mov	r1, r3
 8019c12:	6878      	ldr	r0, [r7, #4]
 8019c14:	f7fe fabe 	bl	8018194 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019c18:	e00b      	b.n	8019c32 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8019c1a:	6878      	ldr	r0, [r7, #4]
 8019c1c:	f7ec fafa 	bl	8006214 <HAL_UART_RxCpltCallback>
}
 8019c20:	e007      	b.n	8019c32 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	699a      	ldr	r2, [r3, #24]
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	f042 0208 	orr.w	r2, r2, #8
 8019c30:	619a      	str	r2, [r3, #24]
}
 8019c32:	bf00      	nop
 8019c34:	3770      	adds	r7, #112	@ 0x70
 8019c36:	46bd      	mov	sp, r7
 8019c38:	bd80      	pop	{r7, pc}
 8019c3a:	bf00      	nop
 8019c3c:	58000c00 	.word	0x58000c00

08019c40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019c40:	b580      	push	{r7, lr}
 8019c42:	b0ac      	sub	sp, #176	@ 0xb0
 8019c44:	af00      	add	r7, sp, #0
 8019c46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019c4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	69db      	ldr	r3, [r3, #28]
 8019c58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	689b      	ldr	r3, [r3, #8]
 8019c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019c76:	2b22      	cmp	r3, #34	@ 0x22
 8019c78:	f040 8180 	bne.w	8019f7c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019c82:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019c86:	e123      	b.n	8019ed0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c8e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019c92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8019c96:	b2d9      	uxtb	r1, r3
 8019c98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8019c9c:	b2da      	uxtb	r2, r3
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ca2:	400a      	ands	r2, r1
 8019ca4:	b2d2      	uxtb	r2, r2
 8019ca6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019cac:	1c5a      	adds	r2, r3, #1
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019cb8:	b29b      	uxth	r3, r3
 8019cba:	3b01      	subs	r3, #1
 8019cbc:	b29a      	uxth	r2, r3
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	69db      	ldr	r3, [r3, #28]
 8019cca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8019cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019cd2:	f003 0307 	and.w	r3, r3, #7
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d053      	beq.n	8019d82 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8019cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019cde:	f003 0301 	and.w	r3, r3, #1
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d011      	beq.n	8019d0a <UART_RxISR_8BIT_FIFOEN+0xca>
 8019ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8019cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d00b      	beq.n	8019d0a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	2201      	movs	r2, #1
 8019cf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019d00:	f043 0201 	orr.w	r2, r3, #1
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019d0e:	f003 0302 	and.w	r3, r3, #2
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d011      	beq.n	8019d3a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8019d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019d1a:	f003 0301 	and.w	r3, r3, #1
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d00b      	beq.n	8019d3a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	2202      	movs	r2, #2
 8019d28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019d30:	f043 0204 	orr.w	r2, r3, #4
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8019d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019d3e:	f003 0304 	and.w	r3, r3, #4
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d011      	beq.n	8019d6a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8019d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019d4a:	f003 0301 	and.w	r3, r3, #1
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d00b      	beq.n	8019d6a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	2204      	movs	r2, #4
 8019d58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019d60:	f043 0202 	orr.w	r2, r3, #2
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d006      	beq.n	8019d82 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019d74:	6878      	ldr	r0, [r7, #4]
 8019d76:	f7fe fa03 	bl	8018180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	2200      	movs	r2, #0
 8019d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019d88:	b29b      	uxth	r3, r3
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	f040 80a0 	bne.w	8019ed0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019d98:	e853 3f00 	ldrex	r3, [r3]
 8019d9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8019d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	461a      	mov	r2, r3
 8019dae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019db2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019db4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019db6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8019db8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019dba:	e841 2300 	strex	r3, r2, [r1]
 8019dbe:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8019dc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d1e4      	bne.n	8019d90 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	3308      	adds	r3, #8
 8019dcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019dd0:	e853 3f00 	ldrex	r3, [r3]
 8019dd4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8019dd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8019dd8:	4b6e      	ldr	r3, [pc, #440]	@ (8019f94 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8019dda:	4013      	ands	r3, r2
 8019ddc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	681b      	ldr	r3, [r3, #0]
 8019de4:	3308      	adds	r3, #8
 8019de6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8019dea:	66ba      	str	r2, [r7, #104]	@ 0x68
 8019dec:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019dee:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8019df0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8019df2:	e841 2300 	strex	r3, r2, [r1]
 8019df6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8019df8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d1e3      	bne.n	8019dc6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	2220      	movs	r2, #32
 8019e02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	2200      	movs	r2, #0
 8019e0a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	2200      	movs	r2, #0
 8019e10:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	4a60      	ldr	r2, [pc, #384]	@ (8019f98 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8019e18:	4293      	cmp	r3, r2
 8019e1a:	d021      	beq.n	8019e60 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	685b      	ldr	r3, [r3, #4]
 8019e22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d01a      	beq.n	8019e60 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019e32:	e853 3f00 	ldrex	r3, [r3]
 8019e36:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8019e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019e3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8019e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	461a      	mov	r2, r3
 8019e48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8019e4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8019e4e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8019e52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8019e54:	e841 2300 	strex	r3, r2, [r1]
 8019e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8019e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d1e4      	bne.n	8019e2a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019e64:	2b01      	cmp	r3, #1
 8019e66:	d130      	bne.n	8019eca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019e76:	e853 3f00 	ldrex	r3, [r3]
 8019e7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8019e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e7e:	f023 0310 	bic.w	r3, r3, #16
 8019e82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	461a      	mov	r2, r3
 8019e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019e90:	643b      	str	r3, [r7, #64]	@ 0x40
 8019e92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8019e96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019e98:	e841 2300 	strex	r3, r2, [r1]
 8019e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8019e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d1e4      	bne.n	8019e6e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	69db      	ldr	r3, [r3, #28]
 8019eaa:	f003 0310 	and.w	r3, r3, #16
 8019eae:	2b10      	cmp	r3, #16
 8019eb0:	d103      	bne.n	8019eba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	2210      	movs	r2, #16
 8019eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8019ec0:	4619      	mov	r1, r3
 8019ec2:	6878      	ldr	r0, [r7, #4]
 8019ec4:	f7fe f966 	bl	8018194 <HAL_UARTEx_RxEventCallback>
 8019ec8:	e002      	b.n	8019ed0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8019eca:	6878      	ldr	r0, [r7, #4]
 8019ecc:	f7ec f9a2 	bl	8006214 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019ed0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d006      	beq.n	8019ee6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8019ed8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019edc:	f003 0320 	and.w	r3, r3, #32
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	f47f aed1 	bne.w	8019c88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8019eec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8019ef0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d049      	beq.n	8019f8c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019efe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8019f02:	429a      	cmp	r2, r3
 8019f04:	d242      	bcs.n	8019f8c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	3308      	adds	r3, #8
 8019f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f0e:	6a3b      	ldr	r3, [r7, #32]
 8019f10:	e853 3f00 	ldrex	r3, [r3]
 8019f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8019f16:	69fb      	ldr	r3, [r7, #28]
 8019f18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	3308      	adds	r3, #8
 8019f26:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8019f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8019f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8019f30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019f32:	e841 2300 	strex	r3, r2, [r1]
 8019f36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8019f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d1e3      	bne.n	8019f06 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	4a16      	ldr	r2, [pc, #88]	@ (8019f9c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8019f42:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	e853 3f00 	ldrex	r3, [r3]
 8019f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8019f52:	68bb      	ldr	r3, [r7, #8]
 8019f54:	f043 0320 	orr.w	r3, r3, #32
 8019f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	461a      	mov	r2, r3
 8019f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8019f66:	61bb      	str	r3, [r7, #24]
 8019f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f6a:	6979      	ldr	r1, [r7, #20]
 8019f6c:	69ba      	ldr	r2, [r7, #24]
 8019f6e:	e841 2300 	strex	r3, r2, [r1]
 8019f72:	613b      	str	r3, [r7, #16]
   return(result);
 8019f74:	693b      	ldr	r3, [r7, #16]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d1e4      	bne.n	8019f44 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019f7a:	e007      	b.n	8019f8c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	699a      	ldr	r2, [r3, #24]
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	f042 0208 	orr.w	r2, r2, #8
 8019f8a:	619a      	str	r2, [r3, #24]
}
 8019f8c:	bf00      	nop
 8019f8e:	37b0      	adds	r7, #176	@ 0xb0
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bd80      	pop	{r7, pc}
 8019f94:	effffffe 	.word	0xeffffffe
 8019f98:	58000c00 	.word	0x58000c00
 8019f9c:	080198d1 	.word	0x080198d1

08019fa0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b0ae      	sub	sp, #184	@ 0xb8
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019fae:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	69db      	ldr	r3, [r3, #28]
 8019fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	689b      	ldr	r3, [r3, #8]
 8019fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8019fd6:	2b22      	cmp	r3, #34	@ 0x22
 8019fd8:	f040 8184 	bne.w	801a2e4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019fe2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8019fe6:	e127      	b.n	801a238 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019fee:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8019ffa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8019ffe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801a002:	4013      	ands	r3, r2
 801a004:	b29a      	uxth	r2, r3
 801a006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a00a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a010:	1c9a      	adds	r2, r3, #2
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a01c:	b29b      	uxth	r3, r3
 801a01e:	3b01      	subs	r3, #1
 801a020:	b29a      	uxth	r2, r3
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	69db      	ldr	r3, [r3, #28]
 801a02e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a032:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a036:	f003 0307 	and.w	r3, r3, #7
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d053      	beq.n	801a0e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a03e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a042:	f003 0301 	and.w	r3, r3, #1
 801a046:	2b00      	cmp	r3, #0
 801a048:	d011      	beq.n	801a06e <UART_RxISR_16BIT_FIFOEN+0xce>
 801a04a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a04e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a052:	2b00      	cmp	r3, #0
 801a054:	d00b      	beq.n	801a06e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	2201      	movs	r2, #1
 801a05c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a064:	f043 0201 	orr.w	r2, r3, #1
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a06e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a072:	f003 0302 	and.w	r3, r3, #2
 801a076:	2b00      	cmp	r3, #0
 801a078:	d011      	beq.n	801a09e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801a07a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a07e:	f003 0301 	and.w	r3, r3, #1
 801a082:	2b00      	cmp	r3, #0
 801a084:	d00b      	beq.n	801a09e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	2202      	movs	r2, #2
 801a08c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a094:	f043 0204 	orr.w	r2, r3, #4
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a09e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a0a2:	f003 0304 	and.w	r3, r3, #4
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d011      	beq.n	801a0ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 801a0aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a0ae:	f003 0301 	and.w	r3, r3, #1
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d00b      	beq.n	801a0ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	2204      	movs	r2, #4
 801a0bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a0c4:	f043 0202 	orr.w	r2, r3, #2
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d006      	beq.n	801a0e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a0d8:	6878      	ldr	r0, [r7, #4]
 801a0da:	f7fe f851 	bl	8018180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	2200      	movs	r2, #0
 801a0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a0ec:	b29b      	uxth	r3, r3
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	f040 80a2 	bne.w	801a238 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a0fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a0fc:	e853 3f00 	ldrex	r3, [r3]
 801a100:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801a102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a108:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	461a      	mov	r2, r3
 801a112:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a116:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a11a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a11c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a11e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a122:	e841 2300 	strex	r3, r2, [r1]
 801a126:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801a128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d1e2      	bne.n	801a0f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	3308      	adds	r3, #8
 801a134:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a136:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a138:	e853 3f00 	ldrex	r3, [r3]
 801a13c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801a13e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a140:	4b6e      	ldr	r3, [pc, #440]	@ (801a2fc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801a142:	4013      	ands	r3, r2
 801a144:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	3308      	adds	r3, #8
 801a14e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a152:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a154:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a156:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801a158:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801a15a:	e841 2300 	strex	r3, r2, [r1]
 801a15e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801a160:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a162:	2b00      	cmp	r3, #0
 801a164:	d1e3      	bne.n	801a12e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	2220      	movs	r2, #32
 801a16a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	2200      	movs	r2, #0
 801a172:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	2200      	movs	r2, #0
 801a178:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	4a60      	ldr	r2, [pc, #384]	@ (801a300 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801a180:	4293      	cmp	r3, r2
 801a182:	d021      	beq.n	801a1c8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	685b      	ldr	r3, [r3, #4]
 801a18a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d01a      	beq.n	801a1c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	681b      	ldr	r3, [r3, #0]
 801a196:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a19a:	e853 3f00 	ldrex	r3, [r3]
 801a19e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a1a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a1a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a1a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	461a      	mov	r2, r3
 801a1b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a1b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a1b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a1ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a1bc:	e841 2300 	strex	r3, r2, [r1]
 801a1c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a1c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d1e4      	bne.n	801a192 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a1cc:	2b01      	cmp	r3, #1
 801a1ce:	d130      	bne.n	801a232 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	2200      	movs	r2, #0
 801a1d4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1de:	e853 3f00 	ldrex	r3, [r3]
 801a1e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a1e6:	f023 0310 	bic.w	r3, r3, #16
 801a1ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	461a      	mov	r2, r3
 801a1f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a1f8:	647b      	str	r3, [r7, #68]	@ 0x44
 801a1fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a1fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a1fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a200:	e841 2300 	strex	r3, r2, [r1]
 801a204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d1e4      	bne.n	801a1d6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	69db      	ldr	r3, [r3, #28]
 801a212:	f003 0310 	and.w	r3, r3, #16
 801a216:	2b10      	cmp	r3, #16
 801a218:	d103      	bne.n	801a222 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	2210      	movs	r2, #16
 801a220:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a228:	4619      	mov	r1, r3
 801a22a:	6878      	ldr	r0, [r7, #4]
 801a22c:	f7fd ffb2 	bl	8018194 <HAL_UARTEx_RxEventCallback>
 801a230:	e002      	b.n	801a238 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801a232:	6878      	ldr	r0, [r7, #4]
 801a234:	f7eb ffee 	bl	8006214 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a238:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d006      	beq.n	801a24e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801a240:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801a244:	f003 0320 	and.w	r3, r3, #32
 801a248:	2b00      	cmp	r3, #0
 801a24a:	f47f aecd 	bne.w	8019fe8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a254:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801a258:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d049      	beq.n	801a2f4 <UART_RxISR_16BIT_FIFOEN+0x354>
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a266:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801a26a:	429a      	cmp	r2, r3
 801a26c:	d242      	bcs.n	801a2f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	3308      	adds	r3, #8
 801a274:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a278:	e853 3f00 	ldrex	r3, [r3]
 801a27c:	623b      	str	r3, [r7, #32]
   return(result);
 801a27e:	6a3b      	ldr	r3, [r7, #32]
 801a280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a284:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	3308      	adds	r3, #8
 801a28e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a292:	633a      	str	r2, [r7, #48]	@ 0x30
 801a294:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a29a:	e841 2300 	strex	r3, r2, [r1]
 801a29e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	d1e3      	bne.n	801a26e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	4a16      	ldr	r2, [pc, #88]	@ (801a304 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801a2aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2b2:	693b      	ldr	r3, [r7, #16]
 801a2b4:	e853 3f00 	ldrex	r3, [r3]
 801a2b8:	60fb      	str	r3, [r7, #12]
   return(result);
 801a2ba:	68fb      	ldr	r3, [r7, #12]
 801a2bc:	f043 0320 	orr.w	r3, r3, #32
 801a2c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	461a      	mov	r2, r3
 801a2ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a2ce:	61fb      	str	r3, [r7, #28]
 801a2d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2d2:	69b9      	ldr	r1, [r7, #24]
 801a2d4:	69fa      	ldr	r2, [r7, #28]
 801a2d6:	e841 2300 	strex	r3, r2, [r1]
 801a2da:	617b      	str	r3, [r7, #20]
   return(result);
 801a2dc:	697b      	ldr	r3, [r7, #20]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d1e4      	bne.n	801a2ac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a2e2:	e007      	b.n	801a2f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	699a      	ldr	r2, [r3, #24]
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	f042 0208 	orr.w	r2, r2, #8
 801a2f2:	619a      	str	r2, [r3, #24]
}
 801a2f4:	bf00      	nop
 801a2f6:	37b8      	adds	r7, #184	@ 0xb8
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	bd80      	pop	{r7, pc}
 801a2fc:	effffffe 	.word	0xeffffffe
 801a300:	58000c00 	.word	0x58000c00
 801a304:	08019a89 	.word	0x08019a89

0801a308 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a308:	b480      	push	{r7}
 801a30a:	b083      	sub	sp, #12
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a310:	bf00      	nop
 801a312:	370c      	adds	r7, #12
 801a314:	46bd      	mov	sp, r7
 801a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a31a:	4770      	bx	lr

0801a31c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a31c:	b480      	push	{r7}
 801a31e:	b083      	sub	sp, #12
 801a320:	af00      	add	r7, sp, #0
 801a322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a324:	bf00      	nop
 801a326:	370c      	adds	r7, #12
 801a328:	46bd      	mov	sp, r7
 801a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a32e:	4770      	bx	lr

0801a330 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a330:	b480      	push	{r7}
 801a332:	b083      	sub	sp, #12
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a338:	bf00      	nop
 801a33a:	370c      	adds	r7, #12
 801a33c:	46bd      	mov	sp, r7
 801a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a342:	4770      	bx	lr

0801a344 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a344:	b480      	push	{r7}
 801a346:	b085      	sub	sp, #20
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a352:	2b01      	cmp	r3, #1
 801a354:	d101      	bne.n	801a35a <HAL_UARTEx_DisableFifoMode+0x16>
 801a356:	2302      	movs	r3, #2
 801a358:	e027      	b.n	801a3aa <HAL_UARTEx_DisableFifoMode+0x66>
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	2201      	movs	r2, #1
 801a35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	2224      	movs	r2, #36	@ 0x24
 801a366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	681a      	ldr	r2, [r3, #0]
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	f022 0201 	bic.w	r2, r2, #1
 801a380:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801a388:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	2200      	movs	r2, #0
 801a38e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	68fa      	ldr	r2, [r7, #12]
 801a396:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	2220      	movs	r2, #32
 801a39c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a3a8:	2300      	movs	r3, #0
}
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	3714      	adds	r7, #20
 801a3ae:	46bd      	mov	sp, r7
 801a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3b4:	4770      	bx	lr

0801a3b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a3b6:	b580      	push	{r7, lr}
 801a3b8:	b084      	sub	sp, #16
 801a3ba:	af00      	add	r7, sp, #0
 801a3bc:	6078      	str	r0, [r7, #4]
 801a3be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a3c6:	2b01      	cmp	r3, #1
 801a3c8:	d101      	bne.n	801a3ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a3ca:	2302      	movs	r3, #2
 801a3cc:	e02d      	b.n	801a42a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	2201      	movs	r2, #1
 801a3d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	2224      	movs	r2, #36	@ 0x24
 801a3da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	681a      	ldr	r2, [r3, #0]
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	f022 0201 	bic.w	r2, r2, #1
 801a3f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	689b      	ldr	r3, [r3, #8]
 801a3fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	683a      	ldr	r2, [r7, #0]
 801a406:	430a      	orrs	r2, r1
 801a408:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a40a:	6878      	ldr	r0, [r7, #4]
 801a40c:	f000 f850 	bl	801a4b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	68fa      	ldr	r2, [r7, #12]
 801a416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	2220      	movs	r2, #32
 801a41c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	2200      	movs	r2, #0
 801a424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a428:	2300      	movs	r3, #0
}
 801a42a:	4618      	mov	r0, r3
 801a42c:	3710      	adds	r7, #16
 801a42e:	46bd      	mov	sp, r7
 801a430:	bd80      	pop	{r7, pc}

0801a432 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a432:	b580      	push	{r7, lr}
 801a434:	b084      	sub	sp, #16
 801a436:	af00      	add	r7, sp, #0
 801a438:	6078      	str	r0, [r7, #4]
 801a43a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801a442:	2b01      	cmp	r3, #1
 801a444:	d101      	bne.n	801a44a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a446:	2302      	movs	r3, #2
 801a448:	e02d      	b.n	801a4a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	2201      	movs	r2, #1
 801a44e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	2224      	movs	r2, #36	@ 0x24
 801a456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	681a      	ldr	r2, [r3, #0]
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	f022 0201 	bic.w	r2, r2, #1
 801a470:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	689b      	ldr	r3, [r3, #8]
 801a478:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	683a      	ldr	r2, [r7, #0]
 801a482:	430a      	orrs	r2, r1
 801a484:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a486:	6878      	ldr	r0, [r7, #4]
 801a488:	f000 f812 	bl	801a4b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	68fa      	ldr	r2, [r7, #12]
 801a492:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	2220      	movs	r2, #32
 801a498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	2200      	movs	r2, #0
 801a4a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a4a4:	2300      	movs	r3, #0
}
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	3710      	adds	r7, #16
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	bd80      	pop	{r7, pc}
	...

0801a4b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a4b0:	b480      	push	{r7}
 801a4b2:	b085      	sub	sp, #20
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d108      	bne.n	801a4d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	2201      	movs	r2, #1
 801a4c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	2201      	movs	r2, #1
 801a4cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a4d0:	e031      	b.n	801a536 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a4d2:	2310      	movs	r3, #16
 801a4d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a4d6:	2310      	movs	r3, #16
 801a4d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	689b      	ldr	r3, [r3, #8]
 801a4e0:	0e5b      	lsrs	r3, r3, #25
 801a4e2:	b2db      	uxtb	r3, r3
 801a4e4:	f003 0307 	and.w	r3, r3, #7
 801a4e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	689b      	ldr	r3, [r3, #8]
 801a4f0:	0f5b      	lsrs	r3, r3, #29
 801a4f2:	b2db      	uxtb	r3, r3
 801a4f4:	f003 0307 	and.w	r3, r3, #7
 801a4f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a4fa:	7bbb      	ldrb	r3, [r7, #14]
 801a4fc:	7b3a      	ldrb	r2, [r7, #12]
 801a4fe:	4911      	ldr	r1, [pc, #68]	@ (801a544 <UARTEx_SetNbDataToProcess+0x94>)
 801a500:	5c8a      	ldrb	r2, [r1, r2]
 801a502:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801a506:	7b3a      	ldrb	r2, [r7, #12]
 801a508:	490f      	ldr	r1, [pc, #60]	@ (801a548 <UARTEx_SetNbDataToProcess+0x98>)
 801a50a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801a50c:	fb93 f3f2 	sdiv	r3, r3, r2
 801a510:	b29a      	uxth	r2, r3
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a518:	7bfb      	ldrb	r3, [r7, #15]
 801a51a:	7b7a      	ldrb	r2, [r7, #13]
 801a51c:	4909      	ldr	r1, [pc, #36]	@ (801a544 <UARTEx_SetNbDataToProcess+0x94>)
 801a51e:	5c8a      	ldrb	r2, [r1, r2]
 801a520:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801a524:	7b7a      	ldrb	r2, [r7, #13]
 801a526:	4908      	ldr	r1, [pc, #32]	@ (801a548 <UARTEx_SetNbDataToProcess+0x98>)
 801a528:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801a52a:	fb93 f3f2 	sdiv	r3, r3, r2
 801a52e:	b29a      	uxth	r2, r3
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801a536:	bf00      	nop
 801a538:	3714      	adds	r7, #20
 801a53a:	46bd      	mov	sp, r7
 801a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a540:	4770      	bx	lr
 801a542:	bf00      	nop
 801a544:	0801e3ac 	.word	0x0801e3ac
 801a548:	0801e3b4 	.word	0x0801e3b4

0801a54c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801a54c:	b580      	push	{r7, lr}
 801a54e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801a550:	4904      	ldr	r1, [pc, #16]	@ (801a564 <MX_FATFS_Init+0x18>)
 801a552:	4805      	ldr	r0, [pc, #20]	@ (801a568 <MX_FATFS_Init+0x1c>)
 801a554:	f003 f8d8 	bl	801d708 <FATFS_LinkDriver>
 801a558:	4603      	mov	r3, r0
 801a55a:	461a      	mov	r2, r3
 801a55c:	4b03      	ldr	r3, [pc, #12]	@ (801a56c <MX_FATFS_Init+0x20>)
 801a55e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801a560:	bf00      	nop
 801a562:	bd80      	pop	{r7, pc}
 801a564:	2400054c 	.word	0x2400054c
 801a568:	24000014 	.word	0x24000014
 801a56c:	24000548 	.word	0x24000548

0801a570 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801a570:	b480      	push	{r7}
 801a572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801a574:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801a576:	4618      	mov	r0, r3
 801a578:	46bd      	mov	sp, r7
 801a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a57e:	4770      	bx	lr

0801a580 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 801a580:	b580      	push	{r7, lr}
 801a582:	b082      	sub	sp, #8
 801a584:	af00      	add	r7, sp, #0
 801a586:	4603      	mov	r3, r0
 801a588:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 801a58a:	79fb      	ldrb	r3, [r7, #7]
 801a58c:	4618      	mov	r0, r3
 801a58e:	f7e9 feed 	bl	800436c <SD_disk_initialize>
 801a592:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801a594:	4618      	mov	r0, r3
 801a596:	3708      	adds	r7, #8
 801a598:	46bd      	mov	sp, r7
 801a59a:	bd80      	pop	{r7, pc}

0801a59c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801a59c:	b580      	push	{r7, lr}
 801a59e:	b082      	sub	sp, #8
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	4603      	mov	r3, r0
 801a5a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 801a5a6:	79fb      	ldrb	r3, [r7, #7]
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	f7e9 ffcb 	bl	8004544 <SD_disk_status>
 801a5ae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	3708      	adds	r7, #8
 801a5b4:	46bd      	mov	sp, r7
 801a5b6:	bd80      	pop	{r7, pc}

0801a5b8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b084      	sub	sp, #16
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	60b9      	str	r1, [r7, #8]
 801a5c0:	607a      	str	r2, [r7, #4]
 801a5c2:	603b      	str	r3, [r7, #0]
 801a5c4:	4603      	mov	r3, r0
 801a5c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 801a5c8:	7bf8      	ldrb	r0, [r7, #15]
 801a5ca:	683b      	ldr	r3, [r7, #0]
 801a5cc:	687a      	ldr	r2, [r7, #4]
 801a5ce:	68b9      	ldr	r1, [r7, #8]
 801a5d0:	f7e9 ffce 	bl	8004570 <SD_disk_read>
 801a5d4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	3710      	adds	r7, #16
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	bd80      	pop	{r7, pc}

0801a5de <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801a5de:	b580      	push	{r7, lr}
 801a5e0:	b084      	sub	sp, #16
 801a5e2:	af00      	add	r7, sp, #0
 801a5e4:	60b9      	str	r1, [r7, #8]
 801a5e6:	607a      	str	r2, [r7, #4]
 801a5e8:	603b      	str	r3, [r7, #0]
 801a5ea:	4603      	mov	r3, r0
 801a5ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 801a5ee:	7bf8      	ldrb	r0, [r7, #15]
 801a5f0:	683b      	ldr	r3, [r7, #0]
 801a5f2:	687a      	ldr	r2, [r7, #4]
 801a5f4:	68b9      	ldr	r1, [r7, #8]
 801a5f6:	f7ea f825 	bl	8004644 <SD_disk_write>
 801a5fa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	3710      	adds	r7, #16
 801a600:	46bd      	mov	sp, r7
 801a602:	bd80      	pop	{r7, pc}

0801a604 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801a604:	b580      	push	{r7, lr}
 801a606:	b082      	sub	sp, #8
 801a608:	af00      	add	r7, sp, #0
 801a60a:	4603      	mov	r3, r0
 801a60c:	603a      	str	r2, [r7, #0]
 801a60e:	71fb      	strb	r3, [r7, #7]
 801a610:	460b      	mov	r3, r1
 801a612:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 801a614:	79b9      	ldrb	r1, [r7, #6]
 801a616:	79fb      	ldrb	r3, [r7, #7]
 801a618:	683a      	ldr	r2, [r7, #0]
 801a61a:	4618      	mov	r0, r3
 801a61c:	f7ea f896 	bl	800474c <SD_disk_ioctl>
 801a620:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 801a622:	4618      	mov	r0, r3
 801a624:	3708      	adds	r7, #8
 801a626:	46bd      	mov	sp, r7
 801a628:	bd80      	pop	{r7, pc}
	...

0801a62c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801a62c:	b580      	push	{r7, lr}
 801a62e:	b084      	sub	sp, #16
 801a630:	af00      	add	r7, sp, #0
 801a632:	4603      	mov	r3, r0
 801a634:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801a636:	79fb      	ldrb	r3, [r7, #7]
 801a638:	4a08      	ldr	r2, [pc, #32]	@ (801a65c <disk_status+0x30>)
 801a63a:	009b      	lsls	r3, r3, #2
 801a63c:	4413      	add	r3, r2
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	685b      	ldr	r3, [r3, #4]
 801a642:	79fa      	ldrb	r2, [r7, #7]
 801a644:	4905      	ldr	r1, [pc, #20]	@ (801a65c <disk_status+0x30>)
 801a646:	440a      	add	r2, r1
 801a648:	7a12      	ldrb	r2, [r2, #8]
 801a64a:	4610      	mov	r0, r2
 801a64c:	4798      	blx	r3
 801a64e:	4603      	mov	r3, r0
 801a650:	73fb      	strb	r3, [r7, #15]
  return stat;
 801a652:	7bfb      	ldrb	r3, [r7, #15]
}
 801a654:	4618      	mov	r0, r3
 801a656:	3710      	adds	r7, #16
 801a658:	46bd      	mov	sp, r7
 801a65a:	bd80      	pop	{r7, pc}
 801a65c:	24000768 	.word	0x24000768

0801a660 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801a660:	b580      	push	{r7, lr}
 801a662:	b084      	sub	sp, #16
 801a664:	af00      	add	r7, sp, #0
 801a666:	4603      	mov	r3, r0
 801a668:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801a66a:	2300      	movs	r3, #0
 801a66c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801a66e:	79fb      	ldrb	r3, [r7, #7]
 801a670:	4a0e      	ldr	r2, [pc, #56]	@ (801a6ac <disk_initialize+0x4c>)
 801a672:	5cd3      	ldrb	r3, [r2, r3]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d114      	bne.n	801a6a2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801a678:	79fb      	ldrb	r3, [r7, #7]
 801a67a:	4a0c      	ldr	r2, [pc, #48]	@ (801a6ac <disk_initialize+0x4c>)
 801a67c:	009b      	lsls	r3, r3, #2
 801a67e:	4413      	add	r3, r2
 801a680:	685b      	ldr	r3, [r3, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	79fa      	ldrb	r2, [r7, #7]
 801a686:	4909      	ldr	r1, [pc, #36]	@ (801a6ac <disk_initialize+0x4c>)
 801a688:	440a      	add	r2, r1
 801a68a:	7a12      	ldrb	r2, [r2, #8]
 801a68c:	4610      	mov	r0, r2
 801a68e:	4798      	blx	r3
 801a690:	4603      	mov	r3, r0
 801a692:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801a694:	7bfb      	ldrb	r3, [r7, #15]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d103      	bne.n	801a6a2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801a69a:	79fb      	ldrb	r3, [r7, #7]
 801a69c:	4a03      	ldr	r2, [pc, #12]	@ (801a6ac <disk_initialize+0x4c>)
 801a69e:	2101      	movs	r1, #1
 801a6a0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801a6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6a4:	4618      	mov	r0, r3
 801a6a6:	3710      	adds	r7, #16
 801a6a8:	46bd      	mov	sp, r7
 801a6aa:	bd80      	pop	{r7, pc}
 801a6ac:	24000768 	.word	0x24000768

0801a6b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801a6b0:	b590      	push	{r4, r7, lr}
 801a6b2:	b087      	sub	sp, #28
 801a6b4:	af00      	add	r7, sp, #0
 801a6b6:	60b9      	str	r1, [r7, #8]
 801a6b8:	607a      	str	r2, [r7, #4]
 801a6ba:	603b      	str	r3, [r7, #0]
 801a6bc:	4603      	mov	r3, r0
 801a6be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801a6c0:	7bfb      	ldrb	r3, [r7, #15]
 801a6c2:	4a0a      	ldr	r2, [pc, #40]	@ (801a6ec <disk_read+0x3c>)
 801a6c4:	009b      	lsls	r3, r3, #2
 801a6c6:	4413      	add	r3, r2
 801a6c8:	685b      	ldr	r3, [r3, #4]
 801a6ca:	689c      	ldr	r4, [r3, #8]
 801a6cc:	7bfb      	ldrb	r3, [r7, #15]
 801a6ce:	4a07      	ldr	r2, [pc, #28]	@ (801a6ec <disk_read+0x3c>)
 801a6d0:	4413      	add	r3, r2
 801a6d2:	7a18      	ldrb	r0, [r3, #8]
 801a6d4:	683b      	ldr	r3, [r7, #0]
 801a6d6:	687a      	ldr	r2, [r7, #4]
 801a6d8:	68b9      	ldr	r1, [r7, #8]
 801a6da:	47a0      	blx	r4
 801a6dc:	4603      	mov	r3, r0
 801a6de:	75fb      	strb	r3, [r7, #23]
  return res;
 801a6e0:	7dfb      	ldrb	r3, [r7, #23]
}
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	371c      	adds	r7, #28
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	bd90      	pop	{r4, r7, pc}
 801a6ea:	bf00      	nop
 801a6ec:	24000768 	.word	0x24000768

0801a6f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801a6f0:	b590      	push	{r4, r7, lr}
 801a6f2:	b087      	sub	sp, #28
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	60b9      	str	r1, [r7, #8]
 801a6f8:	607a      	str	r2, [r7, #4]
 801a6fa:	603b      	str	r3, [r7, #0]
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801a700:	7bfb      	ldrb	r3, [r7, #15]
 801a702:	4a0a      	ldr	r2, [pc, #40]	@ (801a72c <disk_write+0x3c>)
 801a704:	009b      	lsls	r3, r3, #2
 801a706:	4413      	add	r3, r2
 801a708:	685b      	ldr	r3, [r3, #4]
 801a70a:	68dc      	ldr	r4, [r3, #12]
 801a70c:	7bfb      	ldrb	r3, [r7, #15]
 801a70e:	4a07      	ldr	r2, [pc, #28]	@ (801a72c <disk_write+0x3c>)
 801a710:	4413      	add	r3, r2
 801a712:	7a18      	ldrb	r0, [r3, #8]
 801a714:	683b      	ldr	r3, [r7, #0]
 801a716:	687a      	ldr	r2, [r7, #4]
 801a718:	68b9      	ldr	r1, [r7, #8]
 801a71a:	47a0      	blx	r4
 801a71c:	4603      	mov	r3, r0
 801a71e:	75fb      	strb	r3, [r7, #23]
  return res;
 801a720:	7dfb      	ldrb	r3, [r7, #23]
}
 801a722:	4618      	mov	r0, r3
 801a724:	371c      	adds	r7, #28
 801a726:	46bd      	mov	sp, r7
 801a728:	bd90      	pop	{r4, r7, pc}
 801a72a:	bf00      	nop
 801a72c:	24000768 	.word	0x24000768

0801a730 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b084      	sub	sp, #16
 801a734:	af00      	add	r7, sp, #0
 801a736:	4603      	mov	r3, r0
 801a738:	603a      	str	r2, [r7, #0]
 801a73a:	71fb      	strb	r3, [r7, #7]
 801a73c:	460b      	mov	r3, r1
 801a73e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801a740:	79fb      	ldrb	r3, [r7, #7]
 801a742:	4a09      	ldr	r2, [pc, #36]	@ (801a768 <disk_ioctl+0x38>)
 801a744:	009b      	lsls	r3, r3, #2
 801a746:	4413      	add	r3, r2
 801a748:	685b      	ldr	r3, [r3, #4]
 801a74a:	691b      	ldr	r3, [r3, #16]
 801a74c:	79fa      	ldrb	r2, [r7, #7]
 801a74e:	4906      	ldr	r1, [pc, #24]	@ (801a768 <disk_ioctl+0x38>)
 801a750:	440a      	add	r2, r1
 801a752:	7a10      	ldrb	r0, [r2, #8]
 801a754:	79b9      	ldrb	r1, [r7, #6]
 801a756:	683a      	ldr	r2, [r7, #0]
 801a758:	4798      	blx	r3
 801a75a:	4603      	mov	r3, r0
 801a75c:	73fb      	strb	r3, [r7, #15]
  return res;
 801a75e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a760:	4618      	mov	r0, r3
 801a762:	3710      	adds	r7, #16
 801a764:	46bd      	mov	sp, r7
 801a766:	bd80      	pop	{r7, pc}
 801a768:	24000768 	.word	0x24000768

0801a76c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801a76c:	b480      	push	{r7}
 801a76e:	b085      	sub	sp, #20
 801a770:	af00      	add	r7, sp, #0
 801a772:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	3301      	adds	r3, #1
 801a778:	781b      	ldrb	r3, [r3, #0]
 801a77a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801a77c:	89fb      	ldrh	r3, [r7, #14]
 801a77e:	021b      	lsls	r3, r3, #8
 801a780:	b21a      	sxth	r2, r3
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	b21b      	sxth	r3, r3
 801a788:	4313      	orrs	r3, r2
 801a78a:	b21b      	sxth	r3, r3
 801a78c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801a78e:	89fb      	ldrh	r3, [r7, #14]
}
 801a790:	4618      	mov	r0, r3
 801a792:	3714      	adds	r7, #20
 801a794:	46bd      	mov	sp, r7
 801a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a79a:	4770      	bx	lr

0801a79c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801a79c:	b480      	push	{r7}
 801a79e:	b085      	sub	sp, #20
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	3303      	adds	r3, #3
 801a7a8:	781b      	ldrb	r3, [r3, #0]
 801a7aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	021b      	lsls	r3, r3, #8
 801a7b0:	687a      	ldr	r2, [r7, #4]
 801a7b2:	3202      	adds	r2, #2
 801a7b4:	7812      	ldrb	r2, [r2, #0]
 801a7b6:	4313      	orrs	r3, r2
 801a7b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801a7ba:	68fb      	ldr	r3, [r7, #12]
 801a7bc:	021b      	lsls	r3, r3, #8
 801a7be:	687a      	ldr	r2, [r7, #4]
 801a7c0:	3201      	adds	r2, #1
 801a7c2:	7812      	ldrb	r2, [r2, #0]
 801a7c4:	4313      	orrs	r3, r2
 801a7c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801a7c8:	68fb      	ldr	r3, [r7, #12]
 801a7ca:	021b      	lsls	r3, r3, #8
 801a7cc:	687a      	ldr	r2, [r7, #4]
 801a7ce:	7812      	ldrb	r2, [r2, #0]
 801a7d0:	4313      	orrs	r3, r2
 801a7d2:	60fb      	str	r3, [r7, #12]
	return rv;
 801a7d4:	68fb      	ldr	r3, [r7, #12]
}
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	3714      	adds	r7, #20
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7e0:	4770      	bx	lr

0801a7e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801a7e2:	b480      	push	{r7}
 801a7e4:	b083      	sub	sp, #12
 801a7e6:	af00      	add	r7, sp, #0
 801a7e8:	6078      	str	r0, [r7, #4]
 801a7ea:	460b      	mov	r3, r1
 801a7ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	1c5a      	adds	r2, r3, #1
 801a7f2:	607a      	str	r2, [r7, #4]
 801a7f4:	887a      	ldrh	r2, [r7, #2]
 801a7f6:	b2d2      	uxtb	r2, r2
 801a7f8:	701a      	strb	r2, [r3, #0]
 801a7fa:	887b      	ldrh	r3, [r7, #2]
 801a7fc:	0a1b      	lsrs	r3, r3, #8
 801a7fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	1c5a      	adds	r2, r3, #1
 801a804:	607a      	str	r2, [r7, #4]
 801a806:	887a      	ldrh	r2, [r7, #2]
 801a808:	b2d2      	uxtb	r2, r2
 801a80a:	701a      	strb	r2, [r3, #0]
}
 801a80c:	bf00      	nop
 801a80e:	370c      	adds	r7, #12
 801a810:	46bd      	mov	sp, r7
 801a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a816:	4770      	bx	lr

0801a818 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801a818:	b480      	push	{r7}
 801a81a:	b083      	sub	sp, #12
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	6078      	str	r0, [r7, #4]
 801a820:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	1c5a      	adds	r2, r3, #1
 801a826:	607a      	str	r2, [r7, #4]
 801a828:	683a      	ldr	r2, [r7, #0]
 801a82a:	b2d2      	uxtb	r2, r2
 801a82c:	701a      	strb	r2, [r3, #0]
 801a82e:	683b      	ldr	r3, [r7, #0]
 801a830:	0a1b      	lsrs	r3, r3, #8
 801a832:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	1c5a      	adds	r2, r3, #1
 801a838:	607a      	str	r2, [r7, #4]
 801a83a:	683a      	ldr	r2, [r7, #0]
 801a83c:	b2d2      	uxtb	r2, r2
 801a83e:	701a      	strb	r2, [r3, #0]
 801a840:	683b      	ldr	r3, [r7, #0]
 801a842:	0a1b      	lsrs	r3, r3, #8
 801a844:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	1c5a      	adds	r2, r3, #1
 801a84a:	607a      	str	r2, [r7, #4]
 801a84c:	683a      	ldr	r2, [r7, #0]
 801a84e:	b2d2      	uxtb	r2, r2
 801a850:	701a      	strb	r2, [r3, #0]
 801a852:	683b      	ldr	r3, [r7, #0]
 801a854:	0a1b      	lsrs	r3, r3, #8
 801a856:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	1c5a      	adds	r2, r3, #1
 801a85c:	607a      	str	r2, [r7, #4]
 801a85e:	683a      	ldr	r2, [r7, #0]
 801a860:	b2d2      	uxtb	r2, r2
 801a862:	701a      	strb	r2, [r3, #0]
}
 801a864:	bf00      	nop
 801a866:	370c      	adds	r7, #12
 801a868:	46bd      	mov	sp, r7
 801a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a86e:	4770      	bx	lr

0801a870 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801a870:	b480      	push	{r7}
 801a872:	b087      	sub	sp, #28
 801a874:	af00      	add	r7, sp, #0
 801a876:	60f8      	str	r0, [r7, #12]
 801a878:	60b9      	str	r1, [r7, #8]
 801a87a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d00d      	beq.n	801a8a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801a88a:	693a      	ldr	r2, [r7, #16]
 801a88c:	1c53      	adds	r3, r2, #1
 801a88e:	613b      	str	r3, [r7, #16]
 801a890:	697b      	ldr	r3, [r7, #20]
 801a892:	1c59      	adds	r1, r3, #1
 801a894:	6179      	str	r1, [r7, #20]
 801a896:	7812      	ldrb	r2, [r2, #0]
 801a898:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	3b01      	subs	r3, #1
 801a89e:	607b      	str	r3, [r7, #4]
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d1f1      	bne.n	801a88a <mem_cpy+0x1a>
	}
}
 801a8a6:	bf00      	nop
 801a8a8:	371c      	adds	r7, #28
 801a8aa:	46bd      	mov	sp, r7
 801a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8b0:	4770      	bx	lr

0801a8b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801a8b2:	b480      	push	{r7}
 801a8b4:	b087      	sub	sp, #28
 801a8b6:	af00      	add	r7, sp, #0
 801a8b8:	60f8      	str	r0, [r7, #12]
 801a8ba:	60b9      	str	r1, [r7, #8]
 801a8bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801a8c2:	697b      	ldr	r3, [r7, #20]
 801a8c4:	1c5a      	adds	r2, r3, #1
 801a8c6:	617a      	str	r2, [r7, #20]
 801a8c8:	68ba      	ldr	r2, [r7, #8]
 801a8ca:	b2d2      	uxtb	r2, r2
 801a8cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	3b01      	subs	r3, #1
 801a8d2:	607b      	str	r3, [r7, #4]
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d1f3      	bne.n	801a8c2 <mem_set+0x10>
}
 801a8da:	bf00      	nop
 801a8dc:	bf00      	nop
 801a8de:	371c      	adds	r7, #28
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e6:	4770      	bx	lr

0801a8e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801a8e8:	b480      	push	{r7}
 801a8ea:	b089      	sub	sp, #36	@ 0x24
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	60f8      	str	r0, [r7, #12]
 801a8f0:	60b9      	str	r1, [r7, #8]
 801a8f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	61fb      	str	r3, [r7, #28]
 801a8f8:	68bb      	ldr	r3, [r7, #8]
 801a8fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801a900:	69fb      	ldr	r3, [r7, #28]
 801a902:	1c5a      	adds	r2, r3, #1
 801a904:	61fa      	str	r2, [r7, #28]
 801a906:	781b      	ldrb	r3, [r3, #0]
 801a908:	4619      	mov	r1, r3
 801a90a:	69bb      	ldr	r3, [r7, #24]
 801a90c:	1c5a      	adds	r2, r3, #1
 801a90e:	61ba      	str	r2, [r7, #24]
 801a910:	781b      	ldrb	r3, [r3, #0]
 801a912:	1acb      	subs	r3, r1, r3
 801a914:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	3b01      	subs	r3, #1
 801a91a:	607b      	str	r3, [r7, #4]
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d002      	beq.n	801a928 <mem_cmp+0x40>
 801a922:	697b      	ldr	r3, [r7, #20]
 801a924:	2b00      	cmp	r3, #0
 801a926:	d0eb      	beq.n	801a900 <mem_cmp+0x18>

	return r;
 801a928:	697b      	ldr	r3, [r7, #20]
}
 801a92a:	4618      	mov	r0, r3
 801a92c:	3724      	adds	r7, #36	@ 0x24
 801a92e:	46bd      	mov	sp, r7
 801a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a934:	4770      	bx	lr

0801a936 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801a936:	b480      	push	{r7}
 801a938:	b083      	sub	sp, #12
 801a93a:	af00      	add	r7, sp, #0
 801a93c:	6078      	str	r0, [r7, #4]
 801a93e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801a940:	e002      	b.n	801a948 <chk_chr+0x12>
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	3301      	adds	r3, #1
 801a946:	607b      	str	r3, [r7, #4]
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	781b      	ldrb	r3, [r3, #0]
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d005      	beq.n	801a95c <chk_chr+0x26>
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	781b      	ldrb	r3, [r3, #0]
 801a954:	461a      	mov	r2, r3
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	4293      	cmp	r3, r2
 801a95a:	d1f2      	bne.n	801a942 <chk_chr+0xc>
	return *str;
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	781b      	ldrb	r3, [r3, #0]
}
 801a960:	4618      	mov	r0, r3
 801a962:	370c      	adds	r7, #12
 801a964:	46bd      	mov	sp, r7
 801a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a96a:	4770      	bx	lr

0801a96c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801a96c:	b480      	push	{r7}
 801a96e:	b085      	sub	sp, #20
 801a970:	af00      	add	r7, sp, #0
 801a972:	6078      	str	r0, [r7, #4]
 801a974:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a976:	2300      	movs	r3, #0
 801a978:	60bb      	str	r3, [r7, #8]
 801a97a:	68bb      	ldr	r3, [r7, #8]
 801a97c:	60fb      	str	r3, [r7, #12]
 801a97e:	e029      	b.n	801a9d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801a980:	4a27      	ldr	r2, [pc, #156]	@ (801aa20 <chk_lock+0xb4>)
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	011b      	lsls	r3, r3, #4
 801a986:	4413      	add	r3, r2
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d01d      	beq.n	801a9ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a98e:	4a24      	ldr	r2, [pc, #144]	@ (801aa20 <chk_lock+0xb4>)
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	011b      	lsls	r3, r3, #4
 801a994:	4413      	add	r3, r2
 801a996:	681a      	ldr	r2, [r3, #0]
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	429a      	cmp	r2, r3
 801a99e:	d116      	bne.n	801a9ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801a9a0:	4a1f      	ldr	r2, [pc, #124]	@ (801aa20 <chk_lock+0xb4>)
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	011b      	lsls	r3, r3, #4
 801a9a6:	4413      	add	r3, r2
 801a9a8:	3304      	adds	r3, #4
 801a9aa:	681a      	ldr	r2, [r3, #0]
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a9b0:	429a      	cmp	r2, r3
 801a9b2:	d10c      	bne.n	801a9ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a9b4:	4a1a      	ldr	r2, [pc, #104]	@ (801aa20 <chk_lock+0xb4>)
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	011b      	lsls	r3, r3, #4
 801a9ba:	4413      	add	r3, r2
 801a9bc:	3308      	adds	r3, #8
 801a9be:	681a      	ldr	r2, [r3, #0]
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801a9c4:	429a      	cmp	r2, r3
 801a9c6:	d102      	bne.n	801a9ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801a9c8:	e007      	b.n	801a9da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801a9ca:	2301      	movs	r3, #1
 801a9cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	3301      	adds	r3, #1
 801a9d2:	60fb      	str	r3, [r7, #12]
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d0d2      	beq.n	801a980 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	2b01      	cmp	r3, #1
 801a9de:	d109      	bne.n	801a9f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801a9e0:	68bb      	ldr	r3, [r7, #8]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d102      	bne.n	801a9ec <chk_lock+0x80>
 801a9e6:	683b      	ldr	r3, [r7, #0]
 801a9e8:	2b02      	cmp	r3, #2
 801a9ea:	d101      	bne.n	801a9f0 <chk_lock+0x84>
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	e010      	b.n	801aa12 <chk_lock+0xa6>
 801a9f0:	2312      	movs	r3, #18
 801a9f2:	e00e      	b.n	801aa12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801a9f4:	683b      	ldr	r3, [r7, #0]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d108      	bne.n	801aa0c <chk_lock+0xa0>
 801a9fa:	4a09      	ldr	r2, [pc, #36]	@ (801aa20 <chk_lock+0xb4>)
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	011b      	lsls	r3, r3, #4
 801aa00:	4413      	add	r3, r2
 801aa02:	330c      	adds	r3, #12
 801aa04:	881b      	ldrh	r3, [r3, #0]
 801aa06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801aa0a:	d101      	bne.n	801aa10 <chk_lock+0xa4>
 801aa0c:	2310      	movs	r3, #16
 801aa0e:	e000      	b.n	801aa12 <chk_lock+0xa6>
 801aa10:	2300      	movs	r3, #0
}
 801aa12:	4618      	mov	r0, r3
 801aa14:	3714      	adds	r7, #20
 801aa16:	46bd      	mov	sp, r7
 801aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1c:	4770      	bx	lr
 801aa1e:	bf00      	nop
 801aa20:	24000558 	.word	0x24000558

0801aa24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801aa24:	b480      	push	{r7}
 801aa26:	b083      	sub	sp, #12
 801aa28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	607b      	str	r3, [r7, #4]
 801aa2e:	e002      	b.n	801aa36 <enq_lock+0x12>
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	3301      	adds	r3, #1
 801aa34:	607b      	str	r3, [r7, #4]
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d106      	bne.n	801aa4a <enq_lock+0x26>
 801aa3c:	4a09      	ldr	r2, [pc, #36]	@ (801aa64 <enq_lock+0x40>)
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	011b      	lsls	r3, r3, #4
 801aa42:	4413      	add	r3, r2
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d1f2      	bne.n	801aa30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	2b01      	cmp	r3, #1
 801aa4e:	bf14      	ite	ne
 801aa50:	2301      	movne	r3, #1
 801aa52:	2300      	moveq	r3, #0
 801aa54:	b2db      	uxtb	r3, r3
}
 801aa56:	4618      	mov	r0, r3
 801aa58:	370c      	adds	r7, #12
 801aa5a:	46bd      	mov	sp, r7
 801aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa60:	4770      	bx	lr
 801aa62:	bf00      	nop
 801aa64:	24000558 	.word	0x24000558

0801aa68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801aa68:	b480      	push	{r7}
 801aa6a:	b085      	sub	sp, #20
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	6078      	str	r0, [r7, #4]
 801aa70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801aa72:	2300      	movs	r3, #0
 801aa74:	60fb      	str	r3, [r7, #12]
 801aa76:	e01f      	b.n	801aab8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801aa78:	4a41      	ldr	r2, [pc, #260]	@ (801ab80 <inc_lock+0x118>)
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	011b      	lsls	r3, r3, #4
 801aa7e:	4413      	add	r3, r2
 801aa80:	681a      	ldr	r2, [r3, #0]
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	429a      	cmp	r2, r3
 801aa88:	d113      	bne.n	801aab2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801aa8a:	4a3d      	ldr	r2, [pc, #244]	@ (801ab80 <inc_lock+0x118>)
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	011b      	lsls	r3, r3, #4
 801aa90:	4413      	add	r3, r2
 801aa92:	3304      	adds	r3, #4
 801aa94:	681a      	ldr	r2, [r3, #0]
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801aa9a:	429a      	cmp	r2, r3
 801aa9c:	d109      	bne.n	801aab2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801aa9e:	4a38      	ldr	r2, [pc, #224]	@ (801ab80 <inc_lock+0x118>)
 801aaa0:	68fb      	ldr	r3, [r7, #12]
 801aaa2:	011b      	lsls	r3, r3, #4
 801aaa4:	4413      	add	r3, r2
 801aaa6:	3308      	adds	r3, #8
 801aaa8:	681a      	ldr	r2, [r3, #0]
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801aaae:	429a      	cmp	r2, r3
 801aab0:	d006      	beq.n	801aac0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	3301      	adds	r3, #1
 801aab6:	60fb      	str	r3, [r7, #12]
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d0dc      	beq.n	801aa78 <inc_lock+0x10>
 801aabe:	e000      	b.n	801aac2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801aac0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	2b01      	cmp	r3, #1
 801aac6:	d132      	bne.n	801ab2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aac8:	2300      	movs	r3, #0
 801aaca:	60fb      	str	r3, [r7, #12]
 801aacc:	e002      	b.n	801aad4 <inc_lock+0x6c>
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	3301      	adds	r3, #1
 801aad2:	60fb      	str	r3, [r7, #12]
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d106      	bne.n	801aae8 <inc_lock+0x80>
 801aada:	4a29      	ldr	r2, [pc, #164]	@ (801ab80 <inc_lock+0x118>)
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	011b      	lsls	r3, r3, #4
 801aae0:	4413      	add	r3, r2
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d1f2      	bne.n	801aace <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	2b01      	cmp	r3, #1
 801aaec:	d101      	bne.n	801aaf2 <inc_lock+0x8a>
 801aaee:	2300      	movs	r3, #0
 801aaf0:	e040      	b.n	801ab74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681a      	ldr	r2, [r3, #0]
 801aaf6:	4922      	ldr	r1, [pc, #136]	@ (801ab80 <inc_lock+0x118>)
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	011b      	lsls	r3, r3, #4
 801aafc:	440b      	add	r3, r1
 801aafe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	689a      	ldr	r2, [r3, #8]
 801ab04:	491e      	ldr	r1, [pc, #120]	@ (801ab80 <inc_lock+0x118>)
 801ab06:	68fb      	ldr	r3, [r7, #12]
 801ab08:	011b      	lsls	r3, r3, #4
 801ab0a:	440b      	add	r3, r1
 801ab0c:	3304      	adds	r3, #4
 801ab0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	695a      	ldr	r2, [r3, #20]
 801ab14:	491a      	ldr	r1, [pc, #104]	@ (801ab80 <inc_lock+0x118>)
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	011b      	lsls	r3, r3, #4
 801ab1a:	440b      	add	r3, r1
 801ab1c:	3308      	adds	r3, #8
 801ab1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801ab20:	4a17      	ldr	r2, [pc, #92]	@ (801ab80 <inc_lock+0x118>)
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	011b      	lsls	r3, r3, #4
 801ab26:	4413      	add	r3, r2
 801ab28:	330c      	adds	r3, #12
 801ab2a:	2200      	movs	r2, #0
 801ab2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801ab2e:	683b      	ldr	r3, [r7, #0]
 801ab30:	2b00      	cmp	r3, #0
 801ab32:	d009      	beq.n	801ab48 <inc_lock+0xe0>
 801ab34:	4a12      	ldr	r2, [pc, #72]	@ (801ab80 <inc_lock+0x118>)
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	011b      	lsls	r3, r3, #4
 801ab3a:	4413      	add	r3, r2
 801ab3c:	330c      	adds	r3, #12
 801ab3e:	881b      	ldrh	r3, [r3, #0]
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d001      	beq.n	801ab48 <inc_lock+0xe0>
 801ab44:	2300      	movs	r3, #0
 801ab46:	e015      	b.n	801ab74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801ab48:	683b      	ldr	r3, [r7, #0]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d108      	bne.n	801ab60 <inc_lock+0xf8>
 801ab4e:	4a0c      	ldr	r2, [pc, #48]	@ (801ab80 <inc_lock+0x118>)
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	011b      	lsls	r3, r3, #4
 801ab54:	4413      	add	r3, r2
 801ab56:	330c      	adds	r3, #12
 801ab58:	881b      	ldrh	r3, [r3, #0]
 801ab5a:	3301      	adds	r3, #1
 801ab5c:	b29a      	uxth	r2, r3
 801ab5e:	e001      	b.n	801ab64 <inc_lock+0xfc>
 801ab60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ab64:	4906      	ldr	r1, [pc, #24]	@ (801ab80 <inc_lock+0x118>)
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	011b      	lsls	r3, r3, #4
 801ab6a:	440b      	add	r3, r1
 801ab6c:	330c      	adds	r3, #12
 801ab6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	3301      	adds	r3, #1
}
 801ab74:	4618      	mov	r0, r3
 801ab76:	3714      	adds	r7, #20
 801ab78:	46bd      	mov	sp, r7
 801ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab7e:	4770      	bx	lr
 801ab80:	24000558 	.word	0x24000558

0801ab84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801ab84:	b480      	push	{r7}
 801ab86:	b085      	sub	sp, #20
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	3b01      	subs	r3, #1
 801ab90:	607b      	str	r3, [r7, #4]
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d125      	bne.n	801abe4 <dec_lock+0x60>
		n = Files[i].ctr;
 801ab98:	4a17      	ldr	r2, [pc, #92]	@ (801abf8 <dec_lock+0x74>)
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	011b      	lsls	r3, r3, #4
 801ab9e:	4413      	add	r3, r2
 801aba0:	330c      	adds	r3, #12
 801aba2:	881b      	ldrh	r3, [r3, #0]
 801aba4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801aba6:	89fb      	ldrh	r3, [r7, #14]
 801aba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801abac:	d101      	bne.n	801abb2 <dec_lock+0x2e>
 801abae:	2300      	movs	r3, #0
 801abb0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801abb2:	89fb      	ldrh	r3, [r7, #14]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d002      	beq.n	801abbe <dec_lock+0x3a>
 801abb8:	89fb      	ldrh	r3, [r7, #14]
 801abba:	3b01      	subs	r3, #1
 801abbc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801abbe:	4a0e      	ldr	r2, [pc, #56]	@ (801abf8 <dec_lock+0x74>)
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	011b      	lsls	r3, r3, #4
 801abc4:	4413      	add	r3, r2
 801abc6:	330c      	adds	r3, #12
 801abc8:	89fa      	ldrh	r2, [r7, #14]
 801abca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801abcc:	89fb      	ldrh	r3, [r7, #14]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d105      	bne.n	801abde <dec_lock+0x5a>
 801abd2:	4a09      	ldr	r2, [pc, #36]	@ (801abf8 <dec_lock+0x74>)
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	011b      	lsls	r3, r3, #4
 801abd8:	4413      	add	r3, r2
 801abda:	2200      	movs	r2, #0
 801abdc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801abde:	2300      	movs	r3, #0
 801abe0:	737b      	strb	r3, [r7, #13]
 801abe2:	e001      	b.n	801abe8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801abe4:	2302      	movs	r3, #2
 801abe6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801abe8:	7b7b      	ldrb	r3, [r7, #13]
}
 801abea:	4618      	mov	r0, r3
 801abec:	3714      	adds	r7, #20
 801abee:	46bd      	mov	sp, r7
 801abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abf4:	4770      	bx	lr
 801abf6:	bf00      	nop
 801abf8:	24000558 	.word	0x24000558

0801abfc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801abfc:	b480      	push	{r7}
 801abfe:	b085      	sub	sp, #20
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801ac04:	2300      	movs	r3, #0
 801ac06:	60fb      	str	r3, [r7, #12]
 801ac08:	e010      	b.n	801ac2c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801ac0a:	4a0d      	ldr	r2, [pc, #52]	@ (801ac40 <clear_lock+0x44>)
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	011b      	lsls	r3, r3, #4
 801ac10:	4413      	add	r3, r2
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	687a      	ldr	r2, [r7, #4]
 801ac16:	429a      	cmp	r2, r3
 801ac18:	d105      	bne.n	801ac26 <clear_lock+0x2a>
 801ac1a:	4a09      	ldr	r2, [pc, #36]	@ (801ac40 <clear_lock+0x44>)
 801ac1c:	68fb      	ldr	r3, [r7, #12]
 801ac1e:	011b      	lsls	r3, r3, #4
 801ac20:	4413      	add	r3, r2
 801ac22:	2200      	movs	r2, #0
 801ac24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	3301      	adds	r3, #1
 801ac2a:	60fb      	str	r3, [r7, #12]
 801ac2c:	68fb      	ldr	r3, [r7, #12]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d0eb      	beq.n	801ac0a <clear_lock+0xe>
	}
}
 801ac32:	bf00      	nop
 801ac34:	bf00      	nop
 801ac36:	3714      	adds	r7, #20
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac3e:	4770      	bx	lr
 801ac40:	24000558 	.word	0x24000558

0801ac44 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801ac44:	b580      	push	{r7, lr}
 801ac46:	b086      	sub	sp, #24
 801ac48:	af00      	add	r7, sp, #0
 801ac4a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	78db      	ldrb	r3, [r3, #3]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d034      	beq.n	801acc2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ac5c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	7858      	ldrb	r0, [r3, #1]
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801ac68:	2301      	movs	r3, #1
 801ac6a:	697a      	ldr	r2, [r7, #20]
 801ac6c:	f7ff fd40 	bl	801a6f0 <disk_write>
 801ac70:	4603      	mov	r3, r0
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d002      	beq.n	801ac7c <sync_window+0x38>
			res = FR_DISK_ERR;
 801ac76:	2301      	movs	r3, #1
 801ac78:	73fb      	strb	r3, [r7, #15]
 801ac7a:	e022      	b.n	801acc2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	2200      	movs	r2, #0
 801ac80:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ac86:	697a      	ldr	r2, [r7, #20]
 801ac88:	1ad2      	subs	r2, r2, r3
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	6a1b      	ldr	r3, [r3, #32]
 801ac8e:	429a      	cmp	r2, r3
 801ac90:	d217      	bcs.n	801acc2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	789b      	ldrb	r3, [r3, #2]
 801ac96:	613b      	str	r3, [r7, #16]
 801ac98:	e010      	b.n	801acbc <sync_window+0x78>
					wsect += fs->fsize;
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	6a1b      	ldr	r3, [r3, #32]
 801ac9e:	697a      	ldr	r2, [r7, #20]
 801aca0:	4413      	add	r3, r2
 801aca2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	7858      	ldrb	r0, [r3, #1]
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801acae:	2301      	movs	r3, #1
 801acb0:	697a      	ldr	r2, [r7, #20]
 801acb2:	f7ff fd1d 	bl	801a6f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801acb6:	693b      	ldr	r3, [r7, #16]
 801acb8:	3b01      	subs	r3, #1
 801acba:	613b      	str	r3, [r7, #16]
 801acbc:	693b      	ldr	r3, [r7, #16]
 801acbe:	2b01      	cmp	r3, #1
 801acc0:	d8eb      	bhi.n	801ac9a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801acc2:	7bfb      	ldrb	r3, [r7, #15]
}
 801acc4:	4618      	mov	r0, r3
 801acc6:	3718      	adds	r7, #24
 801acc8:	46bd      	mov	sp, r7
 801acca:	bd80      	pop	{r7, pc}

0801accc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801accc:	b580      	push	{r7, lr}
 801acce:	b084      	sub	sp, #16
 801acd0:	af00      	add	r7, sp, #0
 801acd2:	6078      	str	r0, [r7, #4]
 801acd4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801acd6:	2300      	movs	r3, #0
 801acd8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801acde:	683a      	ldr	r2, [r7, #0]
 801ace0:	429a      	cmp	r2, r3
 801ace2:	d01b      	beq.n	801ad1c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801ace4:	6878      	ldr	r0, [r7, #4]
 801ace6:	f7ff ffad 	bl	801ac44 <sync_window>
 801acea:	4603      	mov	r3, r0
 801acec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801acee:	7bfb      	ldrb	r3, [r7, #15]
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d113      	bne.n	801ad1c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	7858      	ldrb	r0, [r3, #1]
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801acfe:	2301      	movs	r3, #1
 801ad00:	683a      	ldr	r2, [r7, #0]
 801ad02:	f7ff fcd5 	bl	801a6b0 <disk_read>
 801ad06:	4603      	mov	r3, r0
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d004      	beq.n	801ad16 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801ad0c:	f04f 33ff 	mov.w	r3, #4294967295
 801ad10:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801ad12:	2301      	movs	r3, #1
 801ad14:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	683a      	ldr	r2, [r7, #0]
 801ad1a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 801ad1c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad1e:	4618      	mov	r0, r3
 801ad20:	3710      	adds	r7, #16
 801ad22:	46bd      	mov	sp, r7
 801ad24:	bd80      	pop	{r7, pc}
	...

0801ad28 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b084      	sub	sp, #16
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801ad30:	6878      	ldr	r0, [r7, #4]
 801ad32:	f7ff ff87 	bl	801ac44 <sync_window>
 801ad36:	4603      	mov	r3, r0
 801ad38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801ad3a:	7bfb      	ldrb	r3, [r7, #15]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d159      	bne.n	801adf4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	781b      	ldrb	r3, [r3, #0]
 801ad44:	2b03      	cmp	r3, #3
 801ad46:	d149      	bne.n	801addc <sync_fs+0xb4>
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	791b      	ldrb	r3, [r3, #4]
 801ad4c:	2b01      	cmp	r3, #1
 801ad4e:	d145      	bne.n	801addc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	899b      	ldrh	r3, [r3, #12]
 801ad5a:	461a      	mov	r2, r3
 801ad5c:	2100      	movs	r1, #0
 801ad5e:	f7ff fda8 	bl	801a8b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	3338      	adds	r3, #56	@ 0x38
 801ad66:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801ad6a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801ad6e:	4618      	mov	r0, r3
 801ad70:	f7ff fd37 	bl	801a7e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	3338      	adds	r3, #56	@ 0x38
 801ad78:	4921      	ldr	r1, [pc, #132]	@ (801ae00 <sync_fs+0xd8>)
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	f7ff fd4c 	bl	801a818 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	3338      	adds	r3, #56	@ 0x38
 801ad84:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801ad88:	491e      	ldr	r1, [pc, #120]	@ (801ae04 <sync_fs+0xdc>)
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	f7ff fd44 	bl	801a818 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	3338      	adds	r3, #56	@ 0x38
 801ad94:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	699b      	ldr	r3, [r3, #24]
 801ad9c:	4619      	mov	r1, r3
 801ad9e:	4610      	mov	r0, r2
 801ada0:	f7ff fd3a 	bl	801a818 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	3338      	adds	r3, #56	@ 0x38
 801ada8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	695b      	ldr	r3, [r3, #20]
 801adb0:	4619      	mov	r1, r3
 801adb2:	4610      	mov	r0, r2
 801adb4:	f7ff fd30 	bl	801a818 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801adbc:	1c5a      	adds	r2, r3, #1
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	7858      	ldrb	r0, [r3, #1]
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801add0:	2301      	movs	r3, #1
 801add2:	f7ff fc8d 	bl	801a6f0 <disk_write>
			fs->fsi_flag = 0;
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	2200      	movs	r2, #0
 801adda:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	785b      	ldrb	r3, [r3, #1]
 801ade0:	2200      	movs	r2, #0
 801ade2:	2100      	movs	r1, #0
 801ade4:	4618      	mov	r0, r3
 801ade6:	f7ff fca3 	bl	801a730 <disk_ioctl>
 801adea:	4603      	mov	r3, r0
 801adec:	2b00      	cmp	r3, #0
 801adee:	d001      	beq.n	801adf4 <sync_fs+0xcc>
 801adf0:	2301      	movs	r3, #1
 801adf2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801adf4:	7bfb      	ldrb	r3, [r7, #15]
}
 801adf6:	4618      	mov	r0, r3
 801adf8:	3710      	adds	r7, #16
 801adfa:	46bd      	mov	sp, r7
 801adfc:	bd80      	pop	{r7, pc}
 801adfe:	bf00      	nop
 801ae00:	41615252 	.word	0x41615252
 801ae04:	61417272 	.word	0x61417272

0801ae08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801ae08:	b480      	push	{r7}
 801ae0a:	b083      	sub	sp, #12
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	6078      	str	r0, [r7, #4]
 801ae10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801ae12:	683b      	ldr	r3, [r7, #0]
 801ae14:	3b02      	subs	r3, #2
 801ae16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	69db      	ldr	r3, [r3, #28]
 801ae1c:	3b02      	subs	r3, #2
 801ae1e:	683a      	ldr	r2, [r7, #0]
 801ae20:	429a      	cmp	r2, r3
 801ae22:	d301      	bcc.n	801ae28 <clust2sect+0x20>
 801ae24:	2300      	movs	r3, #0
 801ae26:	e008      	b.n	801ae3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	895b      	ldrh	r3, [r3, #10]
 801ae2c:	461a      	mov	r2, r3
 801ae2e:	683b      	ldr	r3, [r7, #0]
 801ae30:	fb03 f202 	mul.w	r2, r3, r2
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ae38:	4413      	add	r3, r2
}
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	370c      	adds	r7, #12
 801ae3e:	46bd      	mov	sp, r7
 801ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae44:	4770      	bx	lr

0801ae46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801ae46:	b580      	push	{r7, lr}
 801ae48:	b086      	sub	sp, #24
 801ae4a:	af00      	add	r7, sp, #0
 801ae4c:	6078      	str	r0, [r7, #4]
 801ae4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801ae56:	683b      	ldr	r3, [r7, #0]
 801ae58:	2b01      	cmp	r3, #1
 801ae5a:	d904      	bls.n	801ae66 <get_fat+0x20>
 801ae5c:	693b      	ldr	r3, [r7, #16]
 801ae5e:	69db      	ldr	r3, [r3, #28]
 801ae60:	683a      	ldr	r2, [r7, #0]
 801ae62:	429a      	cmp	r2, r3
 801ae64:	d302      	bcc.n	801ae6c <get_fat+0x26>
		val = 1;	/* Internal error */
 801ae66:	2301      	movs	r3, #1
 801ae68:	617b      	str	r3, [r7, #20]
 801ae6a:	e0ba      	b.n	801afe2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801ae6c:	f04f 33ff 	mov.w	r3, #4294967295
 801ae70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801ae72:	693b      	ldr	r3, [r7, #16]
 801ae74:	781b      	ldrb	r3, [r3, #0]
 801ae76:	2b03      	cmp	r3, #3
 801ae78:	f000 8082 	beq.w	801af80 <get_fat+0x13a>
 801ae7c:	2b03      	cmp	r3, #3
 801ae7e:	f300 80a6 	bgt.w	801afce <get_fat+0x188>
 801ae82:	2b01      	cmp	r3, #1
 801ae84:	d002      	beq.n	801ae8c <get_fat+0x46>
 801ae86:	2b02      	cmp	r3, #2
 801ae88:	d055      	beq.n	801af36 <get_fat+0xf0>
 801ae8a:	e0a0      	b.n	801afce <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801ae8c:	683b      	ldr	r3, [r7, #0]
 801ae8e:	60fb      	str	r3, [r7, #12]
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	085b      	lsrs	r3, r3, #1
 801ae94:	68fa      	ldr	r2, [r7, #12]
 801ae96:	4413      	add	r3, r2
 801ae98:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801ae9a:	693b      	ldr	r3, [r7, #16]
 801ae9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ae9e:	693b      	ldr	r3, [r7, #16]
 801aea0:	899b      	ldrh	r3, [r3, #12]
 801aea2:	4619      	mov	r1, r3
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	fbb3 f3f1 	udiv	r3, r3, r1
 801aeaa:	4413      	add	r3, r2
 801aeac:	4619      	mov	r1, r3
 801aeae:	6938      	ldr	r0, [r7, #16]
 801aeb0:	f7ff ff0c 	bl	801accc <move_window>
 801aeb4:	4603      	mov	r3, r0
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	f040 808c 	bne.w	801afd4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	1c5a      	adds	r2, r3, #1
 801aec0:	60fa      	str	r2, [r7, #12]
 801aec2:	693a      	ldr	r2, [r7, #16]
 801aec4:	8992      	ldrh	r2, [r2, #12]
 801aec6:	fbb3 f1f2 	udiv	r1, r3, r2
 801aeca:	fb01 f202 	mul.w	r2, r1, r2
 801aece:	1a9b      	subs	r3, r3, r2
 801aed0:	693a      	ldr	r2, [r7, #16]
 801aed2:	4413      	add	r3, r2
 801aed4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801aed8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801aeda:	693b      	ldr	r3, [r7, #16]
 801aedc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801aede:	693b      	ldr	r3, [r7, #16]
 801aee0:	899b      	ldrh	r3, [r3, #12]
 801aee2:	4619      	mov	r1, r3
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	fbb3 f3f1 	udiv	r3, r3, r1
 801aeea:	4413      	add	r3, r2
 801aeec:	4619      	mov	r1, r3
 801aeee:	6938      	ldr	r0, [r7, #16]
 801aef0:	f7ff feec 	bl	801accc <move_window>
 801aef4:	4603      	mov	r3, r0
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d16e      	bne.n	801afd8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 801aefa:	693b      	ldr	r3, [r7, #16]
 801aefc:	899b      	ldrh	r3, [r3, #12]
 801aefe:	461a      	mov	r2, r3
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	fbb3 f1f2 	udiv	r1, r3, r2
 801af06:	fb01 f202 	mul.w	r2, r1, r2
 801af0a:	1a9b      	subs	r3, r3, r2
 801af0c:	693a      	ldr	r2, [r7, #16]
 801af0e:	4413      	add	r3, r2
 801af10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801af14:	021b      	lsls	r3, r3, #8
 801af16:	68ba      	ldr	r2, [r7, #8]
 801af18:	4313      	orrs	r3, r2
 801af1a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801af1c:	683b      	ldr	r3, [r7, #0]
 801af1e:	f003 0301 	and.w	r3, r3, #1
 801af22:	2b00      	cmp	r3, #0
 801af24:	d002      	beq.n	801af2c <get_fat+0xe6>
 801af26:	68bb      	ldr	r3, [r7, #8]
 801af28:	091b      	lsrs	r3, r3, #4
 801af2a:	e002      	b.n	801af32 <get_fat+0xec>
 801af2c:	68bb      	ldr	r3, [r7, #8]
 801af2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801af32:	617b      	str	r3, [r7, #20]
			break;
 801af34:	e055      	b.n	801afe2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801af36:	693b      	ldr	r3, [r7, #16]
 801af38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801af3a:	693b      	ldr	r3, [r7, #16]
 801af3c:	899b      	ldrh	r3, [r3, #12]
 801af3e:	085b      	lsrs	r3, r3, #1
 801af40:	b29b      	uxth	r3, r3
 801af42:	4619      	mov	r1, r3
 801af44:	683b      	ldr	r3, [r7, #0]
 801af46:	fbb3 f3f1 	udiv	r3, r3, r1
 801af4a:	4413      	add	r3, r2
 801af4c:	4619      	mov	r1, r3
 801af4e:	6938      	ldr	r0, [r7, #16]
 801af50:	f7ff febc 	bl	801accc <move_window>
 801af54:	4603      	mov	r3, r0
 801af56:	2b00      	cmp	r3, #0
 801af58:	d140      	bne.n	801afdc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801af5a:	693b      	ldr	r3, [r7, #16]
 801af5c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801af60:	683b      	ldr	r3, [r7, #0]
 801af62:	005b      	lsls	r3, r3, #1
 801af64:	693a      	ldr	r2, [r7, #16]
 801af66:	8992      	ldrh	r2, [r2, #12]
 801af68:	fbb3 f0f2 	udiv	r0, r3, r2
 801af6c:	fb00 f202 	mul.w	r2, r0, r2
 801af70:	1a9b      	subs	r3, r3, r2
 801af72:	440b      	add	r3, r1
 801af74:	4618      	mov	r0, r3
 801af76:	f7ff fbf9 	bl	801a76c <ld_word>
 801af7a:	4603      	mov	r3, r0
 801af7c:	617b      	str	r3, [r7, #20]
			break;
 801af7e:	e030      	b.n	801afe2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801af80:	693b      	ldr	r3, [r7, #16]
 801af82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801af84:	693b      	ldr	r3, [r7, #16]
 801af86:	899b      	ldrh	r3, [r3, #12]
 801af88:	089b      	lsrs	r3, r3, #2
 801af8a:	b29b      	uxth	r3, r3
 801af8c:	4619      	mov	r1, r3
 801af8e:	683b      	ldr	r3, [r7, #0]
 801af90:	fbb3 f3f1 	udiv	r3, r3, r1
 801af94:	4413      	add	r3, r2
 801af96:	4619      	mov	r1, r3
 801af98:	6938      	ldr	r0, [r7, #16]
 801af9a:	f7ff fe97 	bl	801accc <move_window>
 801af9e:	4603      	mov	r3, r0
 801afa0:	2b00      	cmp	r3, #0
 801afa2:	d11d      	bne.n	801afe0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801afa4:	693b      	ldr	r3, [r7, #16]
 801afa6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801afaa:	683b      	ldr	r3, [r7, #0]
 801afac:	009b      	lsls	r3, r3, #2
 801afae:	693a      	ldr	r2, [r7, #16]
 801afb0:	8992      	ldrh	r2, [r2, #12]
 801afb2:	fbb3 f0f2 	udiv	r0, r3, r2
 801afb6:	fb00 f202 	mul.w	r2, r0, r2
 801afba:	1a9b      	subs	r3, r3, r2
 801afbc:	440b      	add	r3, r1
 801afbe:	4618      	mov	r0, r3
 801afc0:	f7ff fbec 	bl	801a79c <ld_dword>
 801afc4:	4603      	mov	r3, r0
 801afc6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801afca:	617b      	str	r3, [r7, #20]
			break;
 801afcc:	e009      	b.n	801afe2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801afce:	2301      	movs	r3, #1
 801afd0:	617b      	str	r3, [r7, #20]
 801afd2:	e006      	b.n	801afe2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801afd4:	bf00      	nop
 801afd6:	e004      	b.n	801afe2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801afd8:	bf00      	nop
 801afda:	e002      	b.n	801afe2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801afdc:	bf00      	nop
 801afde:	e000      	b.n	801afe2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801afe0:	bf00      	nop
		}
	}

	return val;
 801afe2:	697b      	ldr	r3, [r7, #20]
}
 801afe4:	4618      	mov	r0, r3
 801afe6:	3718      	adds	r7, #24
 801afe8:	46bd      	mov	sp, r7
 801afea:	bd80      	pop	{r7, pc}

0801afec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801afec:	b590      	push	{r4, r7, lr}
 801afee:	b089      	sub	sp, #36	@ 0x24
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	60f8      	str	r0, [r7, #12]
 801aff4:	60b9      	str	r1, [r7, #8]
 801aff6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801aff8:	2302      	movs	r3, #2
 801affa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801affc:	68bb      	ldr	r3, [r7, #8]
 801affe:	2b01      	cmp	r3, #1
 801b000:	f240 8109 	bls.w	801b216 <put_fat+0x22a>
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	69db      	ldr	r3, [r3, #28]
 801b008:	68ba      	ldr	r2, [r7, #8]
 801b00a:	429a      	cmp	r2, r3
 801b00c:	f080 8103 	bcs.w	801b216 <put_fat+0x22a>
		switch (fs->fs_type) {
 801b010:	68fb      	ldr	r3, [r7, #12]
 801b012:	781b      	ldrb	r3, [r3, #0]
 801b014:	2b03      	cmp	r3, #3
 801b016:	f000 80b6 	beq.w	801b186 <put_fat+0x19a>
 801b01a:	2b03      	cmp	r3, #3
 801b01c:	f300 80fb 	bgt.w	801b216 <put_fat+0x22a>
 801b020:	2b01      	cmp	r3, #1
 801b022:	d003      	beq.n	801b02c <put_fat+0x40>
 801b024:	2b02      	cmp	r3, #2
 801b026:	f000 8083 	beq.w	801b130 <put_fat+0x144>
 801b02a:	e0f4      	b.n	801b216 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b02c:	68bb      	ldr	r3, [r7, #8]
 801b02e:	61bb      	str	r3, [r7, #24]
 801b030:	69bb      	ldr	r3, [r7, #24]
 801b032:	085b      	lsrs	r3, r3, #1
 801b034:	69ba      	ldr	r2, [r7, #24]
 801b036:	4413      	add	r3, r2
 801b038:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b03a:	68fb      	ldr	r3, [r7, #12]
 801b03c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	899b      	ldrh	r3, [r3, #12]
 801b042:	4619      	mov	r1, r3
 801b044:	69bb      	ldr	r3, [r7, #24]
 801b046:	fbb3 f3f1 	udiv	r3, r3, r1
 801b04a:	4413      	add	r3, r2
 801b04c:	4619      	mov	r1, r3
 801b04e:	68f8      	ldr	r0, [r7, #12]
 801b050:	f7ff fe3c 	bl	801accc <move_window>
 801b054:	4603      	mov	r3, r0
 801b056:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b058:	7ffb      	ldrb	r3, [r7, #31]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	f040 80d4 	bne.w	801b208 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b066:	69bb      	ldr	r3, [r7, #24]
 801b068:	1c5a      	adds	r2, r3, #1
 801b06a:	61ba      	str	r2, [r7, #24]
 801b06c:	68fa      	ldr	r2, [r7, #12]
 801b06e:	8992      	ldrh	r2, [r2, #12]
 801b070:	fbb3 f0f2 	udiv	r0, r3, r2
 801b074:	fb00 f202 	mul.w	r2, r0, r2
 801b078:	1a9b      	subs	r3, r3, r2
 801b07a:	440b      	add	r3, r1
 801b07c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b07e:	68bb      	ldr	r3, [r7, #8]
 801b080:	f003 0301 	and.w	r3, r3, #1
 801b084:	2b00      	cmp	r3, #0
 801b086:	d00d      	beq.n	801b0a4 <put_fat+0xb8>
 801b088:	697b      	ldr	r3, [r7, #20]
 801b08a:	781b      	ldrb	r3, [r3, #0]
 801b08c:	b25b      	sxtb	r3, r3
 801b08e:	f003 030f 	and.w	r3, r3, #15
 801b092:	b25a      	sxtb	r2, r3
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	b2db      	uxtb	r3, r3
 801b098:	011b      	lsls	r3, r3, #4
 801b09a:	b25b      	sxtb	r3, r3
 801b09c:	4313      	orrs	r3, r2
 801b09e:	b25b      	sxtb	r3, r3
 801b0a0:	b2db      	uxtb	r3, r3
 801b0a2:	e001      	b.n	801b0a8 <put_fat+0xbc>
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	b2db      	uxtb	r3, r3
 801b0a8:	697a      	ldr	r2, [r7, #20]
 801b0aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	2201      	movs	r2, #1
 801b0b0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	899b      	ldrh	r3, [r3, #12]
 801b0ba:	4619      	mov	r1, r3
 801b0bc:	69bb      	ldr	r3, [r7, #24]
 801b0be:	fbb3 f3f1 	udiv	r3, r3, r1
 801b0c2:	4413      	add	r3, r2
 801b0c4:	4619      	mov	r1, r3
 801b0c6:	68f8      	ldr	r0, [r7, #12]
 801b0c8:	f7ff fe00 	bl	801accc <move_window>
 801b0cc:	4603      	mov	r3, r0
 801b0ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b0d0:	7ffb      	ldrb	r3, [r7, #31]
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	f040 809a 	bne.w	801b20c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b0de:	68fb      	ldr	r3, [r7, #12]
 801b0e0:	899b      	ldrh	r3, [r3, #12]
 801b0e2:	461a      	mov	r2, r3
 801b0e4:	69bb      	ldr	r3, [r7, #24]
 801b0e6:	fbb3 f0f2 	udiv	r0, r3, r2
 801b0ea:	fb00 f202 	mul.w	r2, r0, r2
 801b0ee:	1a9b      	subs	r3, r3, r2
 801b0f0:	440b      	add	r3, r1
 801b0f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b0f4:	68bb      	ldr	r3, [r7, #8]
 801b0f6:	f003 0301 	and.w	r3, r3, #1
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d003      	beq.n	801b106 <put_fat+0x11a>
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	091b      	lsrs	r3, r3, #4
 801b102:	b2db      	uxtb	r3, r3
 801b104:	e00e      	b.n	801b124 <put_fat+0x138>
 801b106:	697b      	ldr	r3, [r7, #20]
 801b108:	781b      	ldrb	r3, [r3, #0]
 801b10a:	b25b      	sxtb	r3, r3
 801b10c:	f023 030f 	bic.w	r3, r3, #15
 801b110:	b25a      	sxtb	r2, r3
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	0a1b      	lsrs	r3, r3, #8
 801b116:	b25b      	sxtb	r3, r3
 801b118:	f003 030f 	and.w	r3, r3, #15
 801b11c:	b25b      	sxtb	r3, r3
 801b11e:	4313      	orrs	r3, r2
 801b120:	b25b      	sxtb	r3, r3
 801b122:	b2db      	uxtb	r3, r3
 801b124:	697a      	ldr	r2, [r7, #20]
 801b126:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	2201      	movs	r2, #1
 801b12c:	70da      	strb	r2, [r3, #3]
			break;
 801b12e:	e072      	b.n	801b216 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b130:	68fb      	ldr	r3, [r7, #12]
 801b132:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	899b      	ldrh	r3, [r3, #12]
 801b138:	085b      	lsrs	r3, r3, #1
 801b13a:	b29b      	uxth	r3, r3
 801b13c:	4619      	mov	r1, r3
 801b13e:	68bb      	ldr	r3, [r7, #8]
 801b140:	fbb3 f3f1 	udiv	r3, r3, r1
 801b144:	4413      	add	r3, r2
 801b146:	4619      	mov	r1, r3
 801b148:	68f8      	ldr	r0, [r7, #12]
 801b14a:	f7ff fdbf 	bl	801accc <move_window>
 801b14e:	4603      	mov	r3, r0
 801b150:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b152:	7ffb      	ldrb	r3, [r7, #31]
 801b154:	2b00      	cmp	r3, #0
 801b156:	d15b      	bne.n	801b210 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b158:	68fb      	ldr	r3, [r7, #12]
 801b15a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b15e:	68bb      	ldr	r3, [r7, #8]
 801b160:	005b      	lsls	r3, r3, #1
 801b162:	68fa      	ldr	r2, [r7, #12]
 801b164:	8992      	ldrh	r2, [r2, #12]
 801b166:	fbb3 f0f2 	udiv	r0, r3, r2
 801b16a:	fb00 f202 	mul.w	r2, r0, r2
 801b16e:	1a9b      	subs	r3, r3, r2
 801b170:	440b      	add	r3, r1
 801b172:	687a      	ldr	r2, [r7, #4]
 801b174:	b292      	uxth	r2, r2
 801b176:	4611      	mov	r1, r2
 801b178:	4618      	mov	r0, r3
 801b17a:	f7ff fb32 	bl	801a7e2 <st_word>
			fs->wflag = 1;
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	2201      	movs	r2, #1
 801b182:	70da      	strb	r2, [r3, #3]
			break;
 801b184:	e047      	b.n	801b216 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b18a:	68fb      	ldr	r3, [r7, #12]
 801b18c:	899b      	ldrh	r3, [r3, #12]
 801b18e:	089b      	lsrs	r3, r3, #2
 801b190:	b29b      	uxth	r3, r3
 801b192:	4619      	mov	r1, r3
 801b194:	68bb      	ldr	r3, [r7, #8]
 801b196:	fbb3 f3f1 	udiv	r3, r3, r1
 801b19a:	4413      	add	r3, r2
 801b19c:	4619      	mov	r1, r3
 801b19e:	68f8      	ldr	r0, [r7, #12]
 801b1a0:	f7ff fd94 	bl	801accc <move_window>
 801b1a4:	4603      	mov	r3, r0
 801b1a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b1a8:	7ffb      	ldrb	r3, [r7, #31]
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	d132      	bne.n	801b214 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801b1b4:	68fb      	ldr	r3, [r7, #12]
 801b1b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b1ba:	68bb      	ldr	r3, [r7, #8]
 801b1bc:	009b      	lsls	r3, r3, #2
 801b1be:	68fa      	ldr	r2, [r7, #12]
 801b1c0:	8992      	ldrh	r2, [r2, #12]
 801b1c2:	fbb3 f0f2 	udiv	r0, r3, r2
 801b1c6:	fb00 f202 	mul.w	r2, r0, r2
 801b1ca:	1a9b      	subs	r3, r3, r2
 801b1cc:	440b      	add	r3, r1
 801b1ce:	4618      	mov	r0, r3
 801b1d0:	f7ff fae4 	bl	801a79c <ld_dword>
 801b1d4:	4603      	mov	r3, r0
 801b1d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801b1da:	4323      	orrs	r3, r4
 801b1dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b1de:	68fb      	ldr	r3, [r7, #12]
 801b1e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b1e4:	68bb      	ldr	r3, [r7, #8]
 801b1e6:	009b      	lsls	r3, r3, #2
 801b1e8:	68fa      	ldr	r2, [r7, #12]
 801b1ea:	8992      	ldrh	r2, [r2, #12]
 801b1ec:	fbb3 f0f2 	udiv	r0, r3, r2
 801b1f0:	fb00 f202 	mul.w	r2, r0, r2
 801b1f4:	1a9b      	subs	r3, r3, r2
 801b1f6:	440b      	add	r3, r1
 801b1f8:	6879      	ldr	r1, [r7, #4]
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f7ff fb0c 	bl	801a818 <st_dword>
			fs->wflag = 1;
 801b200:	68fb      	ldr	r3, [r7, #12]
 801b202:	2201      	movs	r2, #1
 801b204:	70da      	strb	r2, [r3, #3]
			break;
 801b206:	e006      	b.n	801b216 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b208:	bf00      	nop
 801b20a:	e004      	b.n	801b216 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b20c:	bf00      	nop
 801b20e:	e002      	b.n	801b216 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b210:	bf00      	nop
 801b212:	e000      	b.n	801b216 <put_fat+0x22a>
			if (res != FR_OK) break;
 801b214:	bf00      	nop
		}
	}
	return res;
 801b216:	7ffb      	ldrb	r3, [r7, #31]
}
 801b218:	4618      	mov	r0, r3
 801b21a:	3724      	adds	r7, #36	@ 0x24
 801b21c:	46bd      	mov	sp, r7
 801b21e:	bd90      	pop	{r4, r7, pc}

0801b220 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b220:	b580      	push	{r7, lr}
 801b222:	b088      	sub	sp, #32
 801b224:	af00      	add	r7, sp, #0
 801b226:	60f8      	str	r0, [r7, #12]
 801b228:	60b9      	str	r1, [r7, #8]
 801b22a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b22c:	2300      	movs	r3, #0
 801b22e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b230:	68fb      	ldr	r3, [r7, #12]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b236:	68bb      	ldr	r3, [r7, #8]
 801b238:	2b01      	cmp	r3, #1
 801b23a:	d904      	bls.n	801b246 <remove_chain+0x26>
 801b23c:	69bb      	ldr	r3, [r7, #24]
 801b23e:	69db      	ldr	r3, [r3, #28]
 801b240:	68ba      	ldr	r2, [r7, #8]
 801b242:	429a      	cmp	r2, r3
 801b244:	d301      	bcc.n	801b24a <remove_chain+0x2a>
 801b246:	2302      	movs	r3, #2
 801b248:	e04b      	b.n	801b2e2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d00c      	beq.n	801b26a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b250:	f04f 32ff 	mov.w	r2, #4294967295
 801b254:	6879      	ldr	r1, [r7, #4]
 801b256:	69b8      	ldr	r0, [r7, #24]
 801b258:	f7ff fec8 	bl	801afec <put_fat>
 801b25c:	4603      	mov	r3, r0
 801b25e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b260:	7ffb      	ldrb	r3, [r7, #31]
 801b262:	2b00      	cmp	r3, #0
 801b264:	d001      	beq.n	801b26a <remove_chain+0x4a>
 801b266:	7ffb      	ldrb	r3, [r7, #31]
 801b268:	e03b      	b.n	801b2e2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b26a:	68b9      	ldr	r1, [r7, #8]
 801b26c:	68f8      	ldr	r0, [r7, #12]
 801b26e:	f7ff fdea 	bl	801ae46 <get_fat>
 801b272:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b274:	697b      	ldr	r3, [r7, #20]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d031      	beq.n	801b2de <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b27a:	697b      	ldr	r3, [r7, #20]
 801b27c:	2b01      	cmp	r3, #1
 801b27e:	d101      	bne.n	801b284 <remove_chain+0x64>
 801b280:	2302      	movs	r3, #2
 801b282:	e02e      	b.n	801b2e2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b284:	697b      	ldr	r3, [r7, #20]
 801b286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b28a:	d101      	bne.n	801b290 <remove_chain+0x70>
 801b28c:	2301      	movs	r3, #1
 801b28e:	e028      	b.n	801b2e2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b290:	2200      	movs	r2, #0
 801b292:	68b9      	ldr	r1, [r7, #8]
 801b294:	69b8      	ldr	r0, [r7, #24]
 801b296:	f7ff fea9 	bl	801afec <put_fat>
 801b29a:	4603      	mov	r3, r0
 801b29c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b29e:	7ffb      	ldrb	r3, [r7, #31]
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d001      	beq.n	801b2a8 <remove_chain+0x88>
 801b2a4:	7ffb      	ldrb	r3, [r7, #31]
 801b2a6:	e01c      	b.n	801b2e2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b2a8:	69bb      	ldr	r3, [r7, #24]
 801b2aa:	699a      	ldr	r2, [r3, #24]
 801b2ac:	69bb      	ldr	r3, [r7, #24]
 801b2ae:	69db      	ldr	r3, [r3, #28]
 801b2b0:	3b02      	subs	r3, #2
 801b2b2:	429a      	cmp	r2, r3
 801b2b4:	d20b      	bcs.n	801b2ce <remove_chain+0xae>
			fs->free_clst++;
 801b2b6:	69bb      	ldr	r3, [r7, #24]
 801b2b8:	699b      	ldr	r3, [r3, #24]
 801b2ba:	1c5a      	adds	r2, r3, #1
 801b2bc:	69bb      	ldr	r3, [r7, #24]
 801b2be:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801b2c0:	69bb      	ldr	r3, [r7, #24]
 801b2c2:	791b      	ldrb	r3, [r3, #4]
 801b2c4:	f043 0301 	orr.w	r3, r3, #1
 801b2c8:	b2da      	uxtb	r2, r3
 801b2ca:	69bb      	ldr	r3, [r7, #24]
 801b2cc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b2ce:	697b      	ldr	r3, [r7, #20]
 801b2d0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b2d2:	69bb      	ldr	r3, [r7, #24]
 801b2d4:	69db      	ldr	r3, [r3, #28]
 801b2d6:	68ba      	ldr	r2, [r7, #8]
 801b2d8:	429a      	cmp	r2, r3
 801b2da:	d3c6      	bcc.n	801b26a <remove_chain+0x4a>
 801b2dc:	e000      	b.n	801b2e0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b2de:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b2e0:	2300      	movs	r3, #0
}
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	3720      	adds	r7, #32
 801b2e6:	46bd      	mov	sp, r7
 801b2e8:	bd80      	pop	{r7, pc}

0801b2ea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b2ea:	b580      	push	{r7, lr}
 801b2ec:	b088      	sub	sp, #32
 801b2ee:	af00      	add	r7, sp, #0
 801b2f0:	6078      	str	r0, [r7, #4]
 801b2f2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b2fa:	683b      	ldr	r3, [r7, #0]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d10d      	bne.n	801b31c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b300:	693b      	ldr	r3, [r7, #16]
 801b302:	695b      	ldr	r3, [r3, #20]
 801b304:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b306:	69bb      	ldr	r3, [r7, #24]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d004      	beq.n	801b316 <create_chain+0x2c>
 801b30c:	693b      	ldr	r3, [r7, #16]
 801b30e:	69db      	ldr	r3, [r3, #28]
 801b310:	69ba      	ldr	r2, [r7, #24]
 801b312:	429a      	cmp	r2, r3
 801b314:	d31b      	bcc.n	801b34e <create_chain+0x64>
 801b316:	2301      	movs	r3, #1
 801b318:	61bb      	str	r3, [r7, #24]
 801b31a:	e018      	b.n	801b34e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b31c:	6839      	ldr	r1, [r7, #0]
 801b31e:	6878      	ldr	r0, [r7, #4]
 801b320:	f7ff fd91 	bl	801ae46 <get_fat>
 801b324:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b326:	68fb      	ldr	r3, [r7, #12]
 801b328:	2b01      	cmp	r3, #1
 801b32a:	d801      	bhi.n	801b330 <create_chain+0x46>
 801b32c:	2301      	movs	r3, #1
 801b32e:	e070      	b.n	801b412 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b336:	d101      	bne.n	801b33c <create_chain+0x52>
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	e06a      	b.n	801b412 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b33c:	693b      	ldr	r3, [r7, #16]
 801b33e:	69db      	ldr	r3, [r3, #28]
 801b340:	68fa      	ldr	r2, [r7, #12]
 801b342:	429a      	cmp	r2, r3
 801b344:	d201      	bcs.n	801b34a <create_chain+0x60>
 801b346:	68fb      	ldr	r3, [r7, #12]
 801b348:	e063      	b.n	801b412 <create_chain+0x128>
		scl = clst;
 801b34a:	683b      	ldr	r3, [r7, #0]
 801b34c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b34e:	69bb      	ldr	r3, [r7, #24]
 801b350:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b352:	69fb      	ldr	r3, [r7, #28]
 801b354:	3301      	adds	r3, #1
 801b356:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b358:	693b      	ldr	r3, [r7, #16]
 801b35a:	69db      	ldr	r3, [r3, #28]
 801b35c:	69fa      	ldr	r2, [r7, #28]
 801b35e:	429a      	cmp	r2, r3
 801b360:	d307      	bcc.n	801b372 <create_chain+0x88>
				ncl = 2;
 801b362:	2302      	movs	r3, #2
 801b364:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b366:	69fa      	ldr	r2, [r7, #28]
 801b368:	69bb      	ldr	r3, [r7, #24]
 801b36a:	429a      	cmp	r2, r3
 801b36c:	d901      	bls.n	801b372 <create_chain+0x88>
 801b36e:	2300      	movs	r3, #0
 801b370:	e04f      	b.n	801b412 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b372:	69f9      	ldr	r1, [r7, #28]
 801b374:	6878      	ldr	r0, [r7, #4]
 801b376:	f7ff fd66 	bl	801ae46 <get_fat>
 801b37a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d00e      	beq.n	801b3a0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	2b01      	cmp	r3, #1
 801b386:	d003      	beq.n	801b390 <create_chain+0xa6>
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b38e:	d101      	bne.n	801b394 <create_chain+0xaa>
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	e03e      	b.n	801b412 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b394:	69fa      	ldr	r2, [r7, #28]
 801b396:	69bb      	ldr	r3, [r7, #24]
 801b398:	429a      	cmp	r2, r3
 801b39a:	d1da      	bne.n	801b352 <create_chain+0x68>
 801b39c:	2300      	movs	r3, #0
 801b39e:	e038      	b.n	801b412 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b3a0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b3a2:	f04f 32ff 	mov.w	r2, #4294967295
 801b3a6:	69f9      	ldr	r1, [r7, #28]
 801b3a8:	6938      	ldr	r0, [r7, #16]
 801b3aa:	f7ff fe1f 	bl	801afec <put_fat>
 801b3ae:	4603      	mov	r3, r0
 801b3b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b3b2:	7dfb      	ldrb	r3, [r7, #23]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d109      	bne.n	801b3cc <create_chain+0xe2>
 801b3b8:	683b      	ldr	r3, [r7, #0]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d006      	beq.n	801b3cc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b3be:	69fa      	ldr	r2, [r7, #28]
 801b3c0:	6839      	ldr	r1, [r7, #0]
 801b3c2:	6938      	ldr	r0, [r7, #16]
 801b3c4:	f7ff fe12 	bl	801afec <put_fat>
 801b3c8:	4603      	mov	r3, r0
 801b3ca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b3cc:	7dfb      	ldrb	r3, [r7, #23]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d116      	bne.n	801b400 <create_chain+0x116>
		fs->last_clst = ncl;
 801b3d2:	693b      	ldr	r3, [r7, #16]
 801b3d4:	69fa      	ldr	r2, [r7, #28]
 801b3d6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b3d8:	693b      	ldr	r3, [r7, #16]
 801b3da:	699a      	ldr	r2, [r3, #24]
 801b3dc:	693b      	ldr	r3, [r7, #16]
 801b3de:	69db      	ldr	r3, [r3, #28]
 801b3e0:	3b02      	subs	r3, #2
 801b3e2:	429a      	cmp	r2, r3
 801b3e4:	d804      	bhi.n	801b3f0 <create_chain+0x106>
 801b3e6:	693b      	ldr	r3, [r7, #16]
 801b3e8:	699b      	ldr	r3, [r3, #24]
 801b3ea:	1e5a      	subs	r2, r3, #1
 801b3ec:	693b      	ldr	r3, [r7, #16]
 801b3ee:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801b3f0:	693b      	ldr	r3, [r7, #16]
 801b3f2:	791b      	ldrb	r3, [r3, #4]
 801b3f4:	f043 0301 	orr.w	r3, r3, #1
 801b3f8:	b2da      	uxtb	r2, r3
 801b3fa:	693b      	ldr	r3, [r7, #16]
 801b3fc:	711a      	strb	r2, [r3, #4]
 801b3fe:	e007      	b.n	801b410 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b400:	7dfb      	ldrb	r3, [r7, #23]
 801b402:	2b01      	cmp	r3, #1
 801b404:	d102      	bne.n	801b40c <create_chain+0x122>
 801b406:	f04f 33ff 	mov.w	r3, #4294967295
 801b40a:	e000      	b.n	801b40e <create_chain+0x124>
 801b40c:	2301      	movs	r3, #1
 801b40e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b410:	69fb      	ldr	r3, [r7, #28]
}
 801b412:	4618      	mov	r0, r3
 801b414:	3720      	adds	r7, #32
 801b416:	46bd      	mov	sp, r7
 801b418:	bd80      	pop	{r7, pc}

0801b41a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b41a:	b480      	push	{r7}
 801b41c:	b087      	sub	sp, #28
 801b41e:	af00      	add	r7, sp, #0
 801b420:	6078      	str	r0, [r7, #4]
 801b422:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b42e:	3304      	adds	r3, #4
 801b430:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b432:	68fb      	ldr	r3, [r7, #12]
 801b434:	899b      	ldrh	r3, [r3, #12]
 801b436:	461a      	mov	r2, r3
 801b438:	683b      	ldr	r3, [r7, #0]
 801b43a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b43e:	68fa      	ldr	r2, [r7, #12]
 801b440:	8952      	ldrh	r2, [r2, #10]
 801b442:	fbb3 f3f2 	udiv	r3, r3, r2
 801b446:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b448:	693b      	ldr	r3, [r7, #16]
 801b44a:	1d1a      	adds	r2, r3, #4
 801b44c:	613a      	str	r2, [r7, #16]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b452:	68bb      	ldr	r3, [r7, #8]
 801b454:	2b00      	cmp	r3, #0
 801b456:	d101      	bne.n	801b45c <clmt_clust+0x42>
 801b458:	2300      	movs	r3, #0
 801b45a:	e010      	b.n	801b47e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801b45c:	697a      	ldr	r2, [r7, #20]
 801b45e:	68bb      	ldr	r3, [r7, #8]
 801b460:	429a      	cmp	r2, r3
 801b462:	d307      	bcc.n	801b474 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801b464:	697a      	ldr	r2, [r7, #20]
 801b466:	68bb      	ldr	r3, [r7, #8]
 801b468:	1ad3      	subs	r3, r2, r3
 801b46a:	617b      	str	r3, [r7, #20]
 801b46c:	693b      	ldr	r3, [r7, #16]
 801b46e:	3304      	adds	r3, #4
 801b470:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b472:	e7e9      	b.n	801b448 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801b474:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b476:	693b      	ldr	r3, [r7, #16]
 801b478:	681a      	ldr	r2, [r3, #0]
 801b47a:	697b      	ldr	r3, [r7, #20]
 801b47c:	4413      	add	r3, r2
}
 801b47e:	4618      	mov	r0, r3
 801b480:	371c      	adds	r7, #28
 801b482:	46bd      	mov	sp, r7
 801b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b488:	4770      	bx	lr

0801b48a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b48a:	b580      	push	{r7, lr}
 801b48c:	b086      	sub	sp, #24
 801b48e:	af00      	add	r7, sp, #0
 801b490:	6078      	str	r0, [r7, #4]
 801b492:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b49a:	683b      	ldr	r3, [r7, #0]
 801b49c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b4a0:	d204      	bcs.n	801b4ac <dir_sdi+0x22>
 801b4a2:	683b      	ldr	r3, [r7, #0]
 801b4a4:	f003 031f 	and.w	r3, r3, #31
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d001      	beq.n	801b4b0 <dir_sdi+0x26>
		return FR_INT_ERR;
 801b4ac:	2302      	movs	r3, #2
 801b4ae:	e071      	b.n	801b594 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	683a      	ldr	r2, [r7, #0]
 801b4b4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	689b      	ldr	r3, [r3, #8]
 801b4ba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b4bc:	697b      	ldr	r3, [r7, #20]
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d106      	bne.n	801b4d0 <dir_sdi+0x46>
 801b4c2:	693b      	ldr	r3, [r7, #16]
 801b4c4:	781b      	ldrb	r3, [r3, #0]
 801b4c6:	2b02      	cmp	r3, #2
 801b4c8:	d902      	bls.n	801b4d0 <dir_sdi+0x46>
		clst = fs->dirbase;
 801b4ca:	693b      	ldr	r3, [r7, #16]
 801b4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b4ce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b4d0:	697b      	ldr	r3, [r7, #20]
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d10c      	bne.n	801b4f0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b4d6:	683b      	ldr	r3, [r7, #0]
 801b4d8:	095b      	lsrs	r3, r3, #5
 801b4da:	693a      	ldr	r2, [r7, #16]
 801b4dc:	8912      	ldrh	r2, [r2, #8]
 801b4de:	4293      	cmp	r3, r2
 801b4e0:	d301      	bcc.n	801b4e6 <dir_sdi+0x5c>
 801b4e2:	2302      	movs	r3, #2
 801b4e4:	e056      	b.n	801b594 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801b4e6:	693b      	ldr	r3, [r7, #16]
 801b4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	61da      	str	r2, [r3, #28]
 801b4ee:	e02d      	b.n	801b54c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b4f0:	693b      	ldr	r3, [r7, #16]
 801b4f2:	895b      	ldrh	r3, [r3, #10]
 801b4f4:	461a      	mov	r2, r3
 801b4f6:	693b      	ldr	r3, [r7, #16]
 801b4f8:	899b      	ldrh	r3, [r3, #12]
 801b4fa:	fb02 f303 	mul.w	r3, r2, r3
 801b4fe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b500:	e019      	b.n	801b536 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	6979      	ldr	r1, [r7, #20]
 801b506:	4618      	mov	r0, r3
 801b508:	f7ff fc9d 	bl	801ae46 <get_fat>
 801b50c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b50e:	697b      	ldr	r3, [r7, #20]
 801b510:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b514:	d101      	bne.n	801b51a <dir_sdi+0x90>
 801b516:	2301      	movs	r3, #1
 801b518:	e03c      	b.n	801b594 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b51a:	697b      	ldr	r3, [r7, #20]
 801b51c:	2b01      	cmp	r3, #1
 801b51e:	d904      	bls.n	801b52a <dir_sdi+0xa0>
 801b520:	693b      	ldr	r3, [r7, #16]
 801b522:	69db      	ldr	r3, [r3, #28]
 801b524:	697a      	ldr	r2, [r7, #20]
 801b526:	429a      	cmp	r2, r3
 801b528:	d301      	bcc.n	801b52e <dir_sdi+0xa4>
 801b52a:	2302      	movs	r3, #2
 801b52c:	e032      	b.n	801b594 <dir_sdi+0x10a>
			ofs -= csz;
 801b52e:	683a      	ldr	r2, [r7, #0]
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	1ad3      	subs	r3, r2, r3
 801b534:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b536:	683a      	ldr	r2, [r7, #0]
 801b538:	68fb      	ldr	r3, [r7, #12]
 801b53a:	429a      	cmp	r2, r3
 801b53c:	d2e1      	bcs.n	801b502 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801b53e:	6979      	ldr	r1, [r7, #20]
 801b540:	6938      	ldr	r0, [r7, #16]
 801b542:	f7ff fc61 	bl	801ae08 <clust2sect>
 801b546:	4602      	mov	r2, r0
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	697a      	ldr	r2, [r7, #20]
 801b550:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	69db      	ldr	r3, [r3, #28]
 801b556:	2b00      	cmp	r3, #0
 801b558:	d101      	bne.n	801b55e <dir_sdi+0xd4>
 801b55a:	2302      	movs	r3, #2
 801b55c:	e01a      	b.n	801b594 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	69da      	ldr	r2, [r3, #28]
 801b562:	693b      	ldr	r3, [r7, #16]
 801b564:	899b      	ldrh	r3, [r3, #12]
 801b566:	4619      	mov	r1, r3
 801b568:	683b      	ldr	r3, [r7, #0]
 801b56a:	fbb3 f3f1 	udiv	r3, r3, r1
 801b56e:	441a      	add	r2, r3
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b574:	693b      	ldr	r3, [r7, #16]
 801b576:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b57a:	693b      	ldr	r3, [r7, #16]
 801b57c:	899b      	ldrh	r3, [r3, #12]
 801b57e:	461a      	mov	r2, r3
 801b580:	683b      	ldr	r3, [r7, #0]
 801b582:	fbb3 f0f2 	udiv	r0, r3, r2
 801b586:	fb00 f202 	mul.w	r2, r0, r2
 801b58a:	1a9b      	subs	r3, r3, r2
 801b58c:	18ca      	adds	r2, r1, r3
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b592:	2300      	movs	r3, #0
}
 801b594:	4618      	mov	r0, r3
 801b596:	3718      	adds	r7, #24
 801b598:	46bd      	mov	sp, r7
 801b59a:	bd80      	pop	{r7, pc}

0801b59c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b086      	sub	sp, #24
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	6078      	str	r0, [r7, #4]
 801b5a4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	695b      	ldr	r3, [r3, #20]
 801b5b0:	3320      	adds	r3, #32
 801b5b2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	69db      	ldr	r3, [r3, #28]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d003      	beq.n	801b5c4 <dir_next+0x28>
 801b5bc:	68bb      	ldr	r3, [r7, #8]
 801b5be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b5c2:	d301      	bcc.n	801b5c8 <dir_next+0x2c>
 801b5c4:	2304      	movs	r3, #4
 801b5c6:	e0bb      	b.n	801b740 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b5c8:	68fb      	ldr	r3, [r7, #12]
 801b5ca:	899b      	ldrh	r3, [r3, #12]
 801b5cc:	461a      	mov	r2, r3
 801b5ce:	68bb      	ldr	r3, [r7, #8]
 801b5d0:	fbb3 f1f2 	udiv	r1, r3, r2
 801b5d4:	fb01 f202 	mul.w	r2, r1, r2
 801b5d8:	1a9b      	subs	r3, r3, r2
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	f040 809d 	bne.w	801b71a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	69db      	ldr	r3, [r3, #28]
 801b5e4:	1c5a      	adds	r2, r3, #1
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	699b      	ldr	r3, [r3, #24]
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d10b      	bne.n	801b60a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b5f2:	68bb      	ldr	r3, [r7, #8]
 801b5f4:	095b      	lsrs	r3, r3, #5
 801b5f6:	68fa      	ldr	r2, [r7, #12]
 801b5f8:	8912      	ldrh	r2, [r2, #8]
 801b5fa:	4293      	cmp	r3, r2
 801b5fc:	f0c0 808d 	bcc.w	801b71a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	2200      	movs	r2, #0
 801b604:	61da      	str	r2, [r3, #28]
 801b606:	2304      	movs	r3, #4
 801b608:	e09a      	b.n	801b740 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b60a:	68fb      	ldr	r3, [r7, #12]
 801b60c:	899b      	ldrh	r3, [r3, #12]
 801b60e:	461a      	mov	r2, r3
 801b610:	68bb      	ldr	r3, [r7, #8]
 801b612:	fbb3 f3f2 	udiv	r3, r3, r2
 801b616:	68fa      	ldr	r2, [r7, #12]
 801b618:	8952      	ldrh	r2, [r2, #10]
 801b61a:	3a01      	subs	r2, #1
 801b61c:	4013      	ands	r3, r2
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d17b      	bne.n	801b71a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b622:	687a      	ldr	r2, [r7, #4]
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	699b      	ldr	r3, [r3, #24]
 801b628:	4619      	mov	r1, r3
 801b62a:	4610      	mov	r0, r2
 801b62c:	f7ff fc0b 	bl	801ae46 <get_fat>
 801b630:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b632:	697b      	ldr	r3, [r7, #20]
 801b634:	2b01      	cmp	r3, #1
 801b636:	d801      	bhi.n	801b63c <dir_next+0xa0>
 801b638:	2302      	movs	r3, #2
 801b63a:	e081      	b.n	801b740 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801b63c:	697b      	ldr	r3, [r7, #20]
 801b63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b642:	d101      	bne.n	801b648 <dir_next+0xac>
 801b644:	2301      	movs	r3, #1
 801b646:	e07b      	b.n	801b740 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	69db      	ldr	r3, [r3, #28]
 801b64c:	697a      	ldr	r2, [r7, #20]
 801b64e:	429a      	cmp	r2, r3
 801b650:	d359      	bcc.n	801b706 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801b652:	683b      	ldr	r3, [r7, #0]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d104      	bne.n	801b662 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	2200      	movs	r2, #0
 801b65c:	61da      	str	r2, [r3, #28]
 801b65e:	2304      	movs	r3, #4
 801b660:	e06e      	b.n	801b740 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801b662:	687a      	ldr	r2, [r7, #4]
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	699b      	ldr	r3, [r3, #24]
 801b668:	4619      	mov	r1, r3
 801b66a:	4610      	mov	r0, r2
 801b66c:	f7ff fe3d 	bl	801b2ea <create_chain>
 801b670:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b672:	697b      	ldr	r3, [r7, #20]
 801b674:	2b00      	cmp	r3, #0
 801b676:	d101      	bne.n	801b67c <dir_next+0xe0>
 801b678:	2307      	movs	r3, #7
 801b67a:	e061      	b.n	801b740 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801b67c:	697b      	ldr	r3, [r7, #20]
 801b67e:	2b01      	cmp	r3, #1
 801b680:	d101      	bne.n	801b686 <dir_next+0xea>
 801b682:	2302      	movs	r3, #2
 801b684:	e05c      	b.n	801b740 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b686:	697b      	ldr	r3, [r7, #20]
 801b688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b68c:	d101      	bne.n	801b692 <dir_next+0xf6>
 801b68e:	2301      	movs	r3, #1
 801b690:	e056      	b.n	801b740 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801b692:	68f8      	ldr	r0, [r7, #12]
 801b694:	f7ff fad6 	bl	801ac44 <sync_window>
 801b698:	4603      	mov	r3, r0
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d001      	beq.n	801b6a2 <dir_next+0x106>
 801b69e:	2301      	movs	r3, #1
 801b6a0:	e04e      	b.n	801b740 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801b6a2:	68fb      	ldr	r3, [r7, #12]
 801b6a4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	899b      	ldrh	r3, [r3, #12]
 801b6ac:	461a      	mov	r2, r3
 801b6ae:	2100      	movs	r1, #0
 801b6b0:	f7ff f8ff 	bl	801a8b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b6b4:	2300      	movs	r3, #0
 801b6b6:	613b      	str	r3, [r7, #16]
 801b6b8:	6979      	ldr	r1, [r7, #20]
 801b6ba:	68f8      	ldr	r0, [r7, #12]
 801b6bc:	f7ff fba4 	bl	801ae08 <clust2sect>
 801b6c0:	4602      	mov	r2, r0
 801b6c2:	68fb      	ldr	r3, [r7, #12]
 801b6c4:	635a      	str	r2, [r3, #52]	@ 0x34
 801b6c6:	e012      	b.n	801b6ee <dir_next+0x152>
						fs->wflag = 1;
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	2201      	movs	r2, #1
 801b6cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801b6ce:	68f8      	ldr	r0, [r7, #12]
 801b6d0:	f7ff fab8 	bl	801ac44 <sync_window>
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d001      	beq.n	801b6de <dir_next+0x142>
 801b6da:	2301      	movs	r3, #1
 801b6dc:	e030      	b.n	801b740 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b6de:	693b      	ldr	r3, [r7, #16]
 801b6e0:	3301      	adds	r3, #1
 801b6e2:	613b      	str	r3, [r7, #16]
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b6e8:	1c5a      	adds	r2, r3, #1
 801b6ea:	68fb      	ldr	r3, [r7, #12]
 801b6ec:	635a      	str	r2, [r3, #52]	@ 0x34
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	895b      	ldrh	r3, [r3, #10]
 801b6f2:	461a      	mov	r2, r3
 801b6f4:	693b      	ldr	r3, [r7, #16]
 801b6f6:	4293      	cmp	r3, r2
 801b6f8:	d3e6      	bcc.n	801b6c8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801b6fa:	68fb      	ldr	r3, [r7, #12]
 801b6fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b6fe:	693b      	ldr	r3, [r7, #16]
 801b700:	1ad2      	subs	r2, r2, r3
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	697a      	ldr	r2, [r7, #20]
 801b70a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801b70c:	6979      	ldr	r1, [r7, #20]
 801b70e:	68f8      	ldr	r0, [r7, #12]
 801b710:	f7ff fb7a 	bl	801ae08 <clust2sect>
 801b714:	4602      	mov	r2, r0
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	68ba      	ldr	r2, [r7, #8]
 801b71e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	899b      	ldrh	r3, [r3, #12]
 801b72a:	461a      	mov	r2, r3
 801b72c:	68bb      	ldr	r3, [r7, #8]
 801b72e:	fbb3 f0f2 	udiv	r0, r3, r2
 801b732:	fb00 f202 	mul.w	r2, r0, r2
 801b736:	1a9b      	subs	r3, r3, r2
 801b738:	18ca      	adds	r2, r1, r3
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b73e:	2300      	movs	r3, #0
}
 801b740:	4618      	mov	r0, r3
 801b742:	3718      	adds	r7, #24
 801b744:	46bd      	mov	sp, r7
 801b746:	bd80      	pop	{r7, pc}

0801b748 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801b748:	b580      	push	{r7, lr}
 801b74a:	b086      	sub	sp, #24
 801b74c:	af00      	add	r7, sp, #0
 801b74e:	6078      	str	r0, [r7, #4]
 801b750:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801b758:	2100      	movs	r1, #0
 801b75a:	6878      	ldr	r0, [r7, #4]
 801b75c:	f7ff fe95 	bl	801b48a <dir_sdi>
 801b760:	4603      	mov	r3, r0
 801b762:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b764:	7dfb      	ldrb	r3, [r7, #23]
 801b766:	2b00      	cmp	r3, #0
 801b768:	d12b      	bne.n	801b7c2 <dir_alloc+0x7a>
		n = 0;
 801b76a:	2300      	movs	r3, #0
 801b76c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	69db      	ldr	r3, [r3, #28]
 801b772:	4619      	mov	r1, r3
 801b774:	68f8      	ldr	r0, [r7, #12]
 801b776:	f7ff faa9 	bl	801accc <move_window>
 801b77a:	4603      	mov	r3, r0
 801b77c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b77e:	7dfb      	ldrb	r3, [r7, #23]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d11d      	bne.n	801b7c0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	6a1b      	ldr	r3, [r3, #32]
 801b788:	781b      	ldrb	r3, [r3, #0]
 801b78a:	2be5      	cmp	r3, #229	@ 0xe5
 801b78c:	d004      	beq.n	801b798 <dir_alloc+0x50>
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	6a1b      	ldr	r3, [r3, #32]
 801b792:	781b      	ldrb	r3, [r3, #0]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d107      	bne.n	801b7a8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b798:	693b      	ldr	r3, [r7, #16]
 801b79a:	3301      	adds	r3, #1
 801b79c:	613b      	str	r3, [r7, #16]
 801b79e:	693a      	ldr	r2, [r7, #16]
 801b7a0:	683b      	ldr	r3, [r7, #0]
 801b7a2:	429a      	cmp	r2, r3
 801b7a4:	d102      	bne.n	801b7ac <dir_alloc+0x64>
 801b7a6:	e00c      	b.n	801b7c2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b7ac:	2101      	movs	r1, #1
 801b7ae:	6878      	ldr	r0, [r7, #4]
 801b7b0:	f7ff fef4 	bl	801b59c <dir_next>
 801b7b4:	4603      	mov	r3, r0
 801b7b6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b7b8:	7dfb      	ldrb	r3, [r7, #23]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d0d7      	beq.n	801b76e <dir_alloc+0x26>
 801b7be:	e000      	b.n	801b7c2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b7c0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b7c2:	7dfb      	ldrb	r3, [r7, #23]
 801b7c4:	2b04      	cmp	r3, #4
 801b7c6:	d101      	bne.n	801b7cc <dir_alloc+0x84>
 801b7c8:	2307      	movs	r3, #7
 801b7ca:	75fb      	strb	r3, [r7, #23]
	return res;
 801b7cc:	7dfb      	ldrb	r3, [r7, #23]
}
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	3718      	adds	r7, #24
 801b7d2:	46bd      	mov	sp, r7
 801b7d4:	bd80      	pop	{r7, pc}

0801b7d6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b7d6:	b580      	push	{r7, lr}
 801b7d8:	b084      	sub	sp, #16
 801b7da:	af00      	add	r7, sp, #0
 801b7dc:	6078      	str	r0, [r7, #4]
 801b7de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b7e0:	683b      	ldr	r3, [r7, #0]
 801b7e2:	331a      	adds	r3, #26
 801b7e4:	4618      	mov	r0, r3
 801b7e6:	f7fe ffc1 	bl	801a76c <ld_word>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	781b      	ldrb	r3, [r3, #0]
 801b7f2:	2b03      	cmp	r3, #3
 801b7f4:	d109      	bne.n	801b80a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b7f6:	683b      	ldr	r3, [r7, #0]
 801b7f8:	3314      	adds	r3, #20
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f7fe ffb6 	bl	801a76c <ld_word>
 801b800:	4603      	mov	r3, r0
 801b802:	041b      	lsls	r3, r3, #16
 801b804:	68fa      	ldr	r2, [r7, #12]
 801b806:	4313      	orrs	r3, r2
 801b808:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801b80a:	68fb      	ldr	r3, [r7, #12]
}
 801b80c:	4618      	mov	r0, r3
 801b80e:	3710      	adds	r7, #16
 801b810:	46bd      	mov	sp, r7
 801b812:	bd80      	pop	{r7, pc}

0801b814 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801b814:	b580      	push	{r7, lr}
 801b816:	b084      	sub	sp, #16
 801b818:	af00      	add	r7, sp, #0
 801b81a:	60f8      	str	r0, [r7, #12]
 801b81c:	60b9      	str	r1, [r7, #8]
 801b81e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801b820:	68bb      	ldr	r3, [r7, #8]
 801b822:	331a      	adds	r3, #26
 801b824:	687a      	ldr	r2, [r7, #4]
 801b826:	b292      	uxth	r2, r2
 801b828:	4611      	mov	r1, r2
 801b82a:	4618      	mov	r0, r3
 801b82c:	f7fe ffd9 	bl	801a7e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801b830:	68fb      	ldr	r3, [r7, #12]
 801b832:	781b      	ldrb	r3, [r3, #0]
 801b834:	2b03      	cmp	r3, #3
 801b836:	d109      	bne.n	801b84c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b838:	68bb      	ldr	r3, [r7, #8]
 801b83a:	f103 0214 	add.w	r2, r3, #20
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	0c1b      	lsrs	r3, r3, #16
 801b842:	b29b      	uxth	r3, r3
 801b844:	4619      	mov	r1, r3
 801b846:	4610      	mov	r0, r2
 801b848:	f7fe ffcb 	bl	801a7e2 <st_word>
	}
}
 801b84c:	bf00      	nop
 801b84e:	3710      	adds	r7, #16
 801b850:	46bd      	mov	sp, r7
 801b852:	bd80      	pop	{r7, pc}

0801b854 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801b854:	b590      	push	{r4, r7, lr}
 801b856:	b087      	sub	sp, #28
 801b858:	af00      	add	r7, sp, #0
 801b85a:	6078      	str	r0, [r7, #4]
 801b85c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801b85e:	683b      	ldr	r3, [r7, #0]
 801b860:	331a      	adds	r3, #26
 801b862:	4618      	mov	r0, r3
 801b864:	f7fe ff82 	bl	801a76c <ld_word>
 801b868:	4603      	mov	r3, r0
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d001      	beq.n	801b872 <cmp_lfn+0x1e>
 801b86e:	2300      	movs	r3, #0
 801b870:	e059      	b.n	801b926 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801b872:	683b      	ldr	r3, [r7, #0]
 801b874:	781b      	ldrb	r3, [r3, #0]
 801b876:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b87a:	1e5a      	subs	r2, r3, #1
 801b87c:	4613      	mov	r3, r2
 801b87e:	005b      	lsls	r3, r3, #1
 801b880:	4413      	add	r3, r2
 801b882:	009b      	lsls	r3, r3, #2
 801b884:	4413      	add	r3, r2
 801b886:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b888:	2301      	movs	r3, #1
 801b88a:	81fb      	strh	r3, [r7, #14]
 801b88c:	2300      	movs	r3, #0
 801b88e:	613b      	str	r3, [r7, #16]
 801b890:	e033      	b.n	801b8fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801b892:	4a27      	ldr	r2, [pc, #156]	@ (801b930 <cmp_lfn+0xdc>)
 801b894:	693b      	ldr	r3, [r7, #16]
 801b896:	4413      	add	r3, r2
 801b898:	781b      	ldrb	r3, [r3, #0]
 801b89a:	461a      	mov	r2, r3
 801b89c:	683b      	ldr	r3, [r7, #0]
 801b89e:	4413      	add	r3, r2
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f7fe ff63 	bl	801a76c <ld_word>
 801b8a6:	4603      	mov	r3, r0
 801b8a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801b8aa:	89fb      	ldrh	r3, [r7, #14]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d01a      	beq.n	801b8e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801b8b0:	697b      	ldr	r3, [r7, #20]
 801b8b2:	2bfe      	cmp	r3, #254	@ 0xfe
 801b8b4:	d812      	bhi.n	801b8dc <cmp_lfn+0x88>
 801b8b6:	89bb      	ldrh	r3, [r7, #12]
 801b8b8:	4618      	mov	r0, r3
 801b8ba:	f001 ff71 	bl	801d7a0 <ff_wtoupper>
 801b8be:	4603      	mov	r3, r0
 801b8c0:	461c      	mov	r4, r3
 801b8c2:	697b      	ldr	r3, [r7, #20]
 801b8c4:	1c5a      	adds	r2, r3, #1
 801b8c6:	617a      	str	r2, [r7, #20]
 801b8c8:	005b      	lsls	r3, r3, #1
 801b8ca:	687a      	ldr	r2, [r7, #4]
 801b8cc:	4413      	add	r3, r2
 801b8ce:	881b      	ldrh	r3, [r3, #0]
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f001 ff65 	bl	801d7a0 <ff_wtoupper>
 801b8d6:	4603      	mov	r3, r0
 801b8d8:	429c      	cmp	r4, r3
 801b8da:	d001      	beq.n	801b8e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801b8dc:	2300      	movs	r3, #0
 801b8de:	e022      	b.n	801b926 <cmp_lfn+0xd2>
			}
			wc = uc;
 801b8e0:	89bb      	ldrh	r3, [r7, #12]
 801b8e2:	81fb      	strh	r3, [r7, #14]
 801b8e4:	e006      	b.n	801b8f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801b8e6:	89bb      	ldrh	r3, [r7, #12]
 801b8e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b8ec:	4293      	cmp	r3, r2
 801b8ee:	d001      	beq.n	801b8f4 <cmp_lfn+0xa0>
 801b8f0:	2300      	movs	r3, #0
 801b8f2:	e018      	b.n	801b926 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b8f4:	693b      	ldr	r3, [r7, #16]
 801b8f6:	3301      	adds	r3, #1
 801b8f8:	613b      	str	r3, [r7, #16]
 801b8fa:	693b      	ldr	r3, [r7, #16]
 801b8fc:	2b0c      	cmp	r3, #12
 801b8fe:	d9c8      	bls.n	801b892 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801b900:	683b      	ldr	r3, [r7, #0]
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d00b      	beq.n	801b924 <cmp_lfn+0xd0>
 801b90c:	89fb      	ldrh	r3, [r7, #14]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d008      	beq.n	801b924 <cmp_lfn+0xd0>
 801b912:	697b      	ldr	r3, [r7, #20]
 801b914:	005b      	lsls	r3, r3, #1
 801b916:	687a      	ldr	r2, [r7, #4]
 801b918:	4413      	add	r3, r2
 801b91a:	881b      	ldrh	r3, [r3, #0]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d001      	beq.n	801b924 <cmp_lfn+0xd0>
 801b920:	2300      	movs	r3, #0
 801b922:	e000      	b.n	801b926 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801b924:	2301      	movs	r3, #1
}
 801b926:	4618      	mov	r0, r3
 801b928:	371c      	adds	r7, #28
 801b92a:	46bd      	mov	sp, r7
 801b92c:	bd90      	pop	{r4, r7, pc}
 801b92e:	bf00      	nop
 801b930:	0801e43c 	.word	0x0801e43c

0801b934 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801b934:	b580      	push	{r7, lr}
 801b936:	b086      	sub	sp, #24
 801b938:	af00      	add	r7, sp, #0
 801b93a:	6078      	str	r0, [r7, #4]
 801b93c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801b93e:	683b      	ldr	r3, [r7, #0]
 801b940:	331a      	adds	r3, #26
 801b942:	4618      	mov	r0, r3
 801b944:	f7fe ff12 	bl	801a76c <ld_word>
 801b948:	4603      	mov	r3, r0
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d001      	beq.n	801b952 <pick_lfn+0x1e>
 801b94e:	2300      	movs	r3, #0
 801b950:	e04d      	b.n	801b9ee <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801b952:	683b      	ldr	r3, [r7, #0]
 801b954:	781b      	ldrb	r3, [r3, #0]
 801b956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801b95a:	1e5a      	subs	r2, r3, #1
 801b95c:	4613      	mov	r3, r2
 801b95e:	005b      	lsls	r3, r3, #1
 801b960:	4413      	add	r3, r2
 801b962:	009b      	lsls	r3, r3, #2
 801b964:	4413      	add	r3, r2
 801b966:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b968:	2301      	movs	r3, #1
 801b96a:	81fb      	strh	r3, [r7, #14]
 801b96c:	2300      	movs	r3, #0
 801b96e:	613b      	str	r3, [r7, #16]
 801b970:	e028      	b.n	801b9c4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801b972:	4a21      	ldr	r2, [pc, #132]	@ (801b9f8 <pick_lfn+0xc4>)
 801b974:	693b      	ldr	r3, [r7, #16]
 801b976:	4413      	add	r3, r2
 801b978:	781b      	ldrb	r3, [r3, #0]
 801b97a:	461a      	mov	r2, r3
 801b97c:	683b      	ldr	r3, [r7, #0]
 801b97e:	4413      	add	r3, r2
 801b980:	4618      	mov	r0, r3
 801b982:	f7fe fef3 	bl	801a76c <ld_word>
 801b986:	4603      	mov	r3, r0
 801b988:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801b98a:	89fb      	ldrh	r3, [r7, #14]
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d00f      	beq.n	801b9b0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801b990:	697b      	ldr	r3, [r7, #20]
 801b992:	2bfe      	cmp	r3, #254	@ 0xfe
 801b994:	d901      	bls.n	801b99a <pick_lfn+0x66>
 801b996:	2300      	movs	r3, #0
 801b998:	e029      	b.n	801b9ee <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801b99a:	89bb      	ldrh	r3, [r7, #12]
 801b99c:	81fb      	strh	r3, [r7, #14]
 801b99e:	697b      	ldr	r3, [r7, #20]
 801b9a0:	1c5a      	adds	r2, r3, #1
 801b9a2:	617a      	str	r2, [r7, #20]
 801b9a4:	005b      	lsls	r3, r3, #1
 801b9a6:	687a      	ldr	r2, [r7, #4]
 801b9a8:	4413      	add	r3, r2
 801b9aa:	89fa      	ldrh	r2, [r7, #14]
 801b9ac:	801a      	strh	r2, [r3, #0]
 801b9ae:	e006      	b.n	801b9be <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801b9b0:	89bb      	ldrh	r3, [r7, #12]
 801b9b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b9b6:	4293      	cmp	r3, r2
 801b9b8:	d001      	beq.n	801b9be <pick_lfn+0x8a>
 801b9ba:	2300      	movs	r3, #0
 801b9bc:	e017      	b.n	801b9ee <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801b9be:	693b      	ldr	r3, [r7, #16]
 801b9c0:	3301      	adds	r3, #1
 801b9c2:	613b      	str	r3, [r7, #16]
 801b9c4:	693b      	ldr	r3, [r7, #16]
 801b9c6:	2b0c      	cmp	r3, #12
 801b9c8:	d9d3      	bls.n	801b972 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801b9ca:	683b      	ldr	r3, [r7, #0]
 801b9cc:	781b      	ldrb	r3, [r3, #0]
 801b9ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d00a      	beq.n	801b9ec <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801b9d6:	697b      	ldr	r3, [r7, #20]
 801b9d8:	2bfe      	cmp	r3, #254	@ 0xfe
 801b9da:	d901      	bls.n	801b9e0 <pick_lfn+0xac>
 801b9dc:	2300      	movs	r3, #0
 801b9de:	e006      	b.n	801b9ee <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801b9e0:	697b      	ldr	r3, [r7, #20]
 801b9e2:	005b      	lsls	r3, r3, #1
 801b9e4:	687a      	ldr	r2, [r7, #4]
 801b9e6:	4413      	add	r3, r2
 801b9e8:	2200      	movs	r2, #0
 801b9ea:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801b9ec:	2301      	movs	r3, #1
}
 801b9ee:	4618      	mov	r0, r3
 801b9f0:	3718      	adds	r7, #24
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	bd80      	pop	{r7, pc}
 801b9f6:	bf00      	nop
 801b9f8:	0801e43c 	.word	0x0801e43c

0801b9fc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	b088      	sub	sp, #32
 801ba00:	af00      	add	r7, sp, #0
 801ba02:	60f8      	str	r0, [r7, #12]
 801ba04:	60b9      	str	r1, [r7, #8]
 801ba06:	4611      	mov	r1, r2
 801ba08:	461a      	mov	r2, r3
 801ba0a:	460b      	mov	r3, r1
 801ba0c:	71fb      	strb	r3, [r7, #7]
 801ba0e:	4613      	mov	r3, r2
 801ba10:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801ba12:	68bb      	ldr	r3, [r7, #8]
 801ba14:	330d      	adds	r3, #13
 801ba16:	79ba      	ldrb	r2, [r7, #6]
 801ba18:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801ba1a:	68bb      	ldr	r3, [r7, #8]
 801ba1c:	330b      	adds	r3, #11
 801ba1e:	220f      	movs	r2, #15
 801ba20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801ba22:	68bb      	ldr	r3, [r7, #8]
 801ba24:	330c      	adds	r3, #12
 801ba26:	2200      	movs	r2, #0
 801ba28:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801ba2a:	68bb      	ldr	r3, [r7, #8]
 801ba2c:	331a      	adds	r3, #26
 801ba2e:	2100      	movs	r1, #0
 801ba30:	4618      	mov	r0, r3
 801ba32:	f7fe fed6 	bl	801a7e2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801ba36:	79fb      	ldrb	r3, [r7, #7]
 801ba38:	1e5a      	subs	r2, r3, #1
 801ba3a:	4613      	mov	r3, r2
 801ba3c:	005b      	lsls	r3, r3, #1
 801ba3e:	4413      	add	r3, r2
 801ba40:	009b      	lsls	r3, r3, #2
 801ba42:	4413      	add	r3, r2
 801ba44:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801ba46:	2300      	movs	r3, #0
 801ba48:	82fb      	strh	r3, [r7, #22]
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801ba4e:	8afb      	ldrh	r3, [r7, #22]
 801ba50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ba54:	4293      	cmp	r3, r2
 801ba56:	d007      	beq.n	801ba68 <put_lfn+0x6c>
 801ba58:	69fb      	ldr	r3, [r7, #28]
 801ba5a:	1c5a      	adds	r2, r3, #1
 801ba5c:	61fa      	str	r2, [r7, #28]
 801ba5e:	005b      	lsls	r3, r3, #1
 801ba60:	68fa      	ldr	r2, [r7, #12]
 801ba62:	4413      	add	r3, r2
 801ba64:	881b      	ldrh	r3, [r3, #0]
 801ba66:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801ba68:	4a17      	ldr	r2, [pc, #92]	@ (801bac8 <put_lfn+0xcc>)
 801ba6a:	69bb      	ldr	r3, [r7, #24]
 801ba6c:	4413      	add	r3, r2
 801ba6e:	781b      	ldrb	r3, [r3, #0]
 801ba70:	461a      	mov	r2, r3
 801ba72:	68bb      	ldr	r3, [r7, #8]
 801ba74:	4413      	add	r3, r2
 801ba76:	8afa      	ldrh	r2, [r7, #22]
 801ba78:	4611      	mov	r1, r2
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	f7fe feb1 	bl	801a7e2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801ba80:	8afb      	ldrh	r3, [r7, #22]
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d102      	bne.n	801ba8c <put_lfn+0x90>
 801ba86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ba8a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801ba8c:	69bb      	ldr	r3, [r7, #24]
 801ba8e:	3301      	adds	r3, #1
 801ba90:	61bb      	str	r3, [r7, #24]
 801ba92:	69bb      	ldr	r3, [r7, #24]
 801ba94:	2b0c      	cmp	r3, #12
 801ba96:	d9da      	bls.n	801ba4e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801ba98:	8afb      	ldrh	r3, [r7, #22]
 801ba9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ba9e:	4293      	cmp	r3, r2
 801baa0:	d006      	beq.n	801bab0 <put_lfn+0xb4>
 801baa2:	69fb      	ldr	r3, [r7, #28]
 801baa4:	005b      	lsls	r3, r3, #1
 801baa6:	68fa      	ldr	r2, [r7, #12]
 801baa8:	4413      	add	r3, r2
 801baaa:	881b      	ldrh	r3, [r3, #0]
 801baac:	2b00      	cmp	r3, #0
 801baae:	d103      	bne.n	801bab8 <put_lfn+0xbc>
 801bab0:	79fb      	ldrb	r3, [r7, #7]
 801bab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bab6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801bab8:	68bb      	ldr	r3, [r7, #8]
 801baba:	79fa      	ldrb	r2, [r7, #7]
 801babc:	701a      	strb	r2, [r3, #0]
}
 801babe:	bf00      	nop
 801bac0:	3720      	adds	r7, #32
 801bac2:	46bd      	mov	sp, r7
 801bac4:	bd80      	pop	{r7, pc}
 801bac6:	bf00      	nop
 801bac8:	0801e43c 	.word	0x0801e43c

0801bacc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801bacc:	b580      	push	{r7, lr}
 801bace:	b08c      	sub	sp, #48	@ 0x30
 801bad0:	af00      	add	r7, sp, #0
 801bad2:	60f8      	str	r0, [r7, #12]
 801bad4:	60b9      	str	r1, [r7, #8]
 801bad6:	607a      	str	r2, [r7, #4]
 801bad8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801bada:	220b      	movs	r2, #11
 801badc:	68b9      	ldr	r1, [r7, #8]
 801bade:	68f8      	ldr	r0, [r7, #12]
 801bae0:	f7fe fec6 	bl	801a870 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801bae4:	683b      	ldr	r3, [r7, #0]
 801bae6:	2b05      	cmp	r3, #5
 801bae8:	d929      	bls.n	801bb3e <gen_numname+0x72>
		sr = seq;
 801baea:	683b      	ldr	r3, [r7, #0]
 801baec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801baee:	e020      	b.n	801bb32 <gen_numname+0x66>
			wc = *lfn++;
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	1c9a      	adds	r2, r3, #2
 801baf4:	607a      	str	r2, [r7, #4]
 801baf6:	881b      	ldrh	r3, [r3, #0]
 801baf8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801bafa:	2300      	movs	r3, #0
 801bafc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bafe:	e015      	b.n	801bb2c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801bb00:	69fb      	ldr	r3, [r7, #28]
 801bb02:	005a      	lsls	r2, r3, #1
 801bb04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bb06:	f003 0301 	and.w	r3, r3, #1
 801bb0a:	4413      	add	r3, r2
 801bb0c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801bb0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bb10:	085b      	lsrs	r3, r3, #1
 801bb12:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801bb14:	69fb      	ldr	r3, [r7, #28]
 801bb16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d003      	beq.n	801bb26 <gen_numname+0x5a>
 801bb1e:	69fa      	ldr	r2, [r7, #28]
 801bb20:	4b30      	ldr	r3, [pc, #192]	@ (801bbe4 <gen_numname+0x118>)
 801bb22:	4053      	eors	r3, r2
 801bb24:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801bb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb28:	3301      	adds	r3, #1
 801bb2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb2e:	2b0f      	cmp	r3, #15
 801bb30:	d9e6      	bls.n	801bb00 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	881b      	ldrh	r3, [r3, #0]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d1da      	bne.n	801baf0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801bb3a:	69fb      	ldr	r3, [r7, #28]
 801bb3c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801bb3e:	2307      	movs	r3, #7
 801bb40:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801bb42:	683b      	ldr	r3, [r7, #0]
 801bb44:	b2db      	uxtb	r3, r3
 801bb46:	f003 030f 	and.w	r3, r3, #15
 801bb4a:	b2db      	uxtb	r3, r3
 801bb4c:	3330      	adds	r3, #48	@ 0x30
 801bb4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801bb52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bb56:	2b39      	cmp	r3, #57	@ 0x39
 801bb58:	d904      	bls.n	801bb64 <gen_numname+0x98>
 801bb5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bb5e:	3307      	adds	r3, #7
 801bb60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 801bb64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb66:	1e5a      	subs	r2, r3, #1
 801bb68:	62ba      	str	r2, [r7, #40]	@ 0x28
 801bb6a:	3330      	adds	r3, #48	@ 0x30
 801bb6c:	443b      	add	r3, r7
 801bb6e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801bb72:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801bb76:	683b      	ldr	r3, [r7, #0]
 801bb78:	091b      	lsrs	r3, r3, #4
 801bb7a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801bb7c:	683b      	ldr	r3, [r7, #0]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d1df      	bne.n	801bb42 <gen_numname+0x76>
	ns[i] = '~';
 801bb82:	f107 0214 	add.w	r2, r7, #20
 801bb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb88:	4413      	add	r3, r2
 801bb8a:	227e      	movs	r2, #126	@ 0x7e
 801bb8c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801bb8e:	2300      	movs	r3, #0
 801bb90:	627b      	str	r3, [r7, #36]	@ 0x24
 801bb92:	e002      	b.n	801bb9a <gen_numname+0xce>
 801bb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb96:	3301      	adds	r3, #1
 801bb98:	627b      	str	r3, [r7, #36]	@ 0x24
 801bb9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb9e:	429a      	cmp	r2, r3
 801bba0:	d205      	bcs.n	801bbae <gen_numname+0xe2>
 801bba2:	68fa      	ldr	r2, [r7, #12]
 801bba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bba6:	4413      	add	r3, r2
 801bba8:	781b      	ldrb	r3, [r3, #0]
 801bbaa:	2b20      	cmp	r3, #32
 801bbac:	d1f2      	bne.n	801bb94 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801bbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bbb0:	2b07      	cmp	r3, #7
 801bbb2:	d807      	bhi.n	801bbc4 <gen_numname+0xf8>
 801bbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bbb6:	1c5a      	adds	r2, r3, #1
 801bbb8:	62ba      	str	r2, [r7, #40]	@ 0x28
 801bbba:	3330      	adds	r3, #48	@ 0x30
 801bbbc:	443b      	add	r3, r7
 801bbbe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801bbc2:	e000      	b.n	801bbc6 <gen_numname+0xfa>
 801bbc4:	2120      	movs	r1, #32
 801bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbc8:	1c5a      	adds	r2, r3, #1
 801bbca:	627a      	str	r2, [r7, #36]	@ 0x24
 801bbcc:	68fa      	ldr	r2, [r7, #12]
 801bbce:	4413      	add	r3, r2
 801bbd0:	460a      	mov	r2, r1
 801bbd2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801bbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbd6:	2b07      	cmp	r3, #7
 801bbd8:	d9e9      	bls.n	801bbae <gen_numname+0xe2>
}
 801bbda:	bf00      	nop
 801bbdc:	bf00      	nop
 801bbde:	3730      	adds	r7, #48	@ 0x30
 801bbe0:	46bd      	mov	sp, r7
 801bbe2:	bd80      	pop	{r7, pc}
 801bbe4:	00011021 	.word	0x00011021

0801bbe8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801bbe8:	b480      	push	{r7}
 801bbea:	b085      	sub	sp, #20
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801bbf0:	2300      	movs	r3, #0
 801bbf2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801bbf4:	230b      	movs	r3, #11
 801bbf6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801bbf8:	7bfb      	ldrb	r3, [r7, #15]
 801bbfa:	b2da      	uxtb	r2, r3
 801bbfc:	0852      	lsrs	r2, r2, #1
 801bbfe:	01db      	lsls	r3, r3, #7
 801bc00:	4313      	orrs	r3, r2
 801bc02:	b2da      	uxtb	r2, r3
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	1c59      	adds	r1, r3, #1
 801bc08:	6079      	str	r1, [r7, #4]
 801bc0a:	781b      	ldrb	r3, [r3, #0]
 801bc0c:	4413      	add	r3, r2
 801bc0e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801bc10:	68bb      	ldr	r3, [r7, #8]
 801bc12:	3b01      	subs	r3, #1
 801bc14:	60bb      	str	r3, [r7, #8]
 801bc16:	68bb      	ldr	r3, [r7, #8]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d1ed      	bne.n	801bbf8 <sum_sfn+0x10>
	return sum;
 801bc1c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc1e:	4618      	mov	r0, r3
 801bc20:	3714      	adds	r7, #20
 801bc22:	46bd      	mov	sp, r7
 801bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc28:	4770      	bx	lr

0801bc2a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801bc2a:	b580      	push	{r7, lr}
 801bc2c:	b086      	sub	sp, #24
 801bc2e:	af00      	add	r7, sp, #0
 801bc30:	6078      	str	r0, [r7, #4]
 801bc32:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801bc34:	2304      	movs	r3, #4
 801bc36:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801bc3e:	23ff      	movs	r3, #255	@ 0xff
 801bc40:	757b      	strb	r3, [r7, #21]
 801bc42:	23ff      	movs	r3, #255	@ 0xff
 801bc44:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801bc46:	e081      	b.n	801bd4c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	69db      	ldr	r3, [r3, #28]
 801bc4c:	4619      	mov	r1, r3
 801bc4e:	6938      	ldr	r0, [r7, #16]
 801bc50:	f7ff f83c 	bl	801accc <move_window>
 801bc54:	4603      	mov	r3, r0
 801bc56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bc58:	7dfb      	ldrb	r3, [r7, #23]
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d17c      	bne.n	801bd58 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	6a1b      	ldr	r3, [r3, #32]
 801bc62:	781b      	ldrb	r3, [r3, #0]
 801bc64:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801bc66:	7dbb      	ldrb	r3, [r7, #22]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d102      	bne.n	801bc72 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801bc6c:	2304      	movs	r3, #4
 801bc6e:	75fb      	strb	r3, [r7, #23]
 801bc70:	e077      	b.n	801bd62 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	6a1b      	ldr	r3, [r3, #32]
 801bc76:	330b      	adds	r3, #11
 801bc78:	781b      	ldrb	r3, [r3, #0]
 801bc7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bc7e:	73fb      	strb	r3, [r7, #15]
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	7bfa      	ldrb	r2, [r7, #15]
 801bc84:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801bc86:	7dbb      	ldrb	r3, [r7, #22]
 801bc88:	2be5      	cmp	r3, #229	@ 0xe5
 801bc8a:	d00e      	beq.n	801bcaa <dir_read+0x80>
 801bc8c:	7dbb      	ldrb	r3, [r7, #22]
 801bc8e:	2b2e      	cmp	r3, #46	@ 0x2e
 801bc90:	d00b      	beq.n	801bcaa <dir_read+0x80>
 801bc92:	7bfb      	ldrb	r3, [r7, #15]
 801bc94:	f023 0320 	bic.w	r3, r3, #32
 801bc98:	2b08      	cmp	r3, #8
 801bc9a:	bf0c      	ite	eq
 801bc9c:	2301      	moveq	r3, #1
 801bc9e:	2300      	movne	r3, #0
 801bca0:	b2db      	uxtb	r3, r3
 801bca2:	461a      	mov	r2, r3
 801bca4:	683b      	ldr	r3, [r7, #0]
 801bca6:	4293      	cmp	r3, r2
 801bca8:	d002      	beq.n	801bcb0 <dir_read+0x86>
				ord = 0xFF;
 801bcaa:	23ff      	movs	r3, #255	@ 0xff
 801bcac:	757b      	strb	r3, [r7, #21]
 801bcae:	e044      	b.n	801bd3a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801bcb0:	7bfb      	ldrb	r3, [r7, #15]
 801bcb2:	2b0f      	cmp	r3, #15
 801bcb4:	d12f      	bne.n	801bd16 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801bcb6:	7dbb      	ldrb	r3, [r7, #22]
 801bcb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d00d      	beq.n	801bcdc <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	6a1b      	ldr	r3, [r3, #32]
 801bcc4:	7b5b      	ldrb	r3, [r3, #13]
 801bcc6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801bcc8:	7dbb      	ldrb	r3, [r7, #22]
 801bcca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801bcce:	75bb      	strb	r3, [r7, #22]
 801bcd0:	7dbb      	ldrb	r3, [r7, #22]
 801bcd2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	695a      	ldr	r2, [r3, #20]
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801bcdc:	7dba      	ldrb	r2, [r7, #22]
 801bcde:	7d7b      	ldrb	r3, [r7, #21]
 801bce0:	429a      	cmp	r2, r3
 801bce2:	d115      	bne.n	801bd10 <dir_read+0xe6>
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	6a1b      	ldr	r3, [r3, #32]
 801bce8:	330d      	adds	r3, #13
 801bcea:	781b      	ldrb	r3, [r3, #0]
 801bcec:	7d3a      	ldrb	r2, [r7, #20]
 801bcee:	429a      	cmp	r2, r3
 801bcf0:	d10e      	bne.n	801bd10 <dir_read+0xe6>
 801bcf2:	693b      	ldr	r3, [r7, #16]
 801bcf4:	691a      	ldr	r2, [r3, #16]
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	6a1b      	ldr	r3, [r3, #32]
 801bcfa:	4619      	mov	r1, r3
 801bcfc:	4610      	mov	r0, r2
 801bcfe:	f7ff fe19 	bl	801b934 <pick_lfn>
 801bd02:	4603      	mov	r3, r0
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d003      	beq.n	801bd10 <dir_read+0xe6>
 801bd08:	7d7b      	ldrb	r3, [r7, #21]
 801bd0a:	3b01      	subs	r3, #1
 801bd0c:	b2db      	uxtb	r3, r3
 801bd0e:	e000      	b.n	801bd12 <dir_read+0xe8>
 801bd10:	23ff      	movs	r3, #255	@ 0xff
 801bd12:	757b      	strb	r3, [r7, #21]
 801bd14:	e011      	b.n	801bd3a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801bd16:	7d7b      	ldrb	r3, [r7, #21]
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d109      	bne.n	801bd30 <dir_read+0x106>
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	6a1b      	ldr	r3, [r3, #32]
 801bd20:	4618      	mov	r0, r3
 801bd22:	f7ff ff61 	bl	801bbe8 <sum_sfn>
 801bd26:	4603      	mov	r3, r0
 801bd28:	461a      	mov	r2, r3
 801bd2a:	7d3b      	ldrb	r3, [r7, #20]
 801bd2c:	4293      	cmp	r3, r2
 801bd2e:	d015      	beq.n	801bd5c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	f04f 32ff 	mov.w	r2, #4294967295
 801bd36:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 801bd38:	e010      	b.n	801bd5c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801bd3a:	2100      	movs	r1, #0
 801bd3c:	6878      	ldr	r0, [r7, #4]
 801bd3e:	f7ff fc2d 	bl	801b59c <dir_next>
 801bd42:	4603      	mov	r3, r0
 801bd44:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bd46:	7dfb      	ldrb	r3, [r7, #23]
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d109      	bne.n	801bd60 <dir_read+0x136>
	while (dp->sect) {
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	69db      	ldr	r3, [r3, #28]
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	f47f af79 	bne.w	801bc48 <dir_read+0x1e>
 801bd56:	e004      	b.n	801bd62 <dir_read+0x138>
		if (res != FR_OK) break;
 801bd58:	bf00      	nop
 801bd5a:	e002      	b.n	801bd62 <dir_read+0x138>
					break;
 801bd5c:	bf00      	nop
 801bd5e:	e000      	b.n	801bd62 <dir_read+0x138>
		if (res != FR_OK) break;
 801bd60:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801bd62:	7dfb      	ldrb	r3, [r7, #23]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d002      	beq.n	801bd6e <dir_read+0x144>
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	61da      	str	r2, [r3, #28]
	return res;
 801bd6e:	7dfb      	ldrb	r3, [r7, #23]
}
 801bd70:	4618      	mov	r0, r3
 801bd72:	3718      	adds	r7, #24
 801bd74:	46bd      	mov	sp, r7
 801bd76:	bd80      	pop	{r7, pc}

0801bd78 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801bd78:	b580      	push	{r7, lr}
 801bd7a:	b086      	sub	sp, #24
 801bd7c:	af00      	add	r7, sp, #0
 801bd7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801bd86:	2100      	movs	r1, #0
 801bd88:	6878      	ldr	r0, [r7, #4]
 801bd8a:	f7ff fb7e 	bl	801b48a <dir_sdi>
 801bd8e:	4603      	mov	r3, r0
 801bd90:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801bd92:	7dfb      	ldrb	r3, [r7, #23]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d001      	beq.n	801bd9c <dir_find+0x24>
 801bd98:	7dfb      	ldrb	r3, [r7, #23]
 801bd9a:	e0a9      	b.n	801bef0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801bd9c:	23ff      	movs	r3, #255	@ 0xff
 801bd9e:	753b      	strb	r3, [r7, #20]
 801bda0:	7d3b      	ldrb	r3, [r7, #20]
 801bda2:	757b      	strb	r3, [r7, #21]
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	f04f 32ff 	mov.w	r2, #4294967295
 801bdaa:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	69db      	ldr	r3, [r3, #28]
 801bdb0:	4619      	mov	r1, r3
 801bdb2:	6938      	ldr	r0, [r7, #16]
 801bdb4:	f7fe ff8a 	bl	801accc <move_window>
 801bdb8:	4603      	mov	r3, r0
 801bdba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801bdbc:	7dfb      	ldrb	r3, [r7, #23]
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	f040 8090 	bne.w	801bee4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	6a1b      	ldr	r3, [r3, #32]
 801bdc8:	781b      	ldrb	r3, [r3, #0]
 801bdca:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801bdcc:	7dbb      	ldrb	r3, [r7, #22]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d102      	bne.n	801bdd8 <dir_find+0x60>
 801bdd2:	2304      	movs	r3, #4
 801bdd4:	75fb      	strb	r3, [r7, #23]
 801bdd6:	e08a      	b.n	801beee <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	6a1b      	ldr	r3, [r3, #32]
 801bddc:	330b      	adds	r3, #11
 801bdde:	781b      	ldrb	r3, [r3, #0]
 801bde0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bde4:	73fb      	strb	r3, [r7, #15]
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	7bfa      	ldrb	r2, [r7, #15]
 801bdea:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801bdec:	7dbb      	ldrb	r3, [r7, #22]
 801bdee:	2be5      	cmp	r3, #229	@ 0xe5
 801bdf0:	d007      	beq.n	801be02 <dir_find+0x8a>
 801bdf2:	7bfb      	ldrb	r3, [r7, #15]
 801bdf4:	f003 0308 	and.w	r3, r3, #8
 801bdf8:	2b00      	cmp	r3, #0
 801bdfa:	d009      	beq.n	801be10 <dir_find+0x98>
 801bdfc:	7bfb      	ldrb	r3, [r7, #15]
 801bdfe:	2b0f      	cmp	r3, #15
 801be00:	d006      	beq.n	801be10 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801be02:	23ff      	movs	r3, #255	@ 0xff
 801be04:	757b      	strb	r3, [r7, #21]
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	f04f 32ff 	mov.w	r2, #4294967295
 801be0c:	631a      	str	r2, [r3, #48]	@ 0x30
 801be0e:	e05e      	b.n	801bece <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801be10:	7bfb      	ldrb	r3, [r7, #15]
 801be12:	2b0f      	cmp	r3, #15
 801be14:	d136      	bne.n	801be84 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801be1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801be20:	2b00      	cmp	r3, #0
 801be22:	d154      	bne.n	801bece <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801be24:	7dbb      	ldrb	r3, [r7, #22]
 801be26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d00d      	beq.n	801be4a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	6a1b      	ldr	r3, [r3, #32]
 801be32:	7b5b      	ldrb	r3, [r3, #13]
 801be34:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801be36:	7dbb      	ldrb	r3, [r7, #22]
 801be38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801be3c:	75bb      	strb	r3, [r7, #22]
 801be3e:	7dbb      	ldrb	r3, [r7, #22]
 801be40:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	695a      	ldr	r2, [r3, #20]
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801be4a:	7dba      	ldrb	r2, [r7, #22]
 801be4c:	7d7b      	ldrb	r3, [r7, #21]
 801be4e:	429a      	cmp	r2, r3
 801be50:	d115      	bne.n	801be7e <dir_find+0x106>
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	6a1b      	ldr	r3, [r3, #32]
 801be56:	330d      	adds	r3, #13
 801be58:	781b      	ldrb	r3, [r3, #0]
 801be5a:	7d3a      	ldrb	r2, [r7, #20]
 801be5c:	429a      	cmp	r2, r3
 801be5e:	d10e      	bne.n	801be7e <dir_find+0x106>
 801be60:	693b      	ldr	r3, [r7, #16]
 801be62:	691a      	ldr	r2, [r3, #16]
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	6a1b      	ldr	r3, [r3, #32]
 801be68:	4619      	mov	r1, r3
 801be6a:	4610      	mov	r0, r2
 801be6c:	f7ff fcf2 	bl	801b854 <cmp_lfn>
 801be70:	4603      	mov	r3, r0
 801be72:	2b00      	cmp	r3, #0
 801be74:	d003      	beq.n	801be7e <dir_find+0x106>
 801be76:	7d7b      	ldrb	r3, [r7, #21]
 801be78:	3b01      	subs	r3, #1
 801be7a:	b2db      	uxtb	r3, r3
 801be7c:	e000      	b.n	801be80 <dir_find+0x108>
 801be7e:	23ff      	movs	r3, #255	@ 0xff
 801be80:	757b      	strb	r3, [r7, #21]
 801be82:	e024      	b.n	801bece <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801be84:	7d7b      	ldrb	r3, [r7, #21]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d109      	bne.n	801be9e <dir_find+0x126>
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	6a1b      	ldr	r3, [r3, #32]
 801be8e:	4618      	mov	r0, r3
 801be90:	f7ff feaa 	bl	801bbe8 <sum_sfn>
 801be94:	4603      	mov	r3, r0
 801be96:	461a      	mov	r2, r3
 801be98:	7d3b      	ldrb	r3, [r7, #20]
 801be9a:	4293      	cmp	r3, r2
 801be9c:	d024      	beq.n	801bee8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801bea4:	f003 0301 	and.w	r3, r3, #1
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d10a      	bne.n	801bec2 <dir_find+0x14a>
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	6a18      	ldr	r0, [r3, #32]
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	3324      	adds	r3, #36	@ 0x24
 801beb4:	220b      	movs	r2, #11
 801beb6:	4619      	mov	r1, r3
 801beb8:	f7fe fd16 	bl	801a8e8 <mem_cmp>
 801bebc:	4603      	mov	r3, r0
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d014      	beq.n	801beec <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801bec2:	23ff      	movs	r3, #255	@ 0xff
 801bec4:	757b      	strb	r3, [r7, #21]
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	f04f 32ff 	mov.w	r2, #4294967295
 801becc:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801bece:	2100      	movs	r1, #0
 801bed0:	6878      	ldr	r0, [r7, #4]
 801bed2:	f7ff fb63 	bl	801b59c <dir_next>
 801bed6:	4603      	mov	r3, r0
 801bed8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801beda:	7dfb      	ldrb	r3, [r7, #23]
 801bedc:	2b00      	cmp	r3, #0
 801bede:	f43f af65 	beq.w	801bdac <dir_find+0x34>
 801bee2:	e004      	b.n	801beee <dir_find+0x176>
		if (res != FR_OK) break;
 801bee4:	bf00      	nop
 801bee6:	e002      	b.n	801beee <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801bee8:	bf00      	nop
 801beea:	e000      	b.n	801beee <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801beec:	bf00      	nop

	return res;
 801beee:	7dfb      	ldrb	r3, [r7, #23]
}
 801bef0:	4618      	mov	r0, r3
 801bef2:	3718      	adds	r7, #24
 801bef4:	46bd      	mov	sp, r7
 801bef6:	bd80      	pop	{r7, pc}

0801bef8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801bef8:	b580      	push	{r7, lr}
 801befa:	b08c      	sub	sp, #48	@ 0x30
 801befc:	af00      	add	r7, sp, #0
 801befe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801bf0c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d001      	beq.n	801bf18 <dir_register+0x20>
 801bf14:	2306      	movs	r3, #6
 801bf16:	e0e0      	b.n	801c0da <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801bf18:	2300      	movs	r3, #0
 801bf1a:	627b      	str	r3, [r7, #36]	@ 0x24
 801bf1c:	e002      	b.n	801bf24 <dir_register+0x2c>
 801bf1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf20:	3301      	adds	r3, #1
 801bf22:	627b      	str	r3, [r7, #36]	@ 0x24
 801bf24:	69fb      	ldr	r3, [r7, #28]
 801bf26:	691a      	ldr	r2, [r3, #16]
 801bf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf2a:	005b      	lsls	r3, r3, #1
 801bf2c:	4413      	add	r3, r2
 801bf2e:	881b      	ldrh	r3, [r3, #0]
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d1f4      	bne.n	801bf1e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801bf3a:	f107 030c 	add.w	r3, r7, #12
 801bf3e:	220c      	movs	r2, #12
 801bf40:	4618      	mov	r0, r3
 801bf42:	f7fe fc95 	bl	801a870 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801bf46:	7dfb      	ldrb	r3, [r7, #23]
 801bf48:	f003 0301 	and.w	r3, r3, #1
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d032      	beq.n	801bfb6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	2240      	movs	r2, #64	@ 0x40
 801bf54:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 801bf58:	2301      	movs	r3, #1
 801bf5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bf5c:	e016      	b.n	801bf8c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801bf64:	69fb      	ldr	r3, [r7, #28]
 801bf66:	691a      	ldr	r2, [r3, #16]
 801bf68:	f107 010c 	add.w	r1, r7, #12
 801bf6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf6e:	f7ff fdad 	bl	801bacc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801bf72:	6878      	ldr	r0, [r7, #4]
 801bf74:	f7ff ff00 	bl	801bd78 <dir_find>
 801bf78:	4603      	mov	r3, r0
 801bf7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 801bf7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d106      	bne.n	801bf94 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801bf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf88:	3301      	adds	r3, #1
 801bf8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bf8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf8e:	2b63      	cmp	r3, #99	@ 0x63
 801bf90:	d9e5      	bls.n	801bf5e <dir_register+0x66>
 801bf92:	e000      	b.n	801bf96 <dir_register+0x9e>
			if (res != FR_OK) break;
 801bf94:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801bf96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf98:	2b64      	cmp	r3, #100	@ 0x64
 801bf9a:	d101      	bne.n	801bfa0 <dir_register+0xa8>
 801bf9c:	2307      	movs	r3, #7
 801bf9e:	e09c      	b.n	801c0da <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801bfa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bfa4:	2b04      	cmp	r3, #4
 801bfa6:	d002      	beq.n	801bfae <dir_register+0xb6>
 801bfa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bfac:	e095      	b.n	801c0da <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801bfae:	7dfa      	ldrb	r2, [r7, #23]
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801bfb6:	7dfb      	ldrb	r3, [r7, #23]
 801bfb8:	f003 0302 	and.w	r3, r3, #2
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d007      	beq.n	801bfd0 <dir_register+0xd8>
 801bfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfc2:	330c      	adds	r3, #12
 801bfc4:	4a47      	ldr	r2, [pc, #284]	@ (801c0e4 <dir_register+0x1ec>)
 801bfc6:	fba2 2303 	umull	r2, r3, r2, r3
 801bfca:	089b      	lsrs	r3, r3, #2
 801bfcc:	3301      	adds	r3, #1
 801bfce:	e000      	b.n	801bfd2 <dir_register+0xda>
 801bfd0:	2301      	movs	r3, #1
 801bfd2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801bfd4:	6a39      	ldr	r1, [r7, #32]
 801bfd6:	6878      	ldr	r0, [r7, #4]
 801bfd8:	f7ff fbb6 	bl	801b748 <dir_alloc>
 801bfdc:	4603      	mov	r3, r0
 801bfde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801bfe2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d148      	bne.n	801c07c <dir_register+0x184>
 801bfea:	6a3b      	ldr	r3, [r7, #32]
 801bfec:	3b01      	subs	r3, #1
 801bfee:	623b      	str	r3, [r7, #32]
 801bff0:	6a3b      	ldr	r3, [r7, #32]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d042      	beq.n	801c07c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	695a      	ldr	r2, [r3, #20]
 801bffa:	6a3b      	ldr	r3, [r7, #32]
 801bffc:	015b      	lsls	r3, r3, #5
 801bffe:	1ad3      	subs	r3, r2, r3
 801c000:	4619      	mov	r1, r3
 801c002:	6878      	ldr	r0, [r7, #4]
 801c004:	f7ff fa41 	bl	801b48a <dir_sdi>
 801c008:	4603      	mov	r3, r0
 801c00a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c00e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c012:	2b00      	cmp	r3, #0
 801c014:	d132      	bne.n	801c07c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	3324      	adds	r3, #36	@ 0x24
 801c01a:	4618      	mov	r0, r3
 801c01c:	f7ff fde4 	bl	801bbe8 <sum_sfn>
 801c020:	4603      	mov	r3, r0
 801c022:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	69db      	ldr	r3, [r3, #28]
 801c028:	4619      	mov	r1, r3
 801c02a:	69f8      	ldr	r0, [r7, #28]
 801c02c:	f7fe fe4e 	bl	801accc <move_window>
 801c030:	4603      	mov	r3, r0
 801c032:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801c036:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d11d      	bne.n	801c07a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801c03e:	69fb      	ldr	r3, [r7, #28]
 801c040:	6918      	ldr	r0, [r3, #16]
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	6a19      	ldr	r1, [r3, #32]
 801c046:	6a3b      	ldr	r3, [r7, #32]
 801c048:	b2da      	uxtb	r2, r3
 801c04a:	7efb      	ldrb	r3, [r7, #27]
 801c04c:	f7ff fcd6 	bl	801b9fc <put_lfn>
				fs->wflag = 1;
 801c050:	69fb      	ldr	r3, [r7, #28]
 801c052:	2201      	movs	r2, #1
 801c054:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801c056:	2100      	movs	r1, #0
 801c058:	6878      	ldr	r0, [r7, #4]
 801c05a:	f7ff fa9f 	bl	801b59c <dir_next>
 801c05e:	4603      	mov	r3, r0
 801c060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801c064:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c068:	2b00      	cmp	r3, #0
 801c06a:	d107      	bne.n	801c07c <dir_register+0x184>
 801c06c:	6a3b      	ldr	r3, [r7, #32]
 801c06e:	3b01      	subs	r3, #1
 801c070:	623b      	str	r3, [r7, #32]
 801c072:	6a3b      	ldr	r3, [r7, #32]
 801c074:	2b00      	cmp	r3, #0
 801c076:	d1d5      	bne.n	801c024 <dir_register+0x12c>
 801c078:	e000      	b.n	801c07c <dir_register+0x184>
				if (res != FR_OK) break;
 801c07a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801c07c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c080:	2b00      	cmp	r3, #0
 801c082:	d128      	bne.n	801c0d6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	69db      	ldr	r3, [r3, #28]
 801c088:	4619      	mov	r1, r3
 801c08a:	69f8      	ldr	r0, [r7, #28]
 801c08c:	f7fe fe1e 	bl	801accc <move_window>
 801c090:	4603      	mov	r3, r0
 801c092:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801c096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d11b      	bne.n	801c0d6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	6a1b      	ldr	r3, [r3, #32]
 801c0a2:	2220      	movs	r2, #32
 801c0a4:	2100      	movs	r1, #0
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	f7fe fc03 	bl	801a8b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	6a18      	ldr	r0, [r3, #32]
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	3324      	adds	r3, #36	@ 0x24
 801c0b4:	220b      	movs	r2, #11
 801c0b6:	4619      	mov	r1, r3
 801c0b8:	f7fe fbda 	bl	801a870 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	6a1b      	ldr	r3, [r3, #32]
 801c0c6:	330c      	adds	r3, #12
 801c0c8:	f002 0218 	and.w	r2, r2, #24
 801c0cc:	b2d2      	uxtb	r2, r2
 801c0ce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801c0d0:	69fb      	ldr	r3, [r7, #28]
 801c0d2:	2201      	movs	r2, #1
 801c0d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801c0d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801c0da:	4618      	mov	r0, r3
 801c0dc:	3730      	adds	r7, #48	@ 0x30
 801c0de:	46bd      	mov	sp, r7
 801c0e0:	bd80      	pop	{r7, pc}
 801c0e2:	bf00      	nop
 801c0e4:	4ec4ec4f 	.word	0x4ec4ec4f

0801c0e8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801c0e8:	b580      	push	{r7, lr}
 801c0ea:	b086      	sub	sp, #24
 801c0ec:	af00      	add	r7, sp, #0
 801c0ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	695b      	ldr	r3, [r3, #20]
 801c0fa:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c100:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c104:	d007      	beq.n	801c116 <dir_remove+0x2e>
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c10a:	4619      	mov	r1, r3
 801c10c:	6878      	ldr	r0, [r7, #4]
 801c10e:	f7ff f9bc 	bl	801b48a <dir_sdi>
 801c112:	4603      	mov	r3, r0
 801c114:	e000      	b.n	801c118 <dir_remove+0x30>
 801c116:	2300      	movs	r3, #0
 801c118:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c11a:	7dfb      	ldrb	r3, [r7, #23]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d128      	bne.n	801c172 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	69db      	ldr	r3, [r3, #28]
 801c124:	4619      	mov	r1, r3
 801c126:	6938      	ldr	r0, [r7, #16]
 801c128:	f7fe fdd0 	bl	801accc <move_window>
 801c12c:	4603      	mov	r3, r0
 801c12e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c130:	7dfb      	ldrb	r3, [r7, #23]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d115      	bne.n	801c162 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	6a1b      	ldr	r3, [r3, #32]
 801c13a:	22e5      	movs	r2, #229	@ 0xe5
 801c13c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 801c13e:	693b      	ldr	r3, [r7, #16]
 801c140:	2201      	movs	r2, #1
 801c142:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	695b      	ldr	r3, [r3, #20]
 801c148:	68fa      	ldr	r2, [r7, #12]
 801c14a:	429a      	cmp	r2, r3
 801c14c:	d90b      	bls.n	801c166 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 801c14e:	2100      	movs	r1, #0
 801c150:	6878      	ldr	r0, [r7, #4]
 801c152:	f7ff fa23 	bl	801b59c <dir_next>
 801c156:	4603      	mov	r3, r0
 801c158:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 801c15a:	7dfb      	ldrb	r3, [r7, #23]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d0df      	beq.n	801c120 <dir_remove+0x38>
 801c160:	e002      	b.n	801c168 <dir_remove+0x80>
			if (res != FR_OK) break;
 801c162:	bf00      	nop
 801c164:	e000      	b.n	801c168 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 801c166:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 801c168:	7dfb      	ldrb	r3, [r7, #23]
 801c16a:	2b04      	cmp	r3, #4
 801c16c:	d101      	bne.n	801c172 <dir_remove+0x8a>
 801c16e:	2302      	movs	r3, #2
 801c170:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 801c172:	7dfb      	ldrb	r3, [r7, #23]
}
 801c174:	4618      	mov	r0, r3
 801c176:	3718      	adds	r7, #24
 801c178:	46bd      	mov	sp, r7
 801c17a:	bd80      	pop	{r7, pc}

0801c17c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801c17c:	b580      	push	{r7, lr}
 801c17e:	b08a      	sub	sp, #40	@ 0x28
 801c180:	af00      	add	r7, sp, #0
 801c182:	6078      	str	r0, [r7, #4]
 801c184:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801c186:	683b      	ldr	r3, [r7, #0]
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	613b      	str	r3, [r7, #16]
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	691b      	ldr	r3, [r3, #16]
 801c192:	60fb      	str	r3, [r7, #12]
 801c194:	2300      	movs	r3, #0
 801c196:	617b      	str	r3, [r7, #20]
 801c198:	697b      	ldr	r3, [r7, #20]
 801c19a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801c19c:	69bb      	ldr	r3, [r7, #24]
 801c19e:	1c5a      	adds	r2, r3, #1
 801c1a0:	61ba      	str	r2, [r7, #24]
 801c1a2:	693a      	ldr	r2, [r7, #16]
 801c1a4:	4413      	add	r3, r2
 801c1a6:	781b      	ldrb	r3, [r3, #0]
 801c1a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801c1aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1ac:	2b1f      	cmp	r3, #31
 801c1ae:	d940      	bls.n	801c232 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801c1b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1b2:	2b2f      	cmp	r3, #47	@ 0x2f
 801c1b4:	d006      	beq.n	801c1c4 <create_name+0x48>
 801c1b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1b8:	2b5c      	cmp	r3, #92	@ 0x5c
 801c1ba:	d110      	bne.n	801c1de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801c1bc:	e002      	b.n	801c1c4 <create_name+0x48>
 801c1be:	69bb      	ldr	r3, [r7, #24]
 801c1c0:	3301      	adds	r3, #1
 801c1c2:	61bb      	str	r3, [r7, #24]
 801c1c4:	693a      	ldr	r2, [r7, #16]
 801c1c6:	69bb      	ldr	r3, [r7, #24]
 801c1c8:	4413      	add	r3, r2
 801c1ca:	781b      	ldrb	r3, [r3, #0]
 801c1cc:	2b2f      	cmp	r3, #47	@ 0x2f
 801c1ce:	d0f6      	beq.n	801c1be <create_name+0x42>
 801c1d0:	693a      	ldr	r2, [r7, #16]
 801c1d2:	69bb      	ldr	r3, [r7, #24]
 801c1d4:	4413      	add	r3, r2
 801c1d6:	781b      	ldrb	r3, [r3, #0]
 801c1d8:	2b5c      	cmp	r3, #92	@ 0x5c
 801c1da:	d0f0      	beq.n	801c1be <create_name+0x42>
			break;
 801c1dc:	e02a      	b.n	801c234 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801c1de:	697b      	ldr	r3, [r7, #20]
 801c1e0:	2bfe      	cmp	r3, #254	@ 0xfe
 801c1e2:	d901      	bls.n	801c1e8 <create_name+0x6c>
 801c1e4:	2306      	movs	r3, #6
 801c1e6:	e17d      	b.n	801c4e4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801c1e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1ea:	b2db      	uxtb	r3, r3
 801c1ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801c1ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1f0:	2101      	movs	r1, #1
 801c1f2:	4618      	mov	r0, r3
 801c1f4:	f001 fa98 	bl	801d728 <ff_convert>
 801c1f8:	4603      	mov	r3, r0
 801c1fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801c1fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c1fe:	2b00      	cmp	r3, #0
 801c200:	d101      	bne.n	801c206 <create_name+0x8a>
 801c202:	2306      	movs	r3, #6
 801c204:	e16e      	b.n	801c4e4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801c206:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c208:	2b7f      	cmp	r3, #127	@ 0x7f
 801c20a:	d809      	bhi.n	801c220 <create_name+0xa4>
 801c20c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c20e:	4619      	mov	r1, r3
 801c210:	488d      	ldr	r0, [pc, #564]	@ (801c448 <create_name+0x2cc>)
 801c212:	f7fe fb90 	bl	801a936 <chk_chr>
 801c216:	4603      	mov	r3, r0
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d001      	beq.n	801c220 <create_name+0xa4>
 801c21c:	2306      	movs	r3, #6
 801c21e:	e161      	b.n	801c4e4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801c220:	697b      	ldr	r3, [r7, #20]
 801c222:	1c5a      	adds	r2, r3, #1
 801c224:	617a      	str	r2, [r7, #20]
 801c226:	005b      	lsls	r3, r3, #1
 801c228:	68fa      	ldr	r2, [r7, #12]
 801c22a:	4413      	add	r3, r2
 801c22c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c22e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801c230:	e7b4      	b.n	801c19c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801c232:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801c234:	693a      	ldr	r2, [r7, #16]
 801c236:	69bb      	ldr	r3, [r7, #24]
 801c238:	441a      	add	r2, r3
 801c23a:	683b      	ldr	r3, [r7, #0]
 801c23c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801c23e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c240:	2b1f      	cmp	r3, #31
 801c242:	d801      	bhi.n	801c248 <create_name+0xcc>
 801c244:	2304      	movs	r3, #4
 801c246:	e000      	b.n	801c24a <create_name+0xce>
 801c248:	2300      	movs	r3, #0
 801c24a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c24e:	e011      	b.n	801c274 <create_name+0xf8>
		w = lfn[di - 1];
 801c250:	697a      	ldr	r2, [r7, #20]
 801c252:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c256:	4413      	add	r3, r2
 801c258:	005b      	lsls	r3, r3, #1
 801c25a:	68fa      	ldr	r2, [r7, #12]
 801c25c:	4413      	add	r3, r2
 801c25e:	881b      	ldrh	r3, [r3, #0]
 801c260:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801c262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c264:	2b20      	cmp	r3, #32
 801c266:	d002      	beq.n	801c26e <create_name+0xf2>
 801c268:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c26a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c26c:	d106      	bne.n	801c27c <create_name+0x100>
		di--;
 801c26e:	697b      	ldr	r3, [r7, #20]
 801c270:	3b01      	subs	r3, #1
 801c272:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801c274:	697b      	ldr	r3, [r7, #20]
 801c276:	2b00      	cmp	r3, #0
 801c278:	d1ea      	bne.n	801c250 <create_name+0xd4>
 801c27a:	e000      	b.n	801c27e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801c27c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801c27e:	697b      	ldr	r3, [r7, #20]
 801c280:	005b      	lsls	r3, r3, #1
 801c282:	68fa      	ldr	r2, [r7, #12]
 801c284:	4413      	add	r3, r2
 801c286:	2200      	movs	r2, #0
 801c288:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801c28a:	697b      	ldr	r3, [r7, #20]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d101      	bne.n	801c294 <create_name+0x118>
 801c290:	2306      	movs	r3, #6
 801c292:	e127      	b.n	801c4e4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	3324      	adds	r3, #36	@ 0x24
 801c298:	220b      	movs	r2, #11
 801c29a:	2120      	movs	r1, #32
 801c29c:	4618      	mov	r0, r3
 801c29e:	f7fe fb08 	bl	801a8b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	61bb      	str	r3, [r7, #24]
 801c2a6:	e002      	b.n	801c2ae <create_name+0x132>
 801c2a8:	69bb      	ldr	r3, [r7, #24]
 801c2aa:	3301      	adds	r3, #1
 801c2ac:	61bb      	str	r3, [r7, #24]
 801c2ae:	69bb      	ldr	r3, [r7, #24]
 801c2b0:	005b      	lsls	r3, r3, #1
 801c2b2:	68fa      	ldr	r2, [r7, #12]
 801c2b4:	4413      	add	r3, r2
 801c2b6:	881b      	ldrh	r3, [r3, #0]
 801c2b8:	2b20      	cmp	r3, #32
 801c2ba:	d0f5      	beq.n	801c2a8 <create_name+0x12c>
 801c2bc:	69bb      	ldr	r3, [r7, #24]
 801c2be:	005b      	lsls	r3, r3, #1
 801c2c0:	68fa      	ldr	r2, [r7, #12]
 801c2c2:	4413      	add	r3, r2
 801c2c4:	881b      	ldrh	r3, [r3, #0]
 801c2c6:	2b2e      	cmp	r3, #46	@ 0x2e
 801c2c8:	d0ee      	beq.n	801c2a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801c2ca:	69bb      	ldr	r3, [r7, #24]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d009      	beq.n	801c2e4 <create_name+0x168>
 801c2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c2d4:	f043 0303 	orr.w	r3, r3, #3
 801c2d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801c2dc:	e002      	b.n	801c2e4 <create_name+0x168>
 801c2de:	697b      	ldr	r3, [r7, #20]
 801c2e0:	3b01      	subs	r3, #1
 801c2e2:	617b      	str	r3, [r7, #20]
 801c2e4:	697b      	ldr	r3, [r7, #20]
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	d009      	beq.n	801c2fe <create_name+0x182>
 801c2ea:	697a      	ldr	r2, [r7, #20]
 801c2ec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801c2f0:	4413      	add	r3, r2
 801c2f2:	005b      	lsls	r3, r3, #1
 801c2f4:	68fa      	ldr	r2, [r7, #12]
 801c2f6:	4413      	add	r3, r2
 801c2f8:	881b      	ldrh	r3, [r3, #0]
 801c2fa:	2b2e      	cmp	r3, #46	@ 0x2e
 801c2fc:	d1ef      	bne.n	801c2de <create_name+0x162>

	i = b = 0; ni = 8;
 801c2fe:	2300      	movs	r3, #0
 801c300:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c304:	2300      	movs	r3, #0
 801c306:	623b      	str	r3, [r7, #32]
 801c308:	2308      	movs	r3, #8
 801c30a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801c30c:	69bb      	ldr	r3, [r7, #24]
 801c30e:	1c5a      	adds	r2, r3, #1
 801c310:	61ba      	str	r2, [r7, #24]
 801c312:	005b      	lsls	r3, r3, #1
 801c314:	68fa      	ldr	r2, [r7, #12]
 801c316:	4413      	add	r3, r2
 801c318:	881b      	ldrh	r3, [r3, #0]
 801c31a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801c31c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c31e:	2b00      	cmp	r3, #0
 801c320:	f000 8090 	beq.w	801c444 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801c324:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c326:	2b20      	cmp	r3, #32
 801c328:	d006      	beq.n	801c338 <create_name+0x1bc>
 801c32a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c32c:	2b2e      	cmp	r3, #46	@ 0x2e
 801c32e:	d10a      	bne.n	801c346 <create_name+0x1ca>
 801c330:	69ba      	ldr	r2, [r7, #24]
 801c332:	697b      	ldr	r3, [r7, #20]
 801c334:	429a      	cmp	r2, r3
 801c336:	d006      	beq.n	801c346 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801c338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c33c:	f043 0303 	orr.w	r3, r3, #3
 801c340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c344:	e07d      	b.n	801c442 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801c346:	6a3a      	ldr	r2, [r7, #32]
 801c348:	69fb      	ldr	r3, [r7, #28]
 801c34a:	429a      	cmp	r2, r3
 801c34c:	d203      	bcs.n	801c356 <create_name+0x1da>
 801c34e:	69ba      	ldr	r2, [r7, #24]
 801c350:	697b      	ldr	r3, [r7, #20]
 801c352:	429a      	cmp	r2, r3
 801c354:	d123      	bne.n	801c39e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801c356:	69fb      	ldr	r3, [r7, #28]
 801c358:	2b0b      	cmp	r3, #11
 801c35a:	d106      	bne.n	801c36a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801c35c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c360:	f043 0303 	orr.w	r3, r3, #3
 801c364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c368:	e075      	b.n	801c456 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801c36a:	69ba      	ldr	r2, [r7, #24]
 801c36c:	697b      	ldr	r3, [r7, #20]
 801c36e:	429a      	cmp	r2, r3
 801c370:	d005      	beq.n	801c37e <create_name+0x202>
 801c372:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c376:	f043 0303 	orr.w	r3, r3, #3
 801c37a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801c37e:	69ba      	ldr	r2, [r7, #24]
 801c380:	697b      	ldr	r3, [r7, #20]
 801c382:	429a      	cmp	r2, r3
 801c384:	d866      	bhi.n	801c454 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801c386:	697b      	ldr	r3, [r7, #20]
 801c388:	61bb      	str	r3, [r7, #24]
 801c38a:	2308      	movs	r3, #8
 801c38c:	623b      	str	r3, [r7, #32]
 801c38e:	230b      	movs	r3, #11
 801c390:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801c392:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c396:	009b      	lsls	r3, r3, #2
 801c398:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c39c:	e051      	b.n	801c442 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801c39e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3a0:	2b7f      	cmp	r3, #127	@ 0x7f
 801c3a2:	d914      	bls.n	801c3ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801c3a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3a6:	2100      	movs	r1, #0
 801c3a8:	4618      	mov	r0, r3
 801c3aa:	f001 f9bd 	bl	801d728 <ff_convert>
 801c3ae:	4603      	mov	r3, r0
 801c3b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801c3b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d004      	beq.n	801c3c2 <create_name+0x246>
 801c3b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3ba:	3b80      	subs	r3, #128	@ 0x80
 801c3bc:	4a23      	ldr	r2, [pc, #140]	@ (801c44c <create_name+0x2d0>)
 801c3be:	5cd3      	ldrb	r3, [r2, r3]
 801c3c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801c3c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c3c6:	f043 0302 	orr.w	r3, r3, #2
 801c3ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801c3ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d007      	beq.n	801c3e4 <create_name+0x268>
 801c3d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3d6:	4619      	mov	r1, r3
 801c3d8:	481d      	ldr	r0, [pc, #116]	@ (801c450 <create_name+0x2d4>)
 801c3da:	f7fe faac 	bl	801a936 <chk_chr>
 801c3de:	4603      	mov	r3, r0
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d008      	beq.n	801c3f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801c3e4:	235f      	movs	r3, #95	@ 0x5f
 801c3e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c3ec:	f043 0303 	orr.w	r3, r3, #3
 801c3f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c3f4:	e01b      	b.n	801c42e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801c3f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3f8:	2b40      	cmp	r3, #64	@ 0x40
 801c3fa:	d909      	bls.n	801c410 <create_name+0x294>
 801c3fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3fe:	2b5a      	cmp	r3, #90	@ 0x5a
 801c400:	d806      	bhi.n	801c410 <create_name+0x294>
					b |= 2;
 801c402:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c406:	f043 0302 	orr.w	r3, r3, #2
 801c40a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c40e:	e00e      	b.n	801c42e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801c410:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c412:	2b60      	cmp	r3, #96	@ 0x60
 801c414:	d90b      	bls.n	801c42e <create_name+0x2b2>
 801c416:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c418:	2b7a      	cmp	r3, #122	@ 0x7a
 801c41a:	d808      	bhi.n	801c42e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801c41c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c420:	f043 0301 	orr.w	r3, r3, #1
 801c424:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c428:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c42a:	3b20      	subs	r3, #32
 801c42c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801c42e:	6a3b      	ldr	r3, [r7, #32]
 801c430:	1c5a      	adds	r2, r3, #1
 801c432:	623a      	str	r2, [r7, #32]
 801c434:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c436:	b2d1      	uxtb	r1, r2
 801c438:	687a      	ldr	r2, [r7, #4]
 801c43a:	4413      	add	r3, r2
 801c43c:	460a      	mov	r2, r1
 801c43e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801c442:	e763      	b.n	801c30c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801c444:	bf00      	nop
 801c446:	e006      	b.n	801c456 <create_name+0x2da>
 801c448:	0801e324 	.word	0x0801e324
 801c44c:	0801e3bc 	.word	0x0801e3bc
 801c450:	0801e330 	.word	0x0801e330
			if (si > di) break;			/* No extension */
 801c454:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801c45c:	2be5      	cmp	r3, #229	@ 0xe5
 801c45e:	d103      	bne.n	801c468 <create_name+0x2ec>
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	2205      	movs	r2, #5
 801c464:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 801c468:	69fb      	ldr	r3, [r7, #28]
 801c46a:	2b08      	cmp	r3, #8
 801c46c:	d104      	bne.n	801c478 <create_name+0x2fc>
 801c46e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c472:	009b      	lsls	r3, r3, #2
 801c474:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801c478:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c47c:	f003 030c 	and.w	r3, r3, #12
 801c480:	2b0c      	cmp	r3, #12
 801c482:	d005      	beq.n	801c490 <create_name+0x314>
 801c484:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c488:	f003 0303 	and.w	r3, r3, #3
 801c48c:	2b03      	cmp	r3, #3
 801c48e:	d105      	bne.n	801c49c <create_name+0x320>
 801c490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c494:	f043 0302 	orr.w	r3, r3, #2
 801c498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801c49c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c4a0:	f003 0302 	and.w	r3, r3, #2
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d117      	bne.n	801c4d8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801c4a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c4ac:	f003 0303 	and.w	r3, r3, #3
 801c4b0:	2b01      	cmp	r3, #1
 801c4b2:	d105      	bne.n	801c4c0 <create_name+0x344>
 801c4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c4b8:	f043 0310 	orr.w	r3, r3, #16
 801c4bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801c4c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c4c4:	f003 030c 	and.w	r3, r3, #12
 801c4c8:	2b04      	cmp	r3, #4
 801c4ca:	d105      	bne.n	801c4d8 <create_name+0x35c>
 801c4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c4d0:	f043 0308 	orr.w	r3, r3, #8
 801c4d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801c4de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801c4e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	3728      	adds	r7, #40	@ 0x28
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	bd80      	pop	{r7, pc}

0801c4ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801c4ec:	b580      	push	{r7, lr}
 801c4ee:	b086      	sub	sp, #24
 801c4f0:	af00      	add	r7, sp, #0
 801c4f2:	6078      	str	r0, [r7, #4]
 801c4f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801c4fa:	693b      	ldr	r3, [r7, #16]
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801c500:	e002      	b.n	801c508 <follow_path+0x1c>
 801c502:	683b      	ldr	r3, [r7, #0]
 801c504:	3301      	adds	r3, #1
 801c506:	603b      	str	r3, [r7, #0]
 801c508:	683b      	ldr	r3, [r7, #0]
 801c50a:	781b      	ldrb	r3, [r3, #0]
 801c50c:	2b2f      	cmp	r3, #47	@ 0x2f
 801c50e:	d0f8      	beq.n	801c502 <follow_path+0x16>
 801c510:	683b      	ldr	r3, [r7, #0]
 801c512:	781b      	ldrb	r3, [r3, #0]
 801c514:	2b5c      	cmp	r3, #92	@ 0x5c
 801c516:	d0f4      	beq.n	801c502 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801c518:	693b      	ldr	r3, [r7, #16]
 801c51a:	2200      	movs	r2, #0
 801c51c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801c51e:	683b      	ldr	r3, [r7, #0]
 801c520:	781b      	ldrb	r3, [r3, #0]
 801c522:	2b1f      	cmp	r3, #31
 801c524:	d80a      	bhi.n	801c53c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	2280      	movs	r2, #128	@ 0x80
 801c52a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801c52e:	2100      	movs	r1, #0
 801c530:	6878      	ldr	r0, [r7, #4]
 801c532:	f7fe ffaa 	bl	801b48a <dir_sdi>
 801c536:	4603      	mov	r3, r0
 801c538:	75fb      	strb	r3, [r7, #23]
 801c53a:	e048      	b.n	801c5ce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c53c:	463b      	mov	r3, r7
 801c53e:	4619      	mov	r1, r3
 801c540:	6878      	ldr	r0, [r7, #4]
 801c542:	f7ff fe1b 	bl	801c17c <create_name>
 801c546:	4603      	mov	r3, r0
 801c548:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801c54a:	7dfb      	ldrb	r3, [r7, #23]
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d139      	bne.n	801c5c4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801c550:	6878      	ldr	r0, [r7, #4]
 801c552:	f7ff fc11 	bl	801bd78 <dir_find>
 801c556:	4603      	mov	r3, r0
 801c558:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801c560:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801c562:	7dfb      	ldrb	r3, [r7, #23]
 801c564:	2b00      	cmp	r3, #0
 801c566:	d00a      	beq.n	801c57e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801c568:	7dfb      	ldrb	r3, [r7, #23]
 801c56a:	2b04      	cmp	r3, #4
 801c56c:	d12c      	bne.n	801c5c8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801c56e:	7afb      	ldrb	r3, [r7, #11]
 801c570:	f003 0304 	and.w	r3, r3, #4
 801c574:	2b00      	cmp	r3, #0
 801c576:	d127      	bne.n	801c5c8 <follow_path+0xdc>
 801c578:	2305      	movs	r3, #5
 801c57a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801c57c:	e024      	b.n	801c5c8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c57e:	7afb      	ldrb	r3, [r7, #11]
 801c580:	f003 0304 	and.w	r3, r3, #4
 801c584:	2b00      	cmp	r3, #0
 801c586:	d121      	bne.n	801c5cc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801c588:	693b      	ldr	r3, [r7, #16]
 801c58a:	799b      	ldrb	r3, [r3, #6]
 801c58c:	f003 0310 	and.w	r3, r3, #16
 801c590:	2b00      	cmp	r3, #0
 801c592:	d102      	bne.n	801c59a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801c594:	2305      	movs	r3, #5
 801c596:	75fb      	strb	r3, [r7, #23]
 801c598:	e019      	b.n	801c5ce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	695b      	ldr	r3, [r3, #20]
 801c5a4:	68fa      	ldr	r2, [r7, #12]
 801c5a6:	8992      	ldrh	r2, [r2, #12]
 801c5a8:	fbb3 f0f2 	udiv	r0, r3, r2
 801c5ac:	fb00 f202 	mul.w	r2, r0, r2
 801c5b0:	1a9b      	subs	r3, r3, r2
 801c5b2:	440b      	add	r3, r1
 801c5b4:	4619      	mov	r1, r3
 801c5b6:	68f8      	ldr	r0, [r7, #12]
 801c5b8:	f7ff f90d 	bl	801b7d6 <ld_clust>
 801c5bc:	4602      	mov	r2, r0
 801c5be:	693b      	ldr	r3, [r7, #16]
 801c5c0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801c5c2:	e7bb      	b.n	801c53c <follow_path+0x50>
			if (res != FR_OK) break;
 801c5c4:	bf00      	nop
 801c5c6:	e002      	b.n	801c5ce <follow_path+0xe2>
				break;
 801c5c8:	bf00      	nop
 801c5ca:	e000      	b.n	801c5ce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801c5cc:	bf00      	nop
			}
		}
	}

	return res;
 801c5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 801c5d0:	4618      	mov	r0, r3
 801c5d2:	3718      	adds	r7, #24
 801c5d4:	46bd      	mov	sp, r7
 801c5d6:	bd80      	pop	{r7, pc}

0801c5d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801c5d8:	b480      	push	{r7}
 801c5da:	b087      	sub	sp, #28
 801c5dc:	af00      	add	r7, sp, #0
 801c5de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801c5e0:	f04f 33ff 	mov.w	r3, #4294967295
 801c5e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d031      	beq.n	801c652 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	617b      	str	r3, [r7, #20]
 801c5f4:	e002      	b.n	801c5fc <get_ldnumber+0x24>
 801c5f6:	697b      	ldr	r3, [r7, #20]
 801c5f8:	3301      	adds	r3, #1
 801c5fa:	617b      	str	r3, [r7, #20]
 801c5fc:	697b      	ldr	r3, [r7, #20]
 801c5fe:	781b      	ldrb	r3, [r3, #0]
 801c600:	2b1f      	cmp	r3, #31
 801c602:	d903      	bls.n	801c60c <get_ldnumber+0x34>
 801c604:	697b      	ldr	r3, [r7, #20]
 801c606:	781b      	ldrb	r3, [r3, #0]
 801c608:	2b3a      	cmp	r3, #58	@ 0x3a
 801c60a:	d1f4      	bne.n	801c5f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801c60c:	697b      	ldr	r3, [r7, #20]
 801c60e:	781b      	ldrb	r3, [r3, #0]
 801c610:	2b3a      	cmp	r3, #58	@ 0x3a
 801c612:	d11c      	bne.n	801c64e <get_ldnumber+0x76>
			tp = *path;
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	681b      	ldr	r3, [r3, #0]
 801c618:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	1c5a      	adds	r2, r3, #1
 801c61e:	60fa      	str	r2, [r7, #12]
 801c620:	781b      	ldrb	r3, [r3, #0]
 801c622:	3b30      	subs	r3, #48	@ 0x30
 801c624:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801c626:	68bb      	ldr	r3, [r7, #8]
 801c628:	2b09      	cmp	r3, #9
 801c62a:	d80e      	bhi.n	801c64a <get_ldnumber+0x72>
 801c62c:	68fa      	ldr	r2, [r7, #12]
 801c62e:	697b      	ldr	r3, [r7, #20]
 801c630:	429a      	cmp	r2, r3
 801c632:	d10a      	bne.n	801c64a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801c634:	68bb      	ldr	r3, [r7, #8]
 801c636:	2b00      	cmp	r3, #0
 801c638:	d107      	bne.n	801c64a <get_ldnumber+0x72>
					vol = (int)i;
 801c63a:	68bb      	ldr	r3, [r7, #8]
 801c63c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801c63e:	697b      	ldr	r3, [r7, #20]
 801c640:	3301      	adds	r3, #1
 801c642:	617b      	str	r3, [r7, #20]
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	697a      	ldr	r2, [r7, #20]
 801c648:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801c64a:	693b      	ldr	r3, [r7, #16]
 801c64c:	e002      	b.n	801c654 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801c64e:	2300      	movs	r3, #0
 801c650:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801c652:	693b      	ldr	r3, [r7, #16]
}
 801c654:	4618      	mov	r0, r3
 801c656:	371c      	adds	r7, #28
 801c658:	46bd      	mov	sp, r7
 801c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c65e:	4770      	bx	lr

0801c660 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801c660:	b580      	push	{r7, lr}
 801c662:	b082      	sub	sp, #8
 801c664:	af00      	add	r7, sp, #0
 801c666:	6078      	str	r0, [r7, #4]
 801c668:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	2200      	movs	r2, #0
 801c66e:	70da      	strb	r2, [r3, #3]
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	f04f 32ff 	mov.w	r2, #4294967295
 801c676:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801c678:	6839      	ldr	r1, [r7, #0]
 801c67a:	6878      	ldr	r0, [r7, #4]
 801c67c:	f7fe fb26 	bl	801accc <move_window>
 801c680:	4603      	mov	r3, r0
 801c682:	2b00      	cmp	r3, #0
 801c684:	d001      	beq.n	801c68a <check_fs+0x2a>
 801c686:	2304      	movs	r3, #4
 801c688:	e038      	b.n	801c6fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	3338      	adds	r3, #56	@ 0x38
 801c68e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801c692:	4618      	mov	r0, r3
 801c694:	f7fe f86a 	bl	801a76c <ld_word>
 801c698:	4603      	mov	r3, r0
 801c69a:	461a      	mov	r2, r3
 801c69c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801c6a0:	429a      	cmp	r2, r3
 801c6a2:	d001      	beq.n	801c6a8 <check_fs+0x48>
 801c6a4:	2303      	movs	r3, #3
 801c6a6:	e029      	b.n	801c6fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c6ae:	2be9      	cmp	r3, #233	@ 0xe9
 801c6b0:	d009      	beq.n	801c6c6 <check_fs+0x66>
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c6b8:	2beb      	cmp	r3, #235	@ 0xeb
 801c6ba:	d11e      	bne.n	801c6fa <check_fs+0x9a>
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801c6c2:	2b90      	cmp	r3, #144	@ 0x90
 801c6c4:	d119      	bne.n	801c6fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	3338      	adds	r3, #56	@ 0x38
 801c6ca:	3336      	adds	r3, #54	@ 0x36
 801c6cc:	4618      	mov	r0, r3
 801c6ce:	f7fe f865 	bl	801a79c <ld_dword>
 801c6d2:	4603      	mov	r3, r0
 801c6d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801c6d8:	4a0a      	ldr	r2, [pc, #40]	@ (801c704 <check_fs+0xa4>)
 801c6da:	4293      	cmp	r3, r2
 801c6dc:	d101      	bne.n	801c6e2 <check_fs+0x82>
 801c6de:	2300      	movs	r3, #0
 801c6e0:	e00c      	b.n	801c6fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	3338      	adds	r3, #56	@ 0x38
 801c6e6:	3352      	adds	r3, #82	@ 0x52
 801c6e8:	4618      	mov	r0, r3
 801c6ea:	f7fe f857 	bl	801a79c <ld_dword>
 801c6ee:	4603      	mov	r3, r0
 801c6f0:	4a05      	ldr	r2, [pc, #20]	@ (801c708 <check_fs+0xa8>)
 801c6f2:	4293      	cmp	r3, r2
 801c6f4:	d101      	bne.n	801c6fa <check_fs+0x9a>
 801c6f6:	2300      	movs	r3, #0
 801c6f8:	e000      	b.n	801c6fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801c6fa:	2302      	movs	r3, #2
}
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	3708      	adds	r7, #8
 801c700:	46bd      	mov	sp, r7
 801c702:	bd80      	pop	{r7, pc}
 801c704:	00544146 	.word	0x00544146
 801c708:	33544146 	.word	0x33544146

0801c70c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801c70c:	b580      	push	{r7, lr}
 801c70e:	b096      	sub	sp, #88	@ 0x58
 801c710:	af00      	add	r7, sp, #0
 801c712:	60f8      	str	r0, [r7, #12]
 801c714:	60b9      	str	r1, [r7, #8]
 801c716:	4613      	mov	r3, r2
 801c718:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801c71a:	68bb      	ldr	r3, [r7, #8]
 801c71c:	2200      	movs	r2, #0
 801c71e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801c720:	68f8      	ldr	r0, [r7, #12]
 801c722:	f7ff ff59 	bl	801c5d8 <get_ldnumber>
 801c726:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801c728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	da01      	bge.n	801c732 <find_volume+0x26>
 801c72e:	230b      	movs	r3, #11
 801c730:	e265      	b.n	801cbfe <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801c732:	4a9f      	ldr	r2, [pc, #636]	@ (801c9b0 <find_volume+0x2a4>)
 801c734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c73a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801c73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d101      	bne.n	801c746 <find_volume+0x3a>
 801c742:	230c      	movs	r3, #12
 801c744:	e25b      	b.n	801cbfe <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801c746:	68bb      	ldr	r3, [r7, #8]
 801c748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c74a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801c74c:	79fb      	ldrb	r3, [r7, #7]
 801c74e:	f023 0301 	bic.w	r3, r3, #1
 801c752:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801c754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c756:	781b      	ldrb	r3, [r3, #0]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d01a      	beq.n	801c792 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801c75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c75e:	785b      	ldrb	r3, [r3, #1]
 801c760:	4618      	mov	r0, r3
 801c762:	f7fd ff63 	bl	801a62c <disk_status>
 801c766:	4603      	mov	r3, r0
 801c768:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801c76c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c770:	f003 0301 	and.w	r3, r3, #1
 801c774:	2b00      	cmp	r3, #0
 801c776:	d10c      	bne.n	801c792 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801c778:	79fb      	ldrb	r3, [r7, #7]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d007      	beq.n	801c78e <find_volume+0x82>
 801c77e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c782:	f003 0304 	and.w	r3, r3, #4
 801c786:	2b00      	cmp	r3, #0
 801c788:	d001      	beq.n	801c78e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801c78a:	230a      	movs	r3, #10
 801c78c:	e237      	b.n	801cbfe <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801c78e:	2300      	movs	r3, #0
 801c790:	e235      	b.n	801cbfe <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801c792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c794:	2200      	movs	r2, #0
 801c796:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801c798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c79a:	b2da      	uxtb	r2, r3
 801c79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c79e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801c7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c7a2:	785b      	ldrb	r3, [r3, #1]
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	f7fd ff5b 	bl	801a660 <disk_initialize>
 801c7aa:	4603      	mov	r3, r0
 801c7ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801c7b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c7b4:	f003 0301 	and.w	r3, r3, #1
 801c7b8:	2b00      	cmp	r3, #0
 801c7ba:	d001      	beq.n	801c7c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801c7bc:	2303      	movs	r3, #3
 801c7be:	e21e      	b.n	801cbfe <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801c7c0:	79fb      	ldrb	r3, [r7, #7]
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d007      	beq.n	801c7d6 <find_volume+0xca>
 801c7c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801c7ca:	f003 0304 	and.w	r3, r3, #4
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d001      	beq.n	801c7d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801c7d2:	230a      	movs	r3, #10
 801c7d4:	e213      	b.n	801cbfe <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801c7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c7d8:	7858      	ldrb	r0, [r3, #1]
 801c7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c7dc:	330c      	adds	r3, #12
 801c7de:	461a      	mov	r2, r3
 801c7e0:	2102      	movs	r1, #2
 801c7e2:	f7fd ffa5 	bl	801a730 <disk_ioctl>
 801c7e6:	4603      	mov	r3, r0
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d001      	beq.n	801c7f0 <find_volume+0xe4>
 801c7ec:	2301      	movs	r3, #1
 801c7ee:	e206      	b.n	801cbfe <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801c7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c7f2:	899b      	ldrh	r3, [r3, #12]
 801c7f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801c7f8:	d80d      	bhi.n	801c816 <find_volume+0x10a>
 801c7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c7fc:	899b      	ldrh	r3, [r3, #12]
 801c7fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c802:	d308      	bcc.n	801c816 <find_volume+0x10a>
 801c804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c806:	899b      	ldrh	r3, [r3, #12]
 801c808:	461a      	mov	r2, r3
 801c80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c80c:	899b      	ldrh	r3, [r3, #12]
 801c80e:	3b01      	subs	r3, #1
 801c810:	4013      	ands	r3, r2
 801c812:	2b00      	cmp	r3, #0
 801c814:	d001      	beq.n	801c81a <find_volume+0x10e>
 801c816:	2301      	movs	r3, #1
 801c818:	e1f1      	b.n	801cbfe <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801c81a:	2300      	movs	r3, #0
 801c81c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801c81e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c820:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c822:	f7ff ff1d 	bl	801c660 <check_fs>
 801c826:	4603      	mov	r3, r0
 801c828:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801c82c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c830:	2b02      	cmp	r3, #2
 801c832:	d149      	bne.n	801c8c8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c834:	2300      	movs	r3, #0
 801c836:	643b      	str	r3, [r7, #64]	@ 0x40
 801c838:	e01e      	b.n	801c878 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801c83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c83c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801c840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c842:	011b      	lsls	r3, r3, #4
 801c844:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801c848:	4413      	add	r3, r2
 801c84a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801c84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c84e:	3304      	adds	r3, #4
 801c850:	781b      	ldrb	r3, [r3, #0]
 801c852:	2b00      	cmp	r3, #0
 801c854:	d006      	beq.n	801c864 <find_volume+0x158>
 801c856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c858:	3308      	adds	r3, #8
 801c85a:	4618      	mov	r0, r3
 801c85c:	f7fd ff9e 	bl	801a79c <ld_dword>
 801c860:	4602      	mov	r2, r0
 801c862:	e000      	b.n	801c866 <find_volume+0x15a>
 801c864:	2200      	movs	r2, #0
 801c866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c868:	009b      	lsls	r3, r3, #2
 801c86a:	3358      	adds	r3, #88	@ 0x58
 801c86c:	443b      	add	r3, r7
 801c86e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801c872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c874:	3301      	adds	r3, #1
 801c876:	643b      	str	r3, [r7, #64]	@ 0x40
 801c878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c87a:	2b03      	cmp	r3, #3
 801c87c:	d9dd      	bls.n	801c83a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801c87e:	2300      	movs	r3, #0
 801c880:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801c882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c884:	2b00      	cmp	r3, #0
 801c886:	d002      	beq.n	801c88e <find_volume+0x182>
 801c888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c88a:	3b01      	subs	r3, #1
 801c88c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801c88e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c890:	009b      	lsls	r3, r3, #2
 801c892:	3358      	adds	r3, #88	@ 0x58
 801c894:	443b      	add	r3, r7
 801c896:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801c89a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801c89c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d005      	beq.n	801c8ae <find_volume+0x1a2>
 801c8a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801c8a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801c8a6:	f7ff fedb 	bl	801c660 <check_fs>
 801c8aa:	4603      	mov	r3, r0
 801c8ac:	e000      	b.n	801c8b0 <find_volume+0x1a4>
 801c8ae:	2303      	movs	r3, #3
 801c8b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801c8b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c8b8:	2b01      	cmp	r3, #1
 801c8ba:	d905      	bls.n	801c8c8 <find_volume+0x1bc>
 801c8bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c8be:	3301      	adds	r3, #1
 801c8c0:	643b      	str	r3, [r7, #64]	@ 0x40
 801c8c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c8c4:	2b03      	cmp	r3, #3
 801c8c6:	d9e2      	bls.n	801c88e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801c8c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c8cc:	2b04      	cmp	r3, #4
 801c8ce:	d101      	bne.n	801c8d4 <find_volume+0x1c8>
 801c8d0:	2301      	movs	r3, #1
 801c8d2:	e194      	b.n	801cbfe <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801c8d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801c8d8:	2b01      	cmp	r3, #1
 801c8da:	d901      	bls.n	801c8e0 <find_volume+0x1d4>
 801c8dc:	230d      	movs	r3, #13
 801c8de:	e18e      	b.n	801cbfe <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801c8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8e2:	3338      	adds	r3, #56	@ 0x38
 801c8e4:	330b      	adds	r3, #11
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	f7fd ff40 	bl	801a76c <ld_word>
 801c8ec:	4603      	mov	r3, r0
 801c8ee:	461a      	mov	r2, r3
 801c8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8f2:	899b      	ldrh	r3, [r3, #12]
 801c8f4:	429a      	cmp	r2, r3
 801c8f6:	d001      	beq.n	801c8fc <find_volume+0x1f0>
 801c8f8:	230d      	movs	r3, #13
 801c8fa:	e180      	b.n	801cbfe <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801c8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c8fe:	3338      	adds	r3, #56	@ 0x38
 801c900:	3316      	adds	r3, #22
 801c902:	4618      	mov	r0, r3
 801c904:	f7fd ff32 	bl	801a76c <ld_word>
 801c908:	4603      	mov	r3, r0
 801c90a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801c90c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d106      	bne.n	801c920 <find_volume+0x214>
 801c912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c914:	3338      	adds	r3, #56	@ 0x38
 801c916:	3324      	adds	r3, #36	@ 0x24
 801c918:	4618      	mov	r0, r3
 801c91a:	f7fd ff3f 	bl	801a79c <ld_dword>
 801c91e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801c920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c922:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c924:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801c926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c928:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801c92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c92e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801c930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c932:	789b      	ldrb	r3, [r3, #2]
 801c934:	2b01      	cmp	r3, #1
 801c936:	d005      	beq.n	801c944 <find_volume+0x238>
 801c938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c93a:	789b      	ldrb	r3, [r3, #2]
 801c93c:	2b02      	cmp	r3, #2
 801c93e:	d001      	beq.n	801c944 <find_volume+0x238>
 801c940:	230d      	movs	r3, #13
 801c942:	e15c      	b.n	801cbfe <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801c944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c946:	789b      	ldrb	r3, [r3, #2]
 801c948:	461a      	mov	r2, r3
 801c94a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c94c:	fb02 f303 	mul.w	r3, r2, r3
 801c950:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801c952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c954:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801c958:	461a      	mov	r2, r3
 801c95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c95c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801c95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c960:	895b      	ldrh	r3, [r3, #10]
 801c962:	2b00      	cmp	r3, #0
 801c964:	d008      	beq.n	801c978 <find_volume+0x26c>
 801c966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c968:	895b      	ldrh	r3, [r3, #10]
 801c96a:	461a      	mov	r2, r3
 801c96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c96e:	895b      	ldrh	r3, [r3, #10]
 801c970:	3b01      	subs	r3, #1
 801c972:	4013      	ands	r3, r2
 801c974:	2b00      	cmp	r3, #0
 801c976:	d001      	beq.n	801c97c <find_volume+0x270>
 801c978:	230d      	movs	r3, #13
 801c97a:	e140      	b.n	801cbfe <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801c97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c97e:	3338      	adds	r3, #56	@ 0x38
 801c980:	3311      	adds	r3, #17
 801c982:	4618      	mov	r0, r3
 801c984:	f7fd fef2 	bl	801a76c <ld_word>
 801c988:	4603      	mov	r3, r0
 801c98a:	461a      	mov	r2, r3
 801c98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c98e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801c990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c992:	891b      	ldrh	r3, [r3, #8]
 801c994:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c996:	8992      	ldrh	r2, [r2, #12]
 801c998:	0952      	lsrs	r2, r2, #5
 801c99a:	b292      	uxth	r2, r2
 801c99c:	fbb3 f1f2 	udiv	r1, r3, r2
 801c9a0:	fb01 f202 	mul.w	r2, r1, r2
 801c9a4:	1a9b      	subs	r3, r3, r2
 801c9a6:	b29b      	uxth	r3, r3
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d003      	beq.n	801c9b4 <find_volume+0x2a8>
 801c9ac:	230d      	movs	r3, #13
 801c9ae:	e126      	b.n	801cbfe <find_volume+0x4f2>
 801c9b0:	24000550 	.word	0x24000550

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801c9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9b6:	3338      	adds	r3, #56	@ 0x38
 801c9b8:	3313      	adds	r3, #19
 801c9ba:	4618      	mov	r0, r3
 801c9bc:	f7fd fed6 	bl	801a76c <ld_word>
 801c9c0:	4603      	mov	r3, r0
 801c9c2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801c9c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d106      	bne.n	801c9d8 <find_volume+0x2cc>
 801c9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9cc:	3338      	adds	r3, #56	@ 0x38
 801c9ce:	3320      	adds	r3, #32
 801c9d0:	4618      	mov	r0, r3
 801c9d2:	f7fd fee3 	bl	801a79c <ld_dword>
 801c9d6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801c9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c9da:	3338      	adds	r3, #56	@ 0x38
 801c9dc:	330e      	adds	r3, #14
 801c9de:	4618      	mov	r0, r3
 801c9e0:	f7fd fec4 	bl	801a76c <ld_word>
 801c9e4:	4603      	mov	r3, r0
 801c9e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801c9e8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d101      	bne.n	801c9f2 <find_volume+0x2e6>
 801c9ee:	230d      	movs	r3, #13
 801c9f0:	e105      	b.n	801cbfe <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801c9f2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c9f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c9f6:	4413      	add	r3, r2
 801c9f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c9fa:	8911      	ldrh	r1, [r2, #8]
 801c9fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c9fe:	8992      	ldrh	r2, [r2, #12]
 801ca00:	0952      	lsrs	r2, r2, #5
 801ca02:	b292      	uxth	r2, r2
 801ca04:	fbb1 f2f2 	udiv	r2, r1, r2
 801ca08:	b292      	uxth	r2, r2
 801ca0a:	4413      	add	r3, r2
 801ca0c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801ca0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ca10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca12:	429a      	cmp	r2, r3
 801ca14:	d201      	bcs.n	801ca1a <find_volume+0x30e>
 801ca16:	230d      	movs	r3, #13
 801ca18:	e0f1      	b.n	801cbfe <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801ca1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ca1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca1e:	1ad3      	subs	r3, r2, r3
 801ca20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ca22:	8952      	ldrh	r2, [r2, #10]
 801ca24:	fbb3 f3f2 	udiv	r3, r3, r2
 801ca28:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801ca2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d101      	bne.n	801ca34 <find_volume+0x328>
 801ca30:	230d      	movs	r3, #13
 801ca32:	e0e4      	b.n	801cbfe <find_volume+0x4f2>
		fmt = FS_FAT32;
 801ca34:	2303      	movs	r3, #3
 801ca36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801ca3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca3c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801ca40:	4293      	cmp	r3, r2
 801ca42:	d802      	bhi.n	801ca4a <find_volume+0x33e>
 801ca44:	2302      	movs	r3, #2
 801ca46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801ca4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca4c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801ca50:	4293      	cmp	r3, r2
 801ca52:	d802      	bhi.n	801ca5a <find_volume+0x34e>
 801ca54:	2301      	movs	r3, #1
 801ca56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801ca5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca5c:	1c9a      	adds	r2, r3, #2
 801ca5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca60:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801ca62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ca66:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801ca68:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801ca6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ca6c:	441a      	add	r2, r3
 801ca6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca70:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801ca72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801ca74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca76:	441a      	add	r2, r3
 801ca78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca7a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 801ca7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801ca80:	2b03      	cmp	r3, #3
 801ca82:	d11e      	bne.n	801cac2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801ca84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca86:	3338      	adds	r3, #56	@ 0x38
 801ca88:	332a      	adds	r3, #42	@ 0x2a
 801ca8a:	4618      	mov	r0, r3
 801ca8c:	f7fd fe6e 	bl	801a76c <ld_word>
 801ca90:	4603      	mov	r3, r0
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d001      	beq.n	801ca9a <find_volume+0x38e>
 801ca96:	230d      	movs	r3, #13
 801ca98:	e0b1      	b.n	801cbfe <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801ca9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ca9c:	891b      	ldrh	r3, [r3, #8]
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d001      	beq.n	801caa6 <find_volume+0x39a>
 801caa2:	230d      	movs	r3, #13
 801caa4:	e0ab      	b.n	801cbfe <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801caa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801caa8:	3338      	adds	r3, #56	@ 0x38
 801caaa:	332c      	adds	r3, #44	@ 0x2c
 801caac:	4618      	mov	r0, r3
 801caae:	f7fd fe75 	bl	801a79c <ld_dword>
 801cab2:	4602      	mov	r2, r0
 801cab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cab6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801cab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801caba:	69db      	ldr	r3, [r3, #28]
 801cabc:	009b      	lsls	r3, r3, #2
 801cabe:	647b      	str	r3, [r7, #68]	@ 0x44
 801cac0:	e01f      	b.n	801cb02 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801cac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cac4:	891b      	ldrh	r3, [r3, #8]
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	d101      	bne.n	801cace <find_volume+0x3c2>
 801caca:	230d      	movs	r3, #13
 801cacc:	e097      	b.n	801cbfe <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801cace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cad0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801cad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cad4:	441a      	add	r2, r3
 801cad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cad8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801cada:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cade:	2b02      	cmp	r3, #2
 801cae0:	d103      	bne.n	801caea <find_volume+0x3de>
 801cae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cae4:	69db      	ldr	r3, [r3, #28]
 801cae6:	005b      	lsls	r3, r3, #1
 801cae8:	e00a      	b.n	801cb00 <find_volume+0x3f4>
 801caea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801caec:	69da      	ldr	r2, [r3, #28]
 801caee:	4613      	mov	r3, r2
 801caf0:	005b      	lsls	r3, r3, #1
 801caf2:	4413      	add	r3, r2
 801caf4:	085a      	lsrs	r2, r3, #1
 801caf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801caf8:	69db      	ldr	r3, [r3, #28]
 801cafa:	f003 0301 	and.w	r3, r3, #1
 801cafe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801cb00:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801cb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb04:	6a1a      	ldr	r2, [r3, #32]
 801cb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb08:	899b      	ldrh	r3, [r3, #12]
 801cb0a:	4619      	mov	r1, r3
 801cb0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cb0e:	440b      	add	r3, r1
 801cb10:	3b01      	subs	r3, #1
 801cb12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801cb14:	8989      	ldrh	r1, [r1, #12]
 801cb16:	fbb3 f3f1 	udiv	r3, r3, r1
 801cb1a:	429a      	cmp	r2, r3
 801cb1c:	d201      	bcs.n	801cb22 <find_volume+0x416>
 801cb1e:	230d      	movs	r3, #13
 801cb20:	e06d      	b.n	801cbfe <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801cb22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb24:	f04f 32ff 	mov.w	r2, #4294967295
 801cb28:	619a      	str	r2, [r3, #24]
 801cb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb2c:	699a      	ldr	r2, [r3, #24]
 801cb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb30:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801cb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb34:	2280      	movs	r2, #128	@ 0x80
 801cb36:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801cb38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801cb3c:	2b03      	cmp	r3, #3
 801cb3e:	d149      	bne.n	801cbd4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801cb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb42:	3338      	adds	r3, #56	@ 0x38
 801cb44:	3330      	adds	r3, #48	@ 0x30
 801cb46:	4618      	mov	r0, r3
 801cb48:	f7fd fe10 	bl	801a76c <ld_word>
 801cb4c:	4603      	mov	r3, r0
 801cb4e:	2b01      	cmp	r3, #1
 801cb50:	d140      	bne.n	801cbd4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801cb52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cb54:	3301      	adds	r3, #1
 801cb56:	4619      	mov	r1, r3
 801cb58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cb5a:	f7fe f8b7 	bl	801accc <move_window>
 801cb5e:	4603      	mov	r3, r0
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d137      	bne.n	801cbd4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801cb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb66:	2200      	movs	r2, #0
 801cb68:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801cb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb6c:	3338      	adds	r3, #56	@ 0x38
 801cb6e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801cb72:	4618      	mov	r0, r3
 801cb74:	f7fd fdfa 	bl	801a76c <ld_word>
 801cb78:	4603      	mov	r3, r0
 801cb7a:	461a      	mov	r2, r3
 801cb7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801cb80:	429a      	cmp	r2, r3
 801cb82:	d127      	bne.n	801cbd4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801cb84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb86:	3338      	adds	r3, #56	@ 0x38
 801cb88:	4618      	mov	r0, r3
 801cb8a:	f7fd fe07 	bl	801a79c <ld_dword>
 801cb8e:	4603      	mov	r3, r0
 801cb90:	4a1d      	ldr	r2, [pc, #116]	@ (801cc08 <find_volume+0x4fc>)
 801cb92:	4293      	cmp	r3, r2
 801cb94:	d11e      	bne.n	801cbd4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801cb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb98:	3338      	adds	r3, #56	@ 0x38
 801cb9a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801cb9e:	4618      	mov	r0, r3
 801cba0:	f7fd fdfc 	bl	801a79c <ld_dword>
 801cba4:	4603      	mov	r3, r0
 801cba6:	4a19      	ldr	r2, [pc, #100]	@ (801cc0c <find_volume+0x500>)
 801cba8:	4293      	cmp	r3, r2
 801cbaa:	d113      	bne.n	801cbd4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801cbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbae:	3338      	adds	r3, #56	@ 0x38
 801cbb0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801cbb4:	4618      	mov	r0, r3
 801cbb6:	f7fd fdf1 	bl	801a79c <ld_dword>
 801cbba:	4602      	mov	r2, r0
 801cbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbbe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801cbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbc2:	3338      	adds	r3, #56	@ 0x38
 801cbc4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801cbc8:	4618      	mov	r0, r3
 801cbca:	f7fd fde7 	bl	801a79c <ld_dword>
 801cbce:	4602      	mov	r2, r0
 801cbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbd2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801cbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbd6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801cbda:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801cbdc:	4b0c      	ldr	r3, [pc, #48]	@ (801cc10 <find_volume+0x504>)
 801cbde:	881b      	ldrh	r3, [r3, #0]
 801cbe0:	3301      	adds	r3, #1
 801cbe2:	b29a      	uxth	r2, r3
 801cbe4:	4b0a      	ldr	r3, [pc, #40]	@ (801cc10 <find_volume+0x504>)
 801cbe6:	801a      	strh	r2, [r3, #0]
 801cbe8:	4b09      	ldr	r3, [pc, #36]	@ (801cc10 <find_volume+0x504>)
 801cbea:	881a      	ldrh	r2, [r3, #0]
 801cbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbee:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801cbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cbf2:	4a08      	ldr	r2, [pc, #32]	@ (801cc14 <find_volume+0x508>)
 801cbf4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801cbf6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801cbf8:	f7fe f800 	bl	801abfc <clear_lock>
#endif
	return FR_OK;
 801cbfc:	2300      	movs	r3, #0
}
 801cbfe:	4618      	mov	r0, r3
 801cc00:	3758      	adds	r7, #88	@ 0x58
 801cc02:	46bd      	mov	sp, r7
 801cc04:	bd80      	pop	{r7, pc}
 801cc06:	bf00      	nop
 801cc08:	41615252 	.word	0x41615252
 801cc0c:	61417272 	.word	0x61417272
 801cc10:	24000554 	.word	0x24000554
 801cc14:	24000568 	.word	0x24000568

0801cc18 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801cc18:	b580      	push	{r7, lr}
 801cc1a:	b084      	sub	sp, #16
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	6078      	str	r0, [r7, #4]
 801cc20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801cc22:	2309      	movs	r3, #9
 801cc24:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d01c      	beq.n	801cc66 <validate+0x4e>
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	2b00      	cmp	r3, #0
 801cc32:	d018      	beq.n	801cc66 <validate+0x4e>
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	681b      	ldr	r3, [r3, #0]
 801cc38:	781b      	ldrb	r3, [r3, #0]
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d013      	beq.n	801cc66 <validate+0x4e>
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	889a      	ldrh	r2, [r3, #4]
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	681b      	ldr	r3, [r3, #0]
 801cc46:	88db      	ldrh	r3, [r3, #6]
 801cc48:	429a      	cmp	r2, r3
 801cc4a:	d10c      	bne.n	801cc66 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	785b      	ldrb	r3, [r3, #1]
 801cc52:	4618      	mov	r0, r3
 801cc54:	f7fd fcea 	bl	801a62c <disk_status>
 801cc58:	4603      	mov	r3, r0
 801cc5a:	f003 0301 	and.w	r3, r3, #1
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d101      	bne.n	801cc66 <validate+0x4e>
			res = FR_OK;
 801cc62:	2300      	movs	r3, #0
 801cc64:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801cc66:	7bfb      	ldrb	r3, [r7, #15]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d102      	bne.n	801cc72 <validate+0x5a>
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	e000      	b.n	801cc74 <validate+0x5c>
 801cc72:	2300      	movs	r3, #0
 801cc74:	683a      	ldr	r2, [r7, #0]
 801cc76:	6013      	str	r3, [r2, #0]
	return res;
 801cc78:	7bfb      	ldrb	r3, [r7, #15]
}
 801cc7a:	4618      	mov	r0, r3
 801cc7c:	3710      	adds	r7, #16
 801cc7e:	46bd      	mov	sp, r7
 801cc80:	bd80      	pop	{r7, pc}
	...

0801cc84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801cc84:	b580      	push	{r7, lr}
 801cc86:	b088      	sub	sp, #32
 801cc88:	af00      	add	r7, sp, #0
 801cc8a:	60f8      	str	r0, [r7, #12]
 801cc8c:	60b9      	str	r1, [r7, #8]
 801cc8e:	4613      	mov	r3, r2
 801cc90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801cc92:	68bb      	ldr	r3, [r7, #8]
 801cc94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801cc96:	f107 0310 	add.w	r3, r7, #16
 801cc9a:	4618      	mov	r0, r3
 801cc9c:	f7ff fc9c 	bl	801c5d8 <get_ldnumber>
 801cca0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801cca2:	69fb      	ldr	r3, [r7, #28]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	da01      	bge.n	801ccac <f_mount+0x28>
 801cca8:	230b      	movs	r3, #11
 801ccaa:	e02b      	b.n	801cd04 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801ccac:	4a17      	ldr	r2, [pc, #92]	@ (801cd0c <f_mount+0x88>)
 801ccae:	69fb      	ldr	r3, [r7, #28]
 801ccb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ccb4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801ccb6:	69bb      	ldr	r3, [r7, #24]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d005      	beq.n	801ccc8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801ccbc:	69b8      	ldr	r0, [r7, #24]
 801ccbe:	f7fd ff9d 	bl	801abfc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801ccc2:	69bb      	ldr	r3, [r7, #24]
 801ccc4:	2200      	movs	r2, #0
 801ccc6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d002      	beq.n	801ccd4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	2200      	movs	r2, #0
 801ccd2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801ccd4:	68fa      	ldr	r2, [r7, #12]
 801ccd6:	490d      	ldr	r1, [pc, #52]	@ (801cd0c <f_mount+0x88>)
 801ccd8:	69fb      	ldr	r3, [r7, #28]
 801ccda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801ccde:	68fb      	ldr	r3, [r7, #12]
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d002      	beq.n	801ccea <f_mount+0x66>
 801cce4:	79fb      	ldrb	r3, [r7, #7]
 801cce6:	2b01      	cmp	r3, #1
 801cce8:	d001      	beq.n	801ccee <f_mount+0x6a>
 801ccea:	2300      	movs	r3, #0
 801ccec:	e00a      	b.n	801cd04 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801ccee:	f107 010c 	add.w	r1, r7, #12
 801ccf2:	f107 0308 	add.w	r3, r7, #8
 801ccf6:	2200      	movs	r2, #0
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	f7ff fd07 	bl	801c70c <find_volume>
 801ccfe:	4603      	mov	r3, r0
 801cd00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801cd02:	7dfb      	ldrb	r3, [r7, #23]
}
 801cd04:	4618      	mov	r0, r3
 801cd06:	3720      	adds	r7, #32
 801cd08:	46bd      	mov	sp, r7
 801cd0a:	bd80      	pop	{r7, pc}
 801cd0c:	24000550 	.word	0x24000550

0801cd10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801cd10:	b580      	push	{r7, lr}
 801cd12:	b09a      	sub	sp, #104	@ 0x68
 801cd14:	af00      	add	r7, sp, #0
 801cd16:	60f8      	str	r0, [r7, #12]
 801cd18:	60b9      	str	r1, [r7, #8]
 801cd1a:	4613      	mov	r3, r2
 801cd1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801cd1e:	68fb      	ldr	r3, [r7, #12]
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d101      	bne.n	801cd28 <f_open+0x18>
 801cd24:	2309      	movs	r3, #9
 801cd26:	e1b7      	b.n	801d098 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801cd28:	79fb      	ldrb	r3, [r7, #7]
 801cd2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cd2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801cd30:	79fa      	ldrb	r2, [r7, #7]
 801cd32:	f107 0114 	add.w	r1, r7, #20
 801cd36:	f107 0308 	add.w	r3, r7, #8
 801cd3a:	4618      	mov	r0, r3
 801cd3c:	f7ff fce6 	bl	801c70c <find_volume>
 801cd40:	4603      	mov	r3, r0
 801cd42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801cd46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	f040 819b 	bne.w	801d086 <f_open+0x376>
		dj.obj.fs = fs;
 801cd50:	697b      	ldr	r3, [r7, #20]
 801cd52:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801cd54:	68ba      	ldr	r2, [r7, #8]
 801cd56:	f107 0318 	add.w	r3, r7, #24
 801cd5a:	4611      	mov	r1, r2
 801cd5c:	4618      	mov	r0, r3
 801cd5e:	f7ff fbc5 	bl	801c4ec <follow_path>
 801cd62:	4603      	mov	r3, r0
 801cd64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801cd68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d118      	bne.n	801cda2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801cd70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801cd74:	b25b      	sxtb	r3, r3
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	da03      	bge.n	801cd82 <f_open+0x72>
				res = FR_INVALID_NAME;
 801cd7a:	2306      	movs	r3, #6
 801cd7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cd80:	e00f      	b.n	801cda2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801cd82:	79fb      	ldrb	r3, [r7, #7]
 801cd84:	2b01      	cmp	r3, #1
 801cd86:	bf8c      	ite	hi
 801cd88:	2301      	movhi	r3, #1
 801cd8a:	2300      	movls	r3, #0
 801cd8c:	b2db      	uxtb	r3, r3
 801cd8e:	461a      	mov	r2, r3
 801cd90:	f107 0318 	add.w	r3, r7, #24
 801cd94:	4611      	mov	r1, r2
 801cd96:	4618      	mov	r0, r3
 801cd98:	f7fd fde8 	bl	801a96c <chk_lock>
 801cd9c:	4603      	mov	r3, r0
 801cd9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801cda2:	79fb      	ldrb	r3, [r7, #7]
 801cda4:	f003 031c 	and.w	r3, r3, #28
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d07f      	beq.n	801ceac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801cdac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d017      	beq.n	801cde4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801cdb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cdb8:	2b04      	cmp	r3, #4
 801cdba:	d10e      	bne.n	801cdda <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801cdbc:	f7fd fe32 	bl	801aa24 <enq_lock>
 801cdc0:	4603      	mov	r3, r0
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d006      	beq.n	801cdd4 <f_open+0xc4>
 801cdc6:	f107 0318 	add.w	r3, r7, #24
 801cdca:	4618      	mov	r0, r3
 801cdcc:	f7ff f894 	bl	801bef8 <dir_register>
 801cdd0:	4603      	mov	r3, r0
 801cdd2:	e000      	b.n	801cdd6 <f_open+0xc6>
 801cdd4:	2312      	movs	r3, #18
 801cdd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801cdda:	79fb      	ldrb	r3, [r7, #7]
 801cddc:	f043 0308 	orr.w	r3, r3, #8
 801cde0:	71fb      	strb	r3, [r7, #7]
 801cde2:	e010      	b.n	801ce06 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801cde4:	7fbb      	ldrb	r3, [r7, #30]
 801cde6:	f003 0311 	and.w	r3, r3, #17
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d003      	beq.n	801cdf6 <f_open+0xe6>
					res = FR_DENIED;
 801cdee:	2307      	movs	r3, #7
 801cdf0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cdf4:	e007      	b.n	801ce06 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801cdf6:	79fb      	ldrb	r3, [r7, #7]
 801cdf8:	f003 0304 	and.w	r3, r3, #4
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d002      	beq.n	801ce06 <f_open+0xf6>
 801ce00:	2308      	movs	r3, #8
 801ce02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801ce06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d168      	bne.n	801cee0 <f_open+0x1d0>
 801ce0e:	79fb      	ldrb	r3, [r7, #7]
 801ce10:	f003 0308 	and.w	r3, r3, #8
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d063      	beq.n	801cee0 <f_open+0x1d0>
				dw = GET_FATTIME();
 801ce18:	f7fd fbaa 	bl	801a570 <get_fattime>
 801ce1c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801ce1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce20:	330e      	adds	r3, #14
 801ce22:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801ce24:	4618      	mov	r0, r3
 801ce26:	f7fd fcf7 	bl	801a818 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801ce2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce2c:	3316      	adds	r3, #22
 801ce2e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801ce30:	4618      	mov	r0, r3
 801ce32:	f7fd fcf1 	bl	801a818 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801ce36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce38:	330b      	adds	r3, #11
 801ce3a:	2220      	movs	r2, #32
 801ce3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801ce3e:	697b      	ldr	r3, [r7, #20]
 801ce40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ce42:	4611      	mov	r1, r2
 801ce44:	4618      	mov	r0, r3
 801ce46:	f7fe fcc6 	bl	801b7d6 <ld_clust>
 801ce4a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801ce4c:	697b      	ldr	r3, [r7, #20]
 801ce4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801ce50:	2200      	movs	r2, #0
 801ce52:	4618      	mov	r0, r3
 801ce54:	f7fe fcde 	bl	801b814 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801ce58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce5a:	331c      	adds	r3, #28
 801ce5c:	2100      	movs	r1, #0
 801ce5e:	4618      	mov	r0, r3
 801ce60:	f7fd fcda 	bl	801a818 <st_dword>
					fs->wflag = 1;
 801ce64:	697b      	ldr	r3, [r7, #20]
 801ce66:	2201      	movs	r2, #1
 801ce68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801ce6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d037      	beq.n	801cee0 <f_open+0x1d0>
						dw = fs->winsect;
 801ce70:	697b      	ldr	r3, [r7, #20]
 801ce72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ce74:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801ce76:	f107 0318 	add.w	r3, r7, #24
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801ce7e:	4618      	mov	r0, r3
 801ce80:	f7fe f9ce 	bl	801b220 <remove_chain>
 801ce84:	4603      	mov	r3, r0
 801ce86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 801ce8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	d126      	bne.n	801cee0 <f_open+0x1d0>
							res = move_window(fs, dw);
 801ce92:	697b      	ldr	r3, [r7, #20]
 801ce94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801ce96:	4618      	mov	r0, r3
 801ce98:	f7fd ff18 	bl	801accc <move_window>
 801ce9c:	4603      	mov	r3, r0
 801ce9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801cea2:	697b      	ldr	r3, [r7, #20]
 801cea4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801cea6:	3a01      	subs	r2, #1
 801cea8:	615a      	str	r2, [r3, #20]
 801ceaa:	e019      	b.n	801cee0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801ceac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d115      	bne.n	801cee0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801ceb4:	7fbb      	ldrb	r3, [r7, #30]
 801ceb6:	f003 0310 	and.w	r3, r3, #16
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d003      	beq.n	801cec6 <f_open+0x1b6>
					res = FR_NO_FILE;
 801cebe:	2304      	movs	r3, #4
 801cec0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801cec4:	e00c      	b.n	801cee0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801cec6:	79fb      	ldrb	r3, [r7, #7]
 801cec8:	f003 0302 	and.w	r3, r3, #2
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d007      	beq.n	801cee0 <f_open+0x1d0>
 801ced0:	7fbb      	ldrb	r3, [r7, #30]
 801ced2:	f003 0301 	and.w	r3, r3, #1
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d002      	beq.n	801cee0 <f_open+0x1d0>
						res = FR_DENIED;
 801ceda:	2307      	movs	r3, #7
 801cedc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801cee0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d126      	bne.n	801cf36 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801cee8:	79fb      	ldrb	r3, [r7, #7]
 801ceea:	f003 0308 	and.w	r3, r3, #8
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	d003      	beq.n	801cefa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801cef2:	79fb      	ldrb	r3, [r7, #7]
 801cef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cef8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801cefa:	697b      	ldr	r3, [r7, #20]
 801cefc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cefe:	68fb      	ldr	r3, [r7, #12]
 801cf00:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801cf02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801cf08:	79fb      	ldrb	r3, [r7, #7]
 801cf0a:	2b01      	cmp	r3, #1
 801cf0c:	bf8c      	ite	hi
 801cf0e:	2301      	movhi	r3, #1
 801cf10:	2300      	movls	r3, #0
 801cf12:	b2db      	uxtb	r3, r3
 801cf14:	461a      	mov	r2, r3
 801cf16:	f107 0318 	add.w	r3, r7, #24
 801cf1a:	4611      	mov	r1, r2
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	f7fd fda3 	bl	801aa68 <inc_lock>
 801cf22:	4602      	mov	r2, r0
 801cf24:	68fb      	ldr	r3, [r7, #12]
 801cf26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	691b      	ldr	r3, [r3, #16]
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d102      	bne.n	801cf36 <f_open+0x226>
 801cf30:	2302      	movs	r3, #2
 801cf32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801cf36:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	f040 80a3 	bne.w	801d086 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801cf40:	697b      	ldr	r3, [r7, #20]
 801cf42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801cf44:	4611      	mov	r1, r2
 801cf46:	4618      	mov	r0, r3
 801cf48:	f7fe fc45 	bl	801b7d6 <ld_clust>
 801cf4c:	4602      	mov	r2, r0
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801cf52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cf54:	331c      	adds	r3, #28
 801cf56:	4618      	mov	r0, r3
 801cf58:	f7fd fc20 	bl	801a79c <ld_dword>
 801cf5c:	4602      	mov	r2, r0
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801cf62:	68fb      	ldr	r3, [r7, #12]
 801cf64:	2200      	movs	r2, #0
 801cf66:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801cf68:	697a      	ldr	r2, [r7, #20]
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801cf6e:	697b      	ldr	r3, [r7, #20]
 801cf70:	88da      	ldrh	r2, [r3, #6]
 801cf72:	68fb      	ldr	r3, [r7, #12]
 801cf74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801cf76:	68fb      	ldr	r3, [r7, #12]
 801cf78:	79fa      	ldrb	r2, [r7, #7]
 801cf7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	2200      	movs	r2, #0
 801cf80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801cf82:	68fb      	ldr	r3, [r7, #12]
 801cf84:	2200      	movs	r2, #0
 801cf86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	2200      	movs	r2, #0
 801cf8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801cf8e:	68fb      	ldr	r3, [r7, #12]
 801cf90:	3330      	adds	r3, #48	@ 0x30
 801cf92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801cf96:	2100      	movs	r1, #0
 801cf98:	4618      	mov	r0, r3
 801cf9a:	f7fd fc8a 	bl	801a8b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801cf9e:	79fb      	ldrb	r3, [r7, #7]
 801cfa0:	f003 0320 	and.w	r3, r3, #32
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d06e      	beq.n	801d086 <f_open+0x376>
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	68db      	ldr	r3, [r3, #12]
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d06a      	beq.n	801d086 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	68da      	ldr	r2, [r3, #12]
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801cfb8:	697b      	ldr	r3, [r7, #20]
 801cfba:	895b      	ldrh	r3, [r3, #10]
 801cfbc:	461a      	mov	r2, r3
 801cfbe:	697b      	ldr	r3, [r7, #20]
 801cfc0:	899b      	ldrh	r3, [r3, #12]
 801cfc2:	fb02 f303 	mul.w	r3, r2, r3
 801cfc6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801cfc8:	68fb      	ldr	r3, [r7, #12]
 801cfca:	689b      	ldr	r3, [r3, #8]
 801cfcc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cfce:	68fb      	ldr	r3, [r7, #12]
 801cfd0:	68db      	ldr	r3, [r3, #12]
 801cfd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cfd4:	e016      	b.n	801d004 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801cfda:	4618      	mov	r0, r3
 801cfdc:	f7fd ff33 	bl	801ae46 <get_fat>
 801cfe0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801cfe2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cfe4:	2b01      	cmp	r3, #1
 801cfe6:	d802      	bhi.n	801cfee <f_open+0x2de>
 801cfe8:	2302      	movs	r3, #2
 801cfea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801cfee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801cff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cff4:	d102      	bne.n	801cffc <f_open+0x2ec>
 801cff6:	2301      	movs	r3, #1
 801cff8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801cffc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801cffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d000:	1ad3      	subs	r3, r2, r3
 801d002:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d004:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d103      	bne.n	801d014 <f_open+0x304>
 801d00c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d00e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d010:	429a      	cmp	r2, r3
 801d012:	d8e0      	bhi.n	801cfd6 <f_open+0x2c6>
				}
				fp->clust = clst;
 801d014:	68fb      	ldr	r3, [r7, #12]
 801d016:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801d018:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801d01a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d131      	bne.n	801d086 <f_open+0x376>
 801d022:	697b      	ldr	r3, [r7, #20]
 801d024:	899b      	ldrh	r3, [r3, #12]
 801d026:	461a      	mov	r2, r3
 801d028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d02a:	fbb3 f1f2 	udiv	r1, r3, r2
 801d02e:	fb01 f202 	mul.w	r2, r1, r2
 801d032:	1a9b      	subs	r3, r3, r2
 801d034:	2b00      	cmp	r3, #0
 801d036:	d026      	beq.n	801d086 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801d038:	697b      	ldr	r3, [r7, #20]
 801d03a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d03c:	4618      	mov	r0, r3
 801d03e:	f7fd fee3 	bl	801ae08 <clust2sect>
 801d042:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801d044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d046:	2b00      	cmp	r3, #0
 801d048:	d103      	bne.n	801d052 <f_open+0x342>
						res = FR_INT_ERR;
 801d04a:	2302      	movs	r3, #2
 801d04c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801d050:	e019      	b.n	801d086 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801d052:	697b      	ldr	r3, [r7, #20]
 801d054:	899b      	ldrh	r3, [r3, #12]
 801d056:	461a      	mov	r2, r3
 801d058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d05a:	fbb3 f2f2 	udiv	r2, r3, r2
 801d05e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d060:	441a      	add	r2, r3
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801d066:	697b      	ldr	r3, [r7, #20]
 801d068:	7858      	ldrb	r0, [r3, #1]
 801d06a:	68fb      	ldr	r3, [r7, #12]
 801d06c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	6a1a      	ldr	r2, [r3, #32]
 801d074:	2301      	movs	r3, #1
 801d076:	f7fd fb1b 	bl	801a6b0 <disk_read>
 801d07a:	4603      	mov	r3, r0
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d002      	beq.n	801d086 <f_open+0x376>
 801d080:	2301      	movs	r3, #1
 801d082:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801d086:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d002      	beq.n	801d094 <f_open+0x384>
 801d08e:	68fb      	ldr	r3, [r7, #12]
 801d090:	2200      	movs	r2, #0
 801d092:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801d094:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801d098:	4618      	mov	r0, r3
 801d09a:	3768      	adds	r7, #104	@ 0x68
 801d09c:	46bd      	mov	sp, r7
 801d09e:	bd80      	pop	{r7, pc}

0801d0a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801d0a0:	b580      	push	{r7, lr}
 801d0a2:	b08c      	sub	sp, #48	@ 0x30
 801d0a4:	af00      	add	r7, sp, #0
 801d0a6:	60f8      	str	r0, [r7, #12]
 801d0a8:	60b9      	str	r1, [r7, #8]
 801d0aa:	607a      	str	r2, [r7, #4]
 801d0ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801d0ae:	68bb      	ldr	r3, [r7, #8]
 801d0b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801d0b2:	683b      	ldr	r3, [r7, #0]
 801d0b4:	2200      	movs	r2, #0
 801d0b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	f107 0210 	add.w	r2, r7, #16
 801d0be:	4611      	mov	r1, r2
 801d0c0:	4618      	mov	r0, r3
 801d0c2:	f7ff fda9 	bl	801cc18 <validate>
 801d0c6:	4603      	mov	r3, r0
 801d0c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801d0cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d107      	bne.n	801d0e4 <f_write+0x44>
 801d0d4:	68fb      	ldr	r3, [r7, #12]
 801d0d6:	7d5b      	ldrb	r3, [r3, #21]
 801d0d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801d0dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d002      	beq.n	801d0ea <f_write+0x4a>
 801d0e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801d0e8:	e16a      	b.n	801d3c0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801d0ea:	68fb      	ldr	r3, [r7, #12]
 801d0ec:	7d1b      	ldrb	r3, [r3, #20]
 801d0ee:	f003 0302 	and.w	r3, r3, #2
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d101      	bne.n	801d0fa <f_write+0x5a>
 801d0f6:	2307      	movs	r3, #7
 801d0f8:	e162      	b.n	801d3c0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801d0fa:	68fb      	ldr	r3, [r7, #12]
 801d0fc:	699a      	ldr	r2, [r3, #24]
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	441a      	add	r2, r3
 801d102:	68fb      	ldr	r3, [r7, #12]
 801d104:	699b      	ldr	r3, [r3, #24]
 801d106:	429a      	cmp	r2, r3
 801d108:	f080 814c 	bcs.w	801d3a4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801d10c:	68fb      	ldr	r3, [r7, #12]
 801d10e:	699b      	ldr	r3, [r3, #24]
 801d110:	43db      	mvns	r3, r3
 801d112:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801d114:	e146      	b.n	801d3a4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801d116:	68fb      	ldr	r3, [r7, #12]
 801d118:	699b      	ldr	r3, [r3, #24]
 801d11a:	693a      	ldr	r2, [r7, #16]
 801d11c:	8992      	ldrh	r2, [r2, #12]
 801d11e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d122:	fb01 f202 	mul.w	r2, r1, r2
 801d126:	1a9b      	subs	r3, r3, r2
 801d128:	2b00      	cmp	r3, #0
 801d12a:	f040 80f1 	bne.w	801d310 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801d12e:	68fb      	ldr	r3, [r7, #12]
 801d130:	699b      	ldr	r3, [r3, #24]
 801d132:	693a      	ldr	r2, [r7, #16]
 801d134:	8992      	ldrh	r2, [r2, #12]
 801d136:	fbb3 f3f2 	udiv	r3, r3, r2
 801d13a:	693a      	ldr	r2, [r7, #16]
 801d13c:	8952      	ldrh	r2, [r2, #10]
 801d13e:	3a01      	subs	r2, #1
 801d140:	4013      	ands	r3, r2
 801d142:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801d144:	69bb      	ldr	r3, [r7, #24]
 801d146:	2b00      	cmp	r3, #0
 801d148:	d143      	bne.n	801d1d2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801d14a:	68fb      	ldr	r3, [r7, #12]
 801d14c:	699b      	ldr	r3, [r3, #24]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d10c      	bne.n	801d16c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801d152:	68fb      	ldr	r3, [r7, #12]
 801d154:	689b      	ldr	r3, [r3, #8]
 801d156:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801d158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d11a      	bne.n	801d194 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	2100      	movs	r1, #0
 801d162:	4618      	mov	r0, r3
 801d164:	f7fe f8c1 	bl	801b2ea <create_chain>
 801d168:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d16a:	e013      	b.n	801d194 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d170:	2b00      	cmp	r3, #0
 801d172:	d007      	beq.n	801d184 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801d174:	68fb      	ldr	r3, [r7, #12]
 801d176:	699b      	ldr	r3, [r3, #24]
 801d178:	4619      	mov	r1, r3
 801d17a:	68f8      	ldr	r0, [r7, #12]
 801d17c:	f7fe f94d 	bl	801b41a <clmt_clust>
 801d180:	62b8      	str	r0, [r7, #40]	@ 0x28
 801d182:	e007      	b.n	801d194 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801d184:	68fa      	ldr	r2, [r7, #12]
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	69db      	ldr	r3, [r3, #28]
 801d18a:	4619      	mov	r1, r3
 801d18c:	4610      	mov	r0, r2
 801d18e:	f7fe f8ac 	bl	801b2ea <create_chain>
 801d192:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d196:	2b00      	cmp	r3, #0
 801d198:	f000 8109 	beq.w	801d3ae <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801d19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d19e:	2b01      	cmp	r3, #1
 801d1a0:	d104      	bne.n	801d1ac <f_write+0x10c>
 801d1a2:	68fb      	ldr	r3, [r7, #12]
 801d1a4:	2202      	movs	r2, #2
 801d1a6:	755a      	strb	r2, [r3, #21]
 801d1a8:	2302      	movs	r3, #2
 801d1aa:	e109      	b.n	801d3c0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801d1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d1b2:	d104      	bne.n	801d1be <f_write+0x11e>
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	2201      	movs	r2, #1
 801d1b8:	755a      	strb	r2, [r3, #21]
 801d1ba:	2301      	movs	r3, #1
 801d1bc:	e100      	b.n	801d3c0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d1c2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801d1c4:	68fb      	ldr	r3, [r7, #12]
 801d1c6:	689b      	ldr	r3, [r3, #8]
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	d102      	bne.n	801d1d2 <f_write+0x132>
 801d1cc:	68fb      	ldr	r3, [r7, #12]
 801d1ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d1d0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	7d1b      	ldrb	r3, [r3, #20]
 801d1d6:	b25b      	sxtb	r3, r3
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	da18      	bge.n	801d20e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d1dc:	693b      	ldr	r3, [r7, #16]
 801d1de:	7858      	ldrb	r0, [r3, #1]
 801d1e0:	68fb      	ldr	r3, [r7, #12]
 801d1e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	6a1a      	ldr	r2, [r3, #32]
 801d1ea:	2301      	movs	r3, #1
 801d1ec:	f7fd fa80 	bl	801a6f0 <disk_write>
 801d1f0:	4603      	mov	r3, r0
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d004      	beq.n	801d200 <f_write+0x160>
 801d1f6:	68fb      	ldr	r3, [r7, #12]
 801d1f8:	2201      	movs	r2, #1
 801d1fa:	755a      	strb	r2, [r3, #21]
 801d1fc:	2301      	movs	r3, #1
 801d1fe:	e0df      	b.n	801d3c0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	7d1b      	ldrb	r3, [r3, #20]
 801d204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d208:	b2da      	uxtb	r2, r3
 801d20a:	68fb      	ldr	r3, [r7, #12]
 801d20c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801d20e:	693a      	ldr	r2, [r7, #16]
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	69db      	ldr	r3, [r3, #28]
 801d214:	4619      	mov	r1, r3
 801d216:	4610      	mov	r0, r2
 801d218:	f7fd fdf6 	bl	801ae08 <clust2sect>
 801d21c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801d21e:	697b      	ldr	r3, [r7, #20]
 801d220:	2b00      	cmp	r3, #0
 801d222:	d104      	bne.n	801d22e <f_write+0x18e>
 801d224:	68fb      	ldr	r3, [r7, #12]
 801d226:	2202      	movs	r2, #2
 801d228:	755a      	strb	r2, [r3, #21]
 801d22a:	2302      	movs	r3, #2
 801d22c:	e0c8      	b.n	801d3c0 <f_write+0x320>
			sect += csect;
 801d22e:	697a      	ldr	r2, [r7, #20]
 801d230:	69bb      	ldr	r3, [r7, #24]
 801d232:	4413      	add	r3, r2
 801d234:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801d236:	693b      	ldr	r3, [r7, #16]
 801d238:	899b      	ldrh	r3, [r3, #12]
 801d23a:	461a      	mov	r2, r3
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	fbb3 f3f2 	udiv	r3, r3, r2
 801d242:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801d244:	6a3b      	ldr	r3, [r7, #32]
 801d246:	2b00      	cmp	r3, #0
 801d248:	d043      	beq.n	801d2d2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801d24a:	69ba      	ldr	r2, [r7, #24]
 801d24c:	6a3b      	ldr	r3, [r7, #32]
 801d24e:	4413      	add	r3, r2
 801d250:	693a      	ldr	r2, [r7, #16]
 801d252:	8952      	ldrh	r2, [r2, #10]
 801d254:	4293      	cmp	r3, r2
 801d256:	d905      	bls.n	801d264 <f_write+0x1c4>
					cc = fs->csize - csect;
 801d258:	693b      	ldr	r3, [r7, #16]
 801d25a:	895b      	ldrh	r3, [r3, #10]
 801d25c:	461a      	mov	r2, r3
 801d25e:	69bb      	ldr	r3, [r7, #24]
 801d260:	1ad3      	subs	r3, r2, r3
 801d262:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801d264:	693b      	ldr	r3, [r7, #16]
 801d266:	7858      	ldrb	r0, [r3, #1]
 801d268:	6a3b      	ldr	r3, [r7, #32]
 801d26a:	697a      	ldr	r2, [r7, #20]
 801d26c:	69f9      	ldr	r1, [r7, #28]
 801d26e:	f7fd fa3f 	bl	801a6f0 <disk_write>
 801d272:	4603      	mov	r3, r0
 801d274:	2b00      	cmp	r3, #0
 801d276:	d004      	beq.n	801d282 <f_write+0x1e2>
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	2201      	movs	r2, #1
 801d27c:	755a      	strb	r2, [r3, #21]
 801d27e:	2301      	movs	r3, #1
 801d280:	e09e      	b.n	801d3c0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801d282:	68fb      	ldr	r3, [r7, #12]
 801d284:	6a1a      	ldr	r2, [r3, #32]
 801d286:	697b      	ldr	r3, [r7, #20]
 801d288:	1ad3      	subs	r3, r2, r3
 801d28a:	6a3a      	ldr	r2, [r7, #32]
 801d28c:	429a      	cmp	r2, r3
 801d28e:	d918      	bls.n	801d2c2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801d290:	68fb      	ldr	r3, [r7, #12]
 801d292:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801d296:	68fb      	ldr	r3, [r7, #12]
 801d298:	6a1a      	ldr	r2, [r3, #32]
 801d29a:	697b      	ldr	r3, [r7, #20]
 801d29c:	1ad3      	subs	r3, r2, r3
 801d29e:	693a      	ldr	r2, [r7, #16]
 801d2a0:	8992      	ldrh	r2, [r2, #12]
 801d2a2:	fb02 f303 	mul.w	r3, r2, r3
 801d2a6:	69fa      	ldr	r2, [r7, #28]
 801d2a8:	18d1      	adds	r1, r2, r3
 801d2aa:	693b      	ldr	r3, [r7, #16]
 801d2ac:	899b      	ldrh	r3, [r3, #12]
 801d2ae:	461a      	mov	r2, r3
 801d2b0:	f7fd fade 	bl	801a870 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	7d1b      	ldrb	r3, [r3, #20]
 801d2b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d2bc:	b2da      	uxtb	r2, r3
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801d2c2:	693b      	ldr	r3, [r7, #16]
 801d2c4:	899b      	ldrh	r3, [r3, #12]
 801d2c6:	461a      	mov	r2, r3
 801d2c8:	6a3b      	ldr	r3, [r7, #32]
 801d2ca:	fb02 f303 	mul.w	r3, r2, r3
 801d2ce:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801d2d0:	e04b      	b.n	801d36a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d2d2:	68fb      	ldr	r3, [r7, #12]
 801d2d4:	6a1b      	ldr	r3, [r3, #32]
 801d2d6:	697a      	ldr	r2, [r7, #20]
 801d2d8:	429a      	cmp	r2, r3
 801d2da:	d016      	beq.n	801d30a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801d2dc:	68fb      	ldr	r3, [r7, #12]
 801d2de:	699a      	ldr	r2, [r3, #24]
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801d2e4:	429a      	cmp	r2, r3
 801d2e6:	d210      	bcs.n	801d30a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801d2e8:	693b      	ldr	r3, [r7, #16]
 801d2ea:	7858      	ldrb	r0, [r3, #1]
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d2f2:	2301      	movs	r3, #1
 801d2f4:	697a      	ldr	r2, [r7, #20]
 801d2f6:	f7fd f9db 	bl	801a6b0 <disk_read>
 801d2fa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d004      	beq.n	801d30a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	2201      	movs	r2, #1
 801d304:	755a      	strb	r2, [r3, #21]
 801d306:	2301      	movs	r3, #1
 801d308:	e05a      	b.n	801d3c0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801d30a:	68fb      	ldr	r3, [r7, #12]
 801d30c:	697a      	ldr	r2, [r7, #20]
 801d30e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801d310:	693b      	ldr	r3, [r7, #16]
 801d312:	899b      	ldrh	r3, [r3, #12]
 801d314:	4618      	mov	r0, r3
 801d316:	68fb      	ldr	r3, [r7, #12]
 801d318:	699b      	ldr	r3, [r3, #24]
 801d31a:	693a      	ldr	r2, [r7, #16]
 801d31c:	8992      	ldrh	r2, [r2, #12]
 801d31e:	fbb3 f1f2 	udiv	r1, r3, r2
 801d322:	fb01 f202 	mul.w	r2, r1, r2
 801d326:	1a9b      	subs	r3, r3, r2
 801d328:	1ac3      	subs	r3, r0, r3
 801d32a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801d32c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	429a      	cmp	r2, r3
 801d332:	d901      	bls.n	801d338 <f_write+0x298>
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801d338:	68fb      	ldr	r3, [r7, #12]
 801d33a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d33e:	68fb      	ldr	r3, [r7, #12]
 801d340:	699b      	ldr	r3, [r3, #24]
 801d342:	693a      	ldr	r2, [r7, #16]
 801d344:	8992      	ldrh	r2, [r2, #12]
 801d346:	fbb3 f0f2 	udiv	r0, r3, r2
 801d34a:	fb00 f202 	mul.w	r2, r0, r2
 801d34e:	1a9b      	subs	r3, r3, r2
 801d350:	440b      	add	r3, r1
 801d352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d354:	69f9      	ldr	r1, [r7, #28]
 801d356:	4618      	mov	r0, r3
 801d358:	f7fd fa8a 	bl	801a870 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	7d1b      	ldrb	r3, [r3, #20]
 801d360:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801d364:	b2da      	uxtb	r2, r3
 801d366:	68fb      	ldr	r3, [r7, #12]
 801d368:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801d36a:	69fa      	ldr	r2, [r7, #28]
 801d36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d36e:	4413      	add	r3, r2
 801d370:	61fb      	str	r3, [r7, #28]
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	699a      	ldr	r2, [r3, #24]
 801d376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d378:	441a      	add	r2, r3
 801d37a:	68fb      	ldr	r3, [r7, #12]
 801d37c:	619a      	str	r2, [r3, #24]
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	68da      	ldr	r2, [r3, #12]
 801d382:	68fb      	ldr	r3, [r7, #12]
 801d384:	699b      	ldr	r3, [r3, #24]
 801d386:	429a      	cmp	r2, r3
 801d388:	bf38      	it	cc
 801d38a:	461a      	movcc	r2, r3
 801d38c:	68fb      	ldr	r3, [r7, #12]
 801d38e:	60da      	str	r2, [r3, #12]
 801d390:	683b      	ldr	r3, [r7, #0]
 801d392:	681a      	ldr	r2, [r3, #0]
 801d394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d396:	441a      	add	r2, r3
 801d398:	683b      	ldr	r3, [r7, #0]
 801d39a:	601a      	str	r2, [r3, #0]
 801d39c:	687a      	ldr	r2, [r7, #4]
 801d39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3a0:	1ad3      	subs	r3, r2, r3
 801d3a2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	f47f aeb5 	bne.w	801d116 <f_write+0x76>
 801d3ac:	e000      	b.n	801d3b0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801d3ae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	7d1b      	ldrb	r3, [r3, #20]
 801d3b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d3b8:	b2da      	uxtb	r2, r3
 801d3ba:	68fb      	ldr	r3, [r7, #12]
 801d3bc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801d3be:	2300      	movs	r3, #0
}
 801d3c0:	4618      	mov	r0, r3
 801d3c2:	3730      	adds	r7, #48	@ 0x30
 801d3c4:	46bd      	mov	sp, r7
 801d3c6:	bd80      	pop	{r7, pc}

0801d3c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801d3c8:	b580      	push	{r7, lr}
 801d3ca:	b086      	sub	sp, #24
 801d3cc:	af00      	add	r7, sp, #0
 801d3ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	f107 0208 	add.w	r2, r7, #8
 801d3d6:	4611      	mov	r1, r2
 801d3d8:	4618      	mov	r0, r3
 801d3da:	f7ff fc1d 	bl	801cc18 <validate>
 801d3de:	4603      	mov	r3, r0
 801d3e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801d3e2:	7dfb      	ldrb	r3, [r7, #23]
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	d168      	bne.n	801d4ba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	7d1b      	ldrb	r3, [r3, #20]
 801d3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d062      	beq.n	801d4ba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	7d1b      	ldrb	r3, [r3, #20]
 801d3f8:	b25b      	sxtb	r3, r3
 801d3fa:	2b00      	cmp	r3, #0
 801d3fc:	da15      	bge.n	801d42a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801d3fe:	68bb      	ldr	r3, [r7, #8]
 801d400:	7858      	ldrb	r0, [r3, #1]
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	6a1a      	ldr	r2, [r3, #32]
 801d40c:	2301      	movs	r3, #1
 801d40e:	f7fd f96f 	bl	801a6f0 <disk_write>
 801d412:	4603      	mov	r3, r0
 801d414:	2b00      	cmp	r3, #0
 801d416:	d001      	beq.n	801d41c <f_sync+0x54>
 801d418:	2301      	movs	r3, #1
 801d41a:	e04f      	b.n	801d4bc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	7d1b      	ldrb	r3, [r3, #20]
 801d420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d424:	b2da      	uxtb	r2, r3
 801d426:	687b      	ldr	r3, [r7, #4]
 801d428:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801d42a:	f7fd f8a1 	bl	801a570 <get_fattime>
 801d42e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801d430:	68ba      	ldr	r2, [r7, #8]
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d436:	4619      	mov	r1, r3
 801d438:	4610      	mov	r0, r2
 801d43a:	f7fd fc47 	bl	801accc <move_window>
 801d43e:	4603      	mov	r3, r0
 801d440:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801d442:	7dfb      	ldrb	r3, [r7, #23]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d138      	bne.n	801d4ba <f_sync+0xf2>
					dir = fp->dir_ptr;
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d44c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801d44e:	68fb      	ldr	r3, [r7, #12]
 801d450:	330b      	adds	r3, #11
 801d452:	781a      	ldrb	r2, [r3, #0]
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	330b      	adds	r3, #11
 801d458:	f042 0220 	orr.w	r2, r2, #32
 801d45c:	b2d2      	uxtb	r2, r2
 801d45e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	6818      	ldr	r0, [r3, #0]
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	689b      	ldr	r3, [r3, #8]
 801d468:	461a      	mov	r2, r3
 801d46a:	68f9      	ldr	r1, [r7, #12]
 801d46c:	f7fe f9d2 	bl	801b814 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	f103 021c 	add.w	r2, r3, #28
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	68db      	ldr	r3, [r3, #12]
 801d47a:	4619      	mov	r1, r3
 801d47c:	4610      	mov	r0, r2
 801d47e:	f7fd f9cb 	bl	801a818 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	3316      	adds	r3, #22
 801d486:	6939      	ldr	r1, [r7, #16]
 801d488:	4618      	mov	r0, r3
 801d48a:	f7fd f9c5 	bl	801a818 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	3312      	adds	r3, #18
 801d492:	2100      	movs	r1, #0
 801d494:	4618      	mov	r0, r3
 801d496:	f7fd f9a4 	bl	801a7e2 <st_word>
					fs->wflag = 1;
 801d49a:	68bb      	ldr	r3, [r7, #8]
 801d49c:	2201      	movs	r2, #1
 801d49e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801d4a0:	68bb      	ldr	r3, [r7, #8]
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	f7fd fc40 	bl	801ad28 <sync_fs>
 801d4a8:	4603      	mov	r3, r0
 801d4aa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	7d1b      	ldrb	r3, [r3, #20]
 801d4b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801d4b4:	b2da      	uxtb	r2, r3
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801d4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 801d4bc:	4618      	mov	r0, r3
 801d4be:	3718      	adds	r7, #24
 801d4c0:	46bd      	mov	sp, r7
 801d4c2:	bd80      	pop	{r7, pc}

0801d4c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	b084      	sub	sp, #16
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801d4cc:	6878      	ldr	r0, [r7, #4]
 801d4ce:	f7ff ff7b 	bl	801d3c8 <f_sync>
 801d4d2:	4603      	mov	r3, r0
 801d4d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801d4d6:	7bfb      	ldrb	r3, [r7, #15]
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d118      	bne.n	801d50e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	f107 0208 	add.w	r2, r7, #8
 801d4e2:	4611      	mov	r1, r2
 801d4e4:	4618      	mov	r0, r3
 801d4e6:	f7ff fb97 	bl	801cc18 <validate>
 801d4ea:	4603      	mov	r3, r0
 801d4ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d4ee:	7bfb      	ldrb	r3, [r7, #15]
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d10c      	bne.n	801d50e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	691b      	ldr	r3, [r3, #16]
 801d4f8:	4618      	mov	r0, r3
 801d4fa:	f7fd fb43 	bl	801ab84 <dec_lock>
 801d4fe:	4603      	mov	r3, r0
 801d500:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801d502:	7bfb      	ldrb	r3, [r7, #15]
 801d504:	2b00      	cmp	r3, #0
 801d506:	d102      	bne.n	801d50e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	2200      	movs	r2, #0
 801d50c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801d50e:	7bfb      	ldrb	r3, [r7, #15]
}
 801d510:	4618      	mov	r0, r3
 801d512:	3710      	adds	r7, #16
 801d514:	46bd      	mov	sp, r7
 801d516:	bd80      	pop	{r7, pc}

0801d518 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801d518:	b580      	push	{r7, lr}
 801d51a:	b0a0      	sub	sp, #128	@ 0x80
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801d520:	2300      	movs	r3, #0
 801d522:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801d524:	f107 010c 	add.w	r1, r7, #12
 801d528:	1d3b      	adds	r3, r7, #4
 801d52a:	2202      	movs	r2, #2
 801d52c:	4618      	mov	r0, r3
 801d52e:	f7ff f8ed 	bl	801c70c <find_volume>
 801d532:	4603      	mov	r3, r0
 801d534:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 801d538:	68fb      	ldr	r3, [r7, #12]
 801d53a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 801d53c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d540:	2b00      	cmp	r3, #0
 801d542:	f040 808e 	bne.w	801d662 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801d546:	687a      	ldr	r2, [r7, #4]
 801d548:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d54c:	4611      	mov	r1, r2
 801d54e:	4618      	mov	r0, r3
 801d550:	f7fe ffcc 	bl	801c4ec <follow_path>
 801d554:	4603      	mov	r3, r0
 801d556:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801d55a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d108      	bne.n	801d574 <f_unlink+0x5c>
 801d562:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d566:	2102      	movs	r1, #2
 801d568:	4618      	mov	r0, r3
 801d56a:	f7fd f9ff 	bl	801a96c <chk_lock>
 801d56e:	4603      	mov	r3, r0
 801d570:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801d574:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d172      	bne.n	801d662 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801d57c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801d580:	b25b      	sxtb	r3, r3
 801d582:	2b00      	cmp	r3, #0
 801d584:	da03      	bge.n	801d58e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801d586:	2306      	movs	r3, #6
 801d588:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 801d58c:	e008      	b.n	801d5a0 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801d58e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d592:	f003 0301 	and.w	r3, r3, #1
 801d596:	2b00      	cmp	r3, #0
 801d598:	d002      	beq.n	801d5a0 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801d59a:	2307      	movs	r3, #7
 801d59c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 801d5a0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	d134      	bne.n	801d612 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801d5a8:	68fb      	ldr	r3, [r7, #12]
 801d5aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801d5ac:	4611      	mov	r1, r2
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	f7fe f911 	bl	801b7d6 <ld_clust>
 801d5b4:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801d5b6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 801d5ba:	f003 0310 	and.w	r3, r3, #16
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d027      	beq.n	801d612 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801d5c2:	68fb      	ldr	r3, [r7, #12]
 801d5c4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801d5c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d5c8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801d5ca:	f107 0310 	add.w	r3, r7, #16
 801d5ce:	2100      	movs	r1, #0
 801d5d0:	4618      	mov	r0, r3
 801d5d2:	f7fd ff5a 	bl	801b48a <dir_sdi>
 801d5d6:	4603      	mov	r3, r0
 801d5d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 801d5dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	d116      	bne.n	801d612 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 801d5e4:	f107 0310 	add.w	r3, r7, #16
 801d5e8:	2100      	movs	r1, #0
 801d5ea:	4618      	mov	r0, r3
 801d5ec:	f7fe fb1d 	bl	801bc2a <dir_read>
 801d5f0:	4603      	mov	r3, r0
 801d5f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801d5f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	d102      	bne.n	801d604 <f_unlink+0xec>
 801d5fe:	2307      	movs	r3, #7
 801d600:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801d604:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d608:	2b04      	cmp	r3, #4
 801d60a:	d102      	bne.n	801d612 <f_unlink+0xfa>
 801d60c:	2300      	movs	r3, #0
 801d60e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 801d612:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d616:	2b00      	cmp	r3, #0
 801d618:	d123      	bne.n	801d662 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801d61a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d61e:	4618      	mov	r0, r3
 801d620:	f7fe fd62 	bl	801c0e8 <dir_remove>
 801d624:	4603      	mov	r3, r0
 801d626:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801d62a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d10c      	bne.n	801d64c <f_unlink+0x134>
 801d632:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d634:	2b00      	cmp	r3, #0
 801d636:	d009      	beq.n	801d64c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801d638:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801d63c:	2200      	movs	r2, #0
 801d63e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801d640:	4618      	mov	r0, r3
 801d642:	f7fd fded 	bl	801b220 <remove_chain>
 801d646:	4603      	mov	r3, r0
 801d648:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801d64c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 801d650:	2b00      	cmp	r3, #0
 801d652:	d106      	bne.n	801d662 <f_unlink+0x14a>
 801d654:	68fb      	ldr	r3, [r7, #12]
 801d656:	4618      	mov	r0, r3
 801d658:	f7fd fb66 	bl	801ad28 <sync_fs>
 801d65c:	4603      	mov	r3, r0
 801d65e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801d662:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 801d666:	4618      	mov	r0, r3
 801d668:	3780      	adds	r7, #128	@ 0x80
 801d66a:	46bd      	mov	sp, r7
 801d66c:	bd80      	pop	{r7, pc}
	...

0801d670 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801d670:	b480      	push	{r7}
 801d672:	b087      	sub	sp, #28
 801d674:	af00      	add	r7, sp, #0
 801d676:	60f8      	str	r0, [r7, #12]
 801d678:	60b9      	str	r1, [r7, #8]
 801d67a:	4613      	mov	r3, r2
 801d67c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801d67e:	2301      	movs	r3, #1
 801d680:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801d682:	2300      	movs	r3, #0
 801d684:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801d686:	4b1f      	ldr	r3, [pc, #124]	@ (801d704 <FATFS_LinkDriverEx+0x94>)
 801d688:	7a5b      	ldrb	r3, [r3, #9]
 801d68a:	b2db      	uxtb	r3, r3
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d131      	bne.n	801d6f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801d690:	4b1c      	ldr	r3, [pc, #112]	@ (801d704 <FATFS_LinkDriverEx+0x94>)
 801d692:	7a5b      	ldrb	r3, [r3, #9]
 801d694:	b2db      	uxtb	r3, r3
 801d696:	461a      	mov	r2, r3
 801d698:	4b1a      	ldr	r3, [pc, #104]	@ (801d704 <FATFS_LinkDriverEx+0x94>)
 801d69a:	2100      	movs	r1, #0
 801d69c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801d69e:	4b19      	ldr	r3, [pc, #100]	@ (801d704 <FATFS_LinkDriverEx+0x94>)
 801d6a0:	7a5b      	ldrb	r3, [r3, #9]
 801d6a2:	b2db      	uxtb	r3, r3
 801d6a4:	4a17      	ldr	r2, [pc, #92]	@ (801d704 <FATFS_LinkDriverEx+0x94>)
 801d6a6:	009b      	lsls	r3, r3, #2
 801d6a8:	4413      	add	r3, r2
 801d6aa:	68fa      	ldr	r2, [r7, #12]
 801d6ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801d6ae:	4b15      	ldr	r3, [pc, #84]	@ (801d704 <FATFS_LinkDriverEx+0x94>)
 801d6b0:	7a5b      	ldrb	r3, [r3, #9]
 801d6b2:	b2db      	uxtb	r3, r3
 801d6b4:	461a      	mov	r2, r3
 801d6b6:	4b13      	ldr	r3, [pc, #76]	@ (801d704 <FATFS_LinkDriverEx+0x94>)
 801d6b8:	4413      	add	r3, r2
 801d6ba:	79fa      	ldrb	r2, [r7, #7]
 801d6bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801d6be:	4b11      	ldr	r3, [pc, #68]	@ (801d704 <FATFS_LinkDriverEx+0x94>)
 801d6c0:	7a5b      	ldrb	r3, [r3, #9]
 801d6c2:	b2db      	uxtb	r3, r3
 801d6c4:	1c5a      	adds	r2, r3, #1
 801d6c6:	b2d1      	uxtb	r1, r2
 801d6c8:	4a0e      	ldr	r2, [pc, #56]	@ (801d704 <FATFS_LinkDriverEx+0x94>)
 801d6ca:	7251      	strb	r1, [r2, #9]
 801d6cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801d6ce:	7dbb      	ldrb	r3, [r7, #22]
 801d6d0:	3330      	adds	r3, #48	@ 0x30
 801d6d2:	b2da      	uxtb	r2, r3
 801d6d4:	68bb      	ldr	r3, [r7, #8]
 801d6d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801d6d8:	68bb      	ldr	r3, [r7, #8]
 801d6da:	3301      	adds	r3, #1
 801d6dc:	223a      	movs	r2, #58	@ 0x3a
 801d6de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801d6e0:	68bb      	ldr	r3, [r7, #8]
 801d6e2:	3302      	adds	r3, #2
 801d6e4:	222f      	movs	r2, #47	@ 0x2f
 801d6e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801d6e8:	68bb      	ldr	r3, [r7, #8]
 801d6ea:	3303      	adds	r3, #3
 801d6ec:	2200      	movs	r2, #0
 801d6ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801d6f0:	2300      	movs	r3, #0
 801d6f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801d6f4:	7dfb      	ldrb	r3, [r7, #23]
}
 801d6f6:	4618      	mov	r0, r3
 801d6f8:	371c      	adds	r7, #28
 801d6fa:	46bd      	mov	sp, r7
 801d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d700:	4770      	bx	lr
 801d702:	bf00      	nop
 801d704:	24000768 	.word	0x24000768

0801d708 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801d708:	b580      	push	{r7, lr}
 801d70a:	b082      	sub	sp, #8
 801d70c:	af00      	add	r7, sp, #0
 801d70e:	6078      	str	r0, [r7, #4]
 801d710:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801d712:	2200      	movs	r2, #0
 801d714:	6839      	ldr	r1, [r7, #0]
 801d716:	6878      	ldr	r0, [r7, #4]
 801d718:	f7ff ffaa 	bl	801d670 <FATFS_LinkDriverEx>
 801d71c:	4603      	mov	r3, r0
}
 801d71e:	4618      	mov	r0, r3
 801d720:	3708      	adds	r7, #8
 801d722:	46bd      	mov	sp, r7
 801d724:	bd80      	pop	{r7, pc}
	...

0801d728 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801d728:	b480      	push	{r7}
 801d72a:	b085      	sub	sp, #20
 801d72c:	af00      	add	r7, sp, #0
 801d72e:	4603      	mov	r3, r0
 801d730:	6039      	str	r1, [r7, #0]
 801d732:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801d734:	88fb      	ldrh	r3, [r7, #6]
 801d736:	2b7f      	cmp	r3, #127	@ 0x7f
 801d738:	d802      	bhi.n	801d740 <ff_convert+0x18>
		c = chr;
 801d73a:	88fb      	ldrh	r3, [r7, #6]
 801d73c:	81fb      	strh	r3, [r7, #14]
 801d73e:	e025      	b.n	801d78c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801d740:	683b      	ldr	r3, [r7, #0]
 801d742:	2b00      	cmp	r3, #0
 801d744:	d00b      	beq.n	801d75e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801d746:	88fb      	ldrh	r3, [r7, #6]
 801d748:	2bff      	cmp	r3, #255	@ 0xff
 801d74a:	d805      	bhi.n	801d758 <ff_convert+0x30>
 801d74c:	88fb      	ldrh	r3, [r7, #6]
 801d74e:	3b80      	subs	r3, #128	@ 0x80
 801d750:	4a12      	ldr	r2, [pc, #72]	@ (801d79c <ff_convert+0x74>)
 801d752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d756:	e000      	b.n	801d75a <ff_convert+0x32>
 801d758:	2300      	movs	r3, #0
 801d75a:	81fb      	strh	r3, [r7, #14]
 801d75c:	e016      	b.n	801d78c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801d75e:	2300      	movs	r3, #0
 801d760:	81fb      	strh	r3, [r7, #14]
 801d762:	e009      	b.n	801d778 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801d764:	89fb      	ldrh	r3, [r7, #14]
 801d766:	4a0d      	ldr	r2, [pc, #52]	@ (801d79c <ff_convert+0x74>)
 801d768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d76c:	88fa      	ldrh	r2, [r7, #6]
 801d76e:	429a      	cmp	r2, r3
 801d770:	d006      	beq.n	801d780 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801d772:	89fb      	ldrh	r3, [r7, #14]
 801d774:	3301      	adds	r3, #1
 801d776:	81fb      	strh	r3, [r7, #14]
 801d778:	89fb      	ldrh	r3, [r7, #14]
 801d77a:	2b7f      	cmp	r3, #127	@ 0x7f
 801d77c:	d9f2      	bls.n	801d764 <ff_convert+0x3c>
 801d77e:	e000      	b.n	801d782 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801d780:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801d782:	89fb      	ldrh	r3, [r7, #14]
 801d784:	3380      	adds	r3, #128	@ 0x80
 801d786:	b29b      	uxth	r3, r3
 801d788:	b2db      	uxtb	r3, r3
 801d78a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801d78c:	89fb      	ldrh	r3, [r7, #14]
}
 801d78e:	4618      	mov	r0, r3
 801d790:	3714      	adds	r7, #20
 801d792:	46bd      	mov	sp, r7
 801d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d798:	4770      	bx	lr
 801d79a:	bf00      	nop
 801d79c:	0801e44c 	.word	0x0801e44c

0801d7a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801d7a0:	b480      	push	{r7}
 801d7a2:	b087      	sub	sp, #28
 801d7a4:	af00      	add	r7, sp, #0
 801d7a6:	4603      	mov	r3, r0
 801d7a8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801d7aa:	88fb      	ldrh	r3, [r7, #6]
 801d7ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d7b0:	d201      	bcs.n	801d7b6 <ff_wtoupper+0x16>
 801d7b2:	4b3e      	ldr	r3, [pc, #248]	@ (801d8ac <ff_wtoupper+0x10c>)
 801d7b4:	e000      	b.n	801d7b8 <ff_wtoupper+0x18>
 801d7b6:	4b3e      	ldr	r3, [pc, #248]	@ (801d8b0 <ff_wtoupper+0x110>)
 801d7b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801d7ba:	697b      	ldr	r3, [r7, #20]
 801d7bc:	1c9a      	adds	r2, r3, #2
 801d7be:	617a      	str	r2, [r7, #20]
 801d7c0:	881b      	ldrh	r3, [r3, #0]
 801d7c2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801d7c4:	8a7b      	ldrh	r3, [r7, #18]
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d068      	beq.n	801d89c <ff_wtoupper+0xfc>
 801d7ca:	88fa      	ldrh	r2, [r7, #6]
 801d7cc:	8a7b      	ldrh	r3, [r7, #18]
 801d7ce:	429a      	cmp	r2, r3
 801d7d0:	d364      	bcc.n	801d89c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801d7d2:	697b      	ldr	r3, [r7, #20]
 801d7d4:	1c9a      	adds	r2, r3, #2
 801d7d6:	617a      	str	r2, [r7, #20]
 801d7d8:	881b      	ldrh	r3, [r3, #0]
 801d7da:	823b      	strh	r3, [r7, #16]
 801d7dc:	8a3b      	ldrh	r3, [r7, #16]
 801d7de:	0a1b      	lsrs	r3, r3, #8
 801d7e0:	81fb      	strh	r3, [r7, #14]
 801d7e2:	8a3b      	ldrh	r3, [r7, #16]
 801d7e4:	b2db      	uxtb	r3, r3
 801d7e6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801d7e8:	88fa      	ldrh	r2, [r7, #6]
 801d7ea:	8a79      	ldrh	r1, [r7, #18]
 801d7ec:	8a3b      	ldrh	r3, [r7, #16]
 801d7ee:	440b      	add	r3, r1
 801d7f0:	429a      	cmp	r2, r3
 801d7f2:	da49      	bge.n	801d888 <ff_wtoupper+0xe8>
			switch (cmd) {
 801d7f4:	89fb      	ldrh	r3, [r7, #14]
 801d7f6:	2b08      	cmp	r3, #8
 801d7f8:	d84f      	bhi.n	801d89a <ff_wtoupper+0xfa>
 801d7fa:	a201      	add	r2, pc, #4	@ (adr r2, 801d800 <ff_wtoupper+0x60>)
 801d7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d800:	0801d825 	.word	0x0801d825
 801d804:	0801d837 	.word	0x0801d837
 801d808:	0801d84d 	.word	0x0801d84d
 801d80c:	0801d855 	.word	0x0801d855
 801d810:	0801d85d 	.word	0x0801d85d
 801d814:	0801d865 	.word	0x0801d865
 801d818:	0801d86d 	.word	0x0801d86d
 801d81c:	0801d875 	.word	0x0801d875
 801d820:	0801d87d 	.word	0x0801d87d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801d824:	88fa      	ldrh	r2, [r7, #6]
 801d826:	8a7b      	ldrh	r3, [r7, #18]
 801d828:	1ad3      	subs	r3, r2, r3
 801d82a:	005b      	lsls	r3, r3, #1
 801d82c:	697a      	ldr	r2, [r7, #20]
 801d82e:	4413      	add	r3, r2
 801d830:	881b      	ldrh	r3, [r3, #0]
 801d832:	80fb      	strh	r3, [r7, #6]
 801d834:	e027      	b.n	801d886 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801d836:	88fa      	ldrh	r2, [r7, #6]
 801d838:	8a7b      	ldrh	r3, [r7, #18]
 801d83a:	1ad3      	subs	r3, r2, r3
 801d83c:	b29b      	uxth	r3, r3
 801d83e:	f003 0301 	and.w	r3, r3, #1
 801d842:	b29b      	uxth	r3, r3
 801d844:	88fa      	ldrh	r2, [r7, #6]
 801d846:	1ad3      	subs	r3, r2, r3
 801d848:	80fb      	strh	r3, [r7, #6]
 801d84a:	e01c      	b.n	801d886 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801d84c:	88fb      	ldrh	r3, [r7, #6]
 801d84e:	3b10      	subs	r3, #16
 801d850:	80fb      	strh	r3, [r7, #6]
 801d852:	e018      	b.n	801d886 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801d854:	88fb      	ldrh	r3, [r7, #6]
 801d856:	3b20      	subs	r3, #32
 801d858:	80fb      	strh	r3, [r7, #6]
 801d85a:	e014      	b.n	801d886 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801d85c:	88fb      	ldrh	r3, [r7, #6]
 801d85e:	3b30      	subs	r3, #48	@ 0x30
 801d860:	80fb      	strh	r3, [r7, #6]
 801d862:	e010      	b.n	801d886 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801d864:	88fb      	ldrh	r3, [r7, #6]
 801d866:	3b1a      	subs	r3, #26
 801d868:	80fb      	strh	r3, [r7, #6]
 801d86a:	e00c      	b.n	801d886 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801d86c:	88fb      	ldrh	r3, [r7, #6]
 801d86e:	3308      	adds	r3, #8
 801d870:	80fb      	strh	r3, [r7, #6]
 801d872:	e008      	b.n	801d886 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801d874:	88fb      	ldrh	r3, [r7, #6]
 801d876:	3b50      	subs	r3, #80	@ 0x50
 801d878:	80fb      	strh	r3, [r7, #6]
 801d87a:	e004      	b.n	801d886 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801d87c:	88fb      	ldrh	r3, [r7, #6]
 801d87e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801d882:	80fb      	strh	r3, [r7, #6]
 801d884:	bf00      	nop
			}
			break;
 801d886:	e008      	b.n	801d89a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801d888:	89fb      	ldrh	r3, [r7, #14]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d195      	bne.n	801d7ba <ff_wtoupper+0x1a>
 801d88e:	8a3b      	ldrh	r3, [r7, #16]
 801d890:	005b      	lsls	r3, r3, #1
 801d892:	697a      	ldr	r2, [r7, #20]
 801d894:	4413      	add	r3, r2
 801d896:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801d898:	e78f      	b.n	801d7ba <ff_wtoupper+0x1a>
			break;
 801d89a:	bf00      	nop
	}

	return chr;
 801d89c:	88fb      	ldrh	r3, [r7, #6]
}
 801d89e:	4618      	mov	r0, r3
 801d8a0:	371c      	adds	r7, #28
 801d8a2:	46bd      	mov	sp, r7
 801d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8a8:	4770      	bx	lr
 801d8aa:	bf00      	nop
 801d8ac:	0801e54c 	.word	0x0801e54c
 801d8b0:	0801e740 	.word	0x0801e740

0801d8b4 <memset>:
 801d8b4:	4402      	add	r2, r0
 801d8b6:	4603      	mov	r3, r0
 801d8b8:	4293      	cmp	r3, r2
 801d8ba:	d100      	bne.n	801d8be <memset+0xa>
 801d8bc:	4770      	bx	lr
 801d8be:	f803 1b01 	strb.w	r1, [r3], #1
 801d8c2:	e7f9      	b.n	801d8b8 <memset+0x4>

0801d8c4 <__errno>:
 801d8c4:	4b01      	ldr	r3, [pc, #4]	@ (801d8cc <__errno+0x8>)
 801d8c6:	6818      	ldr	r0, [r3, #0]
 801d8c8:	4770      	bx	lr
 801d8ca:	bf00      	nop
 801d8cc:	24000028 	.word	0x24000028

0801d8d0 <__libc_init_array>:
 801d8d0:	b570      	push	{r4, r5, r6, lr}
 801d8d2:	4d0d      	ldr	r5, [pc, #52]	@ (801d908 <__libc_init_array+0x38>)
 801d8d4:	4c0d      	ldr	r4, [pc, #52]	@ (801d90c <__libc_init_array+0x3c>)
 801d8d6:	1b64      	subs	r4, r4, r5
 801d8d8:	10a4      	asrs	r4, r4, #2
 801d8da:	2600      	movs	r6, #0
 801d8dc:	42a6      	cmp	r6, r4
 801d8de:	d109      	bne.n	801d8f4 <__libc_init_array+0x24>
 801d8e0:	4d0b      	ldr	r5, [pc, #44]	@ (801d910 <__libc_init_array+0x40>)
 801d8e2:	4c0c      	ldr	r4, [pc, #48]	@ (801d914 <__libc_init_array+0x44>)
 801d8e4:	f000 fd00 	bl	801e2e8 <_init>
 801d8e8:	1b64      	subs	r4, r4, r5
 801d8ea:	10a4      	asrs	r4, r4, #2
 801d8ec:	2600      	movs	r6, #0
 801d8ee:	42a6      	cmp	r6, r4
 801d8f0:	d105      	bne.n	801d8fe <__libc_init_array+0x2e>
 801d8f2:	bd70      	pop	{r4, r5, r6, pc}
 801d8f4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d8f8:	4798      	blx	r3
 801d8fa:	3601      	adds	r6, #1
 801d8fc:	e7ee      	b.n	801d8dc <__libc_init_array+0xc>
 801d8fe:	f855 3b04 	ldr.w	r3, [r5], #4
 801d902:	4798      	blx	r3
 801d904:	3601      	adds	r6, #1
 801d906:	e7f2      	b.n	801d8ee <__libc_init_array+0x1e>
 801d908:	08020130 	.word	0x08020130
 801d90c:	08020130 	.word	0x08020130
 801d910:	08020130 	.word	0x08020130
 801d914:	08020134 	.word	0x08020134

0801d918 <atan2>:
 801d918:	f000 baaa 	b.w	801de70 <__ieee754_atan2>
 801d91c:	0000      	movs	r0, r0
	...

0801d920 <sqrt>:
 801d920:	b508      	push	{r3, lr}
 801d922:	ed2d 8b04 	vpush	{d8-d9}
 801d926:	eeb0 8b40 	vmov.f64	d8, d0
 801d92a:	f000 fa9d 	bl	801de68 <__ieee754_sqrt>
 801d92e:	eeb4 8b48 	vcmp.f64	d8, d8
 801d932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d936:	d60c      	bvs.n	801d952 <sqrt+0x32>
 801d938:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 801d958 <sqrt+0x38>
 801d93c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801d940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d944:	d505      	bpl.n	801d952 <sqrt+0x32>
 801d946:	f7ff ffbd 	bl	801d8c4 <__errno>
 801d94a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801d94e:	2321      	movs	r3, #33	@ 0x21
 801d950:	6003      	str	r3, [r0, #0]
 801d952:	ecbd 8b04 	vpop	{d8-d9}
 801d956:	bd08      	pop	{r3, pc}
	...

0801d960 <checkint>:
 801d960:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d964:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 801d968:	429a      	cmp	r2, r3
 801d96a:	b570      	push	{r4, r5, r6, lr}
 801d96c:	dd2a      	ble.n	801d9c4 <checkint+0x64>
 801d96e:	f240 4333 	movw	r3, #1075	@ 0x433
 801d972:	429a      	cmp	r2, r3
 801d974:	dc24      	bgt.n	801d9c0 <checkint+0x60>
 801d976:	1a9b      	subs	r3, r3, r2
 801d978:	f1a3 0620 	sub.w	r6, r3, #32
 801d97c:	f04f 32ff 	mov.w	r2, #4294967295
 801d980:	fa02 f403 	lsl.w	r4, r2, r3
 801d984:	fa02 f606 	lsl.w	r6, r2, r6
 801d988:	f1c3 0520 	rsb	r5, r3, #32
 801d98c:	fa22 f505 	lsr.w	r5, r2, r5
 801d990:	4334      	orrs	r4, r6
 801d992:	432c      	orrs	r4, r5
 801d994:	409a      	lsls	r2, r3
 801d996:	ea20 0202 	bic.w	r2, r0, r2
 801d99a:	ea21 0404 	bic.w	r4, r1, r4
 801d99e:	4322      	orrs	r2, r4
 801d9a0:	f1a3 0420 	sub.w	r4, r3, #32
 801d9a4:	f1c3 0220 	rsb	r2, r3, #32
 801d9a8:	d10c      	bne.n	801d9c4 <checkint+0x64>
 801d9aa:	40d8      	lsrs	r0, r3
 801d9ac:	fa01 f302 	lsl.w	r3, r1, r2
 801d9b0:	4318      	orrs	r0, r3
 801d9b2:	40e1      	lsrs	r1, r4
 801d9b4:	4308      	orrs	r0, r1
 801d9b6:	f000 0001 	and.w	r0, r0, #1
 801d9ba:	f1d0 0002 	rsbs	r0, r0, #2
 801d9be:	bd70      	pop	{r4, r5, r6, pc}
 801d9c0:	2002      	movs	r0, #2
 801d9c2:	e7fc      	b.n	801d9be <checkint+0x5e>
 801d9c4:	2000      	movs	r0, #0
 801d9c6:	e7fa      	b.n	801d9be <checkint+0x5e>

0801d9c8 <pow>:
 801d9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9cc:	ee10 4a90 	vmov	r4, s1
 801d9d0:	ed2d 8b0a 	vpush	{d8-d12}
 801d9d4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 801d9d8:	ee11 aa90 	vmov	sl, s3
 801d9dc:	f108 32ff 	add.w	r2, r8, #4294967295
 801d9e0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 801d9e4:	429a      	cmp	r2, r3
 801d9e6:	ee10 5a10 	vmov	r5, s0
 801d9ea:	ee11 0a10 	vmov	r0, s2
 801d9ee:	b087      	sub	sp, #28
 801d9f0:	46c4      	mov	ip, r8
 801d9f2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 801d9f6:	d806      	bhi.n	801da06 <pow+0x3e>
 801d9f8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801d9fc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 801da00:	2b7f      	cmp	r3, #127	@ 0x7f
 801da02:	f240 8157 	bls.w	801dcb4 <pow+0x2ec>
 801da06:	1802      	adds	r2, r0, r0
 801da08:	eb4a 010a 	adc.w	r1, sl, sl
 801da0c:	f06f 0b01 	mvn.w	fp, #1
 801da10:	1e57      	subs	r7, r2, #1
 801da12:	f141 33ff 	adc.w	r3, r1, #4294967295
 801da16:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801da1a:	45bb      	cmp	fp, r7
 801da1c:	eb7e 0303 	sbcs.w	r3, lr, r3
 801da20:	d242      	bcs.n	801daa8 <pow+0xe0>
 801da22:	ea52 0301 	orrs.w	r3, r2, r1
 801da26:	f04f 0300 	mov.w	r3, #0
 801da2a:	d10c      	bne.n	801da46 <pow+0x7e>
 801da2c:	196d      	adds	r5, r5, r5
 801da2e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801da32:	4164      	adcs	r4, r4
 801da34:	42ab      	cmp	r3, r5
 801da36:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801da3a:	41a3      	sbcs	r3, r4
 801da3c:	f0c0 808f 	bcc.w	801db5e <pow+0x196>
 801da40:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801da44:	e02b      	b.n	801da9e <pow+0xd6>
 801da46:	4ed4      	ldr	r6, [pc, #848]	@ (801dd98 <pow+0x3d0>)
 801da48:	42b4      	cmp	r4, r6
 801da4a:	bf08      	it	eq
 801da4c:	429d      	cmpeq	r5, r3
 801da4e:	d109      	bne.n	801da64 <pow+0x9c>
 801da50:	1800      	adds	r0, r0, r0
 801da52:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801da56:	eb4a 0a0a 	adc.w	sl, sl, sl
 801da5a:	4283      	cmp	r3, r0
 801da5c:	4bcf      	ldr	r3, [pc, #828]	@ (801dd9c <pow+0x3d4>)
 801da5e:	eb73 030a 	sbcs.w	r3, r3, sl
 801da62:	e7eb      	b.n	801da3c <pow+0x74>
 801da64:	196d      	adds	r5, r5, r5
 801da66:	48ce      	ldr	r0, [pc, #824]	@ (801dda0 <pow+0x3d8>)
 801da68:	4164      	adcs	r4, r4
 801da6a:	42ab      	cmp	r3, r5
 801da6c:	eb70 0604 	sbcs.w	r6, r0, r4
 801da70:	d375      	bcc.n	801db5e <pow+0x196>
 801da72:	4281      	cmp	r1, r0
 801da74:	bf08      	it	eq
 801da76:	429a      	cmpeq	r2, r3
 801da78:	d171      	bne.n	801db5e <pow+0x196>
 801da7a:	4aca      	ldr	r2, [pc, #808]	@ (801dda4 <pow+0x3dc>)
 801da7c:	4294      	cmp	r4, r2
 801da7e:	bf08      	it	eq
 801da80:	429d      	cmpeq	r5, r3
 801da82:	d0dd      	beq.n	801da40 <pow+0x78>
 801da84:	4294      	cmp	r4, r2
 801da86:	ea6f 0a0a 	mvn.w	sl, sl
 801da8a:	bf34      	ite	cc
 801da8c:	2400      	movcc	r4, #0
 801da8e:	2401      	movcs	r4, #1
 801da90:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801da94:	4554      	cmp	r4, sl
 801da96:	f040 81dc 	bne.w	801de52 <pow+0x48a>
 801da9a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801da9e:	b007      	add	sp, #28
 801daa0:	ecbd 8b0a 	vpop	{d8-d12}
 801daa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daa8:	196f      	adds	r7, r5, r5
 801daaa:	eb44 0904 	adc.w	r9, r4, r4
 801daae:	1e7a      	subs	r2, r7, #1
 801dab0:	f169 0300 	sbc.w	r3, r9, #0
 801dab4:	4593      	cmp	fp, r2
 801dab6:	eb7e 0303 	sbcs.w	r3, lr, r3
 801daba:	d225      	bcs.n	801db08 <pow+0x140>
 801dabc:	ee20 0b00 	vmul.f64	d0, d0, d0
 801dac0:	2c00      	cmp	r4, #0
 801dac2:	da13      	bge.n	801daec <pow+0x124>
 801dac4:	4651      	mov	r1, sl
 801dac6:	f7ff ff4b 	bl	801d960 <checkint>
 801daca:	2801      	cmp	r0, #1
 801dacc:	d10e      	bne.n	801daec <pow+0x124>
 801dace:	eeb1 0b40 	vneg.f64	d0, d0
 801dad2:	ea57 0909 	orrs.w	r9, r7, r9
 801dad6:	d10b      	bne.n	801daf0 <pow+0x128>
 801dad8:	f1ba 0f00 	cmp.w	sl, #0
 801dadc:	dadf      	bge.n	801da9e <pow+0xd6>
 801dade:	b007      	add	sp, #28
 801dae0:	ecbd 8b0a 	vpop	{d8-d12}
 801dae4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dae8:	f000 bbba 	b.w	801e260 <__math_divzero>
 801daec:	2000      	movs	r0, #0
 801daee:	e7f0      	b.n	801dad2 <pow+0x10a>
 801daf0:	f1ba 0f00 	cmp.w	sl, #0
 801daf4:	dad3      	bge.n	801da9e <pow+0xd6>
 801daf6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801dafa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801dafe:	ed8d 7b00 	vstr	d7, [sp]
 801db02:	ed9d 0b00 	vldr	d0, [sp]
 801db06:	e7ca      	b.n	801da9e <pow+0xd6>
 801db08:	2c00      	cmp	r4, #0
 801db0a:	da2b      	bge.n	801db64 <pow+0x19c>
 801db0c:	4651      	mov	r1, sl
 801db0e:	f7ff ff27 	bl	801d960 <checkint>
 801db12:	b930      	cbnz	r0, 801db22 <pow+0x15a>
 801db14:	b007      	add	sp, #28
 801db16:	ecbd 8b0a 	vpop	{d8-d12}
 801db1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db1e:	f000 bbb7 	b.w	801e290 <__math_invalid>
 801db22:	1e41      	subs	r1, r0, #1
 801db24:	4248      	negs	r0, r1
 801db26:	4148      	adcs	r0, r1
 801db28:	0480      	lsls	r0, r0, #18
 801db2a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801db2e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801db32:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801db36:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801db3a:	2b7f      	cmp	r3, #127	@ 0x7f
 801db3c:	d92d      	bls.n	801db9a <pow+0x1d2>
 801db3e:	4b96      	ldr	r3, [pc, #600]	@ (801dd98 <pow+0x3d0>)
 801db40:	2000      	movs	r0, #0
 801db42:	429c      	cmp	r4, r3
 801db44:	bf08      	it	eq
 801db46:	4285      	cmpeq	r5, r0
 801db48:	f43f af7a 	beq.w	801da40 <pow+0x78>
 801db4c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 801db50:	428a      	cmp	r2, r1
 801db52:	d80c      	bhi.n	801db6e <pow+0x1a6>
 801db54:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801db58:	42a8      	cmp	r0, r5
 801db5a:	41a3      	sbcs	r3, r4
 801db5c:	d204      	bcs.n	801db68 <pow+0x1a0>
 801db5e:	ee31 0b00 	vadd.f64	d0, d1, d0
 801db62:	e79c      	b.n	801da9e <pow+0xd6>
 801db64:	2000      	movs	r0, #0
 801db66:	e7e4      	b.n	801db32 <pow+0x16a>
 801db68:	ee30 0b41 	vsub.f64	d0, d0, d1
 801db6c:	e797      	b.n	801da9e <pow+0xd6>
 801db6e:	2d01      	cmp	r5, #1
 801db70:	eb74 0303 	sbcs.w	r3, r4, r3
 801db74:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801db78:	bf34      	ite	cc
 801db7a:	2301      	movcc	r3, #1
 801db7c:	2300      	movcs	r3, #0
 801db7e:	4296      	cmp	r6, r2
 801db80:	bf8c      	ite	hi
 801db82:	2600      	movhi	r6, #0
 801db84:	2601      	movls	r6, #1
 801db86:	42b3      	cmp	r3, r6
 801db88:	f000 809c 	beq.w	801dcc4 <pow+0x2fc>
 801db8c:	b007      	add	sp, #28
 801db8e:	ecbd 8b0a 	vpop	{d8-d12}
 801db92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db96:	f000 bb5b 	b.w	801e250 <__math_oflow>
 801db9a:	f1bc 0f00 	cmp.w	ip, #0
 801db9e:	d10a      	bne.n	801dbb6 <pow+0x1ee>
 801dba0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 801dd88 <pow+0x3c0>
 801dba4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801dba8:	ec53 2b17 	vmov	r2, r3, d7
 801dbac:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801dbb0:	4615      	mov	r5, r2
 801dbb2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801dbb6:	4a7c      	ldr	r2, [pc, #496]	@ (801dda8 <pow+0x3e0>)
 801dbb8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801dbbc:	4422      	add	r2, r4
 801dbbe:	1513      	asrs	r3, r2, #20
 801dbc0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 801dbc4:	ee03 3a10 	vmov	s6, r3
 801dbc8:	0d12      	lsrs	r2, r2, #20
 801dbca:	4b78      	ldr	r3, [pc, #480]	@ (801ddac <pow+0x3e4>)
 801dbcc:	0512      	lsls	r2, r2, #20
 801dbce:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 801dbd2:	1aa7      	subs	r7, r4, r2
 801dbd4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 801dbd8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801dbdc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 801dbe0:	1e2e      	subs	r6, r5, #0
 801dbe2:	ec47 6b14 	vmov	d4, r6, r7
 801dbe6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801dbea:	eea4 6b05 	vfma.f64	d6, d4, d5
 801dbee:	ed93 5b00 	vldr	d5, [r3]
 801dbf2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801dbf6:	eea3 2b05 	vfma.f64	d2, d3, d5
 801dbfa:	ed93 5b02 	vldr	d5, [r3, #8]
 801dbfe:	ee36 4b02 	vadd.f64	d4, d6, d2
 801dc02:	ee32 2b44 	vsub.f64	d2, d2, d4
 801dc06:	eea3 7b05 	vfma.f64	d7, d3, d5
 801dc0a:	ed93 5b04 	vldr	d5, [r3, #16]
 801dc0e:	ee32 2b06 	vadd.f64	d2, d2, d6
 801dc12:	ee37 7b02 	vadd.f64	d7, d7, d2
 801dc16:	ee26 5b05 	vmul.f64	d5, d6, d5
 801dc1a:	ee26 0b05 	vmul.f64	d0, d6, d5
 801dc1e:	ee34 8b00 	vadd.f64	d8, d4, d0
 801dc22:	eeb0 9b40 	vmov.f64	d9, d0
 801dc26:	ee34 4b48 	vsub.f64	d4, d4, d8
 801dc2a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801dc2e:	ee34 ab00 	vadd.f64	d10, d4, d0
 801dc32:	ed93 5b06 	vldr	d5, [r3, #24]
 801dc36:	ee26 bb00 	vmul.f64	d11, d6, d0
 801dc3a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801dc3e:	ed93 4b08 	vldr	d4, [r3, #32]
 801dc42:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801dc46:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801dc4a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801dc4e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801dc52:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801dc56:	eea6 4b03 	vfma.f64	d4, d6, d3
 801dc5a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801dc5e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801dc62:	eea0 4b03 	vfma.f64	d4, d0, d3
 801dc66:	eea0 5b04 	vfma.f64	d5, d0, d4
 801dc6a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801dc6e:	ee38 4b07 	vadd.f64	d4, d8, d7
 801dc72:	ee21 6b04 	vmul.f64	d6, d1, d4
 801dc76:	ee16 3a90 	vmov	r3, s13
 801dc7a:	eeb0 5b46 	vmov.f64	d5, d6
 801dc7e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801dc82:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801dc86:	18b2      	adds	r2, r6, r2
 801dc88:	2a3e      	cmp	r2, #62	@ 0x3e
 801dc8a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801dc8e:	ee38 8b44 	vsub.f64	d8, d8, d4
 801dc92:	ee38 8b07 	vadd.f64	d8, d8, d7
 801dc96:	eea1 5b08 	vfma.f64	d5, d1, d8
 801dc9a:	d91b      	bls.n	801dcd4 <pow+0x30c>
 801dc9c:	2a00      	cmp	r2, #0
 801dc9e:	da0b      	bge.n	801dcb8 <pow+0x2f0>
 801dca0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801dca4:	ee36 0b00 	vadd.f64	d0, d6, d0
 801dca8:	2800      	cmp	r0, #0
 801dcaa:	f43f aef8 	beq.w	801da9e <pow+0xd6>
 801dcae:	eeb1 0b40 	vneg.f64	d0, d0
 801dcb2:	e6f4      	b.n	801da9e <pow+0xd6>
 801dcb4:	2000      	movs	r0, #0
 801dcb6:	e77e      	b.n	801dbb6 <pow+0x1ee>
 801dcb8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 801dcbc:	d909      	bls.n	801dcd2 <pow+0x30a>
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	f6bf af64 	bge.w	801db8c <pow+0x1c4>
 801dcc4:	b007      	add	sp, #28
 801dcc6:	ecbd 8b0a 	vpop	{d8-d12}
 801dcca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcce:	f000 bab7 	b.w	801e240 <__math_uflow>
 801dcd2:	2600      	movs	r6, #0
 801dcd4:	4936      	ldr	r1, [pc, #216]	@ (801ddb0 <pow+0x3e8>)
 801dcd6:	ed91 4b02 	vldr	d4, [r1, #8]
 801dcda:	ed91 3b00 	vldr	d3, [r1]
 801dcde:	eeb0 7b44 	vmov.f64	d7, d4
 801dce2:	eea6 7b03 	vfma.f64	d7, d6, d3
 801dce6:	ee17 5a10 	vmov	r5, s14
 801dcea:	ee37 7b44 	vsub.f64	d7, d7, d4
 801dcee:	ed91 4b04 	vldr	d4, [r1, #16]
 801dcf2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 801dcf6:	eea7 6b04 	vfma.f64	d6, d7, d4
 801dcfa:	ed91 4b06 	vldr	d4, [r1, #24]
 801dcfe:	18dc      	adds	r4, r3, r3
 801dd00:	f104 030f 	add.w	r3, r4, #15
 801dd04:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801dd08:	eea7 6b04 	vfma.f64	d6, d7, d4
 801dd0c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 801dd10:	ee35 5b06 	vadd.f64	d5, d5, d6
 801dd14:	ee25 6b05 	vmul.f64	d6, d5, d5
 801dd18:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801dd1c:	ed91 4b08 	vldr	d4, [r1, #32]
 801dd20:	ee35 7b07 	vadd.f64	d7, d5, d7
 801dd24:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801dd28:	eea5 4b03 	vfma.f64	d4, d5, d3
 801dd2c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 801dd30:	eea6 7b04 	vfma.f64	d7, d6, d4
 801dd34:	ee26 6b06 	vmul.f64	d6, d6, d6
 801dd38:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801dd3c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801dd40:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801dd44:	eea5 4b03 	vfma.f64	d4, d5, d3
 801dd48:	1940      	adds	r0, r0, r5
 801dd4a:	2700      	movs	r7, #0
 801dd4c:	eb17 020c 	adds.w	r2, r7, ip
 801dd50:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801dd54:	eea6 7b04 	vfma.f64	d7, d6, d4
 801dd58:	2e00      	cmp	r6, #0
 801dd5a:	d175      	bne.n	801de48 <pow+0x480>
 801dd5c:	42bd      	cmp	r5, r7
 801dd5e:	db29      	blt.n	801ddb4 <pow+0x3ec>
 801dd60:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 801dd64:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 801dd68:	4610      	mov	r0, r2
 801dd6a:	ec41 0b10 	vmov	d0, r0, r1
 801dd6e:	eea7 0b00 	vfma.f64	d0, d7, d0
 801dd72:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801dd90 <pow+0x3c8>
 801dd76:	ee20 0b07 	vmul.f64	d0, d0, d7
 801dd7a:	b007      	add	sp, #28
 801dd7c:	ecbd 8b0a 	vpop	{d8-d12}
 801dd80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd84:	f000 ba9c 	b.w	801e2c0 <__math_check_oflow>
 801dd88:	00000000 	.word	0x00000000
 801dd8c:	43300000 	.word	0x43300000
 801dd90:	00000000 	.word	0x00000000
 801dd94:	7f000000 	.word	0x7f000000
 801dd98:	3ff00000 	.word	0x3ff00000
 801dd9c:	fff00000 	.word	0xfff00000
 801dda0:	ffe00000 	.word	0xffe00000
 801dda4:	7fe00000 	.word	0x7fe00000
 801dda8:	c0196aab 	.word	0xc0196aab
 801ddac:	0801e800 	.word	0x0801e800
 801ddb0:	0801f8b8 	.word	0x0801f8b8
 801ddb4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801ddb8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 801ddbc:	4610      	mov	r0, r2
 801ddbe:	ec41 0b15 	vmov	d5, r0, r1
 801ddc2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 801ddc6:	ee27 6b05 	vmul.f64	d6, d7, d5
 801ddca:	ee35 7b06 	vadd.f64	d7, d5, d6
 801ddce:	eeb0 4bc7 	vabs.f64	d4, d7
 801ddd2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 801ddd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddda:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 801de58 <pow+0x490>
 801ddde:	d52a      	bpl.n	801de36 <pow+0x46e>
 801dde0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801dde4:	ee35 5b47 	vsub.f64	d5, d5, d7
 801dde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddec:	ee35 5b06 	vadd.f64	d5, d5, d6
 801ddf0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 801ddf4:	bf58      	it	pl
 801ddf6:	eeb0 4b43 	vmovpl.f64	d4, d3
 801ddfa:	ee37 3b04 	vadd.f64	d3, d7, d4
 801ddfe:	ee34 6b43 	vsub.f64	d6, d4, d3
 801de02:	ee36 6b07 	vadd.f64	d6, d6, d7
 801de06:	ee36 6b05 	vadd.f64	d6, d6, d5
 801de0a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801de0e:	ee36 7b44 	vsub.f64	d7, d6, d4
 801de12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801de16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de1a:	d104      	bne.n	801de26 <pow+0x45e>
 801de1c:	4632      	mov	r2, r6
 801de1e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801de22:	ec43 2b17 	vmov	d7, r2, r3
 801de26:	ed8d 0b02 	vstr	d0, [sp, #8]
 801de2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801de2e:	ee26 6b00 	vmul.f64	d6, d6, d0
 801de32:	ed8d 6b04 	vstr	d6, [sp, #16]
 801de36:	ee27 0b00 	vmul.f64	d0, d7, d0
 801de3a:	b007      	add	sp, #28
 801de3c:	ecbd 8b0a 	vpop	{d8-d12}
 801de40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de44:	f000 ba33 	b.w	801e2ae <__math_check_uflow>
 801de48:	ec43 2b10 	vmov	d0, r2, r3
 801de4c:	eea7 0b00 	vfma.f64	d0, d7, d0
 801de50:	e625      	b.n	801da9e <pow+0xd6>
 801de52:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 801de60 <pow+0x498>
 801de56:	e622      	b.n	801da9e <pow+0xd6>
 801de58:	00000000 	.word	0x00000000
 801de5c:	00100000 	.word	0x00100000
	...

0801de68 <__ieee754_sqrt>:
 801de68:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801de6c:	4770      	bx	lr
	...

0801de70 <__ieee754_atan2>:
 801de70:	ee11 1a10 	vmov	r1, s2
 801de74:	eeb0 7b40 	vmov.f64	d7, d0
 801de78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de7a:	ee11 5a90 	vmov	r5, s3
 801de7e:	424b      	negs	r3, r1
 801de80:	4f59      	ldr	r7, [pc, #356]	@ (801dfe8 <__ieee754_atan2+0x178>)
 801de82:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801de86:	430b      	orrs	r3, r1
 801de88:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801de8c:	42bb      	cmp	r3, r7
 801de8e:	d80d      	bhi.n	801deac <__ieee754_atan2+0x3c>
 801de90:	ee10 ca10 	vmov	ip, s0
 801de94:	ee17 6a90 	vmov	r6, s15
 801de98:	f1cc 0000 	rsb	r0, ip, #0
 801de9c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801dea0:	ea40 000c 	orr.w	r0, r0, ip
 801dea4:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 801dea8:	42b8      	cmp	r0, r7
 801deaa:	d904      	bls.n	801deb6 <__ieee754_atan2+0x46>
 801deac:	ee37 7b01 	vadd.f64	d7, d7, d1
 801deb0:	eeb0 0b47 	vmov.f64	d0, d7
 801deb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801deb6:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 801deba:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801debe:	4308      	orrs	r0, r1
 801dec0:	d103      	bne.n	801deca <__ieee754_atan2+0x5a>
 801dec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801dec6:	f000 b897 	b.w	801dff8 <atan>
 801deca:	17ac      	asrs	r4, r5, #30
 801decc:	f004 0402 	and.w	r4, r4, #2
 801ded0:	ea53 0c0c 	orrs.w	ip, r3, ip
 801ded4:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 801ded8:	d107      	bne.n	801deea <__ieee754_atan2+0x7a>
 801deda:	2c02      	cmp	r4, #2
 801dedc:	d05c      	beq.n	801df98 <__ieee754_atan2+0x128>
 801dede:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 801dfb0 <__ieee754_atan2+0x140>
 801dee2:	2c03      	cmp	r4, #3
 801dee4:	fe06 7b00 	vseleq.f64	d7, d6, d0
 801dee8:	e7e2      	b.n	801deb0 <__ieee754_atan2+0x40>
 801deea:	4311      	orrs	r1, r2
 801deec:	d107      	bne.n	801defe <__ieee754_atan2+0x8e>
 801deee:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 801dfb8 <__ieee754_atan2+0x148>
 801def2:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 801dfc0 <__ieee754_atan2+0x150>
 801def6:	2e00      	cmp	r6, #0
 801def8:	fe27 7b06 	vselge.f64	d7, d7, d6
 801defc:	e7d8      	b.n	801deb0 <__ieee754_atan2+0x40>
 801defe:	42ba      	cmp	r2, r7
 801df00:	d10f      	bne.n	801df22 <__ieee754_atan2+0xb2>
 801df02:	4293      	cmp	r3, r2
 801df04:	f104 34ff 	add.w	r4, r4, #4294967295
 801df08:	d107      	bne.n	801df1a <__ieee754_atan2+0xaa>
 801df0a:	2c02      	cmp	r4, #2
 801df0c:	d847      	bhi.n	801df9e <__ieee754_atan2+0x12e>
 801df0e:	4b37      	ldr	r3, [pc, #220]	@ (801dfec <__ieee754_atan2+0x17c>)
 801df10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801df14:	ed93 7b00 	vldr	d7, [r3]
 801df18:	e7ca      	b.n	801deb0 <__ieee754_atan2+0x40>
 801df1a:	2c02      	cmp	r4, #2
 801df1c:	d842      	bhi.n	801dfa4 <__ieee754_atan2+0x134>
 801df1e:	4b34      	ldr	r3, [pc, #208]	@ (801dff0 <__ieee754_atan2+0x180>)
 801df20:	e7f6      	b.n	801df10 <__ieee754_atan2+0xa0>
 801df22:	42bb      	cmp	r3, r7
 801df24:	d0e3      	beq.n	801deee <__ieee754_atan2+0x7e>
 801df26:	1a9b      	subs	r3, r3, r2
 801df28:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801df2c:	ea4f 5223 	mov.w	r2, r3, asr #20
 801df30:	da1a      	bge.n	801df68 <__ieee754_atan2+0xf8>
 801df32:	2d00      	cmp	r5, #0
 801df34:	da01      	bge.n	801df3a <__ieee754_atan2+0xca>
 801df36:	323c      	adds	r2, #60	@ 0x3c
 801df38:	db19      	blt.n	801df6e <__ieee754_atan2+0xfe>
 801df3a:	ee87 0b01 	vdiv.f64	d0, d7, d1
 801df3e:	f000 f955 	bl	801e1ec <fabs>
 801df42:	f000 f859 	bl	801dff8 <atan>
 801df46:	eeb0 7b40 	vmov.f64	d7, d0
 801df4a:	2c01      	cmp	r4, #1
 801df4c:	d012      	beq.n	801df74 <__ieee754_atan2+0x104>
 801df4e:	2c02      	cmp	r4, #2
 801df50:	d019      	beq.n	801df86 <__ieee754_atan2+0x116>
 801df52:	2c00      	cmp	r4, #0
 801df54:	d0ac      	beq.n	801deb0 <__ieee754_atan2+0x40>
 801df56:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801dfc8 <__ieee754_atan2+0x158>
 801df5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801df5e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801dfd0 <__ieee754_atan2+0x160>
 801df62:	ee37 7b46 	vsub.f64	d7, d7, d6
 801df66:	e7a3      	b.n	801deb0 <__ieee754_atan2+0x40>
 801df68:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 801dfb8 <__ieee754_atan2+0x148>
 801df6c:	e7ed      	b.n	801df4a <__ieee754_atan2+0xda>
 801df6e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 801dfd8 <__ieee754_atan2+0x168>
 801df72:	e7ea      	b.n	801df4a <__ieee754_atan2+0xda>
 801df74:	ee17 1a90 	vmov	r1, s15
 801df78:	ec53 2b17 	vmov	r2, r3, d7
 801df7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801df80:	ec43 2b17 	vmov	d7, r2, r3
 801df84:	e794      	b.n	801deb0 <__ieee754_atan2+0x40>
 801df86:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801dfc8 <__ieee754_atan2+0x158>
 801df8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801df8e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801dfd0 <__ieee754_atan2+0x160>
 801df92:	ee36 7b47 	vsub.f64	d7, d6, d7
 801df96:	e78b      	b.n	801deb0 <__ieee754_atan2+0x40>
 801df98:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 801dfd0 <__ieee754_atan2+0x160>
 801df9c:	e788      	b.n	801deb0 <__ieee754_atan2+0x40>
 801df9e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 801dfe0 <__ieee754_atan2+0x170>
 801dfa2:	e785      	b.n	801deb0 <__ieee754_atan2+0x40>
 801dfa4:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 801dfd8 <__ieee754_atan2+0x168>
 801dfa8:	e782      	b.n	801deb0 <__ieee754_atan2+0x40>
 801dfaa:	bf00      	nop
 801dfac:	f3af 8000 	nop.w
 801dfb0:	54442d18 	.word	0x54442d18
 801dfb4:	c00921fb 	.word	0xc00921fb
 801dfb8:	54442d18 	.word	0x54442d18
 801dfbc:	3ff921fb 	.word	0x3ff921fb
 801dfc0:	54442d18 	.word	0x54442d18
 801dfc4:	bff921fb 	.word	0xbff921fb
 801dfc8:	33145c07 	.word	0x33145c07
 801dfcc:	3ca1a626 	.word	0x3ca1a626
 801dfd0:	54442d18 	.word	0x54442d18
 801dfd4:	400921fb 	.word	0x400921fb
	...
 801dfe0:	54442d18 	.word	0x54442d18
 801dfe4:	3fe921fb 	.word	0x3fe921fb
 801dfe8:	7ff00000 	.word	0x7ff00000
 801dfec:	0801f860 	.word	0x0801f860
 801dff0:	0801f848 	.word	0x0801f848
 801dff4:	00000000 	.word	0x00000000

0801dff8 <atan>:
 801dff8:	b538      	push	{r3, r4, r5, lr}
 801dffa:	eeb0 7b40 	vmov.f64	d7, d0
 801dffe:	ee17 5a90 	vmov	r5, s15
 801e002:	4b73      	ldr	r3, [pc, #460]	@ (801e1d0 <atan+0x1d8>)
 801e004:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801e008:	429c      	cmp	r4, r3
 801e00a:	d913      	bls.n	801e034 <atan+0x3c>
 801e00c:	4b71      	ldr	r3, [pc, #452]	@ (801e1d4 <atan+0x1dc>)
 801e00e:	429c      	cmp	r4, r3
 801e010:	d803      	bhi.n	801e01a <atan+0x22>
 801e012:	d107      	bne.n	801e024 <atan+0x2c>
 801e014:	ee10 3a10 	vmov	r3, s0
 801e018:	b123      	cbz	r3, 801e024 <atan+0x2c>
 801e01a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e01e:	eeb0 0b47 	vmov.f64	d0, d7
 801e022:	bd38      	pop	{r3, r4, r5, pc}
 801e024:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 801e160 <atan+0x168>
 801e028:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 801e168 <atan+0x170>
 801e02c:	2d00      	cmp	r5, #0
 801e02e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801e032:	e7f4      	b.n	801e01e <atan+0x26>
 801e034:	4b68      	ldr	r3, [pc, #416]	@ (801e1d8 <atan+0x1e0>)
 801e036:	429c      	cmp	r4, r3
 801e038:	d811      	bhi.n	801e05e <atan+0x66>
 801e03a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801e03e:	429c      	cmp	r4, r3
 801e040:	d80a      	bhi.n	801e058 <atan+0x60>
 801e042:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 801e046:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 801e170 <atan+0x178>
 801e04a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801e04e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801e052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e056:	dce2      	bgt.n	801e01e <atan+0x26>
 801e058:	f04f 33ff 	mov.w	r3, #4294967295
 801e05c:	e013      	b.n	801e086 <atan+0x8e>
 801e05e:	f000 f8c5 	bl	801e1ec <fabs>
 801e062:	4b5e      	ldr	r3, [pc, #376]	@ (801e1dc <atan+0x1e4>)
 801e064:	429c      	cmp	r4, r3
 801e066:	d84f      	bhi.n	801e108 <atan+0x110>
 801e068:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801e06c:	429c      	cmp	r4, r3
 801e06e:	d841      	bhi.n	801e0f4 <atan+0xfc>
 801e070:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 801e074:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801e078:	2300      	movs	r3, #0
 801e07a:	eea0 5b07 	vfma.f64	d5, d0, d7
 801e07e:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e082:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e086:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e178 <atan+0x180>
 801e08a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e08e:	ee24 5b04 	vmul.f64	d5, d4, d4
 801e092:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e180 <atan+0x188>
 801e096:	eea5 3b06 	vfma.f64	d3, d5, d6
 801e09a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e188 <atan+0x190>
 801e09e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e0a2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e190 <atan+0x198>
 801e0a6:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e0aa:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 801e198 <atan+0x1a0>
 801e0ae:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e0b2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 801e1a0 <atan+0x1a8>
 801e0b6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e1a8 <atan+0x1b0>
 801e0ba:	eea6 3b05 	vfma.f64	d3, d6, d5
 801e0be:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e1b0 <atan+0x1b8>
 801e0c2:	eea5 2b06 	vfma.f64	d2, d5, d6
 801e0c6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e1b8 <atan+0x1c0>
 801e0ca:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e0ce:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 801e1c0 <atan+0x1c8>
 801e0d2:	eea6 2b05 	vfma.f64	d2, d6, d5
 801e0d6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 801e1c8 <atan+0x1d0>
 801e0da:	1c5a      	adds	r2, r3, #1
 801e0dc:	eea2 6b05 	vfma.f64	d6, d2, d5
 801e0e0:	ee26 6b05 	vmul.f64	d6, d6, d5
 801e0e4:	eea3 6b04 	vfma.f64	d6, d3, d4
 801e0e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e0ec:	d121      	bne.n	801e132 <atan+0x13a>
 801e0ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e0f2:	e794      	b.n	801e01e <atan+0x26>
 801e0f4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e0f8:	2301      	movs	r3, #1
 801e0fa:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e0fe:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e102:	ee85 7b00 	vdiv.f64	d7, d5, d0
 801e106:	e7be      	b.n	801e086 <atan+0x8e>
 801e108:	4b35      	ldr	r3, [pc, #212]	@ (801e1e0 <atan+0x1e8>)
 801e10a:	429c      	cmp	r4, r3
 801e10c:	d20b      	bcs.n	801e126 <atan+0x12e>
 801e10e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 801e112:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801e116:	ee30 5b47 	vsub.f64	d5, d0, d7
 801e11a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801e11e:	2302      	movs	r3, #2
 801e120:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e124:	e7af      	b.n	801e086 <atan+0x8e>
 801e126:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e12a:	2303      	movs	r3, #3
 801e12c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e130:	e7a9      	b.n	801e086 <atan+0x8e>
 801e132:	4a2c      	ldr	r2, [pc, #176]	@ (801e1e4 <atan+0x1ec>)
 801e134:	492c      	ldr	r1, [pc, #176]	@ (801e1e8 <atan+0x1f0>)
 801e136:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801e13a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e13e:	ed93 5b00 	vldr	d5, [r3]
 801e142:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e146:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e14a:	ed92 7b00 	vldr	d7, [r2]
 801e14e:	2d00      	cmp	r5, #0
 801e150:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e154:	bfb8      	it	lt
 801e156:	eeb1 7b47 	vneglt.f64	d7, d7
 801e15a:	e760      	b.n	801e01e <atan+0x26>
 801e15c:	f3af 8000 	nop.w
 801e160:	54442d18 	.word	0x54442d18
 801e164:	bff921fb 	.word	0xbff921fb
 801e168:	54442d18 	.word	0x54442d18
 801e16c:	3ff921fb 	.word	0x3ff921fb
 801e170:	8800759c 	.word	0x8800759c
 801e174:	7e37e43c 	.word	0x7e37e43c
 801e178:	e322da11 	.word	0xe322da11
 801e17c:	3f90ad3a 	.word	0x3f90ad3a
 801e180:	24760deb 	.word	0x24760deb
 801e184:	3fa97b4b 	.word	0x3fa97b4b
 801e188:	a0d03d51 	.word	0xa0d03d51
 801e18c:	3fb10d66 	.word	0x3fb10d66
 801e190:	c54c206e 	.word	0xc54c206e
 801e194:	3fb745cd 	.word	0x3fb745cd
 801e198:	920083ff 	.word	0x920083ff
 801e19c:	3fc24924 	.word	0x3fc24924
 801e1a0:	5555550d 	.word	0x5555550d
 801e1a4:	3fd55555 	.word	0x3fd55555
 801e1a8:	52defd9a 	.word	0x52defd9a
 801e1ac:	bfadde2d 	.word	0xbfadde2d
 801e1b0:	2c6a6c2f 	.word	0x2c6a6c2f
 801e1b4:	bfa2b444 	.word	0xbfa2b444
 801e1b8:	af749a6d 	.word	0xaf749a6d
 801e1bc:	bfb3b0f2 	.word	0xbfb3b0f2
 801e1c0:	fe231671 	.word	0xfe231671
 801e1c4:	bfbc71c6 	.word	0xbfbc71c6
 801e1c8:	9998ebc4 	.word	0x9998ebc4
 801e1cc:	bfc99999 	.word	0xbfc99999
 801e1d0:	440fffff 	.word	0x440fffff
 801e1d4:	7ff00000 	.word	0x7ff00000
 801e1d8:	3fdbffff 	.word	0x3fdbffff
 801e1dc:	3ff2ffff 	.word	0x3ff2ffff
 801e1e0:	40038000 	.word	0x40038000
 801e1e4:	0801f898 	.word	0x0801f898
 801e1e8:	0801f878 	.word	0x0801f878

0801e1ec <fabs>:
 801e1ec:	ec51 0b10 	vmov	r0, r1, d0
 801e1f0:	4602      	mov	r2, r0
 801e1f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e1f6:	ec43 2b10 	vmov	d0, r2, r3
 801e1fa:	4770      	bx	lr

0801e1fc <with_errno>:
 801e1fc:	b510      	push	{r4, lr}
 801e1fe:	ed2d 8b02 	vpush	{d8}
 801e202:	eeb0 8b40 	vmov.f64	d8, d0
 801e206:	4604      	mov	r4, r0
 801e208:	f7ff fb5c 	bl	801d8c4 <__errno>
 801e20c:	eeb0 0b48 	vmov.f64	d0, d8
 801e210:	ecbd 8b02 	vpop	{d8}
 801e214:	6004      	str	r4, [r0, #0]
 801e216:	bd10      	pop	{r4, pc}

0801e218 <xflow>:
 801e218:	b082      	sub	sp, #8
 801e21a:	b158      	cbz	r0, 801e234 <xflow+0x1c>
 801e21c:	eeb1 7b40 	vneg.f64	d7, d0
 801e220:	ed8d 7b00 	vstr	d7, [sp]
 801e224:	ed9d 7b00 	vldr	d7, [sp]
 801e228:	2022      	movs	r0, #34	@ 0x22
 801e22a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e22e:	b002      	add	sp, #8
 801e230:	f7ff bfe4 	b.w	801e1fc <with_errno>
 801e234:	eeb0 7b40 	vmov.f64	d7, d0
 801e238:	e7f2      	b.n	801e220 <xflow+0x8>
 801e23a:	0000      	movs	r0, r0
 801e23c:	0000      	movs	r0, r0
	...

0801e240 <__math_uflow>:
 801e240:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e248 <__math_uflow+0x8>
 801e244:	f7ff bfe8 	b.w	801e218 <xflow>
 801e248:	00000000 	.word	0x00000000
 801e24c:	10000000 	.word	0x10000000

0801e250 <__math_oflow>:
 801e250:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e258 <__math_oflow+0x8>
 801e254:	f7ff bfe0 	b.w	801e218 <xflow>
 801e258:	00000000 	.word	0x00000000
 801e25c:	70000000 	.word	0x70000000

0801e260 <__math_divzero>:
 801e260:	b082      	sub	sp, #8
 801e262:	2800      	cmp	r0, #0
 801e264:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 801e268:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801e26c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801e270:	ed8d 7b00 	vstr	d7, [sp]
 801e274:	ed9d 0b00 	vldr	d0, [sp]
 801e278:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 801e288 <__math_divzero+0x28>
 801e27c:	2022      	movs	r0, #34	@ 0x22
 801e27e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801e282:	b002      	add	sp, #8
 801e284:	f7ff bfba 	b.w	801e1fc <with_errno>
	...

0801e290 <__math_invalid>:
 801e290:	eeb0 7b40 	vmov.f64	d7, d0
 801e294:	eeb4 7b47 	vcmp.f64	d7, d7
 801e298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e29c:	ee30 6b40 	vsub.f64	d6, d0, d0
 801e2a0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801e2a4:	d602      	bvs.n	801e2ac <__math_invalid+0x1c>
 801e2a6:	2021      	movs	r0, #33	@ 0x21
 801e2a8:	f7ff bfa8 	b.w	801e1fc <with_errno>
 801e2ac:	4770      	bx	lr

0801e2ae <__math_check_uflow>:
 801e2ae:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801e2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2b6:	d102      	bne.n	801e2be <__math_check_uflow+0x10>
 801e2b8:	2022      	movs	r0, #34	@ 0x22
 801e2ba:	f7ff bf9f 	b.w	801e1fc <with_errno>
 801e2be:	4770      	bx	lr

0801e2c0 <__math_check_oflow>:
 801e2c0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 801e2e0 <__math_check_oflow+0x20>
 801e2c4:	eeb0 7bc0 	vabs.f64	d7, d0
 801e2c8:	eeb4 7b46 	vcmp.f64	d7, d6
 801e2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2d0:	dd02      	ble.n	801e2d8 <__math_check_oflow+0x18>
 801e2d2:	2022      	movs	r0, #34	@ 0x22
 801e2d4:	f7ff bf92 	b.w	801e1fc <with_errno>
 801e2d8:	4770      	bx	lr
 801e2da:	bf00      	nop
 801e2dc:	f3af 8000 	nop.w
 801e2e0:	ffffffff 	.word	0xffffffff
 801e2e4:	7fefffff 	.word	0x7fefffff

0801e2e8 <_init>:
 801e2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2ea:	bf00      	nop
 801e2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e2ee:	bc08      	pop	{r3}
 801e2f0:	469e      	mov	lr, r3
 801e2f2:	4770      	bx	lr

0801e2f4 <_fini>:
 801e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2f6:	bf00      	nop
 801e2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e2fa:	bc08      	pop	{r3}
 801e2fc:	469e      	mov	lr, r3
 801e2fe:	4770      	bx	lr
